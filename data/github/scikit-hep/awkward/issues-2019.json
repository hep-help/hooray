[
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Test pipelines with PR.",
  "closed_at":"2019-08-15T22:04:20Z",
  "comments":0,
  "created_at":"2019-08-15T20:44:33Z",
  "draft":false,
  "id":481330646,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzA3ODUxMTc2",
  "number":1,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-08-15T22:04:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Semicolon and let's move this to a PR.",
  "updated_at":"2019-08-15T22:04:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-08-22T20:24:46Z",
  "comments":0,
  "created_at":"2019-08-19T21:00:28Z",
  "draft":false,
  "id":482525971,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzA4NzgxMDcx",
  "number":2,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-08-22T20:24:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Minimally working ListArray",
  "updated_at":"2019-08-22T20:24:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is the Numba version of what I just did (in PR #2) for C++.",
  "closed_at":"2019-08-26T21:50:58Z",
  "comments":1,
  "created_at":"2019-08-22T20:28:40Z",
  "draft":false,
  "id":484196809,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzEwMTI3MDk0",
  "number":3,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-08-26T21:50:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Develop Numba extensions for NumpyArray and ListOffsetArray",
  "updated_at":"2019-08-26T21:51:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-08-27T21:55:33Z",
  "comments":0,
  "created_at":"2019-08-26T22:37:30Z",
  "draft":false,
  "id":485487396,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzExMTIzMjc1",
  "number":4,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-08-27T21:55:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Design an \"identity\" system, like the surrogate key in PartiQL.",
  "updated_at":"2019-08-27T21:55:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-08-29T22:19:25Z",
  "comments":0,
  "created_at":"2019-08-27T22:32:23Z",
  "draft":false,
  "id":486066299,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzExNTk0NTA0",
  "number":5,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-08-29T22:19:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Numba version of the Identity class.",
  "updated_at":"2019-08-29T22:19:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-08-30T22:33:28Z",
  "comments":0,
  "created_at":"2019-08-29T22:30:27Z",
  "draft":false,
  "id":487204121,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzEyNTE3NDY2",
  "number":6,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-08-30T22:33:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Iterators, deep iteration, iteration in Python and Numba.",
  "updated_at":"2019-08-30T22:33:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Contrary to the original intention, this PR extends `Index`, `Identifier`, and `ListOffsetArray` to accept 32-bit and 64-bit arrays (zero-copy). The `__getitem__` work will begin in the next PR.",
  "closed_at":"2019-09-02T19:52:01Z",
  "comments":0,
  "created_at":"2019-08-30T22:39:05Z",
  "draft":false,
  "id":487693942,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzEyOTAyNjcx",
  "number":7,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-09-02T19:52:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"32-bit and 64-bit versions of Index, Identifer, and ListOffsetArray (and all future Arrays).",
  "updated_at":"2019-09-02T19:52:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Let's do the C++ and the Numba in separate PRs.",
  "closed_at":"2019-09-21T17:26:41Z",
  "comments":0,
  "created_at":"2019-09-02T19:57:14Z",
  "draft":false,
  "id":488305131,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzEzMzU2NDUz",
  "number":8,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-09-21T17:26:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Deep __getitem__ in C++.",
  "updated_at":"2019-09-21T17:26:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"So that we can uncomment [these tests](https://github.com/jpivarski/awkward-1.0/blob/5af7e6b8eab88720c102eb62117f91b29f50b4e1/tests/test_PR4_design_surrogate_key.py#L84-L90).",
  "closed_at":"2019-09-21T21:56:47Z",
  "comments":0,
  "created_at":"2019-09-21T19:54:31Z",
  "draft":false,
  "id":496694562,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzE5OTg2NDkx",
  "number":9,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-09-21T21:56:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Propagate identity through NumpyArray::getitem.",
  "updated_at":"2019-09-21T21:56:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is so that we can do tests purely on the C++ side, avoiding the time required to link the Python module (dominates compilation time).",
  "closed_at":"2019-09-26T17:57:45Z",
  "comments":1,
  "created_at":"2019-09-21T22:11:41Z",
  "draft":false,
  "id":496707086,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzE5OTk1Mjgx",
  "number":10,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[WIP] Implement RawArray::getitem with tests.",
  "updated_at":"2019-09-26T17:57:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-09-26T18:51:17Z",
  "comments":0,
  "created_at":"2019-09-23T18:17:13Z",
  "draft":false,
  "id":497251106,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzIwNDE4NDMy",
  "number":11,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-09-26T18:51:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implementing ListArray is the quickest way to understanding if the getitem design is right.",
  "updated_at":"2019-09-26T18:51:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-10-02T15:53:58Z",
  "comments":0,
  "created_at":"2019-09-26T20:10:51Z",
  "draft":false,
  "id":499092012,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzIxODg3OTI3",
  "number":12,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-10-02T15:53:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Access ListArray::getitem in Numba.",
  "updated_at":"2019-10-02T15:54:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"To provide feedback about the index position of the error (and therefore the Identity, too, if that's available).",
  "closed_at":"2019-10-04T17:25:18Z",
  "comments":0,
  "created_at":"2019-10-02T16:15:07Z",
  "draft":false,
  "id":501589814,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzIzODMzMDgx",
  "number":13,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-10-04T17:25:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Error-handling as a struct, rather than just a string.",
  "updated_at":"2019-10-04T17:26:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-10-04T22:40:59Z",
  "comments":0,
  "created_at":"2019-10-04T17:39:35Z",
  "draft":false,
  "id":502760686,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzI0NzgxOTY5",
  "number":14,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-10-04T22:40:59Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Finish up getitem: RawArray/NumpyArray/ListArray/ListOffsetArray should handle all slices types but newaxis.",
  "updated_at":"2019-10-04T22:41:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-10-10T14:54:10Z",
  "comments":0,
  "created_at":"2019-10-05T15:27:14Z",
  "draft":false,
  "id":502977109,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzI0OTQ5MzM4",
  "number":15,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-10-10T14:54:10Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implement all of the getitem cases for NumpyArray/ListArray in Numba.",
  "updated_at":"2019-10-10T14:54:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-10-10T22:30:01Z",
  "comments":0,
  "created_at":"2019-10-10T17:50:59Z",
  "draft":false,
  "id":505419342,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzI2ODU2Njc0",
  "number":16,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-10-10T22:30:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Finish getitem for RawArray.",
  "updated_at":"2019-10-10T22:30:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-10-14T13:19:12Z",
  "comments":0,
  "created_at":"2019-10-14T13:08:37Z",
  "draft":false,
  "id":506642992,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzI3NzkyNjM0",
  "number":17,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-10-14T13:19:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Put all array classes in an 'array' directory ('include', 'src', and '_numba').",
  "updated_at":"2019-10-14T13:19:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-10-22T19:07:49Z",
  "comments":0,
  "created_at":"2019-10-14T14:06:12Z",
  "draft":false,
  "id":506676256,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzI3ODE4ODM3",
  "number":18,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-10-22T19:07:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implement `Fillable`, which are append-only, non-readable arrays.",
  "updated_at":"2019-10-22T19:07:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-11-03T21:05:47Z",
  "comments":1,
  "created_at":"2019-10-22T20:31:55Z",
  "draft":false,
  "id":510892080,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzMxMTg2MDg1",
  "number":19,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-11-03T21:05:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Use a JSON library to feed FillableArray.",
  "updated_at":"2019-11-03T21:05:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Reduce duplication in templating and extend from two cases to three: `ListArray32`, `ListArrayU32`, `ListArray64`. Unsigned 64-bit is not included because scalar indexes are `int64_t` (signed), which is crucial, to allow for negative indexing. There's not much we can do for unsigned 64-bit; it's a good thing that neither ROOT nor Arrow use it.",
  "closed_at":"2019-11-11T21:24:40Z",
  "comments":0,
  "created_at":"2019-11-08T10:59:39Z",
  "draft":false,
  "id":519950650,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzM4NjIzNzI4",
  "number":20,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-11-11T21:24:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Support unsigned index type for 32-bit.",
  "updated_at":"2019-11-11T21:24:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-11-12T21:50:52Z",
  "comments":0,
  "created_at":"2019-11-11T21:44:58Z",
  "draft":false,
  "id":521204499,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzM5NjI5OTI4",
  "number":21,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-11-12T21:50:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Create EmptyArray with unknown type.",
  "updated_at":"2019-11-12T21:50:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is how users will make new datasets from old ones in a fast Numba function.",
  "closed_at":"2019-11-13T21:54:05Z",
  "comments":0,
  "created_at":"2019-11-12T21:55:44Z",
  "draft":false,
  "id":521826193,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzQwMTMyMTU1",
  "number":22,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-11-13T21:54:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"FillableArrays must be usable in Numba.",
  "updated_at":"2019-11-13T21:54:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-11-20T12:38:58Z",
  "comments":0,
  "created_at":"2019-11-13T22:42:01Z",
  "draft":false,
  "id":522515239,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzQwNzAyNDcy",
  "number":23,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-11-20T12:38:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Introduce RegularArray for rectilinear blocks of any type of awkward array.",
  "updated_at":"2019-11-20T12:39:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Sequential:\r\n\r\n   * [x] Replace `Content::__getitem__`'s promotion to `ListArray` with a promotion to `RegularArray`.\r\n   * [x] `ListArray`'s and `ListOffsetArray`'s non-advanced `__getitem__` array should now output a `RegularArray`.\r\n   * [x] All getitem arrays should handle non-flat `SliceArray` by wrapping in `RegularArrays`.\r\n   * [x] All of the above should happen in Numba, too.\r\n\r\n### Independent:\r\n\r\n   * [x] Forgot `RegularArray::tojson_part`.\r\n   * [x] Check the FIXME in `awkward_listarray_getitem_next_array_advanced`.\r\n   * [x] `setid` should not be allowed on data that can be reached by multiple paths (which will break the `ListArray` ids above, unfortunately).\r\n",
  "closed_at":"2019-11-20T23:15:07Z",
  "comments":0,
  "created_at":"2019-11-20T12:50:38Z",
  "draft":false,
  "id":525783801,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzQzMzM5MzY3",
  "number":24,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-11-20T23:15:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start using RegularArray everywhere it needs to be used.",
  "updated_at":"2019-11-20T23:15:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-11-27T22:59:35Z",
  "comments":0,
  "created_at":"2019-11-20T23:19:07Z",
  "draft":false,
  "id":526271035,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzQzNzY5MTUx",
  "number":25,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-11-27T22:59:35Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start writing RecordArray (C++ and Fillable, but not Numba).",
  "updated_at":"2019-11-27T22:59:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-12-03T19:14:09Z",
  "comments":0,
  "created_at":"2019-11-27T23:03:43Z",
  "draft":false,
  "id":529609739,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzQ2NDU1NjQy",
  "number":26,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-12-03T19:14:09Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add RecordArray (and Record) to Numba.",
  "updated_at":"2019-12-03T19:14:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"**Original title:** Make types user-configurable and add the ability to \"dress\" types.\r\n\r\nEventually, this is how behaviors will be added (e.g. Lorentz methods on records with the right fields).",
  "closed_at":"2019-12-06T20:55:21Z",
  "comments":0,
  "created_at":"2019-12-03T19:26:53Z",
  "draft":false,
  "id":532210879,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzQ4NTA4MTUw",
  "number":28,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-12-06T20:55:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start the high-level layer: awkward.Array.",
  "updated_at":"2019-12-06T20:55:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Just started by duplicating `test_PR019_use_json_library.cpp`",
  "closed_at":"2020-01-20T23:33:39Z",
  "comments":18,
  "created_at":"2019-12-06T04:19:18Z",
  "draft":false,
  "id":533736802,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzQ5NzU3Mjc3",
  "number":30,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-01-20T23:33:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Starting cpp version of PR026 test ",
  "updated_at":"2020-01-20T23:33:44Z",
  "user":"MDQ6VXNlcjI2OTc1NTMw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-12-11T01:21:50Z",
  "comments":0,
  "created_at":"2019-12-06T20:59:34Z",
  "draft":false,
  "id":534254958,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzUwMTk3NDcy",
  "number":31,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-12-11T01:21:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Now the types need to pass through Numba.",
  "updated_at":"2019-12-11T01:21:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Making `DressedType` a new `Type` object complicates the hierarchy (different structure than the bare type). Each `Type` has an (unused) `parameters`, which should instead be used to augment the existing `Type` objects in an unchanged hierarchy.\r\n\r\nThe wrapper class (currently the \"dress\") can become an entry in the `parameters` named `__class__`, and this leaves room for a Numba wrapper and higher-array wrapper classes.\r\n\r\nThe `Dress` and `PyDress` classes should go away, but the `Parameters` and `PyParameters` stay. All of the existing `Types` must now be templated on the `Parameters` type. Its parameters should probably become `std::map<std::string, py::object>` rather than `py::dict` so that the parameter names, at least, can be inspected on the C++ side. Because of Numba (#31), all of those Python objects need to be hashable and pickleable, so there's a natural serialization that can be performed on the C++ side (because `PyParameters` defines the picklization into bytestrings).",
  "closed_at":"2019-12-13T19:59:34Z",
  "comments":0,
  "created_at":"2019-12-11T02:09:13Z",
  "draft":false,
  "id":536098089,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzUxNjg5ODU1",
  "number":32,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-12-13T19:59:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Replace DressedType with parameters on all the Types.",
  "updated_at":"2019-12-13T19:59:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-12-19T20:21:08Z",
  "comments":0,
  "created_at":"2019-12-13T20:03:30Z",
  "draft":false,
  "id":537752904,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzUzMDUzMjQ2",
  "number":33,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-12-19T20:21:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Creating a demo for Coffea will motivate improvements.",
  "updated_at":"2019-12-19T20:21:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"C and C++ files automatically formatted with clang-format code. Please, see \r\nhttps://electronjs.org/docs/development/clang-format for more details.\r\n\r\n@jpivarski - you can also integrate clang-format directly into Atom.",
  "closed_at":"2019-12-18T06:52:53Z",
  "comments":1,
  "created_at":"2019-12-17T16:55:39Z",
  "draft":false,
  "id":539191944,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzU0MjEwNzc1",
  "number":34,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[WIP] Test clang-format",
  "updated_at":"2019-12-18T06:53:10Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Apply fixes from **clang-tidy** with **-checks**='-*,\r\n   boost-use-to-string,\r\n   misc-string-compare,\r\n   misc-uniqueptr-reset-release,\r\n   modernize-deprecated-headers,\r\n   modernize-make-shared,\r\n   modernize-use-bool-literals,\r\n   modernize-use-equals-delete,\r\n   modernize-use-nullptr,\r\n   modernize-use-override,\r\n   performance-unnecessary-copy-initialization,\r\n   readability-container-size-empty,\r\n   readability-redundant-string-cstr,\r\n   readability-static-definition-in-anonymous-namespace,\r\n   readability-uniqueptr-delete-release'\r\n\r\nhttps://clang.llvm.org/extra/clang-tidy/\r\n\r\n@jpivarski - please, review and comment",
  "closed_at":"2019-12-18T15:43:58Z",
  "comments":6,
  "created_at":"2019-12-18T11:24:44Z",
  "draft":false,
  "id":539621669,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzU0NTYzOTk2",
  "number":35,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[WIP] Test clang-tidy with selected checks",
  "updated_at":"2019-12-20T09:18:17Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-12-20T21:57:24Z",
  "comments":0,
  "created_at":"2019-12-19T20:26:05Z",
  "draft":false,
  "id":540543112,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzU1MzM3NDg5",
  "number":36,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-12-20T21:57:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Continue working on the Coffea demo.",
  "updated_at":"2019-12-20T21:57:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-12-26T22:32:25Z",
  "comments":0,
  "created_at":"2019-12-26T17:24:29Z",
  "draft":false,
  "id":542612983,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzU3MDE3OTA0",
  "number":37,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-12-26T22:32:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Replace 'lookup' and 'reverselookup' with a single property (that acts like 'reverselookup').",
  "updated_at":"2019-12-26T22:32:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2019-12-28T16:07:25Z",
  "comments":0,
  "created_at":"2019-12-26T22:45:29Z",
  "draft":false,
  "id":542687373,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzU3MDgwNzgz",
  "number":38,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2019-12-28T16:07:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Static methods to make empty arrays of a given type.",
  "updated_at":"2019-12-28T16:07:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-01-04T01:49:50Z",
  "comments":0,
  "created_at":"2019-12-28T16:10:24Z",
  "draft":false,
  "id":543225239,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0MzU3NTM1MTQ0",
  "number":39,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-01-04T01:49:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Replacing hanging types with Parameters on each Content.",
  "updated_at":"2020-01-04T01:49:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The samples can be found here: https://github.com/diana-hep/oamap/tree/master/tests/samples\r\n\r\nThey cover a lot of cases.",
  "closed_at":"2020-07-17T01:54:01Z",
  "comments":1,
  "created_at":"2019-03-28T15:48:52Z",
  "id":583469957,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU1ODM0Njk5NTc=",
  "number":172,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Copy the OAMap Parquet samples and make awkward.arrow.fromparquet tests",
  "updated_at":"2020-07-17T01:54:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 }
]