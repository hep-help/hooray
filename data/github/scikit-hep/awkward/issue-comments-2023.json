[
 {
  "author_association":"COLLABORATOR",
  "body":"I *think* this issue can be closed, now. With `ak.transform`, it's fairly easy to write a generic recursion that can build the mask from an index array.\r\n\r\nFor \"boolean mask to index\", we have\r\n```python\r\nx = ak.Array([[1, 2, 3], [], [4, 5], [5, 4, 2, 1]])\r\nmask = x > 3\r\n\r\nj = ak.local_index(x)\r\ni = j[mask]\r\n```\r\n\r\nMeanwhile, for \"index to boolean mask\", one can recurse down to the penultimate dimension, and build the mask as in this issue description:\r\n```python\r\ndef index_to_mask(index, array):\r\n    def get_layout_offsets(layout):\r\n        if layout.is_numpy:\r\n            (size,) = layout.inner_shape\r\n            offset = np.arange(0, size * layout.length + 1, size)\r\n        elif layout.is_regular:\r\n            offset = np.arange(0, layout.size * layout.length + 1, layout.size)\r\n        else:\r\n            layout = layout.to_ListOffsetArray64(True)\r\n            offset = np.asarray(layout.offsets.data)\r\n        return layout, offset\r\n\r\n    def apply(inputs, **kwargs):\r\n        index_layout, array_layout = inputs\r\n        if index_layout.purelist_depth != 2:\r\n            return\r\n        assert array_layout.purelist_depth == index_layout.purelist_depth\r\n\r\n        array_layout, array_offset = get_layout_offsets(array_layout)\r\n        global_index = ak.flatten(ak.Array(index_layout) + ak.Array(array_offset[:-1]))\r\n\r\n        mask = np.zeros(array_offset[-1], dtype=np.bool_)\r\n        mask[global_index] = True\r\n        return ak.contents.ListOffsetArray(\r\n            ak.index.Index64(array_offset), content=ak.contents.NumpyArray(mask)\r\n        )\r\n\r\n    return ak.transform(apply, index, array)\r\n\r\nmask_2 = index_to_mask(i, x)\r\nassert ak.to_list(mask) == ak.to_list(mask_2)\r\n```\r\n\r\nThis function looks complicated only because it handles multiple list types. ",
  "created_at":"2023-07-02T17:17:34Z",
  "id":1616739141,
  "issue":497,
  "node_id":"IC_kwDODBCWws5gXXtF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:42:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I *think* we can close this: Awkward _doesn't_ implement the same sorting routines as NumPy, but we do support `kind`. Now that we have dedicated NEP-18 entrypoints, we translate the kind to a stable vs non-stable sort. ",
  "created_at":"2023-11-08T11:50:49Z",
  "id":1801732971,
  "issue":615,
  "node_id":"IC_kwDODBCWws5rZENr",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-11-08T11:50:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Completed by #1904.",
  "created_at":"2023-01-05T14:31:11Z",
  "id":1372292862,
  "issue":832,
  "node_id":"IC_kwDODBCWws5Ry4b-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T14:31:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I *think* this issue can be closed following the addition of #2365!",
  "created_at":"2023-07-02T17:45:47Z",
  "id":1616747492,
  "issue":981,
  "node_id":"IC_kwDODBCWws5gXZvk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:45:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this can be closed with `main`:\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nx = ak.contents.NumpyArray(np.arange(10), parameters={\"__record__\": \"mm_pad\"})\r\ny = ak.contents.IndexedArray(ak.index.Index64(np.arange(10)), x)\r\nassert ak._do.mergeable(x, y)\r\n```",
  "created_at":"2023-02-18T17:55:32Z",
  "id":1435727652,
  "issue":1041,
  "node_id":"IC_kwDODBCWws5Vk3ck",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-18T17:55:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"If I were to call `ak.to_buffers(ak.to_packed(awk))` and compare the results of those for equality, are there any big edge cases left beyond `Union[Option[X], Y] != Union[Option[X], Option[Y]]` (https://github.com/scikit-hep/awkward/issues/2182#issuecomment-1412318839)?\r\n\r\nE.g.:\r\n\r\n```python\r\nimport awkward as ak, numpy as np\r\n\r\n\r\ndef equal_awkward(a: ak.Array, b: ak.Array) -> bool:\r\n    if len(a) != len(b):\r\n        return False\r\n\r\n    a_form, _, a_buffers = ak.to_buffers(ak.to_packed(a))\r\n    b_form, _, b_buffers = ak.to_buffers(ak.to_packed(b))\r\n\r\n    if a_form != b_form:\r\n        return False\r\n    if set(a_buffers.keys()) != set(b_buffers.keys()):\r\n        return False\r\n    for k in a_buffers.keys():\r\n        if not np.array_equal(a_buffers[k], b_buffers[k], equal_nan=True):\r\n            return False    \r\n\r\n    return True\r\n```",
  "created_at":"2023-02-02T15:58:28Z",
  "id":1413973265,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5UR4UR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T16:07:25Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It depends upon how you define equality. If you mean at the `ak.type(array)` + buffers level, then `packed` doesn't produce a totally unique layout. We have a [helper function](https://github.com/scikit-hep/awkward/blob/4cc61df3fb08fff965b132f8a5411aed7a3b77ef/src/awkward/_util.py#L767-L867) internally to address that.\r\n\r\nFor example, an `IndexedArray` can wrap a `RecordArray`, but this is not visible at the `type` level. Additionally, there are different option types that are type-level equivalent, but form-level distinct. Finally, there is `RegularArray` and 2D+ `NumpyArray` that are both regular. That's all off the top of my head.\r\n\r\n",
  "created_at":"2023-02-02T16:59:52Z",
  "id":1414067435,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5USPTr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T17:00:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> It depends upon how you define equality. \r\n\r\nI think I'd say \"interchangeable at the high level API\". So I could pass either to computations and get the same result (within floating point accuracy).\r\n\r\nThe function you point out looks great for this use-case. Are there barriers to exporting it?",
  "created_at":"2023-02-02T17:22:30Z",
  "id":1414101910,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5USXuW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T17:22:30Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"```python\r\ny = ak.packed(x)\r\n```\r\n\r\nshould satisfy:\r\n\r\n  * `x.tolist() == y.tolist()`\r\n  * `x.type == y.type` (or `str(x.type) == str(y.type)`; there are different levels on which types can be compared, but and I _think_ that the equivalence classes of `Type.__eq__` are the same as those of `Type.__str__`)\r\n\r\nI'm also pretty sure that `ak._util.arrays_approx_equal` checks the equivalent of the above (faster than actually calling `tolist`, though).\r\n\r\nThe thing that `ak.packed` changes is the layout/form.\r\n\r\n> The function you point out looks great for this use-case. Are there barriers to exporting it?\r\n\r\nNumPy has a `np.testing` submodule. Maybe we should have an `ak.testing` submodule and put this there?",
  "created_at":"2023-02-02T19:13:23Z",
  "id":1414235442,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5US4Uy",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-02T19:13:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, I have confused two separate thought processes when writing my reply, which is something picked up on. Indeed, the `ak.type` matches. I meant to say that it's not trivial to get the `type` and projected buffers of the layouts, which is what we want for fast comparison!\r\n\r\nI agree that it might make sense. I *think* dask-awkward roll something similar for their test suite.",
  "created_at":"2023-02-02T19:44:36Z",
  "id":1414274595,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5UTB4j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T19:44:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> NumPy has a np.testing submodule. Maybe we should have an ak.testing submodule and put this there?\r\n\r\nI typically expect functions under a `.testing` module to throw exceptions when things aren't equal, and to trade efficiency for helpful reporting in those exceptions. I think this is closer to `np.allclose`, `np.array_equal`, `pd.DataFrame.equals`. My preference would be for something in the main namespace.\r\n\r\n----\r\n\r\nAlso, if I wanted to use this function right now: how safe do you think calling `ak._utils.arrays_approx_equal` is? Should I vendor it?",
  "created_at":"2023-02-03T13:30:45Z",
  "id":1415873878,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5UZIVW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T13:52:33Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"For it to go in the main namespace (as an \"operation\", through the `ak.operations` submodule that gets promoted to the main namespace), its interface and name should match a NumPy function if it can. What we ought to do is provide overrides `ak.allclose` and `ak.array_equal`, but this function also checks type, which those don't. We'd have to think about how to extend `ak.allclose` and `ak.array_equal` into a world that includes more types than `shape` and `dtype`.\r\n\r\nYou're right that all of the functions in [np.testing](https://numpy.org/doc/stable/reference/routines.testing.html) are `assert_this` and `assert_that`, whereas `arrays_approx_equal` is not. We shouldn't start down this path of divergence from NumPy, so I'm going to put PR #2198 in draft mode until we know what to do about it.\r\n\r\nIf you access `ak._utils.arrays_approx_equal` temporary, it will work until we find a permanent home for it. If you have any released versions of AnnData that depend on that and we move it, then there will be version combinations of Awkward and AnnData that don't work together, which can't be predicted in advance. (We don't know exactly which version will have a moved, public `arrays_approx_equal`, or if we'll change its interface to make it a better match to a chosen NumPy function.) But that may be okay: you might just say that the first few versions of AnnData with Awkward support will be quickly superseded and only support the latest release. I can say with confidence that `ak._utils.arrays_approx_equal` won't move or change _except_ for making it public and with a more NumPy-like name and interface, and you'll be in the loop for that.",
  "created_at":"2023-02-03T16:59:39Z",
  "id":1416145119,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5UaKjf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T16:59:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> You're right that all of the functions in [np.testing](https://numpy.org/doc/stable/reference/routines.testing.html) are assert_this and assert_that, whereas arrays_approx_equal is not. We shouldn't start down this path of divergence from NumPy, so I'm going to put PR https://github.com/scikit-hep/awkward/pull/2198 in draft mode until we know what to do about it.\r\n\r\nPersonally I think this is fine. Our function is specialised to Awkward-specific features. The NumPy `testing` submodule is primarily for supporting NumPy's test suite AFAICT. The package [doesn't provide any overload hooks](https://github.com/numpy/numpy/blob/main/numpy/testing/_private/utils.py#L473), for example. So I think we can re-use the module name in Awkward.\r\n\r\nAs for the other functions, I think only `array_equal` is most obvious; `allclose` would probably need to just invoke `ak.all(ak.isclose(...))`, which is a ufunc. Therefore, we'd want something more general to be a separate function.",
  "created_at":"2023-02-03T17:56:26Z",
  "id":1416210806,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5Uaal2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T17:56:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"`np.isclose` isn't a ufunc.\r\n\r\n```python\r\n>>> type(np.isclose)\r\n<class 'function'>\r\n```\r\n\r\nBut woah\u2014it just works! How did that happen?\r\n\r\n```python\r\n>>> np.isclose(\r\n...     ak.Array([[1, 2, 3], [], [4, 5]]),\r\n...     ak.Array([[1.00001, 2.00001, 3.00001], [], [4.00001, 5.00001]])\r\n... )\r\n<Array [[True, True, True], [], [True, True]] type='3 * var * bool'>\r\n```",
  "created_at":"2023-02-03T18:01:11Z",
  "id":1416215371,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5UabtL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T18:01:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This conversation is happening in two places; let's all move to #2198 for further discussion of what should happen to `arrays_approx_equal` and `isclose`.",
  "created_at":"2023-02-03T18:02:33Z",
  "id":1416216966,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5UacGG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T18:02:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm going to re-open this, as we _technically_ don't have `array_equal` implemented here.",
  "created_at":"2023-02-03T22:19:34Z",
  "id":1416478131,
  "issue":1105,
  "node_id":"IC_kwDODBCWws5Ubb2z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T22:19:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"THe `__awkward_function__` protocol has now been added in #2531.",
  "created_at":"2023-07-02T17:58:00Z",
  "id":1616752931,
  "issue":1126,
  "node_id":"IC_kwDODBCWws5gXbEj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:58:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Good news! PR #2311 apparently fixes this memory leak, too! I'm reopening this issue just so that it can be closed by the PR, for record-keeping.",
  "created_at":"2023-03-13T20:12:23Z",
  "id":1466891782,
  "issue":1127,
  "node_id":"IC_kwDODBCWws5Xbv4G",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2023-03-13T20:12:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I addressed this in Dask (numba/numba#8995), which has been released in Numba 0.59.0dev0, 0.58.1, 0.58.0, 0.58.0rc2, and 0.58.0rc1.",
  "created_at":"2023-12-08T16:14:19Z",
  "id":1847463834,
  "issue":1133,
  "node_id":"IC_kwDODBCWws5uHg-a",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-08T16:14:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Good news! PR #2311 apparently fixes this memory leak, too! I'm reopening this issue just so that it can be closed by the PR, for record-keeping.",
  "created_at":"2023-03-13T20:04:10Z",
  "id":1466879619,
  "issue":1280,
  "node_id":"IC_kwDODBCWws5Xbs6D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T20:04:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I *think* @jpivarski work means that we can close this! We now have an explicit separation between `simplified` and `__init__` that signals intent, and most checks are lightweight.",
  "created_at":"2023-02-18T17:57:20Z",
  "id":1435727981,
  "issue":1333,
  "node_id":"IC_kwDODBCWws5Vk3ht",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-18T17:57:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is now true; `indexed[union[...]]` is not permitted (save for categoricals), and `option[union`[...]]` is not permitted.",
  "created_at":"2023-04-24T22:05:03Z",
  "id":1520889714,
  "issue":1337,
  "node_id":"IC_kwDODBCWws5apu9y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-24T22:05:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We spoke about this today, and in-general, `parameters` added to a `RecordArray` should survive most operations, unless we wouldn't want them to anyway. So, we shouldn't need a new place for Xarray metadata here, it can sit under an `__xarray__` name. Meanwhile, although the `ak.behavior` dict is _very_ close to what we want for a `metadata` object, it's not a perfect fit:\r\n- metadata should be JSON serialisable\r\n- metadata should be stored in parquet, etc.\r\n\r\nAlthough we can still use `behavior` for this, it might be clearer to explicitly add a new `metadata` mechanism that enforces all of these rules instead of piggy-backing onto the existing behaviour mechanism. \r\n\r\nI believe this would motivate replacing `ak._util.wrap` and `ak.to_layout` usage internally with a forward/backwards deconstruction mechanism, e.g. `ak.compose(...)` and `ak.decompose(...)` that pulls out the `(layout, metadata, behavior)`.\r\n\r\nFinally, we likely also want a mechanism for resolving parameters within a dimension.\r\n\r\nThis `metadata` should be per-array, explicitly.",
  "created_at":"2023-02-01T15:57:10Z",
  "id":1412297114,
  "issue":1391,
  "node_id":"IC_kwDODBCWws5ULfGa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-10T11:18:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"As discussed in https://github.com/CoffeaTeam/coffea/pull/824, there's a use-case for wanting a local storage on `ak.Array` (in the `meta` of a `dak.Array`) that\r\n\r\n  1. is propagated to derived arrays, just as `behavior` is\r\n  2. is appropriate for non-behaviors (Coffea wants to store whole arrays there)\r\n  3. is not serialized in any way: pickle, Parquet, etc.\r\n\r\nThat use-case shares desirata (1) and (2) with the `attrs` requested here. The `attrs` requested here need to be _more_ persistent than `behavior`, to be saved not only in pickle but also file formats like Parquet (i.e. be included in the [`AwkwardArrowType.metadata`](https://github.com/scikit-hep/awkward/blob/0e08f59e488f0907bd540e4f7e1d197d2d0c0529/src/awkward/_connect/pyarrow.py#L88)), so the two use-cases strongly disagree on (3).\r\n\r\nSo how about adding both `attrs` and `transient_attrs` to `ak.Array`. It would be propagated to all derived arrays like `behavior`, merging like the `behavior` dict when an operation involves more than one array, but separate from the `behavior` machinery itself. Where they diverge is\r\n\r\n  * `attrs` must be JSON-like and will be serialized with the array in all forms\r\n  * `transient_attrs` can be any Python objects and will never be serialized.\r\n\r\ndask-awkward should someday implement `attrs` as well, so that the JSON-like metadata can be used on Dask workers, but dask-awkward will never need to implement the `transient_attrs`, since you never know if a Dask object has been serialized and sent to another worker or not. (_Maybe_ there would be value in `dak.Array.transient_attrs` for _caching_ node-level information, but that can be reconsidered.) Even with that limitation, it still satisfies the Coffea use-case because Coffea only needs this at type-tracer/Dask graph-building time, and `dak.Array.meta.transient_attrs` would then be available.\r\n\r\nCc: @lgray, @nsmith-, @martindurant, @douglasdavis, @agoose77",
  "created_at":"2023-06-02T15:12:57Z",
  "id":1573896895,
  "issue":1391,
  "node_id":"IC_kwDODBCWws5dz8K_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-02T15:12:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I was starting to work on this, and concluded that the merging rules for `attrs` are at first-glance more like `parameters` than `behavior`. I've been thinking about `attrs` as array-associated metadata, much like parameters are. But, it seems like what Coffea wants is more like non-serialisable \"context\", very much like \"behavior\". \r\n\r\n@lgray / @nsmith- could you possibly elucidate the properties that you'd need from a new context object? \r\n\r\nSpecifically, whether we need `union` or `intersection` properties for operations on two arrays? (behavior has `union`, properties have `intersection`). I assume you need `union`, because you're currently using behavior for this. \r\n\r\nMy current list is:\r\n- non serialised\r\n- union-merging rules",
  "created_at":"2023-06-11T14:18:34Z",
  "id":1586182265,
  "issue":1391,
  "node_id":"IC_kwDODBCWws5eizh5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-11T14:18:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"On our end we had not bothered to deal with name clashes if two NanoEvents arrays have different origins, so this didn't come up. I suppose we should figure out an appropriate hash for a NanoEventsFactory-generated array (should be straightforward) to ensure correct provenance. But in that case, I think we would actually want intersection because the mixin will not know which lineage to use for its components (unless they all get labeled somehow, which sounds like a can of worms best left unopened.)",
  "created_at":"2023-06-12T21:50:32Z",
  "id":1588153696,
  "issue":1391,
  "node_id":"IC_kwDODBCWws5eqU1g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-12T21:50:51Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "author_association":"MEMBER",
  "body":"Motivation:\r\n\r\n```python\r\nimport vector\r\n\r\nv = array of lists of vectors in pt, phi, eta coordinates\r\n\r\nak.sum(v, axis=1)   # CORRECTLY adds vectors in each list to produce one vector per list\r\n```\r\n\r\nVector needs to be able to overload record-sum in such a way as to correctly handle non-Cartesian coordinates. On our side, that means that reducers over records (such as vectors) need to be overloadable.\r\n\r\nOverloading syntax?\r\n\r\n```python\r\nak.behaviors[np.sum, \"Momentum3D\"] = special_function   # implemented in vector, not awkward\r\n```\r\n\r\nThere's already a syntax for overloading NumPy ufuncs,\r\n\r\n```python\r\nak.behaviors[np.add, \"Momentum3D\", \"Momentum3D\"] = special_function\r\n```\r\n\r\nUfuncs are \"mapper\" functions; the new capability would be to be able to overload \"reducer\" functions. The only ones that will likely ever be overloaded are `np.sum` (very likely) and `np.prod` (not very likely). Others, like `np.any` or `np.all`, probably not, because they usually act on booleans. Maybe `np.min` and `np.max` would want overloads for records so that orderings can be given to complex objects. (If someone wants to overload `np.min` and `np.max`, they'd want to connect it somehow with the ufuncs `np.less_than`, `np.greater_than`, `np.minimize`, and `np.maximize`...)\r\n\r\nShould it just be records, or also arrays? (`__record__: \"Momentum3D\"` and also `__array__: \"string\"`?)",
  "created_at":"2023-01-05T15:01:30Z",
  "id":1372329482,
  "issue":1423,
  "node_id":"IC_kwDODBCWws5RzBYK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T15:01:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Could you clarify the intention of this Jim? Is it to raise an error if an array has a nominal type but no class is found?",
  "created_at":"2023-07-02T17:09:11Z",
  "id":1616736990,
  "issue":1461,
  "node_id":"IC_kwDODBCWws5gXXLe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:09:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"There's a set of errors that occur when we try to do things to a record (ufunc, reducer, ...) that _would_ be possible if the record were overloaded with `__record__` but aren't possible for bare records. Currently, we raise an error in these cases, which is correct, but it would be more convenient for downstream libraries if we had a custom exception subclass that is raised in all of these situations, or maybe a suite of them that all inherit from a custom mixin if one needs to be a subclass of `ValueError`, another a subclass of `TypeError`, etc.\r\n\r\nDownstream libraries would then be able to\r\n\r\n```python\r\ntry:\r\n    to_do_a_thing(awkward_array)\r\nexcept TypeErrorMissingBehavior as err:\r\n    err.add_note(\"You forgot to define a behavior!\")\r\n    raise\r\n```\r\n\r\nand be able to identify the actual problem more quickly.",
  "created_at":"2023-07-03T14:00:25Z",
  "id":1618352828,
  "issue":1461,
  "node_id":"IC_kwDODBCWws5gdhq8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T14:00:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, sounds like we need a public errors module that exports an exception hierarchy! Added to the todo.",
  "created_at":"2023-07-04T09:13:49Z",
  "id":1619861893,
  "issue":1461,
  "node_id":"IC_kwDODBCWws5gjSGF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-04T09:13:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"FYI @ioanaif, @kpedro88 is interested in this feature.",
  "created_at":"2023-04-25T15:09:07Z",
  "id":1521961516,
  "issue":1466,
  "node_id":"IC_kwDODBCWws5at0os",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T15:09:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is pretty much done at this point. I think we can close the issue.",
  "created_at":"2023-07-02T17:58:53Z",
  "id":1616753538,
  "issue":1655,
  "node_id":"IC_kwDODBCWws5gXbOC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:58:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I believe this is closed by #2365!",
  "created_at":"2023-05-05T15:48:05Z",
  "id":1536449501,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5blFvd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:48:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Just updating with my latest ideas.\r\n\r\nI think about this occasionally, and I recognise that it will be tricky to implement. At present, we use the forms to test things like `purelist_depth`. Any PR that wants to make string handling less special-cased would likely need to make forms more aware of behaviours, either through an initialiser argument (harming serialisation), or remove the ability to ask a form for its depth without providing the behaviour, e.g. `form.purelist_depth(behavior)`.\r\n\r\nI can definitely see value in someone limiting the true depth of an array via behaviours, but it seems non-trivial to get there from where we are now. ",
  "created_at":"2023-02-02T10:21:00Z",
  "id":1413493984,
  "issue":1682,
  "node_id":"IC_kwDODBCWws5UQDTg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T10:21:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #2547 (we went the other way, and made strings internal!)",
  "created_at":"2023-06-30T12:26:23Z",
  "id":1614580851,
  "issue":1682,
  "node_id":"IC_kwDODBCWws5gPIxz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-30T12:26:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We're now thinking about categoricals as a built-in type. As such, there's no established use case for this, and we can close it.",
  "created_at":"2023-07-02T17:49:32Z",
  "id":1616748421,
  "issue":1693,
  "node_id":"IC_kwDODBCWws5gXZ-F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:49:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is no longer a problem!",
  "created_at":"2023-07-05T13:48:39Z",
  "id":1621799525,
  "issue":1720,
  "node_id":"IC_kwDODBCWws5gqrJl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-05T13:48:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #2841 :)",
  "created_at":"2023-11-20T22:28:12Z",
  "id":1819906377,
  "issue":1738,
  "node_id":"IC_kwDODBCWws5seZFJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-20T22:28:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm closing this for now; it's not the highest priority, and might need some rethinking in light of recent work.",
  "created_at":"2023-07-03T11:11:40Z",
  "id":1617969759,
  "issue":1755,
  "node_id":"IC_kwDODBCWws5gcEJf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T11:11:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"just as a reminder to myself - the warnings on MacOS in awkward-2.5.1rc1 are as follows: \r\n```c++\r\nIn file included from /Users/yana/Projects/PR2818/awkward/awkward-cpp/src/libawkward/io/json.cpp:19:\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:153:31: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n          record_current_field_[argument2()]++;\r\n          ~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:154:35: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n          if (record_current_field_[argument2()] == argument1()) {\r\n              ~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:155:33: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n            record_current_field_[argument2()] = 0;\r\n            ~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:157:35: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n          j = record_current_field_[argument2()];\r\n              ~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:166:49: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<unsigned long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n            if ((record_checklist_[argument2()][j >> 6] & chunkmask) == 0) {\r\n                 ~~~~~~~~~~~~~~~~~              ~~^~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:166:34: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<std::vector<unsigned long long>>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n            if ((record_checklist_[argument2()][j >> 6] & chunkmask) == 0) {\r\n                 ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:170:44: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<unsigned long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n            record_checklist_[argument2()][j >> 6] &= ~chunkmask;\r\n            ~~~~~~~~~~~~~~~~~              ~~^~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:170:29: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<std::vector<unsigned long long>>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n            record_checklist_[argument2()][j >> 6] &= ~chunkmask;\r\n            ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:177:67: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n          if (i != current_instruction_ + 1 + record_current_field_[argument2()]) {\r\n                                              ~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:184:35: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n              record_current_field_[argument2()] = j;\r\n              ~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:187:51: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<unsigned long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n              if ((record_checklist_[argument2()][j >> 6] & chunkmask) == 0) {\r\n                   ~~~~~~~~~~~~~~~~~              ~~^~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:187:36: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<std::vector<unsigned long long>>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n              if ((record_checklist_[argument2()][j >> 6] & chunkmask) == 0) {\r\n                   ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:191:46: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<unsigned long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n              record_checklist_[argument2()][j >> 6] &= ~chunkmask;\r\n              ~~~~~~~~~~~~~~~~~              ~~^~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:191:31: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<std::vector<unsigned long long>>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n              record_checklist_[argument2()][j >> 6] &= ~chunkmask;\r\n              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:202:54: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<unsigned long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n        return (record_checklist_[record_identifier][j >> 6] & chunkmask) == 0;\r\n                ~~~~~~~~~~~~~~~~~                    ~~^~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:202:33: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<std::vector<unsigned long long>>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n        return (record_checklist_[record_identifier][j >> 6] & chunkmask) == 0;\r\n                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:215:34: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<std::vector<unsigned long long>>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n            record_checklist_init_[record_identifier].end()\r\n            ~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:214:34: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<std::vector<unsigned long long>>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n            record_checklist_init_[record_identifier].begin(),\r\n            ~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:213:25: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<std::vector<unsigned long long>>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n        record_checklist_[record_identifier].assign(\r\n        ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/include/awkward/io/json.h:223:47: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<std::vector<unsigned long long>>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n        for (uint64_t chunk : record_checklist_[record_identifier]) {\r\n                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/src/libawkward/io/json.cpp:1254:55: warning: implicit conversion changes signedness: 'std::vector<long long>::size_type' (aka 'unsigned long') to 'std::vector<long long>::value_type' (aka 'long long') [-Wsign-conversion]\r\n          instructions_.push_back(record_current_field_.size());  // record identifier\r\n                        ~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~^~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/src/libawkward/io/json.cpp:1260:46: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<unsigned long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n          std::vector<uint64_t> checklist_init(num_checklist_chunks, 0);\r\n                                ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\r\n  /Users/yana/Projects/PR2818/awkward/awkward-cpp/src/libawkward/io/json.cpp:1264:26: warning: implicit conversion changes signedness: 'int64_t' (aka 'long long') to 'std::vector<unsigned long long>::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n            checklist_init[chunki] |= chunkmask;\r\n            ~~~~~~~~~~~~~~ ^~~~~~\r\n  23 warnings generated.\r\n\r\n```",
  "created_at":"2023-12-08T10:01:32Z",
  "id":1846891780,
  "issue":1756,
  "node_id":"IC_kwDODBCWws5uFVUE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-08T10:02:56Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"As a study, this doesn't affect any other code. After 2.4.0 is done, let's merge it so that it's out of the open PRs list.",
  "created_at":"2023-09-04T15:25:45Z",
  "id":1705445785,
  "issue":1782,
  "node_id":"IC_kwDODBCWws5lpwmZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:25:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@gmarkall - many thanks for your help! This test works now as expected:\r\n```python\r\n@cuda.jit(extensions=[array_view_arg_handler])\r\ndef multiply(array, n, out):\r\n    tid = cuda.grid(1)\r\n    out[tid] = array[tid] * n\r\n\r\ndef test_array_multiply():\r\n    akarray = ak.Array([0, 1, 2, 3], backend=\"cuda\")\r\n    results = cuda.to_device(np.zeros(4, dtype=np.int32))\r\n    multiply[1, 4](akarray, 3, results)\r\n    cuda.synchronize()\r\n    host_results = results.copy_to_host()\r\n    assert (ak.Array(host_results).tolist() == [0,3,6,9])\r\n```\r\n",
  "created_at":"2023-02-10T17:01:59Z",
  "id":1426090345,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5VAGlp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-10T17:01:59Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, this is broken, but it's not currently a problem; we barely touch the C++, so most of the time we run this build once per PR.",
  "created_at":"2023-07-02T18:03:03Z",
  "id":1616755352,
  "issue":1817,
  "node_id":"IC_kwDODBCWws5gXbqY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T18:03:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The first attempt at this was #1865.\r\n\r\nBut it should be reapplied to post-v2 code; it should be mostly LLVM style with a few exceptions, most of which were discussed in the comments on #1865.\r\n\r\nThere's also some configuration to help it find our *.h, *.cpp files, and *.cu (and *.cuh?), which are in a few strange places.",
  "created_at":"2023-01-05T14:40:11Z",
  "id":1372303517,
  "issue":1842,
  "node_id":"IC_kwDODBCWws5Ry7Cd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T14:40:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Jim and I had a conversation about this. Since #2020, #1928, etc, we have much less need to formally build out our array abstraction. At the same time, the challenges with this PR - the large amount of new code, and the need to use our own array object are still present. I've decided to reduce the scope of this PR; instead, we will prohibit operations on arrays that do not proceed via the nplike API, and implement the appropriate tests there such that we do not need a special array object. This can be accompanied by a runtime test to ensure we are only using nplike, or a mypy-level type check.",
  "created_at":"2023-01-04T16:32:08Z",
  "id":1371152148,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5Ruh8U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-04T16:32:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closing to ... once again ... create a new PR.",
  "created_at":"2023-01-11T13:08:32Z",
  "id":1378725329,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5SLa3R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-11T13:08:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I was going to add this to #2115, but it's already fixed. (Some other correction must have applied to it.)\r\n\r\nI'll include the test in #2115, though.\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> a = ak.from_iter([[None, 1], None, [1, 2]])\r\n>>> tt = ak.Array(a.layout.to_typetracer())\r\n>>> ak.is_none(tt, axis=0)\r\n<Array-typetracer [...] type='?? * bool'>\r\n>>> ak.is_none(tt, axis=1)\r\n<Array-typetracer [...] type='?? * option[var * bool]'>\r\n```",
  "created_at":"2023-01-12T23:16:37Z",
  "id":1381096490,
  "issue":1864,
  "node_id":"IC_kwDODBCWws5SUdwq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T23:16:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This has been done!",
  "created_at":"2023-02-01T18:30:45Z",
  "id":1412530436,
  "issue":1879,
  "node_id":"IC_kwDODBCWws5UMYEE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-01T18:30:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #2505",
  "created_at":"2023-07-02T17:10:59Z",
  "id":1616737822,
  "issue":1935,
  "node_id":"IC_kwDODBCWws5gXXYe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:10:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It fails because we lack a typetracer implementation of subtraction. We should be able to do all of the ufuncs in one implementation.\r\n\r\n```python\r\n>>> tt = ak.Array(ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]]).layout.to_typetracer())\r\n>>> ak.num(tt, axis=0)\r\n3\r\n>>> ak.num(tt, axis=1)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_num.py\", line 71, in num\r\n    return _impl(array, axis, highlevel, behavior)\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_num.py\", line 100, in _impl\r\n    out = ak._do.recursively_apply(layout, action, behavior, numpy_to_regular=True)\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/_do.py\", line 34, in recursively_apply\r\n    return layout._recursively_apply(\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/contents/listoffsetarray.py\", line 2057, in _recursively_apply\r\n    result = action(\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_num.py\", line 93, in action\r\n    return ak.contents.NumpyArray(layout.stops.data - layout.starts.data)\r\nTypeError: unsupported operand type(s) for -: 'TypeTracerArray' and 'TypeTracerArray'\r\n```\r\n\r\nWe should be able to implement _all_ ufuncs by temporarily creating empty arrays, running the ufunc through them, and then building a new TypeTracerArray with the resulting dtype.",
  "created_at":"2023-01-12T15:32:19Z",
  "id":1380570575,
  "issue":1997,
  "node_id":"IC_kwDODBCWws5SSdXP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T15:32:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Cc: @lgray, since you have implemented some work-arounds in Coffea to avoid `ak.num`; those can go away once this is done.",
  "created_at":"2023-01-12T15:41:26Z",
  "id":1380583098,
  "issue":1997,
  "node_id":"IC_kwDODBCWws5SSga6",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-01-12T15:41:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Actually in a PR in dask-awkward - this is much better, thanks!",
  "created_at":"2023-01-12T15:44:19Z",
  "id":1380587240,
  "issue":1997,
  "node_id":"IC_kwDODBCWws5SShbo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T15:44:19Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I would prefer this sooner rather than later since any time one of these crops up it means we have to patch around it with map_partitions to get computation properly lazy.",
  "created_at":"2023-01-12T15:53:04Z",
  "id":1380602075,
  "issue":1997,
  "node_id":"IC_kwDODBCWws5SSlDb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T15:53:04Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"Since I know @agoose77 is busy, I'll give this one a shot.",
  "created_at":"2023-01-12T20:29:14Z",
  "id":1380960793,
  "issue":1997,
  "node_id":"IC_kwDODBCWws5ST8oZ",
  "performed_via_github_app":null,
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "updated_at":"2023-01-12T20:29:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2019?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2019](https://codecov.io/gh/scikit-hep/awkward/pull/2019?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0b50d81) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c64704660966958270b31a26da8243d5afb537df?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c647046) will **decrease** coverage by `0.00%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2019?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2019?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-03T21:28:50Z",
  "id":1370242715,
  "issue":2019,
  "node_id":"IC_kwDODBCWws5RrD6b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T18:10:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is now in main!",
  "created_at":"2023-05-09T13:26:36Z",
  "id":1540124240,
  "issue":2034,
  "node_id":"IC_kwDODBCWws5bzG5Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T13:26:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2038?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2038](https://codecov.io/gh/scikit-hep/awkward/pull/2038?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3b8eb1e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c64704660966958270b31a26da8243d5afb537df?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c647046) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-13T17:56:00Z",
  "id":1382195287,
  "issue":2038,
  "node_id":"IC_kwDODBCWws5SYqBX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T17:56:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This is worth including in the `awkward` release after `awkward-cpp` is done.",
  "created_at":"2023-01-13T01:29:10Z",
  "id":1381193303,
  "issue":2039,
  "node_id":"IC_kwDODBCWws5SU1ZX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T01:29:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> Strangely, `tt.__repr__()` executes just fine but when going through `tt.__str__()` I get the error!\r\n\r\nThat's a good clue. `__str__` goes straight into `ak._prettyprint.valuestr`:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/6efa28727e2877daa9369f1efb265b5a630588fb/src/awkward/highlevel.py#L1934-L1937\r\n\r\nwhich immediately touches the data:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/6efa28727e2877daa9369f1efb265b5a630588fb/src/awkward/_prettyprint.py#L224-L229\r\n\r\nbut `__repr__` has a special code-path for typetracers:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/6efa28727e2877daa9369f1efb265b5a630588fb/src/awkward/highlevel.py#L1942-L1971\r\n\r\nwhich also touches the data... Aha! The problem is that the `ak._prettyprint.valuestr` touches the data _and does not exit_. It should not attempt to extract data from the `TypeTracerArray`, which will fail. It should probably return a string like `\"[...]\"` immediately after declaring all of the data touched.",
  "created_at":"2023-01-12T18:57:00Z",
  "id":1380869454,
  "issue":2042,
  "node_id":"IC_kwDODBCWws5STmVO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T18:57:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski any additional comments before I merge this? :)",
  "created_at":"2023-01-03T16:45:42Z",
  "id":1369990922,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5RqGcK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T16:45:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Re-reading the code, it looks like this PR extends our special handling of collection-of-array arguments in `__array_function__` overloads from \"collection must be tuple\" to \"collection must be tuple or list,\" which is definitely an improvement.\r\n\r\nI thought I'd try it (not in the PR; I'm checking the old behavior) with `np.stack`, but it _appears_ to work for both tuples and lists\r\n\r\n```python\r\n>>> np.stack([np.array([1, 2, 3]), np.array([1.1, 2.2, 3.3])])\r\narray([[1. , 2. , 3. ],\r\n       [1.1, 2.2, 3.3]])\r\n\r\n>>> np.stack((ak.Array([1, 2, 3]), ak.Array([1.1, 2.2, 3.3])))\r\n<Array [[1, 2, 3], [1.1, 2.2, 3.3]] type='2 * 3 * float64'>\r\n\r\n>>> np.stack([ak.Array([1, 2, 3]), ak.Array([1.1, 2.2, 3.3])])\r\n<Array [[1, 2, 3], [1.1, 2.2, 3.3]] type='2 * 3 * float64'>\r\n```\r\n\r\nalthough I think what's happening here is that the list case is unnecessarily being turned into a single `ak.Array`, which `np.stack` unpacks into two arrays in the list case but not the tuple case. It would therefore differ in performance, but not the final result, so I can't see the difference from an example. I guess it's a theorem that this is always true: when a NumPy function expects a collection of arrays and gets a single Awkward Array, it treats that Awkward Array as a collection and extracts the items that it needs via `__getitem__` or `__iter__`. Thus, it would always be \"just a performance thing.\"\r\n\r\nExcept maybe `np.ravel_multi_index`, which motivated this in issue #1318?\r\n\r\n(The documentation of that function says that its argument _must be_ a tuple.)\r\n\r\n--------\r\n\r\nWell, I'm going to get out of the weeds on this one. This PR preserves more information from the `ak.Array.__array_function__` arguments to the NumPy function's arguments: if we get a tuple or list of arrays, we give NumPy a tuple or list of arrays, and let NumPy decide what to do with it.\r\n\r\nSo yes, this is an improvement and we should merge it. Cases of other collection types beyond tuple and list are pretty rare.",
  "created_at":"2023-01-03T18:20:20Z",
  "id":1370086630,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5Rqdzm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T18:20:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Right, and notably it changes this function to be recursive, so long-lists of lists will incur a penalty. I've decided that's negligible because list-of-list is not a high-perf data-type as far as Python's concerned ;)",
  "created_at":"2023-01-03T18:23:39Z",
  "id":1370089341,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5Rqed9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T18:23:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"If there's a long list, then _somebody_ has to iterate over it, even if that is Awkward's `from_iter` or NumPy's `fromiter` to make an array. So, no loss.",
  "created_at":"2023-01-03T18:27:11Z",
  "id":1370092295,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5RqfMH",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-03T18:27:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Calling `field_check` instead of `field_fast` from Numba fixes this bug, so I'll take a look over there.",
  "created_at":"2023-01-01T11:34:01Z",
  "id":1368421425,
  "issue":2053,
  "node_id":"IC_kwDODBCWws5RkHQx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-01T11:34:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this is the same problem as #2054.\r\n\r\nThe fast field optimisation means that upon the second `field()` call (the one in the jitted function), the array already has length 1, and yet does not match any field pointers (because they come from different memory \"pools\"). This is considered the \"row 1 and row 2 have different fields\" scenario, and so the option type is added. I presume that when `to_buffers()` is called, `keys_` then has two identical field names, which is not expected / supported.\r\n\r\nIf we assume that the performance bottleneck is finding an existing field rather than adding new ones (which should hold given that records are not supposed to be wide), perhaps we can extend the pointer test mechanism. We don't need it to function outside of Numba, so perhaps:\r\n1. The non-fast API sets the string pointers to `nullptr`\r\n2. The fast API interprets `nullptr` as \"this needs to be set\".\r\n\r\nThen, if the fast-path finds no matching fields, it can walk over the non-`nullptr` pointers and perform a `strcmp`. This should be fast-enough, as it is not linear in the fields (it walks over each field until a match, but it does not test each field with `strcmp`).",
  "created_at":"2023-01-01T12:17:02Z",
  "id":1368431009,
  "issue":2053,
  "node_id":"IC_kwDODBCWws5RkJmh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-01T12:17:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The difference in performance between `field_check` and `field_fast` (as between `beginrecord_check` and `beginrecord_fast`) has never been quantified; it is not known whether this is an important optimization or not. If switching to the `_check` versions of these functions fixes everything, that would be a quick fix, leaving the study of `_check`-vs-`_fast` as a future, optional optimization study.\r\n\r\nThe use of ArrayBuilder at all is already a performance bottleneck compared with other ways of producing arrays from compiled code. The particular step of whether strings are deeply compared or not might not be a leading one anyway.\r\n\r\nOn this subject, some of the `*Builder` subclasses still inherit from `std::enable_shared_from_this`, which was needed when they had `std::shared_ptrs`, but now they're based on `std::unique_ptrs`. I'm pretty sure `std::enable_shared_from_this` is now unnecessary, and I _do not know_ whether it matters for performance, or how it compares with the `_check`-vs-`_fast` distinction. (C++ might be inserting something to enable \"shared from this\" that slows down indirection. After all, why else would this feature be optional?)\r\n\r\nSo the short story is, don't go out of your way to harmonize `_check`-vs-`_fast` if switching everything to `_check` would be a quick fix. The `_fast` is not known to be valuable.",
  "created_at":"2023-01-01T18:59:48Z",
  "id":1368508333,
  "issue":2053,
  "node_id":"IC_kwDODBCWws5Rkcet",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-01T18:59:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I *think* what's happening is that the union is being introduced in the second call to `builder.begin_record()`, which invokes `RecordBuilder::beginrecord`. The first `begin_record()` stores the pointer to the cast result of the C string.\r\n\r\nBy the time of the second call to `begin_record()`, the contents of this C string are no longer valid, and it seems that the object allocated for the `name` argument has a different pointer.\r\n\r\nI think it's reasonable that the original `nameptr_` contents appear to change; the lifetime of the Python `name` argument is never explicitly tied to the `ArrayBuilder` in `content.cpp`. However, the fact that the pointer itself is different suggests that we're perhaps seeing a case where interning is not happening.\r\n\r\nIn fact, that is likely what's happening \u2014 we explicitly allocate a C string in `src/awkward/_connect/numba/builder.py`. So, it might be that this fix just requires us to be a bit more clever here. The reason that this test is failing is because we're using `beginrecord_fast` which explicitly does not check the field name contents for performance. Maybe this should be a Numba-only feature, because in Python the other overheads are likely just as problematic as the string comparison? i.e. `beginrecord` invalidates the `beginrecord_fast` optimisation pointer?",
  "created_at":"2023-01-01T02:30:46Z",
  "id":1368327745,
  "issue":2054,
  "node_id":"IC_kwDODBCWws5RjwZB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-01T02:33:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"You're right: there is this distinction between beginrecord_check and beginrecord_fast, and it's very likely that Numba is set to use beginrecord_fast. Python must use beginrecord_check, since there's no notion of a string pointer.\r\n\r\nThe fact that they get union-simplified is a good change. It was an accident-an unintended consequence of adding simplification to ArrayBuilder snapshots\u2014but a good one.\r\n\r\nThe only issue here, then, is that the Form doesn't get passed through the same simplification routine. Forms have the same simplification constructors as Contents, so it should be possible to mirror it.\r\n\r\nThe UnionForm simplification takes an easy, slow-ish, but safe route of making a length-zero array, simplifying that, and then taking the Form (instead of trying to reproduce the Content's logic).\r\n\r\n(And happy new year!)",
  "created_at":"2023-01-01T05:56:33Z",
  "id":1368359642,
  "issue":2054,
  "node_id":"IC_kwDODBCWws5Rj4La",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-01T05:56:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Happy new year!\r\n\r\nRight, after reading this code _again_, although this code-path should probably be updated to explicitly invalidate the pointer when crossing the Numba boundary, it currently \"works\". It explains why we have a Union with Numba + Python, but not with Numba + Numba, or Python + Python, but this should be simplified away anyway.\r\n\r\nSo, as you say, the course of action is to ensure that the form gets simplified.",
  "created_at":"2023-01-01T11:25:55Z",
  "id":1368420363,
  "issue":2054,
  "node_id":"IC_kwDODBCWws5RkHAL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-01T11:25:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2055?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2055](https://codecov.io/gh/scikit-hep/awkward/pull/2055?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e66ef79) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/42ec00bffe326ed1eab4c4f549f6a6416ba38ed3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (42ec00b) will **increase** coverage by `0.04%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2055?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/2055/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `84.91% <0.00%> (+2.08%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-01T13:34:00Z",
  "id":1368445283,
  "issue":2055,
  "node_id":"IC_kwDODBCWws5RkNFj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-01T13:34:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Looking at the labels, I'm reminded that I'll need to remove the `next-release` from Awkward and Uproot. I'll do that on Monday.\r\n\r\nThe next time we use those labels, it will be for 2.1.0.",
  "created_at":"2023-01-01T20:03:23Z",
  "id":1368522343,
  "issue":2056,
  "node_id":"IC_kwDODBCWws5Rkf5n",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-01T20:03:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2056?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2056](https://codecov.io/gh/scikit-hep/awkward/pull/2056?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7521471) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/42ec00bffe326ed1eab4c4f549f6a6416ba38ed3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (42ec00b) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-01T20:09:15Z",
  "id":1368525116,
  "issue":2056,
  "node_id":"IC_kwDODBCWws5Rkgk8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-01T20:09:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"There are two steps: the first merges everything with equivalent types (e.g. \"list of floats\" and \"list of ints\" are mergeable); everything that is not mergeable becomes a UnionArray. The second step is in the UnionArray constructor, which complains if it gets mergeable data.\r\n\r\nEvidently, these two steps disagree on what is mergeable and what is not.\r\n\r\nThere are two possible choices we could make about this:\r\n\r\n  * We could say that the first step is right, and `2 * float64` is not mergeable with `3 * float64`. The result should be a union of two regular list dimensions. (The `size` of regular lists is part of their type.)\r\n  * Alternatively, we could say that the second step is right: the concatenation of `2 * float64` with `3 * float64` should be variable-length lists: `var * float64`. This preserves less information than the first policy, but non-union types are generally more useful than union types, so it may be a more practical choice.\r\n\r\n@grst, since you're using this in an application, what would you _want_ the answer to be? I doubt anyone has considered this case before.",
  "created_at":"2023-01-02T20:02:45Z",
  "id":1369175034,
  "issue":2058,
  "node_id":"IC_kwDODBCWws5Rm_P6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-02T20:02:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"We are using this for writing awkward arrays to disk. I would have expected the type of an array to be preserved and only the underlying layouts to be changed by this `ak.to_packed`, so the first of the two options. ",
  "created_at":"2023-01-03T07:44:26Z",
  "id":1369469095,
  "issue":2058,
  "node_id":"IC_kwDODBCWws5RoHCn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T07:44:26Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@grst to elaborate on Jim's point; the bug is in the discrepancy between our simplification tests and our simplification implementation. However, we can pick one of Jim's options, so we could choose for `ak.concatenate` to coerce incompatible regular dimensions to a ragged dimension.\r\n\r\nThat said, @jpivarski is there any nice way to recover the union if we made option (2) the default? For option (1) we can just to `ak.from_regular()` which drops the union, but there's no obvious way to do the same for (2). My feeling, if this is the case, is that the regular/ragged distinction is really important, so we should preserve it with the union. Many operations, I would assume, will erase the union naturally anyway.\r\n",
  "created_at":"2023-01-03T16:38:10Z",
  "id":1369982299,
  "issue":2058,
  "node_id":"IC_kwDODBCWws5RqEVb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T16:38:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Choosing option (2) would mean declaring `union[2 * float64, 3 * float64]` to be _invalid_, just as, say, `union[int32, float64]` is invalid (since numbers are mergeable). Even though this is information-losing, I think it's the way we want to go\u2014I suspect that we want to pick option (2), not option (1)\u2014because unions are so hard to deal with.\r\n\r\nBut just to be clear about what the consequences are: not only do we lose information, turning the above into `var * float64` (only knowing that the lists have different lengths, not the fact that the lengths can only be `2` or `3`), but it would also be impossible to construct `union[2 * float64, 3 * float64]` if you knew you wanted that (if we go with option (2)). That sounds like a dire warning\u2014that we won't even be able to express something\u2014but I _still_ think it's the right way to go. How useful is it to be able to say \"the lengths of these lists differ, but they're all drawn from the set `{2, 3}`\"? It doesn't help with slicing, which is a runtime check, anyway.\r\n\r\nIf you had an array of lists with type `var * float64`, but you happened to know more than the type system: you happened to know that some lists have length `2` and some have length `3`, and you want to use that fact, you could still impose it like this:\r\n\r\n```python\r\nlength_2 = ak.to_regular(array[ak.num(array) == 2])\r\nlength_3 = ak.to_regular(array[ak.num(array) == 3])\r\n```\r\n\r\nwhich involves some runtime checks. (I'm using the word \"runtime\" to mean something that can't be determined from the types, but running the code would fail if the invariant isn't true. For instance, dask-awkward would build the graph, and any failures would happen while executing the graph on a Dask worker.)\r\n\r\n------------------\r\n\r\nSome more context for @grst: this has to do with a new constraint that we're applying to union-type and option-type arrays, starting in #1910/#1928/#1939. It used to be that there were some constructions, like\r\n\r\n```\r\noption[option[float64]]\r\n```\r\n\r\nor\r\n\r\n```\r\nunion[int64, int64]\r\n```\r\n\r\nthat were not considered valid, but also not rejected by the constructors because we needed to be able to make arrays like this temporarily in some of our implementations. When code accepts arrays from a user, I said it didn't have to handle these invalid cases, which can be pretty complicated. However, that's not a good situation for multiple developers and long-term maintainability, since the code wouldn't tell you whether a construction is valid or not and whether the case can be ignored.\r\n\r\nSo #1910/#1928/#1939 made these dubious cases actually invalid: the layout constructors check for them and raise errors, and there's a work-around for our code to express these things temporarily, but always return valid constructs.\r\n\r\nThe new restrictions on union-type and option-type layouts are listed here: https://github.com/scikit-hep/awkward/pull/1939#issuecomment-1336057331, and specifically for unions:\r\n\r\n> A union type must:\r\n> \r\n> * never contain another union type\r\n> * contain at least two `contents`\r\n> * none of those `contents` may be `mergeable` with any of the other `contents` (mergeability is an equivalence relation)\r\n\r\nWhat happened in your case is that two parts of the code are apparently disagreeing on what \"mergeable\" means. One says that `2 * float64` and `3 * float64` are mergeable (into `var * float64`) and the other says that they are not. To be clear, this is _our_ bug (in Awkward), and we need to fix it. But the question is, fix it which way?\r\n\r\nAbove, I'm campaigning for saying that `2 * float64` and `3 * float64` should be mergeable, so that concatenating different-shape regular arrays at `axis=0` (which NumPy would not allow) would result in a ragged array, rather than a union array (both of which are beyond NumPy). We want to think about this before committing to it, though, to be sure that this doesn't lead to any unintended consequences. I'm thinking about it and I don't foresee any. @agoose77? @ioanaif? @ianna?",
  "created_at":"2023-01-03T18:06:31Z",
  "id":1370074232,
  "issue":2058,
  "node_id":"IC_kwDODBCWws5Rqax4",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-03T18:06:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Not disagreeing with you, but this discussion always makes me ask the question \"what purpose do unions satisfy?\". In fact, disagreeing with you, I would argue that we introduce unions for more clear-cut cases like `(str, int)` or `(var * int, int)`, so why not `(2 * var, 3 * var)`?\r\n\r\nThis is to say; making a decision on what `ak.concatenate` should do here is implicitly making a statement about the purpose and function of `Union`, which I'm not sure about.\r\n",
  "created_at":"2023-01-03T18:26:22Z",
  "id":1370091606,
  "issue":2058,
  "node_id":"IC_kwDODBCWws5RqfBW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T18:26:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Unions have limited usefulness. For instance, suppose that data comes from a JSON source that involves heterogeneity, such as GeoJSON. (2D points and polyline regions are in the same collection, distinguished by a string value, but one has deeper nestedness than the other.) To use it in Awkward Array, you'd want to read the JSON into a union array, select the different-type objects with slices (`array.coordinates[array.data_type == \"Point\"]`), and then work with non-union arrays. If we couldn't represent unions at all, users wouldn't be able to get through the data-cleaning stage.",
  "created_at":"2023-01-03T18:37:34Z",
  "id":1370101238,
  "issue":2058,
  "node_id":"IC_kwDODBCWws5RqhX2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T18:37:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"So, with this proposal, we'd be constraining unions to be a mechanism for representing otherwise irrepresentable types, instead of accurately preserving type information. \r\n\r\nAs I write this, I think of `int`-`float`, or `int`-`bool` (for `mergebool=True`). These are distinct types but have coercion rules. With the above lens, I'd be happy to extend this to merging distinct regular dimensions.",
  "created_at":"2023-01-03T18:45:56Z",
  "id":1370108378,
  "issue":2058,
  "node_id":"IC_kwDODBCWws5RqjHa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T18:45:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We've already been merging `int` and `float`, and have long considered `union[int, float]` to be invalid, though only recently are we enforcing that. Booleans are still distinct from integers (`mergebool=False` in the UnionArray constructor).\r\n\r\nIf nobody has any objections, we can adopt a policy of regular-N \u2295 regular-N = regular-N, but regular-N \u2295 regular-M = irregular (instead of union(regular-N, regular-M)) in the `mergeable` and `mergemany` functions (where \u2295 means \"merge arrays\"). Fixing this issue would amount to enforcing that rule consistently.",
  "created_at":"2023-01-03T19:27:16Z",
  "id":1370144419,
  "issue":2058,
  "node_id":"IC_kwDODBCWws5Rqr6j",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-03T19:27:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fab, we're on the same page. In fact, @jpivarski, so are you and @ioanaif \u2014 the following example _already_ does this:\r\n```python\r\nx = ak.from_numpy(np.arange(4 * 3).reshape(4, 3), regulararray=True)\r\ny = ak.from_numpy(np.arange(4 * 2).reshape(4, 2), regulararray=True)\r\n\r\nak.concatenate((x, y))\r\n```\r\n\r\nHowever, because we special-case `NumpyArray`s, our implementation differs for the non-regulararray case:\r\n```python\r\nx = ak.from_numpy(np.arange(4 * 3).reshape(4, 3), regulararray=False)\r\ny = ak.from_numpy(np.arange(4 * 2).reshape(4, 2), regulararray=False)\r\n\r\nak.concatenate((x, y))\r\n```",
  "created_at":"2023-01-03T21:59:19Z",
  "id":1370267080,
  "issue":2058,
  "node_id":"IC_kwDODBCWws5RrJ3I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T21:59:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Notes to self - the planned fix here will do the simplest thing of converting NumpyArray to RegularArray eagerly using a strided view, avoiding a copy for non contiguous-arrays. JAX will incur a copy penalty, however.",
  "created_at":"2023-01-04T16:27:05Z",
  "id":1371146246,
  "issue":2058,
  "node_id":"IC_kwDODBCWws5RuggG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-04T16:27:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2060?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2060](https://codecov.io/gh/scikit-hep/awkward/pull/2060?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7462698) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/08a099a00b803a933adf7d35d67338c3bb032524?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (08a099a) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-03T16:51:24Z",
  "id":1369996841,
  "issue":2060,
  "node_id":"IC_kwDODBCWws5RqH4p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T16:51:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This actually is planned, although it's not in main yet! Good to know it is needed :)",
  "created_at":"2023-01-03T21:23:15Z",
  "id":1370238096,
  "issue":2061,
  "node_id":"IC_kwDODBCWws5RrCyQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T21:23:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2062?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2062](https://app.codecov.io/gh/scikit-hep/awkward/pull/2062?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3c6ee22) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2e4d3d93ced5de7dba724afb086d597c5e24d6b5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2e4d3d9) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 3c6ee22 differs from pull request most recent head 282920d. Consider uploading reports for the commit 282920d to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-04T11:48:08Z",
  "id":1370829999,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5RtTSv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T16:14:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii just assigning you to this so I don't lose track.",
  "created_at":"2023-01-05T21:10:42Z",
  "id":1372767156,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5R0sO0",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-05T21:10:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii it looks like the pybind11 discovery is not succeeding in the venv that `pyodide-build` now creates. I'm not initially sure why this isn't working; if I add a `sleep` into the configure stage, I can inspect the venv and confirm that the `$CMAKE_PREFIX_PATH/pybind11/share/cmake/pybind11/...` CMake configuration files exist. Any ideas of where to look next?",
  "created_at":"2023-02-13T10:50:12Z",
  "id":1427726298,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5VGV_a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T10:50:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"OK to use the git version post https://github.com/scikit-build/scikit-build-core/pull/205 or should I push a patch release?",
  "created_at":"2023-02-23T17:33:38Z",
  "id":1442171055,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5V9civ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-23T17:33:38Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"For debugging sure! We would probably prefer a patch once it comes to releasing, but this isn't time critical.",
  "created_at":"2023-02-23T17:55:24Z",
  "id":1442197794,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5V9jEi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-23T17:55:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, it would be nice to debug before release, so the release can contain fixes if needed. :)",
  "created_at":"2023-02-23T21:41:15Z",
  "id":1442467545,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5V-k7Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-23T21:41:15Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"With `logging.level = \"INFO\"`, I see:\r\n```\r\n* Creating virtualenv isolated environment...\r\n* Installing packages in isolated environment... (pybind11, scikit-build-core[pyproject] @ git+https://github.com/scikit-build/scikit-build-core.git)\r\n* Installing packages in isolated environment... (cython, pythran, setuptools<65.6.0)\r\n* Getting dependencies for wheel...\r\n* Installing packages in isolated environment... (ninja>=1.5, pathspec, pyproject_metadata)\r\n* Installing packages in isolated environment... (cython, pythran, setuptools<65.6.0)\r\n* Building wheel...\r\n2023-02-26 15:09:22,349 - scikit_build_core - INFO - CMake version: 3.25.0\r\n*** scikit-build-core 0.2.1.dev5+g084f457 using CMake 3.25.0\r\n2023-02-26 15:09:22,352 - scikit_build_core - INFO - Build directory: /home/angus/Git/awkward/awkward-cpp/build/cpython-310\r\n*** Configurating CMake...\r\nconfigure: cmake -DCMAKE_C_COMPILER=/tmp/tmpa69l03b_/cc -DCMAKE_CXX_COMPILER=/tmp/tmpa69l03b_/c++ -DCMAKE_AR=/tmp/tmpa69l03b_/ar -DCMAKE_C_COMPILER_AR=/tmp/tmpa69l03b_/ar -DCMAKE_CXX_COMPILER_AR=/tmp/tmpa69l03b_/ar --fresh -S. -Bbuild/cpython-310 -Cbuild/cpython-310/CMakeInit.txt -DCMAKE_BUILD_TYPE=Release -DCMAKE_MODULE_PATH:PATH=/tmp/build-env-e_umlp2f/lib/python3.10/site-packages/scikit_build_core/resources/find_python -DCMAKE_PREFIX_PATH:PATH=/tmp/build-env-e_umlp2f/lib/python3.10/site-packages \"-DEMSCRIPTEN=1\" -DCMAKE_CROSSCOMPILING_EMULATOR=/home/angus/Git/emsdk/node/14.18.2_64bit/bin/node;--experimental-wasm-bulk-memory;--experimental-wasm-threads\r\nCMake Warning:\r\n  Ignoring extra path from command line:\r\n\r\n   \"\"-DEMSCRIPTEN=1\"\"\r\n\r\n\r\nloading initial cache file build/cpython-310/CMakeInit.txt\r\n-- CMake version 3.25.0\r\n-- CMAKE_BUILD_TYPE = Release\r\n-- Using Emscripten\r\nCMake Error at CMakeLists.txt:109 (find_package):\r\n  Could not find a package configuration file provided by \"pybind11\" with any\r\n  of the following names:\r\n\r\n    pybind11Config.cmake\r\n    pybind11-config.cmake\r\n\r\n  Add the installation prefix of \"pybind11\" to CMAKE_PREFIX_PATH or set\r\n  \"pybind11_DIR\" to a directory containing one of the above files.  If\r\n  \"pybind11\" provides a separate development package or SDK, be sure it has\r\n  been installed.\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\nSee also \"/home/angus/Git/awkward/awkward-cpp/build/cpython-310/CMakeFiles/CMakeOutput.log\".\r\nemcmake: error: 'cmake -DCMAKE_C_COMPILER=/tmp/tmpa69l03b_/cc -DCMAKE_CXX_COMPILER=/tmp/tmpa69l03b_/c++ -DCMAKE_AR=/tmp/tmpa69l03b_/ar -DCMAKE_C_COMPILER_AR=/tmp/tmpa69l03b_/ar -DCMAKE_CXX_COMPILER_AR=/tmp/tmpa69l03b_/ar --fresh -S. -Bbuild/cpython-310 -Cbuild/cpython-310/CMakeInit.txt -DCMAKE_BUILD_TYPE=Release -DCMAKE_MODULE_PATH:PATH=/tmp/build-env-e_umlp2f/lib/python3.10/site-packages/scikit_build_core/resources/find_python -DCMAKE_PREFIX_PATH:PATH=/tmp/build-env-e_umlp2f/lib/python3.10/site-packages \"-DEMSCRIPTEN=1\" -DCMAKE_CROSSCOMPILING_EMULATOR=/home/angus/Git/emsdk/node/14.18.2_64bit/bin/node;--experimental-wasm-bulk-memory;--experimental-wasm-threads' failed (returned 1)\r\n```\r\n\r\nThe contents of `/tmp/build-env-e_umlp2f/lib/python3.10/site-packages` is:\r\n```\r\n__pycache__\r\n_cffi_backend.cpython-310-x86_64-linux-gnu.so\r\n_distutils_hack\r\n_sysconfigdata__emscripten_wasm32-emscripten.py\r\n_virtualenv.pth\r\n_virtualenv.py\r\nbeniget\r\nbeniget-0.4.1.dist-info\r\ncffi\r\ncffi-1.15.1.dist-info\r\nCython\r\nCython-0.29.33.dist-info\r\ncython.py\r\ndistutils-precedence.pth\r\nexceptiongroup\r\nexceptiongroup-1.1.0.dist-info\r\ngast\r\ngast-0.5.3.dist-info\r\nninja\r\nninja-1.11.1.dist-info\r\nnumpy\r\nnumpy-1.24.1.dist-info\r\nnumpy.libs\r\nomp\r\npackaging\r\npackaging-23.0.dist-info\r\npathspec\r\npathspec-0.11.0.dist-info\r\npip\r\npip-22.3.1.dist-info\r\npip-22.3.1.virtualenv\r\npkg_resources\r\nply\r\nply-3.11.dist-info\r\npybind11\r\npybind11-2.10.3.dist-info\r\npycparser\r\npycparser-2.21.dist-info\r\npyproject_metadata\r\npyproject_metadata-0.7.1.dist-info\r\npythran\r\npythran-0.12.1.dist-info\r\npyximport\r\nscikit_build_core\r\nscikit_build_core-0.2.1.dev5+g084f457.dist-info\r\nscipy\r\nscipy-1.9.3.dist-info\r\nscipy.libs\r\nsetuptools\r\nsetuptools-65.5.1.dist-info\r\ntomli\r\ntomli-2.0.1.dist-info\r\n```\r\n\r\nwhich includes pybind11, and the contents of `/tmp/build-env-e_umlp2f/lib/python3.10/site-packages/pybind11` are\r\n```\r\n\u251c\u2500\u2500 __init__.py\r\n\u251c\u2500\u2500 __main__.py\r\n\u251c\u2500\u2500 __pycache__\r\n\u2502  \u251c\u2500\u2500 __init__.cpython-310.pyc\r\n\u2502  \u251c\u2500\u2500 __main__.cpython-310.pyc\r\n\u2502  \u251c\u2500\u2500 _version.cpython-310.pyc\r\n\u2502  \u251c\u2500\u2500 commands.cpython-310.pyc\r\n\u2502  \u2514\u2500\u2500 setup_helpers.cpython-310.pyc\r\n\u251c\u2500\u2500 _version.py\r\n\u251c\u2500\u2500 commands.py\r\n\u251c\u2500\u2500 include\r\n\u2502  \u2514\u2500\u2500 pybind11\r\n\u2502     \u251c\u2500\u2500 attr.h\r\n\u2502     \u251c\u2500\u2500 buffer_info.h\r\n\u2502     \u251c\u2500\u2500 cast.h\r\n\u2502     \u251c\u2500\u2500 chrono.h\r\n\u2502     \u251c\u2500\u2500 common.h\r\n\u2502     \u251c\u2500\u2500 complex.h\r\n\u2502     \u251c\u2500\u2500 detail\r\n\u2502     \u2502  \u251c\u2500\u2500 class.h\r\n\u2502     \u2502  \u251c\u2500\u2500 common.h\r\n\u2502     \u2502  \u251c\u2500\u2500 descr.h\r\n\u2502     \u2502  \u251c\u2500\u2500 init.h\r\n\u2502     \u2502  \u251c\u2500\u2500 internals.h\r\n\u2502     \u2502  \u251c\u2500\u2500 type_caster_base.h\r\n\u2502     \u2502  \u2514\u2500\u2500 typeid.h\r\n\u2502     \u251c\u2500\u2500 eigen\r\n\u2502     \u2502  \u251c\u2500\u2500 matrix.h\r\n\u2502     \u2502  \u2514\u2500\u2500 tensor.h\r\n\u2502     \u251c\u2500\u2500 eigen.h\r\n\u2502     \u251c\u2500\u2500 embed.h\r\n\u2502     \u251c\u2500\u2500 eval.h\r\n\u2502     \u251c\u2500\u2500 functional.h\r\n\u2502     \u251c\u2500\u2500 gil.h\r\n\u2502     \u251c\u2500\u2500 iostream.h\r\n\u2502     \u251c\u2500\u2500 numpy.h\r\n\u2502     \u251c\u2500\u2500 operators.h\r\n\u2502     \u251c\u2500\u2500 options.h\r\n\u2502     \u251c\u2500\u2500 pybind11.h\r\n\u2502     \u251c\u2500\u2500 pytypes.h\r\n\u2502     \u251c\u2500\u2500 stl\r\n\u2502     \u2502  \u2514\u2500\u2500 filesystem.h\r\n\u2502     \u251c\u2500\u2500 stl.h\r\n\u2502     \u2514\u2500\u2500 stl_bind.h\r\n\u251c\u2500\u2500 py.typed\r\n\u251c\u2500\u2500 setup_helpers.py\r\n\u2514\u2500\u2500 share\r\n   \u251c\u2500\u2500 cmake\r\n   \u2502  \u2514\u2500\u2500 pybind11\r\n   \u2502     \u251c\u2500\u2500 FindPythonLibsNew.cmake\r\n   \u2502     \u251c\u2500\u2500 pybind11Common.cmake\r\n   \u2502     \u251c\u2500\u2500 pybind11Config.cmake\r\n   \u2502     \u251c\u2500\u2500 pybind11ConfigVersion.cmake\r\n   \u2502     \u251c\u2500\u2500 pybind11NewTools.cmake\r\n   \u2502     \u251c\u2500\u2500 pybind11Targets.cmake\r\n   \u2502     \u2514\u2500\u2500 pybind11Tools.cmake\r\n   \u2514\u2500\u2500 pkgconfig\r\n      \u2514\u2500\u2500 pybind11.pc\r\n```\r\n\r\nSo, it looks like the pybind11 files are in the places you described. I checked whether moving the `.cmake` files into `share/cmake` worked over `share/cmake/pybind11`, but alas no luck.\r\n",
  "created_at":"2023-02-26T15:22:17Z",
  "id":1445387781,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5WJt4F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-26T15:22:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii just a ping to see if you've had any more thoughts or tips on this! Let me know if you don't have availability, and I can try and push forward.",
  "created_at":"2023-03-07T10:13:59Z",
  "id":1457904699,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5W5dw7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-07T10:13:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii here's the full output from a local build:\r\n[output.txt](https://github.com/scikit-hep/awkward/files/10935584/output.txt)\r\n\r\nI can confirm that the site-packages directory _does_ contain pybind11:\r\n```bash\r\n$ ls /tmp/build-env-098k4w59/lib/python3.10/site-packages/pybind11 --tree \r\n/tmp/build-env-098k4w59/lib/python3.10/site-packages/pybind11\r\n\u251c\u2500\u2500 __init__.py\r\n\u251c\u2500\u2500 __main__.py\r\n\u251c\u2500\u2500 __pycache__\r\n\u2502  \u251c\u2500\u2500 __init__.cpython-310.pyc\r\n\u2502  \u251c\u2500\u2500 __main__.cpython-310.pyc\r\n\u2502  \u251c\u2500\u2500 _version.cpython-310.pyc\r\n\u2502  \u251c\u2500\u2500 commands.cpython-310.pyc\r\n\u2502  \u2514\u2500\u2500 setup_helpers.cpython-310.pyc\r\n\u251c\u2500\u2500 _version.py\r\n\u251c\u2500\u2500 commands.py\r\n\u251c\u2500\u2500 include\r\n\u2502  \u2514\u2500\u2500 pybind11\r\n\u2502     \u251c\u2500\u2500 attr.h\r\n\u2502     \u251c\u2500\u2500 buffer_info.h\r\n\u2502     \u251c\u2500\u2500 cast.h\r\n\u2502     \u251c\u2500\u2500 chrono.h\r\n\u2502     \u251c\u2500\u2500 common.h\r\n\u2502     \u251c\u2500\u2500 complex.h\r\n\u2502     \u251c\u2500\u2500 detail\r\n\u2502     \u2502  \u251c\u2500\u2500 class.h\r\n\u2502     \u2502  \u251c\u2500\u2500 common.h\r\n\u2502     \u2502  \u251c\u2500\u2500 descr.h\r\n\u2502     \u2502  \u251c\u2500\u2500 init.h\r\n\u2502     \u2502  \u251c\u2500\u2500 internals.h\r\n\u2502     \u2502  \u251c\u2500\u2500 type_caster_base.h\r\n\u2502     \u2502  \u2514\u2500\u2500 typeid.h\r\n\u2502     \u251c\u2500\u2500 eigen\r\n\u2502     \u2502  \u251c\u2500\u2500 matrix.h\r\n\u2502     \u2502  \u2514\u2500\u2500 tensor.h\r\n\u2502     \u251c\u2500\u2500 eigen.h\r\n\u2502     \u251c\u2500\u2500 embed.h\r\n\u2502     \u251c\u2500\u2500 eval.h\r\n\u2502     \u251c\u2500\u2500 functional.h\r\n\u2502     \u251c\u2500\u2500 gil.h\r\n\u2502     \u251c\u2500\u2500 iostream.h\r\n\u2502     \u251c\u2500\u2500 numpy.h\r\n\u2502     \u251c\u2500\u2500 operators.h\r\n\u2502     \u251c\u2500\u2500 options.h\r\n\u2502     \u251c\u2500\u2500 pybind11.h\r\n\u2502     \u251c\u2500\u2500 pytypes.h\r\n\u2502     \u251c\u2500\u2500 stl\r\n\u2502     \u2502  \u2514\u2500\u2500 filesystem.h\r\n\u2502     \u251c\u2500\u2500 stl.h\r\n\u2502     \u2514\u2500\u2500 stl_bind.h\r\n\u251c\u2500\u2500 py.typed\r\n\u251c\u2500\u2500 setup_helpers.py\r\n\u2514\u2500\u2500 share\r\n   \u251c\u2500\u2500 cmake\r\n   \u2502  \u2514\u2500\u2500 pybind11\r\n   \u2502     \u251c\u2500\u2500 FindPythonLibsNew.cmake\r\n   \u2502     \u251c\u2500\u2500 pybind11Common.cmake\r\n   \u2502     \u251c\u2500\u2500 pybind11Config.cmake\r\n   \u2502     \u251c\u2500\u2500 pybind11ConfigVersion.cmake\r\n   \u2502     \u251c\u2500\u2500 pybind11NewTools.cmake\r\n   \u2502     \u251c\u2500\u2500 pybind11Targets.cmake\r\n   \u2502     \u2514\u2500\u2500 pybind11Tools.cmake\r\n   \u2514\u2500\u2500 pkgconfig\r\n      \u2514\u2500\u2500 pybind11.pc\r\n```",
  "created_at":"2023-03-09T20:03:28Z",
  "id":1462695921,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5XLvfx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-09T20:32:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, I haven't figured out why it is having a problem yet. There's a toolchain file that sets `CMAKE_SYSTEM_PREFIX_PATH`, but that doesn't override `CMAKE_PREFIX_PATH`.",
  "created_at":"2023-03-09T20:07:33Z",
  "id":1462700561,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5XLwoR",
  "performed_via_github_app":null,
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "updated_at":"2023-03-09T20:07:33Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Just saw this: https://github.com/pyodide/pyodide/issues/3569\r\n\r\nNot sure if it's related!",
  "created_at":"2023-03-10T10:01:27Z",
  "id":1463560663,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5XPCnX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-10T10:01:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR now builds, and pulls in the correct tooling. The built C++ wheel doesn't seem to load properly, though; the pybind11 module doesn't import. ",
  "created_at":"2023-04-26T21:37:37Z",
  "id":1524075768,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5a14z4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-26T21:37:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Can you try the native tooling? I think the problem is in pybind11 trying to \"fix\" the SO extension incorrectly. (Last two commits here: https://github.com/pybind/scikit_build_example/pull/84)",
  "created_at":"2023-04-26T21:52:43Z",
  "id":1524089778,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5a18Oy",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-04-26T21:52:43Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Broken due to https://github.com/emscripten-core/emscripten/pull/19301. Hoping this can be patched somehow in pyodide.",
  "created_at":"2023-05-05T20:40:26Z",
  "id":1536757717,
  "issue":2062,
  "node_id":"IC_kwDODBCWws5bmQ_V",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T20:40:26Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"N.B that the tests will fail, because this changes merging behavior for date-times (in line with NumPy AFAICT).",
  "created_at":"2023-01-04T23:42:26Z",
  "id":1371550335,
  "issue":2063,
  "node_id":"IC_kwDODBCWws5RwDJ_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-04T23:42:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"TODO: restore existing datetime mergeability test (stricter)",
  "created_at":"2023-01-05T16:56:21Z",
  "id":1372475197,
  "issue":2063,
  "node_id":"IC_kwDODBCWws5Rzk89",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T16:56:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I'm surprised, though, that the above didn't break any tests. I remember there being some tests that were sensitive to the time-unit fix, but I can't find them now.\r\n\r\nIt does, it breaks many tests! That was why I raised it today, because we clearly care about this.\r\n\r\n> Is this just formal, for code symmetry? Whether it's an attribute or a property on the NumpyMetadata.instance() singleton, issubdtype acts like a function (it doesn't consume a self argument).\r\n\r\nThe Python attribute resolution machinery will always invoke `__get__` on a function that's resolved from the class dictionary. So, without this descriptor, Python runs `func.__get__` to return a bound function to our nplike object, which is not desirable.",
  "created_at":"2023-01-05T18:54:13Z",
  "id":1372607333,
  "issue":2063,
  "node_id":"IC_kwDODBCWws5R0FNl",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-05T18:54:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2063?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2063](https://codecov.io/gh/scikit-hep/awkward/pull/2063?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (241b7ad) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7823a2b7d86bf0eea1e412331e2bea2ac609f34c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7823a2b) will **decrease** coverage by `0.00%`.\n> The diff coverage is `90.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2063?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2063?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.08% <33.33%> (-0.38%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2063?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.11% <66.66%> (-0.09%)` | :arrow_down: |\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/2063?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `64.52% <100.00%> (+0.27%)` | :arrow_up: |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2063?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `61.02% <100.00%> (+0.09%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2063?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.19% <100.00%> (+0.14%)` | :arrow_up: |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2063?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.47% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2063?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `72.76% <0.00%> (-0.43%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-01-06T09:21:43Z",
  "id":1373386300,
  "issue":2063,
  "node_id":"IC_kwDODBCWws5R3DY8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T11:02:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've restored the date-time handling that corresponds to the previous behaviour. Due to the changes in this PR, `_mergeable_next` should match the old behaviour (besides the change to shape dependence), but the logic is inverted to be clearer, and is now potentially _less_ permissive than the previous implementation. Due to the exhaustiveness of the various test cases, I *don't* think that is likely \u00ad\u2014 for the types we expect, at this point in the function we should have non-equal numeric types AFAICT.\r\n\r\nPreviously, we just returned `True` if we didn't early-exit. This routine is more explicit about why we're returning `True`, by ending on a `can_cast` call.",
  "created_at":"2023-01-06T09:53:55Z",
  "id":1373414199,
  "issue":2063,
  "node_id":"IC_kwDODBCWws5R3KM3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T09:55:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, I'm on board with this now. My one performance question was addressed, the dates are as strict as they used to be, and calling `can_cast` at the `else` at the end of the `elif` chain is safer than saying things are mergeable if they pass our gauntlet.\r\n\r\n> potentially _less_ permissive than the previous implementation\r\n\r\nIf it's actually less permissive, then in principle that would be backward incompatible (something that used to work now won't). Do you know of cases that we used to merge but would now be considered not mergeable?",
  "created_at":"2023-01-06T13:59:06Z",
  "id":1373679986,
  "issue":2063,
  "node_id":"IC_kwDODBCWws5R4LFy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T13:59:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> If it's actually less permissive, then in principle that would be backward incompatible (something that used to work now won't). Do you know of cases that we used to merge but would now be considered not mergeable?\r\n\r\nYes, that was why I expounded upon this to assert that although it cannot be more permissive, I don't think it's less permissive either. It doesn't fail any tests, and I can't think of any types that would not be supported.\r\n\r\nOoh, actually, let me try one combination.",
  "created_at":"2023-01-06T14:00:32Z",
  "id":1373683142,
  "issue":2063,
  "node_id":"IC_kwDODBCWws5R4L3G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T14:01:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, so if the one new test you're trying passes, then I think this PR is ready to be merged.",
  "created_at":"2023-01-06T14:02:48Z",
  "id":1373685853,
  "issue":2063,
  "node_id":"IC_kwDODBCWws5R4Mhd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T14:02:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Now that I think about it, `np.concatenate` defaults to `\"same_kind\"`, so the merge would fail if we had previously permitted an invalid operation.",
  "created_at":"2023-01-06T14:04:50Z",
  "id":1373688041,
  "issue":2063,
  "node_id":"IC_kwDODBCWws5R4NDp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T14:04:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2065?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2065](https://codecov.io/gh/scikit-hep/awkward/pull/2065?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b34431a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8d7a2c31f1ea24cef8a909fb12bb14eb812477ac?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8d7a2c3) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2065?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/2065?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `95.00% <100.00%> (+2.31%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2065?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.80% <0.00%> (+0.25%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-05T02:10:10Z",
  "id":1371664878,
  "issue":2065,
  "node_id":"IC_kwDODBCWws5RwfHu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T21:40:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski let me just test one additional case! I'm sorry for pinging you and then pausing the merge; I noticed something peculiar.\r\n",
  "created_at":"2023-01-05T21:41:21Z",
  "id":1372811950,
  "issue":2065,
  "node_id":"IC_kwDODBCWws5R03Ku",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T21:41:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, the peculiarity I noticed was if the record contains options, and the record itself is wrapped in an option. This PR does what `is_none` does; the first wins.",
  "created_at":"2023-01-05T22:05:38Z",
  "id":1372838943,
  "issue":2065,
  "node_id":"IC_kwDODBCWws5R09wf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T22:05:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2066?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2066](https://codecov.io/gh/scikit-hep/awkward/pull/2066?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (446fdc2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/368fbab0d40ef055cd45c2f25b5ad9a3a6026a9f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (368fbab) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2066?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/2066?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `64.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/2066?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19iYWNrZW5kLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/2066?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19iYWNrZW5kLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-05T08:21:20Z",
  "id":1371910251,
  "issue":2066,
  "node_id":"IC_kwDODBCWws5RxbBr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T08:21:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closes #2061 ",
  "created_at":"2023-01-12T23:05:58Z",
  "id":1381090262,
  "issue":2066,
  "node_id":"IC_kwDODBCWws5SUcPW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T23:05:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The `from_buffers` function,\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/8d7a2c31f1ea24cef8a909fb12bb14eb812477ac/src/awkward/operations/ak_from_buffers.py#L13-L43\r\n\r\ncan take a new argument, `byteorder`, which takes the same values as `np.dtype.byteorder`, [namely these](https://numpy.org/doc/stable/reference/generated/numpy.dtype.byteorder.html):\r\n\r\n  * `\"=\"`: native (default)\r\n  * `\"<\"`: little-endian (can be distinct from `\"=\"`, though it's not easy to find hardware in which that's true anymore)\r\n  * `\">\"`: big-endian\r\n  * maybe `\"!\"` as a synonym for big-endian (Python's `struct` [uses that](https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment), as well as `\"@\"` as a synonym for `\"=\"`)\r\n\r\nIt's fine for this to be a single decision made for all buffers, because it's very rare to get a set of buffers in which some are little-endian and others are big-endian.\r\n\r\nIt also makes sense for this to be a `from_buffers` argument, rather than something in the Form, because the Form is a (relatively) more high-level description: it says whether a list is ListArray or ListOffsetArray and whether a numeric type is `int32` or `int64`, but not the kind of hardware architecture or file format it came from, which endianness is more connected to. I think of the endianness-correction step as being part of the chain that includes decompression. (It wouldn't be appropriate for Forms to describe a [chain of transformations](https://docs.hdfgroup.org/hdf5/develop/_f_i_l_t_e_r.html), either.) But since you only know how to byte-swap after you know what integer width a buffer will be interpreted with (byte-swapping `int32` is not the same as byte-swapping `int64`), and users might not know that on a per-buffer basis, it needs to be an argument to `from_buffers`.\r\n\r\n> Should we use a namedtuple for safer API for users?\r\n\r\nI'm not sure what namedtuple idea you're considering. (The list of arguments isn't that long, and I think it's better to have a flat list [even when it is very long](https://github.com/scikit-hep/awkward/blob/8d7a2c31f1ea24cef8a909fb12bb14eb812477ac/src/awkward/operations/ak_to_parquet.py#L10-L138). Typical users only want to set a few arguments to non-default values, so it's not cumbersome in the calling code.)\r\n\r\n> We should expect additional parameters in unpickling in future, and add a version number for breaking changes\r\n\r\nPickling/unpickling happens in two places, for `ak.Array` and `ak.Record`:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/8d7a2c31f1ea24cef8a909fb12bb14eb812477ac/src/awkward/highlevel.py#L1433-L1454\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/8d7a2c31f1ea24cef8a909fb12bb14eb812477ac/src/awkward/highlevel.py#L2067-L2089\r\n\r\nUnpacking a fixed-size `state` tuple was a bad idea, since adding another tuple item will break forward-compatibility. We should at least use the `*args` syntax @henryiii suggested today or explicitly unpack each `state[0]`, `state[1]`, etc. A version number (for pickles) is also a good idea, and since we have to break forward-compatibility in the current implementation anyway, let's break it by putting the version number first. (Quick, before Awkward v2 gets many users!)\r\n\r\nAfter that, we want to try to ensure forward and backward-compatibility forever, and the version number (`int`) might or might not help to write the logic that adapts internal format changes so that they appear to be unchanged to the outside world. (Maybe old code + new pickle has fewer features, but it should not be impossible to read the array in some sense, and the way we introduce internal format changes can ensure that.)",
  "created_at":"2023-01-05T19:15:18Z",
  "id":1372627799,
  "issue":2067,
  "node_id":"IC_kwDODBCWws5R0KNX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T19:15:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I'm not sure what namedtuple idea you're considering. (The list of arguments isn't that long, and I think it's better to have a flat list [even when it is very long](https://github.com/scikit-hep/awkward/blob/8d7a2c31f1ea24cef8a909fb12bb14eb812477ac/src/awkward/operations/ak_to_parquet.py#L10-L138). Typical users only want to set a few arguments to non-default values, so it's not cumbersome in the calling code.)\r\n\r\nThis is more about avoiding breakages for _users_ in future, by defining the API for `to_buffers` to return an object with attributes. Such an object is backwards compatible because it can be accessed like a tuple for existing users, but new users are encouraged to use attribute access over unpacking such that future changes are less likely to cause problems. That said, in this case, I'd probably just break the API if we have to, otherwise compatibility cycle it.",
  "created_at":"2023-01-05T20:05:21Z",
  "id":1372676563,
  "issue":2067,
  "node_id":"IC_kwDODBCWws5R0WHT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T20:05:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh! The above doesn't imply a change in `to_buffers`. It doesn't have to declare the endianness of the buffers it returns (as a fourth tuple-item in its return value).\r\n\r\nHere are a few ideas for `to_buffers` and endianness:\r\n\r\n   * No change at all. Since the `containers` dict that `to_buffers` returns contains NumPy arrays of the appropriate dtypes, a user who wants non-native endianness could post-process the dict without having to look up dtypes in the Form. The same is not true of the input to `from_buffers`, which might contain non-NumPy buffers.\r\n   * Add a `byteorder` argument to `to_buffers` that does the post-processing for the user. (Be careful not to change them in-place, since `to_buffers` returns buffers that are shared with the original array.) This argument would direct what `to_buffers` does, but `to_buffers` is not obliged to pass that information through into its return value any more than it has to explain how its `buffer_key`, `form_key`, and `id_start` were configured to produce the `form_keys` they made:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/8d7a2c31f1ea24cef8a909fb12bb14eb812477ac/src/awkward/operations/ak_to_buffers.py#L11-L14\r\n\r\nI've been assuming that `from_buffers`'s `byteorder` argument would be a keyword-only argument, not something that it expects to pick up from `to_buffer`'s output.\r\n\r\nThis particular change doesn't imply any API-breaking changes (new keyword-only arguments are not API-breaking). Are you considering some other possible change in the future? The output of `to_buffers` could change into a namedtuple and I would not consider that to be API-breaking (tuple-unpacking and `*args`-passing to `from_buffers` would still work with a length-3 namedtuple). I think that could happen at any time, and I don't see it as being _strongly_ motivated. It wouldn't be _bad_, either.",
  "created_at":"2023-01-05T20:21:56Z",
  "id":1372701533,
  "issue":2067,
  "node_id":"IC_kwDODBCWws5R0cNd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T20:21:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Oh! The above doesn't imply a change in to_buffers. \r\n\r\nOh! In which case, let's not add a named tuple. If we wanted to move in that direction, I'd suggest a custom object / dataclass instead (i.e. drop the tuple-ness deliberately).\r\n\r\n> Here are a few ideas for to_buffers and endianness:\r\n\r\nMy priority here is conversion-on-reading. The idea is that users might save data on platform X with little endianness, and load it on platform Y with big endianness. We want that to be as painless as possible. Given that endianness is a property of the system, we don't need to return it; users just need to store `sys.byteorder` alongside the data. We can accept this as an argument to `from_buffers`, like you suggest.\r\n",
  "created_at":"2023-01-05T20:55:49Z",
  "id":1372735786,
  "issue":2067,
  "node_id":"IC_kwDODBCWws5R0kkq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T20:55:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We could take the opinion that the buffers created by `to_buffers` and read by `from_buffers` are assumed to be little-endian unless otherwise directed by the `byteorder` argument. The `byteorder` would have no `\"=\"`/`\"@\"` option: it would be either `\"<\"` or `\">\"/`\"!\"`.\r\n\r\nThis incurs no penalty on little-endian machines (same as now), but a copy penalty on big-endian machines. (Neither `to_buffers` nor `from_buffers` can change the byte order in place, but byte-swapping is trivial compared to copying.) But then again, nearly all architecture nowadays is either little-endian or can run in both modes.\r\n\r\nTo do this, the two functions would just need to determine which endianness the current hardware has (there might already be something in `_util` for this), and add a copy-and-flip if native endianness is different from the `byteorder` argument. The arrays inside the Awkward Array itself should always be native endian for whatever the architecture is.\r\n\r\nThe boolean logic is simple,\r\n\r\n```python\r\n(\"<\" if sys.byteorder == \"little\" else \">\") == byteorder   # after \"!\" \u2192 \">\"\r\n```\r\n\r\nbut nearly impossible to test. It's very hard to find a big-endian machine! (We can just write it and trust that it will work.)\r\n\r\nWhat do you think?",
  "created_at":"2023-01-05T22:20:31Z",
  "id":1372866388,
  "issue":2067,
  "node_id":"IC_kwDODBCWws5R1EdU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T22:20:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I love the simplicity and robustness of this approach for the default case; that users just want things to work by default.\r\n\r\nI would want to preserve the ability to avoid this penalty if users know what they're doing. It might be sufficient to make this the default option, but allow both `to_buffers` and `from_buffers` to accept a `byteorder` argument that overrides the assumption that the output/input is little-endian.",
  "created_at":"2023-01-05T22:44:02Z",
  "id":1372886466,
  "issue":2067,
  "node_id":"IC_kwDODBCWws5R1JXC",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-05T22:44:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2069?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2069](https://codecov.io/gh/scikit-hep/awkward/pull/2069?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6dbf0a7) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7d38ba150e04a05b06bd417e872d29f6c6d01010?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7d38ba1) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2069?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2069?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.08% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-05T17:43:35Z",
  "id":1372532334,
  "issue":2069,
  "node_id":"IC_kwDODBCWws5Rzy5u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T17:00:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - I haven't checked if you might have fixed it already?",
  "created_at":"2023-01-07T22:38:06Z",
  "id":1374638457,
  "issue":2069,
  "node_id":"IC_kwDODBCWws5R71F5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-07T22:38:06Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Nope, I haven't touched this yet!",
  "created_at":"2023-01-08T00:38:23Z",
  "id":1374671677,
  "issue":2069,
  "node_id":"IC_kwDODBCWws5R79M9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-08T00:38:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Ah I see, so this bug occurs because CuPy returns 0-D arrays instead of scalars. This is annoying! I think your fix looks like the best option available; we want to convert these to primitive types as soon as possible.\r\n> \r\n> One request: could we change `x.item()` for `int(x)`? It would be one-less thing that typetracer needs to implement (even though this is a `known_data` branch).\r\n\r\ndone",
  "created_at":"2023-01-08T16:07:33Z",
  "id":1374870784,
  "issue":2069,
  "node_id":"IC_kwDODBCWws5R8t0A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-08T16:07:33Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"> One request: could we change `x.item()` for `int(x)`?\r\n\r\nOops\u2014I just noticed that. I thought your opinion was the other way around. Is it because you'll be swapping method calls for function calls (although `int` isn't an nplike function)?\r\n\r\nAs I said, I only have a slight preference for `item`; it's because `int` looks like a mistake and I'd have to remind myself of this issue with CuPy to know why it's there. I was assuming that this method call (`item`) would be replaced by an nplike function (either `item` or a name that array libraries are unlikely to take in the future).",
  "created_at":"2023-01-09T16:42:45Z",
  "id":1375929928,
  "issue":2069,
  "node_id":"IC_kwDODBCWws5SAwZI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T16:42:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I made the case to @ianna to change this, but it was only a mild preference. Given that we both have mild preferences, let's just accept this as-is!",
  "created_at":"2023-01-09T17:14:11Z",
  "id":1375973206,
  "issue":2069,
  "node_id":"IC_kwDODBCWws5SA69W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T17:14:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"(@ianna feel free to merge!)",
  "created_at":"2023-01-09T17:18:08Z",
  "id":1375978961,
  "issue":2069,
  "node_id":"IC_kwDODBCWws5SA8XR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T17:18:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The main purpose of `ak.to_layout` is to prepare array-like arguments for other functions, so it should be designed for that. For that purpose, `ak.to_layout(\"10\")` returning a length-one array of strings sounds right, since we'd want\r\n\r\n```python\r\nak.something_or_other(\"one\")\r\n```\r\n\r\nto work like\r\n\r\n```python\r\nak.something_or_other(ak.Array([\"one\"]))\r\n```\r\n\r\nBy that argument, `ak.to_layout(10)` should return a length-one array of integers, though.\r\n\r\nWhat `ak.type` does can be brought into line with `ak.to_layout`, though it may just be better to deprecate `ak.type`. It's now redundant with `ak.Array.type`, `ak.Record.type`, and `Content.form.type`.\r\n\r\nWell, no, we still need `ak.type` in case someone overloads that method in an `ak.Array`/`ak.Record` subclass. The word \"type\" is pretty general. But anyway, after getting `ak.to_layout` to do the right thing for function arguments, `ak.type` can be brought into agreement with it; it can return the type of array that `ak.to_layout` would have created.\r\n\r\nKeep in mind, though, that `ak.to_layout` creates layouts, whose types differ from the corresponding `ak.Array` by not including the `ak.types.ArrayType` wrapper (which has the array length):\r\n\r\n```python\r\n>>> array = ak.Array([[1, 2, 3], [], [4, 5]])\r\n\r\n>>> ak.type(array)\r\nArrayType(ListType(NumpyType('int64')), 3)\r\n>>> print(ak.type(array))\r\n3 * var * int64\r\n\r\n>>> ak.type(array.layout)\r\nListType(NumpyType('int64'))\r\n>>> print(ak.type(array.layout))\r\nvar * int64\r\n\r\n```",
  "created_at":"2023-01-05T19:37:57Z",
  "id":1372649071,
  "issue":2070,
  "node_id":"IC_kwDODBCWws5R0PZv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T19:37:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'd be strongly in favour of simplifying `ak.type` to return\r\n```python\r\nreturn ak.types.ArrayType(\r\n            self._layout.form.type_from_behavior(self._behavior), self._layout.length\r\n        )\r\n```\r\nwith the suitable case for non-layout arguments?\r\n\r\nIIRC we rely on `ak.to_layout` leaving scalars intact elsewhere in the program, so I'd consider it sensible to do the same for strings. But equally, we're probably relying on the current behaviour for strings. Fundamentally, `ak.type(\"string\")` and `ak.type([\"string\"])` should return different results, but I'm not decided upon what I think the best path to this is yet :)",
  "created_at":"2023-01-05T20:19:20Z",
  "id":1372698933,
  "issue":2070,
  "node_id":"IC_kwDODBCWws5R0bk1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T20:19:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Layouts need to be nestable/self-similar, including the `ArrayType` wrapper would break that. Certainly `layout.form.type` shouldn't include the `ArrayType` wrapper; `ak.type` could, but then `ak.type` would be returning a different result than `layout.form.type`.\r\n\r\n(Less importantly, layouts don't have a `self._behavior` to pass to `type_from_behavior`.)\r\n\r\nIt's these weirdnesses that make me want to banish `ak.type` overall, but I don't think we can do that because \"type\" is a common word that might be overridden in the `ak.Array` subclass namespace.\r\n\r\n> IIRC we rely on `ak.to_layout` leaving scalars intact elsewhere in the program\r\n\r\nGood point!\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/8d7a2c31f1ea24cef8a909fb12bb14eb812477ac/src/awkward/operations/ak_to_layout.py#L14\r\n\r\nhas an `allow_other` argument for passing through scalars unharmed, so the same thing should happen to string-scalars. This is still using the principle that `ak.to_layout` should do what `ak.*` argument-handling needs, but making the important point that it needs to pass some arguments through as scalars.\r\n\r\nI'm in favor of making `ak.to_layout(\"string\")` return `\"string\"`, without a deprecation cycle because I don't see a good way to do it.",
  "created_at":"2023-01-05T20:45:20Z",
  "id":1372725001,
  "issue":2070,
  "node_id":"IC_kwDODBCWws5R0h8J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T20:45:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Layouts need to be nestable/self-similar, including the ArrayType wrapper would break that. Certainly layout.form.type shouldn't include the ArrayType wrapper; ak.type could, but then ak.type would be returning a different result than layout.form.type.\r\n\r\nWhat I'm proposing is that the high-level function directly replicates the high-level `Array.type` logic. And, I'd go as far as to say that it should always wrap with the `ArrayType` wrapper, even if a low-level layout is passed in. But, you make a case for replicating the high/low-level distinction, so we could also use a simple switch\r\n\r\n```python\r\nlayout = ak.to_layout(array, ...)\r\nlayout_type = layout.form.type_from_behavior(behavior)\r\nif is_high_level(array):\r\n    return ak.types.ArrayType(\r\n\t    layout_type, layout.length\r\n\t)\r\nelse:\r\n    return layout_type\r\n```\r\n\r\n> I'm in favor of making ak.to_layout(\"string\") return \"string\", without a deprecation cycle because I don't see a good way to do it.\r\n\r\nThis is what I like most of the options on the table. I suspect that something like `ak.fill_none` etc might want to receive a layout here, but I think we can special case that and improve our robustness vs keeping this peculiarity.",
  "created_at":"2023-01-05T20:50:25Z",
  "id":1372730362,
  "issue":2070,
  "node_id":"IC_kwDODBCWws5R0jP6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T20:50:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Maybe `ak.type` should take `highlevel` and `behavior` arguments, like most other `ak.*` functions, and use them to decide whether or not the output is wrapped in `ArrayType` and what to pass to `type_from_behavior`?\r\n\r\nThen, at least, we'd have a good explanation why\r\n\r\n```python\r\nisinstance(ak.Array([1, 2, 3]).type, ak.types.ArrayType)\r\n```\r\n\r\nis `True`,\r\n\r\n```python\r\nisinstance(ak.Array([1, 2, 3]).layout.form.type, ak.types.ArrayType)\r\n```\r\n\r\nis `False`, and\r\n\r\n```python\r\nak.type(ak.Array([1, 2, 3]).layout)\r\n```\r\n\r\nreturns something different from `layout.form.type`: \"it's guided by `ak.type`'s `highlevel` and `behavior` arguments, not by the Python type of the first argument.\"\r\n",
  "created_at":"2023-01-05T21:51:04Z",
  "id":1372822856,
  "issue":2070,
  "node_id":"IC_kwDODBCWws5R051I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T21:51:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Maybe ak.type should take highlevel and behavior arguments, like most other ak.* functions, and use them to decide whether or not the output is wrapped in ArrayType and what to pass to type_from_behavior?\r\n\r\nHehe, I also had the same thought. I'm happy to choose that solution over type-dependence. It would be easier to reason about, for one thing.",
  "created_at":"2023-01-05T21:54:53Z",
  "id":1372827159,
  "issue":2070,
  "node_id":"IC_kwDODBCWws5R064X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T21:54:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It seems like a good way to go. I'm in favor of that (`highlevel` argument fully determining whether the output has an `ArrayType` or not).\r\n\r\nThe idea of the output of a function named `ak.type` depending on type doesn't sound wrong, but this \"include `ArrayType` or not\" is special.",
  "created_at":"2023-01-05T22:05:03Z",
  "id":1372838292,
  "issue":2070,
  "node_id":"IC_kwDODBCWws5R09mU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T22:05:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"More than a nice user experience, this really should work. All of the array-like function arguments are supposed to be processed with `ak.to_layout`, which would have eliminated any distinction between `np.array(X)` and `ak.Array(np.array(X))`.\r\n\r\nI haven't been able to reproduce this. What am I doing differently from you?\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n\r\n>>> ak.unflatten([1.1, 2.2, 3.3, 4.4, 5.5], [3, 0, 2], axis=0)\r\n<Array [[1.1, 2.2, 3.3], [], [4.4, 5.5]] type='3 * var * float64'>\r\n\r\n>>> ak.unflatten(ak.Array([1.1, 2.2, 3.3, 4.4, 5.5]), ak.Array([3, 0, 2]), axis=0)\r\n<Array [[1.1, 2.2, 3.3], [], [4.4, 5.5]] type='3 * var * float64'>\r\n\r\n>>> ak.unflatten(np.array([1.1, 2.2, 3.3, 4.4, 5.5]), ak.Array([3, 0, 2]), axis=0)\r\n<Array [[1.1, 2.2, 3.3], [], [4.4, 5.5]] type='3 * var * float64'>\r\n\r\n>>> ak.unflatten(ak.Array([1.1, 2.2, 3.3, 4.4, 5.5]), np.array([3, 0, 2]), axis=0)\r\n<Array [[1.1, 2.2, 3.3], [], [4.4, 5.5]] type='3 * var * float64'>\r\n\r\n>>> ak.unflatten(np.array([1.1, 2.2, 3.3, 4.4, 5.5]), np.array([3, 0, 2]), axis=0)\r\n<Array [[1.1, 2.2, 3.3], [], [4.4, 5.5]] type='3 * var * float64'>\r\n```\r\n\r\nAha! It's the `IndexedArray`:\r\n\r\n```python\r\n>>> ak.unflatten([1.1, 2.2, 3.3, 4.4, 5.5], ak.to_categorical([3, 0, 2]))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_unflatten.py\", line 83, in unflatten\r\n    return _impl(array, counts, axis, highlevel, behavior)\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_unflatten.py\", line 104, in _impl\r\n    raise ak._errors.wrap_error(\r\nValueError: while calling\r\n\r\n    ak.unflatten(\r\n        array = [1.1, 2.2, 3.3, 4.4, 5.5]\r\n        counts = <Array [3, 0, 2] type='3 * categorical[type=int64]'>\r\n        axis = 0\r\n        highlevel = True\r\n        behavior = None\r\n    )\r\n\r\nError details: counts must be an integer or a one-dimensional array of integers\r\n```\r\n\r\nYes, something is looking at the `counts` and deciding that it's not a flat array of integers because it has an `IndexedArray` node just above the `NumpyArray` node.\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/8d7a2c31f1ea24cef8a909fb12bb14eb812477ac/src/awkward/operations/ak_unflatten.py#L96-L108\r\n\r\nThe `IndexedArray` case is not included in `counts.is_option`, but it can be handled as a pre-processing. Also, unrelated to the above issue, the `is_option` case should be guarded against failure in `to_numpy` (with a hard-to-interpret error message).\r\n\r\n```diff\r\n+        if isinstance(counts, IndexedArray):\r\n+            counts = counts.project()\r\n+\r\n-        if counts.is_option:\r\n+        if counts.is_option and (counts.content.is_numpy or counts.content.is_unknown):\r\n             mask = counts.mask_as_bool(valid_when=False)\r\n             counts = counts.to_numpy(allow_missing=True)\r\n             counts = ak._nplikes.numpy.ma.filled(counts, 0)\r\n         elif counts.is_numpy or counts.is_unknown:\r\n             counts = counts.to_numpy(allow_missing=False)\r\n             mask = False\r\n         else:\r\n             raise ak._errors.wrap_error(\r\n                 ValueError(\r\n                     \"counts must be an integer or a one-dimensional array of integers\"\r\n                 )\r\n             )\r\n```",
  "created_at":"2023-01-05T20:00:36Z",
  "id":1372671149,
  "issue":2071,
  "node_id":"IC_kwDODBCWws5R0Uyt",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-05T20:01:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Thanks for investigating! I'll use `np.asarray` as a workaround, and look out for a future fix (no rush from my side since I haev the workaround). Otherwise, the transition to awkward 2.x looks like it will be pretty easy - I just needed a few minor changes \ud83d\ude42 ",
  "created_at":"2023-01-05T23:11:30Z",
  "id":1372911479,
  "issue":2071,
  "node_id":"IC_kwDODBCWws5R1Pd3",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-05T23:11:30Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this is closed by #2097, though your categorical test case is not. Originally, I thought that  was out-of-scope for unflatten. I'm perhaps more permissive today. Do you think we should have a special case for categorical integers as `counts`?",
  "created_at":"2023-01-10T15:09:31Z",
  "id":1377418304,
  "issue":2071,
  "node_id":"IC_kwDODBCWws5SGbxA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T15:09:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I used categorical just as an easy way to produce an IndexedArray, although it's odd that the fix applies to IndexedArrays but not also categoricals. They only differ by a parameter.\r\n\r\nI don't see anything in #2097 that explicitly forbids IndexedArrays with `__array__: \"categorical\"`.",
  "created_at":"2023-01-10T16:50:08Z",
  "id":1377558191,
  "issue":2071,
  "node_id":"IC_kwDODBCWws5SG96v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T16:50:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It's more that we project out the index types using `to_packed()` here. If we want to support indexed types, we could. I was thinking of categoricals as a distinct type rather than an optimisation, so it probably does make sense that they work.",
  "created_at":"2023-01-10T17:04:36Z",
  "id":1377577082,
  "issue":2071,
  "node_id":"IC_kwDODBCWws5SHCh6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T17:04:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"A much more comprehensive report is given in #2073 ",
  "created_at":"2023-01-05T21:14:18Z",
  "id":1372775466,
  "issue":2072,
  "node_id":"IC_kwDODBCWws5R0uQq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T21:14:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm enabling auto-merge on this one because it seems very straightforward and done. Many of the tests haven't started, but I suspect that's because we're using the maximum number that we're allowed to use. If it's held up by the link-checker, then this branch will need to be updated when that goes into `main`.\r\n",
  "created_at":"2023-01-05T22:39:24Z",
  "id":1372882625,
  "issue":2074,
  "node_id":"IC_kwDODBCWws5R1IbB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T22:39:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This won't run all the tests because we don't run build tests if the code isn't touched. If the non-queued tests all pass, I'll merge.",
  "created_at":"2023-01-06T00:23:48Z",
  "id":1372968847,
  "issue":2074,
  "node_id":"IC_kwDODBCWws5R1deP",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-06T00:23:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2075?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2075](https://codecov.io/gh/scikit-hep/awkward/pull/2075?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4b877f6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8d7a2c31f1ea24cef8a909fb12bb14eb812477ac?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8d7a2c3) will **increase** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2075?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2075?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.80% <0.00%> (+0.25%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/2075?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `95.00% <0.00%> (+2.31%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-05T21:57:48Z",
  "id":1372830567,
  "issue":2075,
  "node_id":"IC_kwDODBCWws5R07tn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T22:15:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> What's the new prepare-release.yml? Is it something that we should run manually? It doesn't have the link-checker in it.\r\n\r\n@jpivarski :flushed: glad you caught that. I don't know how that snuck in there; I always use `git add --update` or manual staging to avoid accidental commits!",
  "created_at":"2023-01-05T22:46:16Z",
  "id":1372888300,
  "issue":2075,
  "node_id":"IC_kwDODBCWws5R1Jzs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-05T22:46:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2077?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2077](https://codecov.io/gh/scikit-hep/awkward/pull/2077?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (065026e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/120ad0ccbb31e90f188cd1819429e93a8c956637?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (120ad0c) will **increase** coverage by `0.00%`.\n> The diff coverage is `75.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2077?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward/pull/2077?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bnppcC5weQ==) | `95.45% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2077?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.42% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2077?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.30% <0.00%> (+0.58%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-06T00:13:42Z",
  "id":1372960217,
  "issue":2077,
  "node_id":"IC_kwDODBCWws5R1bXZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T00:13:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2079?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2079](https://codecov.io/gh/scikit-hep/awkward/pull/2079?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (135f2e6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/26f94814f67ef857d735652ee7a72a72550638af?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (26f9481) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2079?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2079?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `67.28% <100.00%> (+0.16%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-06T01:25:10Z",
  "id":1373014602,
  "issue":2079,
  "node_id":"IC_kwDODBCWws5R1opK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T01:25:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Right. It doesn't try to solve the NumPy side of things, e.g. if we didn't define `ak.broadcast_arrays`, the result of calling `np.broadcast_arrays` would fail in the same manner. \r\n\r\nWe could be smarter there, but I also think there comes a point where we _need_ to write an overload to handle the dynamicism of the NumPy API. That said, exploring returned tuples / lists and interpreting `np.ndarray` is definitely possible. Thankfully, we would still want this PR if we do decide to go that extra step in the future.",
  "created_at":"2023-01-06T08:03:08Z",
  "id":1373320535,
  "issue":2079,
  "node_id":"IC_kwDODBCWws5R2zVX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T08:03:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I see no reason to remove array-of-integer indexing on truly ragged arrays, even if it is slow, because there is no other way to do it. A slow implementation of a capability is better than no implementation of a capability.\r\n\r\nBut if the array is not \"truly\" ragged\u2014that is, if the lengths of lists at each level are uniform, regardless of whether they're RegularArray or ListArray/ListOffsetArray\u2014then Awkward array-of-integer and array-of-boolean indexing are effectively a slow implementation of what NumPy computes quickly. It could be valuable to have a fast path for this case. If we detect that the array being sliced is NumPy-like (i.e. `ak.to_numpy` would not raise an exception), then we could turn it into an actual NumPy (or CuPy, etc.) array and call its `__getitem__` to do the slice. We wouldn't even need to get into details like `ravel_multi_index` (though this might be what NumPy uses to implement the slice): we'd just hand it a true NumPy array and let it slice it.\r\n\r\nThat would leave open one remaining case: what to do about missing values. `ak.to_numpy` will (with `allow_missing=True`) push option-type at any level down to the leaf level so that the array can be a `np.ma.MaskedArray`. If we use `ak.to_numpy` (or `ak.to_cupy`, etc.) to determine if an array is regular, make it a true NumPy (or CuPy, etc.) array, let the array library slice it, and wrap the result in a shallow `ak.Array`, then it would have the wrong type and values:\r\n\r\n```python\r\n>>> array = ak.Array([[1, 2], None, [3, 4]])\r\n>>> array\r\n<Array [[1, 2], None, [3, 4]] type='3 * option[var * int64]'>\r\n\r\n>>> ak.from_numpy(ak.to_numpy(array))\r\n<Array [[1, 2], [None, None], [3, 4]] type='3 * 2 * ?int64'>\r\n```\r\n\r\nAlthough that can be repaired after the fact. (Insert a `ByteMaskedArray` at the right level.)\r\n\r\n--------------\r\n\r\nBut, to emphasize the first point, I would not be in favor of taking away a capability that isn't available anywhere else (NumPy-like slicing of non-NumPy-like ragged arrays). I would be in favor of someday adding a fast path for the overlap in functionality between Awkward Array and NumPy, in which NumPy does it much faster.\r\n\r\nHowever, that would not make the codebase simpler: we'd still need the old code path for the general case (array being sliced is not truly regular), and then we'd have an additional code path for optimization. That's why we start with general, albeit slow, code: only special cases can be optimized, and adding special cases complicates the codebase\u2014which is fine, as long as we're satisfied that the baseline is under control.",
  "created_at":"2023-01-06T14:25:14Z",
  "id":1373707758,
  "issue":2080,
  "node_id":"IC_kwDODBCWws5R4R3u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T14:25:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, let's not moot removing the feature on ragged arrays.\r\n\r\nI think there's a happy medium here where we can implement a general solution that's faster than sequential carry. I think we should be able to defer the carry until the end by building the appropriate index structures, i.e. there's a solution that doesn't involve `to_numpy()`. There're a lot of cases to think about, and I'm not going to work on this immediately, so I'll just leave that as an assertion!",
  "created_at":"2023-01-06T14:36:38Z",
  "id":1373718178,
  "issue":2080,
  "node_id":"IC_kwDODBCWws5R4Uai",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T14:36:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"To further explain what's happening here to make this a bug:\r\n\r\nConsider an array of shape `(N, M, P, Q)`. An advanced index of length `K` will perform a carry of length `K` into `(N, M, P, Q)` to produce an array of shape `(K, M, P, Q)`. If `K` is of the order of the array size, then we might approximate this to be (`K * M * P * Q, M, P, Q`) which is clearly not going to scale well! \r\n\r\n@jpivarski and I discussed this, and it needs to be fixed, but given that no-one has reported it, it's not the most pressing thing to solve.",
  "created_at":"2023-01-06T21:45:06Z",
  "id":1374170266,
  "issue":2080,
  "node_id":"IC_kwDODBCWws5R6Cya",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T21:45:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2083?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2083](https://codecov.io/gh/scikit-hep/awkward/pull/2083?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (182289a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/a80fc481a8c948d6fff50e6aa1f3493f951e23e0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a80fc48) will **increase** coverage by `0.00%`.\n> The diff coverage is `94.44%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2083?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2083?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.64% <50.00%> (+0.22%)` | :arrow_up: |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2083?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.01% <100.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-06T21:57:26Z",
  "id":1374181770,
  "issue":2083,
  "node_id":"IC_kwDODBCWws5R6FmK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-06T21:57:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2084?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2084](https://codecov.io/gh/scikit-hep/awkward/pull/2084?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6b99430) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/54ab9f31f93b0ab427fb57918b56a11c00fe9e45?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (54ab9f3) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-06T15:57:46Z",
  "id":1373831192,
  "issue":2084,
  "node_id":"IC_kwDODBCWws5R4wAY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T20:35:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"```\r\nE               TypeError: while calling\r\nE               \r\nE                   ak.from_rdataframe(\r\nE                       rdf = RInterface<ROOT::Detail::RDF::RLoopManager,void>-instance\r\nE                       columns = 'x'\r\nE                   )\r\nE               \r\nE               Error details: unrecognized primitive: 'unsupported_primitive_type'. Must be one of\r\nE               \r\nE                   bool, int8, uint8, int16, uint16, int32, uint32, int64, uint64, float32, float64, complex64, complex128, datetime64, timedelta64, float16, float128, complex256\r\nE               \r\nE               or a datetime64/timedelta64 with units (e.g. 'datetime64[15us]')\r\n\r\nout        = None\r\nprimitive  = 'unsupported_primitive_type'\r\n```\r\n\r\nOkay, I'm going to check it out locally and see what's happening.",
  "created_at":"2023-01-12T19:57:47Z",
  "id":1380931941,
  "issue":2084,
  "node_id":"IC_kwDODBCWws5ST1ll",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T19:57:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> And since `std::is_same_v<T, bool>` checks compatibility/equivalence, rather than exact alias names...\r\n\r\n`std::is_same_v<T, bool>` does not check for compatibility/equivalence. It checks for exact equality in some sense (possibly depends on how `stdint.h` was written):\r\n\r\n```\r\nroot [0] std::is_same_v<Long64_t, int64_t>\r\n(const bool) false\r\n```\r\n\r\nBut this should do it:\r\n\r\n```\r\nroot [1] std::is_integral_v<Long64_t> && std::is_signed_v<Long64_t> && sizeof(Long64_t) == 8\r\n(bool) true\r\n```\r\n\r\nI'm updating the code.",
  "created_at":"2023-01-12T20:16:15Z",
  "id":1380949031,
  "issue":2084,
  "node_id":"IC_kwDODBCWws5ST5wn",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-12T20:17:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is working for me, locally:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/7929f0b740378668dedd5e42ebe62a6fa1f35bad/header-only/awkward/utils.h#L19-L77",
  "created_at":"2023-01-12T20:28:00Z",
  "id":1380959535,
  "issue":2084,
  "node_id":"IC_kwDODBCWws5ST8Uv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T20:28:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > And since `std::is_same_v<T, bool>` checks compatibility/equivalence, rather than exact alias names...\r\n> \r\n> `std::is_same_v<T, bool>` does not check for compatibility/equivalence. It checks for exact equality in some sense (possibly depends on how `stdint.h` was written):\r\n> \r\n> ```\r\n> root [0] std::is_same_v<Long64_t, int64_t>\r\n> (const bool) false\r\n> ```\r\n> \r\nyes, because in this case:\r\n```\r\nroot [0] std::is_same_v<Long64_t, int64_t>\r\n(const bool) false\r\nroot [1] std::is_same_v<Long64_t, long long>\r\n(const bool) true\r\nroot [2] std::is_same_v<int64_t, long>\r\n(const bool) true\r\n```\r\n> But this should do it:\r\n> \r\n> ```\r\n> root [1] std::is_integral_v<Long64_t> && std::is_signed_v<Long64_t> && sizeof(Long64_t) == 8\r\n> (bool) true\r\n> ```\r\n> \r\n> I'm updating the code.\r\n\r\n",
  "created_at":"2023-01-13T16:11:57Z",
  "id":1382069460,
  "issue":2084,
  "node_id":"IC_kwDODBCWws5SYLTU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T16:11:57Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2087](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c216308) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c4cb71707fbaa681f72f28e231d13019990764e2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c4cb717) will **decrease** coverage by `0.08%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_sort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb3J0LnB5) | `60.00% <0.00%> (-40.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `75.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_ones\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19vbmVzX2xpa2UucHk=) | `90.90% <0.00%> (-9.10%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_zeros\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha196ZXJvc19saWtlLnB5) | `92.85% <0.00%> (-7.15%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_ravel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19yYXZlbC5weQ==) | `93.33% <0.00%> (-6.67%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc2Nsb3NlLnB5) | `94.44% <0.00%> (-5.56%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudF9ub256ZXJvLnB5) | `77.27% <0.00%> (-2.73%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_nan\\_to\\_num.py](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbnVtLnB5) | `98.03% <0.00%> (-1.97%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `98.07% <0.00%> (-1.93%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `78.26% <0.00%> (-1.74%)` | :arrow_down: |\n| ... and [14 more](https://codecov.io/gh/scikit-hep/awkward/pull/2087?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-07T21:27:07Z",
  "id":1374618242,
  "issue":2087,
  "node_id":"IC_kwDODBCWws5R7wKC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T20:09:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The branch preview `try-it` link can be used to verify that the following links to the correct URL:\r\n```python\r\nak.to_regular([\r\n    [1,2,3],\r\n    [4,5]\r\n])",
  "created_at":"2023-01-09T18:59:20Z",
  "id":1376133554,
  "issue":2087,
  "node_id":"IC_kwDODBCWws5SBiGy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T18:59:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Here's a modified `ak._connect.numpy.implements` that would enforce the correspondence between `POSITIONAL_OR_KEYWORD` arguments:\r\n```python\r\ndef implements(numpy_function):\r\n    def decorator(function):\r\n        numpy_function_impl = getattr(numpy, numpy_function)\r\n        numpy_signature = inspect.signature(numpy_function_impl)\r\n        awkward_signature = inspect.signature(function)\r\n\r\n        # Require that any NumPy arguments that are required, but can be\r\n        # passed by keyword, exist in the Awkward signature, with the same\r\n        # names\r\n        for np_param, ak_param in itertools.zip_longest(\r\n            numpy_signature.parameters.values(), awkward_signature.parameters.values()\r\n        ):\r\n            assert np_param is not None\r\n            if ak_param is None:\r\n                break\r\n\r\n            # Don't care about names, they can't be used\r\n            if np_param.kind == np_param.POSITIONAL_ONLY:\r\n                continue\r\n\r\n            # Require that we use same names at same positions\r\n            elif np_param.kind == np_param.POSITIONAL_OR_KEYWORD:\r\n                assert (\r\n                    np_param.name == ak_param.name\r\n                ), f\"Awkward NEP-function {numpy_function!r} uses a different argument name for NumPy's position-only \" \\\r\n                   f\"counterpart: {np_param.name!r}\"\r\n\r\n            else:\r\n                break\r\n\r\n        implemented[numpy_function_impl] = function\r\n        return function\r\n\r\n    return decorator\r\n```",
  "created_at":"2023-01-07T22:55:05Z",
  "id":1374643387,
  "issue":2088,
  "node_id":"IC_kwDODBCWws5R72S7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-07T22:55:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This issue ties in slightly with #2045 and #2079. I think it might be safer / easier to write explicit NEP-18 overloads for our functions, which would be more robust and properly honour the supported signature of the NumPy functions without requiring us to bend our Awkward API. E.g.\r\n\r\n```python\r\ndef std(\r\n    x,\r\n    weight=None,\r\n    ddof=0,\r\n    axis=None,\r\n    *,\r\n    keepdims=False,\r\n    mask_identity=False,\r\n    flatten_records=unset,\r\n):\r\n    ...\r\n    \r\n    \r\n@ak._connect.numpy.implements(\"std\")\r\ndef _nep_18_impl(\r\n    a, axis=None, dtype=unsupported, out=unsupported, ddof=0, keepdims=False, *, where=unsupported\r\n):\r\n    nplike = ak._nplikes.nplike_of(a)\r\n    behavior = ak._util.behaviorof(a)\r\n    out = std(\r\n        a=a, \r\n        keepdims=keepdims,\r\n        ddof=ddof,\r\n        keepdims=keepdims\r\n    )\r\n    return ak._util.wrap(out, behavior=behavior)\r\n```\r\n\r\nWe could modify `implements(...)` so that it handles the boilerplate of non-existent arguments (`unsupported`). Any more advanced validation should occur in the `_nep_18_impl` function.",
  "created_at":"2023-01-07T22:57:00Z",
  "id":1374643972,
  "issue":2088,
  "node_id":"IC_kwDODBCWws5R72cE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-08T00:24:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2089](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3056e89) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c4cb71707fbaa681f72f28e231d13019990764e2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c4cb717) will **decrease** coverage by `0.08%`.\n> The diff coverage is `70.96%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.66% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_sort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb3J0LnB5) | `60.00% <27.27%> (-40.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `75.00% <54.54%> (-25.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudF9ub256ZXJvLnB5) | `77.27% <66.66%> (-2.73%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc2Nsb3NlLnB5) | `94.44% <66.66%> (-5.56%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_nan\\_to\\_num.py](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbnVtLnB5) | `98.03% <66.66%> (-1.97%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `60.00% <71.42%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argmin.py](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `60.00% <71.42%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXgucHk=) | `60.00% <71.42%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `53.65% <71.42%> (+0.88%)` | :arrow_up: |\n| ... and [15 more](https://codecov.io/gh/scikit-hep/awkward/pull/2089?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-08T00:37:45Z",
  "id":1374671519,
  "issue":2089,
  "node_id":"IC_kwDODBCWws5R79Kf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-08T01:15:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> You mention performance from indirection, but that ought to be pretty minimal, while the benefits of a translation layer are pretty significant.\r\n\r\nYes, I like to make it clear that this does have an impact, but only if users are doing things in a loop. It's more of a \"take note\" rather than \"this is a regression\".\r\n\r\n> We'd like to synchronize the Awkward arguments and the NumPy arguments as much as possible, though, because we want to minimize user surprise. \r\n\r\nDefinitely (in the long run). It should be a goal that we avoid un-motivated divergences. Sorting might be an aberration here, as you point out.\r\n\r\n> In this PR, it looks like you added a translation layer for every NEP-18 overload, not just the ones that have different arguments.\r\n\r\nThe idea with these translation functions is that we're not directly coupled to NumPy's interface, which may have legacy arguments or other features that we don't support. If we do this for all functions, we'll keep some symmetry on our end. I think you're right, that we should try and use this predominantly for compatibility than for needlessly deviating from the NumPy API.\r\n\r\n> No, I don't see any examples that have exactly the same arguments (and maybe we'd always have highlevel and behavior, while NumPy would never have these two arguments).\r\n\r\nYes, and the main culprit here is `out`, which is nearly always present in NumPy operations, and we _never_ define. This argument is guaranteed to break positional correspondence of subsequent arguments, so these custom NEP-18 translators (?) ensure that we can use the signature of the NumPy function exactly.\r\n\r\n> should eventually match NumPy's arguments better, though for sorting, I was under the impression that their arguments are in flux. (They don't want to explicitly say what algorithm they're using, such as \"heapsort\".)\r\n\r\nShould we make a change here (in deprecation cycles)?",
  "created_at":"2023-01-09T09:09:04Z",
  "id":1375301945,
  "issue":2089,
  "node_id":"IC_kwDODBCWws5R-XE5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T09:38:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Should we make a change here (in deprecation cycles)?\r\n\r\nIt doesn't have to be done now. Eventually, I'd like to replace the sorting kernels\u2014which currently defer to C++ sorting algorithms\u2014with something that would be more like what we'll need to do in CUDA, but CUDA sorting is something that will require extra thought in itself.",
  "created_at":"2023-01-09T15:47:00Z",
  "id":1375836673,
  "issue":2089,
  "node_id":"IC_kwDODBCWws5SAZoB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T15:47:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2090](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (524f1a4) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6efa28727e2877daa9369f1efb265b5a630588fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6efa287) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `73.13% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.30% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.02% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.80% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.22% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.66% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.67% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.08% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.11% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.19% <100.00%> (\u00f8)` | |\n| ... and [4 more](https://codecov.io/gh/scikit-hep/awkward/pull/2090?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-08T01:05:56Z",
  "id":1374676563,
  "issue":2090,
  "node_id":"IC_kwDODBCWws5R7-ZT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T19:32:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've requested from @jpivarski too, because his comments on #2089 suggest that we might want to redefine our sorting API arguments.",
  "created_at":"2023-01-09T09:39:56Z",
  "id":1375338977,
  "issue":2090,
  "node_id":"IC_kwDODBCWws5R-gHh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T09:39:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'll be merging it without an explicit approval from @ianna. We were talking about the sort arguments today, and this is a detail of what we had agreed to.",
  "created_at":"2023-01-12T19:23:06Z",
  "id":1380900109,
  "issue":2090,
  "node_id":"IC_kwDODBCWws5STt0N",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T19:23:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I only briefly looked at this, but the flamegraph (thanks for that, by the way!) suggests that ~83% of the time is spent in the `ak::ArrayBuilder` portion of our codebase, which is used to interpreting the JSON. If you were to repeat this test, but only profile the `to_parquet` portion, I'd anticipate the wall-time to be closer to ~11 seconds. I also note that the two datasets seem to have different numbers of columns, though I've not looked closely to see whether we write some additional metadata here.\r\n\r\nSo, would you be able to repeat the test and cover only the `to_parquet` call? :) If you can't easily test particular Python statements, loading from `pickle` (by pickling the `from_json` result in a different execution) should be fairly fast.",
  "created_at":"2023-01-09T09:46:30Z",
  "id":1375346014,
  "issue":2091,
  "node_id":"IC_kwDODBCWws5R-h1e",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T09:46:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Sorry, I should have mentioned I'm interested in the end-to-end process rather than just the parquet writing on its own. Is there anything I can do to speed up the JSON reading portion of this workload if it's 83% of the work?\r\n\r\nI didn't notice it only produced two columns. If you have any tips for the JSON side of things, I can launch a new VM and see if I can figure out why there aren't three columns as well at the same time.",
  "created_at":"2023-01-09T10:36:21Z",
  "id":1375408861,
  "issue":2091,
  "node_id":"IC_kwDODBCWws5R-xLd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T10:36:21Z",
  "user":"MDQ6VXNlcjM1OTMxNg=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Sorry, I should have mentioned I'm interested in the end-to-end process rather than just the parquet writing on its own. \r\n\r\nOh, sure: we're interested in the end-to-end workflow too! We cater to a number of different use cases, and at some point we are more concerned with the performance of long-lived data, i.e. data that is transformed / operated upon before serialisation. @jpivarski and @ianna have a better feel for the performance implications of using `ArrayBuilder`, and where along that axis we're comfortable jumping off the optimisation train, so I've pinged them for their inputs :)",
  "created_at":"2023-01-09T10:56:28Z",
  "id":1375429883,
  "issue":2091,
  "node_id":"IC_kwDODBCWws5R-2T7",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-09T10:58:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> If you have any tips for the JSON side of things\r\n\r\nThere is an option: [ak.from_json](https://awkward-array.org/doc/main/reference/generated/ak.from_json.html) can take a `schema` argument. With a [JSON schema](https://json-schema.org/), the function can avoid the generic [ArrayBuilder](https://awkward-array.org/doc/main/reference/generated/ak.ArrayBuilder.html), which has to remain open to the possibility that later parts of a dataset have a more general data type than earlier parts.\r\n\r\nAlthough the exact speedup will depend on the data type, our tests found that `from_json` with a schema was about four times faster than without: https://github.com/scikit-hep/awkward/pull/1165#issuecomment-978691819.\r\n\r\nAlso in that test, running RapidJSON (the C++ library that we use for JSON parsing) by itself with no output was not quite twice as fast as running RapidJSON with array output. As a pipeline, walking over the schema description and filling arrays is about as expensive as parsing the JSON itself, and therefore, there's not much further you can go. (Even with a perfectly streamlined walk over an optimized schema description, writing to contiguous memory will have _some_ cost.)\r\n\r\n------\r\n\r\nLooking at your data type, it's not very complicated, so I doubt walking through the data type is the bottleneck here. Also, it has JSON nested in JSON:\r\n\r\n```json\r\n{\r\n  \"release\": 1,\r\n  \"capture_dates_range\": \"\",\r\n  \"geom\": \"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[-114.127454,34.265674],[-114.127476,34.265839],[-114.127588,34.265829],[-114.127565,34.265663],[-114.127454,34.265674]]]}\"\r\n}\r\n```\r\n\r\nso your first interpretation makes a big string column for `\"geom\"` and your second interpretation interprets that string.\r\n\r\nIf you're willing to get hacky and optimize this specific case\u2014i.e. write code that won't work for other data types\u2014then I've got some suggestions.\r\n\r\nI take it from your code that you're interested in the coordinates, and I'm going to assume that the `\"type\"` field is always `\"Polygon\"` (so the `\"coordinates\"` will always be depth-3). Those coordinates always start with \"`[`\" and nothing else can start with \"`[`\" (everything that comes before it is a JSON object, bare integer, or string). Since the coordinates are all numeric\u2014no strings\u2014none of its characters are string-quoted (with a backslash).\r\n\r\nSo we can start by stripping out just the coordinates with\r\n\r\n```python\r\n>>> outer_json[outer_json.index(\"[\") : outer_json.rindex(\"]\") + 1]\r\n'[[[-114.127454,34.265674],[-114.127476,34.265839],[-114.127588,34.265829],[-114.127565,34.265663],[-114.127454,34.265674]]]'\r\n```\r\n\r\nJust to be clear, if you have any expectation that the data type can change, this is extremely brittle. But fast!\r\n\r\nIt only produces one of these outer JSON objects, right? If so, then you can immediately parse the inner JSON. If not, you'll have to concatenate many of these strings. String concatenation is probably faster in pure Python (accumulate a list and `\"\".join(...)`) than anything that Awkward can do, and UNIX command-line tools (part of your workflow, I see) are likely even faster:\r\n\r\n```bash\r\n% fgrep '[' outer_json.json | sed 's/[^[]*//' | sed 's/}\"//'\r\n[[[-114.127454,34.265674],[-114.127476,34.265839],[-114.127588,34.265829],[-114.127565,34.265663],[-114.127454,34.265674]]]\r\n```\r\n\r\nOnce you have a single string or file-like stream ([ak.from_json](https://awkward-array.org/doc/main/reference/generated/ak.from_json.html) accepts any file-like object with a `read` method), you can use `from_json` with `line_delimited=True` (doesn't actually require delimiters, just a sequence of whole JSON objects with nothing but whitespace in between) and a schema.\r\n\r\nHere's the schema for an array of lists of lists of numbers:\r\n\r\n```json\r\n{\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": {\"type\": \"number\"}}}}\r\n```\r\n\r\nSo this will read your concatenated (or only instance of) inner JSON:\r\n\r\n```python\r\n>>> ak.from_json(inner_json, line_delimited=True, schema=that_schema)\r\n<Array [[[-114, 34.3], ..., [-114, 34.3]]] type='1 * var * var * float64'>\r\n```\r\n\r\n(The distinction between concatenated/`line_delimited=True` and a single instance could result in a different number of \"`var`\" in the type: be sure you're getting the depth that you want. Slicing with `[0]` removes an unwanted, length-1 dimension and slicing with `np.newaxis` adds one.)",
  "created_at":"2023-01-09T15:33:34Z",
  "id":1375804186,
  "issue":2091,
  "node_id":"IC_kwDODBCWws5SARsa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T15:33:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"I copy and pasted the Python from another ticket that suggested I looked at your project. I've corrected it to produce a PQ file that matches what ClickHouse produced. In my latest test, ClickHouse produced a PQ file in 18.49 seconds and Awkward did it in 28.07s. Awkward is the fastest converter in the Python space that I've seen so far.\r\n\r\nI'll look into your schema specification suggestion but in the meantime, here are the commands and stats.\r\n\r\n```bash\r\n$ /usr/bin/time -v \\\r\n    python3 -c \"import awkward as ak; f = open('California.jsonl', 'rb'); arr = ak.from_json(f, line_delimited=True); ak.to_parquet(arr, 'awkward.snappy.pq', compression='snappy', row_group_size=37738); f.close()\"\r\n```\r\n\r\n```\r\n<pyarrow._parquet.FileMetaData object at 0x7f1bc06793b0>\r\n  created_by: parquet-cpp-arrow version 10.0.1\r\n  num_columns: 3\r\n  num_rows: 11542912\r\n  num_row_groups: 306\r\n  format_version: 2.6\r\n  serialized_size: 213334\r\n```\r\n\r\n![parquet awkward snappy](https://user-images.githubusercontent.com/359316/211377533-94681902-33d2-4208-8894-1edeb80a6760.svg)\r\n\r\n```bash\r\n$ sudo su\r\n$ source .pq/bin/activate\r\n$ strace -wc \\\r\n    python3 -c \"import awkward as ak; f = open('cali10.jsonl', 'rb'); arr = ak.from_json(f, line_delimited=True); ak.to_parquet(arr, 'cali10.awkward.snappy.pq', compression='snappy', row_group_size=37738); f.close()\"\r\n```\r\n\r\n```\r\n% time     seconds  usecs/call     calls    errors syscall\r\n------ ----------- ----------- --------- --------- ----------------\r\n 23.10    0.026720          15      1760       146 stat\r\n 15.36    0.017765          18       937           read\r\n 10.70    0.012379          12       992           fstat\r\n  9.37    0.010839          17       604        50 openat\r\n  9.31    0.010770          12       877         5 lseek\r\n  6.57    0.007599          13       563           close\r\n  6.45    0.007463          16       447           mmap\r\n  5.00    0.005785          12       455       438 ioctl\r\n  3.21    0.003718          24       153           munmap\r\n  2.05    0.002369          71        33           clone\r\n  1.93    0.002235          20       110           mprotect\r\n  1.88    0.002170          23        92           getdents64\r\n  1.26    0.001463          14       102           getcwd\r\n  1.11    0.001286          18        68           futex\r\n  0.88    0.001021          18        56           brk\r\n  0.69    0.000799          11        68           rt_sigaction\r\n  0.22    0.000251         251         1           execve\r\n  0.19    0.000223          12        18           pread64\r\n  0.16    0.000189          14        13           write\r\n  0.06    0.000075          14         5         2 readlink\r\n  0.06    0.000070          11         6           getpid\r\n  0.05    0.000054          13         4           getrandom\r\n  0.04    0.000051          17         3           uname\r\n  0.04    0.000044          22         2           open\r\n  0.03    0.000038          19         2           pipe2\r\n  0.03    0.000037          12         3           sigaltstack\r\n  0.03    0.000036          11         3           dup\r\n  0.03    0.000033          16         2           madvise\r\n  0.03    0.000032          10         3           rt_sigprocmask\r\n  0.02    0.000026          12         2           sched_getaffinity\r\n  0.02    0.000026          25         1           wait4\r\n  0.02    0.000019           9         2         1 arch_prctl\r\n  0.01    0.000017          16         1           sysinfo\r\n  0.01    0.000017          16         1         1 access\r\n  0.01    0.000013          13         1           gettid\r\n  0.01    0.000012          11         1           set_tid_address\r\n  0.01    0.000011          11         1           fcntl\r\n  0.01    0.000011          11         1           prlimit64\r\n  0.01    0.000011          10         1           set_robust_list\r\n------ ----------- ----------- --------- --------- ----------------\r\n100.00    0.115675                  7394       643 total\r\n```\r\n\r\n```bash\r\n$ perf stat -dd \\\r\n    python3 -c \"import awkward as ak; f = open('cali10.jsonl', 'rb'); arr = ak.from_json(f, line_delimited=True); ak.to_parquet(arr, 'cali10.awkward.snappy.pq', compression='snappy', row_group_size=37738); f.close()\"\r\n```\r\n\r\n```\r\n  4,146.79 msec task-clock                #   11.560 CPUs utilized\r\n        97      context-switches          #   23.392 /sec\r\n         1      cpu-migrations            #    0.241 /sec\r\n    12,030      page-faults               #    2.901 K/sec\r\n```\r\n\r\nIf you have any further ideas, please share them. If not, I'm okay if you close this ticket.",
  "created_at":"2023-01-09T18:11:07Z",
  "id":1376044486,
  "issue":2091,
  "node_id":"IC_kwDODBCWws5SBMXG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T18:11:07Z",
  "user":"MDQ6VXNlcjM1OTMxNg=="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually, I think it should remain as a Discussion. I don't have any further ideas, though.",
  "created_at":"2023-01-09T18:26:47Z",
  "id":1376075231,
  "issue":2091,
  "node_id":"IC_kwDODBCWws5SBT3f",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T18:26:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Ah, this is a duplicate of #1997 , effectively.",
  "created_at":"2023-01-12T15:53:49Z",
  "id":1380603167,
  "issue":2092,
  "node_id":"IC_kwDODBCWws5SSlUf",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-12T15:53:49Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hmm, this test isn't failing on `main`...",
  "created_at":"2023-01-09T17:48:06Z",
  "id":1376015637,
  "issue":2093,
  "node_id":"IC_kwDODBCWws5SBFUV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T17:48:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2093](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cf3abfb) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/00da8e3410c1c55919bf8d9ab8ce24ca63d40982?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (00da8e3) will **decrease** coverage by `0.08%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_run\\_lengths.py](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19ydW5fbGVuZ3Rocy5weQ==) | `90.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_sort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb3J0LnB5) | `60.00% <0.00%> (-40.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `75.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_ones\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19vbmVzX2xpa2UucHk=) | `90.90% <0.00%> (-9.10%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_zeros\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha196ZXJvc19saWtlLnB5) | `92.85% <0.00%> (-7.15%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_ravel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19yYXZlbC5weQ==) | `93.33% <0.00%> (-6.67%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc2Nsb3NlLnB5) | `94.44% <0.00%> (-5.56%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudF9ub256ZXJvLnB5) | `77.27% <0.00%> (-2.73%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_nan\\_to\\_num.py](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbnVtLnB5) | `98.03% <0.00%> (-1.97%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `98.07% <0.00%> (-1.93%)` | :arrow_down: |\n| ... and [15 more](https://codecov.io/gh/scikit-hep/awkward/pull/2093?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-09T18:02:24Z",
  "id":1376033386,
  "issue":2093,
  "node_id":"IC_kwDODBCWws5SBJpq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T18:02:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski yes, don't run `git blame` ;)",
  "created_at":"2023-01-09T18:54:31Z",
  "id":1376128818,
  "issue":2093,
  "node_id":"IC_kwDODBCWws5SBg8y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T18:54:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski since writing this PR I'm more torn as to whether it would be better use the native endianness by default, and only make `pickle` use little-endian. What do you think here?",
  "created_at":"2023-01-09T20:28:10Z",
  "id":1376275647,
  "issue":2095,
  "node_id":"IC_kwDODBCWws5SCEy_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T20:50:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2095](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a993e62) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/42404f2ac38387fd9798bab4519e1fd909407c61?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (42404f2) will **increase** coverage by `0.00%`.\n> The diff coverage is `95.52%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `85.65% <\u00f8> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.21% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2F2cm9fZmlsZS5weQ==) | `72.22% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2l0ZXIucHk=) | `94.44% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_json.py](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19qc29uLnB5) | `83.56% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_list.py](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19saXN0LnB5) | `76.92% <0.00%> (\u00f8)` | |\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `88.88% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2J1ZmZlcnMucHk=) | `89.39% <94.44%> (-0.37%)` | :arrow_down: |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.30% <100.00%> (\u00f8)` | |\n| ... and [16 more](https://codecov.io/gh/scikit-hep/awkward/pull/2095?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-09T20:42:16Z",
  "id":1376289276,
  "issue":2095,
  "node_id":"IC_kwDODBCWws5SCIH8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T08:11:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've explicitly declared the byteorder for pickling too, so that we're never in doubt, and we don't accidentally regress. I also missed a case of `from_buffers` in `from_rdataframe` which I've fixed.",
  "created_at":"2023-01-10T08:07:03Z",
  "id":1376872187,
  "issue":2095,
  "node_id":"IC_kwDODBCWws5SEWb7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T08:07:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I started working on this, but realised we should discuss.",
  "created_at":"2023-01-09T22:51:31Z",
  "id":1376445006,
  "issue":2096,
  "node_id":"IC_kwDODBCWws5SCuJO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-09T22:51:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay.",
  "created_at":"2023-01-10T02:26:52Z",
  "id":1376638354,
  "issue":2096,
  "node_id":"IC_kwDODBCWws5SDdWS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T02:26:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"As a result of this conversation, we settled on:\r\n\r\n  * need to add a `ScalarType`, which is in the same category as `ArrayType` in that it's a \"wine cork\" to close off the nested `Type` structure, but it doesn't have a length\r\n  * in `ak.type`, `highlevel=True` implies that the output is either wrapped with `ArrayType` (because it's a collection, something with a length) or it is wrapped with `ScalarType` (because it's a single record or a number)\r\n  * the `type` property of `ak.Array` wraps with `ArrayType`, the `type` property of `ak.Record` wraps with `ScalarType`, and the low-level types (`type` property of `Form`) don't have wrappers\r\n  * if an `array` has type `string`/`bytes`, which is `ListType`/`RegularType` with `__array__: \"string\"`/`\"bytestring\"` containing a `NumpyType` with `__array__: \"char\"`/`\"byte\"`, then `array[0]` is not a scalar: it's an array of char/byte, which is to say `NumpyType` with `__array__: \"char\"`/`\"byte\"`. The reason we've been carrying around _two_ parameters to represent strings (one on the `ListType`/`RegularType` and the other on the `NumpyType`) was to be able to keep the stringiness of it when it gets unpacked.\r\n\r\nIn Awkward, strings are not _fundamentally_ scalars. They have some scalar-like behaviors that we add in by hand.",
  "created_at":"2023-01-11T16:01:38Z",
  "id":1379028443,
  "issue":2096,
  "node_id":"IC_kwDODBCWws5SMk3b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-11T16:01:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"To add \u00ad\u2014 what we're demonstrating with `ak.type(\"string\")` is that the \"string\"-ness is a property of the list, not an independent atom. A bare string is just a collection of `char`. In Python, that corresponds to `str` more naturally than `[\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]`.",
  "created_at":"2023-01-11T16:28:49Z",
  "id":1379095038,
  "issue":2096,
  "node_id":"IC_kwDODBCWws5SM1H-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-11T16:28:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2097?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2097](https://codecov.io/gh/scikit-hep/awkward/pull/2097?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1500d17) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/42404f2ac38387fd9798bab4519e1fd909407c61?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (42404f2) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2097?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2097?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.64% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/2097?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `95.31% <100.00%> (+1.28%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-10T00:05:24Z",
  "id":1376518450,
  "issue":2097,
  "node_id":"IC_kwDODBCWws5SDAEy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T00:05:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2098?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2098](https://codecov.io/gh/scikit-hep/awkward/pull/2098?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (30be100) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4db99b679d8dceb6b3ada7567876db80a8d26aa5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4db99b6) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n> :exclamation: Current head 30be100 differs from pull request most recent head 3474d51. Consider uploading reports for the commit 3474d51 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2098?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/2098?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `76.66% <100.00%> (+0.63%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/2098?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19sYXlvdXQucHk=) | `88.37% <100.00%> (-0.76%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2098?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.00% <0.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2098?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `68.96% <0.00%> (+0.43%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-10T13:28:04Z",
  "id":1377273448,
  "issue":2098,
  "node_id":"IC_kwDODBCWws5SF4Zo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T16:05:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Just adding support for bytestrings into `is_non_string_iterable`.",
  "created_at":"2023-01-10T15:58:04Z",
  "id":1377485468,
  "issue":2098,
  "node_id":"IC_kwDODBCWws5SGsKc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T15:58:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It's telling that no tests depended on this. That helpsto justify calling it a bug-fix.\r\n\r\nTechnically a couple of tests did implicitly \u00ad\u2014 requiring that ufuncs support bare strings. I think the solution is actually closer to what we want to happen now, using `__cast__` (and our first usage of `__cast__` internally that I can tell).\r\n\r\n",
  "created_at":"2023-01-10T17:03:22Z",
  "id":1377575479,
  "issue":2098,
  "node_id":"IC_kwDODBCWws5SHCI3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T17:03:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski before this makes it into a release ..., after our discussion about strings decaying to character arrays, do we want to revert this and replace it with a character-array codepath?",
  "created_at":"2023-01-12T20:44:07Z",
  "id":1380974175,
  "issue":2098,
  "node_id":"IC_kwDODBCWws5ST_5f",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T20:44:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I've lost track of what this refers to. What are you saying would be the consequences of cutting a release with this in it?",
  "created_at":"2023-01-12T21:01:10Z",
  "id":1380989066,
  "issue":2098,
  "node_id":"IC_kwDODBCWws5SUDiK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T21:01:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR does two things:\r\n1. changes `ak.to_layout(\"string\")` from returning `1 * string` to `str` iff. `allow_other=True`. \r\n2. converts `str` to `1 * string` via a `__cast__` behavior for ufunc operations.\r\n\r\nWe then spoke about single strings simply decaying to \t`char `arrays, so really this PR is not right either \u2014 `ak.to_layout(\"string\") should return `N * char`. \r\n\r\nI think we still need the `__cast__`: we don't want ufunc operations treating Python strings as char arrays, I don't think.\r\n\r\nMaking this release would mean that users could start relying on `ak.to_layout(\"string\", allow_other) == \"string\"`, which would break in the future.[^break]\r\n\r\n[^break]: Well, `CharBehavior` means that `array_of_char == \"string\"` should work after we make the suggested \"decay\" change, but it's not _actually_  a `str`.",
  "created_at":"2023-01-12T21:13:32Z",
  "id":1381000291,
  "issue":2098,
  "node_id":"IC_kwDODBCWws5SUGRj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T21:14:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"`allow_other=True` is for passing through non-array arguments, some of which may be (Python) string-valued options. (In particular, do any ufuncs have arguments of string type, e.g. `direction=\"up\"`? It would be hard to search for such things. We also accept ufuncs from libraries other than NumPy.)\r\n\r\nPerhaps it should not be used so loosely; functions that call it with `allow_other=True` should pick which arguments are supposed to be arrays, make them arrays, and which arguments are not supposed to be arrays, and leave them as they are.\r\n\r\nThe reimplementation to make this return an array of characters (\"decay\") would be pretty easy:\r\n\r\n```python\r\n>>> ak.to_layout([\"hello\"])[0]\r\n<NumpyArray dtype='uint8' len='5'>\r\n    <parameter name='__array__'>'char'</parameter>\r\n    [104 101 108 108 111]\r\n</NumpyArray>\r\n```\r\n\r\nSince the old bug (`to_layout` returned an array of one string) didn't trip over any tests, we're evidently not testing this case (other than tests/test_2070_to_layout_string.py) and the change should go through quickly.\r\n\r\nSo yes, it would be good to update `to_layout` to return an array of characters before the release.",
  "created_at":"2023-01-12T21:33:20Z",
  "id":1381018175,
  "issue":2098,
  "node_id":"IC_kwDODBCWws5SUKo_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T21:33:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2099?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2099](https://codecov.io/gh/scikit-hep/awkward/pull/2099?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6cd9cc3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4db99b679d8dceb6b3ada7567876db80a8d26aa5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4db99b6) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2099?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2099?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `68.96% <100.00%> (+0.43%)` | :arrow_up: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2099?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.07% <100.00%> (+0.25%)` | :arrow_up: |\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/2099?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `76.66% <100.00%> (+0.63%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2099?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.21% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/2099?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19sYXlvdXQucHk=) | `88.37% <100.00%> (-0.76%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_unflatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/2099?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `95.45% <100.00%> (+0.14%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/2099?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX2ZpZWxkLnB5) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-10T17:22:14Z",
  "id":1377600144,
  "issue":2099,
  "node_id":"IC_kwDODBCWws5SHIKQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-10T17:22:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2102?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2102](https://codecov.io/gh/scikit-hep/awkward/pull/2102?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4a89fbd) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/ad6aadbdcd507cb2876a6f21ea2b38ab431c17f0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ad6aadb) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2102?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/behaviors/mixins.py](https://codecov.io/gh/scikit-hep/awkward/pull/2102?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL21peGlucy5weQ==) | `97.56% <100.00%> (+0.06%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-11T17:23:13Z",
  "id":1379226366,
  "issue":2102,
  "node_id":"IC_kwDODBCWws5SNVL-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-11T17:23:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2105?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2105](https://codecov.io/gh/scikit-hep/awkward/pull/2105?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5175d25) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6efa28727e2877daa9369f1efb265b5a630588fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6efa287) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2105?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2105?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.22% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2105?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `73.19% <0.00%> (+0.42%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-12T12:50:08Z",
  "id":1380290678,
  "issue":2105,
  "node_id":"IC_kwDODBCWws5SRZB2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T12:50:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think we want to use `__reduce__` for this, rather than `__getstate__`.",
  "created_at":"2023-01-12T17:32:18Z",
  "id":1380764018,
  "issue":2106,
  "node_id":"IC_kwDODBCWws5STMly",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T17:32:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski can we be sure to hold the Python release until this issue has been fixed? Can do it today, later.",
  "created_at":"2023-01-12T17:32:37Z",
  "id":1380764363,
  "issue":2106,
  "node_id":"IC_kwDODBCWws5STMrL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T17:32:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay. I'll put it at the end of the queue and check on it when I get there.",
  "created_at":"2023-01-12T18:50:18Z",
  "id":1380862646,
  "issue":2106,
  "node_id":"IC_kwDODBCWws5STkq2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T18:50:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2111?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2111](https://codecov.io/gh/scikit-hep/awkward/pull/2111?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ff67e0f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6efa28727e2877daa9369f1efb265b5a630588fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6efa287) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2111?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/2111?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `95.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-12T17:28:44Z",
  "id":1380760332,
  "issue":2111,
  "node_id":"IC_kwDODBCWws5STLsM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T17:28:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2112?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2112](https://codecov.io/gh/scikit-hep/awkward/pull/2112?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e70a9a2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6efa28727e2877daa9369f1efb265b5a630588fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6efa287) will **not change** coverage.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2112?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2112?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_sort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2112?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb3J0LnB5) | `60.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-12T17:36:43Z",
  "id":1380768930,
  "issue":2112,
  "node_id":"IC_kwDODBCWws5STNyi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T19:25:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This is good. PyLint wants you to use `kind in (A, B)` instead of `kind == A or kind == B`. I'll do that and turn on auto-merge.\r\n\r\nActually, I prefer that \u00ad\u2014 my code-style is moving around in-line with Awkward, and sometimes gets a bit confused ;)",
  "created_at":"2023-01-12T20:22:36Z",
  "id":1380954870,
  "issue":2112,
  "node_id":"IC_kwDODBCWws5ST7L2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T20:22:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"You just started this, but remember we want to future-proof pickle-loading by making the `__setstate__` unpack an open-ended number of tuple items?\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/e35039630045613073a8ede94a880efcd27ca01f/src/awkward/highlevel.py#L1448\r\n\r\nand\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/e35039630045613073a8ede94a880efcd27ca01f/src/awkward/highlevel.py#L2090\r\n\r\nwith\r\n\r\n```python\r\nform, length, container, behavior, *args = state   # including at for ak.Record\r\n```\r\n\r\nor\r\n\r\n```python\r\nform = state[0]\r\nlength = state[1]\r\ncontainer = state[2]\r\nbehavior = state[3]\r\n# including at for ak.Record\r\n```\r\n\r\n(which Python versions accept the `*args` syntax?)\r\n\r\nThis is not the time to introduce a version number, but making as many old versions (starting with this one) insensitive to extra arguments would make it possible to add a version number at any time.",
  "created_at":"2023-01-12T19:56:49Z",
  "id":1380931026,
  "issue":2113,
  "node_id":"IC_kwDODBCWws5ST1XS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T19:56:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2113](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4a93567) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6efa28727e2877daa9369f1efb265b5a630588fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6efa287) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.21% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.30% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `73.13% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.08% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.22% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.39% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.05% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.66% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.47% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.02% <0.00%> (\u00f8)` | |\n| ... and [5 more](https://codecov.io/gh/scikit-hep/awkward/pull/2113?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-12T20:02:23Z",
  "id":1380936072,
  "issue":2113,
  "node_id":"IC_kwDODBCWws5ST2mI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T20:29:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> You just started this, but remember we want to future-proof pickle-loading by making the `__setstate__` unpack an open-ended number of tuple items?\r\n\r\nYou read my mind! (I stopped for food)\r\n\r\nYes, a version number is useful for backward compatibility, whilst this is useful for forwards compatibility. ",
  "created_at":"2023-01-12T20:18:42Z",
  "id":1380951221,
  "issue":2113,
  "node_id":"IC_kwDODBCWws5ST6S1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T20:18:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> There might still be issues pickling `behaviors` with lambda functions in them, but that's to be expected. For that reason, the standard `behaviors` all have names in the Awkward package (and in Vector).\r\n\r\nGood Practice\u2122!\r\n\r\n> I always get confused about the differences between `__reduce__` and `__getstate__`, and I prefer `__getstate__` because it is symmetric with `__setstate__`. But presumably, you have a reason for switching to `__reduce__` in this one, perhaps to be able to control the `__new__` method that gets used.\r\n\r\n`__getstate__` leads to Python including `type(self)` in the pickle stream, which is `MyCustomType` for any Array with a behavior class. This means that unpickling will always fail if the custom type cannot be resolved. However, by using `___reduce__`, we can tell Python to use a different constructor function, in this case `object.__new__(Array, ...)`. This means that the aforementioned case would not fail during unpickling provided that the user used `ak.behavior` rather than a custom behavior object; in the former case, we don't include the behavior dict in the pickle.\r\n\r\nWe could also have written\r\n\r\n```python\r\ndef _array_new():\r\n    return object.__new__(Array)\r\n```\r\nbut I can't see any motivation for it.\r\n\r\n> As for future-proofing the `state` unpacking, I just verified that the `*_` syntax was introduced with Python 3.0 ([PEP 3132](https://peps.python.org/pep-3132/)), so it's definitely safe to use. Although our tests would have revealed it if it wasn't, since we test every Python version we support.\r\n\r\nYep!\r\n\r\n",
  "created_at":"2023-01-12T20:41:58Z",
  "id":1380972314,
  "issue":2113,
  "node_id":"IC_kwDODBCWws5ST_ca",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T20:42:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2114?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2114](https://codecov.io/gh/scikit-hep/awkward/pull/2114?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (86f1c1d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/54ab9f31f93b0ab427fb57918b56a11c00fe9e45?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (54ab9f3) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2114?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2114?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `75.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_sort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2114?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb3J0LnB5) | `60.00% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-12T20:45:09Z",
  "id":1380975102,
  "issue":2114,
  "node_id":"IC_kwDODBCWws5SUAH-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T20:45:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2115?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2115](https://codecov.io/gh/scikit-hep/awkward/pull/2115?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4e2099c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e3f2213ed63381440419d2ad0ee072ea116aefee?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e3f2213) will **increase** coverage by `0.04%`.\n> The diff coverage is `30.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2115?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2115?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `73.75% <4.68%> (-8.32%)` | :arrow_down: |\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/2115?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `82.51% <75.00%> (-0.22%)` | :arrow_down: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2115?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.86% <91.66%> (+0.64%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2115?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `93.52% <100.00%> (+24.56%)` | :arrow_up: |\n| [src/awkward/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward/pull/2115?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3ByZXR0eXByaW50LnB5) | `70.96% <100.00%> (+0.68%)` | :arrow_up: |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2115?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `61.57% <100.00%> (+0.54%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-12T22:12:29Z",
  "id":1381052267,
  "issue":2115,
  "node_id":"IC_kwDODBCWws5SUS9r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T00:06:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The only one of those (the previous commit) was in src/awkward/_connect/numpy.py:\r\n\r\n```\r\n% fgrep -r '.touch_data(' src --include='*.py'\r\nsrc/awkward/contents/bitmaskedarray.py:            self._mask.data.touch_data()\r\nsrc/awkward/contents/listarray.py:            self._starts.data.touch_data()\r\nsrc/awkward/contents/listarray.py:            self._stops.data.touch_data()\r\nsrc/awkward/contents/numpyarray.py:            self._data.touch_data()\r\nsrc/awkward/contents/indexedarray.py:            self._index.data.touch_data()\r\nsrc/awkward/contents/unionarray.py:            self._tags.data.touch_data()\r\nsrc/awkward/contents/unionarray.py:            self._index.data.touch_data()\r\nsrc/awkward/contents/listoffsetarray.py:            self._offsets.data.touch_data()\r\nsrc/awkward/contents/indexedoptionarray.py:            self._index.data.touch_data()\r\nsrc/awkward/contents/bytemaskedarray.py:            self._mask.data.touch_data()\r\nsrc/awkward/_typetracer.py:            self._report.touch_data(self._form_key)\r\nsrc/awkward/_typetracer.py:        self.touch_data()\r\nsrc/awkward/_typetracer.py:                self.touch_data()\r\nsrc/awkward/_typetracer.py:            self.touch_data()\r\nsrc/awkward/_typetracer.py:            self.touch_data()\r\nsrc/awkward/_typetracer.py:            self.touch_data()\r\nsrc/awkward/_typetracer.py:        self.touch_data()\r\nsrc/awkward/_typetracer.py:        self.touch_data()\r\nsrc/awkward/_typetracer.py:        self.touch_data()\r\nsrc/awkward/_typetracer.py:        self.touch_data()\r\nsrc/awkward/_typetracer.py:        self.touch_data()\r\nsrc/awkward/_typetracer.py:        self.touch_data()\r\nsrc/awkward/_typetracer.py:        self.touch_data()\r\nsrc/awkward/_typetracer.py:        self.touch_data()\r\nsrc/awkward/_typetracer.py:        array.touch_data()\r\nsrc/awkward/_typetracer.py:            x.touch_data()\r\nsrc/awkward/_typetracer.py:            y.touch_data()\r\nsrc/awkward/_typetracer.py:            x.touch_data()\r\nsrc/awkward/_typetracer.py:            y.touch_data()\r\nsrc/awkward/_typetracer.py:            x.touch_data()\r\nsrc/awkward/_typetracer.py:            y.touch_data()\r\nsrc/awkward/_typetracer.py:            x.touch_data()\r\nsrc/awkward/_connect/numpy.py:                        x.data.touch_data()\r\n```",
  "created_at":"2023-01-12T23:30:44Z",
  "id":1381104511,
  "issue":2115,
  "node_id":"IC_kwDODBCWws5SUft_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T23:30:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah yes, test are now broken because we don't infer high-level / low-level from the array / layout type.",
  "created_at":"2023-01-12T23:18:01Z",
  "id":1381097265,
  "issue":2116,
  "node_id":"IC_kwDODBCWws5SUd8x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-12T23:18:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski in the test suite, a few places have become high-level tests (i.e., I added `ak.types.ArrayType` around the existing comparison operand(s). This means that sometimes we're now testing whether an operation produces `ArrayType(OtherType)` instead of `OtherType`, which doesn't explicitly test `OtherType`. However, I think this is fine.\r\n\r\nI added a test to cover some of the `ak.type`  `Content` cases, to ensure that `Content.form.type` matches `ak.type(...).content`",
  "created_at":"2023-01-13T00:08:32Z",
  "id":1381130847,
  "issue":2116,
  "node_id":"IC_kwDODBCWws5SUmJf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T00:09:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski btw, I'm maybe yielding on `highlevel=True`. It's just a thing users would need to read the docs to understand. If you think we should have the arg, I'll restore it after all!",
  "created_at":"2023-01-13T00:09:53Z",
  "id":1381132270,
  "issue":2116,
  "node_id":"IC_kwDODBCWws5SUmfu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T00:09:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> This means that sometimes we're now testing whether an operation produces `ArrayType(OtherType)` instead of `OtherType`, which doesn't explicitly test `OtherType`.\r\n\r\nIt does test `OtherType`, since that's a nested constituent of `ArrayType`. Any equality test would recurse down the expected and observed `Type`-trees. So I think this is more than fine.",
  "created_at":"2023-01-13T00:11:54Z",
  "id":1381134393,
  "issue":2116,
  "node_id":"IC_kwDODBCWws5SUnA5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T00:11:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski btw, I'm maybe yielding on `highlevel=True`. It's just a thing users would need to read the docs to understand. If you think we should have the arg, I'll restore it after all!\r\n\r\nI never had a strong reason for it\u2014just symmetry with the other `ak.*` functions. And it doesn't mean quite the same thing as it does in the other `ak.*` functions, so that's not a strong argument at all. Just, if a `highlevel` argument were to exist, this is what it should probably mean.",
  "created_at":"2023-01-13T00:15:11Z",
  "id":1381137773,
  "issue":2116,
  "node_id":"IC_kwDODBCWws5SUn1t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T00:15:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It does test OtherType, since that's a nested constituent of ArrayType. Any equality test would recurse down the expected and observed Type-trees. So I think this is more than fine.\r\n\r\nSure, I mean simply that if `ak.type` is a black-box, we aren't technically testing the low-level, which should most carefully be done using `layout.form.type`. However, it's fine as you say.",
  "created_at":"2023-01-13T00:17:39Z",
  "id":1381140747,
  "issue":2116,
  "node_id":"IC_kwDODBCWws5SUokL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T00:17:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2116?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2116](https://codecov.io/gh/scikit-hep/awkward/pull/2116?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e71f54d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/54ab9f31f93b0ab427fb57918b56a11c00fe9e45?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (54ab9f3) will **increase** coverage by `0.01%`.\n> The diff coverage is `79.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2116?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/types/scalartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2116?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvc2NhbGFydHlwZS5weQ==) | `77.27% <77.27%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/2116?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190eXBlLnB5) | `83.72% <78.57%> (+6.63%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/2116?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19sYXlvdXQucHk=) | `89.13% <85.71%> (+0.75%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2116?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.21% <100.00%> (\u00f8)` | |\n| [src/awkward/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2116?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX19pbml0X18ucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_sort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2116?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb3J0LnB5) | `60.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2116?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-13T00:24:19Z",
  "id":1381147616,
  "issue":2116,
  "node_id":"IC_kwDODBCWws5SUqPg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T00:24:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2117](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d60a7a7) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/54ab9f31f93b0ab427fb57918b56a11c00fe9e45?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (54ab9f3) will **increase** coverage by `0.05%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `73.75% <0.00%> (-8.32%)` | :arrow_down: |\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `82.51% <0.00%> (-0.22%)` | :arrow_down: |\n| [src/awkward/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX19pbml0X18ucHk=) | `100.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_sort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb3J0LnB5) | `60.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/types/scalartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvc2NhbGFydHlwZS5weQ==) | `77.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `61.57% <0.00%> (+0.54%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.86% <0.00%> (+0.64%)` | :arrow_up: |\n| [src/awkward/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3ByZXR0eXByaW50LnB5) | `70.96% <0.00%> (+0.68%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19sYXlvdXQucHk=) | `89.13% <0.00%> (+0.75%)` | :arrow_up: |\n| ... and [2 more](https://codecov.io/gh/scikit-hep/awkward/pull/2117?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-13T00:56:09Z",
  "id":1381170937,
  "issue":2117,
  "node_id":"IC_kwDODBCWws5SUv75",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T00:56:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Merging as I'm confident we want to start the release, and this is a test failure through NumPy usage.",
  "created_at":"2023-01-13T01:09:51Z",
  "id":1381179410,
  "issue":2117,
  "node_id":"IC_kwDODBCWws5SUyAS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T01:09:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks. I'm sorry that I was out of touch for a bit. (Daughter's violin practice.)",
  "created_at":"2023-01-13T01:13:53Z",
  "id":1381182027,
  "issue":2117,
  "node_id":"IC_kwDODBCWws5SUypL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T01:13:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"No problem! It's \"out of work hours\" right now, I just made a judgement call.",
  "created_at":"2023-01-13T01:16:39Z",
  "id":1381184012,
  "issue":2117,
  "node_id":"IC_kwDODBCWws5SUzIM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T01:16:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2119?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2119](https://codecov.io/gh/scikit-hep/awkward/pull/2119?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f5efad3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/ad5b10d409968cda9fc3ca6e1997adbcafc8c224?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ad5b10d) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-13T17:16:43Z",
  "id":1382156796,
  "issue":2119,
  "node_id":"IC_kwDODBCWws5SYgn8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T18:17:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I think @lgray wanted to know about this, since it's a way to catch Spark jobs that either had column names incorrectly optimized away or are missing for some other reason. The new exception type allows you to distinguish between spelling a column name wrong and other slicing errors (which are all `IndexError`, including this new `FieldNotFoundError`, through a subclass).\r\n\r\nIt will be going into the 2.0.6 release today.",
  "created_at":"2023-01-13T18:21:03Z",
  "id":1382221526,
  "issue":2120,
  "node_id":"IC_kwDODBCWws5SYwbW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T18:21:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2120?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2120](https://codecov.io/gh/scikit-hep/awkward/pull/2120?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d65ed84) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c64704660966958270b31a26da8243d5afb537df?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c647046) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2120?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/recordform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2120?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvcmVjb3JkZm9ybS5weQ==) | `87.83% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_errors.py](https://codecov.io/gh/scikit-hep/awkward/pull/2120?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `77.24% <100.00%> (+0.24%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-13T18:30:47Z",
  "id":1382230076,
  "issue":2120,
  "node_id":"IC_kwDODBCWws5SYyg8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T18:30:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2122?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2122](https://codecov.io/gh/scikit-hep/awkward/pull/2122?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (22ba07c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/aa202ee466e95c6748b736d8d8aa1ea61e1f5d88?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (aa202ee) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2122?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/2122?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXRhZGF0YV9mcm9tX3BhcnF1ZXQucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-14T12:31:48Z",
  "id":1382727549,
  "issue":2122,
  "node_id":"IC_kwDODBCWws5Sar99",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-14T12:31:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray  can you provide a reproducer for this? It might be closed now? \ud83e\udd1e ",
  "created_at":"2023-02-01T18:29:23Z",
  "id":1412528758,
  "issue":2123,
  "node_id":"IC_kwDODBCWws5UMXp2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-01T18:29:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this has been fixed, so I shall close it :)",
  "created_at":"2023-02-07T12:45:51Z",
  "id":1420714738,
  "issue":2123,
  "node_id":"IC_kwDODBCWws5UrmLy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T12:45:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2125](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (04cdb9c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/1e229292325be22b088a0709928f4345649ed01a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1e22929) will **increase** coverage by `0.00%`.\n> The diff coverage is `54.16%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.02% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.80% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.08% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.11% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.37% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.05% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.47% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.98% <0.00%> (\u00f8)` | |\n| [src/awkward/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdHlwZS5weQ==) | `95.95% <\u00f8> (\u00f8)` | |\n| ... and [2 more](https://codecov.io/gh/scikit-hep/awkward/pull/2125?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-16T10:10:30Z",
  "id":1383800662,
  "issue":2125,
  "node_id":"IC_kwDODBCWws5Sex9W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-16T21:24:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think IPyParallel is just a default extension that gets installed with IPython(?) I've not dug into where it comes from in great depth. In any case, we weren't using it, but it was causing a noisy popup that the server extension wasn't loaded! \r\n\r\n",
  "created_at":"2023-01-16T19:57:20Z",
  "id":1384493307,
  "issue":2126,
  "node_id":"IC_kwDODBCWws5ShbD7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-16T19:57:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski would you like me to remove `empty_if_typetracer` from this PR? :)",
  "created_at":"2023-01-16T17:52:31Z",
  "id":1384387616,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5ShBQg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:37:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Hey,\r\n\r\nI'll be able to answer this better on Wednesday. Presently away.",
  "created_at":"2023-01-16T17:53:05Z",
  "id":1384388038,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5ShBXG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:37:55Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"No, I thought that `empty_if_typetracer` is a good addition. Good enough, actually, for @lgray's use-case as well. We can revisit this on Wednesday. (I don't see anything this PR might be blocking.)",
  "created_at":"2023-01-16T19:13:52Z",
  "id":1384458417,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5ShSix",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-16T19:13:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've moved the cleanups this PR to https://github.com/scikit-hep/awkward/pull/2150. Now this is almost entirely `empty_if_typetracer`.",
  "created_at":"2023-01-20T23:57:24Z",
  "id":1399085370,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5TZFk6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T23:57:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2127?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2127](https://app.codecov.io/gh/scikit-hep/awkward/pull/2127?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d1cc779) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/3d84e056122b48b097750e87ef9298df3b7a66e2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3d84e05) will **increase** coverage by `0.01%`.\n> The diff coverage is `59.70%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2127?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2127?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.82% <46.00%> (\u00f8)` | |\n| [src/awkward/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2127?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXRyYWNlci5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-21T00:07:44Z",
  "id":1399090287,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5TZGxv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-10T09:25:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I think it's time to make `typetracer_with_report` public as it's now used by Dask, and `empty_if_typetracer` should be useful for @lgray (?)",
  "created_at":"2023-05-05T15:43:06Z",
  "id":1536444205,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5blEct",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:43:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Can you give me a short example of how you expect it to be used?",
  "created_at":"2023-05-05T15:47:36Z",
  "id":1536448977,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5blFnR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:47:36Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The code in coffea's lookup tools:\r\nhttps://github.com/CoffeaTeam/coffea/blob/38f0fcbe96efaea75d2ddfb70bd3e0b49ffd8ddf/coffea/lookup_tools/lookup_base.py#L33-L40\r\n\r\ncan be simplified to\r\n\r\n```python\r\nif backend == \"cpu\":\r\n    if thelookup_wref is not None:\r\n        thelookup = thelookup_wref()\r\n    else:\r\n        thelookup = thelookup_dask.compute()\r\nelif backend == \"typetracer\":\r\n    thelookup = thelookup_wref()\r\nelse:\r\n    raise AssertionError\r\n    \r\nzlargs = [ak.typetracer.empty_if_typetracer(x) for x in args]\r\nresult = thelookup._evaluate(\r\n    *(list(__pre_args__) + [awkward.to_numpy(zlarg) for zlarg in zlargs]),\r\n    **kwargs,\r\n)\r\n```\r\n\r\nYou can simplify this further if you clarify the `thelookup` logic.",
  "created_at":"2023-05-05T15:52:41Z",
  "id":1536454462,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5blG8-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:52:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I'd also like to update that to use `inspect.bind` to pack arguments instead of the clunky way I do it now. Is there a better way?",
  "created_at":"2023-05-05T15:55:22Z",
  "id":1536457530,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5blHs6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:55:22Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"`thelookup` is a way to consistently and quickly get a handle to the underlying correction being applied. We made a choice that corrections always take raw numpy arrays, and we unwrap awkward for that. The switch between weakref and dask is to avoid serialization overhead in dask since otherwise dask will pickle the correction metadata, which can be very large and expensive.\r\n\r\ni.e. it's just a pointer to a function, not an awkward array or anything like that.",
  "created_at":"2023-05-05T15:57:23Z",
  "id":1536459863,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5blIRX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:58:04Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray does this Gist help towards rewriting your transformer?\r\n\r\nhttps://gist.github.com/agoose77/9fc1938bf15d1dedb0bd72a4cd501ed1",
  "created_at":"2023-05-09T12:38:37Z",
  "id":1540042564,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5byy9E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T12:38:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@agoose77 Yes! This looks very much like the correct way. I'll give it a try during one of the breaks today! TYVM!",
  "created_at":"2023-05-09T13:15:01Z",
  "id":1540104736,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5bzCIg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T13:15:01Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  but if the private method access breaks, we should be careful about aligning versions so that we don't have a broken Awkward + Coffea pair in the crucial period around CHEP.\r\n\r\nAgreed. I'll just export the symbol from `awkward.typetracer`, and we'll ensure there's a transition period.",
  "created_at":"2023-05-10T09:09:20Z",
  "id":1541635378,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5b430y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-10T09:09:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Sweet - I'll try to address this in coffea before your next release since it creates incompatibility (I think?).",
  "created_at":"2023-05-10T16:11:41Z",
  "id":1542474782,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5b8Ewe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-10T16:11:41Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This now doesn't rename any symbols, we only export `typetracer_with_report`, `TypeTracerReport`, and `empty_if_typetracer` functions from the public `ak.typetracer` module. So, you should make a PR, but we won't break you :)",
  "created_at":"2023-05-10T17:12:44Z",
  "id":1542546474,
  "issue":2127,
  "node_id":"IC_kwDODBCWws5b8WQq",
  "performed_via_github_app":null,
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "updated_at":"2023-05-10T17:12:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2128](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (69465ea) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/aa202ee466e95c6748b736d8d8aa1ea61e1f5d88?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (aa202ee) will **increase** coverage by `0.12%`.\n> The diff coverage is `82.20%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `76.53% <\u00f8> (+2.78%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `33.33% <16.66%> (\u00f8)` | |\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `64.46% <50.00%> (-0.06%)` | :arrow_down: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.02% <66.66%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.80% <66.66%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.66% <66.66%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `72.94% <71.42%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `74.04% <75.00%> (+0.85%)` | :arrow_up: |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.98% <80.00%> (+0.59%)` | :arrow_up: |\n| ... and [15 more](https://codecov.io/gh/scikit-hep/awkward/pull/2128?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-16T12:27:26Z",
  "id":1383982287,
  "issue":2128,
  "node_id":"IC_kwDODBCWws5SfeTP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-16T12:27:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Not quite a bug because it was intended to work this way, but I can see the value in making the `ak.to_categorical` function be more active. We do have an L2 or L3 function for finding unique strings.\r\n\r\n(`nbytes` can be a little deceptive because it naively ignores overlaps, following NumPy, which ignores strides and the size of the `base` array when reporting `nbytes`. But I checked this example by looking at the layout.)",
  "created_at":"2023-01-16T19:10:52Z",
  "id":1384455430,
  "issue":2129,
  "node_id":"IC_kwDODBCWws5ShR0G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-16T19:10:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> (nbytes can be a little deceptive because it naively ignores overlaps\r\n\r\nYep, I'm being lazy here \u2014 if the array were truly categorical, then it should grow non-linearly with additional values in the same categories. However, I assume things like contiguousness etc that make it a poor metric. \r\n\r\nIn any case, we should be able to vectorise this down the road, i.e. write a kernel for hashing the known awkward types. However, for now, that's a todo.\r\n\r\n> Not quite a bug because it was intended to work this way, \r\n\r\nI don't think we do want this to be the case \u2014 this means that `ak.to_categorical()` doesn't produce a useful output for string types, right? i.e., it saves no memory. I might be missing something, though.",
  "created_at":"2023-01-16T20:57:34Z",
  "id":1384541691,
  "issue":2129,
  "node_id":"IC_kwDODBCWws5Shm37",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-16T20:58:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fixed by #2779 (or at least, not relevant!)",
  "created_at":"2023-10-30T15:26:19Z",
  "id":1785462080,
  "issue":2129,
  "node_id":"IC_kwDODBCWws5qa_1A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-30T15:26:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2130](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a949f63) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/aa202ee466e95c6748b736d8d8aa1ea61e1f5d88?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (aa202ee) will **increase** coverage by `0.12%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.02% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.80% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.08% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.11% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.37% <0.00%> (+0.14%)` | :arrow_up: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.05% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.47% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.98% <0.00%> (+0.59%)` | :arrow_up: |\n| [src/awkward/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdHlwZS5weQ==) | `95.95% <\u00f8> (\u00f8)` | |\n| ... and [16 more](https://codecov.io/gh/scikit-hep/awkward/pull/2130?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-16T20:58:52Z",
  "id":1384542477,
  "issue":2130,
  "node_id":"IC_kwDODBCWws5ShnEN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-16T20:58:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I don't think the outer quoting of an f-string affects the way !r works in substitutions, does it? But if it does, you're right that it needs to be controlled.\r\n\r\nThe main thing I'm worried about in this PR is `\"` vs `'`. I don't believe this is affected by the choice of the outer quotes; I believe REPR quoting is exclusively a property of the object. We _definitely_ want to control these for C++, so I explicitly disabled this check for the `to_rdataframe` module. This just means we can easily read what's being produced (they'll be single-quotes by default otherwise).\r\n",
  "created_at":"2023-01-16T21:12:42Z",
  "id":1384555742,
  "issue":2130,
  "node_id":"IC_kwDODBCWws5ShqTe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-16T21:14:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2131?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2131](https://codecov.io/gh/scikit-hep/awkward/pull/2131?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2d06114) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/1c22f0573f802329adfc3f2d021b0b4a4c18ad3b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1c22f05) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2131?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends.py](https://codecov.io/gh/scikit-hep/awkward/pull/2131?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzLnB5) | `85.48% <100.00%> (+0.11%)` | :arrow_up: |\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/2131?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `63.83% <100.00%> (-0.64%)` | :arrow_down: |\n| [src/awkward/\\_singleton.py](https://codecov.io/gh/scikit-hep/awkward/pull/2131?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NpbmdsZXRvbi5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-17T13:33:58Z",
  "id":1385431730,
  "issue":2131,
  "node_id":"IC_kwDODBCWws5SlAKy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T13:33:58Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> \"Singleton\" is general enough that it might almost be a good language feature. I think it could have gone into `_util`, but it's also fine as an independent module.\r\n\r\nThat's true. For posterity, we did have this in `_util`, but I've moved it. The rationale is `_utils` is always a big bag of functions and types. It couples lots of code together by virtue of it being \"useful\" :laughing: I am also sure that it's a rule of programming that _every_ project has one, because it reflects the need to group things falling into contention with a lack of simple categories.\r\n\r\nMy longer-term plan is to split `_util` into only the true \"utilty\" functions, e.g. `regularize_path`, `is_non_string_iterable` etc; functions like `arrayclass` or `numba_array_typer` probably could live somewhere more appropriate.\r\n\r\nTo be clear, this is all on-the-go refactoring, not bikeshedding ;)\r\n",
  "created_at":"2023-01-17T14:30:26Z",
  "id":1385514610,
  "issue":2131,
  "node_id":"IC_kwDODBCWws5SlUZy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T14:30:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I find it acceptable when categorizing things to have an \"other\" or \"miscellaneous\" category. It's a bigger problem when every codebase stashes these things in a different place, under a different name; I'd like to standardize \"util\" as the common name for this thing.\r\n\r\nThe junk drawer of programming:\r\n\r\n![a6e3d5e7f802c3d69a61b98de8dcd0240fb0ce3d_xxxxx_organizejunkdrawer_gettingstarted_600x600](https://user-images.githubusercontent.com/1852447/212926770-85596c99-31d2-461c-8bae-6cb653422162.jpg)\r\n",
  "created_at":"2023-01-17T14:36:45Z",
  "id":1385523213,
  "issue":2131,
  "node_id":"IC_kwDODBCWws5SlWgN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T14:36:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I find it acceptable when categorizing things to have an \"other\" or \"miscellaneous\" category. It's a bigger problem when every codebase stashes these things in a different place, under a different name; I'd like to standardize \"util\" as the common name for this thing.\r\n> \r\n> The junk drawer of programming:\r\n> \r\n> ![a6e3d5e7f802c3d69a61b98de8dcd0240fb0ce3d_xxxxx_organizejunkdrawer_gettingstarted_600x600](https://user-images.githubusercontent.com/1852447/212926770-85596c99-31d2-461c-8bae-6cb653422162.jpg)\r\n\r\nFor sure. I think `_util` is fine, and we'll keep it around. They always grow in size, and the trick I think is to pick-out that which does not belong. This is easier in retrospect, once a design is established. In our case, we have Numba code, and layout code alongside traditional utility functions. I think the numba functions could move to `ak._connect`, whilst the layout code e.g. `behavior_of`, `arrayclass` might all belong to a new submodule for \"layout-utils\".",
  "created_at":"2023-01-17T14:52:39Z",
  "id":1385547917,
  "issue":2131,
  "node_id":"IC_kwDODBCWws5SlciN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T14:52:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2132?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2132](https://codecov.io/gh/scikit-hep/awkward/pull/2132?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (04b97de) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/49de4198dbc7434e765f4908f7c2ed689a3a99fe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (49de419) will **decrease** coverage by `0.02%`.\n> The diff coverage is `62.37%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2132?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/2132?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `65.12% <\u00f8> (+1.28%)` | :arrow_up: |\n| [src/awkward/\\_kernels.py](https://codecov.io/gh/scikit-hep/awkward/pull/2132?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2tlcm5lbHMucHk=) | `61.61% <61.61%> (\u00f8)` | |\n| [src/awkward/\\_backends.py](https://codecov.io/gh/scikit-hep/awkward/pull/2132?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzLnB5) | `85.60% <100.00%> (+0.11%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-17T13:40:21Z",
  "id":1385439650,
  "issue":2132,
  "node_id":"IC_kwDODBCWws5SlCGi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T15:30:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Maybe these (including _singleton) should be in a directory named _util? Just to pack them away out of view when we're looking for the main constituents of the codebase? Or into directories that organize the submodules by purpose?\r\n\r\nYes, I think so. I was originally going to come up with a name once more of these PRs are merged, but actually I think a `_internal` submodule might be appropriate, because we're replacing `_` with a prefix name. We could call this package `ak._`, but that's not good naming in my view.\r\n\r\nIn #2108 I mentioned our thought process about organising L3/4. We discussed making L3 APIs for categories (i.e. `is_option`, `is_list`). I'm thinking that `ak._do` might become `ak._internal.content.XXX` (`ak._do` is content-wide protocols), whilst e.g. the new `fill_none` L3 entry-point could live in `ak._internal.category.option.XXX` (`ak._internal.category.option` is only L3 protocol entrypoints on options, e.g. `fill_none`, `is_none`).\r\n\r\n",
  "created_at":"2023-01-17T14:43:52Z",
  "id":1385535215,
  "issue":2132,
  "node_id":"IC_kwDODBCWws5SlZbv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T14:43:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"i.e.\r\n```\r\nsrc/\r\n\u251c\u2500 my-app/\r\n\u2502  \u251c\u2500 _internal/\r\n\u2502  \u2502  \u251c\u2500 contents.py\r\n\u2502  \u2502  \u251c\u2500 categories/\r\n\u2502  \u2502  \u2502  \u251c\u2500 option.py\r\n\u2502  \u251c\u2500 contents/\r\n\u2502  \u2502  \u251c\u2500 numpyarray.py\r\n\u2502  \u2502  \u251c\u2500 listoffsetarray.py\r\n\u2502  \u2502  \u251c\u2500 ...\r\n\u2502  \u251c\u2500 types/\r\n\u2502  \u2502  \u251c\u2500 numpytype.py\r\n\u2502  \u2502  \u251c\u2500 listtype.py\r\n\u2502  \u2502  \u251c\u2500 ...\r\n```",
  "created_at":"2023-01-17T14:48:16Z",
  "id":1385541301,
  "issue":2132,
  "node_id":"IC_kwDODBCWws5Sla61",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T14:48:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is happening relatively often now: https://github.com/scikit-hep/awkward/actions/runs/3941565270/jobs/6744369887",
  "created_at":"2023-01-17T20:12:14Z",
  "id":1385992528,
  "issue":2133,
  "node_id":"IC_kwDODBCWws5SnJFQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T20:12:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2133?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2133](https://codecov.io/gh/scikit-hep/awkward/pull/2133?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3647aba) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f0a1bdf94e039d8910dc9936e821a244dacacd91?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f0a1bdf) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-30T17:02:37Z",
  "id":1408988520,
  "issue":2133,
  "node_id":"IC_kwDODBCWws5T-3Vo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T17:44:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2134](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab59f6e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3a0d3c979c5a0fbe72a8b85ee6450d3e67118a82?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3a0d3c9) will **increase** coverage by `0.01%`.\n> The diff coverage is `81.63%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/jax/reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3JlZHVjZXJzLnB5) | `82.14% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `83.37% <\u00f8> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3JlZHVjZXJzLnB5) | `88.69% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.98% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.03% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `95.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `95.45% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.67% <50.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_flatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mbGF0dGVuLnB5) | `92.30% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `64.77% <62.50%> (-0.36%)` | :arrow_down: |\n| ... and [16 more](https://codecov.io/gh/scikit-hep/awkward/pull/2134?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-18T16:56:26Z",
  "id":1387388595,
  "issue":2134,
  "node_id":"IC_kwDODBCWws5Ssd6z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-18T16:56:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Most of these will be fixed with work that I'm currently undertaking. I'm trying to merge it in piecemeal to keep the PR overhead down, but I'll start testing against the dask test-suite to ensure that we cover all of these cases.",
  "created_at":"2023-01-17T20:41:17Z",
  "id":1386023562,
  "issue":2135,
  "node_id":"IC_kwDODBCWws5SnQqK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T20:41:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Angus Hollands ***@***.***> writes:\n\n> Most of these will be fixed with work that I'm currently undertaking. I'm trying to merge it in piecemeal to keep the PR overhead down, but I'll start testing against the dask test-suite to ensure that we cover all of these cases.\n\nGreat! Like I said above, I think there's a good chance we have some\nimperfect stuff in dask-awkward itself, so if something pops up/remains\nan error in the test suite and it's not obviously originating from\nawkward- then there is a possibility of a bug in the dask-awkward\noptimization code\n",
  "created_at":"2023-01-17T21:56:55Z",
  "id":1386124919,
  "issue":2135,
  "node_id":"IC_kwDODBCWws5SnpZ3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T21:56:55Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> there is a possibility of a bug in the dask-awkward\r\noptimization code\r\n\r\nAlmost certain :)",
  "created_at":"2023-01-17T21:57:49Z",
  "id":1386126638,
  "issue":2135,
  "node_id":"IC_kwDODBCWws5Snp0u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-17T21:57:49Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Here's more detail on the array building error now that we don't have UnknownScalar anymore (I was writing up another issue but then realized this already came up before the `UnknownScalar --> TypeTracerArray(shape=())` transition!)\r\n\r\nIn dask-awkward reducers we take advantage of a generic tree reduction algorithm that is already part of upstream dask. (more details: it's the [`DataFrameTreeReduction`](https://github.com/dask/dask/blob/c6b7052acc52b25facb76e8b128d574db8b0fc9f/dask/layers.py#L1253) layer, which even though it has DataFrame in the name it doesn't depend on pandas, it was just originally designed for dask.dataframe).\r\n\r\nThis algorithm includes a concatenation step for combining intermediate results during the reduction.\r\n\r\nFor total reductions in dask-awkward, we use `ak.from_iter`.\r\n\r\nFor example, let's take `dak.sum(..., axis=None)`. If we have a partitioned array and we take the sum of each partition\r\n\r\n```\r\nx = dak.Array([[1,2,3], [4],      [5,6], [7],         [8,9], [10,11],        [12,13,14]])\r\n               ^ partition 0      ^ partition 1       ^ partition 2          ^ partition 3\r\n\r\nsum                10                    18                38                39\r\n```\r\n\r\nIf the tree reduction settings are set to combine 2 partitions at a time, the next step will use `ak.from_iter` to create a new intermediate step like so:\r\n\r\n```\r\n     [[10, 18]              [38, 39]]\r\n      ^ partition 0        ^ partition 1\r\n\r\nsum       28                  77\r\n```\r\n\r\nThen another `ak.from_iter` to combine `[28, 77]` and finally take the sum of that to get the result `105`\r\n\r\nWhen executing the typetracer-only dask graph the scalars `28` and `77` for example are passed to `ak.from_iter` as:\r\n\r\n```python\r\nak.from_iter([TypeTracerArray(dtype('int64'), shape=()), TypeTracerArray(dtype('int64'), shape=()])\r\n```\r\n\r\nAnd this fails with the following traceback\r\n\r\n<details>\r\n<summary>click to reveal</summary>\r\n\r\n```\r\n    def _impl(iterable, highlevel, behavior, allow_record, initial, resize):\r\n        if isinstance(iterable, dict):\r\n            if allow_record:\r\n                return _impl(\r\n                    [iterable],\r\n                    highlevel,\r\n                    behavior,\r\n                    False,\r\n                    initial,\r\n                    resize,\r\n                )[0]\r\n            else:\r\n                raise ak._errors.wrap_error(\r\n                    ValueError(\r\n                        \"cannot produce an array from a single dict (that would be a record)\"\r\n                    )\r\n                )\r\n    \r\n        if isinstance(iterable, tuple):\r\n            iterable = list(iterable)\r\n    \r\n        builder = _ext.ArrayBuilder(initial=initial, resize=resize)\r\n>       builder.fromiter(iterable)\r\nE       ValueError: cannot convert TypeTracerArray(dtype('int64'), shape=()) (type TypeTracerArray) to an array element\r\nE       \r\nE       (https://github.com/scikit-hep/awkward/blob/awkward-cpp-7/awkward-cpp/src/python/content.cpp#L191)\r\n```\r\n</details>\r\n\r\nI'm thinking of 3 paths here:\r\n1. feature request for support scalar TypeTracerArray elements in `ak.from_iter`\r\n2. Someone tells me something else I can use other than from_iter :)\r\n3. We create a code path in dask-awkward reducers to check for these scalar `TypeTracerArray` objects _before_ calling `from_iter`, and instead create a new typetracer array with the same dtype as the scalar to represent the intermediate step in typetracer form. (we already have this \"special cases\" treatment around typetracers with input and output layers, but adding more special cases for regular array operations seems like it could become fragile, but maybe there would only be a few of these)",
  "created_at":"2023-01-26T19:20:14Z",
  "id":1405488251,
  "issue":2135,
  "node_id":"IC_kwDODBCWws5Txgx7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-26T20:49:00Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Here's a commit that implements a workaround: https://github.com/dask-contrib/dask-awkward/pull/148/commits/b74d912878e6009c9c7183789b3c619893e73af0",
  "created_at":"2023-01-26T20:52:18Z",
  "id":1405635029,
  "issue":2135,
  "node_id":"IC_kwDODBCWws5TyEnV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-26T20:52:18Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"You're right that this is something that we need to think about. In fact, the reason I started this work on nplikes was to fix problems with partial reductions for `axis=None`, which is very similar to this one. We ended up being able to take the best approach of removing `flatten_records`, such that no branching could take place during reduction. This meant we only ever had one contiguous array to reduce. \r\n\r\nHowever, in this case one does not have such a luxury. As I see it, the benefit to building an intermediate Awkward Array is that it should understand the option types that `reduce` returns \"for free\". Yet, we can't use `from_iter` (at least, not as it stands) for the reasons that you give; it's just not aware of typetracer types.\r\nFurthermore, one cannot apply this two-stage reduction (at least not trivially) to positional reducers like `argmax`.\r\n\r\nIn any case,`from_iter` isn't ideal because it loses the type information of the scalar objects that we return, both for typetracer arrays and regular NumPy arrays. Instead, if we *know* that we're getting typetracer scalars (or None), then I think we want build the intermediate length-1 arrays before concatenating them.\r\n\r\nAAUI, you only need this in `axis=None` reductions, right? The solution that we were pursuing is to completely flatten the array, reduce those arrays at `axis=-1` to preserve the array structure, and then use `concatenate` to build the final array that is reduced. You'll still need special handling for positional reducers, but it's possible to express this using exclusively L1 and L2 content manipulation, so that you don't need to get too much into the weeds of `MaybeNone` etc.\r\n\r\nI'd suggest something like\r\n```python\r\ndef primary_reduction(array, reducer):\r\n    flat = ak.ravel(array)\r\n    return reducer(flat, keepdims=True, axis=-1)\r\n\r\npartials = [primary_reduction(x, reducer) for x in arrays]\r\narray = ak.concatenate(partials, axis=0)\r\n\r\nresult = secondary_reducer(array, axis=None)\r\n```\r\n\r\nThis would need care w.r.t positional reducers, but should avoid the need to handle `None` and `MaybeNone`, etc.\r\n",
  "created_at":"2023-01-26T21:44:46Z",
  "id":1405701344,
  "issue":2135,
  "node_id":"IC_kwDODBCWws5TyUzg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-28T14:34:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I *think* these have all been sorted now. Please re-open if I'm wrong!",
  "created_at":"2023-07-02T17:14:31Z",
  "id":1616738537,
  "issue":2135,
  "node_id":"IC_kwDODBCWws5gXXjp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:14:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2136?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2136](https://codecov.io/gh/scikit-hep/awkward/pull/2136?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5dad7a2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b6e4c71029152fcd93c1b156d8d4dfb8227b1e24?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b6e4c71) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-19T09:16:04Z",
  "id":1396660996,
  "issue":2136,
  "node_id":"IC_kwDODBCWws5TP1sE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T09:16:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2137](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (999aaab) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d2f93252ab03fa7574360eb270ea6a80fdb7f088?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d2f9325) will **increase** coverage by `0.00%`.\n> The diff coverage is `91.42%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.77% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.11% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.05% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.98% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX2ZpZWxkLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.47% <50.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_run\\_lengths.py](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19ydW5fbGVuZ3Rocy5weQ==) | `90.90% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `93.52% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `64.84% <100.00%> (+0.07%)` | :arrow_up: |\n| ... and [7 more](https://codecov.io/gh/scikit-hep/awkward/pull/2137?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-19T09:23:59Z",
  "id":1396671289,
  "issue":2137,
  "node_id":"IC_kwDODBCWws5TP4M5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T12:07:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've reverted the change that requires Ianna's approval; that's much smaller, so I can move it to a new PR that is less time-sensitive  (this one is only sensitive because I want to keep working upon main :))",
  "created_at":"2023-01-20T11:59:53Z",
  "id":1398279797,
  "issue":2137,
  "node_id":"IC_kwDODBCWws5TWA51",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T11:59:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2138](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e6d9b78) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d2f93252ab03fa7574360eb270ea6a80fdb7f088?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d2f9325) will **increase** coverage by `0.37%`.\n> The diff coverage is `59.01%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `67.05% <\u00f8> (+5.93%)` | :arrow_up: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.02% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `66.74% <33.33%> (+1.97%)` | :arrow_up: |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.01% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `90.76% <100.00%> (+2.36%)` | :arrow_up: |\n| [src/awkward/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL2NhdGVnb3JpY2FsLnB5) | `73.52% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `76.82% <100.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.80% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.66% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.67% <100.00%> (\u00f8)` | |\n| ... and [6 more](https://codecov.io/gh/scikit-hep/awkward/pull/2138?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-19T12:43:33Z",
  "id":1396919350,
  "issue":2138,
  "node_id":"IC_kwDODBCWws5TQ0w2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T12:00:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"~@jpivarski I noticed during refactoring this that we use the NumPy `out=` parameter in a few places. JAX doesn't support this, yet JAX is also somewhat of a special case. At the same time, the Array API drops the `out` parameter entirely. \r\nI think we should introduce a different API than `out` e.g. `maybe_out`. That way, it's not _required_ that `out` is modified if the underlying nplike does not support it. Instead, e.g. JAX would just return a new array and ignore the `maybe_out` array  entirely.~\r\n\r\nActually, this should just be a PR that you can review.",
  "created_at":"2023-01-19T12:57:32Z",
  "id":1396935102,
  "issue":2138,
  "node_id":"IC_kwDODBCWws5TQ4m-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T13:59:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this PR now moves the compatibility shim to Numpy's nplike, and has the new `python==3.7, numpy==1.14.5` CI test passing, are you happy for me to merge?",
  "created_at":"2023-01-19T22:23:35Z",
  "id":1397691889,
  "issue":2138,
  "node_id":"IC_kwDODBCWws5TTxXx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T22:23:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, thank you!",
  "created_at":"2023-01-20T01:58:39Z",
  "id":1397832803,
  "issue":2138,
  "node_id":"IC_kwDODBCWws5TUTxj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T01:58:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The uses of `numpy.packbits` in pyarrow.py are not using the nplike function with the pre-1.17 work-around:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/2645632e1084b73b501a33c6aa42c6cbc1a31f4c/src/awkward/_connect/pyarrow.py#L6\r\n\r\nbut I don't think you can import a sufficiently recent version of pyarrow without a recent NumPy, so the point is probably moot.",
  "created_at":"2023-01-20T02:04:21Z",
  "id":1397837092,
  "issue":2138,
  "node_id":"IC_kwDODBCWws5TUU0k",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T02:04:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The uses of `numpy.packbits` in pyarrow.py are not using the nplike function with the pre-1.17 work-around:\r\n> \r\n> https://github.com/scikit-hep/awkward/blob/2645632e1084b73b501a33c6aa42c6cbc1a31f4c/src/awkward/_connect/pyarrow.py#L6\r\n> \r\n> but I don't think you can import a sufficiently recent version of pyarrow without a recent NumPy, so the point is probably moot.\r\n\r\nOops, this fell out of sync with the rest of the PR. Hmm, I feel that we might want to start specifying lower bounds for JAX, CuPy, and PyArrow, because right now we don't have any information about which versions we need to support internally. I think PyArrow supports `>= 1.16.x` even in 10.0.0, which means it's fairly possible that someone might have NumPy < 1.1.17",
  "created_at":"2023-01-20T08:58:06Z",
  "id":1398089135,
  "issue":2138,
  "node_id":"IC_kwDODBCWws5TVSWv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T08:58:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've returned to using our `NumpyLike` here, which has the patch. I was OK with our `_connect` code directly using `NumPy` or `CuPy`, because they're different value statements; we use `nplikes` so that we have a common interface, whilst we use the modules directly so that we don't require the JAX nplike to implement CUDA specific methods. \r\n\r\nIn this case, I think it's fine to use the nplike, as long as we never try to bend the nplike to do too much single-library specific work. ",
  "created_at":"2023-01-20T12:06:50Z",
  "id":1398287313,
  "issue":2138,
  "node_id":"IC_kwDODBCWws5TWCvR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T12:06:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2139?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2139](https://codecov.io/gh/scikit-hep/awkward/pull/2139?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5941031) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b6e4c71029152fcd93c1b156d8d4dfb8227b1e24?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b6e4c71) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2139?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2139?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `85.00% <100.00%> (+0.38%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-19T14:23:59Z",
  "id":1397058349,
  "issue":2139,
  "node_id":"IC_kwDODBCWws5TRWst",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T14:23:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I cloned the Awkward repo twice, ran `nox -s prepare` in one of them, and this is the diff of directories (ignoring `.git`):\r\n\r\n```\r\nOnly in awkward-A/awkward-cpp: header-only\r\nOnly in awkward-A/awkward-cpp/include/awkward: kernels.h\r\nOnly in awkward-A/awkward-cpp/src/awkward_cpp: _kernel_signatures.py\r\nOnly in awkward-A/awkward-cpp: tests-cpu-kernels\r\nOnly in awkward-A/awkward-cpp: tests-spec\r\nOnly in awkward-A/awkward-cpp: tests-spec-explicit\r\nOnly in awkward-A/docs/reference: generated\r\nOnly in awkward-A: .nox\r\nOnly in awkward-A: __pycache__\r\nOnly in awkward-A/src/awkward/_connect/cuda: _kernel_signatures.py\r\nOnly in awkward-A/src/awkward/_connect: header-only\r\nOnly in awkward-A: tests-cuda-kernels\r\n```\r\n\r\nAny or all of these could be used as the test, but `awkward-cpp/include/awkward/kernels.h` is fundamental and centrally located.",
  "created_at":"2023-01-19T19:34:03Z",
  "id":1397500456,
  "issue":2140,
  "node_id":"IC_kwDODBCWws5TTCoo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T19:34:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"If we were inventing this function for the first time, I think forgetting the length might be a sane default. That said, we have already shipped this in a release, so I think leaving the default as `False` is sensible here.",
  "created_at":"2023-01-19T21:05:54Z",
  "id":1397610464,
  "issue":2141,
  "node_id":"IC_kwDODBCWws5TTdfg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T21:05:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2141?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2141](https://codecov.io/gh/scikit-hep/awkward/pull/2141?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f692b47) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4ed5161a5b73740cc80dafe2743f54c986de2ed3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4ed5161) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2141?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2141?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `61.12% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-19T21:07:24Z",
  "id":1397611955,
  "issue":2141,
  "node_id":"IC_kwDODBCWws5TTd2z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T22:25:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, I'm mistaken; this is L3, so it doesn't hugely matter if we break it. I don't think anyone should be using this as released in the wild. When dask-awkward relies on this, it will always need to set awkward as a lower bound of 2.0.7 anyway, so I think change the default to forget the length by default; in this case, the length is entirely arbitrary anyway.",
  "created_at":"2023-01-19T21:11:05Z",
  "id":1397615340,
  "issue":2141,
  "node_id":"IC_kwDODBCWws5TTers",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T21:11:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@douglasdavis are you ready for this to merge :)",
  "created_at":"2023-01-19T22:19:36Z",
  "id":1397688334,
  "issue":2141,
  "node_id":"IC_kwDODBCWws5TTwgO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T22:19:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Yep I think this is good to go!",
  "created_at":"2023-01-19T22:20:10Z",
  "id":1397688927,
  "issue":2141,
  "node_id":"IC_kwDODBCWws5TTwpf",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2023-01-19T22:20:10Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2142?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2142](https://codecov.io/gh/scikit-hep/awkward/pull/2142?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (617d659) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b6e4c71029152fcd93c1b156d8d4dfb8227b1e24?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b6e4c71) will **increase** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2142?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2142?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `85.00% <0.00%> (+0.38%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-19T21:29:25Z",
  "id":1397633284,
  "issue":2142,
  "node_id":"IC_kwDODBCWws5TTjEE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T21:41:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I think this can be merged now, no? It tests our current lower bound, and we can raise it to 1.17 when we make our next minor release.",
  "created_at":"2023-01-19T21:46:19Z",
  "id":1397649284,
  "issue":2142,
  "node_id":"IC_kwDODBCWws5TTm-E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T21:46:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, I was reading it backward! Yes, we should be testing our current minimum bound. This PR can be merged now (and its inverse has to wait until 2.1.0).",
  "created_at":"2023-01-19T21:52:13Z",
  "id":1397655105,
  "issue":2142,
  "node_id":"IC_kwDODBCWws5TToZB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-19T21:52:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Sorry for the review ping Ioana :facepalm:; muscle memory as you've reviewed a couple of my PRs recently!",
  "created_at":"2023-01-20T12:03:35Z",
  "id":1398283660,
  "issue":2145,
  "node_id":"IC_kwDODBCWws5TWB2M",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "updated_at":"2023-01-20T12:04:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2145?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2145](https://codecov.io/gh/scikit-hep/awkward/pull/2145?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5a904cf) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8513cc6e733f882934b677e7f59ce0d6c9656a4d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8513cc6) will **not change** coverage.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2145?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2145?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-20T12:21:27Z",
  "id":1398308033,
  "issue":2145,
  "node_id":"IC_kwDODBCWws5TWHzB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-24T17:10:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2146?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2146](https://codecov.io/gh/scikit-hep/awkward/pull/2146?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (06ca3b7) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e0ac2f3c8d233595b4adee6f3b18c76da4745cb2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e0ac2f3) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-20T13:41:35Z",
  "id":1398413599,
  "issue":2146,
  "node_id":"IC_kwDODBCWws5TWhkf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T17:41:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"![image](https://user-images.githubusercontent.com/1248413/213765549-62d9e18a-71c0-4417-95ff-c1807548892f.png)\r\n",
  "created_at":"2023-01-20T17:45:46Z",
  "id":1398735387,
  "issue":2146,
  "node_id":"IC_kwDODBCWws5TXwIb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T17:45:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"There are more newlines than I was expecting, and I'm surprised the CMake word-wraps the message, but it's definitely readable and triple-clickable.",
  "created_at":"2023-01-20T18:47:57Z",
  "id":1398797838,
  "issue":2146,
  "node_id":"IC_kwDODBCWws5TX_YO",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-20T18:47:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2148](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0feba63) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e0ac2f3c8d233595b4adee6f3b18c76da4745cb2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e0ac2f3) will **increase** coverage by `0.10%`.\n> The diff coverage is `67.89%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `90.76% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.80% <\u00f8> (\u00f8)` | |\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `88.88% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.49% <37.50%> (+0.02%)` | :arrow_up: |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.98% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `67.34% <54.72%> (+0.28%)` | :arrow_up: |\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `71.63% <76.64%> (+4.81%)` | :arrow_up: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.08% <80.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.01% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.67% <100.00%> (\u00f8)` | |\n| ... and [12 more](https://codecov.io/gh/scikit-hep/awkward/pull/2148?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-20T18:41:11Z",
  "id":1398789312,
  "issue":2148,
  "node_id":"IC_kwDODBCWws5TX9TA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T19:38:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this is ready to merge I think.",
  "created_at":"2023-01-20T22:27:34Z",
  "id":1399028725,
  "issue":2148,
  "node_id":"IC_kwDODBCWws5TY3v1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T22:27:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"BTW I've implemented some of the missing functions in the old PR: https://github.com/scikit-hep/awkward/blob/agoose77/refactor-harden-typetracer-next/src/awkward/_nplikes/typetracer.py#L480\r\n\r\nI won't be copying over chunks of code directly, but the trivial logic is the same.\r\n\r\nI'm currently in-the-process of porting this logic over, but not actively; there are steps between adding this implementation and where I'm at now.",
  "created_at":"2023-01-20T20:35:59Z",
  "id":1398906971,
  "issue":2149,
  "node_id":"IC_kwDODBCWws5TYaBb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T20:36:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"What I've implemented here is the equivalent of `broadcast_shapes` and `result_type`, using `broadcast_arrays` and operations on empty NumPy arrays, respectively.\r\n\r\nYour implementation has no `true_divide`, whose result type can't be determined without knowing that it's a division operation (integer divided by integer is floating point).\r\n\r\nIf some `TypeTracerArrays` are going to get loose into the wild, even as `UnknownScalar` (zero-dimensional `TypeTracerArrays`, then they'll need all ufuncs, not just the ones we use in our codebase.\r\n\r\nBut maybe this is superfluous, after you make your changes and if we can keep a tighter rein on `TypeTracerArrays` in the wild (because Coffea will be doing Spark column-checking through Dask now).\r\n\r\nThat's why it's a perfect PR for you to review. You can decide if we need this or not; the answer may well be that we don't.\r\n\r\nThis PR will only pass tests once the explicit `TypeTracer.true_divide` overload is removed. I had intended for that to be a separate commit after merging with your PRs because removing lines of code is likely to be a merge conflict. The PR as-is mostly adds lines.\r\n\r\nI'll make a remove-ufuncs commit after this comment, with the understanding that `main` should be merged in before that commit (so I may be reverting it, merging with `main`, and reapplying it).",
  "created_at":"2023-01-20T20:50:05Z",
  "id":1398918340,
  "issue":2149,
  "node_id":"IC_kwDODBCWws5TYczE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T20:50:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2149?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2149](https://codecov.io/gh/scikit-hep/awkward/pull/2149?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (263b619) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f4bdf351fc6f72219977daf50e03ec0f49ab3355?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f4bdf35) will **increase** coverage by `0.17%`.\n> The diff coverage is `92.30%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2149?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2149?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `72.41% <92.30%> (+5.07%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-20T21:06:10Z",
  "id":1398934607,
  "issue":2149,
  "node_id":"IC_kwDODBCWws5TYgxP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T22:50:22Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR is a quick way of fixing some of the bugs outstanding in typetracer. I think it will be temporary; in the future `TypeTracer` should inherit from a mostly empty protocol, but for now this will let dask-awkward keep moving!\r\n\r\nMy plan for our type handling is to use the existing NumPy rules with special cases for mixed scalars. Hopefully this means we won't need to carry around empty arrays for every operation on typetracers, but I suspect we'll want to use the empty-array implementation for ufunc support.\r\n\r\nSo, I think this PR can merge, and I'll end up touching this code again in the next month, but dask-awkward can progress in the meantime.",
  "created_at":"2023-01-20T22:26:32Z",
  "id":1399027934,
  "issue":2149,
  "node_id":"IC_kwDODBCWws5TY3je",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-20T22:26:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, I'll merge it. This can be seen as a short-term solution, with some of this undone by a later PR. However, it fixes @douglasdavis's immediate problem.",
  "created_at":"2023-01-20T22:30:46Z",
  "id":1399030791,
  "issue":2149,
  "node_id":"IC_kwDODBCWws5TY4QH",
  "performed_via_github_app":null,
  "reactions":{
   "heart":2,
   "total_count":2
  },
  "updated_at":"2023-01-20T22:30:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2150?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2150](https://codecov.io/gh/scikit-hep/awkward/pull/2150?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (03ef002) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f4bdf351fc6f72219977daf50e03ec0f49ab3355?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f4bdf35) will **increase** coverage by `0.17%`.\n> The diff coverage is `93.10%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2150?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends.py](https://codecov.io/gh/scikit-hep/awkward/pull/2150?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzLnB5) | `86.66% <92.30%> (+1.06%)` | :arrow_up: |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2150?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `72.41% <92.30%> (+5.07%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2150?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `92.99% <100.00%> (-0.54%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-01-20T23:45:55Z",
  "id":1399080661,
  "issue":2150,
  "node_id":"IC_kwDODBCWws5TZEbV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-21T19:27:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2151?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2151](https://codecov.io/gh/scikit-hep/awkward/pull/2151?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (25a9cf2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f4bdf351fc6f72219977daf50e03ec0f49ab3355?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f4bdf35) will **increase** coverage by `0.17%`.\n> The diff coverage is `89.47%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2151?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2151?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `72.61% <89.47%> (+5.27%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-21T00:20:58Z",
  "id":1399096505,
  "issue":2151,
  "node_id":"IC_kwDODBCWws5TZIS5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-21T00:28:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In fact, I don't think we want to support arbitrary ufuncs on `TypeTracerArray`. The bigger vision here is to restrict the operations on nplike arrays to predominantly those on `nplike`. As such, we should remove this interface in favour of that approach.",
  "created_at":"2023-01-21T17:42:52Z",
  "id":1399297063,
  "issue":2151,
  "node_id":"IC_kwDODBCWws5TZ5Qn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-21T17:42:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`main@707ea55`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `76.40%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.33% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_errors.py](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `79.36% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `40.84% <40.84%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `64.00% <64.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `75.50% <75.50%> (\u00f8)` | |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `71.86% <79.54%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `82.05% <82.05%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jYXRlZ29yaWNhbC5weQ==) | `92.30% <83.33%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/dispatch.py](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvZGlzcGF0Y2gucHk=) | `85.71% <85.71%> (\u00f8)` | |\n| ... and [15 more](https://codecov.io/gh/scikit-hep/awkward/pull/2152?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-21T19:03:30Z",
  "id":1399312920,
  "issue":2152,
  "node_id":"IC_kwDODBCWws5TZ9IY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-21T22:08:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not sure on the type hints yet. Fundamentally, we want to use `NumpyLike` as a generic protocol, but that's not too useful practically as our contents will just be storing `ArrayType` implementers; we'd need to cast the array and nplikes to the appropriate types. I'll put that on the backburner for now.\r\n\r\nInstead, I've written the nplikes to be invariant in the parameters, so according to the types, `Numpy` could accept `Cupy`'s arrays.",
  "created_at":"2023-01-21T19:08:47Z",
  "id":1399313920,
  "issue":2152,
  "node_id":"IC_kwDODBCWws5TZ9YA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-21T19:10:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, the distinction between `ArrayModuleNumpyLike` (yay for names) and `NumpyLike` is that `NumpyLike` is just a protocol (well, also a Singleton class). For now this is not hugely useful in the type hints, but we can revisit those down the road when we know better what we want to be doing here.\r\n\r\n`TypeTracerArray` retains ufunc support in case we still need it down the road, but we'll switch that off internally during testing (a future PR).\r\n\r\nThe `awkward._nplikes.ufuncs` module is just an alias for the ufuncs from NumPy; due to NumPy's dispatch mechanism (`__array_ufunc__`), these are more like meaningful tokens than numpy-exclusive objects. I also will add a `_metadata` module for the `np.dtype` objects too, but I want to keep these PRs at least slightly similar to the code that they remove/replace.\r\n\r\nYes, with `raw` I felt that it would be better to implement this logic in a table form rather than per each nplike class. In this instance that seems particular feasible because we don't need N(N-1) conversion pathways, as most of the logic is relying upon the arrays having an `ArrayLike` interface only. \r\n\r\nThings that will happen later:\r\n- [ ] Move typetracer to `awkward._nplikes`\r\n- [ ] Add `awkward._nplikes.metadata`\r\n- [ ] Validate dtypes in `nplike` functions to handle scalar-array behavior in e.g. NumPy\r\n- [ ] Unify `UnknownScalar`, `UnknownLength`, and `TypeTracerArray`.",
  "created_at":"2023-01-21T22:00:57Z",
  "id":1399340776,
  "issue":2152,
  "node_id":"IC_kwDODBCWws5TaD7o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-21T22:00:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for the review, Jim!",
  "created_at":"2023-01-21T22:01:06Z",
  "id":1399340804,
  "issue":2152,
  "node_id":"IC_kwDODBCWws5TaD8E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-21T22:01:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2153](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (67d5b45) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/da5cab09bdce0c13509dadd7803c7006871b3517?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (da5cab0) will **not change** coverage.\n> The diff coverage is `69.23%`.\n\n> :exclamation: Current head 67d5b45 differs from pull request most recent head 20c5706. Consider uploading reports for the commit 20c5706 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_errors.py](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `79.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_kernels.py](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2tlcm5lbHMucHk=) | `69.30% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19wYXJxdWV0LnB5) | `52.04% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `76.79% <66.66%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvX19pbml0X18ucHk=) | `84.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `92.00% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `73.13% <100.00%> (\u00f8)` | |\n| [src/awkward/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvamF4LnB5) | `84.74% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `90.62% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2153?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19udW1weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-21T19:30:13Z",
  "id":1399317386,
  "issue":2153,
  "node_id":"IC_kwDODBCWws5TZ-OK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T16:25:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'm happy with this, merge if you are too :)",
  "created_at":"2023-01-28T15:03:17Z",
  "id":1407416468,
  "issue":2153,
  "node_id":"IC_kwDODBCWws5T43iU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-28T15:03:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski sorry this is so big! Much of it is linenoise from imports.\r\n\r\nThe tests won't pass because there are changes to the `repr` of a typetracer high-level array. I need to check those tests out.",
  "created_at":"2023-01-24T13:44:34Z",
  "id":1401973864,
  "issue":2154,
  "node_id":"IC_kwDODBCWws5TkGxo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-24T13:44:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2154](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (37adea1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2e824622cc9938c3de97b93216f60d4d05c32595?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2e82462) will **increase** coverage by `0.17%`.\n> The diff coverage is `81.95%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_is\\_tuple.py](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc190dXBsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZGF0YWZyYW1lLnB5) | `18.18% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `91.30% <\u00f8> (\u00f8)` | |\n| [src/awkward/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvamF4LnB5) | `84.74% <50.00%> (+0.53%)` | :arrow_up: |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `66.66% <63.63%> (-5.20%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `71.12% <71.12%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `75.19% <72.72%> (-0.31%)` | :arrow_down: |\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `85.26% <75.00%> (+0.26%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `91.83% <75.00%> (+0.17%)` | :arrow_up: |\n| ... and [121 more](https://codecov.io/gh/scikit-hep/awkward/pull/2154?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-24T21:19:15Z",
  "id":1402679317,
  "issue":2154,
  "node_id":"IC_kwDODBCWws5TmzAV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-25T00:17:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I have changed the typestring tests, because this PR changes typetracer reprs.\r\n\r\nI've also made the `ArrayType.__eq__` more permissive; if any length is unknown, assume the lengths match.",
  "created_at":"2023-01-24T21:22:23Z",
  "id":1402682795,
  "issue":2154,
  "node_id":"IC_kwDODBCWws5Tmz2r",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-24T21:22:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm not 100% happy with `__repr__` like `unknown-float64`, but anyway.\r\n\r\nIt still looks good! The only commit that `main` has ahead of this is tiny (https://github.com/scikit-hep/awkward/compare/agoose77/refactor-drop-unknown-scalar...main), so I'd say it's ready to be merged as-is.",
  "created_at":"2023-01-24T21:34:56Z",
  "id":1402717162,
  "issue":2154,
  "node_id":"IC_kwDODBCWws5Tm8Pq",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-24T21:34:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this now passes all my local tests. Notable changes since your review:\r\n- More places where we assume known scalars (dask test suite)\r\n- All unknown scalars have the same typestring `##`. \r\n- `MaybeNone` has typestring `?{content}`\r\n- `TypeTracerArray` can now be pickled (it has a special `__new__` to prevent a user every accidentally instantiating it).",
  "created_at":"2023-01-24T23:50:11Z",
  "id":1402839849,
  "issue":2154,
  "node_id":"IC_kwDODBCWws5TnaMp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-24T23:50:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Spoke too soon, a windows test revealed an assumption.\r\n\r\nI'm now assuming that _any_ integral NumPy type is an `unknown_length`. This seems reasonable to me; it allows for any operation producing an integer to end up as a length, which is where I originally saw this going.",
  "created_at":"2023-01-25T00:11:03Z",
  "id":1402859433,
  "issue":2154,
  "node_id":"IC_kwDODBCWws5Tne-p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-25T00:11:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"In Slack, I backspaced over \"`UnknownScalar(int64)`\" since lengths might be 32-bit. I'm assuming that was the Windows error, right?",
  "created_at":"2023-01-25T00:13:53Z",
  "id":1402862836,
  "issue":2154,
  "node_id":"IC_kwDODBCWws5Tnfz0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-25T00:13:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> In Slack, I backspaced over \"`UnknownScalar(int64)`\" since lengths might be 32-bit. I'm assuming that was the Windows error, right?\r\n\r\nBang on. I've relaxed this to \"any\" int type, which seems reasonable to me, as the concrete values that `UnknownLength` represent are in-practice Python scalars (i.e. unsized). I don't think we explicitly state anywhere that our `RegularArray.size` etc. values have to fit within `int64`/`int32`.",
  "created_at":"2023-01-25T00:52:18Z",
  "id":1402896173,
  "issue":2154,
  "node_id":"IC_kwDODBCWws5Tnn8t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-25T09:34:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2155?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2155](https://codecov.io/gh/scikit-hep/awkward/pull/2155?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a93a357) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/fb205ac28a7ade8f9d7e4eabd164b23c4dc33a8d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fb205ac) will **increase** coverage by `0.12%`.\n> The diff coverage is `7.69%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2155?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2155?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2155?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2155?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `17.64% <66.66%> (\u00f8)` | |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2155?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <0.00%> (\u00f8)` | |\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2155?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `88.70% <0.00%> (\u00f8)` | |\n| [...c/awkward/operations/ak\\_merge\\_option\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2155?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV9vcHRpb25fb2ZfcmVjb3Jkcy5weQ==) | `88.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-24T15:48:23Z",
  "id":1402170747,
  "issue":2155,
  "node_id":"IC_kwDODBCWws5Tk217",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T13:15:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Looks good!",
  "created_at":"2023-02-02T16:46:11Z",
  "id":1414046317,
  "issue":2155,
  "node_id":"IC_kwDODBCWws5USKJt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T16:46:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2158?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2158](https://codecov.io/gh/scikit-hep/awkward/pull/2158?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7e1a507) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/44684d0acf98c53a390665c426f212f60d33cd8d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (44684d0) will **decrease** coverage by `0.01%`.\n> The diff coverage is `75.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2158?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2158?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `71.12% <0.00%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2158?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `77.04% <100.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/types/arraytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2158?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvYXJyYXl0eXBlLnB5) | `93.54% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-25T13:30:00Z",
  "id":1403616067,
  "issue":2158,
  "node_id":"IC_kwDODBCWws5TqXtD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-25T13:30:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Cherry-picked into #2167",
  "created_at":"2023-01-28T14:40:48Z",
  "id":1407412503,
  "issue":2160,
  "node_id":"IC_kwDODBCWws5T42kX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-28T14:40:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski right now `len(array)` fails in typetracer, because `len(x)` should always be an integer. I haven't seen any need for this feature, but I wanted to raise it anyway. \r\n\r\nI suppose `ak.num(x, axis=0)` does this, are happy to let that be the \"safe\" way to get an int-like object representing the length of a high level array?",
  "created_at":"2023-01-25T17:07:58Z",
  "id":1403949035,
  "issue":2161,
  "node_id":"IC_kwDODBCWws5Tro_r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-25T17:11:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Layouts, Indexes, and such have a `length` property, which differs from `__len__` in that it's allowed to return non-integers, to allow for typetracers.\r\n\r\n`len(array)` where `array` is a high-level array filled with typetracers can't give a meaningful answer. But arrays like that are hidden in a `dak.Array`'s `_meta`, right? `dak.Array` must have some way of giving the length, and dask-awkward code needs to be careful to not call `len(self._meta)` for this reason.\r\n\r\nOh, this is just for our own code. In that case, we need to use the layout's `length` property when an `ak.Array` might contain typetracers, and if we can't avoid some `len(array)`, then that has to be a typetracer-specialized code branch.",
  "created_at":"2023-01-25T20:22:17Z",
  "id":1404180041,
  "issue":2161,
  "node_id":"IC_kwDODBCWws5TshZJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-25T20:22:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> len(array) where array is a high-level array filled with typetracers can't give a meaningful answer. But arrays like that are hidden in a dak.Array's _meta, right? dak.Array must have some way of giving the length, and dask-awkward code needs to be careful to not call len(self._meta) for this reason.\r\n\r\nWe also expose this through `ak.to_backend(..., \"typetracer\")`, so it would be possible to discover it there, too.",
  "created_at":"2023-01-25T21:42:11Z",
  "id":1404261424,
  "issue":2161,
  "node_id":"IC_kwDODBCWws5Ts1Qw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-25T21:42:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #2229",
  "created_at":"2023-07-02T17:13:55Z",
  "id":1616738398,
  "issue":2161,
  "node_id":"IC_kwDODBCWws5gXXhe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:13:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Agreed! IIRC the C++ tests are only testing the shared libraries, right? Perhaps they should be moved back into the root Git directory, and then built as a dedicated target. We can discuss today :)",
  "created_at":"2023-01-26T10:18:14Z",
  "id":1404798105,
  "issue":2164,
  "node_id":"IC_kwDODBCWws5Tu4SZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-26T10:18:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2165?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2165](https://codecov.io/gh/scikit-hep/awkward/pull/2165?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d5076b3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/37547b0fca76b357cdc7f526d52d9d074195928b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (37547b0) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-26T10:26:00Z",
  "id":1404807726,
  "issue":2165,
  "node_id":"IC_kwDODBCWws5Tu6ou",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-26T14:51:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2167](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0bfa510) into [agoose77/feat-shape-item-none](https://codecov.io/gh/scikit-hep/awkward/commit/3bab57de897b4c8101c906b02cfc632d9f2337b2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3bab57d) will **increase** coverage by `0.04%`.\n> The diff coverage is `86.33%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `76.97% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvX19pbml0X18ucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `89.80% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `90.62% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_dataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19kYXRhZnJhbWUucHk=) | `92.50% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `95.52% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `73.36% <50.00%> (+0.29%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.41% <50.00%> (+0.58%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `73.44% <50.00%> (-1.04%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `74.72% <74.19%> (-0.47%)` | :arrow_down: |\n| ... and [41 more](https://codecov.io/gh/scikit-hep/awkward/pull/2167?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-28T13:48:01Z",
  "id":1407402894,
  "issue":2167,
  "node_id":"IC_kwDODBCWws5T40OO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T19:08:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski note that this PR doesn't yet address usage of `size=None` of `RegularArray`; it just sets the ground work for it.",
  "created_at":"2023-01-27T22:37:34Z",
  "id":1407155318,
  "issue":2168,
  "node_id":"IC_kwDODBCWws5T33x2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-27T22:37:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2168](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f470e61) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3bab57de897b4c8101c906b02cfc632d9f2337b2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3bab57d) will **decrease** coverage by `0.02%`.\n> The diff coverage is `86.94%`.\n\n> :exclamation: Current head f470e61 differs from pull request most recent head 0682a21. Consider uploading reports for the commit 0682a21 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `85.20% <25.00%> (-0.07%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.82% <50.00%> (-0.26%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.69% <50.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `74.27% <50.00%> (-0.21%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `71.04% <74.60%> (-0.08%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `74.81% <75.00%> (-0.38%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.50% <82.22%> (+0.10%)` | :arrow_up: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.22% <83.33%> (-0.13%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `89.83% <84.21%> (-2.17%)` | :arrow_down: |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.31% <85.71%> (-0.15%)` | :arrow_down: |\n| ... and [18 more](https://codecov.io/gh/scikit-hep/awkward/pull/2168?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-27T22:41:45Z",
  "id":1407158686,
  "issue":2168,
  "node_id":"IC_kwDODBCWws5T34me",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T20:20:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"With this PR, the distinction between indices (data) and lengths (metadata) is much stronger. Aligning closer with @jpivarski's original separation of length metadata from \"data\". \r\n\r\nThey are now explicit groups, (`ShapeItem` and `ArrayLike`-scalars) with one-to-many mapping between the shape information and the offsets (shape items are non-negative, or None, with no fixed dtype)\r\n\r\nMerging this PR will raise questions about `_getitem`. At present we implicitly assume `_getitem` only handles Python scalars or NumPy generic values. We need to broaden this both for all of the other nplikes, that use 0-D arrays as their scalar type.",
  "created_at":"2023-01-28T01:01:36Z",
  "id":1407234334,
  "issue":2168,
  "node_id":"IC_kwDODBCWws5T4LEe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-28T12:03:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski what do you think about the future-breaking change to `RecordArray`? It only breaks existing users who pass in `length=None` under the typetracer backend; for `nplike.known_shape=True` we currently convert `length=None` to `length=unset`, because the `length=None` has no meaning for `known_shape=True`.\r\n\r\n- [ ] Update deprecation schedule.",
  "created_at":"2023-01-28T12:12:30Z",
  "id":1407386323,
  "issue":2168,
  "node_id":"IC_kwDODBCWws5T4wLT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-28T12:12:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We have a policy of not making backward-breaking changes without a deprecation period because it disrupts users and makes a tangle of which versions of interrelated libraries can work together. It is possible to be 100% strict about it, since we have defined what \"public\" means in a mechanically verifiable way (the underscores), but I'd rather be pragmatic.\r\n\r\nThis change would be hard to put through a deprecation cycle (waiting two minor versions before this PR can be merged, and all of the other work that depends on it), and the case that it affects is obscure: developers using typetracers (that's probably only Coffea and dask-awkward; it's a new interface) who explicitly pass `length=None` to the `RecordArray` constructor, rather than letting it be the default. If somebody's actually interested in a `RecordArray`'s `length`, it's because it might have zero fields (an unusual situation, but it's common to want to be defensive about such a possibility), and then one would want to pass an _integer_ length to not let it be derived from the possibly-nonexistent `contents`.\r\n\r\nEven if we don't actually see a path to breakage through an interface change, we should still be careful because it could break in a way that we don't foresee. But this case is _so_ obscure that it's a risk I think we can take.\r\n\r\nHere's a way that an unforseen issue could come in from something like this: if dask-awkward were mirroring the `RecordArray` interface with a `length=None` default, and they don't update to a `length=unset` default along with Awkward. Then any code that uses _their_ `RecordArray` without setting `length` would be saying that the length is unknown, rather than deriving it from `contents`. But dask-awkward doesn't wrap layouts, and it's hard to imagine anything that does in this way (and is also sensitive to typetracer).\r\n\r\nWe should call this kind of situation \"reasonable risk\" and not let it slide to such an extent that we're doing it all the time. In other words, we can only cheat if we think we can get away with it.  `:)`",
  "created_at":"2023-01-30T16:03:56Z",
  "id":1408884694,
  "issue":2168,
  "node_id":"IC_kwDODBCWws5T-d_W",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-30T16:03:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2169?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2169](https://codecov.io/gh/scikit-hep/awkward/pull/2169?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f27c745) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/da5cab09bdce0c13509dadd7803c7006871b3517?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (da5cab0) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-29T13:22:57Z",
  "id":1407662725,
  "issue":2169,
  "node_id":"IC_kwDODBCWws5T5zqF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-29T15:54:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2171?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2171](https://codecov.io/gh/scikit-hep/awkward/pull/2171?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3042cb5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/a0ace38ff1d8f35bafff786ea9527b9bc07689cb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a0ace38) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 3042cb5 differs from pull request most recent head 776704d. Consider uploading reports for the commit 776704d to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-30T14:43:41Z",
  "id":1408744441,
  "issue":2171,
  "node_id":"IC_kwDODBCWws5T97v5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T18:26:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"N.B. linting will be fixed by https://github.com/scikit-hep/awkward/pull/2153 or by upgrading isort. :)",
  "created_at":"2023-01-30T15:10:26Z",
  "id":1408798711,
  "issue":2171,
  "node_id":"IC_kwDODBCWws5T-I_3",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-01-30T15:10:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This update-to-`main` brings in #2153, which ought to make the pre-commit test pass. Then auto-merge will work.",
  "created_at":"2023-01-30T16:44:39Z",
  "id":1408963682,
  "issue":2171,
  "node_id":"IC_kwDODBCWws5T-xRi",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-01-30T16:44:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"pre-commit passed; this is going to auto-merge.",
  "created_at":"2023-01-30T16:46:47Z",
  "id":1408966771,
  "issue":2171,
  "node_id":"IC_kwDODBCWws5T-yBz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T16:46:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This conflicts with my PR #2169, as I didn't see that this was auto-merging. I'll fix the conflicts and re-enable.",
  "created_at":"2023-01-30T17:04:51Z",
  "id":1408991848,
  "issue":2171,
  "node_id":"IC_kwDODBCWws5T-4Jo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T17:04:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Linting will be fixed by https://github.com/scikit-hep/awkward/pull/2153 or by upgrading `isort`",
  "created_at":"2023-01-30T15:10:00Z",
  "id":1408798020,
  "issue":2172,
  "node_id":"IC_kwDODBCWws5T-I1E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T15:10:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"So, I think this is just that the behavior of type unification changed, though still has bugs.\r\n\r\nType unification also seems to be order dependent:\r\n\r\n<details>\r\n<summary>Demonstrating non-commutativity </summary>\r\n\r\n```python\r\nfrom itertools import permutations\r\n\r\nstring_optional = ak.Array([{\"a\": \"foo\"}, {\"a\": None}])[0:0]\r\n\r\nkinds = {\"optional\": string_optional, \"empty\": ak.Array([{\"a\": None}]), \"string\": ak.Array([{\"a\": \"baz\"}])}\r\n\r\nfor perm in permutations(kinds, 3):\r\n    print(perm)\r\n    try:\r\n        ak.concatenate([kinds[k] for k in perm]).type.show()\r\n    except TypeError as e:\r\n        print(\"errored\")\r\n```\r\n\r\n```\r\norder: ('optional', 'empty', 'string')\r\n2 * union[\r\n    {\r\n        a: option[var * char]\r\n    },\r\n    {\r\n        a: string\r\n    }\r\n]\r\n\r\norder: ('optional', 'string', 'empty')\r\n2 * union[\r\n    {\r\n        a: option[var * char]\r\n    },\r\n    {\r\n        a: string\r\n    }\r\n]\r\n\r\norder: ('empty', 'optional', 'string')\r\n2 * union[\r\n    {\r\n        a: ?unknown\r\n    },\r\n    {\r\n        a: ?string\r\n    },\r\n    {\r\n        a: string\r\n    }\r\n]\r\n\r\norder: ('empty', 'string', 'optional')\r\n2 * union[\r\n    {\r\n        a: ?unknown\r\n    },\r\n    {\r\n        a: string\r\n    },\r\n    {\r\n        a: ?string\r\n    }\r\n]\r\n\r\norder: ('string', 'optional', 'empty')\r\nerrored\r\n\r\norder: ('string', 'empty', 'optional')\r\nerrored\r\n```\r\n\r\n</details>",
  "created_at":"2023-01-30T18:07:25Z",
  "id":1409083255,
  "issue":2173,
  "node_id":"IC_kwDODBCWws5T_Od3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T19:39:28Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is a bug! Strings arrays should be mergeable. I'll take a peek.",
  "created_at":"2023-01-30T18:33:29Z",
  "id":1409124456,
  "issue":2173,
  "node_id":"IC_kwDODBCWws5T_Yho",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T18:33:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's right\u2014it's a bug\u2014and what's happening is that the `__array__: \"string\"` parameter, which should go on the `ListType`-of-`NumpyType` node, is instead going on the `OptionType`-of-`ListType`-of-`NumpyType` node.\r\n\r\n> However, this was not an error I ran into last time I tried (using v2 api before 2.0 release).\r\n\r\nIt's likely that before it was wrong and not being flagged as such with an error message. In the 2.0 release, we turned some assumptions into assertions, and this is one of them. If so, then this is good! We didn't want this to go uncaught.",
  "created_at":"2023-01-30T19:18:31Z",
  "id":1409202952,
  "issue":2173,
  "node_id":"IC_kwDODBCWws5T_rsI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T19:18:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2174?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2174](https://codecov.io/gh/scikit-hep/awkward/pull/2174?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e859f7f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f0a1bdf94e039d8910dc9936e821a244dacacd91?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f0a1bdf) will **not change** coverage.\n> The diff coverage is `66.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2174?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/2174?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `84.91% <66.66%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-01-30T18:14:42Z",
  "id":1409093938,
  "issue":2174,
  "node_id":"IC_kwDODBCWws5T_REy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T18:14:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2175](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (79f95b1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/71875df3d6c8ef4caec3ffc8e1f728f3c847d40b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (71875df) will **increase** coverage by `0.06%`.\n> The diff coverage is `84.53%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `76.97% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvX19pbml0X18ucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `89.80% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `90.62% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_dataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19kYXRhZnJhbWUucHk=) | `92.50% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `95.52% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.47% <50.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.60% <62.50%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `86.33% <66.66%> (-3.50%)` | :arrow_down: |\n| ... and [29 more](https://codecov.io/gh/scikit-hep/awkward/pull/2175?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-30T20:47:08Z",
  "id":1409309922,
  "issue":2175,
  "node_id":"IC_kwDODBCWws5UAFzi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T20:58:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Excellent, and I like the `pyproject.toml` formatting.",
  "created_at":"2023-01-30T20:24:54Z",
  "id":1409284095,
  "issue":2176,
  "node_id":"IC_kwDODBCWws5T__f_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T20:24:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2176](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5938dc5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3bab57de897b4c8101c906b02cfc632d9f2337b2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3bab57d) will **increase** coverage by `0.02%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3ByZXR0eXByaW50LnB5) | `71.10% <\u00f8> (\u00f8)` | |\n| [src/awkward/types/optiontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvb3B0aW9udHlwZS5weQ==) | `79.62% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `76.61% <100.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `91.00% <0.00%> (-1.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_ptp.py](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wdHAucHk=) | `84.84% <0.00%> (+4.84%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_var.py](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha192YXIucHk=) | `64.81% <0.00%> (+7.03%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `62.74% <0.00%> (+7.98%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_std.py](https://codecov.io/gh/scikit-hep/awkward/pull/2176?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdGQucHk=) | `63.82% <0.00%> (+8.56%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-30T20:38:49Z",
  "id":1409301511,
  "issue":2176,
  "node_id":"IC_kwDODBCWws5UADwH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-30T20:38:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2177](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b3612f6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9c9466555c8742ba51b5ae430809e170cdae1293?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9c94665) will **increase** coverage by `0.05%`.\n> The diff coverage is `82.71%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `76.97% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvX19pbml0X18ucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `89.80% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `90.62% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_dataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19kYXRhZnJhbWUucHk=) | `92.50% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `95.52% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.22% <50.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.75% <50.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.41% <50.00%> (+0.71%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `73.44% <50.00%> (-0.83%)` | :arrow_down: |\n| ... and [36 more](https://codecov.io/gh/scikit-hep/awkward/pull/2177?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-30T22:49:37Z",
  "id":1409479171,
  "issue":2177,
  "node_id":"IC_kwDODBCWws5UAvID",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T08:44:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2178?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2178](https://codecov.io/gh/scikit-hep/awkward/pull/2178?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1096065) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/a91d96b08a52de55d6d9c72b7c584b91dfcb8bb9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a91d96b) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-01-31T10:19:56Z",
  "id":1410100443,
  "issue":2178,
  "node_id":"IC_kwDODBCWws5UDGzb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T10:19:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I've always been a little confused about what `std::move` does. It seems pretty clear (in this example and others) that it copies data.\r\n> \r\n> What's the difference between this new `move_to` function and the old `concatenate_to` function? Don't they both copy the panel data into an externally provided buffer and delete the panels?\r\n> \r\n\r\nThe `concatenate_to` does not delete the panels. One has to call `clean` to do that. We can change it, I think. Then there will be just one method.\r\n\r\n> I'm fine with making these changes (you can merge it when you're happy with it). I'm just asking.\r\n\r\n",
  "created_at":"2023-01-31T19:12:52Z",
  "id":1410926375,
  "issue":2178,
  "node_id":"IC_kwDODBCWws5UGQcn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T19:12:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"It would be nice if there were only one method. That way, developers don't have to guess which one to use.\r\n\r\nSeparating the functions of \"copy the data out into a contiguous buffer\" and \"remove the panels\" would keep more use-cases open. Maybe there's reason to clear the panels without copying out the data (user initiates a reset), and maybe there's a reason to copy the data out and keep filling (the original \"snapshot\" idea).\r\n\r\nIf `clear` is already a method, maybe `move_to` could take a boolean argument, specifying whether to clear after copying? Then, with `move_to` reproducing `concatenate_to`'s functionality, it should then _become_ `concatenate_to`, since we've already given out instructions on how to copy out the data, and they use the `concatenate_to` spelling.\r\n",
  "created_at":"2023-01-31T19:47:24Z",
  "id":1410968415,
  "issue":2178,
  "node_id":"IC_kwDODBCWws5UGatf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T19:47:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"\"Parameters don't stick to EmptyArrays.\" ",
  "created_at":"2023-02-02T21:03:30Z",
  "id":1414369004,
  "issue":2179,
  "node_id":"IC_kwDODBCWws5UTY7s",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T21:03:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2179](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3e9f11b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/bf9daf288d57c65784144340aaef97791a5c2577?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bf9daf2) will **decrease** coverage by `0.08%`.\n> The diff coverage is `89.16%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `74.80% <\u00f8> (-1.70%)` | :arrow_down: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.21% <66.66%> (-0.02%)` | :arrow_down: |\n| [src/awkward/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5pb25mb3JtLnB5) | `81.95% <66.66%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.06% <68.75%> (-0.36%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `73.15% <75.00%> (-0.22%)` | :arrow_down: |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `89.02% <75.00%> (+0.11%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_dataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19kYXRhZnJhbWUucHk=) | `90.47% <75.00%> (-2.03%)` | :arrow_down: |\n| [src/awkward/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `81.42% <79.16%> (-4.06%)` | :arrow_down: |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `87.17% <80.00%> (-0.26%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.31% <84.00%> (-0.30%)` | :arrow_down: |\n| ... and [32 more](https://codecov.io/gh/scikit-hep/awkward/pull/2179?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-03T13:33:21Z",
  "id":1415876885,
  "issue":2179,
  "node_id":"IC_kwDODBCWws5UZJEV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T19:00:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I had missed the fact that you do have a test, in `tests/test_2179_parameer_merging_rules.py::test_merge_optional_strings` for (1). I'll just add (2) and (3) to that file. (Your other test in that file seems to be something else.)",
  "created_at":"2023-02-03T18:50:00Z",
  "id":1416265749,
  "issue":2179,
  "node_id":"IC_kwDODBCWws5UaoAV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T18:50:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray this would fix `dak.with_name()` without the meta bypass.",
  "created_at":"2023-01-31T14:18:06Z",
  "id":1410439612,
  "issue":2181,
  "node_id":"IC_kwDODBCWws5UEZm8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T14:18:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2181?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2181](https://codecov.io/gh/scikit-hep/awkward/pull/2181?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (163b1d3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/a91d96b08a52de55d6d9c72b7c584b91dfcb8bb9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a91d96b) will **increase** coverage by `0.04%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2181?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2181?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `98.18% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_with\\_name.py](https://codecov.io/gh/scikit-hep/awkward/pull/2181?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX25hbWUucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2181?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.91% <0.00%> (+0.41%)` | :arrow_up: |\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2181?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `90.44% <0.00%> (+0.63%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2181?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.02% <0.00%> (+0.74%)` | :arrow_up: |\n| [src/awkward/\\_errors.py](https://codecov.io/gh/scikit-hep/awkward/pull/2181?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `80.52% <0.00%> (+1.05%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-01-31T14:18:13Z",
  "id":1410439779,
  "issue":2181,
  "node_id":"IC_kwDODBCWws5UEZpj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T14:33:37Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Can this one be merged to main or waiting for something?",
  "created_at":"2023-01-31T17:29:05Z",
  "id":1410785136,
  "issue":2181,
  "node_id":"IC_kwDODBCWws5UFt9w",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T17:29:05Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I *think* this would be a useful feature, though probably hidden behind `merge_record` because there are times when this will lose information (if your fields are already option types).",
  "created_at":"2023-01-31T14:36:37Z",
  "id":1410470998,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UEhRW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T14:36:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yeah, about this kind of simplification\u2014it's one that has come up before.\r\n\r\nThe option-type and union-type simplifications that we have now (`@classmethod simplified`) are simplifying the layouts/forms while maintaining the same high-level types. Here, I'm assuming type equivalences like\r\n\r\n  * `option[option[X]]` is the same type as `option[X]` (each value can either be an instance of `X` or a missing value; the nested `option` does nothing visible at the level of values)\r\n  * `option[union[X, Y]]` is the same type as `union[option[X], option[Y]]` and it's the same type as `union[option[X], Y]` (each value can either be an instance of `X`, an instance of `Y`, or a missing value).\r\n\r\nMerging the types of `a1` and `a2` in\r\n\r\n```\r\na1 = ak.Array([{'a': 'aaa', 'b': 'bbb'}])\r\na2 = ak.Array([{'b': 'bbb', 'c': 'ccc'}])\r\n```\r\n\r\nas\r\n\r\n```\r\n2 * var * {\r\n    a: ?string,\r\n    b: string,\r\n    c: ?string\r\n}\r\n```\r\n\r\nis both visible at the type level and it loses information. If they're merged as a union, then each value either has fields `a` and `b` _or_ it has fields `b` and `c`\u2014there's an anticorrelation between having `a` and having `c`\u2014but if they're merged as a single record with optional fields, the correlation is lost. So that makes this a different kind of simplification than the low-level layout/form simplifications.\r\n\r\nIf we make that change, not only would we break things for current users, but we also wouldn't be able to back out of it easily if we decide that we needed the lost information after all. (We can't change it by calling it a bug-fix: the current behavior really was/is intended.)\r\n\r\nPerhaps we could add a function that does this union-squashing manually, so that it's an opt-in thing (and AnnData could opt into it on the whole-library level, so that your users don't have to think about it). The hard part, then, is what should this function be named? (The implementation would not be very complicated, through `recursively_apply`.)",
  "created_at":"2023-01-31T17:50:17Z",
  "id":1410817300,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UF10U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T17:50:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Thanks for the clarification. An explicit function to simplify types sounds good! \r\nWould this function cope with only this specific case, or are there other cases that you would consider for type simplification? \r\n\r\nSome naming ideas\r\n```\r\nak.squash_types\r\nak.merge_types\r\nak.simplify_types\r\nak.concatenate(..., simplify=True)\r\n```",
  "created_at":"2023-01-31T18:16:45Z",
  "id":1410860526,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UGAXu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T18:16:45Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Perhaps `project_union()` or `squash_union()`?[^p] I lean towards this being a dedicated function, because it will be opinionated and specific to unions. We don't yet have any idea what else we might want to simplify, and I suspect that other simplifications might better fit as separate functions if they're unlikely to be chained.\r\n\r\n [^p]: \"project\" already has lots of (different) meaning, so perhaps this isn't a good name.",
  "created_at":"2023-01-31T18:19:48Z",
  "id":1410864083,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UGBPT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T18:20:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"`project` already has a meaning specifically for unions:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/cda768830ea1eb6f709a140b5e977d78acfc013a/src/awkward/contents/unionarray.py#L598-L630\r\n\r\n> Would this function cope with only this specific case, or are there other cases that you would consider for type simplification?\r\n\r\nIt would be better to make it apply only to this case, so that capabilities can be pieced together (like the way that `ak.pad_none` and `ak.fill_none` are separate functions: the original request was for one function, but doing it in two phases opens more possibilities).\r\n\r\nThe name should include both \"union\" and \"record,\" since it turns unions of records into records with option-type fields. \"Squash\" sounds like \"flatten,\" and that refers to list-type dimensions.\r\n\r\nHow about `ak.merge_union_of_records` (with an `axis` argument)? It's a long name, but this is a specialized thing and can have a long name.",
  "created_at":"2023-01-31T18:26:17Z",
  "id":1410871428,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UGDCE",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2023-01-31T18:26:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"I'm trying to wrap my head around what `Option` types are. Is `Option{T}` meant to be equivalent to `Union{T, Empty}`? I feel like this is the path I see languages like [Julia](https://docs.julialang.org/en/v1/manual/missing/#Arrays-With-Missing-Values) and [Python](https://docs.python.org/3/library/typing.html#typing.Optional) take. It's also what I would expect from @jpivarski's comment:\r\n\r\n> * `option[option[X]]` is the same type as `option[X]` (each value can either be an instance of X or a missing value; the nested option does nothing visible at the level of values)\r\n> * `option[union[X, Y]]` is the same type as `union[option[X], option[Y]]` and it's the same type as `union[option[X], Y]` (each value can either be an instance of X, an instance of Y, or a missing value).\r\n\r\nEspecially:\r\n\r\n> `union[option[X], option[Y]]` and it's the same type as `union[option[X], Y]`",
  "created_at":"2023-02-01T10:08:35Z",
  "id":1411799133,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UJlhd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-01T10:10:43Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Most explicitly, the definition of option is taken from the datashape grammar that we use: https://datashape.readthedocs.io/en/latest/overview.html#option\r\n\r\nSemantically, yes, an option is well defined by `Optional[X] = X | None`. However, we would not express this relation in the same terms in Awkward; `None` is not a free-standing layout class. Instead, the _concept_ of `option` it is explicitly (and exclusively) introduced by wrapping a content in an optional layout e.g. `IndexedOptionArray`. We *do* have an `Empty` type \u2014 `ak.contents.EmptyArray`, but it represents \"unknown\" types, rather than missing values. This is seen e.g. `from_iter([])`, which has no typed data to infer a type from.\r\n\r\nSo, TLDR: at the _layout_ level, `None` is not a distinct type, but `option[T]` is.\r\n\r\nThat said, Jim's example\r\n> `union[option[X], option[Y]]` and it's the same type as `union[option[X], Y]`\r\n\r\nmight seem confusing \u2014 it implies that the missing values in `option[X]` are identical to those in `option[Y]` such that we can express the missing values of `Y` as missing values of `X`. This is correct; we have a singular, distinct concept of \"null\". It's just not possible to define without relating to another type, even if that type is unknown e.g. `option[unknown]`:\r\n```python\r\nak.contents.UnmaskedArray(ak.contents.EmptyArray())\r\n```\r\n\r\nI hope that I haven't made this any more confusing. Jim might have a keener insight into your question. ",
  "created_at":"2023-02-01T10:27:53Z",
  "id":1411827155,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UJsXT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-01T10:28:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> Most explicitly, the definition of option is taken from the datashape grammar that we use: https://datashape.readthedocs.io/en/latest/overview.html#option\r\n\r\nDatashape doesn't have the concept of unions though, right?\r\n\r\n> We do have an Empty type \u2014 ak.contents.EmptyArray, but it represents \"unknown\" types, rather than missing values.\r\n\r\nThis one is a little confusing to me, since you can also have empty typed arrays (though I haven't figured out an easy way to create them). Like:\r\n\r\n```python\r\nak.to_packed(ak.Array([[1], [], [], []])[1:])\r\n# <Array [[], [], []] type='3 * var * int64'>\r\n```\r\n\r\nBut I think the concepts of unknown and empty are a little conflated here.",
  "created_at":"2023-02-01T14:17:58Z",
  "id":1412136094,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UK3ye",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-01T14:17:58Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"NONE",
  "body":"I've been playing around a little more. I think this little snippet helped elucidate some things for me (the output is quite long):\r\n\r\n```python\r\narrays = [\r\n    ak.pad_none(ak.contents.EmptyArray(), 1, 0),\r\n    ak.Array([[{\"a\": 1, \"b\": \"foo\"}]]),\r\n    ak.Array([[{\"a\": 2}]]),\r\n]\r\n\r\nfor perm in permutations(arrays):\r\n    try:\r\n        res = ak.concatenate(perm)\r\n        res.type.show()\r\n        print(ak.to_buffers(res)[0])\r\n    except:\r\n        print(\"Error\")\r\n```\r\n\r\nThis does not return a consistent type. It returns both:\r\n\r\n```\r\n3 * union[\r\n    option[var * {a: int64, b: string}],\r\n    var * {a: int64}\r\n]\r\n```\r\n\r\nand \r\n\r\n```\r\n3 * union[\r\n    option[var * {a: int64}],\r\n    var * {a: int64, b: string}\r\n]\r\n```\r\n\r\nEach of which has a distinct form/ layout. If `Optional[X] = X | None`, then I think you could have a single canonical representation where IndexedOptionArray either wraps the UnionArray or is expressed as part of it. ",
  "created_at":"2023-02-01T16:09:24Z",
  "id":1412318839,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5ULkZ3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-01T16:09:24Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Datashape doesn't have the concept of unions though, right?\r\n\r\nCorrect! See [here](https://github.com/blaze/datashape/issues/237).\r\n\r\n> This one is a little confusing to me, since you can also have empty typed arrays \r\n\r\nYes, the name would be better as `UnknownArray`. Though, `EmptyArray` is _also_ empty (to have any values, it would need a concrete type, after all).\r\n\r\n`EmptyArray` means \"leaf node of unknown type\". It's a type-level statement.\r\n\r\nYou example with merging is strongly related to the bug that this issue originally reports. Simply put, strings are implemented as views over character arrays. This view-metadata is being lost with our merging logic.",
  "created_at":"2023-02-01T16:16:17Z",
  "id":1412330931,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5ULnWz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-01T16:16:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"You're right, @ivirshup, about how missing values could be implemented; we just made different choices here. Actually, I can think of three different ways to represent missing values that I'll outline below.\r\n\r\nFirst, though, it would be useful to distinguish these two types:\r\n\r\n  * [unit type](https://en.wikipedia.org/wiki/Unit_type): there is exactly one possible value for this type. For example, `NoneType` in Python can only be instantiated as `None`.\r\n  * [bottom type](https://en.wikipedia.org/wiki/Bottom_type): there are no possible values for this type: it cannot be instantiated. For example, the return type of a function that always raises an exception or always goes into an infinite loop (never halts) is the bottom type.\r\n\r\n(The usefulness of a bottom type is that it is an identity under type-unification. Suppose you have an `if`-`else` branch that each `return` different values: the return type of that function is the type-union of the `if` branch and the `else` branch. If the `if` branch would return type `T` and the `else` branch would return the bottom type, then the function returns type `T`. That is to say, if it returns anything at all, it's not the bottom type: `T + 0 = T`. So bottom types are useful for book-keeping.)\r\n\r\nThe `ak.contents.EmptyArray` layout node, which has `ak.types.UnknownType` type, is an **array of bottom type, not an array of unit type**. For this reason, it can only ever have length zero. (I _do_ think they're well-named. Other arrays can have zero length for other reasons; the implication goes in only one direction.)\r\n\r\nAwkward Array doesn't have a unit type. If it did (`UnitArray`?), then it would be a metadata-only array characterized only by its length. Doing any `__getitem__(int)` on it would always return the same object, perhaps `None`. If Awkward Array had a unit type, then missing values could be implemented using a `UnionArray` with this `UnitArray` and one or more other arrays. The `UnionArray.tags` would function like `ByteMaskedArray.mask` and the `UnionArray.index` would function like `IndexedOptionArray.index`. This would use more memory than our current scheme, in which option type is _either_ masked (`BitMaskedArray` or `ByteMaskedArray`) _or_ indexed (`IndexedOptionArray`) or has no actual missing values (`UnmaskedArray`).\r\n\r\nThe three ways that I'm aware of for implementing missing values are:\r\n\r\n  1. Unions that include a unit type, like Python and Julia, as you pointed out, and I'd also add some data formats like [Avro](https://avro.apache.org/docs/1.11.1/specification/#unions) and [JSON-schema](https://json-schema.org/draft/2020-12/json-schema-validation.html#name-type).\r\n  2. Specialized option-type, which Awkward Array uses, as well as [C++'s std::optional](https://en.cppreference.com/w/cpp/utility/optional) and other statically typed languages (Swift, Rust, Go...).\r\n  3. Specialized option-type that is also viewed as an iterable container: `option[T]` is like `list[T]` except that `option` can only have length 0 or 1, whereas `list` can have any non-negative integer length. An empty `option` container corresponds to \"missing\" and a length-1 container corresponds to \"not missing.\" [Scala's Option](https://www.scala-lang.org/api/2.13.3/scala/Option.html) works this way, and it's somewhat more common among functional languages because it lets you use the same map/reduce patterns on `option` types as on `list` types. This is the idea behind [ak.singletons](https://awkward-array.org/doc/main/reference/generated/ak.singletons.html) and [ak.firsts](https://awkward-array.org/doc/main/reference/generated/ak.firsts.html), to convert into and out of this form.\r\n\r\n(1) has a nice conceptual feature that you can reuse the concept of `union` to implement `option`. It's particularly good for dynamically typed languages, which are implicitly heterogenous everywhere. It does require you to introduce a unit type, but maybe you had other reasons for doing that, anyway. The downside is that now missingness _has to be_ implemented by a `union`'s tag and index, whereas with (2), we get a choice.\r\n\r\nI just spent a while wondering why Julia, a compiled language, goes with (1), rather than (2), and it's because they're working with non-columnar data structures. As record-oriented structures,\r\n\r\n```julia\r\nstruct UnionOfNullAnd{T}\r\n  tag::UInt8\r\n  null_value::Nothing\r\n  other_value::T\r\nend\r\n```\r\n\r\nis effectively the same as\r\n\r\n```julia\r\nstruct Optional{T}\r\n  is_missing::Bool\r\n  other_value::T\r\nend\r\n```\r\n\r\nsince the `Nothing` doesn't use any memory at runtime. For columnar data structures, it's true that we could have defined `UnitArray` to be metadata-only, but a `UnionArray` requires `tags` to say which of the `UnionArray.contents` is active in a given element and an `index` to be able to find the element in the specified content in a random-access way (without having to compute a cumulative sum of the `tags == 1` array). In a non-columnar world like Julia, the containing array would just have pointers to all of these structs.\r\n\r\nSo if we used representation (1), we'd be forced to use a mask-like `UnionArray.tags` and an index-like `UnionArray.index` for all option-types. What we do instead with (2) is use different techniques, either masking (`BitMaskedArray` or `ByteMaskedArray`) or indexing (`IndexedOptionArray`), depending on whichever is best for that situation.\r\n\r\nThe statements I made about\r\n\r\n> * `option[union[X, Y]]` is the same type as `union[option[X], option[Y]]` and it's the same type as `union[option[X], Y]` (each value can either be an instance of `X`, an instance of `Y`, or a missing value).\r\n\r\nare independent of representation. You'd want these type expressions to be equivalent in a high-level view, although all of the representations, (1), (2), and (3), would have to do some work to make them equivalent. Maybe Julia and other compiled languages would lose the wrapping-structs in some compiler optimization pass, so maybe they don't have to deal with it explicitly.[^1]\r\n\r\nWe have to, and we do it (now) by imposing a conventional layout when the nodes are being constructed. (We used to do it after the nodes were constructed but before they were returned to the user, but missed some cases.)\r\n\r\n[^1]: Actually, no: they can't optimize `std::optional<std::optional<T>>` into `std::optional<T>` because the compiler would have to be aware of some very long-distance relationships to know that it's only the logical-and of each `std::optional::has_value` that matters and be able to coalesce them into a single boolean, rather than two booleans. It gets even more complicated when `std::optional` and `std::variant` are mixed. I'd bet $10 that there isn't a compiler in the world that can do that.",
  "created_at":"2023-02-01T19:17:54Z",
  "id":1412587306,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UMl8q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-01T19:17:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"My last message here was addressing @grst's original issue, about `ak.concatenate` making a union of two incompatible record types, rather than merging the record types with optional fields (and #2185 added that ability as an opt-in function you can call).\r\n\r\nI had missed this point:\r\n\r\n> I've been playing around a little more. I think this little snippet helped elucidate some things for me (the output is quite long):\r\n> \r\n> ```python\r\n> arrays = [\r\n>     ak.pad_none(ak.contents.EmptyArray(), 1, 0),\r\n>     ak.Array([[{\"a\": 1, \"b\": \"foo\"}]]),\r\n>     ak.Array([[{\"a\": 2}]]),\r\n> ]\r\n> \r\n> for perm in permutations(arrays):\r\n>     try:\r\n>         res = ak.concatenate(perm)\r\n>         res.type.show()\r\n>         print(ak.to_buffers(res)[0])\r\n>     except:\r\n>         print(\"Error\")\r\n> ```\r\n\r\nThis is showing non-commutativity of the type that comes from `ak.concatenate`, although it's duplicate with https://github.com/scikit-hep/awkward/issues/2173#issuecomment-1409083255 and https://github.com/scikit-hep/awkward/discussions/2191#discussioncomment-4852557, all to be fixed by #2179. I think all of the examples that demonstrate non-commutativity of types from `ak.concatenate` have an `EmptyArray` in them.",
  "created_at":"2023-02-02T19:04:18Z",
  "id":1414224298,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5US1mq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T19:04:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Thanks for the explanation @jpivarski, I think this was helpful. Especially seeing that `unknown` is the Bottom type part of `EmptyArray`. I can see why you would need a special option type if `?unknown` is an allowable type, otherwise this would just be `?`.\r\n\r\nI think I've figured out how we're going to end up working with this on anndata once this feature is out (https://github.com/scverse/anndata/issues/898).\r\n\r\nAny idea on the timeframe for a release with `ak.merge_union_of_records` (2.1.0)?\r\n\r\n---\r\n\r\nAnother question, are there other parts of the high level API that let me construct unions of records? I think I've only been seeing these from `ak.concatenate`, while the constructor tends to fill with optional types.\r\n\r\n----\r\n\r\n> I just spent a while wondering why Julia, a compiled language, goes with (1), rather than (2), and it's because they're working with non-columnar data structures. As record-oriented structure\r\n\r\nAs a minor point, I don't think this description is quite accurate. Julia does use a \"columnar\" representation for null values in arrays. From the [blog post describing the feature (which I think was quite good)](https://julialang.org/blog/2018/06/missing/):\r\n\r\n<details>\r\n<summary> Quote describing how Array{Missing{T}} works </summary>\r\n\r\n> The second improvement consists in using a compact memory layout for Array object whose element type is a Union of bits types, i.e. immutable types which contain no references (see the [isbits](https://docs.julialang.org/en/latest/base/base/#Base.isbits) function). This includes Missing and basic types such as Int, Float64, Complex{Float64} and Date. When T is a bits type, Array{Union{Missing,T}} objects are internally represented as a pair of arrays of the same size: an Array{T} holding non-missing values and uninitialized memory for missing values; and an Array{UInt8} storing a type tag indicating whether each entry is of type Missing or T.\r\n\r\n</details>\r\n\r\n",
  "created_at":"2023-02-03T13:44:52Z",
  "id":1415889195,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UZMEr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T13:44:52Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"> Any idea on the timeframe for a release with `ak.merge_union_of_records` (2.1.0)?\r\n\r\nProbably early next week, but I can do a patch release (2.0.7) that would include `ak.merge_union_of_records` because that's already in `main`.\r\n\r\n> Another question, are there other parts of the high level API that let me construct unions of records? I think I've only been seeing these from `ak.concatenate`, while the constructor tends to fill with optional types.\r\n\r\nIt would be hard to enumerate them, but there are others. One that comes to mind is [ak.fill_none](https://awkward-array.org/doc/main/reference/generated/ak.fill_none.html), since the fill value might not match the type of the nullable data:\r\n\r\n```python\r\n>>> array = ak.Array([1, 2, 3, None, 4, 5, None, 6])\r\n>>> array.show(type=True)\r\ntype: 8 * ?int64\r\n[1,\r\n 2,\r\n 3,\r\n None,\r\n 4,\r\n 5,\r\n None,\r\n 6]\r\n>>> array2 = ak.fill_none(array, \"hello\")\r\n>>> array2.show(type=True)\r\ntype: 8 * union[\r\n    int64,\r\n    string\r\n]\r\n[1,\r\n 2,\r\n 3,\r\n 'hello',\r\n 4,\r\n 5,\r\n 'hello',\r\n 6]\r\n```\r\n\r\n> As a minor point, I don't think this description is quite accurate. Julia does use a \"columnar\" representation for null values in arrays. From the [blog post describing the feature (which I think was quite good)](https://julialang.org/blog/2018/06/missing/):\r\n\r\nI see! I followed through to the deprecated [DataArrays.jl](https://github.com/JuliaStats/DataArrays.jl/blob/master/spec/literals.md) (because \"In fact, the layout of the `DataArray` type is very similar to that of `Array{Union{Missing,T}}` described above.\") So even though high-level Julia describes the type as (1) in my numbering scheme, they implement it as (2). I guess it's a [SufficientlySmartCompiler](https://wiki.c2.com/?SufficientlySmartCompiler).",
  "created_at":"2023-02-03T16:42:35Z",
  "id":1416122101,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UaE71",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T16:42:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This should have been fixed by `2.0.7` :)",
  "created_at":"2023-02-04T16:57:36Z",
  "id":1416799891,
  "issue":2182,
  "node_id":"IC_kwDODBCWws5UcqaT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-04T16:57:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2183](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ba0084f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/a91d96b08a52de55d6d9c72b7c584b91dfcb8bb9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a91d96b) will **increase** coverage by `0.04%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `77.04% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `79.16% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `79.16% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjYXJ0ZXNpYW4ucHk=) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjb21iaW5hdGlvbnMucHk=) | `82.35% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `61.11% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argmin.py](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `61.11% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `76.19% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `90.62% <\u00f8> (\u00f8)` | |\n| ... and [90 more](https://codecov.io/gh/scikit-hep/awkward/pull/2183?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-01-31T15:15:20Z",
  "id":1410561169,
  "issue":2183,
  "node_id":"IC_kwDODBCWws5UE3SR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T18:17:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"We can deactivate it for a specific subset of files (assuming it can be matched on) if you'd prefer.\r\n\r\nActually, could `_errors.OperationErrorContext` take this as `**kwargs` instead? Then you remove the nesting, too.",
  "created_at":"2023-01-31T19:04:31Z",
  "id":1410915444,
  "issue":2183,
  "node_id":"IC_kwDODBCWws5UGNx0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T19:04:31Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In this case, I think we'd sooner replace the need to setup the context manager entirely with a decorator. We just haven't gotten around to it yet :)",
  "created_at":"2023-01-31T19:08:19Z",
  "id":1410920442,
  "issue":2183,
  "node_id":"IC_kwDODBCWws5UGO_6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-31T19:08:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2184](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1c5a19e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/a5dc78c166d3cf5896002b669469b434113e40bf?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a5dc78c) will **decrease** coverage by `0.01%`.\n> The diff coverage is `76.25%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `83.37% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL2NhdGVnb3JpY2FsLnB5) | `74.64% <0.00%> (\u00f8)` | |\n| [src/awkward/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `88.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `87.65% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/listform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdGZvcm0ucHk=) | `83.14% <0.00%> (\u00f8)` | |\n| [src/awkward/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5pb25mb3JtLnB5) | `81.95% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXNrLnB5) | `95.65% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_dataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19kYXRhZnJhbWUucHk=) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/types/scalartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvc2NhbGFydHlwZS5weQ==) | `77.27% <0.00%> (\u00f8)` | |\n| ... and [24 more](https://codecov.io/gh/scikit-hep/awkward/pull/2184?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-01T15:03:58Z",
  "id":1412207841,
  "issue":2184,
  "node_id":"IC_kwDODBCWws5ULJTh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-17T08:12:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2185](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f3ff3b3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/a91d96b08a52de55d6d9c72b7c584b91dfcb8bb9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a91d96b) will **increase** coverage by `0.08%`.\n> The diff coverage is `88.76%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...c/awkward/operations/ak\\_merge\\_option\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV9vcHRpb25fb2ZfcmVjb3Jkcy5weQ==) | `88.00% <88.00%> (\u00f8)` | |\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `88.70% <88.70%> (\u00f8)` | |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `91.83% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `95.12% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `98.18% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19iYWNrZW5kLnB5) | `100.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX2ZpZWxkLnB5) | `100.00% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.91% <0.00%> (+0.41%)` | :arrow_up: |\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `90.44% <0.00%> (+0.63%)` | :arrow_up: |\n| ... and [2 more](https://codecov.io/gh/scikit-hep/awkward/pull/2185?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-01T11:56:56Z",
  "id":1411937558,
  "issue":2185,
  "node_id":"IC_kwDODBCWws5UKHUW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T00:24:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski what I'm not certain on here is what should happen for esoteric layouts that have multiple \"option-of-record\", and \"union-of-record\" in a single dimension. What should we do here, first wins? It seems like we do that in `ak.drop_none()`, but I don't recall us having a rule.",
  "created_at":"2023-02-01T17:32:41Z",
  "id":1412449916,
  "issue":2185,
  "node_id":"IC_kwDODBCWws5UMEZ8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-01T17:32:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually, sometimes you wouldn't want to do this, so it should be a flag.\r\n\r\nThat way, we don't have to break the current behavior (flag's default is `False`).",
  "created_at":"2023-02-01T14:32:36Z",
  "id":1412158519,
  "issue":2188,
  "node_id":"IC_kwDODBCWws5UK9Q3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-01T14:32:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2190?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2190](https://codecov.io/gh/scikit-hep/awkward/pull/2190?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f2ff28f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4cc61df3fb08fff965b132f8a5411aed7a3b77ef?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4cc61df) will **decrease** coverage by `0.03%`.\n> The diff coverage is `52.38%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2190?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/hist.py](https://codecov.io/gh/scikit-hep/awkward/pull/2190?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvaGlzdC5weQ==) | `47.36% <47.36%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2190?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `77.12% <100.00%> (+0.07%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-02T07:36:45Z",
  "id":1413276268,
  "issue":2190,
  "node_id":"IC_kwDODBCWws5UPOJs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T16:43:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I was looking at tackling and noticed the following:\r\n- `UnionArray.simplified` accepts a `merge` parameters that can be set to `False`\r\n- `UnionArray._validity_error` ensures that no two contents are mergeable\r\n\r\nI believe we should therefore deprecate `UnionArray.simplified(..., merge=)`, as `merge=True` is allowed, but `merge=False` will only work for non-mergeable contents.",
  "created_at":"2023-06-15T19:33:03Z",
  "id":1593613393,
  "issue":2192,
  "node_id":"IC_kwDODBCWws5e_JxR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-15T19:33:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Unless this is related to `from_buffers`'s back door (because `ArrayBuilder` would build invalid layouts, so it has a back door to change the Form to a valid one)\u2014unless this is related to that, it's a relic. We assume that any `UnionArray` that exists must be valid/must be merged.\r\n\r\nAlso, unless it's really `mergebool`, which is optional. `UnionArrays` are allowed to include both numerical and boolean `contents` without merging them. (We agree with NumPy that booleans are not integers. If only Python would agree...)",
  "created_at":"2023-06-16T16:29:51Z",
  "id":1594951952,
  "issue":2192,
  "node_id":"IC_kwDODBCWws5fEQkQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-16T16:29:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh yeah,\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/4cc61df3fb08fff965b132f8a5411aed7a3b77ef/src/awkward/_connect/pyarrow.py#L1003-L1005\r\n\r\nis just a missing feature. And now that `form_handle_arrow` exists, it shouldn't be too hard to implement: we get the Arrow schema from `obj` (a `pyarrow.Table`), find its Awkward Form, and then use `Form.length_zero_array` (also a new function that didn't exist when this `FIXME` was stubbed) to make the array.",
  "created_at":"2023-02-02T19:41:53Z",
  "id":1414271929,
  "issue":2193,
  "node_id":"IC_kwDODBCWws5UTBO5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T19:41:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Hi @jpivarski, thanks for the quick reaction! I actually came up with a fix for this (see PR above) but wanted to open an issue first. Haven't considered using `Form.length_zero_array`, although that does sounds like a cleaner approach.",
  "created_at":"2023-02-02T19:53:32Z",
  "id":1414284021,
  "issue":2193,
  "node_id":"IC_kwDODBCWws5UTEL1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T19:53:32Z",
  "user":"MDQ6VXNlcjE3MDA1MjU1"
 },
 {
  "author_association":"MEMBER",
  "body":"It might be enough to just return this:\r\n\r\n```python\r\nform_handle_arrow(obj.schema, pass_empty_field=pass_empty_field).length_zero_array()\r\n```",
  "created_at":"2023-02-02T20:01:05Z",
  "id":1414295356,
  "issue":2194,
  "node_id":"IC_kwDODBCWws5UTG88",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T20:01:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2194?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2194](https://codecov.io/gh/scikit-hep/awkward/pull/2194?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (76abfd7) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4cc61df3fb08fff965b132f8a5411aed7a3b77ef?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4cc61df) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2194?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/2194?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `91.00% <100.00%> (+0.20%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-02T20:03:18Z",
  "id":1414299527,
  "issue":2194,
  "node_id":"IC_kwDODBCWws5UTH-H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T21:10:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Here is a test that triggers the error:\r\n\r\n```python\r\nak.from_arrow(ak.to_arrow_table(ak.Array([{\"x\": 1, \"y\": 2.2}])[0:0], extensionarray=extensionarray))\r\n```\r\n\r\n(not actually Parquet-related). Tests would either go in a file named\r\n\r\n```\r\ntests/test_2194_fix_read_empty_parquet.py\r\n```\r\n\r\nor into the existing\r\n\r\n```\r\ntests/test_1125_to_arrow_from_arrow.py\r\n```\r\n\r\nYour choice, although we usually just make new files for new issues, and you can use the above as a template for parameterizing by `extensionarray`. The 1125 file has more bells and whistles than you'll probably want.",
  "created_at":"2023-02-02T20:07:13Z",
  "id":1414307107,
  "issue":2194,
  "node_id":"IC_kwDODBCWws5UTJ0j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T20:07:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> It might be enough to just return this:\r\n> \r\n> ```python\r\n> form_handle_arrow(obj.schema, pass_empty_field=pass_empty_field).length_zero_array()\r\n> ```\r\n\r\nThat does seems to do the trick! Looks like it needs to be `length_zero_array(highlevel=False)` though, otherwise the wrapping fails at the end.\r\n\r\n> Also, the PR needs tests. [...] Tests would either go in a file named `tests/test_2194_fix_read_empty_parquet.py` or into the existing `tests/test_1125_to_arrow_from_arrow.py`. Your choice, although we usually just make new files for new issues, and you can use the above as a template for parameterizing by `extensionarray`. The 1125 file has more bells and whistles than you'll probably want.\r\n\r\nRight, but putting the test in `1125` could make use of the `arrow_round_trip` and `parquet_round_trip` helper functions without needing to reimplement them or import them across tests. I've added a short test case there using the array you suggested.\r\n",
  "created_at":"2023-02-02T20:50:25Z",
  "id":1414355005,
  "issue":2194,
  "node_id":"IC_kwDODBCWws5UTVg9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T20:50:25Z",
  "user":"MDQ6VXNlcjE3MDA1MjU1"
 },
 {
  "author_association":"MEMBER",
  "body":"You're right about both points! Since I think you're at an inflection point, I'm going to do an \"update branch\" to make sure that it will work when up-to-date on `main`. Be sure to `git pull` before making any more changes.",
  "created_at":"2023-02-02T21:00:38Z",
  "id":1414365849,
  "issue":2194,
  "node_id":"IC_kwDODBCWws5UTYKZ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-02T21:00:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I've approved the changes, so if it passes tests, it's ready to be merged!",
  "created_at":"2023-02-02T21:01:27Z",
  "id":1414366701,
  "issue":2194,
  "node_id":"IC_kwDODBCWws5UTYXt",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-02-02T21:01:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@all-contributors please add @dsavoiu for code",
  "created_at":"2023-02-03T22:17:51Z",
  "id":1416476694,
  "issue":2194,
  "node_id":"IC_kwDODBCWws5UbbgW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T22:17:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski \n\nI've put up [a pull request](https://github.com/scikit-hep/awkward/pull/2204) to add @dsavoiu! :tada:",
  "created_at":"2023-02-03T22:18:00Z",
  "id":1416476916,
  "issue":2194,
  "node_id":"IC_kwDODBCWws5Ubbj0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T22:18:00Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "author_association":"MEMBER",
  "body":"(Wrong issue, sorry for the label switch-arounds!)",
  "created_at":"2023-02-02T20:54:55Z",
  "id":1414359591,
  "issue":2195,
  "node_id":"IC_kwDODBCWws5UTWon",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-02T20:57:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Oh, is it failing on Windows? I'll double check.",
  "created_at":"2023-02-03T13:14:48Z",
  "id":1415856566,
  "issue":2195,
  "node_id":"IC_kwDODBCWws5UZEG2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T13:14:48Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"This was on Linux, in a test on my local computer. I was in the midst of something with time pressure when I posted this. Let me re-test now, and see if I need to update ROOT or something. (If updating ROOT fixes it, it's still a bug; but let me just see if that's why the CI tests pass.)",
  "created_at":"2023-02-03T17:01:00Z",
  "id":1416147950,
  "issue":2195,
  "node_id":"IC_kwDODBCWws5UaLPu",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-03T17:01:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Could there have been a change in `awkward-cpp`? I just reinstalled from `main` from scratch (rebuilding the files with `nox -s prepare`) and it's all fine now: it works in sequential mode and in parallel. I did not update my ROOT version, so that's not it.\r\n\r\nMaybe there's something intermittent? If it comes up again, we can revisit this, but you can't debug an error that you can't reproduce, so I'll close this now.",
  "created_at":"2023-02-03T17:09:08Z",
  "id":1416158904,
  "issue":2195,
  "node_id":"IC_kwDODBCWws5UaN64",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T17:09:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2196](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d401f44) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e350d63e48f3bb1598c4e4b7aa39177d01edd0c3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e350d63) will **increase** coverage by `0.00%`.\n> The diff coverage is `96.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.21% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.39% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.64% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `73.17% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `73.95% <100.00%> (+0.80%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.06% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.31% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `89.02% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.68% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.57% <100.00%> (\u00f8)` | |\n| ... and [5 more](https://codecov.io/gh/scikit-hep/awkward/pull/2196?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-02T21:04:46Z",
  "id":1414370430,
  "issue":2196,
  "node_id":"IC_kwDODBCWws5UTZR-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-04T00:17:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2198?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2198](https://codecov.io/gh/scikit-hep/awkward/pull/2198?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (daf5ce3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/087131675a351b314b333b7d587f7e7d7a51e6b3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0871316) will **increase** coverage by `0.04%`.\n> The diff coverage is `94.44%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2198?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2198?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `74.52% <\u00f8> (-0.29%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://codecov.io/gh/scikit-hep/awkward/pull/2198?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `94.33% <94.33%> (\u00f8)` | |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2198?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/2198?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `83.71% <0.00%> (+0.37%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-03T14:25:37Z",
  "id":1415942972,
  "issue":2198,
  "node_id":"IC_kwDODBCWws5UZZM8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T22:02:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"(From the other discussion)\r\n> np.isclose isn't a ufunc.\r\n\r\nRight, to be precise it's implemented mostly in terms of ufuncs, and it broadcasts.\r\n\r\n> But woah\u2014it just works! How did that happen?\r\n\r\n`__array_function__` ;)\r\n\r\n> But it does care about shapes, in a raising-exceptions kind of way (not a returning-False kind of way):\r\n\r\nWell, this is a generic broadcasting error. I'd not put that in the \"this is a noisy function box\", otherwise we'd have to do the same for all ufuncs, for example.\r\n\r\n> A generalization of that could be to raise exceptions if the Awkward types differ but return True or False depending only on the values.\r\n\r\nSo if we generalised NumPy, we'd only error on structural differences rather than type alone; if it broadcasts, then it's allowed.\r\n\r\n> The main benefit of those functions over boolean-returning functions (in my opinion) is that they can give helpful error messages.\r\n\r\nWe definitely could do something rich-like and make it easier to spot why an assert failed, sure. However, I think our L1 users are most likely to want a boolean, not an assert.\r\n\r\nMy view is that we have different functions here. We can implement an Awkward-specific `isclose` (following from the work on adding NEP18 shims everywhere), if we need. We can also add `allclose` and `array_equal`, which can follow directly from NumPy's meaning. Perhaps they should take additional Awkward-specific flags to test our datashape equality, like the current function in this PR does. However, `allclose` is not the same as `array_equal`: the former broadcasts. Our function would not want to do this in my view, so we probably want `array_equal` and `array_approx_equal`, where the former is a NumPy overload, too.",
  "created_at":"2023-02-03T18:44:35Z",
  "id":1416260528,
  "issue":2198,
  "node_id":"IC_kwDODBCWws5Uamuw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T18:49:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, our need is different enough here (types matter more to Awkward than to NumPy) that we can introduce a new function with a new name. But perhaps it should be in `ak.operations`, since it's not an asserting function? (Sorry that I said it should be in `ak.testing` without noticing that `np.testing` is all asserting functions.)\r\n\r\nWhat would you think about making it a regular operation?",
  "created_at":"2023-02-03T19:01:25Z",
  "id":1416276900,
  "issue":2198,
  "node_id":"IC_kwDODBCWws5Uaquk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T19:01:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  (Sorry that I said it should be in ak.testing without noticing that np.testing is all asserting functions.)\r\n\r\nJust want to acknowledge that I appreciate the note, but that there's no need to apologise for this kind of stuff - we're all allowed to change our mind based upon new information! \r\n\r\n> What would you think about making it a regular operation?\r\n\r\nYes, if you're happy that we have our own not-like-NumPy operation, let's do that.",
  "created_at":"2023-02-03T19:51:47Z",
  "id":1416333541,
  "issue":2198,
  "node_id":"IC_kwDODBCWws5Ua4jl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T19:51:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yeah, let's just do it as a regular operation: `ak.arrays_approx_equal`. There's no NumPy equivalent, but there's no NumPy equivalent of `ak.num`, either.\r\n\r\nSomeday, we might need `assert_*` functions, and we'll introduce the `ak.testing` submodule for that, at that time. (They wouldn't have to be the same as NumPy's functions, but just the general flow of putting asserting functions in `ak.testing` and normal functions in `ak.operations` is following the NumPy model.)",
  "created_at":"2023-02-03T20:05:10Z",
  "id":1416346396,
  "issue":2198,
  "node_id":"IC_kwDODBCWws5Ua7sc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T20:05:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski how do you feel about `ak.approx_equal`? I took the line that `array` is already implied.",
  "created_at":"2023-02-03T20:23:34Z",
  "id":1416363362,
  "issue":2198,
  "node_id":"IC_kwDODBCWws5Ua_1i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T20:23:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski how do you feel about `ak.approx_equal`? I took the line that `array` is already implied.\r\n\r\nThat's a good name. For all of the operations, it's implicit that some argument is going to be an array or array-like.",
  "created_at":"2023-02-03T20:52:52Z",
  "id":1416390847,
  "issue":2198,
  "node_id":"IC_kwDODBCWws5UbGi_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T20:52:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2199?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2199](https://codecov.io/gh/scikit-hep/awkward/pull/2199?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2c8e31c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4cc61df3fb08fff965b132f8a5411aed7a3b77ef?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4cc61df) will **not change** coverage.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2199?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2199?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-03T14:40:27Z",
  "id":1415962683,
  "issue":2199,
  "node_id":"IC_kwDODBCWws5UZeA7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T14:40:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Are you saying that this PR fixes issue #2195 because you reproduced it and then changing `int64_t` to `int` made the issue go away? If so, I think it's because it was intermittent and the `int64_t` \u2192 `int` change didn't have anything to do with it.\r\n\r\nAnyway, we shouldn't ever be using platform-dependent types like `int`, unless it's to match some given interface and then we explicitly cast it to a platform-independent one. The integer type in this part of the code is the list offsets type, which is our interface, and we always set that to platform-independent types.",
  "created_at":"2023-02-03T17:13:56Z",
  "id":1416164455,
  "issue":2199,
  "node_id":"IC_kwDODBCWws5UaPRn",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-03T17:13:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2201?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2201](https://codecov.io/gh/scikit-hep/awkward/pull/2201?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0ae9f8f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4cc61df3fb08fff965b132f8a5411aed7a3b77ef?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4cc61df) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2201?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2201?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.91% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-03T16:04:43Z",
  "id":1416076086,
  "issue":2201,
  "node_id":"IC_kwDODBCWws5UZ5s2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T16:04:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2202?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2202](https://codecov.io/gh/scikit-hep/awkward/pull/2202?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5fd40d2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/20b3da8760ef6e23c3fe9fd03447a7c881543fd2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (20b3da8) will **decrease** coverage by `0.06%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2202?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2202?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-03T16:36:29Z",
  "id":1416115189,
  "issue":2202,
  "node_id":"IC_kwDODBCWws5UaDP1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-06T14:49:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"Hi @ianna,\r\n\r\nJust adding a comment to further clarify the usage of `rdfentry_`. That depends on both the data source and the mode of execution. The easiest case is single core execution, with no data source (i.e. empty source), then `rdfentry_` will just be the row number (from 0 to `N-1` in `df = RDataFrame(N)`). With a TTree/TChain as a data source, this corresponds to the event number of the tree/chain, but only in sequential execution. In MT execution, it is still a unique indexing, but there is no direct correspondence between `rdfentry_` and the event number in the full tree/chain as specified [in the docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols). Interestingly, we have very recently started discussing the possibility of aligning it to the event number also in MT runs in [this issue](https://github.com/root-project/root/issues/12190).\r\n\r\nBottom line, it is a unique index but you can use it as a filtering bookkeeping method for external arrays (like numpy or awkward arrays) only in sequential execution, which maybe it is already the case here. RDataFrame doesn't use this special variable for the bookkeeping of filtered events, there are other internal mechanisms.\r\n\r\nI also agree with Jim that it is worth to check also the precise contents of the filtered arrays.",
  "created_at":"2023-02-06T11:24:04Z",
  "id":1418927287,
  "issue":2202,
  "node_id":"IC_kwDODBCWws5Ukxy3",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-06T11:25:02Z",
  "user":"MDQ6VXNlcjE1NjM4ODk1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Awesome! I expected that RDF would have its own bookkeeping for filters, and it's great that we can use that instead of creating another. Is this `rdfentry_` column only available in certain ROOT versions? If so, then we'll need to restrict to a minimum version of ROOT. (That's generally true of all our strict and non-strict dependencies; once we find a feature we minimally need, we can raise errors if the dependency version is too old to have that feature.)\r\n\r\nLooking at ROOT documentation: an rdfentry_ column is an alias or a replacement of a tdfentry_ column that was introduced in versions greater than 6.14. The latter legacy column name is still supported. I need to check which ROOT version is recommended to use a production version of RDF. \r\n\r\n> \r\n> The test reads an Awkward column back out of the RDF (`x` has record type\u2014not converted through `RVec` and such) and you verified that the length is correct. Could you also verify that the values are correct, that it's picking out exactly the right entries? Maybe even better if the filter is not `y > 2` but one of the integers `% 2 == 0`, so that you see that the `rdfentry_` is picking out a non-trivial subset.\r\n> \r\n\r\ndone.\r\n\r\n> I'm approving this PR for merging anyway, but a test like that would be better.\r\n\r\nThanks! Please, have a look.",
  "created_at":"2023-02-06T15:46:13Z",
  "id":1419298261,
  "issue":2202,
  "node_id":"IC_kwDODBCWws5UmMXV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-06T15:46:13Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2206?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2206](https://codecov.io/gh/scikit-hep/awkward/pull/2206?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (17b3780) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0e971605d75d3f80f740e8307eeb54436e48d112?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0e97160) will **decrease** coverage by `0.01%`.\n> The diff coverage is `50.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2206?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2206?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `74.42% <50.00%> (-0.11%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-02-03T23:39:15Z",
  "id":1416532322,
  "issue":2206,
  "node_id":"IC_kwDODBCWws5UbpFi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-03T23:39:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski `EmptyArray._remove_structure` currently returns `[]`. We could return `[self]`, which would likely solve this bug, and probably be more useful too.",
  "created_at":"2023-02-04T01:59:38Z",
  "id":1416601071,
  "issue":2207,
  "node_id":"IC_kwDODBCWws5Ub53v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-04T01:59:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't remember what `Content._remove_structure` means. Does the v1 version of it (effectively, translating from C++) return `[self]`?",
  "created_at":"2023-02-04T15:30:03Z",
  "id":1416782216,
  "issue":2207,
  "node_id":"IC_kwDODBCWws5UcmGI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-04T15:30:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It's a rename of v2's `Content._completely_flatten` with an extension to support keeping list dimensions (but making the outer dimensions all length 1). We use this for `axis=None` reduction with `keepdims=True`\r\n\r\nThe suggestion to change its behaviour is not motivated by it being a bug inasmuch as \"what would be more useful\"?",
  "created_at":"2023-02-04T15:55:47Z",
  "id":1416787589,
  "issue":2207,
  "node_id":"IC_kwDODBCWws5UcnaF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-04T16:53:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The v1 `completely_flatten` was in Python, in `_util.py`.\r\n\r\nAnd it had EmptyArrays ([unknowntypes](https://github.com/scikit-hep/awkward/blob/80bbef0738a6b7928333d7c705ee1b359991de5b/src/awkward/_util.py#L127)) go to an empty NumPy-like array (of `bool_` for some reason[^1]):\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/80bbef0738a6b7928333d7c705ee1b359991de5b/src/awkward/_util.py#L564-L576\r\n\r\nSo the new behavior of having `_remove_structure` go to `[]` is definitely different and could be the cause of a bug that was not in v1. If `_remove_structure` was returning NumPy-like arrays, EmptyArray should return an empty NumPy-like array, but I think you changed it to return `Content` subclasses now, right? (To preserve option-types.)\r\n\r\n[^1]: Maybe because `bool_` combines with any other dtype as an identity? The concatenation of an array of `bool_` and an array of `T` returns an array of `T`?",
  "created_at":"2023-02-04T16:51:35Z",
  "id":1416798784,
  "issue":2207,
  "node_id":"IC_kwDODBCWws5UcqJA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-04T16:51:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for digging! \r\n\r\n>  EmptyArray should return an empty NumPy-like array, but I think you changed it to return Content subclasses now, right? \r\n\r\nYes, now this returns 1D contents, so it's legitimate for us to return `EmptyArray`. In general, if we can avoid interpreting the `EmptyArray` as some arbitrary `NumpyArray` type, we preserve information, so that's why I'm in favour of such a solution here.",
  "created_at":"2023-02-04T16:54:27Z",
  "id":1416799322,
  "issue":2207,
  "node_id":"IC_kwDODBCWws5UcqRa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-04T16:54:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah that's an oversight. As ever, thanks for a nice report!",
  "created_at":"2023-02-06T11:05:39Z",
  "id":1418902044,
  "issue":2209,
  "node_id":"IC_kwDODBCWws5Ukroc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-06T11:05:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Thanks for fixing them so quickly!",
  "created_at":"2023-02-06T15:24:38Z",
  "id":1419262152,
  "issue":2209,
  "node_id":"IC_kwDODBCWws5UmDjI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-06T15:24:38Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2210](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b0b469b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/69df2f225f706bd6e6e9de5592af6c1fc74b40da?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (69df2f2) will **decrease** coverage by `0.04%`.\n> The diff coverage is `66.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.92% <33.33%> (-0.04%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.80% <66.66%> (-1.11%)` | :arrow_down: |\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `83.33% <66.66%> (-5.56%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `92.72% <75.00%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `89.84% <100.00%> (+0.49%)` | :arrow_up: |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `86.60% <0.00%> (-0.40%)` | :arrow_down: |\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `82.75% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.61% <0.00%> (\u00f8)` | |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward/pull/2210?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-06T12:25:48Z",
  "id":1419000991,
  "issue":2210,
  "node_id":"IC_kwDODBCWws5UlDyf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T12:29:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski you tend to get to things within a couple of days, so I'm making an assumption that this has fallen off your radar. If you're just prioritising other things, no need to respond \u2014 I know that you'll see this.",
  "created_at":"2023-02-09T22:40:23Z",
  "id":1424933125,
  "issue":2210,
  "node_id":"IC_kwDODBCWws5U7sEF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T22:40:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @jpivarski. How do you feel about not supporting typetracer here? I suppose this could return an unknown boolean, so maybe I should change this. ",
  "created_at":"2023-02-11T10:44:43Z",
  "id":1426695232,
  "issue":2210,
  "node_id":"IC_kwDODBCWws5VCaRA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-11T10:44:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"If this is primarily used for testing, not supporting typetracer would be fine: no one would miss it. If it's used as part of a regular analysis, it could easily come up when someone passes that into Dask. It could be NotImplementedError, and we can get back to it. (The implementation would be to return true if the types match, false otherwise. If the values don't match, they'll find out at runtime.)",
  "created_at":"2023-02-12T01:38:28Z",
  "id":1426917196,
  "issue":2210,
  "node_id":"IC_kwDODBCWws5VDQdM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-12T01:38:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I want to add typetracer support here (it won't be too hard), but first I'd like to re-think how scalars behave in typetracer. So, this is a first-pass. ",
  "created_at":"2023-02-13T12:32:33Z",
  "id":1427866163,
  "issue":2210,
  "node_id":"IC_kwDODBCWws5VG4Iz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T12:32:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, from a user standpoint, this is a bug; I can clearly see that the record should be made over the innermost dimension, and the `var`s should then line up. We're only seeing this because of the policy that we have `Union[var * ..., var * ...]` instead of `var * Union[..., ...]`. I've never given that much thought; I suspect @jpivarski  has, and there's a reason that we don't try to push the union as deep as possible. It might be as simple as the way we check mergeability; we ask whether a layout is mergeable, which returns a single boolean for the entire layout tree. We don't have a mechanism for saying where the union should appear in the layout, at least, I don't think.\r\n\r\nSo, what we do here depends upon what we do with unions more generally. I *think* that pushing the union as deep as possible is more useful, and if we did so, we wouldn't need to change things function. Meanwhile, if we decide not to change that behavior, `merge_union_of_records` could rewrite the records first and then simplify, with additional checks to ensure that the union disappears. ",
  "created_at":"2023-02-06T15:31:06Z",
  "id":1419273570,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5UmGVi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-06T15:41:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> there's a reason that we don't try to push the union as deep as possible\r\n\r\nI would imagine that `union[var * x, var * y]` is more efficient that `var * union[x, y]`.  With `var * union[...]` you end up with large index arrays for the union, and much more frequent branching during execution.",
  "created_at":"2023-02-06T19:45:13Z",
  "id":1419651607,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5UnioX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-06T19:45:13Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"NONE",
  "body":"As desired behavior, I would expect this to propagate through matching dimensions. E.g.:\r\n\r\n* `n * Union[10 * {a: int}, 10 * {b: int}] -> n * 10 * {a: ?int, b: ?int}`\r\n\r\n<details>\r\n<summary> current </summary>\r\n\r\n```python\r\na = ak.Array([np.repeat(np.array([{\"a\": 1}], dtype=object), 10)])\r\nb = ak.Array([np.repeat(np.array([{\"b\": 2}], dtype=object), 10)])\r\n\r\nres = ak.to_regular(ak.concatenate([a, b]))\r\n# 2 * union[10 * {a: int64}, 10 * {b: int64}]\r\n\r\nak.merge_union_of_records(res)\r\n# 2 * union[10 * {a: int64}, 10 * {b: int64}]\r\n```\r\n\r\n</details>\r\n\r\n* `n * Union[{a: {b: int}}, {a: {c: int}}] -> n * {a: {b: ?int, c: ?int}}`\r\n\r\n<details>\r\n<summary> current </summary>\r\n\r\n```python\r\na = ak.Array([{\"a\": {\"b\": 1}}])\r\nb = ak.Array([{\"a\": {\"c\": 2}}])\r\n\r\nres = ak.concatenate([a, b])\r\nres.type.show()\r\n# 2 * union[\r\n#     {\r\n#         a: {\r\n#             b: int64\r\n#         }\r\n#     },\r\n#     {\r\n#         a: {\r\n#             c: int64\r\n#         }\r\n#     }\r\n# ]\r\n\r\nak.merge_union_of_records(res).type.show()\r\n# 2 * {\r\n#     a: union[\r\n#         {\r\n#             b: int64\r\n#         },\r\n#         {\r\n#             c: int64\r\n#         }\r\n#     ]\r\n# }\r\n```\r\n\r\n</details>",
  "created_at":"2023-02-06T20:23:41Z",
  "id":1419701226,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5Unuvq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-06T20:23:41Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"When a UnionArray of unknown contents is created, it goes through `UnionArray.simplified`, which checks the proposed `contents` to see if they're mergeable. If they're `var * A` and `var * B` and `A` and `B` are not mergeable, then it won't merge them.\r\n\r\nBut this is a new case, yet another different thing that could be eliminated by `UnionArray.simplified`. Before any other checks, this constructor could see if all of the given `contents` are lists. If they *all* are, it would build a new `offsets` for them all, expanding the `tags` and `index` to apply to the contents of the lists, rather than the lists themselves, and return a ListOffsetArray whose content is the result of a recursion on `UnionArray.simplified`. If any one of those original `contents` had an option-type, that would wrap the output ListOffsetArray.\r\n\r\nIt's possible, but rather complex and it might need new kernel functions. Also, maybe it should happen on a minor version boundary because it's a breaking change.\r\n\r\nWhat would you (everyone) think about intending to do it and for now, just identifying the situation to add a warning about the coming change? Identifying the situation is not nearly as complex as implementing it.",
  "created_at":"2023-02-09T23:53:47Z",
  "id":1424990375,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5U76Cn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T23:53:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"> Also, maybe it should happen on a minor version boundary because it's a breaking change.\r\n\r\nI think it could be considered a bug if the behavior was the original intent.\r\n\r\nBut this may not be the case if this isn't specific to `merge_union_of_records`, and is instead more general to unions.\r\n\r\n----\r\n\r\n> What would you (everyone) think about intending to do it and for now, just identifying the situation to add a warning about the coming change? Identifying the situation is not nearly as complex as implementing it.\r\n\r\nI think a warning, possibly also in the docs, would be a good step. I agree this seems complicated to implement.\r\n\r\nDo you think the proposed solution is more difficult than an `Array.astype(t: ak.types.Type)` method?",
  "created_at":"2023-02-10T10:23:47Z",
  "id":1425576447,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5U-JH_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-10T10:23:47Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"Well, it's not that it was unintended behavior so much as an unconsidered case. In the beginning, my idea was that all types are a free monoid of these generators:\r\n\r\n  * primitive types (booleans, numbers, datetimes, timedeltas)\r\n  * list types (may count as two generators if we distinguish `var *` from `## *`)\r\n  * record types (tuples and structs; the field names are almost-irrelevant metadata)\r\n  * option types\r\n  * union types\r\n\r\nYou've already pointed out that option types can be implemented in terms of unions if we had a unit type primitive (`None` is the only member of `NoneType`). Even though we don't use that implementation, that fact implies that the type system we want is not a _free_ monoid; there are equivalences like\r\n\r\n```\r\noption[union[X, Y]] == union[option[X], Y] == union[X, option[Y]] == union[option[X], option[y]]\r\n```\r\n\r\n(due to a more fundamental equivalence, `union[X, union[Y, Z]] == union[X, Y, Z]`, in which `Z` is the unit type primitive).\r\n\r\nThe PRs associated with #1910 were intended to \"divide through\" these equivalences, replacing the members of each equivalence class with a canonical form that represents that class. So, for instance, any of the above would be replaced by\r\n\r\n```\r\nunion[option[X], Y]\r\n```\r\n\r\nas the only form we construct.\r\n\r\nWhat you discovered here is another equivalence class:\r\n\r\n```\r\nunion[list[X], list[Y]] == list[union[X, Y]]\r\n```\r\n\r\nWe're finding these now because you're evidently focusing a lot on unions. That's great\u2014we were hoping new use-cases would reveal blind spots. HEP users do sometimes use unions, but all the cases I've seen have been unions of distinguishable records, so there was no reduction to be done.\r\n\r\nWithout unions, I'm pretty sure that the space of all types really is a free monoid:\r\n\r\n   * primitive types\r\n   * list types\r\n   * record types\r\n   * option types\r\n\r\nAny combination of these is distinguishable. For instance,\r\n\r\n```\r\nlist[option[X]] != option[list[X]]\r\n```\r\n\r\nbecause the left hand side is saying that the `X` values can be replaced by `None`, whereas the right hand side is saying that the _lists_ can be replaced by `None`. (Google products, like Protobuf, don't seem to make the distinction between a missing list and a list of missing elements, but I think it's important.)\r\n\r\nI used to think there was a symmetry between records ([product types](https://en.wikipedia.org/wiki/Product_type)) and unions ([sum types](https://en.wikipedia.org/wiki/Tagged_union)) because every instance value of `record[X, Y, Z]` is an `X` and a `Y` and a `Z`, whereas every instance value of `union[X, Y, Z]` is an `X` or a `Y` or a `Z`, but the distinction between \"and\" and \"or\" is really deep. I'm pretty sure that any tree that you make of records, with or without lists and option types, has instance values that are distinguishable from another tree,\r\n\r\n```\r\nrecord[X, record[Y, Z]] != record[X, Y, Z] != ...\r\n```\r\n\r\nbut that's not at all the case for unions:\r\n\r\n```\r\nunion[X, union[Y, Z]] == union[X, Y, Z]\r\n```\r\n\r\nSince you found one more, I'm thinking we should do some sort of search to see if there aren't other equivalences. We'd like to be aware of all the algebraic simplifications that can be done because replacing each equivalence class by one canonical member means that there are a lot of type-combinations that we can ignore in our implementations.\r\n\r\nI'm thinking about doing a brute-force search. We don't expect any type equivalence expression to be deeper than, say, three nodes deep, unless that expression is just a composition of other expressions. Maybe SymPy could be brought into this.\r\n\r\nOr maybe there's a general theory for this stuff, and I just need to find the right computer scientist to take a look and say, \"Oh yeah, that's just lasdkjhflakdfjh-theory. It's in so-and-so's textbook.\"\r\n\r\nI'll look into this and come up with something. At least we can add the\r\n\r\n```\r\nunion[list[X], list[Y]] == list[union[X, Y]]\r\n```\r\n\r\nthat you found to our list of to-do items.",
  "created_at":"2023-02-10T17:25:01Z",
  "id":1426117231,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5VANJv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-10T17:25:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, and `Array.astype(t: ak.types.Type)` is a bigger project than adding this one equivalence to union-building. Since an `astype` function would construct a new tree, it would be _using_ what we do here, and inherit all the equivalences that the constructors implement.",
  "created_at":"2023-02-10T17:26:28Z",
  "id":1426118708,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5VANg0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-10T17:26:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm working with that brute-force approach and discovered something: if we rewrite\r\n\r\n```\r\nunion[list[X], list[Y]] \u2192 list[union[X, Y]]\r\n```\r\n\r\nthen we can get into situations in which\r\n\r\n```\r\nunion[list[union[X, Y]], Z]\r\n```\r\n\r\nis not considered equivalent to\r\n\r\n```\r\nunion[list[X], list[Y], Z]\r\n```\r\n\r\nIt would generally be better to have fewer unions than more, so maybe the canonical form should actually be\r\n\r\n```\r\nlist[union[X, Y]] \u2192 union[list[X], list[Y]]\r\n```\r\n\r\n(i.e. prefer moving unions outside of lists, rather than the other way).",
  "created_at":"2023-02-10T21:02:18Z",
  "id":1426341151,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5VBD0f",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-10T21:02:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Here's the result of the brute-force approach: https://gist.github.com/jpivarski/ea00b9269fc77b0c9b8aa7da6111ed62\r\n\r\nThe final set of rules that merges all equivalent types down to depth 3 (depth 2 for unions of 3 contents) is:\r\n\r\n  1. Apply the canonization rules recursively to lists and unions.\r\n  2. Rewrite `list[union[X, Y, ...]] \u2192 union[list[X], list[Y], ...]` (unions always go outside of lists).\r\n  3. Rewrite `union[X, union[Y, Z, ...], ...] \u2192 union[X, Y, Z, ...]` (flatten unions of unions).\r\n  4. Rewrite `union[X] \u2192 X` (no single-content unions).\r\n\r\nWe're already applying 1, 3, and 4. The new rule would be 2, which is the only one that has any interaction between lists and unions. And unlike what I said above, it would move the union _outside_ of any lists, rather than inside.\r\n\r\nIf we moved the union _inside_ of lists, then we would have to add additional rules to handle cases like\r\n\r\n```\r\nunion[list[union[X, Y]], Z]\r\n```\r\n\r\n(i.e. a rule that would have to look at 3 levels). I wouldn't have noticed that without doing the brute-force search, so even though it's not a mathematical proof, it was useful to do.\r\n\r\nI _think_ it would also be easier to implement in Awkward Array, too. Also, @ivirshup's point is a good one,\r\n\r\n> I would imagine that `union[var * x, var * y]` is more efficient that `var * union[x, y]`. With `var * union[...]` you end up with large index arrays for the union, and much more frequent branching during execution.\r\n\r\nwe would generally get smaller `UnionArray.index` buffers this way, as long as the average list length is greater than 1.\r\n\r\n-----------------------------\r\n\r\nThinking about how this would be implemented, I realize now that it's a big change. We wouldn't need to touch `ak.merge_union_of_records` or `UnionArray.simplified`, but we would need to _add_ a `ListArray.simplified` (for all the list types), which check to see if the `content` is a `UnionArray` and would return a union of lists instead.\r\n\r\nThe hard part is that all of the list-constructors of unknown `content` would have to be replaced by this `simplified` constructor, and subsequent code couldn't assume that it has a list-type. We did that for all of the `UnionArray` constructors, but lists are much more widespread.\r\n\r\nSo for instance, the list-constructor in\r\n\r\n```python\r\n>>> ak.from_regular(ak.Array([1, 2, 3, \"a\", \"b\"])[np.newaxis], axis=1)\r\n<Array [[1, 2, 3, 'a', 'b']] type='1 * var * union[int64, string]'>\r\n```\r\n\r\nwould have to be sensitive to the fact that the new list could contain a union and have to bubble the union out, to make type `1 * union[var * int64, var * string]`.\r\n\r\nIn fact,\r\n\r\n```python\r\n>>> ak.unflatten([1, 2, 3, \"a\", \"b\"], [3, 0, 2])\r\n<Array [[1, 2, 3], [], ['a', 'b']] type='3 * var * union[int64, string]'>\r\n```\r\n\r\nOh, wait a minute\u2014\r\n\r\n```python\r\n>>> ak.unflatten([1, 2, 3, \"a\", \"b\"], [2, 0, 3])\r\n<Array [[1, 2], [], [3, 'a', 'b']] type='3 * var * union[int64, string]'>\r\n```\r\n\r\nThis _can't_ be converted into a `3 * union[var * int64, var * string]` because that assumes that no list contains both integers and strings. And that's a value-dependent distinction\u2014a type-tracer could never know whether it can do that or not.\r\n\r\nSo unions _can't_ (in general) be bubbled out of lists. It _has to_ go the other way.\r\n\r\nBack to the drawing board...",
  "created_at":"2023-02-10T22:24:50Z",
  "id":1426418542,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5VBWtu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-10T22:24:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, so this has been a long, strange trip, but in the end, I think there's _nothing that needs to be changed_ (in `UnionArray.simplified`, at least; we'll come back to `ak.merge_union_of_records` later, which is what this issue was originally about).\r\n\r\nSuppose that we have this type:\r\n\r\n```\r\nunion[list[X], list[Y]]\r\n```\r\n\r\n_If_ we were to convert it into `list[union[X, Y]]`, that that would be _losing_ information. A union of list-types is saying that the contents of each (instance value) list can't be mixed, but a list of union-type is saying that each (instance value) list could be mixed.\r\n\r\nSuppose that we have this type:\r\n\r\n```\r\nlist[union[X, Y]]\r\n```\r\n\r\nWe can't convert it into `union[list[X], list[Y]]` at all because the list boundaries might not line up to give homogeneous `X` in some lists and homogeneous `Y` in other lists. Even if that's possible, it would be an instance value-dependent question, not something that can be applied to arrays in general (it would be impossible for typetracers and therefore Dask).\r\n\r\nSo at the very least, a user needs to be involved in deciding to do the information-losing operation (just as `ak.merge_union_of_records` exists to perform an information-losing operation). I don't think it should be the same function because the word \"list\" isn't anywhere in its name.\r\n\r\nSo if this is really needed, it can only go in one direction, and it would need to be yet another library function. Since it's invoked by a user, it doesn't need any deprecation cycle.\r\n\r\nSorry about the run-around! In the end, it has an objective answer\u2014it just took me a long time to see it.",
  "created_at":"2023-02-10T22:42:16Z",
  "id":1426435928,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5VBa9Y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-10T22:42:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Interesting to see the process here! But yeah, it makes a ton of sense that you can't do:\r\n\r\n> `list[union[X, Y]] \u2192 union[list[X], list[Y]]`\r\n\r\nBut is this what you're referring to here: \r\n\r\n> So if this is really needed, it can only go in one direction, and it would need to be yet another library function. Since it's invoked by a user, it doesn't need any deprecation cycle.\r\n\r\nor was it `ak.merge_union_of_records`? Since to me this is going in the opposite direction of `ak.merge_union_of_records`.\r\n\r\n------------\r\n\r\n> We're finding these now because you're evidently focusing a lot on unions.\r\n\r\nI'm really focussing a lot on concatenation. It's just that concatenation is giving us unions and we're trying to eliminate them.",
  "created_at":"2023-02-13T11:50:59Z",
  "id":1427810477,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5VGqit",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T11:50:59Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski another option is that rewriting\r\n```\r\nunion[list[X], list[Y]] \u2192 list[union[X, Y]]\r\n```\r\nsupport non-list types, e.g.\r\n```\r\nunion[list[X], U, list[Y], V] \u2192 union[list[X], list[Y], U, V] \u2192 union[list[union[X, Y]], U, V]\r\n```\r\n\r\nI don't initially think it's better; yes, we identify an equivalence relation, but we now have two unions. It's also possible that this introduces a new equivalence somehow; I haven't given it much thought.\r\n\r\nSo, with that said, @ivirshup I think Jim's suggestion is that we have a _separate_ function that performs `union[list[X], list[Y]] \u2192 list[union[X, Y]]` such that a subsequent application of `merge_union_of_records` would work in your example.\r\n```\r\n1) Union[List[Record[a: ..., b: ...]], List[Record[a: ...]]]\r\n# `merge_union_of_lists`\r\n2) List[Union[Record[a: ..., b: ...], Record[a: ...]]]\r\n# `merge_union_of_records`\r\n3) List[Record[a: ..., b: ?...]]\r\n```",
  "created_at":"2023-02-13T13:24:44Z",
  "id":1427939947,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5VHKJr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T14:22:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm working on this feature [here](https://github.com/scikit-hep/awkward/pull/2235). ",
  "created_at":"2023-02-13T14:20:58Z",
  "id":1428020793,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5VHd45",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T14:20:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's right. If this is really needed, it should be a separate function from `ak.merge_union_as_records`. As you pointed it, it's seemingly going in the other direction, but perhaps more importantly, the name \"merge union as records\" doesn't mention lists, and here we're talking about an interaction between unions and lists.\r\n\r\nLet's move this discussion to #2235.",
  "created_at":"2023-02-13T14:30:43Z",
  "id":1428037176,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5VHh44",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T14:30:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ivirshup I wanted to follow up on #2267 here; we will be performing a final patch release of the `awkward==2.0.*` series soon. It would be useful to know whether your use case is addressed sufficiently by this new function in conjunction with `ak.concatenate`. \r\n\r\nAn example usage is:\r\n```python3\r\nx, y, z = ak.broadcast_fields(x, y, z)\r\nw = ak.concatenate([x, y, z], axis=0)\r\n```\r\n\r\nDo let me know if you get a chance to try it out; I would love to hear your findings! :)",
  "created_at":"2023-03-01T22:50:39Z",
  "id":1450972094,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5WfBO-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-01T22:51:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"I think I can take a look in ~a week or so. Is this feature going to be in that release by then or on the main branch?",
  "created_at":"2023-03-03T13:54:21Z",
  "id":1453565450,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5Wo6YK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-03T13:54:21Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"It will be in a release by a week from now. In fact, maybe I should make a patch release now.",
  "created_at":"2023-03-03T18:59:46Z",
  "id":1453975534,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5Wqefu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-03T18:59:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"https://github.com/scikit-hep/awkward/releases/tag/v2.0.9",
  "created_at":"2023-03-03T19:03:57Z",
  "id":1453983128,
  "issue":2211,
  "node_id":"IC_kwDODBCWws5WqgWY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-03T19:03:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Gah, this is the reason for doctests. I made a last minute change here. Thanks for catching it!",
  "created_at":"2023-02-06T15:33:59Z",
  "id":1419279803,
  "issue":2212,
  "node_id":"IC_kwDODBCWws5UmH27",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-06T15:33:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Any idea why codecov didn't run?\r\n\r\nI think it would be fine to skip that check if it didn't trigger because of a fluke. This change does not require all of the tests to run again; you can click the red checkmark to merge this PR without all of the tests running.",
  "created_at":"2023-02-06T16:50:18Z",
  "id":1419399618,
  "issue":2213,
  "node_id":"IC_kwDODBCWws5UmlHC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-06T16:50:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2213?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2213](https://codecov.io/gh/scikit-hep/awkward/pull/2213?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c44fec4) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/20b3da8760ef6e23c3fe9fd03447a7c881543fd2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (20b3da8) will **decrease** coverage by `0.06%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2213?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2213?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `88.70% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2213?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-07T09:45:09Z",
  "id":1420480106,
  "issue":2213,
  "node_id":"IC_kwDODBCWws5Uqs5q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T09:45:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"You're right that `pickle.dump()` would pack an array. If you want to share a reproducer that does not pass through `ak.to_packed`, you can pickle the result of `ak.to_buffers`. That function decomposes the array into atoms (buffers, form, length) that can be pickled safely.\r\n\r\nThe indexing behaviour in Awkward is driven by the index array's structure, so that's what I'm looking at in order to identify whether this is a bug or a usage issue.\r\n\r\nThe cause of this bug is that the list that wraps the boolean array has offsets that don't start at zero. This is allowed, but sometimes we make assumptions that do not hold true.",
  "created_at":"2023-02-07T10:31:46Z",
  "id":1420548144,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5Uq9gw",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-07T10:31:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Thanks for the explanation and the quick fix! I will keep `to_buffers` in mind for next time",
  "created_at":"2023-02-07T15:38:52Z",
  "id":1420981775,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5UsnYP",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-07T15:38:52Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Using cbc2c4d337fd7ba25f52f27fc3fa76cb93c60af7, I believe I found another instance of this issue. This time, the array is masked to be fully empty. I managed to pickle it with `ak.to_buffers` ([here](https://github.com/scikit-hep/awkward/files/10737145/boolean_index_matching.pkl.zip)), and the layout is below:\r\n\r\n```python\r\nIn [4]: hybrid_to_det_level_valid_matches.layout\r\nOut[4]:\r\n<IndexedArray len='0'>\r\n    <index><Index dtype='int64' len='0'>\r\n        []\r\n    </Index></index>\r\n    <content><ListOffsetArray len='183'>\r\n        <offsets><Index dtype='int64' len='184'>\r\n            [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n             0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n             ...\r\n             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\r\n        </Index></offsets>\r\n        <content><NumpyArray dtype='bool' len='2'>[False False]</NumpyArray></content>\r\n    </ListOffsetArray></content>\r\n</IndexedArray>\r\n```\r\n\r\nBased on your comments in the PR, I guess this is an instance of additional bugs popping up. Could you please take a look? Thanks!",
  "created_at":"2023-02-14T21:52:02Z",
  "id":1430423785,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5VQojp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-14T21:52:02Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Could you clarify what isn't working with this array? What operation are you performing that is failing, or producing unexpected results? :)",
  "created_at":"2023-02-15T08:16:24Z",
  "id":1430921255,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5VSiAn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T08:16:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Sorry, this wasn't my best bug report - was moving too quickly :-)\r\n\r\nI'm doing some matching between three different collections of jets (the matching itself is done with numba). I build up a mask to remove jets, and then for the remaining jets, I want to assign the index of the matched jets to a particular field. The relevant code looks like this (including for completeness, but I'm not sure it will be meaningful):\r\n\r\n```python\r\n    # Convention is -1 is a match, anything else is an index\r\n    jets[\"part_level\", \"matching\"] = matching_indices_1\r\n    jets[\"det_level\", \"matching\"] = matching_indices_2\r\n    jets[\"hybrid\", \"matching\"] = matching_indices_3\r\n   \r\n    # Mask out event if there are no jets\r\n    jets_present_mask = (\r\n        (ak.num(jets[\"part_level\"], axis=1) > 0)\r\n        & (ak.num(jets[\"det_level\"], axis=1) > 0)\r\n        & (ak.num(jets[\"hybrid\"], axis=1) > 0)\r\n    )\r\n    jets = jets[jets_present_mask]\r\n\r\n    # Assign indices\r\n    hybrid_to_det_level_valid_matches = jets[\"hybrid\", \"matching\"] > -1\r\n    det_to_part_level_valid_matches = jets[\"det_level\", \"matching\"] > -1\r\n    # Index error thrown on the next line!\r\n    hybrid_to_det_level_including_det_to_part_level_valid_matches = det_to_part_level_valid_matches[\r\n        jets[\"hybrid\", \"matching\"][hybrid_to_det_level_valid_matches]\r\n    ]\r\n```\r\n\r\nSometimes `hybrid_to_det_level_valid_matches` ends up being empty because there are not many jets in the first place, and they all get masked out. That was fine in awkward 1.x, but in awkward 2.x with the fix for this issue, I still receive the same IndexError:\r\n\r\n```python\r\nFile ~/software/dev/mammoth/src/mammoth/framework/analysis/jets.py:167, in jet_matching_embedding(jets, det_level_hybrid_max_matching_distance, part_level_det_level_max_matching_distance)\r\n    165 import IPython; IPython.embed()\r\n    166 #ak.to_buffers(hybrid_to_det_level_valid_matches)\r\n--> 167 logger.warning(f'{jets[\"hybrid\", \"matching\"][hybrid_to_det_level_valid_matches]}')\r\n    168 hybrid_to_det_level_including_det_to_part_level_valid_matches = det_to_part_level_valid_matches[\r\n    169     jets[\"hybrid\", \"matching\"][hybrid_to_det_level_valid_matches]\r\n    170 ]\r\n    171 # First, restrict the hybrid level, requiring hybrid to det_level valid matches and\r\n    172 # det_level to part_level valid matches.\r\n\r\nFile ~/software/dev/mammoth/.venv/lib/python3.10/site-packages/awkward/highlevel.py:951, in Array.__getitem__(self, where)\r\n    522 \"\"\"\r\n    523 Args:\r\n    524     where (many types supported; see below): Index of positions to\r\n   (...)\r\n    948 have the same dimension as the array being indexed.\r\n    949 \"\"\"\r\n    950 with ak._errors.SlicingErrorContext(self, where):\r\n--> 951     out = self._layout[where]\r\n    952     if isinstance(out, ak.contents.NumpyArray):\r\n    953         array_param = out.parameter(\"__array__\")\r\n\r\nFile ~/software/dev/mammoth/.venv/lib/python3.10/site-packages/awkward/contents/content.py:531, in Content.__getitem__(self, where)\r\n    530 def __getitem__(self, where):\r\n--> 531     return self._getitem(where)\r\n\r\nFile ~/software/dev/mammoth/.venv/lib/python3.10/site-packages/awkward/contents/content.py:576, in Content._getitem(self, where)\r\n    573         return out._getitem_at(0)\r\n    575 elif isinstance(where, ak.highlevel.Array):\r\n--> 576     return self._getitem(where.layout)\r\n    578 # Convert between nplikes of different backends\r\n    579 elif (\r\n    580     isinstance(where, ak.contents.Content)\r\n    581     and where.backend is not self._backend\r\n    582 ):\r\n\r\nFile ~/software/dev/mammoth/.venv/lib/python3.10/site-packages/awkward/contents/content.py:655, in Content._getitem(self, where)\r\n    652     return where.to_NumpyArray(np.int64)\r\n    654 elif isinstance(where, Content):\r\n--> 655     return self._getitem((where,))\r\n    657 elif ak._util.is_sized_iterable(where):\r\n    658     # Do we have an array\r\n    659     nplike = ak._nplikes.nplike_of(where, default=None)\r\n\r\nFile ~/software/dev/mammoth/.venv/lib/python3.10/site-packages/awkward/contents/content.py:557, in Content._getitem(self, where)\r\n    554     return self\r\n    556 # Normalise valid indices onto well-defined basis\r\n--> 557 items = ak._slicing.normalise_items(where, self._backend)\r\n    558 # Prepare items for advanced indexing (e.g. via broadcasting)\r\n    559 nextwhere = ak._slicing.prepare_advanced_indexing(items)\r\n\r\nFile ~/software/dev/mammoth/.venv/lib/python3.10/site-packages/awkward/_slicing.py:260, in normalise_items(where, backend)\r\n    258 common_backend = ak._backends.common_backend([backend, where_backend])\r\n    259 # First prepare items for broadcasting into like-types\r\n--> 260 return [normalise_item(x, backend=common_backend) for x in where]\r\n\r\nFile ~/software/dev/mammoth/.venv/lib/python3.10/site-packages/awkward/_slicing.py:260, in <listcomp>(.0)\r\n    258 common_backend = ak._backends.common_backend([backend, where_backend])\r\n    259 # First prepare items for broadcasting into like-types\r\n--> 260 return [normalise_item(x, backend=common_backend) for x in where]\r\n\r\nFile ~/software/dev/mammoth/.venv/lib/python3.10/site-packages/awkward/_slicing.py:205, in normalise_item(item, backend)\r\n    203 # Ragged indexing should be performed with integer contents\r\n    204 elif isinstance(item, ak.contents.Content):\r\n--> 205     out = _normalise_item_bool_to_int(_normalise_item_nested(item), backend)\r\n    206     assert out.backend is backend\r\n    207     if isinstance(out, ak.contents.NumpyArray):\r\n\r\nFile ~/software/dev/mammoth/.venv/lib/python3.10/site-packages/awkward/_slicing.py:445, in _normalise_item_bool_to_int(item, backend)\r\n    443 item = item.to_ListOffsetArray64(True)\r\n    444 localindex = ak._do.local_index(item, axis=1)\r\n--> 445 nextcontent = localindex.content.data[item.content.data]\r\n    447 cumsum = item_backend.index_nplike.empty(\r\n    448     item.content.data.shape[0] + 1, dtype=np.int64\r\n    449 )\r\n    450 cumsum[0] = 0\r\n\r\nIndexError: boolean index did not match indexed array along dimension 0; dimension is 0 but corresponding boolean dimension is 2\r\n```\r\n\r\n(note that I added a log message for debugging in this stack track just as I was trying to isolate the issue)\r\n\r\nI guess this was happening before, but I didn't see it because it threw the IndexError that I originally reported (and it's somewhat rarer). I recognize that having the mask become an empty array is a bit of an edge case, but this worked for awkward 1.x, so I was expecting it to work for 2.x . Also, when I tried `ak.to_packed` on `hybrid_to_det_level_valid_matches`, it also seemed okay, although I didn't follow this through entirely.\r\n\r\nIn summary, this appears to be the same issue, but yeah, I don't think I included enough details in my follow up :-) Hopefully this is clearer!",
  "created_at":"2023-02-15T18:18:29Z",
  "id":1431810680,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5VV7J4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T18:19:37Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Although I can't reproduce your particular bug without any data, I can see that there is a bug in that region of code, so I've made a PR that I think would address it #2246. You're welcome to try out that branch, by cloning it and following the instructions for installing Awkward from [the README](https://github.com/scikit-hep/awkward/blob/main/README.md#installation-for-developers), or wait until a release! Alternatively, feel free to provide a reproducer that I can include in our test suite :)",
  "created_at":"2023-02-15T21:29:00Z",
  "id":1432058372,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5VW3oE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T21:29:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Sorry, I'm a bit confused - did the pickle that I posted via `ak.to_buffers` not reproduce the issue? ([linked again here](https://github.com/scikit-hep/awkward/files/10737145/boolean_index_matching.pkl.zip)). I'm also willing to test it - I'm just confused.\r\n\r\nEdit: ah, do you need the array I was trying to apply it to as well? I'm happy to provide something to put into the test suite as long as I can reasonably disentangle it. Thanks for your help!",
  "created_at":"2023-02-15T21:31:01Z",
  "id":1432060666,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5VW4L6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T21:34:59Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Edit: ah, do you need the array I was trying to apply it to as well? I'm happy to provide something to put into the test suite as long as I can reasonably disentangle it. Thanks for your help!\r\n\r\nThat's it! If this line is failing\r\n```python\r\njets[\"hybrid\", \"matching\"][hybrid_to_det_level_valid_matches]\r\n```\r\nthen I just need these two arrays:\r\n```python\r\nimport pickle\r\n\r\narray = jets[\"hybrid\", \"matching\"]\r\nindex = hybrid_to_det_level_valid_matches\r\n\r\nraw_data = [\r\n\tak.to_buffers(array),\r\n\tak.to_buffers(index)\r\n]\r\nwith open(\"debug.pickle.zip\", \"wb\") as f:\r\n\tpickle.dump(raw_data, f)\r\n```",
  "created_at":"2023-02-15T21:36:58Z",
  "id":1432069456,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5VW6VQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T21:36:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Sorry that I overlooked this point, and thanks for bearing with me - I'm in a conference rush and didn't think this through :-)\r\n\r\nHere is the pickle as requested: [debug.pickle.zip](https://github.com/scikit-hep/awkward/files/10748073/debug.pickle.zip)\r\n",
  "created_at":"2023-02-15T21:42:21Z",
  "id":1432075872,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5VW75g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T21:42:21Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"No stress! It was enough to start looking, and we can always just ask for more information when things like this happen anyway :)",
  "created_at":"2023-02-15T22:13:47Z",
  "id":1432116142,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5VXFuu",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-15T22:13:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, it looks like `from_buffers` doesn't read the unused data, so it's not possible to debug your problem using these data. Could you try this build of Awkward?\r\n\r\n[awkward-2.0.8a0-py3-none-any.whl.zip](https://github.com/scikit-hep/awkward/files/10748596/awkward-2.0.8a0-py3-none-any.whl.zip)\r\n\r\n",
  "created_at":"2023-02-15T22:34:06Z",
  "id":1432156420,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5VXPkE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T22:34:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Excellent, that fixed it! Thanks!\r\n\r\nIn terms of data for the test suit, below is the layout of the arrays, drilling down into them to expose (all of?) the data. I'm not sure if this is useful, but it's here for completeness. If there's another way to extract the arrays for tests, I'm also happy to provide it - just let me know\r\n\r\n```python\r\nIn [2]: hybrid_to_det_level_valid_matches.layout\r\nOut[2]:\r\n<IndexedArray len='0'>\r\n    <index><Index dtype='int64' len='0'>\r\n        []\r\n    </Index></index>\r\n    <content><ListOffsetArray len='183'>\r\n        <offsets><Index dtype='int64' len='184'>\r\n            [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n             0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n             ...\r\n             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\r\n        </Index></offsets>\r\n        <content><NumpyArray dtype='bool' len='2'>[False False]</NumpyArray></content>\r\n    </ListOffsetArray></content>\r\n</IndexedArray>\r\n\r\nIn [3]: hybrid_to_det_level_valid_matches.layout.content\r\nOut[3]:\r\n<ListOffsetArray len='183'>\r\n    <offsets><Index dtype='int64' len='184'>\r\n        [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n         ...\r\n         2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n         2 2 2 2 2 2 2 2 2]\r\n    </Index></offsets>\r\n    <content><NumpyArray dtype='bool' len='2'>[False False]</NumpyArray></content>\r\n</ListOffsetArray>\r\n\r\nIn [4]: hybrid_to_det_level_valid_matches.layout.content.offsets\r\nOut[4]:\r\n<Index dtype='int64' len='184'>\r\n    [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n     0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n     2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n     2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\r\n</Index>\r\n\r\nIn [5]: jets[\"hybrid\", \"matching\"].layout\r\nOut[5]:\r\n<IndexedArray len='0'>\r\n    <index><Index dtype='int64' len='0'>\r\n        []\r\n    </Index></index>\r\n    <content><ListOffsetArray len='183'>\r\n        <offsets><Index dtype='int64' len='184'>\r\n            [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n             0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n             ...\r\n             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n             2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\r\n        </Index></offsets>\r\n        <content><NumpyArray dtype='int64' len='2'>[-1 -1]</NumpyArray></content>\r\n    </ListOffsetArray></content>\r\n</IndexedArray>\r\n\r\nIn [6]: jets[\"hybrid\", \"matching\"].layout.content.offsets\r\nOut[6]:\r\n<Index dtype='int64' len='184'>\r\n    [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n     0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n     2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n     2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\r\n</Index>\r\n```",
  "created_at":"2023-02-15T22:43:30Z",
  "id":1432171375,
  "issue":2214,
  "node_id":"IC_kwDODBCWws5VXTNv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T22:43:30Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2215](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ecd8c24) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6b499600342dcb6123fbbfe366e213655001989e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6b49960) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/jax/reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3JlZHVjZXJzLnB5) | `82.26% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/trees.py](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3RyZWVzLnB5) | `91.89% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.39% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `74.42% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.84% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.34% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.97% <\u00f8> (\u00f8)` | |\n| ... and [16 more](https://codecov.io/gh/scikit-hep/awkward/pull/2215?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-07T23:00:31Z",
  "id":1421586740,
  "issue":2215,
  "node_id":"IC_kwDODBCWws5Uu7E0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T15:01:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski are you happy to upgrade black here? (I am)",
  "created_at":"2023-02-13T10:18:03Z",
  "id":1427680709,
  "issue":2215,
  "node_id":"IC_kwDODBCWws5VGK3F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T10:18:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2216?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2216](https://codecov.io/gh/scikit-hep/awkward/pull/2216?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (86f42dc) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/339896fbdf780fba0fb426bed1059d04128da0a9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (339896f) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2216?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2216?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `88.70% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2216?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `88.88% <100.00%> (+0.04%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-07T12:28:32Z",
  "id":1420694039,
  "issue":2216,
  "node_id":"IC_kwDODBCWws5UrhIX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T12:28:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> One way to do it, which minimizes effort, is to promise less. If the link to the 1.10 documentation is not a switcher that promises to transform any modern page into an old page, but instead a single link to the most important page in the old docs:\r\n\r\nYes, I don't think we need to preserve v1 visibility. I'll add a banner, or some such thing.\r\n\r\n> Unrelated to that, can we have the numbered versions be in descending order? The top to switcher items are the latest documentation; it would be more natural if the numbered/older versions don't switch sort direction. We would have noticed that when 2.1.0 is released. Which reminds me, that has to happen this week.\r\n\r\nGood suggestion, I'll make that change here.",
  "created_at":"2023-02-07T16:55:06Z",
  "id":1421100429,
  "issue":2217,
  "node_id":"IC_kwDODBCWws5UtEWN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T16:55:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I should add that we definitely would have gotten complaints that our documentation is broken if someone tries to select 1.10 and gets a 404 page. The idea that the page they want exists under a different URL, which can be found by navigating from the main-1.10 page, would not be most people's first thought.\r\n\r\nBut if there's a small banner on the homepage that requires them to navigate to what they want, that would do it. (It shouldn't be inline with the badges, which have no more horizontal space and address very different topics from \"this documentation, but older.\" I think the best place is under the four big panels. If users don't find it right away, we can point them to it.)",
  "created_at":"2023-02-07T17:05:56Z",
  "id":1421116967,
  "issue":2217,
  "node_id":"IC_kwDODBCWws5UtIYn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T17:05:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not sure whether the theme supports using a version selector with versions that aren't included in the `switcher.json`. If that happens, i.e. the switcher breaks on `1.10.X`, then we can just remove the switcher, and add a banner. In fact, that's what I'll do.",
  "created_at":"2023-02-07T17:14:08Z",
  "id":1421133838,
  "issue":2217,
  "node_id":"IC_kwDODBCWws5UtMgO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T17:14:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"![image](https://user-images.githubusercontent.com/1248413/217320350-296856cc-87d6-4514-81af-30f2355bee48.png)\r\n\r\nThoughts?",
  "created_at":"2023-02-07T17:31:32Z",
  "id":1421165931,
  "issue":2217,
  "node_id":"IC_kwDODBCWws5UtUVr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T17:31:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Note that for the next minor release, we need to manually edit `switcher.json` for now; we don't yet have a fully automated versioning workflow.",
  "created_at":"2023-02-07T17:35:27Z",
  "id":1421172465,
  "issue":2217,
  "node_id":"IC_kwDODBCWws5UtV7x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T17:35:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I like this solution, graphically as well as logically. But could it instead go to this link?\r\n\r\nhttps://awkward-array.org/doc/1.10/api-reference.html\r\n\r\nThat's the only useful link on the existing page, and the way it's formatted, it's not clear that this is the one to go for. Having the banner go to the above will help a lot.",
  "created_at":"2023-02-07T17:43:58Z",
  "id":1421188778,
  "issue":2217,
  "node_id":"IC_kwDODBCWws5UtZ6q",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-07T17:43:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Perfect! And now they can do v1 documentation in dark mode.  `:)`",
  "created_at":"2023-02-07T21:21:01Z",
  "id":1421468009,
  "issue":2217,
  "node_id":"IC_kwDODBCWws5UueFp",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-02-07T21:21:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2218?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2218](https://codecov.io/gh/scikit-hep/awkward/pull/2218?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3a7dec8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/339896fbdf780fba0fb426bed1059d04128da0a9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (339896f) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2218?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2218?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `88.70% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-07T11:56:39Z",
  "id":1420653945,
  "issue":2218,
  "node_id":"IC_kwDODBCWws5UrXV5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T11:56:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Sounds like a terrible review, doesn't it?\r\n\r\nHaha, sometimes less is more!",
  "created_at":"2023-02-07T17:05:36Z",
  "id":1421116292,
  "issue":2218,
  "node_id":"IC_kwDODBCWws5UtIOE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T17:05:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2219?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2219](https://codecov.io/gh/scikit-hep/awkward/pull/2219?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (133781b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/339896fbdf780fba0fb426bed1059d04128da0a9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (339896f) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2219?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_flatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/2219?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mbGF0dGVuLnB5) | `92.50% <\u00f8> (\u00f8)` | |\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2219?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `88.70% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2219?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.00% <100.00%> (+1.04%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-07T12:12:29Z",
  "id":1420674400,
  "issue":2219,
  "node_id":"IC_kwDODBCWws5UrcVg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T12:12:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It seems to be _entirely_ in `ak.flatten` and `ak.ravel`:\r\n\r\n```\r\n% fgrep -r '._remove_structure(' src/awkward\r\nsrc/awkward/contents/bitmaskedarray.py:            return self.project()._remove_structure(backend, options)\r\nsrc/awkward/contents/listarray.py:        return self.to_ListOffsetArray64(False)._remove_structure(backend, options)\r\nsrc/awkward/contents/unmaskedarray.py:            return self.project()._remove_structure(backend, options)\r\nsrc/awkward/contents/indexedarray.py:        return self.project()._remove_structure(backend, options)\r\nsrc/awkward/contents/unionarray.py:                ._remove_structure(backend, options)\r\nsrc/awkward/contents/listoffsetarray.py:            contents = content._remove_structure(backend, options)\r\nsrc/awkward/contents/indexedoptionarray.py:            return self.project()._remove_structure(backend, options)\r\nsrc/awkward/contents/bytemaskedarray.py:            return self.project()._remove_structure(backend, options)\r\nsrc/awkward/contents/regulararray.py:            contents = content._remove_structure(backend, options)\r\nsrc/awkward/contents/recordarray.py:                out.extend(content[: self._length]._remove_structure(backend, options))\r\nsrc/awkward/_do.py:        arrays = layout._remove_structure(\r\n```\r\n\r\n```\r\n% fgrep -r 'do.remove_structure(' src/awkward\r\nsrc/awkward/operations/ak_flatten.py:        out = ak._do.remove_structure(layout, function_name=\"ak.flatten\")\r\nsrc/awkward/operations/ak_ravel.py:    out = ak._do.remove_structure(layout, function_name=\"ak.ravel\", drop_nones=False)\r\n```",
  "created_at":"2023-02-07T17:27:18Z",
  "id":1421158209,
  "issue":2219,
  "node_id":"IC_kwDODBCWws5UtSdB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T17:27:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Both of them send the result to `mergemany` and nothing else. `mergemany` can handle `EmptyArray`, so there's no issue there.",
  "created_at":"2023-02-07T17:28:19Z",
  "id":1421159589,
  "issue":2219,
  "node_id":"IC_kwDODBCWws5UtSyl",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-07T17:28:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think my wording could have been better here; I am generally hesitant to change anything that we likely are making assumptions about. I did the same checks you did to be as confident as possible. I am glad you found the same results! (occasionally I have missed something like this despite thinking otherwise!)",
  "created_at":"2023-02-07T17:38:00Z",
  "id":1421175874,
  "issue":2219,
  "node_id":"IC_kwDODBCWws5UtWxC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T17:38:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2220](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (caa54b9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/cb1900154c7bf196d221985c6d1bb465e707208b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cb19001) will **increase** coverage by `0.02%`.\n> The diff coverage is `87.11%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.34% <71.42%> (-0.09%)` | :arrow_down: |\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `87.40% <73.68%> (-1.13%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `74.87% <75.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.83% <75.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.16% <75.00%> (-0.04%)` | :arrow_down: |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.14% <75.00%> (-0.06%)` | :arrow_down: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `73.06% <75.00%> (-0.22%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `74.90% <76.92%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.42% <80.00%> (-0.06%)` | :arrow_down: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.19% <83.33%> (\u00f8)` | |\n| ... and [10 more](https://codecov.io/gh/scikit-hep/awkward/pull/2220?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-07T13:20:57Z",
  "id":1420766716,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5Ury38",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T19:04:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray a fix for your `RecordArray.content()` `AssertionError` is included here.",
  "created_at":"2023-02-08T11:43:56Z",
  "id":1422464281,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5UyRUZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-08T11:43:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We didn't have enough time to properly cover this earlier, so let's have that discussion async here?\r\n\r\nI'll start by summarising where we are / why we're here.\r\n\r\n## Use of `None` to mean `unknown-length`\r\nIn #2154 I started removing `UnknownLength` and `UnknownScalar`. This was premature; we _need_ a distinction between  \"Unknown length\" and \"Unknown Array\"\r\n  - Don't care about type information for unknown length\r\n  - Don't want recursive \"array's size is an array\" phenomenon; all known NumPy-like modules return `tuple[int, ...]` for array shapes\r\n\r\nWe chose `None` because:\r\n- It natively serialises to JSON\r\n- It's a natural singleton\r\n- It is used by the Array API for \"unknown length\" meaning\r\n\r\nNone of these are hard constraints, for various reasons.\r\n\r\nThe current approach in Awkward is to use `nplike` functions to manipulate array shapes. If we didn't use `None`, we could move some of these functions (`add_shape_item`, etc.) into magic methods on the `unknown-length` singleton.\r\n\r\n\r\n## Disinguishing `index` from `unknown-scalar`\r\nIndices in Awkward can come from two places:\r\n- constants, e.g. `array[1:4]`. These are Python integers, or objects that implement `__index__`.\r\n- arrays, e.g. `array[x.argmin()]`. Kernels might return these as 0-D arrays.\r\n\r\nLet's imagine that arrays only ever return 0D arrays for constants.[^not-true]\r\n\r\nIn typetracer, the 0D-scalar array can _never_ have known content, so we *must* accept some kind of concrete type for constant indices. I assert that we should use Python integers for this. So, that's what this PR does; it introduces the \"concept\" of an index, which is practically just `int | Arraylike(shape=())`. It is a superset of the array-value indices, which are just 0D arrays.\r\n\r\nWe need to be more explicit about when we're talking about lengths and when we're talking about indices in my opinion:\r\n- We don't want `_getitem_XXX` to need to handle three different types `(int, nplike-scalar, unknown-length)`. We should only be passing around the index-types of `(int, nplike-scalar)` for slicing etc.\r\n- We don't want to pass in `nplike-scalar` to an nplike shape, e.g. `nplike.zeros(numnull)` where `numnull` is computed by a kernel\r\n\r\nBy this rationale, I think we want to be converting lengths to indexes eagerly and explicitly. This would be done via `nplike.shape_item_as_index`, and `nplike.index_as_shape_item`. i.e., indexing routines like `_getitem_at` should expect `int` or `nplike-scalar`.\r\n\r\n## Conclusion\r\n\r\nAt this stage, we've discussed two orthogonal things:\r\n1. should `unknown-length` be none-`None`, and implement operators to replace `nplike.add_shape_item(x, y)` with `x + y`?\r\n2. should we be explicit about what is a length and what is an index?\r\n\r\nIt's my view that we need (2). (1) is less set in stone.\r\n\r\n[^not-true]: this is not true for NumPy.",
  "created_at":"2023-02-08T16:31:11Z",
  "id":1422902819,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5Uz8Yj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-08T16:38:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Regularizing the different input types for indexes, so that our internal (L3) functions each have fewer types to consider is a good thing. I'm on board with doing that.\r\n\r\nRequiring L2 users to have to think more about this than they otherwise would have to is a problem. We really want to make any public interfaces \"as simple as possible but no simpler.\" If having to pass indexes through regularization functions is required _because of_ unknown `shape` items being `None`, then maybe we should rethink that decision (below).\r\n\r\nWhat happens if an L2 user does not pass an input index through regularization? Does it always raise an exception, only for certain types, or is it a silent error? At least, if we're going to make L2 users do something, the warning bells should always trigger, so that it's not something they learn about in previously working code that hits a new test case. If they don't read all of the documentation, does the library itself indicate when and how they're doing it wrong?\r\n\r\n> We chose `None` because:\r\n> \r\n> * It natively serialises to JSON\r\n> * It's a natural singleton\r\n> * It is used by the Array API for \"unknown length\" meaning\r\n\r\nNone of the above are strong reasons. We could make an \"unknown length\" token that is distinct from `None` and have it serialize to JSON in Forms, possibly to and from JSON `null`. (`Form.from_json` is context-sensitive enough to do this.)\r\n\r\nSo that's why I'm expressing caution. You're more aware of the detailed constraints than I am, so you'll know what the full trade-offs would be, but if introducing a non-`None` unknown length token would eliminate the need for a lot of regularization, particularly at L2, then that would be a better thing to do than to coincide with the Array API.\r\n\r\nWe're not presenting our TypeTracerArrays to the world as a new xarray/cupy/pint/etc. to mix into data analysis (the motivation for Array API). If our TypeTracerArrays, which are very much an instrumental means-to-an-end (even if exposed as L2), differ from the Array API in saying that a shape is\r\n\r\n```python\r\n(unknown_length, 5, 7)\r\n```\r\n\r\ninstead of\r\n\r\n```python\r\n(None, 5, 7)\r\n```\r\n\r\nit would still serve our purposes and be pretty obvious to an L2 user, likely more obvious than \"you need to use these regularization functions before passing it into these other functions\").\r\n\r\nBut finally, this is just a word of caution, not an imperative\u2014if introducing a non-`None` unknown length token wouldn't _actually_ reduce the amount of regularization work that needs to be done, and you conclude that after a hard look at the holistic picture\u2014then go ahead.",
  "created_at":"2023-02-08T17:54:40Z",
  "id":1423018633,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U0YqJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-08T17:54:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, and I meant to mention (remind? it was on another PR) the slice-object case: `None` already has a meaning as an endpoint that can't be fulfilled by any integer, and that meaning is distinct from \"unknown.\" It's only really necessary for slices with `step < 0`,\r\n\r\n```python\r\n>>> s = slice(None, None, -1)\r\n>>> s\r\nslice(None, None, -1)\r\n>>> list(range(10))[s]\r\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\r\n```\r\n\r\nBut that does happen in the codebase (through `_getitem_next`, not `_getitem_range`).\r\n\r\nOur decision to pass around this Python built-in type, `slice`, might have been a mistake. It might have been a better idea to make our own internal `GetItemRange` class, so that such a thing could carry `unknown_length` instead of `None`, or some other way to distinguish \"no endpoint\" from \"unknown endpoint.\"",
  "created_at":"2023-02-08T18:00:02Z",
  "id":1423025404,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U0aT8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-08T18:00:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The issues discussed above are mostly settled with #2229. The issue of proper slice normalisation is open, and I will fix shortly.",
  "created_at":"2023-02-09T12:59:06Z",
  "id":1424155487,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U4uNf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T12:59:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski are you happy with the slice normalisation / expansion logic? Now there's a helper in `_slicing` that ensures we have only index values (`int`, `ArrayLike(shape=())`), whilst the nplike itself  handles the equivalent of `slice.indices`.",
  "created_at":"2023-02-09T16:49:02Z",
  "id":1424499453,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U6CL9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T16:49:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I was thinking, \"We had slice normalization before...\" Well, we had normalization for the things that get passed to `__getitem__`, but now this is additional normalization for actual `slice` objects.\r\n\r\nYes, this looks good. Only one comment, which is not related to the slicing itself: for internal functions (L3 and below), I think it's best to avoid keyword defaults, and then there would be no need for keyword-only arguments. Whereas I think that keywords and keyword-only arguments are great interfaces, non-keyword functions force all the calls to be explicit. (You wouldn't want any functions that use a custom `Backend` to not pass it.)",
  "created_at":"2023-02-09T17:16:01Z",
  "id":1424539485,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U6L9d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T17:16:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski which function has a keyword default? Off the top of my head, I don't remember adding any for the same reasons you give.",
  "created_at":"2023-02-09T17:33:12Z",
  "id":1424561989,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U6RdF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T17:33:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I just want to change `SupportsIndex` usage with `IndexType` now that we have this specced out.",
  "created_at":"2023-02-09T17:34:47Z",
  "id":1424564054,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U6R9W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T17:34:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski which function has a keyword default? Off the top of my head, I don't remember adding any for the same reasons you give.\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/cc97554e297f7dc1a8b508faa23da4e9f610af81/src/awkward/_slicing.py#L26\r\n\r\nand\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/cc97554e297f7dc1a8b508faa23da4e9f610af81/src/awkward/_slicing.py#L40\r\n\r\nThese are L3 because the `_slicing` module is hidden.",
  "created_at":"2023-02-09T17:42:42Z",
  "id":1424575493,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U6UwF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T17:42:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The reason for making _these_ keyword-only is for readability. I'm not strongly opinionated - in this case the benefit is more marginal, but for me it's not the interaction with default arguments that's as useful as being able to understand the meaning of arguments without invoking the IDE hinting / autocomplete. \r\n\r\nIf you don't like this here, let's revert it.",
  "created_at":"2023-02-09T18:20:14Z",
  "id":1424626755,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U6hRD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T18:20:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh! They're keyword-only but don't have defaults. It's the defaults that I considered a problem for internal code.\r\n\r\nThese are fine, though how much can it improve readability? Expressions that get passed into this argument are probably `self._backend`, so how much does `backend=self._backend` help? (I'm going to take another look at the code...) Yeah, it's all `backend=self._backend`.",
  "created_at":"2023-02-09T19:14:31Z",
  "id":1424689532,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U6wl8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T19:14:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, less strong an individual case, more a general habit. This is internal and only used in a few places. Simply for ease, are you happy to merge as is?",
  "created_at":"2023-02-09T19:25:58Z",
  "id":1424701081,
  "issue":2220,
  "node_id":"IC_kwDODBCWws5U6zaZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T19:25:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Huh, this did exist in my local branch at some point \ud83d\ude26 Thanks for catching it!",
  "created_at":"2023-02-07T16:39:16Z",
  "id":1421077443,
  "issue":2221,
  "node_id":"IC_kwDODBCWws5Us-vD",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-07T16:39:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2221?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2221](https://codecov.io/gh/scikit-hep/awkward/pull/2221?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d589582) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2dff3f200ba295027d48f8878aff26146729ff65?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2dff3f2) will **decrease** coverage by `0.01%`.\n> The diff coverage is `66.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2221?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2221?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `41.09% <50.00%> (+0.25%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2221?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `89.02% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-07T16:49:35Z",
  "id":1421092747,
  "issue":2221,
  "node_id":"IC_kwDODBCWws5UtCeL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T17:29:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"As a side note - this problem also appears in awkward `2.0.7` on PyPI as well.",
  "created_at":"2023-02-07T17:14:32Z",
  "id":1421135103,
  "issue":2222,
  "node_id":"IC_kwDODBCWws5UtMz_",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-07T17:14:32Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Related to #2223",
  "created_at":"2023-02-07T17:38:47Z",
  "id":1421177210,
  "issue":2222,
  "node_id":"IC_kwDODBCWws5UtXF6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T17:38:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"FYI with #2223 merged this error still occurs",
  "created_at":"2023-02-07T18:18:21Z",
  "id":1421246303,
  "issue":2222,
  "node_id":"IC_kwDODBCWws5Utn9f",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T18:18:21Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, that PR ended up being split into two parts for review. #2220 should be the one that starts to fix this.",
  "created_at":"2023-02-07T22:08:23Z",
  "id":1421526464,
  "issue":2222,
  "node_id":"IC_kwDODBCWws5UusXA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T22:08:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2223](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (00e0bbb) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/339896fbdf780fba0fb426bed1059d04128da0a9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (339896f) will **increase** coverage by `0.01%`.\n> The diff coverage is `90.71%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `88.70% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.09% <87.50%> (-0.12%)` | :arrow_down: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.45% <87.50%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.93% <87.50%> (-0.14%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.18% <87.50%> (-0.13%)` | :arrow_down: |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.86% <87.50%> (-0.16%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.60% <87.50%> (-0.09%)` | :arrow_down: |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.17% <87.50%> (-0.12%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `73.84% <88.88%> (-0.12%)` | :arrow_down: |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.42% <88.88%> (-0.15%)` | :arrow_down: |\n| ... and [5 more](https://codecov.io/gh/scikit-hep/awkward/pull/2223?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-07T17:19:33Z",
  "id":1421147932,
  "issue":2223,
  "node_id":"IC_kwDODBCWws5UtP8c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T17:19:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2224?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2224](https://codecov.io/gh/scikit-hep/awkward/pull/2224?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1aa9f16) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e12171c8dc392f802504440137598077aecf282e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e12171c) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2224?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends.py](https://codecov.io/gh/scikit-hep/awkward/pull/2224?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzLnB5) | `87.57% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-07T19:40:55Z",
  "id":1421344343,
  "issue":2224,
  "node_id":"IC_kwDODBCWws5Ut_5X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T19:40:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2225?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2225](https://app.codecov.io/gh/scikit-hep/awkward/pull/2225?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bef9325) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e12171c8dc392f802504440137598077aecf282e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e12171c) will **not change** coverage.\n> Report is 433 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-02-07T20:29:27Z",
  "id":1421402692,
  "issue":2225,
  "node_id":"IC_kwDODBCWws5UuOJE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-07T15:42:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@kkothari2001 - please, feel free to take over this :-)",
  "created_at":"2023-02-09T08:44:47Z",
  "id":1423827391,
  "issue":2225,
  "node_id":"IC_kwDODBCWws5U3eG_",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-09T08:44:47Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2226?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2226](https://codecov.io/gh/scikit-hep/awkward/pull/2226?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e8d1623) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/327526d112055121bc6ad4c1ec619d25472cfb7b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (327526d) will **decrease** coverage by `0.01%`.\n> The diff coverage is `81.25%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2226?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2226?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `86.76% <66.66%> (-0.30%)` | :arrow_down: |\n| [src/awkward/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2226?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvcmVndWxhcnR5cGUucHk=) | `89.36% <80.00%> (-1.55%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2226?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.65% <100.00%> (+0.05%)` | :arrow_up: |\n| [src/awkward/forms/regularform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2226?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvcmVndWxhcmZvcm0ucHk=) | `84.52% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-07T22:34:40Z",
  "id":1421564151,
  "issue":2226,
  "node_id":"IC_kwDODBCWws5Uu1j3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-07T22:53:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray would you mind confirming that this fixes your workflow?",
  "created_at":"2023-02-08T01:40:00Z",
  "id":1421811429,
  "issue":2227,
  "node_id":"IC_kwDODBCWws5Uvx7l",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-08T01:40:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Yes this fixes the repro and the more complex actual use case. Thanks!",
  "created_at":"2023-02-08T01:45:18Z",
  "id":1421819789,
  "issue":2227,
  "node_id":"IC_kwDODBCWws5Uvz-N",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-02-08T01:45:18Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2227?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2227](https://codecov.io/gh/scikit-hep/awkward/pull/2227?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (81bb5b8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/69df2f225f706bd6e6e9de5592af6c1fc74b40da?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (69df2f2) will **decrease** coverage by `0.02%`.\n> The diff coverage is `68.96%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2227?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2227?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `87.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2227?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `89.84% <63.63%> (+0.49%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2227?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `74.81% <66.66%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2227?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.92% <72.72%> (-0.04%)` | :arrow_down: |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2227?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `86.60% <100.00%> (-0.40%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-02-08T02:06:18Z",
  "id":1421853149,
  "issue":2227,
  "node_id":"IC_kwDODBCWws5Uv8Hd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T22:15:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski haha, you're quicker than I can grep.",
  "created_at":"2023-02-09T00:01:02Z",
  "id":1423395310,
  "issue":2228,
  "node_id":"IC_kwDODBCWws5U10nu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T00:01:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2228](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7a1e2f6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/cbc2c4d337fd7ba25f52f27fc3fa76cb93c60af7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cbc2c4d) will **decrease** coverage by `0.01%`.\n> The diff coverage is `95.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `86.23% <\u00f8> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `74.72% <\u00f8> (-0.01%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `73.99% <\u00f8> (-0.04%)` | :arrow_down: |\n| [src/awkward/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3ByZXR0eXByaW50LnB5) | `71.10% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.09% <66.66%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.93% <71.42%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.65% <87.50%> (\u00f8)` | |\n| [src/awkward/\\_backends.py](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzLnB5) | `87.57% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.26% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvX19pbml0X18ucHk=) | `87.27% <100.00%> (\u00f8)` | |\n| ... and [12 more](https://codecov.io/gh/scikit-hep/awkward/pull/2228?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-09T00:13:18Z",
  "id":1423406050,
  "issue":2228,
  "node_id":"IC_kwDODBCWws5U13Pi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T00:13:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2229](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (53b641c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/15964ceada3f249fd1a9d3ccb6c9912d7a9f62ec?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (15964ce) will **increase** coverage by `0.01%`.\n> The diff coverage is `90.59%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.39% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.26% <57.14%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/shape.py](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvc2hhcGUucHk=) | `77.04% <77.04%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.20% <87.50%> (+0.01%)` | :arrow_up: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.92% <93.33%> (+0.17%)` | :arrow_up: |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `86.92% <94.44%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `73.17% <95.23%> (-0.82%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `88.88% <100.00%> (+2.65%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `75.09% <100.00%> (+0.37%)` | :arrow_up: |\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `88.52% <100.00%> (-0.37%)` | :arrow_down: |\n| ... and [15 more](https://codecov.io/gh/scikit-hep/awkward/pull/2229?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-09T11:24:42Z",
  "id":1424034080,
  "issue":2229,
  "node_id":"IC_kwDODBCWws5U4Qkg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T11:24:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"We had some documentation on this, but in v1 it was free-floating (reST files, not docstrings) because the Content classes were all in C++. I'll just port that over.",
  "created_at":"2023-02-09T19:22:38Z",
  "id":1424697744,
  "issue":2230,
  "node_id":"IC_kwDODBCWws5U6ymQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T19:22:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"We're waiting for a\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/217934646-f7d8acc6-9ef7-44d6-95c3-37c0c66d73fa.png)\r\n\r\nbutton to appear, then click\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/217934779-f0e1c540-58db-47ca-90bf-cd9036dabe6f.png)\r\n\r\nand they should be documented under the \"Low-level array layouts\" on the left side-bar.\r\n\r\n",
  "created_at":"2023-02-09T20:43:57Z",
  "id":1424805239,
  "issue":2230,
  "node_id":"IC_kwDODBCWws5U7M13",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T20:43:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"http://preview.awkward-array.org.s3-website.us-east-1.amazonaws.com/jpivarski/docstrings-for-content-classes/reference/generated/ak.contents.BitMaskedArray.html\r\n\r\nand following.",
  "created_at":"2023-02-09T21:35:45Z",
  "id":1424870114,
  "issue":2230,
  "node_id":"IC_kwDODBCWws5U7cri",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T21:35:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Thanks for adding this!",
  "created_at":"2023-02-10T12:55:30Z",
  "id":1425771355,
  "issue":2230,
  "node_id":"IC_kwDODBCWws5U-4tb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-10T12:55:30Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2231](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5ad4a70) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/69df2f225f706bd6e6e9de5592af6c1fc74b40da?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (69df2f2) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.19% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.42% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `74.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.83% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.16% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.84% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.68% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.34% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.97% <\u00f8> (\u00f8)` | |\n| ... and [5 more](https://codecov.io/gh/scikit-hep/awkward/pull/2231?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-09T20:51:59Z",
  "id":1424821513,
  "issue":2231,
  "node_id":"IC_kwDODBCWws5U7Q0J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T22:09:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for copying this over Jim. It looks exactly like what was asked for in the motivating issue :)",
  "created_at":"2023-02-09T21:54:10Z",
  "id":1424886713,
  "issue":2231,
  "node_id":"IC_kwDODBCWws5U7gu5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-09T21:54:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2232?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2232](https://codecov.io/gh/scikit-hep/awkward/pull/2232?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (10cb2f9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/25955f4a22b4d6de06cb5069ea04b23c4dc5cf56?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (25955f4) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-02-10T18:15:10Z",
  "id":1426169126,
  "issue":2232,
  "node_id":"IC_kwDODBCWws5VAZ0m",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-10T18:15:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2233?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2233](https://codecov.io/gh/scikit-hep/awkward/pull/2233?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5ec36ee) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/25955f4a22b4d6de06cb5069ea04b23c4dc5cf56?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (25955f4) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-02-13T09:46:28Z",
  "id":1427634570,
  "issue":2233,
  "node_id":"IC_kwDODBCWws5VF_mK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T09:46:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2234](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (10413c5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4e01cc40e033cb9d06eee869cca73c4be3b0d53c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4e01cc4) will **decrease** coverage by `0.03%`.\n> The diff coverage is `50.00%`.\n\n> :exclamation: Current head 10413c5 differs from pull request most recent head a7f1dd4. Consider uploading reports for the commit a7f1dd4 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `17.64% <66.66%> (\u00f8)` | |\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `88.70% <0.00%> (-9.33%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `89.84% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `87.40% <0.00%> (-0.15%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `98.18% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.39% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `74.42% <0.00%> (\u00f8)` | |\n| [src/awkward/forms/listform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdGZvcm0ucHk=) | `83.14% <0.00%> (\u00f8)` | |\n| ... and [25 more](https://codecov.io/gh/scikit-hep/awkward/pull/2234?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-02-13T11:13:23Z",
  "id":1427760196,
  "issue":2234,
  "node_id":"IC_kwDODBCWws5VGeRE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-20T10:40:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Codecov didn't run, but I'm going to ignore that and merge it anyway.",
  "created_at":"2023-02-20T16:06:16Z",
  "id":1437248368,
  "issue":2234,
  "node_id":"IC_kwDODBCWws5Vqqtw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-20T16:06:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2235](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9b3b87e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7d100075ce0c2e2477dee7eaf267e39eff0c29d3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7d10007) will **decrease** coverage by `0.15%`.\n> The diff coverage is `38.63%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.79% <\u00f8> (+0.40%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.11% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_merge\\_union\\_of\\_lists.py](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9saXN0cy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.92% <33.33%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.80% <66.66%> (-1.02%)` | :arrow_down: |\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `83.33% <66.66%> (-5.56%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `92.72% <75.00%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `89.84% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/shape.py](https://codecov.io/gh/scikit-hep/awkward/pull/2235?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvc2hhcGUucHk=) | `78.68% <0.00%> (+1.63%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-13T14:26:31Z",
  "id":1428030204,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VHgL8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T14:26:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Will this work for arbitrarily many lists deep? Will it work in the presence of any option-types (keeping in mind that unions and options already interact)?\r\n\r\nMost importantly, does it solve @ivirshup's problem?",
  "created_at":"2023-02-13T14:32:35Z",
  "id":1428040245,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VHio1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T14:32:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Most importantly, does it solve @ivirshup's problem?\r\n\r\nYes, in its current form :)\r\n\r\n> Will this work for arbitrarily many lists deep? Will it work in the presence of any option-types (keeping in mind that unions and options already interact)?\r\n\r\nThis is another question (hence the draft status)! My approach with these functions is to keep their scope small; operating only upon parent-child layouts where possible. This means that there are cases where multiple functions are needed:\r\n```python\r\n>>> x = ak.concatenate(([{'x': 1}], [{'y':2}]))\r\n>>> ak.merge_union_of_records(x)\r\n<Array [{x: 1, y: None}, {x: None, ...}] type='2 * {x: ?int64, y: ?int64}'>\r\n```\r\nvs\r\n```python\r\n>>> y = ak.concatenate(([{'x': 1}], [None,{'y':2}]))\r\n>>> ak.merge_union_of_records(y)\r\n<Array [{x: 1}, None, {y: 2}] type='3 * union[{x: int64}, ?{y: int64}]'>\r\n```\r\nThis latter example needs the user to first call `ak.merge_option_of_records`:\r\n```python\r\n>>> y = ak.concatenate(([{'x': 1}], [None,{'y':2}]))\r\n>>> ak.merge_option_of_records(y)\r\n<Array [{x: 1}, {y: None}, {y: 2}] type='3 * union[{x: int64}, {y: ?int64}]'>\r\n>>> ak.merge_union_of_records(ak.merge_option_of_records(y))\r\n<Array [{x: 1, y: None}, ..., {x: None, ...}] type='3 * {x: ?int64, y: ?int64}'>\r\n```\r\n\r\nMy view is that the same should apply here, if possible. ",
  "created_at":"2023-02-13T14:39:52Z",
  "id":1428052042,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VHlhK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T14:41:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Well, if it works one list deep, then it can be applied repeatedly (at a specified `axis`).\r\n\r\nI didn't want the scope to balloon in the direction of needing yet another function for merging options. This is starting to sound like something that would be cleaner to do some other way.\r\n\r\n@ivirshup, why are you concatenating different types? We should understand the use-case better. (I usually think of concatenation for same-type or what ought to be same-typed data, such as partitions of a large dataset. How is your use-case different?)",
  "created_at":"2023-02-13T14:45:56Z",
  "id":1428060881,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VHnrR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T14:45:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  We should understand the use-case better. \r\n\r\nThis is an important question w.r.t the original motivation. I'm continuing this discussion given that these functions are intrinsically useful irrespective of this problem.\r\n\r\n\r\n> Well, if it works one list deep, then it can be applied repeatedly (at a specified axis).\r\n\r\nYes, the problem is when you have mixed option \u2014 non-option. This is something that we can (and should) handle. The benefit of adding `ak.merge_option_of_lists` is therefore mostly tangential to this discussion. My discussion above was framed in terms of what we've currently implemented. It actually does make sense for us to support `Union[Option[X], Y]`.\r\n\r\n> I didn't want the scope to balloon in the direction of needing yet another function for merging options. This is starting to sound like something that would be cleaner to do some other way.\r\n\r\nI'm on the same page. And, although I took a wide route, I don't think we need a new function in this case. We should just be handling unions given that we know what the result should look like.",
  "created_at":"2023-02-13T14:52:26Z",
  "id":1428070588,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VHqC8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T14:59:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> We should understand the use-case better. (I usually think of concatenation for same-type or what ought to be same-typed data, such as partitions of a large dataset. How is your use-case different?)\r\n\r\nThe use case is really \"concatenation of very similar types\". E.g the likely use cases for [`pd.concat`](https://pandas.pydata.org/docs/reference/api/pandas.concat.html) and [`xr.concat`](https://docs.xarray.dev/en/stable/generated/xarray.concat.html).\r\n\r\nI can give a toy example, but let me know if you'd like something more concrete (it will get a bit bio-y).\r\n\r\nLets say a certain experiment results in data that looks like `n * var * {measure_a: float, measure_b: float}`. I've annotated an experiment with some computed value per measurement (or maybe an annotation) so now it looks like: `n * var * {measure_a: float, measure_b: float, additional_value: int}`. Now I want to combine this with some other experiment that doesn't have the additional value, and has the datashape of the base case. I want to maintain the values of `additional_value` for the observations that have it. \r\n\r\nawkward will give a union type here. This is an issue for a number of reasons, including that they're a little difficult to reason about, to export to other libraries and it'll error if I try to access `\"additional_value\"` on the combined dataset.\r\n\r\n<details>\r\n<summary> </summary>\r\n\r\n```python\r\nimport awkward as ak, pandas as np, numpy as np\r\n\r\nexp_a = ak.Array([\r\n    [{\"measure_a\": .42, \"measure_b\": .3, \"additional_value\": 3}, {\"measure_a\": .26, \"measure_b\": .03, \"additional_value\": 9}],\r\n    [{\"measure_a\": .29, \"measure_b\": .01, \"additional_value\": 0}, {\"measure_a\": .41, \"measure_b\": .62, \"additional_value\": 78}, {\"measure_a\": .31, \"measure_b\": .54, \"additional_value\": 62}],\r\n])\r\n\r\nexp_b = ak.Array([\r\n    [{\"measure_a\": .42, \"measure_b\": .3}],\r\n    [{\"measure_a\": .29, \"measure_b\": .01}, {\"measure_a\": .41, \"measure_b\": .62}, {\"measure_a\": .31, \"measure_b\": .54}],\r\n    [{\"measure_a\": .26, \"measure_b\": .03}, {\"measure_a\": .41, \"measure_b\": .62}, {\"measure_a\": .31, \"measure_b\": .54}, {\"measure_a\": .41, \"measure_b\": .62}, {\"measure_a\": .31, \"measure_b\": .54}],\r\n])\r\n\r\nak.concatenate([exp_a, exp_b]).type.show()\r\n# 5 * union[\r\n#     var * {\r\n#         measure_a: float64,\r\n#         measure_b: float64,\r\n#         additional_value: int64\r\n#     },\r\n#     var * {\r\n#         measure_a: float64,\r\n#         measure_b: float64\r\n#     }\r\n# ]\r\n```\r\n\r\n</details>\r\n\r\nIf I were to do this in pandas, I would have a dataframe like `n * {observation: int, measure_a: float, measure_b: float, additional_value: int}` and `n * {entry: int, sub_entry:int, measure_a: float, measure_b: float}`. I could call `pd.concat([experiment_a, experiment_b], join=\"outer\")` and end up with `n * {observation: int, measure_a: float, measure_b: float, additional_value: ?int}`\r\n\r\n<details>\r\n<summary> </summary>\r\n\r\n```python\r\nexp_a_df = ak.to_dataframe(exp_a).astype({\"additional_value\": pd.Int64Dtype()})\r\nexp_b_df = ak.to_dataframe(exp_b)\r\n\r\npd.concat([exp_a_df, exp_b_df], join=\"outer\")\r\n#                 measure_a  measure_b  additional_value\r\n# entry subentry                                        \r\n# 0     0              0.42       0.30                 3\r\n#       1              0.26       0.03                 9\r\n# 1     0              0.29       0.01                 0\r\n#       1              0.41       0.62                78\r\n#       2              0.31       0.54                62\r\n# 0     0              0.42       0.30              <NA>\r\n# 1     0              0.29       0.01              <NA>\r\n#       1              0.41       0.62              <NA>\r\n#       2              0.31       0.54              <NA>\r\n# 2     0              0.26       0.03              <NA>\r\n#       1              0.41       0.62              <NA>\r\n#       2              0.31       0.54              <NA>\r\n#       3              0.41       0.62              <NA>\r\n#       4              0.31       0.54              <NA>\r\n```\r\n\r\n</details>\r\n\r\nThe `join` argument from `xr.concat` allows very similar behavior.\r\n\r\n-------\r\n\r\nThis PR will get a little closer to the goal here. There are a few other tasks I would need to do:\r\n\r\n* Check if the result is mergable. I'm not sure I want to bother merging arrays where I can't eliminate unions.\r\n* Iteratively call either `merge_unions_of_records`, `merge_unions_of_lists` (based on current top level union) until unions are eliminated.\r\n\r\nThis should be manageable, but \"checking if the result it mergable\" may be difficult, and each call to one of the `merge_unions` functions may be expensive (e.g. I think `Union[var * {a}, var * {b}] -> var * Union[{a}, {b}] -> var * {?a, ?b}`  allocates a lot more than a 1 step process would).\r\n",
  "created_at":"2023-02-14T11:11:46Z",
  "id":1429549169,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VNTBx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-14T11:12:18Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"Maybe we're going about this in too complicated a way, trying to fix a union after it has been created. The situation of having new data with more fields than old data is a familiar one, which I'd call schema evolution. If it always involves record types, such as\r\n\r\n```python\r\n>>> old_data = ak.Array([[{\"a\": 1}], [], [{\"a\": 2}]])\r\n>>> old_data.show(type=True)\r\ntype: 3 * var * {\r\n    a: int64\r\n}\r\n[[{a: 1}],\r\n [],\r\n [{a: 2}]]\r\n>>> new_data = ak.Array([[], [{\"a\": 3.3, \"b\": 3.3}, {\"a\": 4.4, \"b\": 4.4}]])\r\n>>> new_data.show(type=True)\r\ntype: 2 * var * {\r\n    a: float64,\r\n    b: float64\r\n}\r\n[[],\r\n [{a: 3.3, b: 3.3}, {a: 4.4, b: 4.4}]]\r\n```\r\n\r\njust concatenating them makes an undesirable union,\r\n\r\n```python\r\n>>> ak.concatenate((old_data, new_data)).show(type=True)\r\ntype: 5 * union[\r\n    var * {\r\n        a: int64\r\n    },\r\n    var * {\r\n        a: float64,\r\n        b: float64\r\n    }\r\n]\r\n[[{a: 1}],\r\n [],\r\n [{a: 2}],\r\n [],\r\n [{a: 3.3, b: 3.3}, {a: 4.4, b: 4.4}]]\r\n```\r\n\r\nbut if we explicitly set missing values for the records that don't have them,\r\n\r\n```python\r\n>>> old_data[\"b\"] = None\r\n>>> old_data.show(type=True)\r\ntype: 3 * var * {\r\n    a: int64,\r\n    b: ?unknown\r\n}\r\n[[{a: 1, b: None}],\r\n [],\r\n [{a: 2, b: None}]]\r\n```\r\n\r\nthen they'll concatenate the way you want them without even needing the special function:\r\n\r\n```python\r\n>>> ak.concatenate((old_data, new_data)).show(type=True)\r\ntype: 5 * var * {\r\n    a: float64,\r\n    b: ?float64\r\n}\r\n[[{a: 1, b: None}],\r\n [],\r\n [{a: 2, b: None}],\r\n [],\r\n [{a: 3.3, b: 3.3}, {a: 4.4, b: 4.4}]]\r\n```\r\n\r\nThis kind of procedure doesn't have to be manual:\r\n\r\n```python\r\n>>> newer_data = ak.Array([[{\"b\": 5, \"c\": []}, {\"b\": 6.6, \"c\": [1, 2]}]])\r\n\r\n>>> all_fields = set(old_data.fields) | set(new_data.fields) | set(newer_data.fields)\r\n>>> all_fields\r\n{'a', 'c', 'b'}\r\n>>> for field in all_fields:\r\n...     if field not in old_data.fields:\r\n...         old_data[field] = None\r\n...     if field not in new_data.fields:\r\n...         new_data[field] = None\r\n...     if field not in newer_data.fields:\r\n...         newer_data[field] = None\r\n... \r\n>>> ak.concatenate((old_data, new_data, newer_data)).show(type=True)\r\ntype: 6 * var * {\r\n    a: ?float64,\r\n    b: ?float64,\r\n    c: option[var * int64]\r\n}\r\n[[{a: 1, b: None, c: None}],\r\n [],\r\n [{a: 2, b: None, c: None}],\r\n [],\r\n [{a: 3.3, b: 3.3, c: None}, {a: 4.4, b: 4.4, c: None}],\r\n [{a: None, b: 5, c: []}, {a: None, b: 6.6, c: [1, ...]}]]\r\n```\r\n\r\nBut it is strictly acting on records; there's no equivalent of this for unions of other types, such as `union[int, str]`. But it sounds to me like the problem you're trying to solve is records getting or losing attributes, and they can change in type from, say, integers to floats, but they don't change from integers to strings.\r\n\r\nIntegers \u2192 strings doesn't promote, regardless of whether they're in records or not:\r\n\r\n```python\r\n>>> even_newer_data = ak.Array([[{\"a\": \"hello\"}]])\r\n>>> ak.concatenate((old_data, new_data, newer_data, even_newer_data)).show(type=True)\r\ntype: 7 * union[\r\n    var * {\r\n        a: ?float64,\r\n        b: ?float64,\r\n        c: option[var * int64]\r\n    },\r\n    var * {\r\n        a: string\r\n    }\r\n]\r\n[[{a: 1, b: None, c: None}],\r\n [],\r\n [{a: 2, b: None, c: None}],\r\n [],\r\n [{a: 3.3, b: 3.3, c: None}, {a: 4.4, b: 4.4, c: None}],\r\n [{a: None, b: 5, c: []}, {a: None, b: 6.6, c: [1, ...]}],\r\n [{a: 'hello'}]]\r\n```",
  "created_at":"2023-02-14T16:11:16Z",
  "id":1430000536,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VPBOY",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-14T16:11:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"> Maybe we're going about this in too complicated a way, trying to fix a union after it has been created.\r\n\r\nYes, I think this was actually the approach I had been exploring. It starts to fall down if the user provided unions or you hit nested types like:\r\n\r\n```\r\nn * {gene_id: str, exons: var * {exon_start: int, exon_end: int}}\r\n```\r\n\r\nIf you look at the example code for the relevant issue in AnnData (https://github.com/scverse/anndata/issues/898), I was hoping to use the `merge_unions_*` logic to figure out resultant types.\r\n\r\nFor simple record types, I'd been doing a similar union of records to achieve the above (as discussed: https://github.com/scikit-hep/awkward/issues/1668#issuecomment-1237947580).",
  "created_at":"2023-02-14T17:00:26Z",
  "id":1430076898,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VPT3i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-14T17:05:31Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"It doesn't fall down all the way:\r\n\r\n```python\r\n>>> old_data = ak.Array([{\"gene_id\": \"meow\", \"exons\": [{\"exon_start\": 100}]}])\r\n>>> new_data = ak.Array([{\"gene_id\": \"woof\", \"exons\": [{\"exon_start\": 200, \"exon_end\": 300}]}])\r\n\r\n>>> old_data[\"exons\", \"exon_end\"] = None\r\n\r\n>>> ak.concatenate((old_data, new_data)).show(type=True)\r\ntype: 2 * {\r\n    gene_id: string,\r\n    exons: var * {\r\n        exon_start: int64,\r\n        exon_end: ?int64\r\n    }\r\n}\r\n[{gene_id: 'meow', exons: [{exon_start: 100, ...}]},\r\n {gene_id: 'woof', exons: [{exon_start: 200, ...}]}]\r\n```\r\n\r\nIt has become more complicated to find out what fields are needed and where they're needed, but it's still possible:\r\n\r\n```python\r\n>>> new_data.fields\r\n['gene_id', 'exons']\r\n\r\n>>> new_data[\"exons\"].fields\r\n['exon_start', 'exon_end']\r\n\r\n>>> new_data[\"exons\", \"something_deeper\"].fields\r\n...\r\n```\r\n\r\n(so I suppose there would be some tree-recursion needed there). All of these are working because string tuple-items in square brackets means nested record fields.\r\n\r\nIt's starting to look like a complex function, but if we can generalize it and give it a good name, that might be the way to go. This method differs from `ak.merge_union_of_records` in that it:\r\n\r\n   * works at all list depths; option-type data are automatically handled (no special cases)\r\n   * would have to include the concatenation as part of the operation, whereas `ak.merge_union_of_records` could be separate.\r\n\r\nMaybe it should be a non-default option of `ak.concatenate`? Maybe not; it sounds too special-purpose for a generic (and NumPy-extending) function like `ak.concatenate`. Maybe a longer name: `ak.concatenate_merge_records`?",
  "created_at":"2023-02-14T18:41:15Z",
  "id":1430208412,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VPz-c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-14T18:41:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski and I discussed this in our meeting today. We proposed the addition of a new `ak.broadcast_fields()` (or similar name) function that broadcasts the field structure of multiple arrays, e.g.\r\n```python\r\n>>> arrays = ak.broadcast_fields([\r\n    [{'x': 1}],\r\n    [{'y': 2}],\r\n    [{'z': 2}],\r\n])\r\n>>> arrays[0].type.show()\r\n3 * {\r\n    x: ?int64,\r\n    y: ?int64,\r\n    z: ?int64\r\n}\r\n```\r\nThis function would find the common type of missing fields, and add them in the appropriate places. Where there is no common type, \"common type\" means \"union of types\". \r\n\r\nYou could then use this function with `ak.concatenate`, i.e.\r\n```python\r\nak.concatenate(\r\n    ak.broadcast_fields(...)\r\n)\r\n```\r\n\r\nBy creating unions as deep as possible, this function would not require `ak.merge_union_of_lists`.\r\n\r\nDoes this sound like a good approach?",
  "created_at":"2023-02-15T17:11:48Z",
  "id":1431706660,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VVhwk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T21:04:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"sounds good to me! Happy to give it a try when you have a prototype. \r\n\r\nOne question that I have from your example: When `broadcast_fields` is called with a list of arrays, would it again return a list of arrays or a single array? Your first example looks like the former, your second like the latter...",
  "created_at":"2023-02-15T19:02:17Z",
  "id":1431865243,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VWIeb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T19:02:17Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Your first example looks like the former, your second like the latter...\r\n\r\nYes, a mistake on my part! I've corrected the example.",
  "created_at":"2023-02-15T21:04:46Z",
  "id":1432030856,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5VWw6I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T21:04:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closing this PR in favour of #2267 ",
  "created_at":"2023-02-27T15:42:34Z",
  "id":1446563375,
  "issue":2235,
  "node_id":"IC_kwDODBCWws5WOM4v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-27T15:42:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2236?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2236](https://codecov.io/gh/scikit-hep/awkward/pull/2236?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f384f76) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7d100075ce0c2e2477dee7eaf267e39eff0c29d3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7d10007) will **increase** coverage by `0.02%`.\n> The diff coverage is `83.10%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2236?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2236?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.62% <27.27%> (-0.30%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2236?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.73% <66.66%> (-1.09%)` | :arrow_down: |\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2236?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `83.33% <66.66%> (-5.56%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://codecov.io/gh/scikit-hep/awkward/pull/2236?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `92.72% <75.00%> (-1.62%)` | :arrow_down: |\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2236?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `98.03% <98.82%> (+9.32%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2236?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `90.00% <100.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/shape.py](https://codecov.io/gh/scikit-hep/awkward/pull/2236?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvc2hhcGUucHk=) | `78.68% <0.00%> (+1.63%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-13T17:10:20Z",
  "id":1428325103,
  "issue":2236,
  "node_id":"IC_kwDODBCWws5VIoLv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-14T08:41:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski  I think this is ready for review. It passes some simple tests, and the logic seems intuitive, but it's obviously complex. I'd be keen to know if you recall any kernels I can use instead of `np.where` (or I can look tomorrow), and if anything looks amiss or can be done more performantly.",
  "created_at":"2023-02-13T18:06:06Z",
  "id":1428417748,
  "issue":2236,
  "node_id":"IC_kwDODBCWws5VI-zU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-13T18:06:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I suppose that `pd.eval` is running [numexpr.evaluate](https://numexpr.readthedocs.io/projects/NumExpr3/en/latest/api.html), which grabs variables by name from the surrounding environment, assumes that they are NumPy arrays, and performs the calculation, returning a NumPy array.\r\n\r\nAwkward v1 had an `ak.numexpr.evaluate`, which I wasn't very happy with because it's in the `ak.*` namespace instead of `numexpr.evaluate` just knowing what to do with Awkward Arrays. So although it has been updated and is hidden in the v2 code, it hasn't been exposed publicly yet.\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/6b499600342dcb6123fbbfe366e213655001989e/src/awkward/_connect/numexpr.py#L69-L71\r\n\r\nBefore just making this public, I wanted to see if there's any way to register Awkward with NumExpr (like the way that it's registered with NumPy's ufuncs or Numba's JIT). I think that was something that was going to be added to NumExpr v3, but it doesn't look like NumExpr v3 is going to happen.\r\n\r\nNumExpr expressions would be great to turn into ufuncs, and then they could be used uniformly on any array type that extends NumPy (NEP-13, `__array_ufunc__`). Let me think about that...",
  "created_at":"2023-02-14T17:09:37Z",
  "id":1430091085,
  "issue":2237,
  "node_id":"IC_kwDODBCWws5VPXVN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-14T17:09:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Hi Jim,\r\n\r\n> suppose that pd.eval is running [numexpr.evaluate](https://numexpr.readthedocs.io/projects/NumExpr3/en/latest/api.html), > which grabs variables by name from the surrounding environment, assumes that they are NumPy arrays, and performs the calculation, returning a NumPy array.\r\n\r\nYes, I think that's what it does (with probably slight variations for different engines).\r\n\r\n> has been updated and is hidden in the v2 code\r\n\r\nNot well enough, tried this one yesterday ;).\r\n\r\nThe main issue for me are custom functions, e.g.\r\n```python\r\ndef func2(a, b):\r\n    return a + b\r\n\r\nexpression = \"a + b + func2(a, b)\"\r\n```\r\nwhich works for pandas.eval but cannot be done with ak._connect.numexpr.evaluate nor numexpr.evaluate (although in most cases things like `func2` would point to ak functions).\r\n\r\nAnyway, not part of this issue ;).\r\n\r\n> Let me think about that...\r\n\r\nOf course :). Let me know if you need a hand or two. Beats writing a custom parser for these expressions.\r\n",
  "created_at":"2023-02-14T17:28:51Z",
  "id":1430117408,
  "issue":2237,
  "node_id":"IC_kwDODBCWws5VPdwg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-14T17:28:51Z",
  "user":"MDQ6VXNlcjEyMTMyNzY="
 },
 {
  "author_association":"MEMBER",
  "body":"> Not well enough, tried this one yesterday\r\n\r\nNo, I mean it's still hidden; you can't use it (without going through a module name that starts with an underscore).\r\n\r\nThe one thing we can't do is make this slick, to have `ne.evaluate` or `pd.eval` just pick up the Awkward Arrays and know what to do with them.\r\n\r\nI'm also assuming that this isn't what you're looking for:\r\n\r\n```python\r\n>>> a = ak.Array([[1, 2, 3], [5, 6]])\r\n>>> b = ak.Array([[2, 3, 4], [6, 7]])\r\n>>> eval(\"a + b\")\r\n<Array [[3, 5, 7], [11, 13]] type='2 * var * int64'>\r\n```\r\n\r\nIs it about wanting to do a single pass over the data? With something like the above (execution of the string in Python), `a + b + c` would first iterate (in precompiled code) over `a` and `b`, adding each, and then iterate over the sum and `c`, adding each. The reason for using NumExpr is to avoid all of the intermediate NumPy arrays and separate passes over the data (which uses CPU caches badly).\r\n\r\nIf you're okay with an interface like this,\r\n\r\n```python\r\n>>> evaluate(\"a + b\", a=a, b=b)\r\n<Array [[3, 5, 7], [11, 13]] type='2 * var * int64'>\r\n```\r\n\r\nit can be done like this:\r\n\r\n```python\r\ndef evaluate(expression, **namespace):\r\n    arrays = {}\r\n    not_arrays = {}\r\n    for k, v in namespace.items():\r\n        if isinstance(v, (ak.Array, np.array)):  # maybe also pd.Series...\r\n            arrays[k] = v\r\n        else:\r\n            not_arrays[k] = v\r\n\r\n    def action(layouts, **ignore):\r\n        if all(x.is_numpy for x in layouts):\r\n            ns = dict(not_arrays)\r\n            for name, value in zip(arrays.keys(), layouts):\r\n                ns[name] = value.data\r\n            return ak.contents.NumpyArray(ne.evaluate(expression, ns))\r\n\r\n    return ak.transform(action, *arrays.values())\r\n```\r\n\r\nThis is, in a sense, a reimplementation of `ak.numexpr.evaluate` using [ak.transform](https://awkward-array.org/doc/main/reference/generated/ak.transform.html). It applies all of the broadcasting rules to a set of arrays (`arrays.values()`) while recursing down until you get to the level of `ak.contents.NumpyArray`, which wrap plain NumPy arrays. Then the `action` function determines what to do with those flat arrays: in this case, it fills a namespace (`ns`), calls `ne.evaluate` (can be `pd.eval`) and wraps the result as a new `ak.contents.NumpyArray` that is part of the output.\r\n\r\nIf what you really want is to get the `pd.eval` function to work, then I don't see how to do that because we can't override Pandas.",
  "created_at":"2023-02-14T18:15:35Z",
  "id":1430175136,
  "issue":2237,
  "node_id":"IC_kwDODBCWws5VPr2g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-14T18:15:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"If the part that you really want is to pick up the variable names from the string, that is possible if it can be parsed. `ast.parse` would do it if the language (NumExpr) is a subset of the Python language, which I think it is.\r\n\r\n```python\r\n>>> print(ast.dump(ast.parse(\"a + b\"), indent=\"    \"))\r\nModule(\r\n    body=[\r\n        Expr(\r\n            value=BinOp(\r\n                left=Name(id='a', ctx=Load()),\r\n                op=Add(),\r\n                right=Name(id='b', ctx=Load())))],\r\n    type_ignores=[])\r\n```\r\n\r\nOne could then write a `Visitor` to walk over that AST and find the `Name` objects that are not in the `function` part of a `Call` (because you want non-arrays, like `func2`, to not be interpreted as arrays).",
  "created_at":"2023-02-14T18:18:56Z",
  "id":1430179022,
  "issue":2237,
  "node_id":"IC_kwDODBCWws5VPszO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-14T18:18:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Thanks a lot Jim!\r\n\r\n> without going through a module name that starts with an underscore\r\n\r\nWhich is fine for single underscores:\r\n```python\r\nresult = ak._connect.numexpr.evaluate(expression)\r\n```\r\n&rarr; works (for expressions without functions)\r\n\r\n> Is it about wanting to do a single pass over the data? \r\n\r\nYes. Although I care at the moment more about completeness than efficiency.\r\n\r\nRegarding your suggestions, indeed, these are the paths I tried over the weekend - and then I remembered `pandas.eval` ;)\r\n\r\nAnyway, you are right, a custom implementation would be best as I wanted to extract a compute graph in its final form.\r\nForgot about `ast.parse` was trying out `ply` instead :D.\r\n\r\nFor `ast` it does indeed give me something very useful for `print(ast.dump(ast.parse(\"a + b + func2(a, b)\"), indent=\"  \"))`:\r\n```\r\nModule(\r\n  body=[\r\n    Expr(\r\n      value=BinOp(\r\n        left=BinOp(\r\n          left=Name(id='a', ctx=Load()),\r\n          op=Add(),\r\n          right=Name(id='b', ctx=Load())),\r\n        op=Add(),\r\n        right=Call(\r\n          func=Name(id='func2', ctx=Load()),\r\n          args=[\r\n            Name(id='a', ctx=Load()),\r\n            Name(id='b', ctx=Load())],\r\n          keywords=[])))],\r\n  type_ignores=[])\r\n```\r\nI can use this information to create a compute graph or extract & evaluate the functions to make the expression compatible with numexpr.\r\n\r\nThanks for the pointers!",
  "created_at":"2023-02-14T19:10:14Z",
  "id":1430247577,
  "issue":2237,
  "node_id":"IC_kwDODBCWws5VP9iZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-14T19:10:14Z",
  "user":"MDQ6VXNlcjEyMTMyNzY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This error indicates that we've assumed something will be in canonical form, but the initialiser of the layout node finds that this is not the case. For performance reasons (and predicting output types), we don't want to invoke `.simplified` (the canonical constructor) unless we have to. So, this is a bug in Awkward! :tada: \r\n",
  "created_at":"2023-02-15T10:50:19Z",
  "id":1431139379,
  "issue":2239,
  "node_id":"IC_kwDODBCWws5VTXQz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T10:50:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2240?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2240](https://codecov.io/gh/scikit-hep/awkward/pull/2240?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b774f8d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4e01cc40e033cb9d06eee869cca73c4be3b0d53c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4e01cc4) will **increase** coverage by `0.02%`.\n> The diff coverage is `84.09%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2240?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2240?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.04% <72.00%> (+0.59%)` | :arrow_up: |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2240?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.21% <100.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/2240?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.22% <100.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2240?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.77% <0.00%> (-0.21%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2240?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.06% <0.00%> (+0.23%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2240?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `73.46% <0.00%> (+0.40%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-15T12:25:05Z",
  "id":1431289362,
  "issue":2240,
  "node_id":"IC_kwDODBCWws5VT74S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-18T17:43:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We should merge these as multiple batches rather than using simplified.",
  "created_at":"2023-02-15T15:43:19Z",
  "id":1431571877,
  "issue":2240,
  "node_id":"IC_kwDODBCWws5VVA2l",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T15:43:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski pinging your for another review!\r\n\r\nAlso, I lost my meeting notes (my PC crashed), so whilst I *think* I've covered everything we discussed, let me know if I've missed anything.",
  "created_at":"2023-02-18T17:35:30Z",
  "id":1435724026,
  "issue":2240,
  "node_id":"IC_kwDODBCWws5Vk2j6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-18T17:35:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2241?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2241](https://codecov.io/gh/scikit-hep/awkward/pull/2241?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (daf2a89) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6b499600342dcb6123fbbfe366e213655001989e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6b49960) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2241?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2241?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.12% <\u00f8> (-0.03%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-02-15T12:57:38Z",
  "id":1431327486,
  "issue":2241,
  "node_id":"IC_kwDODBCWws5VUFL-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T12:57:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It turns out this is a Numba \"bug\" \u2014 they don't register their entrypoints until a jitted function is executed. So, I don't think we can be doing any more here besides documenting the fact that one must call `ak.numba.register_and_check()` if one is using Numba like this?",
  "created_at":"2023-02-15T17:06:52Z",
  "id":1431698341,
  "issue":2242,
  "node_id":"IC_kwDODBCWws5VVful",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T17:06:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh! You're right. The test,\r\n\r\n```python\r\n>>> nb.typeof(ak.Array([1, 2, 3]))\r\n```\r\n\r\nis not checking what we want. This is:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> import numba as nb\r\n>>> @nb.njit\r\n... def f(array):\r\n...     return array[0]\r\n... \r\n>>> f(ak.Array([1, 2, 3]))\r\nregistering...\r\n1\r\n```\r\n\r\nOkay, it hadn't occurred to me that Numba wouldn't run the entry points until it starts compiling. I suppose they have their reasons for that.\r\n\r\nSorry for the false alarm!",
  "created_at":"2023-02-15T19:00:53Z",
  "id":1431863257,
  "issue":2242,
  "node_id":"IC_kwDODBCWws5VWH_Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T19:00:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Or `Electron \u2192 Lepton`, `Muon \u2192 Lepton`. I think there was an old issue asking for `ak.behavior` class hierarchies. I couldn't find it in the issues list, but I know it has been discussed.",
  "created_at":"2023-02-15T19:04:48Z",
  "id":1431870048,
  "issue":2243,
  "node_id":"IC_kwDODBCWws5VWJpg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T19:04:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"#2433 is a duplicate of this, but has more discussion. Therefore, I'm closing this in preference.",
  "created_at":"2023-07-02T17:10:11Z",
  "id":1616737685,
  "issue":2243,
  "node_id":"IC_kwDODBCWws5gXXWV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:10:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"On reflection, this doesn't make much sense; `ak.with_field` accepts a tuple of field names, whilst `with_parameter` has no analogue for this. Furthermore, `ak.ensure_type` might make the ability to select which layout receives the parameters a little easier.",
  "created_at":"2023-05-09T13:39:28Z",
  "id":1540146014,
  "issue":2244,
  "node_id":"IC_kwDODBCWws5bzMNe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T13:39:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is also provided by `ak.ensure_type` (#2365). Do we need a single dedicated function? Perhaps. I'll hold off, for now, as unions should be fairly rare, and therefore a little bit more work to remove them (with `ak.enforce_type`) seems reasonable.",
  "created_at":"2023-05-09T12:29:32Z",
  "id":1540030145,
  "issue":2245,
  "node_id":"IC_kwDODBCWws5byv7B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T12:29:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2246?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2246](https://codecov.io/gh/scikit-hep/awkward/pull/2246?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d37e04a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2e37adf7c8fcfbd184bc32a6017dadd4105bc95b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2e37adf) will **increase** coverage by `0.00%`.\n> The diff coverage is `80.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2246?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2246?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `87.54% <80.00%> (+0.14%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-15T21:37:20Z",
  "id":1432070056,
  "issue":2246,
  "node_id":"IC_kwDODBCWws5VW6eo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-15T21:37:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I noticed recently that boolean indexing is not strictly required to have the same shape as the underlying array, which is a reflection of the fact that we normalise boolean arrays to integers without knowledge of the array being indexed. \r\n\r\nAs I see it, this is a policy decision. If we want to permit this, then we don't need to fix anything. If not, then we probably need to avoid this normalisation and explicitly handle the boolean arrays in each content's `_getitem_XXX`.",
  "created_at":"2023-02-16T12:16:44Z",
  "id":1433000310,
  "issue":2247,
  "node_id":"IC_kwDODBCWws5Vadl2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-16T12:16:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"At first I thought maybe it was just for `bool` arrays, but it seems that the `fill_value` is converted to the original array's type, then to the `dtype` actually specified. So the problem occurs when there's information lost in converting `fill_type` to the original array's type. So going from a `float` array to `int`s is usually fine:\r\n\r\n```python\r\n>>> ak.full_like(ak.Array([1.0]), 2, dtype=int)\r\n<Array [2] type='1 * int64'>\r\n```\r\n\r\nbut not the other way around:\r\n\r\n```python\r\n>>> ak.full_like(ak.Array([1]), 2.3, dtype=float)\r\n<Array [2] type='1 * float64'>\r\n\r\n```",
  "created_at":"2023-02-16T18:03:07Z",
  "id":1433498588,
  "issue":2250,
  "node_id":"IC_kwDODBCWws5VcXPc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-16T18:03:07Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"\r\n@jpivarski I also added support for `EmptyArray` if a `dtype` is passed. Unlike `ak.values_astype`, I didn't add a `including_unknown` flag because this seems like a bugfix and a sensible choice. Is there a reason that we added `including_unknown` to `values_astype` besides backwards compatibility? Would you like me to do the same here?",
  "created_at":"2023-02-16T19:33:23Z",
  "id":1433609163,
  "issue":2251,
  "node_id":"IC_kwDODBCWws5VcyPL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-16T19:33:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The reason is that sometimes an unknown type fills in for a NumpyArray, and sometimes it fills in for something else.\r\n\r\nIn a situation like this:\r\n\r\n```python\r\n>>> partition_1 = ak.from_json(\"[[1.1, 2.2], [3.3]]\")\r\n>>> partition_1.type.show()\r\n2 * var * float64\r\n>>> \r\n>>> partition_2 = ak.from_json(\"[[]]\")\r\n>>> partition_2.type.show()\r\n1 * var * unknown\r\n>>> \r\n>>> partition_3 = ak.from_json(\"[]\")\r\n>>> partition_3.type.show()\r\n0 * unknown\r\n```\r\n\r\nyou wouldn't want to fill in the unknown types as a byproduct of turning the floats into integers or something. You'd want these unknowns to stay unknown until concatenation.\r\n\r\nBut there are other situations in which you want unknown to become numeric, like `np.array([])`.\r\n\r\nSo I think it would be a good idea for both `values_astype` and `full_like` (with `dtype`) to have a boolean `including_unknown` argument.",
  "created_at":"2023-02-16T20:50:22Z",
  "id":1433697499,
  "issue":2251,
  "node_id":"IC_kwDODBCWws5VdHzb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-16T20:50:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> But there are other situations in which you want unknown to become numeric\r\n\r\nThat's a good point, and links to our conversations yesterday!",
  "created_at":"2023-02-16T21:49:10Z",
  "id":1433757177,
  "issue":2251,
  "node_id":"IC_kwDODBCWws5VdWX5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-16T21:49:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2251?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2251](https://codecov.io/gh/scikit-hep/awkward/pull/2251?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7aebbaa) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/dc8f33436a34074215a7bf6926bbc1641449164c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dc8f334) will **decrease** coverage by `0.02%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2251?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2251?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `98.27% <100.00%> (+0.09%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_ones\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2251?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19vbmVzX2xpa2UucHk=) | `91.66% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_zeros\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2251?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha196ZXJvc19saWtlLnB5) | `93.33% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_strings\\_astype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2251?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdHJpbmdzX2FzdHlwZS5weQ==) | `96.15% <0.00%> (-3.85%)` | :arrow_down: |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2251?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `83.44% <0.00%> (-0.68%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-02-16T22:06:25Z",
  "id":1433780247,
  "issue":2251,
  "node_id":"IC_kwDODBCWws5VdcAX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-16T22:06:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2252?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2252](https://codecov.io/gh/scikit-hep/awkward/pull/2252?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (440bc2d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7b220eefc84e58576b2b817a6c18a4835f057958?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7b220ee) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-02-16T23:09:32Z",
  "id":1433864110,
  "issue":2252,
  "node_id":"IC_kwDODBCWws5Vdweu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-16T23:09:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We discussed this already, I shall merge! Thanks @henryiii, that's a task ticked off.",
  "created_at":"2023-02-16T23:23:44Z",
  "id":1433875163,
  "issue":2252,
  "node_id":"IC_kwDODBCWws5VdzLb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-16T23:23:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Note to self: because of this and #2184 (which also touched a file in `awkward-cpp`), we'll need a new `awkward-cpp` version before releasing the next `awkward` patch release.",
  "created_at":"2023-02-20T17:42:12Z",
  "id":1437362814,
  "issue":2252,
  "node_id":"IC_kwDODBCWws5VrGp-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-20T17:42:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Okay I've just read the [specs](https://toml.io/en/v1.0.0#keys) and dashes and minuses are allowed. So maybe the pytoml parser of 3.7 can't handle them?",
  "created_at":"2023-02-17T11:05:52Z",
  "id":1434483133,
  "issue":2253,
  "node_id":"IC_kwDODBCWws5VgHm9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-17T11:05:52Z",
  "user":"MDQ6VXNlcjEzMjAxNzMx"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"`pytoml` is deprecated, I wonder what version of `pip` you are using? It looks like it's coming via pip.",
  "created_at":"2023-02-17T13:23:24Z",
  "id":1434646514,
  "issue":2253,
  "node_id":"IC_kwDODBCWws5Vgvfy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-17T13:23:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Wait a minute, I wonder why you're being given an sdist for building rather than a wheel? I can't remember off the top of my head which platforms support manylinux, but I would assume yours did. Do you expect this?",
  "created_at":"2023-02-17T13:48:27Z",
  "id":1434674847,
  "issue":2253,
  "node_id":"IC_kwDODBCWws5Vg2af",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-17T13:48:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Thanks for the quick reply. The base image is Debian Buster, so 10. \r\n\r\nI just tested with a fresh debian base image. I installed python 2.7 via `apt update && apt install python-pip`, and the installation went without issue:\r\n\r\n```\r\nroot@e41fd581e9d0:/# pip install awkward\r\nCollecting awkward\r\n  Downloading https://files.pythonhosted.org/packages/75/04/50aa6af8e38066c90f6e1da241c17f6cd522643ce6d587b60ccf43f15fe5/awkward-1.7.0-cp27-cp27mu-manylinux1_x86_64.whl (13.7MB)\r\n    100% |################################| 13.7MB 76kB/s \r\nRequirement already satisfied: setuptools in /usr/lib/python2.7/dist-packages (from awkward) (40.8.0)\r\nCollecting numpy>=1.13.1 (from awkward)\r\n  Downloading https://files.pythonhosted.org/packages/3a/5f/47e578b3ae79e2624e205445ab77a1848acdaa2929a00eeef6b16eaaeb20/numpy-1.16.6-cp27-cp27mu-manylinux1_x86_64.whl (17.0MB)\r\n    100% |################################| 17.0MB 53kB/s \r\nInstalling collected packages: numpy, awkward\r\nSuccessfully installed awkward-1.7.0 numpy-1.16.6\r\n```\r\n\r\n---\r\n\r\nNow, with a fresh debian buster but installing python 3.7 via `apt update && apt install python3-pip`, the installation fails:\r\n\r\n```\r\nroot@762a842df444:/# apt update && apt install python3-pip\r\nGet:1 http://deb.debian.org/debian buster InRelease [122 kB]\r\nGet:2 http://deb.debian.org/debian-security buster/updates InRelease [34.8 kB]\r\nGet:3 http://deb.debian.org/debian buster-updates InRelease [56.6 kB]\r\nGet:4 http://deb.debian.org/debian buster/main amd64 Packages [7909 kB]\r\nGet:5 http://deb.debian.org/debian-security buster/updates/main amd64 Packages [433 kB]\r\nGet:6 http://deb.debian.org/debian buster-updates/main amd64 Packages [8788 B]\r\nFetched 8564 kB in 5s (1870 kB/s)  \r\n[...]\r\n\r\nLOTS of packages\r\n[...]\r\nRunning hooks in /etc/ca-certificates/update.d...\r\ndone.\r\n```\r\n\r\nThen `awkward`:\r\n\r\n```\r\nroot@762a842df444:/# pip3 install awkward\r\nCollecting awkward\r\n  Downloading https://files.pythonhosted.org/packages/42/2f/a137a7f70afb7d810610275946e50f000900dd6f0442b293ac29cd742922/awkward-2.0.8-py3-none-any.whl (583kB)\r\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 583kB 1.2MB/s \r\nCollecting awkward-cpp==9 (from awkward)\r\n  Downloading https://files.pythonhosted.org/packages/5c/ed/9ea65e3121ca03b329734a45c17b4ba0cda78345f533ba43a30dc9fd4dd8/awkward-cpp-9.tar.gz (1.4MB)\r\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.4MB 404kB/s \r\nException:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3/dist-packages/pip/_internal/cli/base_command.py\", line 143, in main\r\n    status = self.run(options, args)\r\n  File \"/usr/lib/python3/dist-packages/pip/_internal/commands/install.py\", line 338, in run\r\n    resolver.resolve(requirement_set)\r\n  File \"/usr/lib/python3/dist-packages/pip/_internal/resolve.py\", line 102, in resolve\r\n    self._resolve_one(requirement_set, req)\r\n  File \"/usr/lib/python3/dist-packages/pip/_internal/resolve.py\", line 256, in _resolve_one\r\n    abstract_dist = self._get_abstract_dist_for(req_to_install)\r\n  File \"/usr/lib/python3/dist-packages/pip/_internal/resolve.py\", line 209, in _get_abstract_dist_for\r\n    self.require_hashes\r\n  File \"/usr/lib/python3/dist-packages/pip/_internal/operations/prepare.py\", line 298, in prepare_linked_requirement\r\n    abstract_dist.prep_for_dist(finder, self.build_isolation)\r\n  File \"/usr/lib/python3/dist-packages/pip/_internal/operations/prepare.py\", line 100, in prep_for_dist\r\n    self.req.load_pyproject_toml()\r\n  File \"/usr/lib/python3/dist-packages/pip/_internal/req/req_install.py\", line 428, in load_pyproject_toml\r\n    str(self)\r\n  File \"/usr/lib/python3/dist-packages/pip/_internal/pyproject.py\", line 43, in load_pyproject_toml\r\n    pp_toml = pytoml.load(f)\r\n  File \"/usr/share/python-wheels/pytoml-0.1.2-py2.py3-none-any.whl/pytoml/parser.py\", line 303, in load\r\n    filename=fin.name)\r\n  File \"/usr/share/python-wheels/pytoml-0.1.2-py2.py3-none-any.whl/pytoml/parser.py\", line 370, in loads\r\n    toks.expect('=', 'expected_equals')\r\n  File \"/usr/share/python-wheels/pytoml-0.1.2-py2.py3-none-any.whl/pytoml/parser.py\", line 250, in expect\r\n    self.error(error_text)\r\n  File \"/usr/share/python-wheels/pytoml-0.1.2-py2.py3-none-any.whl/pytoml/parser.py\", line 253, in error\r\n    raise TomlError(message, self.pos[0][0], self.pos[0][1], self._filename)\r\npytoml.core.TomlError: /tmp/pip-install-p8py33yz/awkward-cpp/pyproject.toml(62, 6): expected_equals\r\n```\r\n\r\nSo it seems to be with default debian 10 and it's version of python3.",
  "created_at":"2023-02-17T14:17:14Z",
  "id":1434711718,
  "issue":2253,
  "node_id":"IC_kwDODBCWws5Vg_am",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-17T14:17:49Z",
  "user":"MDQ6VXNlcjEzMjAxNzMx"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I took a look at [the manylinux information](https://github.com/pypa/manylinux), and it looks like your pip version is too old to use manylinux>1. I would suggest not installing `python3-pip`, and instead installing `pip` with `get-pip`. That way you can work with a much newer version according to the compatibility in the link above. \r\n\r\nCould you try that and let me know how you get on?",
  "created_at":"2023-02-17T14:35:27Z",
  "id":1434734151,
  "issue":2253,
  "node_id":"IC_kwDODBCWws5VhE5H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-17T14:54:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closing this as it's a tooling problem rather than something that we can fix. Feel free to reopen if you feel that's not the case :)",
  "created_at":"2023-02-23T09:13:18Z",
  "id":1441418270,
  "issue":2253,
  "node_id":"IC_kwDODBCWws5V6kwe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-23T09:13:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Sorry I didn't get around to answering earlier :sweat_smile: Thanks for the hints, I'll try that. If I run into any more problems, I'll update this issue.\r\n\r\nThanks!\r\n\r\nEDIT: yup, using `get-pip` on Debian 10 instead of installing `python3-pip` solved the issue.",
  "created_at":"2023-02-23T12:35:53Z",
  "id":1441697257,
  "issue":2253,
  "node_id":"IC_kwDODBCWws5V7o3p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-24T11:05:08Z",
  "user":"MDQ6VXNlcjEzMjAxNzMx"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@grst `values_astype` accepts an `including_unknown` argument. If you set this to `True`, then it will also coerce `EmptyArray`.",
  "created_at":"2023-02-17T13:15:33Z",
  "id":1434637483,
  "issue":2254,
  "node_id":"IC_kwDODBCWws5VgtSr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-17T13:15:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"oops, RTFM! sorry! ",
  "created_at":"2023-02-17T13:16:53Z",
  "id":1434638974,
  "issue":2254,
  "node_id":"IC_kwDODBCWws5Vgtp-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-17T13:16:53Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"No problem! This issue is useful as secondary documentation ;)",
  "created_at":"2023-02-17T13:29:44Z",
  "id":1434653270,
  "issue":2254,
  "node_id":"IC_kwDODBCWws5VgxJW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-17T13:29:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2255?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2255](https://codecov.io/gh/scikit-hep/awkward/pull/2255?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (68e535e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d6be32685c94587c1a52c6eb5d1a7251366fbf84?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d6be326) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-02-21T00:23:00Z",
  "id":1437696421,
  "issue":2255,
  "node_id":"IC_kwDODBCWws5VsYGl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-21T00:23:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This is about renaming\r\n\r\n```python\r\nak.numba.array_view_arg_handler\r\n```\r\n\r\nto be something like\r\n\r\n   * `ak.numba.cuda`\r\n   * `ak.numba.cuda_ext`\r\n   * `ak.numba.cuda_extension`\r\n\r\nsince (until https://github.com/numba/numba/issues/8609 is resolved) it has to be passed explicitly into\r\n\r\n```python\r\n@nb.cuda.jit(extension=[name_of_this_thing])\r\n```\r\n\r\nand we want that name to be memorable.",
  "created_at":"2023-02-21T16:04:39Z",
  "id":1438733309,
  "issue":2257,
  "node_id":"IC_kwDODBCWws5VwVP9",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-21T16:04:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2258?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2258](https://codecov.io/gh/scikit-hep/awkward/pull/2258?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (badfd81) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3535fbb8b4bc3443c09ba595620610fee8be0b74?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3535fbb) will **decrease** coverage by `0.01%`.\n> The diff coverage is `40.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2258?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2258?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2258?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `22.72% <50.00%> (+5.08%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-21T10:35:50Z",
  "id":1438242912,
  "issue":2258,
  "node_id":"IC_kwDODBCWws5Vudhg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-22T15:26:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna sorry, didn't realise this was still a draft!",
  "created_at":"2023-02-21T10:51:59Z",
  "id":1438266292,
  "issue":2258,
  "node_id":"IC_kwDODBCWws5VujO0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-21T10:51:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna sorry, didn't realise this was still a draft!\r\n\r\nno worries - thanks for the suggestions!",
  "created_at":"2023-02-21T10:52:42Z",
  "id":1438267357,
  "issue":2258,
  "node_id":"IC_kwDODBCWws5Vujfd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-21T10:52:42Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2259?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2259](https://codecov.io/gh/scikit-hep/awkward/pull/2259?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (23c53a7) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d6be32685c94587c1a52c6eb5d1a7251366fbf84?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d6be326) will **decrease** coverage by `0.01%`.\n> The diff coverage is `66.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2259?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2259?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.40% <0.00%> (-0.23%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_run\\_lengths.py](https://codecov.io/gh/scikit-hep/awkward/pull/2259?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19ydW5fbGVuZ3Rocy5weQ==) | `91.42% <88.88%> (+0.38%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-22T12:37:39Z",
  "id":1439950137,
  "issue":2259,
  "node_id":"IC_kwDODBCWws5V0-U5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-22T12:43:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - I'm not sure if I need to link it. Please, have a look. Thanks!",
  "created_at":"2023-02-21T16:34:07Z",
  "id":1438777533,
  "issue":2260,
  "node_id":"IC_kwDODBCWws5VwgC9",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-21T16:34:07Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2260](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (93b5226) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/ef3e2a90e12bdaf8862c68a0b630762634e7acfd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ef3e2a9) will **decrease** coverage by `0.03%`.\n> The diff coverage is `100.00%`.\n\n> :exclamation: Current head 93b5226 differs from pull request most recent head a06ce43. Consider uploading reports for the commit a06ce43 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEucHk=) | `93.87% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `74.42% <0.00%> (-0.58%)` | :arrow_down: |\n| [src/awkward/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5pb25mb3JtLnB5) | `81.95% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `83.33% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.14% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `94.54% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_broadcast\\_fields.py](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfZmllbGRzLnB5) | | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2260?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.77% <0.00%> (+0.07%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-21T16:37:33Z",
  "id":1438782369,
  "issue":2260,
  "node_id":"IC_kwDODBCWws5VwhOh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-02T21:08:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We need to think about how to deploy these docs; we don't have a CUDA-enabled runner currently in-action. My current thinking is that we might be able to deploy *only* the CUDA docs from e.g. a scheduled CUDA worker. This would push an `.ipynb` to our repo, so that we can build the rest of docs with our normal CI such that they are always in sync with `main`. \r\n\r\nIt's not a perfect solution, and for now we can just do this manually.",
  "created_at":"2023-02-21T20:14:12Z",
  "id":1439037798,
  "issue":2260,
  "node_id":"IC_kwDODBCWws5Vxflm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-21T20:14:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna I changed the result to be a CuPy array instead of Numba. The reason for this is that `backend=\"cuda\"` uses CuPy under the hood (so it's already a required dependency for zero-copy CUDA use), CuPy arrays can be passed directly into `ak.Array`, and they also have nice reprs. We might want to make `ak.Array` et al. understand how to consume `__cuda_array_interface__` so that `ak.Array` can consume Numba's `DeviceArray`, but that's another PR :)",
  "created_at":"2023-02-26T16:24:56Z",
  "id":1445401923,
  "issue":2260,
  "node_id":"IC_kwDODBCWws5WJxVD",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-26T16:24:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna I changed the result to be a CuPy array instead of Numba. The reason for this is that `backend=\"cuda\"` uses CuPy under the hood (so it's already a required dependency for zero-copy CUDA use), CuPy arrays can be passed directly into `ak.Array`, and they also have nice reprs. We might want to make `ak.Array` et al. understand how to consume `__cuda_array_interface__` so that `ak.Array` can consume Numba's `DeviceArray`, but that's another PR :)\r\n\r\nI'm actually updating the PR with a better example :-)",
  "created_at":"2023-02-27T14:28:37Z",
  "id":1446422944,
  "issue":2260,
  "node_id":"IC_kwDODBCWws5WNqmg",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-27T14:28:37Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"> I'm actually updating the PR with a better example :-)\r\n\r\nI didn't notice this before I clicked \"Update branch\", so be sure to `git pull`.\r\n\r\n(I wanted to see if the \"Build Docs\" failure is the same everywhere, or if it's only in #2268.)",
  "created_at":"2023-02-28T20:39:36Z",
  "id":1448883970,
  "issue":2260,
  "node_id":"IC_kwDODBCWws5WXDcC",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-28T20:39:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, the file is an `ipynb` so that the outputs can be stored in the notebook. There is discussion around extending the scope of text based notebooks in future, but for our purposes this works :)",
  "created_at":"2023-03-02T21:30:16Z",
  "id":1452575375,
  "issue":2260,
  "node_id":"IC_kwDODBCWws5WlIqP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-02T21:30:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Tests don't run for non-code changes! I can merge this, then :)",
  "created_at":"2023-03-03T16:04:48Z",
  "id":1453754094,
  "issue":2260,
  "node_id":"IC_kwDODBCWws5Wpobu",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-03T16:04:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna is this a feature request, or is it something that we're already supposed to support e.g. because the documentation / code samples say so?",
  "created_at":"2023-02-22T12:40:45Z",
  "id":1439953655,
  "issue":2262,
  "node_id":"IC_kwDODBCWws5V0_L3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-22T12:40:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna is this a feature request, or is it something that we're already supposed to support e.g. because the documentation / code samples say so?\r\n\r\nI think it's an issue to discuss: when a new behaviour is assigned it may need a `with_name` argument.",
  "created_at":"2023-02-22T13:01:40Z",
  "id":1439980069,
  "issue":2262,
  "node_id":"IC_kwDODBCWws5V1Fol",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-22T13:01:40Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"This is a feature request. The `ak.from_buffers` function doesn't have a `with_name` argument because it had never been proposed. `ak.zip` and `ak.Array` have a `with_name` argument (which just calls `ak.with_name` or its `_impl`) for user-convenience.\r\n\r\nIn terms of the 4 levels of privateness:\r\n\r\n  * L1: public, intended for data analysts, most of the `ak.*` namespace\r\n  * L2: public, intended for downstream developers, layouts, Forms, and such\r\n  * L3: private, starts with an underscore, but accessible throughout the Awkward codebase\r\n  * L4: private, starts with an underscore, accessible only within a narrow context (single file or a class's private methods, etc.)\r\n\r\nthe `ak.from_buffers` is more of an L2 function than an L1 function. Using it means passing it a Form, which is generally an L2 thing.\r\n\r\n`ak.zip` and `ak.Array` are definitely L1 and we want to make things convenient in interactive environments (Jupyter) for them, and adding a name to a newly created record is something that needs to be easy, to encourage people to use behaviors. But with `ak.from_buffers` being L2... developers tend to prefer building-block architectures over shorter-to-type\u2014I think they'd rather just call the `ak.with_name` function directly, rather than have to know that the `with_name` argument is equivalent to it (and then be forced to pick a style, which one to prefer, since they do the same thing).\r\n\r\nFor this reason, I'd lean toward not adding `with_name` as an argument to `ak.from_buffers`.",
  "created_at":"2023-02-22T15:09:01Z",
  "id":1440223884,
  "issue":2262,
  "node_id":"IC_kwDODBCWws5V2BKM",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-22T15:09:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks, @jpivarski ! Yes, it make sense - I'm closing the issue.",
  "created_at":"2023-02-22T16:51:24Z",
  "id":1440413073,
  "issue":2262,
  "node_id":"IC_kwDODBCWws5V2vWR",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-22T16:51:24Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2263?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2263](https://codecov.io/gh/scikit-hep/awkward/pull/2263?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ce546bc) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/04b5e24c8b64834857b415f303f33382309e1664?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (04b5e24) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2263?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2263?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.71% <100.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/shape.py](https://codecov.io/gh/scikit-hep/awkward/pull/2263?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvc2hhcGUucHk=) | `77.04% <0.00%> (-1.64%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://codecov.io/gh/scikit-hep/awkward/pull/2263?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `94.54% <0.00%> (+1.81%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-02-22T12:04:44Z",
  "id":1439910140,
  "issue":2263,
  "node_id":"IC_kwDODBCWws5V00j8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-22T12:04:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2264?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2264](https://codecov.io/gh/scikit-hep/awkward/pull/2264?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (59a7116) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/dc9d39a28050f7b731cd28cd039ea97a8ac88437?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dc9d39a) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2264?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/2264?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEucHk=) | `93.87% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-22T16:10:47Z",
  "id":1440326797,
  "issue":2264,
  "node_id":"IC_kwDODBCWws5V2aSN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-23T17:43:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I verified that the test still works on a system with a GPU, and the automated tests will ensure that it works on a system without a GPU, so I'll enable auto-merge.",
  "created_at":"2023-02-23T17:31:37Z",
  "id":1442168277,
  "issue":2264,
  "node_id":"IC_kwDODBCWws5V9b3V",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-23T17:31:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2266?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2266](https://codecov.io/gh/scikit-hep/awkward/pull/2266?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (408531b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d1ae5b83b6dbb3f0f2db507780040269704b0976?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d1ae5b8) will **not change** coverage.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2266?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2266?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.40% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-23T09:18:49Z",
  "id":1441425309,
  "issue":2266,
  "node_id":"IC_kwDODBCWws5V6med",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-23T16:02:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski ignore this PR as it stands: it's wrong, and ATM just a place for me to get a feel for the problem. We would have spoken about this during our meeting this week, that I missed. \r\n\r\nThere are lots of edge cases to think about, so I was hoping that we could run through them. The purpose of this function is to make record array\" compatible\" with one another, like broadcasting, but without paying heed to the length of each dimension. We could interpret that more or less loosely; what should we do for arrays with different _dimensions_? Previously we've spoken about the dimensions being an entirely independent d.o.f, so I'm currently working on that basis.\r\n\r\nIn general, I'm thinking of this function being exclusively scoped to the \"field\" behavior, i.e. not concerned about options or lists being compatible between layouts. \r\n\r\nIn the following examples, we don't care about the array contents, so I'll only display the types with\r\n```python\r\nfor x in arrays:\r\n    x.show(type=True)\r\n```\r\n\r\n## Missing fields, same dimension\r\n```python\r\nak.broadcast_fields(\r\n        [{\"x\": 1, \"c\": 3}],\r\n        [{\"y\": 2, \"c\": 3}],\r\n        [{\"z\": 2, \"c\": 3}],\r\n)\r\n```\r\n\r\nEither we introduce the option for all fields where it exists for one:\r\n```python\r\n1 * {\r\n    x: ?int64,\r\n    c: int64,\r\n    y: ?int64,\r\n    z: ?int64\r\n}\r\n1 * {\r\n    x: ?int64,\r\n    c: int64,\r\n    y: ?int64,\r\n    z: ?int64\r\n}\r\n1 * {\r\n    x: ?int64,\r\n    c: int64,\r\n    y: ?int64,\r\n    z: ?int64\r\n}\r\n```\r\n\r\nor we never introduce an unneeded option:\r\n```python\r\n1 * {\r\n    x: int64,\r\n    c: int64,\r\n    y: ?int64,\r\n    z: ?int64\r\n}\r\n1 * {\r\n    x: ?int64,\r\n    c: int64,\r\n    y: int64,\r\n    z: ?int64\r\n}\r\n1 * {\r\n    x: ?int64,\r\n    c: int64,\r\n    y: ?int64,\r\n    z: int64\r\n}\r\n```\r\n\r\n\r\n## Missing fields, different dimension\r\n```python\r\nak.broadcast_fields(\r\n        [{\"x\": {\"y\": 1, \"z\": 2}}],\r\n        [{\"x\": [  {\"y\": 1}  ]}],\r\n)\r\n```\r\n\r\nWe ignore the dimension difference, and walk down each content tree until we reach a record:\r\n```python1 * {\r\n    x: {\r\n        y: int64,\r\n        z: int64\r\n    }\r\n}\r\n1 * {\r\n    x: var * {\r\n        y: int64,\r\n        z: ?int64\r\n    }\r\n}\r\n```\r\n\r\n## Union types\r\nI didn't get this far yet.",
  "created_at":"2023-02-23T14:26:47Z",
  "id":1441888622,
  "issue":2267,
  "node_id":"IC_kwDODBCWws5V8Xlu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-23T14:28:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2267?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2267](https://codecov.io/gh/scikit-hep/awkward/pull/2267?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c824b92) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d58cd0c5b6ae1116db6f8bedd4341631468f18fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d58cd0c) will **increase** coverage by `0.02%`.\n> The diff coverage is `87.87%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2267?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2267?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.69% <75.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_broadcast\\_fields.py](https://codecov.io/gh/scikit-hep/awkward/pull/2267?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfZmllbGRzLnB5) | `84.78% <84.78%> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2267?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `75.00% <100.00%> (+0.57%)` | :arrow_up: |\n| [src/awkward/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2267?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5pb25mb3JtLnB5) | `82.08% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2267?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-27T15:33:02Z",
  "id":1446548171,
  "issue":2267,
  "node_id":"IC_kwDODBCWws5WOJLL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-27T18:21:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I think it's ready to merge, and I'll let you do it, in case you have offline edits.",
  "created_at":"2023-02-27T16:25:54Z",
  "id":1446641057,
  "issue":2267,
  "node_id":"IC_kwDODBCWws5WOf2h",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-02-27T16:25:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2268?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2268](https://codecov.io/gh/scikit-hep/awkward/pull/2268?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cef8b89) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/29212e8276e7498bcbf0a56d6aee05804bc4b254?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (29212e8) will **not change** coverage.\n> The diff coverage is `50.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2268?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2268?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.14% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/hist.py](https://codecov.io/gh/scikit-hep/awkward/pull/2268?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvaGlzdC5weQ==) | `47.36% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2268?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.69% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2268?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.04% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2268?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://codecov.io/gh/scikit-hep/awkward/pull/2268?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `94.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2268?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `83.33% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-02-23T17:33:15Z",
  "id":1442170532,
  "issue":2268,
  "node_id":"IC_kwDODBCWws5V9cak",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-28T20:25:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> * NPY: I've had to disable one of the checks here for deprecated usage of np.random\r\n\r\nOdd; there are no uses of `np.random` in the codebase; it appears in a few _docstrings_ in highlevel.py, and there are some uses in tests/*.py.\r\n\r\nWith NumPy 1.23.5, I'm not seeing deprecation warnings (even for the usage patterns in docstrings). Maybe they're more recent deprecations?\r\n\r\n> * PD: We aren't using Pandas in an idiomatic way, it seams\r\n\r\nThe only file that uses Pandas is `ak_to_dataframe.py`, which probably isn't idiomatic Pandas use because it has to construct a DataFrame from an Awkward Array in general.",
  "created_at":"2023-02-23T17:47:04Z",
  "id":1442187262,
  "issue":2268,
  "node_id":"IC_kwDODBCWws5V9gf-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-23T17:47:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"NumPy issues are only in tests:\r\n\r\n```\r\ntests/test_1030_mixin_class_name.py:19:9: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\ntests/test_1030_mixin_class_name.py:20:9: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\ntests/test_1125_to_arrow_from_arrow.py:193:9: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\ntests/test_1125_to_arrow_from_arrow.py:201:25: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\ntests/test_1125_to_arrow_from_arrow.py:203:13: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\ntests/test_1294_to_and_from_parquet.py:227:9: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\ntests/test_1294_to_and_from_parquet.py:238:25: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\ntests/test_1294_to_and_from_parquet.py:240:13: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\ntests/test_1440_start_v2_to_parquet.py:172:9: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\ntests/test_1440_start_v2_to_parquet.py:178:25: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\ntests/test_1440_start_v2_to_parquet.py:180:13: NPY002 Replace legacy `np.random.randint` call with `np.random.Generator`\r\nFound 11 errors.\r\n```\r\n\r\nSo very low priority, but still might be nice to have proper examples of how to use modern NumPy if anyone happens along. Pretty sure they won't kill it off, it's just labeled \"Legacy\" at the moment.\r\n\r\nPandas is giving some false positives, actually:\r\n\r\n```\r\nsrc/awkward/_broadcasting.py:557:26: PD013 `.melt` is preferred to `.stack`; provides same functionality\r\nsrc/awkward/_connect/numba/arrayview.py:458:5: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/_connect/numba/arrayview.py:519:9: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/_connect/numba/arrayview.py:569:5: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/_connect/numba/arrayview.py:585:5: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/_connect/numba/layout.py:1193:13: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/_nplikes/array_module.py:228:16: PD013 `.melt` is preferred to `.stack`; provides same functionality\r\nsrc/awkward/behaviors/categorical.py:21:9: PD011 Use `.to_numpy()` instead of `.values`\r\nsrc/awkward/behaviors/categorical.py:31:17: PD011 Use `.to_numpy()` instead of `.values`\r\nsrc/awkward/behaviors/categorical.py:31:32: PD011 Use `.to_numpy()` instead of `.values`\r\nsrc/awkward/behaviors/categorical.py:37:9: PD011 Use `.to_numpy()` instead of `.values`\r\nsrc/awkward/behaviors/categorical.py:38:43: PD011 Use `.to_numpy()` instead of `.values`\r\nsrc/awkward/behaviors/categorical.py:44:53: PD011 Use `.to_numpy()` instead of `.values`\r\nsrc/awkward/behaviors/categorical.py:44:68: PD011 Use `.to_numpy()` instead of `.values`\r\nsrc/awkward/contents/unionarray.py:1500:23: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/highlevel.py:2061:59: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_fill_none.py:101:45: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_fill_none.py:101:62: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_to_arrow.py:103:31: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_to_arrow.py:103:43: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_to_arrow_table.py:106:31: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_to_arrow_table.py:106:43: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_to_dataframe.py:216:32: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_to_dataframe.py:216:44: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_to_json.py:164:34: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_to_json.py:164:52: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_to_json.py:170:27: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\nsrc/awkward/operations/ak_to_json.py:170:38: PD008 Use `.loc` instead of `.at`.  If speed is important, use numpy.\r\ntests/test_0331_pandas_indexedarray.py:15:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:28:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:38:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:49:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:59:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:69:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:81:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:89:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:95:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:104:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:114:5: PD901 `df` is a bad variable name. Be kinder to your future self.\r\ntests/test_0331_pandas_indexedarray.py:115:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0331_pandas_indexedarray.py:116:12: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0835_datetime_type_pandas.py:15:5: PD901 `df` is a bad variable name. Be kinder to your future self.\r\ntests/test_0835_datetime_type_pandas.py:18:30: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0835_datetime_type_pandas.py:20:31: PD011 Use `.to_numpy()` instead of `.values`\r\ntests/test_0875_arrow_null_type.py:33:17: PD012 `.read_csv` is preferred to `.read_table`; provides same functionality\r\ntests/test_1125_to_arrow_from_arrow.py:38:13: PD012 `.read_csv` is preferred to `.read_table`; provides same functionality\r\ntests/test_2202_filter_multiple_columns_from_rdataframe.py:27:5: PD901 `df` is a bad variable name. Be kinder to your future self.\r\ntests/test_2202_filter_multiple_columns_from_rdataframe.py:33:5: PD901 `df` is a bad variable name. Be kinder to your future self.\r\ntests/test_2234_from_rdataframe_keep_order.py:119:5: PD901 `df` is a bad variable name. Be kinder to your future self.\r\ntests/test_2234_from_rdataframe_keep_order.py:125:5: PD901 `df` is a bad variable name. Be kinder to your future self.\r\n```\r\n\r\nIt's not being smart about making sure the objects really are Pandas objects. I think Ruff can be a bit smarter about this, so it's likely just a direct port of the flake8 tool without extra logic for tracking the objects. (It's can't fully do it without types, though, and I think Ruff is working on replacing Black before it works on replacing mypy :D )\r\n\r\n",
  "created_at":"2023-02-23T21:39:24Z",
  "id":1442465808,
  "issue":2268,
  "node_id":"IC_kwDODBCWws5V-kgQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-23T21:39:24Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay to have this go in? I can start working on enabling a few of these in a followup.",
  "created_at":"2023-02-28T15:21:06Z",
  "id":1448372880,
  "issue":2268,
  "node_id":"IC_kwDODBCWws5WVGqQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-28T15:21:06Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"If the Build Docs test passes this time, then yes, I think this is okay to go in. It doesn't look like it will interfere with any other open PRs.",
  "created_at":"2023-02-28T20:04:00Z",
  "id":1448804329,
  "issue":2268,
  "node_id":"IC_kwDODBCWws5WWv_p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-28T20:04:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Is pydata_sphinx_theme broken, perhaps? It had a 0.13 release 12 hours ago.",
  "created_at":"2023-02-28T21:22:45Z",
  "id":1448934363,
  "issue":2268,
  "node_id":"IC_kwDODBCWws5WXPvb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-28T21:23:38Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"That's what I was thinking, so I tested `main` and a few other branches: https://github.com/scikit-hep/awkward/actions/workflows/docs.yml\r\n\r\nThey all fail the same way.\r\n\r\nWe could put a temporary upper limit on pydata_sphinx_theme or wait and see if it gets resolved.\r\n\r\nhttps://github.com/pydata/pydata-sphinx-theme/issues/1149 seems relevant.\r\n\r\nMeanwhile, _this_ PR looks okay. The docs won't get updated until this gets fixed, but this PR doesn't change anything in the docs. I'll merge this and make an issue for the docs.",
  "created_at":"2023-02-28T21:45:29Z",
  "id":1448964388,
  "issue":2268,
  "node_id":"IC_kwDODBCWws5WXXEk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-28T21:45:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Following Jim's comments, I'll force merge this.",
  "created_at":"2023-02-28T22:52:24Z",
  "id":1449048856,
  "issue":2268,
  "node_id":"IC_kwDODBCWws5WXrsY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-28T22:52:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna can you reproduce the docs build failure locally? It works for me :cry: ",
  "created_at":"2023-02-27T15:59:05Z",
  "id":1446589973,
  "issue":2269,
  "node_id":"IC_kwDODBCWws5WOTYV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-27T15:59:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna can you reproduce the docs build failure locally? It works for me \ud83d\ude22\r\n\r\nnope...",
  "created_at":"2023-02-27T16:15:28Z",
  "id":1446621182,
  "issue":2269,
  "node_id":"IC_kwDODBCWws5WOa_-",
  "performed_via_github_app":null,
  "reactions":{
   "confused":1,
   "total_count":1
  },
  "updated_at":"2023-02-27T16:15:28Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2269?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2269](https://codecov.io/gh/scikit-hep/awkward/pull/2269?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8a3d242) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6db9e52cf252dc0f2fb9e162bf50fe98311b3ef4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6db9e52) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-02-27T21:45:44Z",
  "id":1447146542,
  "issue":2269,
  "node_id":"IC_kwDODBCWws5WQbQu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-01T00:11:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this CI is failing due to a caching issue. Not exactly sure why this is happening, but I can't reproduce it locally. I hope that merging this into main will just *work* once the caches elapse.",
  "created_at":"2023-02-27T22:52:00Z",
  "id":1447234525,
  "issue":2269,
  "node_id":"IC_kwDODBCWws5WQwvd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-27T22:52:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"CI _was_ failing due to caching, but not in the way I anticipated. `uproot` pulls in `awkward` from PyPI, which we then try to install manually in a subsequent step. As the versions match right now, we never get our local build. The fix is to pass `--upgrade --no-deps` to ensure this.",
  "created_at":"2023-02-28T23:52:59Z",
  "id":1449101153,
  "issue":2269,
  "node_id":"IC_kwDODBCWws5WX4dh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-28T23:52:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna I noticed that the ROOT test failed, which I didn't see before. I haven't touched this code, so I'm surprised that it randomly fails: https://github.com/scikit-hep/awkward/actions/runs/4298483128/jobs/7492636536",
  "created_at":"2023-03-01T00:09:47Z",
  "id":1449116524,
  "issue":2269,
  "node_id":"IC_kwDODBCWws5WX8Ns",
  "performed_via_github_app":null,
  "reactions":{
   "confused":1,
   "total_count":1
  },
  "updated_at":"2023-03-01T00:09:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna I noticed that the ROOT test failed, which I didn't see before. I haven't touched this code, so I'm surprised that it randomly fails: https://github.com/scikit-hep/awkward/actions/runs/4298483128/jobs/7492636536\r\n\r\nSorry, it looks like I've missed to set `keep_order=True`. I'll submit a PR asap.",
  "created_at":"2023-03-01T06:59:59Z",
  "id":1449452138,
  "issue":2269,
  "node_id":"IC_kwDODBCWws5WZOJq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-01T06:59:59Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > @ianna I noticed that the ROOT test failed, which I didn't see before. I haven't touched this code, so I'm surprised that it randomly fails: https://github.com/scikit-hep/awkward/actions/runs/4298483128/jobs/7492636536\r\n> \r\n> Sorry, it looks like I've missed to set `keep_order=True`. I'll submit a PR asap.\r\n\r\nOk, the failing test did not expect a multi-threaded event loop. It looks like the setting is propagated from another test/docs? I'll need to check the rest of the tests and either disable multi-threading or set the parameter: https://github.com/scikit-hep/awkward/pull/2276",
  "created_at":"2023-03-01T07:10:54Z",
  "id":1449464607,
  "issue":2269,
  "node_id":"IC_kwDODBCWws5WZRMf",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-01T07:10:54Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2271?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2271](https://app.codecov.io/gh/scikit-hep/awkward/pull/2271?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5b01df7) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/47975bdc01e514e49340e784bfb46278a44ebb94?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (47975bd) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-02-27T22:48:21Z",
  "id":1447231085,
  "issue":2271,
  "node_id":"IC_kwDODBCWws5WQv5t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-16T15:36:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski does this workflow look reasonable to you, to merge as a non-required workflow?",
  "created_at":"2023-02-28T23:19:05Z",
  "id":1449075569,
  "issue":2271,
  "node_id":"IC_kwDODBCWws5WXyNx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-28T23:19:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I believe that Jim's work to integrate everything in https://github.com/CoffeaTeam/integration-test would supersede this.",
  "created_at":"2023-12-19T21:42:31Z",
  "id":1863512831,
  "issue":2271,
  "node_id":"IC_kwDODBCWws5vEvL_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-19T21:42:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2272?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2272](https://codecov.io/gh/scikit-hep/awkward/pull/2272?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (23817cd) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/29212e8276e7498bcbf0a56d6aee05804bc4b254?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (29212e8) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-02-28T00:31:02Z",
  "id":1447339228,
  "issue":2272,
  "node_id":"IC_kwDODBCWws5WRKTc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-28T00:31:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It could be one of these: #567, #1127, #1280. In Awkward 1.x, the layout tree structures that back the arrays were implemented in C++, and after all the investigation in those three issues, I'm still not sure whether there is a memory leak on tree node structures (the small metadata objects, not the large array buffers). To see this leak, if there is one, you have to create a large number of small arrays, which is not the intended usage pattern\u2014as you've pointed out.\r\n\r\nYou're also right that it goes away in Awkward 2.x. In fact, this was a fundamental motivation of the 2.x project, to avoid the Python/C++ border as much as possible. ([ACAT talk](https://indico.cern.ch/event/855454/contributions/4605044/)) One thing that I _know_ is a memory leak is circular references that cross the Python/C++ border; in fact, this is also a NumPy issue that has been open since 2009 (https://github.com/numpy/numpy/issues/6581#issuecomment-1012678379). But in your case, the reference is not circular.\r\n\r\nRunning your script with Awkward 1.10.2; layout nodes are C++ objects:\r\n\r\n```\r\nArray-at-a-time operations\r\n57126912\r\n108662784\r\n110686208\r\n118956032\r\n119750656\r\n121495552\r\n122552320\r\n121614336\r\n121638912\r\n122638336\r\n122638336\r\n\r\nIteration\r\n122638336\r\n193118208\r\n280481792\r\n367898624\r\n455299072\r\n542711808\r\n630079488\r\n717500416\r\n804909056\r\n892297216\r\n979660800\r\n```\r\n\r\nRunning your script with the latest `main` (past 2.0.8); layout nodes are Python objects:\r\n\r\n```\r\nArray-at-a-time operations\r\n38154240\r\n75194368\r\n78688256\r\n79626240\r\n79626240\r\n79892480\r\n79900672\r\n80158720\r\n80166912\r\n80424960\r\n80691200\r\n\r\nIteration\r\n80691200\r\n77701120\r\n78237696\r\n78495744\r\n78499840\r\n77971456\r\n78499840\r\n78495744\r\n78499840\r\n78233600\r\n78499840\r\n```\r\n\r\nIf you know that you're going to be iterating in Python (not Numba), then an up-front conversion to Python objects (`to_list`) would be beneficial for both speed and memory. Python iteration over built-in objects is some large factor (more than 10?) faster than any calls through `__getitem__`, especially if they have to cross the Python/C++ border with pybind11.\r\n\r\nIf you're using Numba, the mechanism for iteration is so different that a memory leak here would be no indication of a memory leak in Numba. An `itr2` that has been JIT-compiled with Numba (and has enough in the loop that it doesn't get optimized away) consists of stack-bound iterator objects that access the array contents as borrowed memory\u2014so, no memory management at all. (The original array is forced to live as long as the Numba-compiled function runs.)\r\n\r\nSo if your final application will be in Numba, try memory-profiling that. I think the results will be very different.",
  "created_at":"2023-03-01T16:01:02Z",
  "id":1450396751,
  "issue":2275,
  "node_id":"IC_kwDODBCWws5Wc0xP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-01T16:01:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Good news! A seemingly different memory leak in Coffea could be traced down to leaking strings when calling `Form.parameters`, and that fixed this leak, too.\r\n\r\nThere will be a 1.10.3 bug-fix release with this in it (PR #2311).\r\n\r\n```python\r\n>>> import awkward\r\n>>> awkward.__version__\r\n'1.10.2'\r\n>>> import uproot\r\n>>> uproot.__version__\r\n'4.3.7'\r\n```\r\n\r\n```\r\nArray-at-a-time operations\r\n50438144\r\n114077696\r\n115261440\r\n119037952\r\n120647680\r\n121069568\r\n121069568\r\n121069568\r\n121069568\r\n121069568\r\n122101760\r\n\r\nIteration\r\n122101760\r\n122200064\r\n122200064\r\n122167296\r\n121167872\r\n122167296\r\n121167872\r\n121151488\r\n122171392\r\n121171968\r\n121147392\r\n```\r\n\r\n(does not grow; it used to grow by about a factor of 10.)",
  "created_at":"2023-03-13T19:53:47Z",
  "id":1466865297,
  "issue":2275,
  "node_id":"IC_kwDODBCWws5XbpaR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T19:53:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Does seem to be fixed in 1.10.3, thanks!",
  "created_at":"2023-03-14T15:30:17Z",
  "id":1468322968,
  "issue":2275,
  "node_id":"IC_kwDODBCWws5XhNSY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-14T15:30:17Z",
  "user":"MDQ6VXNlcjQxNzcxMDE="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2276?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2276](https://codecov.io/gh/scikit-hep/awkward/pull/2276?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (76e44f3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6db9e52cf252dc0f2fb9e162bf50fe98311b3ef4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6db9e52) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-01T07:15:09Z",
  "id":1449469051,
  "issue":2276,
  "node_id":"IC_kwDODBCWws5WZSR7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-01T10:30:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"TODO: bundle these headers as a release zip, with a CMakeLists.txt setting the C++ standard minimum & include! & update documentation to reflect this.",
  "created_at":"2023-03-01T14:32:26Z",
  "id":1450249178,
  "issue":2277,
  "node_id":"IC_kwDODBCWws5WcQva",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-01T14:32:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed in favour of #2280 ",
  "created_at":"2023-03-04T20:53:41Z",
  "id":1454871904,
  "issue":2277,
  "node_id":"IC_kwDODBCWws5Wt5Vg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-04T20:53:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this is still a WIP (need to update documentation), but I did realise that we _do_ publish the headers in a `tar.gz` during the `deploy` workflow: https://github.com/scikit-hep/awkward/actions/runs/4196422156\r\n\r\nWe just need to explicitly attach them to the release artefacts. I'll make a note to update `CONTRIBUTING.md` to reflect this.",
  "created_at":"2023-03-03T18:00:20Z",
  "id":1453897078,
  "issue":2280,
  "node_id":"IC_kwDODBCWws5WqLV2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-03T18:00:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2280?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2280](https://codecov.io/gh/scikit-hep/awkward/pull/2280?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a10b6d2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/bb4279f41768242aee10a8685e645b5cf521beb8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bb4279f) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-04T14:06:11Z",
  "id":1454751140,
  "issue":2280,
  "node_id":"IC_kwDODBCWws5Wtb2k",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-06T09:46:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna IIRC you mentioned that the header-only library needs to be compiled with C++17. Is that so, i.e is our lower bound for `awkward-cpp` therefore also C++17?",
  "created_at":"2023-03-04T20:49:15Z",
  "id":1454870853,
  "issue":2280,
  "node_id":"IC_kwDODBCWws5Wt5FF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-04T20:49:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna IIRC you mentioned that the header-only library needs to be compiled with C++17. Is that so, i.e is our lower bound for `awkward-cpp` therefore also C++17?\r\n\r\nNo, C++17 is the requirement for the header-only `LayoutBuilder`. The `GrowableBuffer` is fine with C++11. Only the latter is used in the `awkward-cpp`, so keeping the C++11 requirement there is ok, IMHO.",
  "created_at":"2023-03-05T17:48:41Z",
  "id":1455156942,
  "issue":2280,
  "node_id":"IC_kwDODBCWws5Wu-7O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-05T18:30:25Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> No, C++17 is the requirement for the header-only LayoutBuilder. The GrowableBuffer is fine with C++11. Only the latter is used in the awkward-cpp, so keeping the C++11 requirement there is ok, IMHO.\r\n\r\nAh, OK! In which case, I've split the header-only library into smaller targets, so that we can set the CXX version for each one; only the `awkward::layout-builder` target needs CXX 17.",
  "created_at":"2023-03-05T19:46:58Z",
  "id":1455185610,
  "issue":2280,
  "node_id":"IC_kwDODBCWws5WvF7K",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-05T19:46:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> @ianna IIRC you mentioned that the header-only library needs to be compiled with C++17. Is that so, i.e is our lower bound for `awkward-cpp` therefore also C++17?\r\n\r\nOur previous motivation for C++11 (and C++14 for Windows because it didn't have a well-defined C++11 target) was to be able to build with the compilers that come with the original `manylinux` images (from back when we were supporting Python 2.7). That constraint has been released by abandoning old Python versions. I _think_ that all of our wheel-building jobs are capable of C++17.\r\n\r\nIf that's the case, then we can just declare all of Awkward Array's C++ to have a minimum of C++17, just for simplicity. I don't know of any use-cases to motivate old C++ compilers, and the old use-case was our wheel-building workflows.",
  "created_at":"2023-03-06T18:51:43Z",
  "id":1456761699,
  "issue":2280,
  "node_id":"IC_kwDODBCWws5W1Gtj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-06T18:51:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> If that's the case, then we can just declare all of Awkward Array's C++ to have a minimum of C++17, just for simplicity.\r\n\r\nOK, if we decide we can move to C++ 17, we can keep the targets as the separation probably makes sense!",
  "created_at":"2023-03-06T19:50:59Z",
  "id":1456863088,
  "issue":2280,
  "node_id":"IC_kwDODBCWws5W1fdw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-06T19:50:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2282?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2282](https://codecov.io/gh/scikit-hep/awkward/pull/2282?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d6cf48d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/bb4279f41768242aee10a8685e645b5cf521beb8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bb4279f) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-05T17:12:06Z",
  "id":1455148993,
  "issue":2282,
  "node_id":"IC_kwDODBCWws5Wu8_B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-05T17:12:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The pr-on-hold label will only be on this until we're ready for the 2.0 \u2192 2.1 transition, which could be as early as today.",
  "created_at":"2023-03-06T19:17:04Z",
  "id":1456807826,
  "issue":2282,
  "node_id":"IC_kwDODBCWws5W1R-S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-06T19:17:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"In c569a71813ea27a0faae2031797733ec2dbad3d9, I simply removed the failing test. It was testing an aspect of `to_rectilinear`, but since the function no longer exists, I'd say that the property we intended to test is now obsolete.",
  "created_at":"2023-03-06T19:31:31Z",
  "id":1456831506,
  "issue":2283,
  "node_id":"IC_kwDODBCWws5W1XwS",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-06T19:31:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2283](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8716fc8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/495f59264e0345c5084a7a8cb60e31c78548d3fd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (495f592) will **decrease** coverage by `0.02%`.\n> The diff coverage is `63.63%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `40.84% <\u00f8> (-0.26%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `83.78% <\u00f8> (+1.73%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `62.50% <\u00f8> (-1.50%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.80% <\u00f8> (+0.06%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `73.82% <27.27%> (-0.59%)` | :arrow_down: |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `92.99% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.06% <100.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.22% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/2283?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `95.52% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-03-06T19:41:04Z",
  "id":1456847073,
  "issue":2283,
  "node_id":"IC_kwDODBCWws5W1bjh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-06T19:41:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2285](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (94a84d8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7fc01d81398dd3ba7bef653768fd6d54d42a38a3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7fc01d8) will **increase** coverage by `0.04%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `75.20% <100.00%> (+0.20%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `80.00% <100.00%> (+0.83%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `80.00% <100.00%> (+0.83%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjYXJ0ZXNpYW4ucHk=) | `80.95% <100.00%> (+0.95%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjb21iaW5hdGlvbnMucHk=) | `83.33% <100.00%> (+0.98%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_argmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `62.16% <100.00%> (+1.05%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_argmin.py](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `62.16% <100.00%> (+1.05%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `77.27% <100.00%> (+1.08%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `90.69% <100.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb21iaW5hdGlvbnMucHk=) | `93.75% <100.00%> (+0.41%)` | :arrow_up: |\n| ... and [31 more](https://codecov.io/gh/scikit-hep/awkward/pull/2285?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-03-08T13:31:39Z",
  "id":1460160297,
  "issue":2285,
  "node_id":"IC_kwDODBCWws5XCEcp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-08T13:31:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for opening this to track the failed deployment. It seems like a runner error; I tried re-running the failed job that you ran, and it failed again. I re-ran the _entire_ workflow, which succeeded. I don't think there's anything that we could be doing here to fix it.",
  "created_at":"2023-03-07T13:47:40Z",
  "id":1458204158,
  "issue":2287,
  "node_id":"IC_kwDODBCWws5W6m3-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-07T13:47:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2288?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2288](https://codecov.io/gh/scikit-hep/awkward/pull/2288?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f0e910e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7fc01d81398dd3ba7bef653768fd6d54d42a38a3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7fc01d8) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-07T09:38:48Z",
  "id":1457851499,
  "issue":2288,
  "node_id":"IC_kwDODBCWws5W5Qxr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-08T22:23:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski thought you *might* like to work on the the Cython example. Not required, but in case you want to do some awkward coding. Anyone's welcome, though!",
  "created_at":"2023-03-07T10:12:36Z",
  "id":1457901812,
  "issue":2288,
  "node_id":"IC_kwDODBCWws5W5dD0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-07T10:12:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski requesting a review to see if this is heading in the right direction. It's been forever since I used Cython (honestly, I avoid it like the plague), so any extra eyes are welcome.",
  "created_at":"2023-03-07T21:16:40Z",
  "id":1458886792,
  "issue":2288,
  "node_id":"IC_kwDODBCWws5W9NiI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-07T21:16:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not sure whether to modify `copy-cpp-headers.py` to avoid copying the examples. If we copy the examples into awkward-cpp, then every change to these examples will require a new build of awkward-cpp before awkward can be released. I don't know how stable these headers will be, to determine whether this is a reasonable proposition. Meanwhile, it might be sensible to bundle the examples along with everything else, so that the `awkward-headers` within awkward-cpp is \"complete\".",
  "created_at":"2023-03-07T23:14:56Z",
  "id":1459012570,
  "issue":2288,
  "node_id":"IC_kwDODBCWws5W9sPa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-07T23:14:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @ianna and @jpivarski for the reviews, very helpful!",
  "created_at":"2023-03-08T23:18:48Z",
  "id":1461020009,
  "issue":2288,
  "node_id":"IC_kwDODBCWws5XFWVp",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2023-03-08T23:18:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2290?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2290](https://codecov.io/gh/scikit-hep/awkward/pull/2290?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5ef55ce) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d66c32a8c57fe515d242d7a17df48147ca66cc81?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d66c32a) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-07T18:07:03Z",
  "id":1458609216,
  "issue":2290,
  "node_id":"IC_kwDODBCWws5W8JxA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-09T11:20:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2293](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (18548cd) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7fc01d81398dd3ba7bef653768fd6d54d42a38a3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7fc01d8) will **increase** coverage by `0.08%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `88.88% <\u00f8> (+5.55%)` | :arrow_up: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `75.60% <100.00%> (+0.59%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.65% <100.00%> (-0.06%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_unflatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `95.83% <100.00%> (+0.31%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_pad\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wYWRfbm9uZS5weQ==) | `100.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_drop\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19kcm9wX25vbmUucHk=) | `100.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19sb2NhbF9pbmRleC5weQ==) | `100.00% <0.00%> (\u00f8)` | |\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `98.05% <0.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.26% <0.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `90.69% <0.00%> (+0.07%)` | :arrow_up: |\n| ... and [36 more](https://codecov.io/gh/scikit-hep/awkward/pull/2293?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-03-08T22:12:39Z",
  "id":1460946252,
  "issue":2293,
  "node_id":"IC_kwDODBCWws5XFEVM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-09T00:06:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, I noticed a final corner-case: `counts` can be known for typetracer backends, and I'm trying to preserve that kind of information where possible. I modified the PR to normalise `counts` if its value is not known, rather than testing if the backend has `known_data`.",
  "created_at":"2023-03-09T00:03:05Z",
  "id":1461057155,
  "issue":2293,
  "node_id":"IC_kwDODBCWws5XFfaD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-09T00:03:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2294?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2294](https://codecov.io/gh/scikit-hep/awkward/pull/2294?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bdcc295) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d66c32a8c57fe515d242d7a17df48147ca66cc81?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d66c32a) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2294?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2294?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `75.14% <100.00%> (+0.14%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-03-09T14:24:39Z",
  "id":1462151613,
  "issue":2294,
  "node_id":"IC_kwDODBCWws5XJqm9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-09T14:24:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2295?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2295](https://codecov.io/gh/scikit-hep/awkward/pull/2295?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7ab3c7e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6adf9a466e288dd709e8ce92e47445a1d0b8bcc8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6adf9a4) will **decrease** coverage by `0.02%`.\n> The diff coverage is `96.92%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2295?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2295?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `90.06% <83.33%> (-0.39%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2295?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `92.00% <98.24%> (+1.02%)` | :arrow_up: |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2295?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.33% <100.00%> (+0.04%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-03-09T15:22:52Z",
  "id":1462242044,
  "issue":2295,
  "node_id":"IC_kwDODBCWws5XKAr8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T15:28:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2297](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3dc636a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/46aac98ed1062e1fc4f1185a6355523c3a456a7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (46aac98) will **increase** coverage by `0.02%`.\n> The diff coverage is `95.23%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `75.62% <83.33%> (+0.47%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjYXJ0ZXNpYW4ucHk=) | `83.33% <100.00%> (+2.38%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_broadcast\\_fields.py](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfZmllbGRzLnB5) | `85.41% <100.00%> (+0.63%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `90.69% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.29% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZGF0YWZyYW1lLnB5) | `21.73% <100.00%> (+3.55%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `91.30% <100.00%> (\u00f8)` | |\n\n... and [1 file with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2297/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-03-09T20:37:57Z",
  "id":1462755516,
  "issue":2297,
  "node_id":"IC_kwDODBCWws5XL-C8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-09T21:25:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, that's it! It's possible that should we ever have a same-device backend that we could support mixed backends distinct from typetracer, but that's not something one can currently do and I don't think it makes much sense.",
  "created_at":"2023-03-09T22:45:58Z",
  "id":1462930274,
  "issue":2297,
  "node_id":"IC_kwDODBCWws5XMoti",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-09T22:45:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'll update the contributing-guide too!",
  "created_at":"2023-03-09T22:45:05Z",
  "id":1462929625,
  "issue":2301,
  "node_id":"IC_kwDODBCWws5XMojZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-09T22:45:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This issue might need to be on https://github.com/dask-contrib/dask-awkward. I think the fix is going to involve changes to that codebase, not this one.",
  "created_at":"2023-03-10T14:42:52Z",
  "id":1463904065,
  "issue":2302,
  "node_id":"IC_kwDODBCWws5XQWdB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-10T14:42:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Going by the stack-trace, we're raising a `StopIteration` exception if the indexing shape is out-of-bounds in typetracer. We should be raising an `IndexError` here, which would then be caught and re-thrown by \r\nhttps://github.com/scikit-hep/awkward/blob/7fbe6b856cb87cfbe5a4827b7586852c49ff2bbe/src/awkward/contents/numpyarray.py#L346-L348",
  "created_at":"2023-03-10T15:16:23Z",
  "id":1463951201,
  "issue":2302,
  "node_id":"IC_kwDODBCWws5XQh9h",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-10T15:16:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, okay. So it is something to do here.",
  "created_at":"2023-03-10T15:23:57Z",
  "id":1463961615,
  "issue":2302,
  "node_id":"IC_kwDODBCWws5XQkgP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-10T15:23:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2304?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2304](https://codecov.io/gh/scikit-hep/awkward/pull/2304?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (199e3c3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c7ce473c13ff2fad1c13e30a4c970c0845ac81c5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c7ce473) will **increase** coverage by `0.02%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2304?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2304?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.45% <100.00%> (+0.83%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-03-10T15:41:06Z",
  "id":1463985256,
  "issue":2304,
  "node_id":"IC_kwDODBCWws5XQqRo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-10T15:41:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I should mention that the TypeTracerArray.__getitem__ only implements as many cases as we have in fact encountered; I remember that it wasn't fully general. Catching ellipsis errors early is another good step toward better coverage.\r\nI'm not saying that it should be made fully general now (which would be hard), since we don't expose it to arbitrary slicing by users. I'm just saying that as testing of typetracers broadens, there might be additional cases to cover.\r\n\r\nActually, I think we have implemented all of the indexing types that a NumPy array supports. It's fairly long, although I think quite readable!\r\n\r\n> Looks good! As usual, when I use the \"approve\" button here, I'm meaning that it's ready to merge, but I don't merge it myself unless I'm 99% sure you're not making additional changes.\r\n\r\nFab! In future, I'll explicitly tell you I'm hand's off, so that you get the fun of merging.",
  "created_at":"2023-03-10T16:36:28Z",
  "id":1464068421,
  "issue":2304,
  "node_id":"IC_kwDODBCWws5XQ-lF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-10T16:36:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2305?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2305](https://codecov.io/gh/scikit-hep/awkward/pull/2305?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9bc319d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/df1eec6152b80527c000c335d96ed21f65be9c3e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (df1eec6) will **decrease** coverage by `0.03%`.\n> The diff coverage is `75.00%`.\n\n> :exclamation: Current head 9bc319d differs from pull request most recent head 4f1ecd5. Consider uploading reports for the commit 4f1ecd5 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2305?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2305?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `92.50% <75.00%> (-0.50%)` | :arrow_down: |\n\n... and [1 file with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2305/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-03-10T15:50:58Z",
  "id":1464006130,
  "issue":2305,
  "node_id":"IC_kwDODBCWws5XQvXy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-10T21:03:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'm not super happy with this PR. I would prefer there to be fewer calls to `backend_of` et al. That said, this is elegant enough that I think it's \"fine\". Let me know your thoughts?",
  "created_at":"2023-03-10T17:07:50Z",
  "id":1464109215,
  "issue":2305,
  "node_id":"IC_kwDODBCWws5XRIif",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-10T17:07:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Hi all, tracking issue https://github.com/scikit-hep/awkward/issues/2303, is there a rough time estimate of a new release that will contain this fix? \\\r\nThanks",
  "created_at":"2023-03-30T16:02:52Z",
  "id":1490556037,
  "issue":2305,
  "node_id":"IC_kwDODBCWws5Y2BSF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-30T16:03:23Z",
  "user":"MDQ6VXNlcjUyNjU3NDI4"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi @aburke1605, thanks for the ping! I've been away this week, but I'll pick this up again next week and should have it fixed then. We will then be due a new Awkward release, I think!",
  "created_at":"2023-03-30T16:07:50Z",
  "id":1490562953,
  "issue":2305,
  "node_id":"IC_kwDODBCWws5Y2C-J",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-30T16:07:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2306?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2306](https://codecov.io/gh/scikit-hep/awkward/pull/2306?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (688c337) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6adf9a466e288dd709e8ce92e47445a1d0b8bcc8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6adf9a4) will **decrease** coverage by `0.07%`.\n> The diff coverage is `78.02%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2306?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/cppyy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2306?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY3BweXkucHk=) | `27.27% <27.27%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2306?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.03% <28.57%> (-1.09%)` | :arrow_down: |\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2306?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `90.06% <83.33%> (-0.39%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2306?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `92.00% <98.24%> (+1.02%)` | :arrow_up: |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2306?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.05% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2306?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.33% <100.00%> (+0.04%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-03-13T11:12:07Z",
  "id":1465945116,
  "issue":2306,
  "node_id":"IC_kwDODBCWws5XYIwc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T19:48:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"For consistency, I ended up calling the implicit method `__cast_cpp__`, but that's open to change. An example of use, that we can use to flesh out the details, is here: https://github.com/wlav/cppyy/blob/master/test/test_advancedcpp.py#L901\r\n\r\nThis is in repo master. I cut 3.0.0 yesterday, b/c Windows and now also Mac no longer support Clang9, but it's been a bit of a rush job and I've already found some issues, so I hope to cut 3.0.1 soon.",
  "created_at":"2023-03-20T17:55:04Z",
  "id":1476688112,
  "issue":2306,
  "node_id":"IC_kwDODBCWws5YBHjw",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-03-20T17:55:04Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> For consistency, I ended up calling the implicit method `__cast_cpp__`, but that's open to change. An example of use, that we can use to flesh out the details, is here: https://github.com/wlav/cppyy/blob/master/test/test_advancedcpp.py#L901\r\n> \r\n> This is in repo master. I cut 3.0.0 yesterday, b/c Windows and now also Mac no longer support Clang9, but it's been a bit of a rush job and I've already found some issues, so I hope to cut 3.0.1 soon.\r\n\r\nThanks, @wlav ! Everything works with `cppyy` built from source. \r\n\r\n@jpivarski - I've restricted the `cppyy` version to `3.0.1` - the minimum required for Awkward-cppyy GIT. I will write documentation tomorrow. Unless you'd like me to add more tests to this PR it can go in.\r\n\r\n@agoose77 - please, have a look if the comments are understandable. Thanks!\r\n",
  "created_at":"2023-03-21T18:48:00Z",
  "id":1478418552,
  "issue":2306,
  "node_id":"IC_kwDODBCWws5YHuB4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T18:48:00Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna cool! This will be _so_ useful going forward :sunglasses: \r\n\r\nSorry only get these comments in after merging, I was eating!\r\n\r\nJust to check \u2014 this is a pretty niche method; most Array's won't be using cppyy. I wonder whether we should exclusively move this to an `ak.` function, so that we don't add any more methods to `Array`'s namespace? I'd be similiarly tempted to do the same for `numba_type` in the long run. @jpivarski you might also have thoughts on this proposal.\r\n\r\nSecondly, could we rename this to `cpp_type`, to mirror `numba_type`?\r\n\r\nI can make a PR if people agree on any of these suggestions.\r\n\r\n",
  "created_at":"2023-03-21T20:30:07Z",
  "id":1478540260,
  "issue":2306,
  "node_id":"IC_kwDODBCWws5YILvk",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-21T20:30:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77 Actually, I recommended the public property in `ak.Array`'s namespace, since `type` and `numbatype` were already there\u2014although I had missed the fact that the Numba one now has an underscore. Moving it from `cpptype` to `cpp_type` before the next release is a good idea.\r\n\r\nIn general, we try to keep the `ak.Array` namespace available for subclass method and record-field names, but L1 types are the sort of things that you'd want to have quick access to. Also, the one that is using the best real estate is `type`: it's quite likely that a record array would have a field named \"type\", and now it will have to be accessed with square brackets. However, `type` is also the most prominent (least-niche) one.\r\n\r\nAlthough the fraction of physicists using cppyy directly may be small because of the interference of ROOT[^1], there's no such issue for general-science use-cases. Depending on how we manage to promote it, this interface may not be so niche. Most of the general-science users of Awkward so far have found the Numba bridge to be an essential feature, and there are things you can't do with Numba, such as connect to libraries that use C++ types in the interfaces. (Also, dealing with specialized types in Numba, such as convincing it to use 32-bit floats, is cumbersome.)\r\n\r\nIf you want to add the underscore, so that we have `numba_type` and `cpp_type`, please do. @ianna will be documenting next, so it's just a matter of using the new name.\r\n\r\n[^1]: As a reminder, I'd like to try to take this up. Most PyROOT users don't know that the library they're using is called cppyy; if one module name has to move, it seems reasonable to me that it be the one in ROOT. Even changing it to `ROOT.cppyy` would solve the issue, and it's more tidy for a singly installable package to have only one top-level module name, anyway. I should ask in a ROOT meeting if that's something they're open to, even as an external PR.",
  "created_at":"2023-03-21T20:47:43Z",
  "id":1478559112,
  "issue":2306,
  "node_id":"IC_kwDODBCWws5YIQWI",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-21T20:47:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @agoose77 Actually, I recommended the public property in ak.Array's namespace, since type and numbatype were already there\r\n\r\nFine! For posterity, my motivations to remove this from the namespace are:\r\n- it's niche; most users aren't likely to use cppyy, or at least, aren't likely to be calling `.cpp_type` very often. `ak.cpp_type(arr)` is not much extra typing\r\n- it sets a precedent for future decisions\r\n\r\nAnd probably some other ones ... can't remember!\r\n\r\nI consider, however, that we're probably already on the same page; in your view, the pros outweigh the cons? \r\n\r\nAs such, I'll make a PR just to rename the attribute! :)\r\n\r\nThanks team.",
  "created_at":"2023-03-21T20:53:25Z",
  "id":1478565033,
  "issue":2306,
  "node_id":"IC_kwDODBCWws5YIRyp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T20:53:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - I think, I prefer a method because we have to keep a `lookup` lifetime connected to an `array` lifetime.",
  "created_at":"2023-03-21T20:53:54Z",
  "id":1478565500,
  "issue":2306,
  "node_id":"IC_kwDODBCWws5YIR58",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T20:53:54Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @agoose77 - I think, I prefer a method because we have to keep a lookup lifetime connected to an array lifetime.\r\n\r\nHmm, yes, good point. In this case the solution would be to only hide the public `cpp_type` getter; i.e. only have `ak.Array._cpp_type`. I like this less, though, because there's no clear suggestion that this is different to the existing private variable (which would have to be renamed). \r\n\r\nWe have a similar L3-L4 problem with contents, but in that case we have a protocol system (`ak._do`) that makes it clear which private methods are truly _private_.\r\n\r\nGiven how niche a name `cpp_type` is (whoever is going to want to use that for an analysis?), I think making this a public method is the right call.",
  "created_at":"2023-03-21T20:59:52Z",
  "id":1478572205,
  "issue":2306,
  "node_id":"IC_kwDODBCWws5YITit",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T20:59:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I forgot that it also has to change the state of the `ak.Array` (for the `lookup` lifetime). The same is true of `numba_type`.\r\n\r\nIf you remember, I kind-of also wanted to get rid of the `ak.type(...)` function and leave only the property. It's not much more _typing_ (with a keyboard), it's just unnatural when you're working interactively. It's often the case that you've built up an expression and then think, \"Wait\u2014I should check to see what type this is.\" Doing that by adding \"`.type`\" at the end is more natural than having to wrap the whole expression in parentheses to make the function call. Right after checking its type, the next thing you'd likely do is remove the \"`.type`\" and get the array itself.\r\n\r\nThis is the same argument for having a `to_list()` (and `tolist()`) method, rather than relying only on the `ak.to_list(...)` function. And the `show()` method doesn't even have a functional counterpart. This argument doesn't apply to everything, but there are a few things you want an object oriented interface to when working interactively. Types are basic, and even though `cpp_type` and `numba_type` are less used, it makes sense, organizationally, to find them in the same place as `type`.",
  "created_at":"2023-03-21T21:13:11Z",
  "id":1478587367,
  "issue":2306,
  "node_id":"IC_kwDODBCWws5YIXPn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T21:13:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Doing that by adding \".type\" at the end is more natural than having to wrap the whole expression in parentheses to make the function call. \r\n\r\nAgreed. In the phase space of \"how convenient would this be \u2014 how often would users do this \u2014 how valuable a name is this\", `.type` is fairly far from the origin. Meanwhile, `.numba_type` is _much_ less frequently used, even in analyses with Numba, yet it is also less useful as a name for users to overload. \r\n\r\nI think we will need to make decisions that appear inconsistent if you look at only one of these axes, but it's the holistic picture that we should be considering. On balance, the convenience of `self._cpp_type = ...` is a deciding factor for me here! :)",
  "created_at":"2023-03-22T10:19:13Z",
  "id":1479280977,
  "issue":2306,
  "node_id":"IC_kwDODBCWws5YLAlR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-22T10:19:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closely related to this is the question of where the boundary between `nplike` and `backend` begins.\r\n\r\nIn writing this PR, I think it's actually fairly clear; there should be a `nplike_of(array)` function that lazily evaluates `nplike.is_own_array_type`, and a `backend_of` function that does what the finder system here does.\r\n\r\nI'll therefore changes this PR to reflect that separation of concerns.",
  "created_at":"2023-03-13T15:33:54Z",
  "id":1466376228,
  "issue":2307,
  "node_id":"IC_kwDODBCWws5XZyAk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T15:36:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2307](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4462f90) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8dfdf4e5e66b0a2db04fe8e42fd5c9d455455987?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8dfdf4e) will **increase** coverage by `0.04%`.\n> The diff coverage is `94.05%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.12% <57.14%> (+0.38%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `77.24% <83.33%> (+0.11%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `84.44% <92.85%> (+0.66%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvX19pbml0X18ucHk=) | `85.71% <100.00%> (-3.38%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `42.46% <100.00%> (+1.62%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/finder.py](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvZmluZGVyLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `64.00% <100.00%> (+1.50%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `74.05% <100.00%> (+0.24%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.98% <100.00%> (+0.50%)` | :arrow_up: |\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `90.85% <100.00%> (+0.40%)` | :arrow_up: |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward/pull/2307?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [16 files with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2307/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-03-13T15:38:41Z",
  "id":1466385591,
  "issue":2307,
  "node_id":"IC_kwDODBCWws5XZ0S3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-20T11:54:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closing this in favour of a similar PR.",
  "created_at":"2023-04-11T17:50:31Z",
  "id":1503841171,
  "issue":2307,
  "node_id":"IC_kwDODBCWws5ZosuT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-11T17:50:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2308?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2308](https://codecov.io/gh/scikit-hep/awkward/pull/2308?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1dd9586) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/db41d44523c607336ceda7683f3991f0a68f8cf3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (db41d44) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-13T18:19:50Z",
  "id":1466675764,
  "issue":2308,
  "node_id":"IC_kwDODBCWws5Xa7I0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T07:01:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"A newer version of pypa/gh-action-pypi-publish exists, but since this PR has been edited by someone other than Dependabot I haven't updated it. You'll get a PR for the updated version as normal once this PR is merged.",
  "created_at":"2023-03-16T17:59:59Z",
  "id":1472458379,
  "issue":2308,
  "node_id":"IC_kwDODBCWws5Xw-6L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-16T17:59:59Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2309?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2309](https://codecov.io/gh/scikit-hep/awkward/pull/2309?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1f97846) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/db41d44523c607336ceda7683f3991f0a68f8cf3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (db41d44) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-13T18:28:17Z",
  "id":1466698572,
  "issue":2309,
  "node_id":"IC_kwDODBCWws5XbAtM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T07:19:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, now I see it: RSS for this process is 80000 with the last line commented out, but grows ~linearly with it in.",
  "created_at":"2023-03-13T18:04:07Z",
  "id":1466725843,
  "issue":2310,
  "node_id":"IC_kwDODBCWws5XbHXT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T18:04:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"It's this function:\r\n\r\nhttps://github.com/scikit-hep/uproot5/blob/9d3ca55e04e61ab87d8bccb09319226e3fcc27ca/src/uproot/_util.py#L557-L661\r\n\r\n(only in Uproot 4).",
  "created_at":"2023-03-13T18:05:32Z",
  "id":1466725853,
  "issue":2310,
  "node_id":"IC_kwDODBCWws5XbHXd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T18:05:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Merely asking for the `form.parameters` gives us linear memory growth:\r\n\r\n```python\r\nwhile True:\r\n    print(\"manipulating form\",i)\r\n    i += 1\r\n    for _, branch in x.iteritems():\r\n        form = branch.interpretation.awkward_form(None)\r\n        # form = awkward_form_remove_uproot(awkward, form)\r\n        form.parameters\r\n```",
  "created_at":"2023-03-13T18:15:20Z",
  "id":1466725862,
  "issue":2310,
  "node_id":"IC_kwDODBCWws5XbHXm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T18:15:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"It goes through this:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/198cf6188bc70a19bb413a1bd750f93e605a8e57/src/python/content.cpp#L1737-L1752\r\n\r\nIt's possible that the `PyUnicode_DecodeUTF8` Python C API functions returns a new ref, which is not getting DECREF'ed by pybind11.\r\n\r\n[It does return a new ref.](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_DecodeUTF8)",
  "created_at":"2023-03-13T18:24:57Z",
  "id":1466725877,
  "issue":2310,
  "node_id":"IC_kwDODBCWws5XbHX1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T18:24:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This (whole script) shows the unbounded memory growth:\r\n\r\n```python\r\nimport json\r\nimport awkward\r\n\r\nform = awkward.forms.Form.fromjson(\r\n    json.dumps({\"class\": \"EmptyArray\", \"parameters\": {\"a\": \"b\"}})\r\n)\r\n\r\ni = 0\r\nwhile True:\r\n    i += 1\r\n    if i % 100000 == 0:\r\n        print(i)\r\n    form.parameters\r\n```",
  "created_at":"2023-03-13T18:32:29Z",
  "id":1466725894,
  "issue":2310,
  "node_id":"IC_kwDODBCWws5XbHYG",
  "performed_via_github_app":null,
  "reactions":{
   "eyes":1,
   "total_count":1
  },
  "updated_at":"2023-03-13T18:32:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"That's mildly terrifying. I guess this should be moved over to an awkward issue in that case for a fix into the main-v1 branch?",
  "created_at":"2023-03-13T18:36:55Z",
  "id":1466725923,
  "issue":2310,
  "node_id":"IC_kwDODBCWws5XbHYj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T18:36:55Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm working on that now. I can move this issue.\r\n\r\nActually, I'm seeing it with some relief: we've been trying to find these tiny memory leaks for over 2 years, and it really was a major part of the motivation to rewrite in Python. After this, I'm going to check the reproducers on some of the old leak reports, to see if it's finally gone.\r\n\r\nThis Python C API function is used on all of the bytes \u2194 str conversions. I had thought that pybind11 would own it and delete it, but apparently not.",
  "created_at":"2023-03-13T18:39:57Z",
  "id":1466725935,
  "issue":2310,
  "node_id":"IC_kwDODBCWws5XbHYv",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-13T18:39:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Check: are the following memory leaks now fixed?\r\n\r\n  - [ ] #567\r\n  - [x] #1127\r\n  - [x] #1280\r\n  - [x] #2275\r\n\r\nI don't remember why I thought that #567 was an unresolved memory leak. (The first part of that issue addressed a different leak in ArrayBuilder; afterward, I had thought we had hints of another one, but the conversation that's there doesn't look conclusive to me now.)",
  "created_at":"2023-03-13T19:40:47Z",
  "id":1466848011,
  "issue":2311,
  "node_id":"IC_kwDODBCWws5XblML",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T20:16:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77 I disabled tests of `ak.to_`/`from_rdataframe` and JAX. The RDataFrame tests were testing the last `ak._v2.*` version, and the JAX tests were testing the v1 version, neither of which are supported anymore. Hopefully, the remaining tests will pass.\r\n\r\nDo you expect that enough of the infrastructure will work to do a PyPI 1.10.3 release the normal way\u2014by creating a release in GitHub targeting the `main-v1` branch (after this gets merged)?\r\n\r\nWhat would be necessary to get it from PyPI into conda-forge? Does that pick up any new PyPI releases, even if they're out of order?",
  "created_at":"2023-03-13T20:02:47Z",
  "id":1466877644,
  "issue":2311,
  "node_id":"IC_kwDODBCWws5XbsbM",
  "performed_via_github_app":null,
  "reactions":{
   "eyes":1,
   "total_count":1
  },
  "updated_at":"2023-03-13T20:02:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think the PyPI release should work just fine with the `wheels.yml` workflow. I'm not so sure about how we would release a patch version for an old major version on conda-forge. I think it should be possible, but let me do some digging.",
  "created_at":"2023-03-13T20:40:01Z",
  "id":1466924531,
  "issue":2311,
  "node_id":"IC_kwDODBCWws5Xb33z",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-13T20:40:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I checked on Matrix, and it looks like we just need to maintain a `v1` branch on our feedstock. That should take care of it. Once we make the PyPI release, I can revert back to the v1 feedstock for a branch to make the release.",
  "created_at":"2023-03-13T20:59:43Z",
  "id":1466948549,
  "issue":2311,
  "node_id":"IC_kwDODBCWws5Xb9vF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T20:59:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Alternative to using the `py::` namespace in front of `reinterpret_steal`:\r\n\r\n```c++\r\n#include <pybind11/pytypes.h>\r\n```\r\n\r\nBut I like the namespace to denote all things pybind11.",
  "created_at":"2023-03-13T21:09:17Z",
  "id":1466960284,
  "issue":2311,
  "node_id":"IC_kwDODBCWws5XcAmc",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-13T21:09:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2311?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`main-v1@198cf61`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 2b6d805 differs from pull request most recent head 7161d3d. Consider uploading reports for the commit 7161d3d to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-13T21:20:34Z",
  "id":1466979116,
  "issue":2311,
  "node_id":"IC_kwDODBCWws5XcFMs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-13T21:36:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2313?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2313](https://codecov.io/gh/scikit-hep/awkward/pull/2313?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2fe0706) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e31686988041797c2b749cd2660cba351766c2fd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e316869) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-14T01:27:19Z",
  "id":1467205567,
  "issue":2313,
  "node_id":"IC_kwDODBCWws5Xc8e_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-19T16:15:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski you might want to weigh in here; we have non-standard code style w.r.t truthiness. Do you want to relax that and let `ruff` clean it up, or would you prefer to instruct ruff to ignore these patterns?",
  "created_at":"2023-03-17T09:08:30Z",
  "id":1473466925,
  "issue":2313,
  "node_id":"IC_kwDODBCWws5X01It",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T09:08:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I really want ruff to let us avoid truthiness. I go with the flow on a lot of Python things that I'm ambivalent about, but this weak typing is pretty dangerous. If it's coupled with actually-checked type-checking, then it wouldn't be too bad. Maybe when we have enough type-hints to run MyPy and `some_list` always definitely refers to a list, we can replace\r\n\r\n```python\r\nif some_list == []:\r\n```\r\n\r\nwith\r\n\r\n```python\r\nif some_list:\r\n```\r\n\r\nAs long as there's a possibility that some bug would send a `None`, `()`, `0`, or `False` here, I'd want the code to be explicit.\r\n\r\nI put that ignore in the project-wide pyproject.toml, but there are other ruff complaints that are worth individualized `noqa`, such as the one where a loop variable name is overwritten to refine it (in other words, it retains the meaning, but different user-supplied types are regularized to a preferred format), it's good to have the noisiness of a `noqa` to point that out.",
  "created_at":"2023-03-17T18:22:46Z",
  "id":1474235892,
  "issue":2313,
  "node_id":"IC_kwDODBCWws5X3w30",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T18:22:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> As long as there's a possibility that some bug would send a `None`, `()`, `0`, or `False` here, I'd want the code to be explicit.\r\n\r\nIn all, I don't mind being more ambiguous in these cases; most of the time I would err on the side of \"the Programmer should understand truthiness\", and checks for `is None` are a separate class of usage. That said, I am happy to (and indeed, already do) apply a different code style for Awkward.\r\n\r\nLet me see which rules we need to turn on/off.\r\n\r\n",
  "created_at":"2023-03-19T15:55:12Z",
  "id":1475302075,
  "issue":2313,
  "node_id":"IC_kwDODBCWws5X71K7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-19T15:55:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2314](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6128be0) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8dfdf4e5e66b0a2db04fe8e42fd5c9d455455987?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8dfdf4e) will **decrease** coverage by `0.01%`.\n> The diff coverage is `86.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `83.27% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.73% <28.57%> (+0.05%)` | :arrow_up: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.40% <50.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.81% <60.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/\\_kernels.py](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2tlcm5lbHMucHk=) | `68.93% <66.66%> (-0.38%)` | :arrow_down: |\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `86.59% <84.00%> (-1.00%)` | :arrow_down: |\n| [src/awkward/\\_regularize.py](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3JlZ3VsYXJpemUucHk=) | `63.04% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.48% <100.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.82% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.25% <100.00%> (+0.25%)` | :arrow_up: |\n| ... and [7 more](https://codecov.io/gh/scikit-hep/awkward/pull/2314?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [3 files with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2314/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-03-14T14:15:56Z",
  "id":1468184836,
  "issue":2314,
  "node_id":"IC_kwDODBCWws5XgrkE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T11:51:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"## Supporting 0D arrays and Python scalars\r\n> **Note**\r\n> The following is just context for posterity, it is not necessary for reviewing this PR.\r\n\r\nIn a previous PR, I unified the typetracer scalar and 0D arrays to lift the degeneracy of scalar types (there are only 0D arrays for typetracer now). However, there are places in the code where we currently assume that we have integers. The logical first step is to ask \"can we unify these to a single type?\"It would be nice to have a \"canonical\" scalar type, be it `int` or `array()` so that we can make more assumptions in our code.\r\n\r\n- On the one hand, I'd prefer to support scalars as 0D arrays across all nplikes; otherwise, calling `int()` on a CuPy array to convert it to a Python scalar will require a sync which, although not moving a lot of data, is not ideal. \r\n- On the other hand, if we _require_ that the scalar types live on the GPU (i.e., only accept 0-D arrays), then Python scalars would need to be allocated on the device.\r\n\r\nMore generally, it's important to be able to disambiguate between \"known scalar\" and \"unknown scalar\" for typetracer arrays. Given that we can't mix array types, this means using Python scalars for known values, and 0D arrays for unknown values. This means that we have two distinct value types: `int` and `unknown-scalar`, regardless of whether the latter's actually a scalar or a 0D array.\r\n\r\nWith the above discussion, it's clear to me that there is no single type that describes a valid int-like index; the set cardinality is 2:\r\n- `int`\r\n- `TypeTracerArray(np.integer, shape=())`). \r\n\r\nFor non-typetracer arrays, we can also accept the `np.generic` scalar instances, i.e. \r\n- `int`\r\n- `np.integer[generic]`\r\n- `np.array(dtype=np.integer, shape=())`\r\n\r\nWe *could* also accept `np.generic` instances for typetracer, but I'll describe why that's not necessary below.\r\n\r\nThe missing type for typetracer is the unknown equivalent of `int`. If we introduce an \"unknown-int\" type, though, we must now consider the following types for an index into a `TypeTracerArray`:\r\n- `unknown-int`\r\n- `int`\r\n- `TypeTracerArray(np.int64, shape=())`\r\n- `TypeTracerArray(np.int64, shape=(...,))`\r\n\r\nWith a canonicalisation rule, this would become\r\n- `unknown-int`\r\n- `int`\r\n- `TypeTracerArray(np.int64, shape=(...,))`\r\n\r\nUltimately, it seems that permitting 0-D arrays as \"int-like\" objects is the cleanest path forward. This PR modifies the kernel dispatch so that 0D arrays are converted to `np.generic` instances with `.item()`, so within the `Content` protocols like `_getitem_XXX`, we may have any int-like object. That's what this PR now does.\r\n",
  "created_at":"2023-03-14T23:53:32Z",
  "id":1469017847,
  "issue":2314,
  "node_id":"IC_kwDODBCWws5Xj273",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-14T23:58:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"## Supporting mixed known-unknown scalars\r\n\r\nRight now, the `tuple` index pathway invokes `nplike.broadcast_arrays`, which loses information about integer indexes under typetracer; these are promoted to 0D typetracer arrays before broadcasting. This means that\r\n```python\r\narray[0]\r\n```\r\nand\r\n```python\r\narray[0,]\r\n```\r\nare not the same case; the latter loses information about the index value, i.e. cannot detect out-of-bounds at typetracer time.\r\n\r\nI've been trying to preserve true Python integers so that we can detect out-of-bounds indexing in e.g. `RegularArray` or 1D arrays with known-lengths. Perhaps this is too ambitious a goal? @jpivarski what do you think, is this a reasonable tradeoff?",
  "created_at":"2023-03-14T23:58:32Z",
  "id":1469022750,
  "issue":2314,
  "node_id":"IC_kwDODBCWws5Xj4Ie",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-14T23:59:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The failing test is a `repr` of `array(0)` vs `0`. This should probably be fixed by using `str` instead of `repr`, but that might not be a blanket rule, as oftentimes we want `repr`.",
  "created_at":"2023-03-15T00:06:21Z",
  "id":1469029807,
  "issue":2314,
  "node_id":"IC_kwDODBCWws5Xj52v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-15T00:06:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski following from our discussion, I just changed the error string to account for the `array(0)` instead of `0`. The motivation for this change is that this is part of the error message that refers to the internal subslice, not the external user-authored slice, and we're free to normalise those things as we see fit.",
  "created_at":"2023-03-17T11:43:34Z",
  "id":1473708840,
  "issue":2314,
  "node_id":"IC_kwDODBCWws5X1wMo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T11:43:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski we need something with an identity so we can avoid equality comparison (we want to support unknown scalars). That's why I used this constant. I might have made an oversight!",
  "created_at":"2023-03-17T20:16:10Z",
  "id":1474362633,
  "issue":2314,
  "node_id":"IC_kwDODBCWws5X4P0J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T20:16:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I see! `()` is also a length-zero sequence. Got it.",
  "created_at":"2023-03-17T20:59:29Z",
  "id":1474397683,
  "issue":2314,
  "node_id":"IC_kwDODBCWws5X4YXz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T20:59:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Actually, in this case it's even more peculiar;  `__eq__` raises an exception for unknown scalars, and currently it is always invoked for the first switch case(`if x == ()`). Using `is` we can bypass this and test identity. ",
  "created_at":"2023-03-17T22:46:33Z",
  "id":1474483363,
  "issue":2314,
  "node_id":"IC_kwDODBCWws5X4tSj",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-17T22:46:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> By \"array objects,\" do you mean buffers, like np.ndarray, cp.ndarray, or TypeTracerArray, not ak.Array? (It seems like that's what you mean.)\r\n\r\nIn an ecosystem with N array types, you'd think I'd be more precise by now ;)\r\n\r\nYes, I mean the nplike buffers. The rewrite of #2307 will simplify `nplike_of` to simply cache the nplike which returns `True` for `is_own_array_type`, and make `backend_of` do the heavy lifting w.r.t to inspecting layouts, arraybuilder, etc.",
  "created_at":"2023-03-15T00:16:31Z",
  "id":1469040079,
  "issue":2315,
  "node_id":"IC_kwDODBCWws5Xj8XP",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-15T00:16:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2315](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4188006) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/df1eec6152b80527c000c335d96ed21f65be9c3e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (df1eec6) will **decrease** coverage by `0.02%`.\n> The diff coverage is `95.23%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `76.82% <75.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.23% <100.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `92.99% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_errors.py](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `80.82% <100.00%> (+0.30%)` | :arrow_up: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `75.55% <100.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.29% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `98.21% <100.00%> (-0.07%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_linear\\_fit.py](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19saW5lYXJfZml0LnB5) | `89.09% <100.00%> (+1.59%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXNrLnB5) | `95.45% <100.00%> (-0.20%)` | :arrow_down: |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward/pull/2315?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2315/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-03-15T00:16:35Z",
  "id":1469040132,
  "issue":2315,
  "node_id":"IC_kwDODBCWws5Xj8YE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-15T00:16:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski to review this, I would benefit from the following considerations:\r\n- are you happy with the new filenames?\r\n- are you OK with the move towards imports?\r\n- would you prefer any additional organisational structure?\r\n   - Right now, I've added a flat hierarchy of files. We could nest them if needed.\r\n- Are you OK with the fact that L2 operations modules contain some L3 symbols in the global namespace? Users can only see these if they do evaluate e.g. ak.operations.ak_fill_none.cpu`, i.e. not from `ak.cpu` or `ak.operations.cpu`. If you're against this (which already happens), we could hide these inside the function definitions. [^note]\r\n\r\n[^note]: personally I think it's already enough trouble to get to these symbols that it's not worth the extra hassle for us",
  "created_at":"2023-03-16T12:30:53Z",
  "id":1471872103,
  "issue":2316,
  "node_id":"IC_kwDODBCWws5Xuvxn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-16T12:54:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii could I get a second opinion on the use of `from ak.operations.ak_xxx import *` here? I think it's better to control the exports in a single place (with `__all__`) rather than `__all__` _and_ having the `ak.operations` module *also* define these names with `from ak.operations.ak_xxx import xxx`. \r\n\r\nAre there any significant downsides to this? Ruff and other linters already can't see `ak.xxx` symbols because they're already `from awkward.operations import *` imported. This just means our internal `ak.operations` functions are also not visible. However, in the long run I'm planning on making awkward itself use `from mod import name` for all names, not just L3 ones.",
  "created_at":"2023-03-16T12:45:39Z",
  "id":1471891448,
  "issue":2316,
  "node_id":"IC_kwDODBCWws5Xu0f4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-16T12:49:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski with this PR, I'm introducing a new rule:\r\n- any symbol used by > 1 module should have a \"public\" name, i.e. `direct_content` vs `_direct_content`\r\n- L1/L2 modules should only contain public symbols that are exported\r\n\r\nUnder this rule, I plan to move the `_merge_parameters` functions out of `form.py` into some private module where they can become public symbols. I think this helps readability.",
  "created_at":"2023-03-16T12:51:40Z",
  "id":1471899543,
  "issue":2316,
  "node_id":"IC_kwDODBCWws5Xu2eX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-16T12:51:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It would be better to hide them, but maybe we should do so by hiding the operations module instead:\r\n\r\nI like this idea.\r\n\r\n>  _util.py can be a staging area for new helper functions,\r\n\r\nAgreed!!",
  "created_at":"2023-03-16T22:43:33Z",
  "id":1472859071,
  "issue":2316,
  "node_id":"IC_kwDODBCWws5Xygu_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-16T22:44:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2316](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (63af956) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/70d6bae48e67ecb48717fa5f98a8fdfac6130229?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (70d6bae) will **increase** coverage by `0.51%`.\n> The diff coverage is `94.04%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `72.35% <60.00%> (+0.11%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `38.09% <60.00%> (+10.31%)` | :arrow_up: |\n| [src/awkward/\\_regularize.py](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3JlZ3VsYXJpemUucHk=) | `63.04% <63.04%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2N1cHkucHk=) | `66.66% <66.66%> (+16.66%)` | :arrow_up: |\n| [src/awkward/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `83.27% <73.68%> (-0.82%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.00% <75.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.11% <80.00%> (+0.05%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bnppcC5weQ==) | `96.15% <80.00%> (+0.50%)` | :arrow_up: |\n| [src/awkward/\\_layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2xheW91dC5weQ==) | `83.50% <83.50%> (\u00f8)` | |\n| ... and [140 more](https://codecov.io/gh/scikit-hep/awkward/pull/2316?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-03-16T22:52:47Z",
  "id":1472865497,
  "issue":2316,
  "node_id":"IC_kwDODBCWws5XyiTZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-16T22:52:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closing this, as we decided against it _for now_, as no use case exists.",
  "created_at":"2023-04-25T15:33:32Z",
  "id":1522008556,
  "issue":2317,
  "node_id":"IC_kwDODBCWws5auAHs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T15:33:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Pinned to a specific version? Well, I guess that makes sense because our documentation site is an application, not a library.\r\n\r\nYes, we need to pin the pyodide version which is closely related. So, for now, it's a hard pin!",
  "created_at":"2023-03-16T22:44:50Z",
  "id":1472860058,
  "issue":2318,
  "node_id":"IC_kwDODBCWws5Xyg-a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-16T22:44:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2319?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2319](https://codecov.io/gh/scikit-hep/awkward/pull/2319?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (071ed15) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/70d6bae48e67ecb48717fa5f98a8fdfac6130229?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (70d6bae) will **increase** coverage by `0.54%`.\n> The diff coverage is `88.88%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2319?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2319?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `91.04% <88.88%> (+1.04%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/2319?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2J1ZmZlcnMucHk=) | `90.84% <88.88%> (+1.29%)` | :arrow_up: |\n\n... and [149 files with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2319/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-03-16T18:48:05Z",
  "id":1472568495,
  "issue":2319,
  "node_id":"IC_kwDODBCWws5XxZyv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T00:10:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski agreed! ",
  "created_at":"2023-03-17T00:37:30Z",
  "id":1472942342,
  "issue":2319,
  "node_id":"IC_kwDODBCWws5Xy1EG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T00:37:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@douglasdavis this *hopefully* should be what we discussed today :) ",
  "created_at":"2023-03-17T00:40:56Z",
  "id":1472944443,
  "issue":2319,
  "node_id":"IC_kwDODBCWws5Xy1k7",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2023-03-17T00:40:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR is workable, but for now superseded by #2319 ",
  "created_at":"2023-03-17T09:08:58Z",
  "id":1473467907,
  "issue":2320,
  "node_id":"IC_kwDODBCWws5X01YD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T09:08:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2321?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2321](https://codecov.io/gh/scikit-hep/awkward/pull/2321?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (29fd7f5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/db41d44523c607336ceda7683f3991f0a68f8cf3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (db41d44) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-17T06:55:47Z",
  "id":1473265190,
  "issue":2321,
  "node_id":"IC_kwDODBCWws5X0D4m",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-17T06:55:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2322?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2322](https://codecov.io/gh/scikit-hep/awkward/pull/2322?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e811e1b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/74107d459c34e3cf41188c10f8bb5880211f8dee?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (74107d4) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-18T09:49:35Z",
  "id":1474791085,
  "issue":2322,
  "node_id":"IC_kwDODBCWws5X54at",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-18T09:49:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"(You're faster than me.)",
  "created_at":"2023-03-20T14:00:58Z",
  "id":1476288552,
  "issue":2324,
  "node_id":"IC_kwDODBCWws5X_mAo",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "updated_at":"2023-03-20T14:00:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2325](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eed2431) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/116b6ac237284d5968d07ed60d6191ef74bd51b1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (116b6ac) will **increase** coverage by `0.01%`.\n> The diff coverage is `90.62%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2F2cm9fZmlsZS5weQ==) | `75.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.22% <75.00%> (\u00f8)` | |\n| [src/awkward/\\_parameters.py](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BhcmFtZXRlcnMucHk=) | `78.16% <78.16%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.74% <85.71%> (-0.09%)` | :arrow_down: |\n| [src/awkward/\\_backends.py](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzLnB5) | `83.85% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.28% <100.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_connect/hist.py](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvaGlzdC5weQ==) | `47.36% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/trees.py](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3RyZWVzLnB5) | `92.10% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `91.19% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.21% <100.00%> (\u00f8)` | |\n| ... and [50 more](https://codecov.io/gh/scikit-hep/awkward/pull/2325?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-03-20T13:27:06Z",
  "id":1476232444,
  "issue":2325,
  "node_id":"IC_kwDODBCWws5X_YT8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-20T14:18:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Incidentally, this relates to a concept of module organisation that I'm still working out. My opinion has changed over the years, and Awkward provides a particularly interesting example of a package with lots of interrelated code. I *think* the main rules that I could write down for my preferences are:\r\n- Flat is better than nested\r\n   - Grouping is important, but it is possible to group subunits fairly endlessly\r\n- Smaller modules admit easier groupings\r\n- Named modules are better than `utils.py`\r\n- Explicit imports (`from ak._util import x`) are better than implict attribute lookups (`ak._util.x`)\r\n  - Shorter lines are generally better\r\n  - Type hints are particularly much more readable\r\n\r\nWith a preference for \"readability\" (as I define it), this approach seems to work quite well. There are, or course, tradeoffs:\r\n- Cyclic import errors are more likely with `from module import symbol` if one *also* imports submodules in `__init__`; Python can resolve import cycles as long as no-one tries to read the module dictionaries during resolution time. \r\n   - Therefore, `from x.y.z` is more common than `from x import z` (where `y` exports `z`).\r\n- Ambiguous symbol names are harder to locate\r\n   - Use of meaningful names is therefore important! (e.g. `nplike_of` vs `of`)\r\n\r\n\r\nTo address these shortcomings, I'm pushing imports to the module scope (rather than relying on `ak._util.xxx` to work at invocation time) so that we can try and maximally decouple our modules. That will implicitly help to draw the boundaries between code (by promoting new modules) that we can then place into different packages (directories with `__init__.py`, given how overloaded the term \"package\" is in Python). \r\n\r\n> But there are now so many helper modules that maybe they should be collected under one subdirectory. Like, maybe everything that used to be in _util.py (plus these parameter-manipulation functions) should be under [...]\r\n\r\nThis is something I'm open to, too. My approach, which I think mirrors yours, is to figure this out when we need to, rather than up front. I've long accepted that it's better to solve these things iteratively rather than all in one go. Specifically, how much nesting, and what kind of naming structure to use. There is always a risk that everything can go in `_util` if you're generalising enough. Right now, I don't see a huge need to introduce `_util`, but again, I'm open to it if you think it makes sense.",
  "created_at":"2023-03-20T14:59:23Z",
  "id":1476389709,
  "issue":2325,
  "node_id":"IC_kwDODBCWws5X_-tN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-20T14:59:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Iteratively is good. One way to stay grounded is to remember what this is for: **efficiently finding the code that you're looking for**. Thus,\r\n\r\n> * Named modules are better than `utils.py`\r\n\r\nThe advantage of nested hierarchies is not having to look at everything in the world when you're looking for a specific thing; the disadvantage is that if the nesting scheme is not natural or guessable at the time of lookup, searching for something would involve back-tracking.\r\n\r\nSearch tools like grep, GitHub search, and even just the browser incremental search[^1] shift the balance toward flatter hierarchies, but only up to a point. Having a lot of little files in the top-level was a problem when we needed to change `VERSION_INFO` frequently (and it's still a little problem navigating to `uproot/version.py`; it would be better if they were near the start of the alphabet!).\r\n\r\n[^1]: Incremental search in a web browser was a _huge_ plus when it was added. It was enough to make me switch from... I think Netscape to Mozilla. At that time, the search was `/` and if the highlighted match was a link, `enter` would follow the link. Navigating the web by keystrokes was great; now you have to have an extra `tab` step to go from highlighted match to follow it, which is a little stumbling block, but not too bad.",
  "created_at":"2023-03-20T15:25:18Z",
  "id":1476437686,
  "issue":2325,
  "node_id":"IC_kwDODBCWws5YAKa2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-20T15:25:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2328?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2328](https://codecov.io/gh/scikit-hep/awkward/pull/2328?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3e97244) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6adf9a466e288dd709e8ce92e47445a1d0b8bcc8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6adf9a4) will **decrease** coverage by `0.07%`.\n> The diff coverage is `83.33%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2328?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/2328?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.27% <\u00f8> (\u00f8)` | |\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2328?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `90.06% <83.33%> (-0.39%)` | :arrow_down: |\n\n... and [5 files with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2328/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-03-22T13:29:49Z",
  "id":1479570731,
  "issue":2328,
  "node_id":"IC_kwDODBCWws5YMHUr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-22T13:29:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski as this touches broadcasting code, I'd appreciate your eyes to take a close look at the changes to `_broadcasting.py` in order to assert that I've not introduced a regression. It looks like we don't actually pull out the contents of `RegularArray`, which we should be doing according the context of the branch (given that `all_same_offsets` checks the `RegularArray` offsets).",
  "created_at":"2023-03-21T14:04:20Z",
  "id":1477896855,
  "issue":2329,
  "node_id":"IC_kwDODBCWws5YFuqX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T14:04:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2329?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2329](https://codecov.io/gh/scikit-hep/awkward/pull/2329?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (da5c4fa) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6adf9a466e288dd709e8ce92e47445a1d0b8bcc8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6adf9a4) will **decrease** coverage by `0.02%`.\n> The diff coverage is `96.92%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2329?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/2329?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `90.06% <83.33%> (-0.39%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2329?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `92.00% <98.24%> (+1.02%)` | :arrow_up: |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2329?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.33% <100.00%> (+0.04%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-03-21T14:23:31Z",
  "id":1477932072,
  "issue":2329,
  "node_id":"IC_kwDODBCWws5YF3Qo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T14:50:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"(In my tests, and presumably in your case as well...) It keeps increasing because it hasn't reached the limit of what the Python process is allowed, so the garbage collector doesn't get invoked. You can test that (I just did) by inserting `gc.collect()` between each iteration:\r\n\r\n```python\r\nimport awkward as ak\r\nimport gc\r\n\r\ndef f(arr):\r\n    result = 0\r\n    for i in range(len(arr)):\r\n        result += (arr[i] == \"mov\")\r\n    return result\r\n\r\n\r\nfor i in range(100):\r\n    arr = ak.Array(['aaaaa' * 100 * 1024] * 1024)\r\n    f(arr)\r\n    gc.collect()\r\n```\r\n\r\nThis code produces a lot of little strings. (I can follow up with a better way to do it, but maybe you know it already and this is just a demonstration of the effect.)",
  "created_at":"2023-03-21T20:56:51Z",
  "id":1478568790,
  "issue":2330,
  "node_id":"IC_kwDODBCWws5YIStW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T20:56:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"For what it's worth, a vectorized way to count the number of strings that are equal to `\"mov\"` (replacing `f`) is\r\n\r\n```python\r\nak.count_nonzero(arr == \"mov\")\r\n```\r\n\r\nThe default `axis=None` for [ak.count_nonzero](https://awkward-array.org/doc/main/reference/generated/ak.count_nonzero.html) gives you a scalar; if what you intended here was to apply it to a jagged array of strings and get an array, a count either along the first or second axis, then set `axis=0` or `axis=1`.\r\n\r\nUsing a vectorized expression like this is not only much faster (`ak.Array.__getitem__`, used in \"`arr[i]`\", is slow\u2014much slower than a builtin Python list), it also doesn't create all of those little strings that have to get cleaned up by garbage collection. It also releases [Python's GIL](https://realpython.com/python-gil/).",
  "created_at":"2023-03-21T21:04:56Z",
  "id":1478577924,
  "issue":2330,
  "node_id":"IC_kwDODBCWws5YIU8E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T21:04:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"You are right, using `gc.collect` fixes the issue in sample code. I was facing this issue while using awkward array and numba for processing a large dataset in batches. The memory usage will keep on increasing after processing each batch and eventually the process will be killed. \r\n\r\nThe following code is correctly reproducing the issue\r\n\r\n``` python\r\nimport awkward as ak\r\nimport numba as nb\r\nimport gc\r\n\r\nfrom tqdm.cli import tqdm\r\n\r\n@nb.njit\r\ndef f(arr):\r\n    result = 0\r\n    for i in range(len(arr)):\r\n        result += (arr[i] == \"mov\")\r\n    return result\r\n\r\n\r\nfor i in tqdm(range(100)):\r\n    arr = ak.Array(['aaaaa' * 100 * 1024] * 1024)\r\n    f(arr)\r\n    gc.collect()\r\n```",
  "created_at":"2023-03-21T21:17:05Z",
  "id":1478591542,
  "issue":2330,
  "node_id":"IC_kwDODBCWws5YIYQ2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T21:17:05Z",
  "user":"MDQ6VXNlcjc1OTcxOTE2"
 },
 {
  "author_association":"MEMBER",
  "body":"Indeed it is. `gc.collect()` is also returning smaller numbers, since it's finding fewer objects to free.\r\n\r\nIt also explains why you were doing an imperative loop, rather than vectorizing. Presumably, there's more to the real function `f` that requires Numba.",
  "created_at":"2023-03-21T21:21:19Z",
  "id":1478595760,
  "issue":2330,
  "node_id":"IC_kwDODBCWws5YIZSw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T21:21:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I jumped on this one because it looks so much like a recent (and very long-running) issue, #2311. In that issue, I was calling a Python C API function to handle strings and didn't know that it created one more reference count than I was expecting.\r\n\r\nThis is like that, but Numba is in the mix. Strings and byte objects in Numba's lowered code are actually Python strings and byte objects, so I was wrong about it releasing the GIL. It has to reacquire the GIL to call Python's C API:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/c44a62280779acf199955c8632dca64b56b9fc09/src/awkward/behaviors/string.py#L235-L247\r\n\r\nThe [PyUnicode_FromKindAndData](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromKindAndData) and [PyBytes_FromStringAndSize](https://docs.python.org/3/c-api/bytes.html#c.PyBytes_FromStringAndSize) functions return a new reference, but I thought that's what Numba wanted. The data from the original array is copied into those new Python objects, but that's good because the new Python objects may outlive the original array.\r\n\r\nThe fix puts a `pyapi.decref(pystr)` right after ... !\r\n\r\nOkay, I got it: strings and byte objects in Numba's lowered code _are not_ Python strings and byte objects ([UnicodeType](https://github.com/numba/numba/blob/4b8b176b5bdd2f93200b1eca727411c3e1657858/numba/core/types/misc.py#L530-L537) and [Bytes](https://github.com/numba/numba/blob/4b8b176b5bdd2f93200b1eca727411c3e1657858/numba/core/types/containers.py#L96-L103)), but I use Python objects to create them. After having created the Numba string or bytes object, the Numba object has a life of its own, reference-counted with Numba's Runtime (NRT), while the Python object is ignored. _That_ is why I must delete the Python object; it's not what Numba is using after all!\r\n\r\nSo this was a different issue, ultimately, than #2311, but it also came down to a misunderstanding of what the other library is doing. Actually, based on this new understanding, it ought to be possible to make Numba strings and bytes objects directly, and therefore not acquire the GIL. Maybe someday.",
  "created_at":"2023-03-21T22:33:57Z",
  "id":1478682845,
  "issue":2330,
  "node_id":"IC_kwDODBCWws5YIujd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T22:36:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - you'd need to build cppyy from source to test it :-)",
  "created_at":"2023-03-21T20:57:29Z",
  "id":1478569494,
  "issue":2331,
  "node_id":"IC_kwDODBCWws5YIS4W",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-21T20:57:29Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2331?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2331](https://codecov.io/gh/scikit-hep/awkward/pull/2331?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5744c09) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c44a62280779acf199955c8632dca64b56b9fc09?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c44a622) will **not change** coverage.\n> The diff coverage is `25.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2331?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2331?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.03% <25.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-03-21T21:09:01Z",
  "id":1478582831,
  "issue":2331,
  "node_id":"IC_kwDODBCWws5YIWIv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T21:09:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I agree with the rationale here; I did a simple grep, and checked beforehand as to whether there were any hits that were not to be replaced. I'll get a test env up and running soon, but for now I am happy to merge.",
  "created_at":"2023-03-21T22:45:10Z",
  "id":1478692419,
  "issue":2331,
  "node_id":"IC_kwDODBCWws5YIw5D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T22:45:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2332?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2332](https://codecov.io/gh/scikit-hep/awkward/pull/2332?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8352ef3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c44a62280779acf199955c8632dca64b56b9fc09?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c44a622) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2332?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/2332?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `77.27% <100.00%> (+0.14%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-03-21T22:30:43Z",
  "id":1478680550,
  "issue":2332,
  "node_id":"IC_kwDODBCWws5YIt_m",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-22T13:20:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, I actually figured out what's going on here (in https://github.com/scikit-hep/awkward/issues/2330#issuecomment-1478682845).\r\n\r\nNumba's string and byte object types ([UnicodeType](https://github.com/numba/numba/blob/4b8b176b5bdd2f93200b1eca727411c3e1657858/numba/core/types/misc.py#L530-L537) and [Bytes](https://github.com/numba/numba/blob/4b8b176b5bdd2f93200b1eca727411c3e1657858/numba/core/types/containers.py#L96-L103)) are _not_ Python types. I'm just using the Python API to build them. `pyapi.to_native_value` is a general Numba function for converting Python objects into Numba objects, and it's the Numba objects that escaped this function; the Python objects were ignored. Therefore, the `pyapi.decref(pystr)` is absolutely necessary to delete the no-longer-used Python object, which was a new reference from [PyUnicode_FromKindAndData](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromKindAndData) or [PyBytes_FromStringAndSize](https://docs.python.org/3/c-api/bytes.html#c.PyBytes_FromStringAndSize).\r\n\r\nAlso, it's in principle possible to create Numba strings or byte objects directly, without going through Python, and therefore avoid acquiring the GIL. That would be an optimization for the future.\r\n\r\nAlso @ianna, this clears up some mysteries that we had looking at Numba strings. First, there was a time when I wasn't able to find where we handle strings (\"Somehow, it's being done correctly, but I can't figure out where!\"): it was in `awkward/behaviors/string.py`, not `awkward/_connect/numba/*`. But also, some of the confusions I had about ArrayBuilder and string handling (or byte object handling) was related to the fact that I had thought that Numba was using Python objects for strings and byte objects, rather than its own.",
  "created_at":"2023-03-21T22:40:31Z",
  "id":1478689028,
  "issue":2332,
  "node_id":"IC_kwDODBCWws5YIwEE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T22:40:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77, what do you think? Now that the reason for the `pyapi.decref` is understood, can we remove the test, so that we don't get bad surprises when running pytest in parallel? It could be acceptable to take this fix without a test.\r\n\r\nI'll mark you as reviewer.",
  "created_at":"2023-03-21T22:42:13Z",
  "id":1478690223,
  "issue":2332,
  "node_id":"IC_kwDODBCWws5YIwWv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T22:42:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Memory regressions are hard to test for. We definitely could guard these tests behind a flag, so that they're runnable when explicitly requested. \r\n\r\nEqually, I think a better test here is to ensure the refcounting is valid. However, given that the test for this is ~100% identical to writing the actual implementation, I'd be happy to just remove the test.",
  "created_at":"2023-03-21T22:47:47Z",
  "id":1478694619,
  "issue":2332,
  "node_id":"IC_kwDODBCWws5YIxbb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T22:47:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This reference is inaccessible. Earlier, I was trying to use `sys.getrefcount` for the test, but no\u2014it's lost inside of a Numba-compiled block and doesn't participate in NRT (Numba Runtime). I don't see any way to get at the reference count from the outside.",
  "created_at":"2023-03-21T22:53:54Z",
  "id":1478699098,
  "issue":2332,
  "node_id":"IC_kwDODBCWws5YIyha",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T22:53:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'd be more comfortable with removing the test, but it exists in this PR's history if we come back and want to set up a Numba memory suite. (This wouldn't be the only thing to check.)",
  "created_at":"2023-03-21T22:56:02Z",
  "id":1478700584,
  "issue":2332,
  "node_id":"IC_kwDODBCWws5YIy4o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T22:56:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This reference is inaccessible. Earlier, I was trying to use `sys.getrefcount` for the test, but no\u2014it's lost inside of a Numba-compiled block and doesn't participate in NRT (Numba Runtime). I don't see any way to get at the reference count from the outside.\r\n\r\nOh yes, that would be the case! I'm glad we've caught *another* memory bug; that's one fewer left in the wild!",
  "created_at":"2023-03-21T23:10:35Z",
  "id":1478712215,
  "issue":2332,
  "node_id":"IC_kwDODBCWws5YI1uX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T23:10:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fantastic! Thanks for fixing it!",
  "created_at":"2023-03-22T06:09:17Z",
  "id":1478972215,
  "issue":2332,
  "node_id":"IC_kwDODBCWws5YJ1M3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-22T06:09:17Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2333?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2333](https://codecov.io/gh/scikit-hep/awkward/pull/2333?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (653e5ec) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/471793e3a08f7932ce410c4eaa46cade533315ce?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (471793e) will **decrease** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2333?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2333?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.75% <\u00f8> (-0.17%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/2333?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `98.33% <100.00%> (+0.02%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-03-21T23:37:26Z",
  "id":1478728815,
  "issue":2333,
  "node_id":"IC_kwDODBCWws5YI5xv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-21T23:37:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"TODO: this should simplify into broadcasting.",
  "created_at":"2023-03-22T13:17:25Z",
  "id":1479553316,
  "issue":2333,
  "node_id":"IC_kwDODBCWws5YMDEk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-22T13:17:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Should this be `pr-on-hold` or closed?",
  "created_at":"2023-09-04T15:26:20Z",
  "id":1705446526,
  "issue":2333,
  "node_id":"IC_kwDODBCWws5lpwx-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:26:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'll close for now.",
  "created_at":"2023-09-26T08:13:25Z",
  "id":1735047152,
  "issue":2333,
  "node_id":"IC_kwDODBCWws5narfw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-26T08:13:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2334?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2334](https://app.codecov.io/gh/scikit-hep/awkward/pull/2334?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (60e9f8f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/ad04fc7140ad556519ed072432f5250a36a48070?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ad04fc7) will **not change** coverage.\n> Report is 3 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-03-22T14:44:26Z",
  "id":1479698801,
  "issue":2334,
  "node_id":"IC_kwDODBCWws5YMmlx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-13T18:18:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna I think creating a new section was a good decision. I've renamed it to `how-to-use-in-cpp`, because I think we should *also* move the `LayoutBuilder` documentation here? If I understand correctly, we should be able to use `LayoutBuilder` *in* cppyy.\r\n\r\nIf you and @jpivarski agree, then I won't yet move the layout-builder documentation here; I'll make a new PR for that.",
  "created_at":"2023-03-22T15:26:40Z",
  "id":1479777559,
  "issue":2334,
  "node_id":"IC_kwDODBCWws5YM50X",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-22T15:27:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Well, that took some figuring out. I wrote a build script to run inside a `manylinux` container, which is used to generate the cppyy wheels. This allows to build a[ separate container that acts as a binary store for the built wheels](https://github.com/agoose77/cppyy-build-container), which are then extracted in our CI and installed.\r\n\r\nFor the tests, we install the wheels in a dedicated non-ROOT cppyy job. For the docs, we have a dedicated build-the-cppyy-notebook job that does a similar thing.\r\n\r\nThis is a somewhat ugly procedure: I'd prefer to push the wheels to a PyPI registry, but off the top of my head I can't think of any non PyPI-registries that we can easily use (though we could push to an AWS bucket).\r\n\r\nOnce `cppyy` is released, we should remove this monstrosity.\r\n\r\nIn this PR I also attempted to upgrade our pyodide toolchain. Unfortunately, there are yet more out-of-tree bugs in pyodide whose fixes have yet to be released. So, that's on the bench for a while.",
  "created_at":"2023-11-12T23:29:30Z",
  "id":1807280042,
  "issue":2334,
  "node_id":"IC_kwDODBCWws5ruOeq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-12T23:31:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've added a new section to the user guide:\r\n\r\n![image](https://github.com/scikit-hep/awkward/assets/1248413/dccc9c3b-b975-4eff-b207-28713f6a41ef)\r\n\r\nI've not renamed the actual file for the existing LayoutBuilder docs; this means that we don't need to rewrite the URLs for existing hyperlinks in the wild.\r\n\r\nOnce I've checked the deployment, I'll merge if you give this a :+1: ",
  "created_at":"2023-11-13T18:10:07Z",
  "id":1808732164,
  "issue":2334,
  "node_id":"IC_kwDODBCWws5rzxAE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-13T18:10:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2335?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2335](https://codecov.io/gh/scikit-hep/awkward/pull/2335?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3d15759) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/a9dd20a4480ea3d5147f5cb3fc0ab7b1603f9dc6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a9dd20a) will **decrease** coverage by `0.01%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2335?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2335?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.79% <0.00%> (-0.25%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-03-22T16:51:43Z",
  "id":1479925388,
  "issue":2335,
  "node_id":"IC_kwDODBCWws5YNd6M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-22T16:51:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This was pulled out of #2334 because we should let the docs PR wait until cppyy 3.0.1 is released and we want the bug-fix (separate from docs) to go in as soon as possible.\r\n> \r\n> @ianna, has this passed local tests (with cppyy 3.0.1 installed on your comptuer)? If so, we can merge it. The strictness of actually testing it in CI will come when cppyy 3.0.1 is on PyPI.\r\n\r\nYes, it does pass local tests.",
  "created_at":"2023-03-22T18:08:29Z",
  "id":1480036356,
  "issue":2335,
  "node_id":"IC_kwDODBCWws5YN5AE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-22T18:08:29Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Superseded by #2356.",
  "created_at":"2023-04-03T17:59:51Z",
  "id":1494746821,
  "issue":2336,
  "node_id":"IC_kwDODBCWws5ZGAbF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-03T17:59:51Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The minimal reproducer here is \r\n```python\r\nimport awkward as ak\r\nak.to_parquet([], \"test.parquet\")\r\n```\r\nwhich tries to write an `EmptyArray` to Parquet.",
  "created_at":"2023-03-23T12:14:29Z",
  "id":1481088825,
  "issue":2337,
  "node_id":"IC_kwDODBCWws5YR585",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-23T12:14:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@agoose77 So actually, the reason I didn't go with that, is that this didn't work back in awkward 1.8.0 (pyarrow version 3.0.0). For example;\r\n\r\n```\r\n\r\n[ins] In [1]: import awkward as ak\r\n         ...: to_be_saved = {\"itemA\": [[], [[]]]}\r\n         ...: as_record = ak.Record(to_be_saved)\r\n         ...: ak.to_parquet(as_record, \"example.parquet\")\r\n\r\n[ins] In [2]: ak.to_parquet([], \"example2.parquet\")\r\n---------------------------------------------------------------------------\r\nArrowInvalid                              Traceback (most recent call last)\r\n<ipython-input-2-2bb2c79799a9> in <module>\r\n----> 1 ak.to_parquet([], \"example2.parquet\")\r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/awkward/operations/convert.py in to_parquet(array, where, explode_records, list_to32, string_to32, bytestring_to32, **options)\r\n   3049         options[\"schema\"] = first.schema\r\n   3050 \r\n-> 3051     writer = pyarrow.parquet.ParquetWriter(**options)\r\n   3052     writer.write_table(pyarrow.Table.from_batches([first]))\r\n   3053 \r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/pyarrow/parquet.py in __init__(self, where, schema, filesystem, flavor, version, use_dictionary, compression, write_statistics, use_deprecated_int96_timestamps, compression_level, use_byte_stream_split, writer_engine_version, data_page_version, **options)\r\n    623             writer_engine_version=engine_version,\r\n    624             data_page_version=data_page_version,\r\n--> 625             **options)\r\n    626         self.is_open = True\r\n    627 \r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/pyarrow/_parquet.pyx in pyarrow._parquet.ParquetWriter.__cinit__()\r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n\r\nArrowInvalid: NullType Arrow field must be nullable\r\n\r\n[ins] In [3]: ak.__version__\r\nOut[3]: '1.8.0'\r\n\r\n[ins] In [4]: import pyarrow; pyarrow.__version__\r\nOut[4]: '3.0.0'\r\n\r\n```\r\n\r\nArguably that was/is a bug too, but it can't quite be the same one.",
  "created_at":"2023-03-23T12:29:24Z",
  "id":1481111047,
  "issue":2337,
  "node_id":"IC_kwDODBCWws5YR_YH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-23T13:03:23Z",
  "user":"MDQ6VXNlcjEyOTk2NzYz"
 },
 {
  "author_association":"MEMBER",
  "body":"I tried toggling a few things (including `extensionarray=False`, to turn off our new metadata-preservation), and I found that it's not a problem between Awkward and Arrow, but the Arrow \u2192 Parquet step in the pyarrow library doesn't like non-nullable unknown types.\r\n\r\nFor instance, I can run your example, replacing `ak.to_parquet` with `ak.to_arrow_table`.\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> to_be_saved = {\"itemA\": [[], [[]]]}\r\n>>> as_record = ak.Record(to_be_saved)\r\n>>> ak.to_arrow_table(as_record)\r\npyarrow.Table\r\nitemA: extension<awkward<AwkwardArrowType>> not null\r\n----\r\nitemA: [[[[],[0 nulls]]]]\r\n```\r\n\r\nFrom the way that Arrow is presenting this as a repr, it's pretty clear that they think the only purpose of this null type (equivalent of our `EmptyArray` and `UnknownType`) is to say how many missing values there are. So although it got this far, it's not too surprising why the Arrow-Parquet group didn't implement the next step of converting it to Parquet.\r\n\r\n> We do have some edge cases in which empty lists like this appear in some items.\r\n\r\nBut you want them to be properly typed, anyway, right? If you're getting data directly from `ak.from_iter` (Python lists and dicts) and putting them in Parquet files, you won't be guaranteeing that the Parquet files have the same types, and I think you want that. This is a reminder to me that we need to create a function that would allow users to assign types to arrays, which is a tricky problem because what if the type you're trying to assign is incompatible with the array?\r\n\r\nIf these are simple fields, you can use [ak.values_astype](https://awkward-array.org/doc/main/reference/generated/ak.values_astype.html) to set leaf nodes to a given dtype. Applying this across a record with many fields is fine if you want all numeric values to have the same dtype, but it's not the right interface if you want some to be integers and others to be floating point. Also, you need to use the `including_unknown=True` flag to turn `[]` from a list of unknown type (`var * unknown`) into a list of floating point type (`var * float64`), but your data is doubly nested; what if you have `[]` and you want it to be a _list of lists_ of floating point (`var * var * float64`)? It won't be able to know that. That's why we'll need the general \"assign type to array\" function.\r\n\r\nA cheesy way to do it, if you're collecting data with `ak.from_iter`, is to make a prototype of the type of data that you want, insert it as the last item in the iteration, and then slice it off (`array[:-1]`).",
  "created_at":"2023-03-23T15:05:25Z",
  "id":1481360402,
  "issue":2337,
  "node_id":"IC_kwDODBCWws5YS8QS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-23T15:05:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Note to self: the \"prototype method\" of assigning a type is a good hint of how to write that type-setting function. We have a way of turning a Form into a length-0 array (it's an L2 function), and if you concatenate that length-0 array onto the array with unknowns, it would give the appropriate type to those unknowns. If the types conflict, you'd get unions, which might be the right thing.\r\n\r\nThis should be turned into an issue, for brainstorming how to make that function.",
  "created_at":"2023-03-23T15:09:59Z",
  "id":1481370021,
  "issue":2337,
  "node_id":"IC_kwDODBCWws5YS-ml",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-23T15:09:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski \r\n\r\nMany thanks for taking a look at this. You are correct, ideally an empty array would retain the type that it would have possessed had it not been empty. However, given ducktyping, it's not too much of a barrier in practice.\r\n\r\nI tried your workaround, but sadly no dice;\r\n```\r\n[ins] In [1]: import awkward as ak\r\n         ...: problem_record = ak.from_iter([[], [[]], [0]])\r\n         ...: print(problem_record)\r\n         ...: print(problem_record[:-1])\r\n         ...: to_be_saved = {\"itemA\": problem_record[:-1]}\r\n         ...: as_record = ak.Record(to_be_saved)\r\n         ...: out = ak.to_parquet(as_record, \"example10.parquet\")\r\n[[], [[]], [0]]\r\n[[], [[]]]\r\n---------------------------------------------------------------------------\r\nArrowNotImplementedError                  Traceback (most recent call last)\r\nCell In [1], line 7\r\n      5 to_be_saved = {\"itemA\": problem_record[:-1]}\r\n      6 as_record = ak.Record(to_be_saved)\r\n----> 7 out = ak.to_parquet(as_record, \"example10.parquet\")\r\n\r\n\r\n```\r\n\r\nI did some tests with `to_arrow_table`, just in case that offered a work around.\r\nIn more recent versions it goes just like you say, I can make the table, but I cannot write it.\r\n\r\nSo then I started looking at `values_astype`, but that doesn't seem to effect an empty array.\r\n```\r\n...: my_array = ak.Array([[], [[]]])\r\n...: my_array = ak.values_as_type(my_array, int)\r\n...: my_array\r\n< Array [[], [[]]] type='2 * var * var * unknown'>\r\n```\r\n\r\nRight now I don't have any workaround for this, but it seems vaguely possible that using the pyarrow interface directly I could construct something.",
  "created_at":"2023-03-23T17:32:32Z",
  "id":1481604327,
  "issue":2337,
  "node_id":"IC_kwDODBCWws5YT3zn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-23T17:32:32Z",
  "user":"MDQ6VXNlcjEyOTk2NzYz"
 },
 {
  "author_association":"MEMBER",
  "body":"It didn't work because you had the wrong depth: the zero is supposed to be one deeper, right?\r\n\r\n```python\r\n>>> ak.from_iter([[], [[]], [0]]).show(type=True)\r\ntype: 3 * var * union[\r\n    var * unknown,\r\n    int64\r\n]\r\n[[],\r\n [[]],\r\n [0]]\r\n\r\n>>> ak.from_iter([[], [[]], [[0]]]).show(type=True)\r\ntype: 3 * var * var * int64\r\n[[],\r\n [[]],\r\n [[0]]]\r\n```\r\n\r\nI'm assuming that your data are not union-typed: that you don't have any data that are sometimes lists and sometimes numbers.",
  "created_at":"2023-03-23T17:36:00Z",
  "id":1481609707,
  "issue":2337,
  "node_id":"IC_kwDODBCWws5YT5Hr",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-23T17:36:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski yes you are right, provided the dummy value is put to max depth, it fixes the issue;\r\n```python3\r\nimport awkward as ak\r\ndef typify(my_array):\r\n    array_type = my_array.type\r\n    depth = 0\r\n    # decide if the array has a proper type, and also ascertain the depth.\r\n    while hasattr(array_type, 'content'):\r\n        depth += 1\r\n        array_type = array_type.content\r\n    # If the array doesn't have a proper type\r\n    if ak.types.UnknownType() == array_type:\r\n        # make a dummy item to give it a type\r\n        dummy_item = [0]\r\n        for _ in range(depth):\r\n            dummy_item = [dummy_item]\r\n        as_list = my_array.to_list()\r\n        typed_array = ak.Array(as_list + dummy_item)\r\n        # then cut the dummy item away again\r\n        my_array = typed_array[:-1]\r\n    return my_array\r\n    \r\n\r\nmy_array = ak.Array([[], [[]]])\r\nprint((my_array, typify(my_array)))\r\nmy_array = ak.Array([[], [[2.3]]])\r\nprint((my_array, typify(my_array)))\r\n\r\nproblem_record = ak.from_iter([[], [[]]])\r\nsafe_record = ak.from_iter([[], [[2.3]]])\r\nto_be_saved = {\"itemA\": typify(problem_record),\r\n               \"itemB\": typify(safe_record)}\r\nas_record = ak.Record(to_be_saved)\r\nout = ak.to_parquet(as_record, \"example11.parquet\")\r\n```",
  "created_at":"2023-03-23T21:07:50Z",
  "id":1481911892,
  "issue":2337,
  "node_id":"IC_kwDODBCWws5YVC5U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-23T21:10:59Z",
  "user":"MDQ6VXNlcjEyOTk2NzYz"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski If this is a long-standing bug in PyArrow, should we add an explicit test for `EmptyArray` in Awkward's conversion routine such that we can raise an exception to inform users what this error really pertains to?\r\n\r\nOff the top of my head, if Arrow tables can encode this information but Parquet cannot, then we should expose an option to `to_arrow_table` that is `False` by default, so that `ak.to_arrow_table` works.",
  "created_at":"2023-03-24T08:45:22Z",
  "id":1482445709,
  "issue":2337,
  "node_id":"IC_kwDODBCWws5YXFON",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-24T08:45:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"There are quite a few data structures that Arrow can represent but cannot convert into Parquet. In general, I report each one in the Arrow JIRA, but I guess I didn't do this one. They eventually do get covered.\r\n\r\nI was just trying to find the JIRA, but they've [moved to GitHub Issues](https://github.com/apache/arrow/issues) (yay)!\r\n\r\nIn trying to construct a minimal reproducer, I find that they directly forbid a null type from being non-nullable:\r\n\r\n```python\r\n>>> import pyarrow as pa\r\n>>> pa.field(\"name\", pa.null(), nullable=False)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"pyarrow/types.pxi\", line 2266, in pyarrow.lib.field\r\nValueError: A null type field may not be non-nullable\r\n```\r\n\r\nIn our code, we must be getting at it some other way that bypasses this check, but it's clear what their intentions are. We _do_ allow an `UnknownType` to not be inside an `OptionType`, so the problem is that we have a broader type system and a direct conversion makes something that Arrow doesn't consider legal.\r\n\r\nSo the right way to fix this is to wrap our `EmptyArray` inside `UnmaskedArray` on conversion to Arrow, but include enough metadata in the `ExtensionType` that when we convert it back, we know to remove the option-type, so that it's round-trip preserved. I'll make this an issue.",
  "created_at":"2023-03-24T14:26:35Z",
  "id":1482892635,
  "issue":2337,
  "node_id":"IC_kwDODBCWws5YYyVb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-24T14:26:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski is this covered by #2365?",
  "created_at":"2023-04-24T22:00:48Z",
  "id":1520885490,
  "issue":2338,
  "node_id":"IC_kwDODBCWws5apt7y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-24T22:00:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's exactly what this is. It can go in that PR as \"Successfully merging this pull request may close these issues.\"",
  "created_at":"2023-04-24T22:20:37Z",
  "id":1520902171,
  "issue":2338,
  "node_id":"IC_kwDODBCWws5apyAb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-24T22:20:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2342?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2342](https://codecov.io/gh/scikit-hep/awkward/pull/2342?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9103f2f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/60790fae55c2606d7dea317f51a8faa28c79859d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (60790fa) will **not change** coverage.\n> The diff coverage is `50.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2342?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/hist.py](https://codecov.io/gh/scikit-hep/awkward/pull/2342?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvaGlzdC5weQ==) | `47.36% <0.00%> (\u00f8)` | |\n| [src/awkward/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2342?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvamF4LnB5) | `84.48% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-03-28T00:42:08Z",
  "id":1486047603,
  "issue":2342,
  "node_id":"IC_kwDODBCWws5Yk0lz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-13T16:27:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2343?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2343](https://codecov.io/gh/scikit-hep/awkward/pull/2343?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a789288) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/1f70725bfc8a3d6969881c88504797febc08c088?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1f70725) will **decrease** coverage by `0.01%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2343?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/2343?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.27% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2343?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2343?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.79% <0.00%> (-0.25%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-03-29T10:49:22Z",
  "id":1488369546,
  "issue":2343,
  "node_id":"IC_kwDODBCWws5YtreK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-29T10:49:22Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It's just a reminder - the warning comes from our generated `RDataSource`: https://github.com/scikit-hep/awkward/blob/main/src/awkward/_connect/rdataframe/to_rdataframe.py#L261\r\nWe could check the ROOT version and generate an updated `RDataSource::Initialize` with a `z`...",
  "created_at":"2023-03-29T11:02:55Z",
  "id":1488387758,
  "issue":2344,
  "node_id":"IC_kwDODBCWws5Ytv6u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-29T11:02:55Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Are there some ROOT versions with only the U.K. spelling and some ROOT versions with only the U.S. spelling? If so, then we'd need to check to see which one we have. If we only call it from one place in our code, we could perhaps use `hasattr` (if that works for PyROOT objects; otherwise, try the spelling with \"z\" first and catch an AttributeError).\r\n\r\nIf, for all the ROOT versions we support, either both spellings exist or only the \"z\" spelling exists, we should use only the \"z\" spelling.\r\n\r\n(What ROOT versions do we support? I don't know if we've answered this question yet. There's probably some RDataFrame feature we rely on, and it was introduced in some particular version.)",
  "created_at":"2023-03-29T13:30:24Z",
  "id":1488617539,
  "issue":2344,
  "node_id":"IC_kwDODBCWws5YuoBD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-29T13:30:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"ROOT 6.26 and earlier versions use the UK spelling\r\nROOT 6.28 introduces the US spelling and warns about the UK one\r\nROOT 6.29 removes deprecated UK spelling (https://github.com/root-project/root/pull/9521)",
  "created_at":"2023-03-30T07:59:50Z",
  "id":1489864068,
  "issue":2344,
  "node_id":"IC_kwDODBCWws5YzYWE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-30T07:59:50Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"6.26 sounds recent enough that we should support it.\r\n\r\nThis works as a way to check:\r\n\r\n```python\r\n>>> hasattr(ROOT.RDF.RDataSource, \"Initialize\")\r\nFalse\r\n>>> hasattr(ROOT.RDF.RDataSource, \"Initialise\")\r\nTrue\r\n```\r\n\r\nand it's more direct and specific than checking the version. (It explains why.)",
  "created_at":"2023-03-30T13:11:17Z",
  "id":1490280162,
  "issue":2344,
  "node_id":"IC_kwDODBCWws5Y097i",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-03-30T13:11:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2345?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2345](https://codecov.io/gh/scikit-hep/awkward/pull/2345?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a4b1331) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/60bec22277344bdf27d89c3034d2f8486cc39bab?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (60bec22) will **decrease** coverage by `0.01%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2345?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2345?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-03-30T13:44:19Z",
  "id":1490331741,
  "issue":2345,
  "node_id":"IC_kwDODBCWws5Y1Khd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-30T13:44:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2347?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2347](https://codecov.io/gh/scikit-hep/awkward/pull/2347?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (07cc6a6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/235560f9b7b09bda37517bba49a0da77ee14fff2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (235560f) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2347?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/2347?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_zip.py](https://codecov.io/gh/scikit-hep/awkward/pull/2347?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha196aXAucHk=) | `91.07% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-03-30T16:34:19Z",
  "id":1490599193,
  "issue":2347,
  "node_id":"IC_kwDODBCWws5Y2L0Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-30T16:34:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2348?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2348](https://codecov.io/gh/scikit-hep/awkward/pull/2348?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d78cec4) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d27a7652583659ac46da8a6664a6c1947c69f652?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d27a765) will **increase** coverage by `0.00%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2348?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2348?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-03-31T12:44:59Z",
  "id":1491872678,
  "issue":2348,
  "node_id":"IC_kwDODBCWws5Y7Cum",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-03-31T12:44:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2349?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2349](https://codecov.io/gh/scikit-hep/awkward/pull/2349?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9c3687f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e09291e8583a3ad7adc7c13cb0e1a96ed110b13d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e09291e) will **increase** coverage by `0.00%`.\n> The diff coverage is `79.69%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2349?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/growablebuffer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2349?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvZ3Jvd2FibGVidWZmZXIucHk=) | `79.69% <79.69%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-03-31T17:26:02Z",
  "id":1492320181,
  "issue":2349,
  "node_id":"IC_kwDODBCWws5Y8v-1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-01T00:16:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, and I'm done with this PR, so if you approve, go ahead and merge it. Thanks!",
  "created_at":"2023-04-01T00:16:54Z",
  "id":1492752992,
  "issue":2349,
  "node_id":"IC_kwDODBCWws5Y-Zpg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-01T00:16:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2351?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2351](https://codecov.io/gh/scikit-hep/awkward/pull/2351?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (58a7338) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e09291e8583a3ad7adc7c13cb0e1a96ed110b13d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e09291e) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2351?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2351?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.29% <\u00f8> (+0.11%)` | :arrow_up: |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2351?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.12% <100.00%> (-1.09%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/2351?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.80% <100.00%> (+0.37%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-04-03T13:40:18Z",
  "id":1494344486,
  "issue":2351,
  "node_id":"IC_kwDODBCWws5ZEeMm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-03T13:40:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2353?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2353](https://codecov.io/gh/scikit-hep/awkward/pull/2353?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (14157d3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6a24ed0d436bcd158f634d9bd9f6d664fff6bd2b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6a24ed0) will **decrease** coverage by `0.01%`.\n> The diff coverage is `66.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2353?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward/pull/2353?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2l0ZXIucHk=) | `91.30% <66.66%> (-3.70%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-04-03T17:08:29Z",
  "id":1494684971,
  "issue":2353,
  "node_id":"IC_kwDODBCWws5ZFxUr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-05T18:46:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2354?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2354](https://codecov.io/gh/scikit-hep/awkward/pull/2354?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (30436a8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/01df95dc9457ff69eafa6a790a9266a8d1e8ec67?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (01df95d) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2354?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2354?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `93.29% <100.00%> (+0.16%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-04-03T17:19:56Z",
  "id":1494699411,
  "issue":2354,
  "node_id":"IC_kwDODBCWws5ZF02T",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-03T17:43:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2355?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2355](https://codecov.io/gh/scikit-hep/awkward/pull/2355?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a1e0889) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/01df95dc9457ff69eafa6a790a9266a8d1e8ec67?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (01df95d) will **increase** coverage by `0.00%`.\n> The diff coverage is `75.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2355?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/2355?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `82.69% <75.00%> (-0.42%)` | :arrow_down: |\n\n... and [1 file with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2355/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-03T17:37:38Z",
  "id":1494720705,
  "issue":2355,
  "node_id":"IC_kwDODBCWws5ZF6DB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-03T17:37:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2356?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2356](https://codecov.io/gh/scikit-hep/awkward/pull/2356?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8722641) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/265f6326686f3dd3c29bbc7985dcbe28534afbf3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (265f632) will **decrease** coverage by `0.08%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 8722641 differs from pull request most recent head 9527441. Consider uploading reports for the commit 9527441 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n[see 103 files with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2356/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-03T18:08:46Z",
  "id":1494759943,
  "issue":2356,
  "node_id":"IC_kwDODBCWws5ZGDoH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-11T08:14:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@all-contributors please add @raybellwaves for docs\r\n",
  "created_at":"2023-04-08T19:15:22Z",
  "id":1500959298,
  "issue":2358,
  "node_id":"IC_kwDODBCWws5ZdtJC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-08T19:15:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski \n\nI've put up [a pull request](https://github.com/scikit-hep/awkward/pull/2379) to add @raybellwaves! :tada:",
  "created_at":"2023-04-08T19:15:31Z",
  "id":1500959335,
  "issue":2358,
  "node_id":"IC_kwDODBCWws5ZdtJn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-08T19:15:31Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2359?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2359](https://codecov.io/gh/scikit-hep/awkward/pull/2359?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e45e63) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6a24ed0d436bcd158f634d9bd9f6d664fff6bd2b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6a24ed0) will **increase** coverage by `0.00%`.\n> The diff coverage is `87.69%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2359?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2359?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.43% <87.69%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-04-05T15:47:21Z",
  "id":1497714620,
  "issue":2359,
  "node_id":"IC_kwDODBCWws5ZRU-8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-05T18:48:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2361?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2361](https://codecov.io/gh/scikit-hep/awkward/pull/2361?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (03915e5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6a24ed0d436bcd158f634d9bd9f6d664fff6bd2b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6a24ed0) will **increase** coverage by `0.00%`.\n> The diff coverage is `94.73%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2361?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2361?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `77.27% <94.73%> (+0.34%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-04-05T18:42:35Z",
  "id":1497956525,
  "issue":2361,
  "node_id":"IC_kwDODBCWws5ZSQCt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-05T18:42:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I agree that this is a `policy` question. \r\n\r\nI'd vote in favour of not recursively zipping, because `ak.zip` accepts useful parameters that might not apply to each call to `ak.zip` identically, i.e. the user may well want different `depth_limit` values. For simplicity and consistency, I'd prefer to require the user to call `ak.zip` multiple times. ",
  "created_at":"2023-05-09T12:26:57Z",
  "id":1540028081,
  "issue":2363,
  "node_id":"IC_kwDODBCWws5byvax",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T12:26:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> I'd vote in favour of not recursively zipping, because `ak.zip` accepts useful parameters that might not apply to each call to `ak.zip` identically, i.e. the user may well want different `depth_limit` values. For simplicity and consistency, I'd prefer to require the user to call `ak.zip` multiple times.\r\n\r\nI have no problem with this being the default behavior, but I'd love to see automatic recursive zipping as a feature (maybe as an optional argument to `ak.zip`?). This is a pretty common use case in handling `func-adl-uproot` queries.",
  "created_at":"2023-05-31T16:09:02Z",
  "id":1570521471,
  "issue":2363,
  "node_id":"IC_kwDODBCWws5dnEF_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-31T16:09:02Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2365?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2365](https://app.codecov.io/gh/scikit-hep/awkward/pull/2365?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f8dd513) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/b9c7c6e1b034a58dd73f9b1a0edc3c32a03c9f99?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b9c7c6e) will **increase** coverage by `0.07%`.\n> The diff coverage is `82.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2365?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_enforce\\_type.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2365?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19lbmZvcmNlX3R5cGUucHk=) | `81.84% <81.84%> (\u00f8)` | |\n| [src/awkward/forms/form.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2365?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `85.46% <83.33%> (+0.57%)` | :arrow_up: |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2365?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_buffers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2365?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2J1ZmZlcnMucHk=) | `90.90% <100.00%> (\u00f8)` | |\n\n... and [6 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2365/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-06T05:54:44Z",
  "id":1498529611,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5ZUb9L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:27:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It's looking good so far!",
  "created_at":"2023-04-12T18:58:26Z",
  "id":1505775648,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5ZwFAg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-12T18:58:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski fab! Thank you, it's a lot of code. I'm heading off until tomorrow; I plan to revisit the rules for records and tuples.\r\n\r\nGiven that record fields can't be renamed with this function (or fields added/removed), record \u2192 record shouldn't need to compute permutations. Similarly, if we require that tuples can't be reordered), we don't need permutations there. I think removing these d.o.f should simplify things.\r\n\r\n",
  "created_at":"2023-04-24T22:30:44Z",
  "id":1520909298,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5apzvy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T06:54:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"So, the original implementation of this function permuted record contents, and required that the permutation had matching fields if both layout and type were tuples. I don't think re-ordering records makes sense for this function; that's a fundamentally different operation at which we can only guess by convertability.\r\n\r\nSo, now this function respects fields/positions.",
  "created_at":"2023-04-25T06:57:31Z",
  "id":1521248169,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5arGep",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T06:57:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski the motivation for the \"thunk\" pattern was to separate convertibility tests from the actual conversion logic. However, the only practical need for this was for the branches that occured with unions and records.\r\n\r\nIn the above commits & comments, you can see that I decided to make records *and* unions more strict; records cannot convert between tuple-record, and unions must now be strictly equal to the type in all \"existing\" contents, unless the total number of contents does not change (in which case, up-to one content can differ in order to be converted).\r\n\r\nRegarding these changes for unions, it makes reasoning about them far simpler; we only have to consider type equality, rather than type _enforceability_.\r\n\r\nAs such, the need for a two-phase conversion is gone, and this logic is much easier to write as a direct recursive function. I found the need for a `layout_equals_type` function; although we can just write `layout.form.type.is_equal_to`, I suspect we want to avoid generating the type at multiple points during the tree.\r\n\r\nNow, an existing example of where we keep the separate \"can I do X\" and \"do X\" logic is the the content merging protocol, which is defined over `_mergeable_next` and `_mergemany`. I don't think the motivations for separating these two processes holds here; the mergeable logic essentially looks like:\r\n1. is X mergeable with Y?\r\n2. if so, merge, else create union\r\n3. proceed ...\r\n\r\nwhereas in our case, if something _isn't_ enforceable to `T`, that's an error (and we blow up).\r\n\r\nSo, I'm happy that this code no longer separates those two code pathways.\r\n\r\nN.B., to be explicit I'm not talking about \"thunks\" vs two separate functions, rather I'm referring to the need to have \"can I do X\" at all.\r\n",
  "created_at":"2023-04-25T08:42:30Z",
  "id":1521405164,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5arszs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T08:42:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this is converging on a final implementation. I'd benefit from the following:\r\n- Thoughts on whether `layout_equals_type` should be a public function, e.g. defined on `layout` as `def is_equal_to_type()`?\r\n- Thoughts on rules regarding unions and records (see main PR description for details)\r\n\r\n",
  "created_at":"2023-04-25T08:45:14Z",
  "id":1521408718,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5artrO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T08:45:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> * Thoughts on whether `layout_equals_type` should be a public function, e.g. defined on `layout` as `def is_equal_to_type()`?\r\n\r\nJust for wording, a layout _has_ a type, but it can't be _equal to_ a type. It's not a big deal for the internal function, but would be for an external API.\r\n\r\nIf an array has both `ak.Array.type == t` and `ak.Array.layout.has_type(t)`, users will wonder which one they should use. It looks to me like `layout_equals_type` does more than just type equality because it allows for some fields to be `unknown_length` and the types are still considered equal. From inside the codebase, it can be clear that such a thing is needed, but from outside the codebase, that's a subtle difference.\r\n\r\nI think we should _not_ expose this as a public API unless it's needed for some application. Before we get to this one, dask-awkward and Coffea are reaching into L3 functions, and those are functions with demonstrated need to be L2.\r\n\r\n> * Thoughts on rules regarding unions and records (see main PR description for details)\r\n\r\nA few:\r\n\r\n> * Indexed layouts are projected out.\r\n\r\nAre they necessarily projected out? If the node above the IndexedArray and the node below the IndexedArray do not need to be changed (determined via types only, not values), how about if the IndexedArray is left as-is? Such a determination can only be made on the bottom-up return-pass of the recursion (i.e. after recursing down, when you're on the way back up again, you'll be able to tell that the IndexedArray's `content` didn't change).\r\n\r\nThe reason that's valuable is because it minimally touches RecordArrays with many fields; maybe most of them are unaffected. The RecordArray may be within an IndexedArray (a common case).\r\n\r\n> * Option types are packed, and can be either:\r\n>   * added\r\n>   * removed (if there are no missing values)\r\n\r\nGreat!\r\n\r\n> * Unions can either:\r\n>   * grow\r\n>   * shrink (if the lost content(s) are not referenced by any tags)\r\n>   * remain equivalent\r\n>   * change by a single content\r\n\r\nGreat!\r\n\r\n> * Records can be converted:\r\n>   * tuple\u2192tuple\r\n>   * record\u2192record (fields must match)\r\n\r\nMaybe fields of a tuple can be dropped if they're at the end (tuples get shorter). That might be expected, though I can't think of any use-cases in which it would matter.\r\n\r\nFor record\u2192record, it can be converted into a subset of fields, right?\r\n\r\nAlso for record\u2192record, can it be converted into a superset of fields if the new fields are option-type? That would be a useful feature.\r\n\r\n> * NumPy arrays can change dtypes\r\n\r\nGreat!\r\n\r\n> * 1D list types cannot be changed\r\n\r\nWhat about\r\n\r\n  * regular \u2192 variable-length (always)\r\n  * variable-length \u2192 regular (runtime exception if the lengths don't match)?\r\n\r\nWe already have `ak.from_regular` and `ak.to_regular`, but forcing users to do that part of the type conversion as a separate step (and figure out the `axis` parameters) is unfriendly.\r\n\r\n> * Unknown contents (`EmptyArray`) can be added/removed at any node\r\n\r\nBy \"removing EmptyArray\" (outside the context of a RecordArray field), do you mean \"convert EmptyArray into any type\"? That's what I would expect: just create a zero-length array from the Form and replace the EmptyArray with that.",
  "created_at":"2023-04-25T19:08:34Z",
  "id":1522281876,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5avC2U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T19:08:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> List conversion is already there - I can see how my description _didn't_ give that thought! Let me update it. \n\nRecords and tuples can drop fields, let's add this. I didn't notice that we can introduce none's for _new_ contents - that would be a good feature too! I hadn't originally thought it would be sensible / possible.\n\nCurrently we touch all indexed nodes if we walk into the layout, and we walk into all nodes to set parameters. We could perhaps early exit if a type matches, but that would be double walking the tree at each level. ",
  "created_at":"2023-04-25T19:59:24Z",
  "id":1522341793,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5avReh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T19:59:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Double-walking is better than touching, since double-walking is metadata-only and touching means that a whole column will be loaded.\r\n\r\nSetting parameters shouldn't touch any buffers; that's a different part of the `Content` instance. If you need to make a new `Content` instance with different parameters, it can just reference the `Index` or buffer that the original `Content` had without touching.\r\n\r\nThe usefulness of adding new record fields that are all `None` is because this function will be used in normalizing dynamic types as specific static types. Suppose some system doesn't make attributes if their value would be missing (i.e. `{\"x\": 123}` instead of `{\"x\": 123, \"y\": null}`).\r\n\r\n  * If all instances of the attribute are present, ArrayBuilder would make the field non-option-type, and the user would need to insert their knowledge that it should be option-type with no missing values.\r\n  * If only some instances of the attribute are present, ArrayBuilder would make the field option-type (instead of making a union of the record with and without the field: that was a choice).\r\n  * If no the instances of the attribute are present, ArrayBuilder would not and could not make the field. The user would need to insert their knowledge that it should be there.\r\n\r\nSo I think this would come up quite a bit.",
  "created_at":"2023-04-25T20:59:11Z",
  "id":1522407966,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5avhoe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T20:59:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Setting parameters shouldn't touch any buffers; that's a different part of the Content instance. If you need to make a new Content instance with different parameters, it can just reference the Index or buffer that the original Content had without touching.\r\n\r\nAbsolutely. The point I was making above was that a naive single-walk implementation will have to project index types, even if this is never required by the leaves. I've added a type check that will double-walk the tree for any indexed types encountered. I imagine this won't be too bad for most layouts. We could easily weakly memoize it if needs be down the road.",
  "created_at":"2023-04-25T21:43:12Z",
  "id":1522459388,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5avuL8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T21:43:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> 1D list types cannot be changed\r\n\r\nAh, now I'm back at my keyboard, I see why this was confusing. This is an obscure reference to strings - they're 1D lists according to `purelist_depth`.",
  "created_at":"2023-04-25T21:44:40Z",
  "id":1522460588,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5avues",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T21:44:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> * If only some instances of the attribute are present, ArrayBuilder would make the field option-type (instead of making a union of the record with and without the field: that was a choice).\r\n\r\nCrucially this point; I had forgotten about all-None options being possible stand-ins! \r\n\r\n> If an array has both ak.Array.type == t and ak.Array.layout.has_type(t), users will wonder which one they should use. It looks to me like layout_equals_type does more than just type equality because it allows for some fields to be unknown_length and the types are still considered equal. From inside the codebase, it can be clear that such a thing is needed, but from outside the codebase, that's a subtle difference.\r\n\r\nYes, this is my concern as well. Actually, type equality also supports these kind of options (though we do need to do a pass over our equality operations to ensure they all have the same semantics), but in this particular case the sole motivation is performance.",
  "created_at":"2023-04-25T21:53:59Z",
  "id":1522468532,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5avwa0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T21:53:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"TODO: allow strings to move between strings and bytestrings, and allow string abstraction to be erased?",
  "created_at":"2023-04-26T17:50:03Z",
  "id":1523823502,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5a07OO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-26T17:50:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"## Discussion of code design exploration\r\n\r\nThis function was harder to write than I anticipated. Not because it's inherently difficult, but writing readable code that covers all optimisation paths is fiddly.\r\n\r\nFor the problem of avoiding projections unless absolutely necessary, there are two solutions; only project if the type changes (related to #2434 \u2014 is it worse to operate on unseen parts of a buffer, or to project each layout on the way down?), or propagate a flag _upwards_ that indicates if projection (for the immediate child) is required. This PR implements the former, which means that we'll likely walk the layout multiple times. Therefore, if this is slow, we should use a weak LRU cache to store the results of the layout-type check.\r\n\r\nThe second approach is one that I played around with. This would use something _like_ the thunk pattern again, though I realised that generators are a perfect mechanism for implementing this, as they:\r\n- can yield multiple values\r\n- can resume operation with new inputs\r\n\r\nThe thunk pattern that I used before to separate type-data validation would have been more ergonomic using generators too, i.e. instead of\r\n```python\r\ndef build_some_layout(layout, type_):\r\n    build_child = builder_of(layout.content, type_.content)\r\n    if layout_has_wrong_type(layout, type_):\r\n        raise TypeError\r\n    else:\r\n        def thunk(this):\r\n            packed_layout = this.to_packed()\r\n            return packed_layout.copy(content=build_child(packed_layout.content))\r\n        return thunk\r\n```\r\nwe could write\r\n```python\r\ndef build_some_layout(layout, type_):\r\n    builder_child = builder_of(layout.content, type_.content)\r\n    # Wake generator\r\n    builder_child.send(None)\r\n   \r\n    if layout_has_wrong_type(layout, type_):\r\n        raise TypeError\r\n    else:\r\n        # Receive from sender (parent)\r\n        this = yield\r\n        packed_layout = this.to_packed()\r\n        # Send child layout to child builder, get result\r\n        new_content = builder_child.send(packed_layout.content)\r\n        # Yield result to recipient (parent)\r\n        yield packed_layout.copy(content=new_content)\r\n```\r\nThis same pattern lets us yield e.g. whether the content will need packed data, e.g.\r\n```python\r\ndef builder_any_option(layout, type_):\r\n    content_builder = builder_for(layout, type_.content)\r\n    # Does our child need packed data?\r\n    needs_packed = next(content_builder)\r\n    # We don't need it ourselves, so just yield child's request\r\n    layout = yield needs_packed\r\n    yield ak.contents.UnmaskedArray(layout, parameters=type_.parameters)\r\n```\r\n\r\nThe proper way that generators are used is to _return_ the result, which is stored in the `value` attribute of the thrown `StopIteration` error. However, using exceptions for flow control is not ideal, as it's slow. Python avoids this in the normal case by bypassing the exception handling machinery, but we'd need to manually catch the exception with `try: except:`. Though one could make that ergononic, it would still be slow.\r\n",
  "created_at":"2023-04-28T10:04:19Z",
  "id":1527314502,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bCPhG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-28T10:04:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've implemented all of the changes above. See the description for the current set of rules.\r\n\r\nThe use of `_layout_has_type` may be a performance problem. Right now, I'm assuming not, and we can optimise it if so. \r\n\r\nCould you give this another review, just to see whether anything stands out?",
  "created_at":"2023-04-28T10:35:32Z",
  "id":1527358770,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bCaUy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-28T10:35:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Are you sure that using exceptions for control flow is slow? That may be in C++, since exceptions require signal handling or an OS call or something, but in Python, exceptions are not fundamentally different from other control flow.\r\n\r\nAlso, I've heard explicit claims that option exceptions are not slower than other instructions, and can therefore be used in this way. I don't _like_ to do that because the syntax of the block is cumbersome, but that can be fixed by hiding it in a function call.",
  "created_at":"2023-04-28T10:39:12Z",
  "id":1527362471,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bCbOn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-28T10:39:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Are you sure that using exceptions for control flow is slow? That may be in C++, since exceptions require signal handling or an OS call or something, but in Python, exceptions are not fundamentally different from other control flow.\r\n\r\nRunning inside a try-except is slower irrespective of whether the exception is raised. In Python 3.11, there is [a fast-path](https://bugs.python.org/issue40222) that reduces the cost of unhandled exceptions.\r\n\r\n> Also, I've heard explicit claims that option exceptions are not slower than other instructions, and can therefore be used in this way. I don't like to do that because the syntax of the block is cumbersome, but that can be fixed by hiding it in a function call.\r\n\r\nI don't have any numbers, but I'm fairly confident that writing EAFP is slower if the common-case is to raise an exception. In the context of the above, the exception would _always_ be raised.\r\n\r\n```ipython\r\nIn [4]: d = {}\r\n   ...:\r\n   ...: def f1():\r\n   ...:     if 0 in d: \r\n   ...:         return d[0]\r\n   ...:     else: \r\n   ...:         return None\r\n   ...:\r\n   ...: def f2():\r\n   ...:     try: \r\n   ...:         return d[0]\r\n   ...:     except KeyError: \r\n   ...:         return None\r\n   ...:\r\n\r\nIn [5]: %timeit f1()\r\n86.8 ns \u00b1 0.589 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\r\n\r\nIn [6]: %timeit f2()\r\n230 ns \u00b1 4.68 ns per loop (mean \u00b1 std. dev. of 7 runs, 1,000,000 loops each)\r\n```",
  "created_at":"2023-04-28T14:36:33Z",
  "id":1527666347,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bDlar",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-04-28T14:36:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I've heard wrong. I guess, then, that it's good that I've been avoiding it. This is one of the things people used to say about Python\u2014that it makes exceptions lightweight and we should use them for everything\u2014but perhaps that was just a relative statement, for people coming from C++.",
  "created_at":"2023-04-29T02:01:23Z",
  "id":1528470579,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bGpwz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-29T02:01:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I've heard wrong. I guess, then, that it's good that I've been avoiding it.\r\n\r\nNot entirely; if you don't hit the slow path, it's not as bad. After all, Python encourages EAFP than LBYL. \r\n\r\nThat said, I can't reproduce these numbers at all today :exploding_head: I'm actually seeing the reverse:\r\n```ipython\r\nIn [7]: d = {}\r\n   ...:\r\n   ...:\r\n   ...: def f1():\r\n   ...:     if 0 in d:\r\n   ...:         return d[0]\r\n   ...:     else:\r\n   ...:         return None\r\n   ...:\r\n   ...: def f2():\r\n   ...:     try:\r\n   ...:         return d[0]\r\n   ...:     except KeyError:\r\n   ...:         return None\r\n   ...:\r\n\r\nIn [8]:\r\n\r\nIn [8]: timeit f1\r\n26.4 ns \u00b1 0.19 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\r\n\r\nIn [9]: timeit f2\r\n18 ns \u00b1 0.243 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000,000 loops each)\r\n\r\nIn [10]: d = {0:0}\r\n\r\nIn [11]: timeit f1\r\n26 ns \u00b1 0.25 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\r\n\r\nIn [12]: timeit f2\r\n17.8 ns \u00b1 0.192 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000,000 loops each)\r\n```\r\n\r\nI might be missing something obvious, but I'm inclined to suggest that my system was running something else in the background yesterday.\r\n\r\nI'm curious now as to what happened yesterday (it was many factors slower for a start). In any case, prior discussions on Python have been that exceptions are slower but not sufficiently that it's better to LBYL. Obviously, \"slow\" is application-specific, and it might not be a problem for us. \r\n\r\nI'm going to do some more tests on this, because I'm curious to get a robust feel for it. Perhaps the situation has changed (Python 3 has seen a lot of changes).",
  "created_at":"2023-04-29T12:00:37Z",
  "id":1528772063,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bHzXf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-29T12:01:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"There are actually two manners in which we might want to \"erase\" a union:\r\n1. Projecting to a single variant of a union, e.g. `union[int64, string] \u2192 string`\r\n2. Converting to a common type, e.g. `union[{x: int64}, {y: int32}] \u2192 {x: ?int64, y: ?int32}`\r\n\r\nThis PR previously implemented (1), but (2) is also useful (e.g. AnnData's case).\r\n\r\n<details><summary>Discussion on union erasure</summary>\r\nI was playing around with some demos to see whether this function covers all useful bases, and noticed a fairly glaring omission (hence my recent commits).\r\n\r\nFor `union[X, Y] \u2192 Z`, we previously had the requirement that `Z \u2208 {X, Y}`. This rule is a \"projection rule\" \u2014 the first variant type that matches this should be the only type actually referenced by the union tags. This is predictable for typetracer and non-typetracer.\r\n\r\nHowever, this means that we cannot erase a union through conversion, which is a motivator for something _like_ this function, e.g.\r\n```python\r\na1 = ak.Array([{\"a\": \"aaa\", \"b\": \"bbb\"}])\r\na2 = ak.Array([{\"b\": \"bbb\", \"c\": \"ccc\"}])\r\narray = ak.concatenate([a1, a2])\r\nresult = ak.enforce_type(array, \"{a: ?string, b: string, c: ?string}\")\r\n```\r\n\r\nClearly, there are two use cases:\r\n1. Projecting to a single variant of a union, e.g. `union[int64, string]`\r\n2. Converting to a common type, e.g. `union[{x: int64}, {y: int32}] \u2192 {x: ?int64, y: ?int32}`\r\n\r\nOne solution is to first see whether it's possible to convert from _all_ contents to a common type. If this fails (by type), then we assume it's projection rather than conversion. This is predictable only from type information. However, it would fail when the user wants to project a union to a single type, but the union _looks_ (at type level) to be convertible . \r\n\r\nE.g.\r\n```python\r\nimport awkward as ak\r\n\r\nthis = ak.contents.RecordArray(\r\n    [\r\n        ak.contents.RegularArray(\r\n            ak.contents.NumpyArray([0, 1, 2]),\r\n            3\r\n        ),\r\n        ak.contents.RegularArray(\r\n            ak.contents.NumpyArray([0, 1, 2]),\r\n            3\r\n        )\r\n    ],\r\n    [\"x\", \"y\"]\r\n)\r\n\r\nthat = ak.contents.RecordArray(\r\n    [\r\n        ak.contents.ListOffsetArray(\r\n            ak.index.Index64([0]),\r\n            ak.contents.NumpyArray([3])\r\n        )\r\n    ],\r\n    [\"y\"]\r\n)\r\n\r\narray = ak.concatenate(\r\n    [\r\n        this, that\r\n    ]\r\n)\r\nres = ak.enforce_type(array, \"{y: option[3 * int64]}\")\r\n```\r\n\r\nAnother solution is to let the user signal their intent. The easiest way to do this is with a flag (`erase_union_by_projection`) passed to `ak.enforce_type`. Obviously, this then imposes this rule upon all union erasures, but I think it might be the most straightforward. Alternatively, we could re-use the parameter system to localise the setting to a specific type branch, but that feels hacky to me (having parameters be reserved for an operation, and not actually appear on the result).\r\n</details> \r\n\r\n@jpivarski to support both erasure mechanisms, I've implemented a `union_erasure` enum argument that lets users disambiguate this case. Do you like this UX, or can you think of a better approach? \r\n",
  "created_at":"2023-05-03T15:18:38Z",
  "id":1533233987,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bY0tD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-03T15:19:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, (2) is also useful. I can see `ak.enforce_type` being a superset-tool that includes the functionality of others, like `ak.merge_union_of_records`. The difference with the all-in-one tool is that the user has to write a whole type, while `ak.merge_union_of_records` knows what type you need.\r\n\r\nI'll get back to your second question after I look at the code again.",
  "created_at":"2023-05-04T06:03:39Z",
  "id":1534136624,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bcREw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-04T06:03:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, yeah: why does the user need to specify more information than the desired type (that is, setting the `union_erasure` enum)?\r\n\r\nIsn't it the case that if we have a \"convert\" situation, asking for \"project\" would just be an error/mismatching type, and vice-versa?",
  "created_at":"2023-05-04T06:06:41Z",
  "id":1534139331,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bcRvD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-04T06:06:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"If `array` has type\r\n\r\n```\r\nunion[{x: int64}, {y: int32}]\r\n```\r\n\r\nand the user asks for type\r\n\r\n```\r\n{x: ?int64, y: ?int32}\r\n```\r\n\r\nthen only \"convert\" will work. If the user asks for type\r\n\r\n```\r\n{x: int64}\r\n```\r\n\r\nthen only \"project\" will work. I'm trying to think of counterexamples or ways to claim this more generally, but I don't see how there would be an ambiguous case, something that the enum would be needed to disambiguate. The implementation could just enter both cases and follow the one that succeeds (or points out that both fail in the error message).\r\n\r\nI'm a little worried about it from a UX perspective because it would be hard for a user to know that what they want to do is \"convert\" or that what they want to do is \"project\"\u2014they'll have an idea in mind of what they want, but won't know the vocabulary. Examples in documentation that don't look quite like their own example won't be helpful. It would be best if we could just take the exact type they want to convert into as given and do anything possible to make it that type (though I understand it's a problem if two different _array_ outputs can be made to match the same type, by following different methods).",
  "created_at":"2023-05-04T06:13:59Z",
  "id":1534144160,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bcS6g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-04T06:13:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Maybe it's not a problem. I was worried about converting an empty list to a regular array; the regular type of an empty list has `size=0`. That doesn't merge against other regular arrays. \r\n\r\nBut, maybe just being a little smarter there is all we need.",
  "created_at":"2023-05-04T07:30:22Z",
  "id":1534221207,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bcluX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-04T07:30:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK @jpivarski this is now nearly *done*.\r\n\r\nI've summarised the rules in the docstring.\r\n\r\nSince your last review, I've:\r\n* added a new rule - introducing `option[unknown]` in place of any existing type\r\n* removed the `union_erasure` flag in favour of figuring this out from the type[^note]\r\n* added docstrings with doctest examples\r\n* added an `_type_is_enforceable` which tests enforceability _and_ whether the operation will require a projection of the current node contents\r\n* fixed some bugs \r\n\r\n[^note]: I was worried about some corner cases here, such as length-zero regulararrays. After some experimenting, I have since convinced myself that we are able to do this robustly.\r\n\r\nIf you get 5 minutes, I'd appreciate if you could play around with some conversions to ensure it works :P\r\n\r\nOn my remaining todo list:\r\n- check typetracer arrays\r\n- strictly check layouts, rather than `almost_equal`",
  "created_at":"2023-05-04T17:12:40Z",
  "id":1535120338,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bgBPS",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-05-04T20:51:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've now finished with this for now. There are no typetracer tests, but that is because the layout equality checks need to be extended to handle this. I'll do so in a follow up PR.",
  "created_at":"2023-05-05T15:04:22Z",
  "id":1536396248,
  "issue":2365,
  "node_id":"IC_kwDODBCWws5bk4vY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:04:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2366?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2366](https://codecov.io/gh/scikit-hep/awkward/pull/2366?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2749c22) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/29f89d8752a58683e15b4f4ed4f6003a5bc60272?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (29f89d8) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-04-06T08:42:20Z",
  "id":1498698570,
  "issue":2366,
  "node_id":"IC_kwDODBCWws5ZVFNK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-06T08:42:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I don't know enough modern C++ to be sure that this is right, but it _is_ a for loop, rather than recursion.\r\n> \r\n> The loop termination I understand, though I would have written `current;` as `current != nullptr;` for clarity.\r\n> \r\n> I don't see how `current = std::move(current->next_)` deletes what `current` is pointing to and sets it to the value of `current->next_`. This must use some properties of `std::unique_ptr` somehow...\r\n>\r\n\r\nThe move transfers ownership and nulls it, please, see 20.8.1 in https://isocpp.org/files/papers/n4296.pdf\r\n \r\n> But it clearly looks like it's addressing the issue with an explicit for loop and if you're not getting giant memory leaks in your billion-value tests, then it must be deleting those panels.\r\n\r\nThe recursion is gone :-) Please, see a partially expanded stack before the change:\r\n<img width=\"1647\" alt=\"Screenshot 2023-04-07 at 10 34 50\" src=\"https://user-images.githubusercontent.com/1390682/230574613-e947d9a7-2ea8-4555-afd9-6c364f3ad360.png\">\r\nand a fully expanded one after:\r\n<img width=\"1649\" alt=\"Screenshot 2023-04-07 at 10 36 40\" src=\"https://user-images.githubusercontent.com/1390682/230574669-da30d29f-aedc-4b49-b30d-599e4531ec33.png\">\r\n\r\n",
  "created_at":"2023-04-07T08:40:34Z",
  "id":1500076638,
  "issue":2366,
  "node_id":"IC_kwDODBCWws5ZaVpe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T08:40:34Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, good explanation! I'll merge it now.",
  "created_at":"2023-04-07T12:48:45Z",
  "id":1500259618,
  "issue":2366,
  "node_id":"IC_kwDODBCWws5ZbCUi",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-04-07T12:48:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"In the meeting, we talked about this: records (at any depth) are prevented from evaluating ufuncs to avoid some very subtle bugs if someone thinks that behaviors (like Vector) are installed but they are not installed. In particular, we don't want records adding like\r\n\r\n```python\r\n{\"rho\": 1, \"phi\": 2} + {\"rho\": 3, \"phi\": 0} \u2192 {\"rho\": 4, \"phi\": 2}\r\n```\r\n\r\nbecause `vector.register_awkward()` didn't get called. NumPy's structured arrays would do this, too, but it's less of a pain point because it's easier to know that you have Vector's NumPy subclass. Behaviors aren't implicitly installed through `ak.behavior` (because NumPy structures aren't as deep).\r\n\r\nHowever, you have a good point that `==` and `!=` should be exceptions to this rule. Although someone could define custom overloads for `==` and `!=` that are different from just checking to see if all of the fields match, it's usually a good assumption that equality means \"all of the fields match.\" So, equality/inequality is special: it's not like addition or other operations, for which the naive rule is likely very bad (do the wrong calculation without warning).\r\n\r\nWe can handle this by putting `==` and `!=` overloads in the built-in Awkward `ak.behavior`, just as we have for the string behaviors. It would be a new submodule in the `awkward/behaviors` directory.",
  "created_at":"2023-04-06T15:07:10Z",
  "id":1499224565,
  "issue":2367,
  "node_id":"IC_kwDODBCWws5ZXFn1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-06T15:07:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Hello,\r\n\r\n@kpachal, @mswiatlo, and I are using awkward in the development of Coffea with @lgray. It is going well so far but we are having a problem very similar to this. It is not the exact same so we are happy to open a new issue if you prefer. \r\n\r\nWe would like to be able to compare nested arrays with `==` and `!=`. This is something that can be done in numpy:\r\n\r\n```\r\n>>> import numpy as np\r\n>>> l1 = [[1],[2]]\r\n>>> l2 = [[1,2],[1,2]]\r\n>>> np.array(l1) == np.array(l2)\r\narray([[ True, False],\r\n       [False,  True]])\r\n```\r\nHowever, when we try to do the same with awkward:\r\n```\r\n>>> import awkward as ak\r\n>>> l1 = [[1],[2]]\r\n>>> l2 = [[1,2],[1,2]]\r\n>>> ak.Array(l1) == ak.Array(l2)\r\nTraceback (most recent call last)\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/highlevel.py:1356, in Array.__array_ufunc__(self, ufunc, method, *inputs, **kwargs)\r\n   1355 with ak._errors.OperationErrorContext(name, inputs, kwargs):\r\n-> 1356     return ak._connect.numpy.array_ufunc(ufunc, method, inputs, kwargs)\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_connect/numpy.py:326, in array_ufunc(ufunc, method, inputs, kwargs)\r\n    325 else:\r\n--> 326     out = ak._broadcasting.broadcast_and_apply(\r\n    327         inputs, action, behavior, allow_records=False, function_name=ufunc.__name__\r\n    328     )\r\n    329     assert isinstance(out, tuple) and len(out) == 1\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_broadcasting.py:1057, in broadcast_and_apply(inputs, action, behavior, depth_context, lateral_context, allow_records, left_broadcast, right_broadcast, numpy_to_regular, regular_to_jagged, function_name, broadcast_parameters_rule)\r\n   1056 isscalar = []\r\n-> 1057 out = apply_step(\r\n   1058     backend,\r\n   1059     broadcast_pack(inputs, isscalar),\r\n   1060     action,\r\n   1061     0,\r\n   1062     depth_context,\r\n   1063     lateral_context,\r\n   1064     behavior,\r\n   1065     {\r\n   1066         \"allow_records\": allow_records,\r\n   1067         \"left_broadcast\": left_broadcast,\r\n   1068         \"right_broadcast\": right_broadcast,\r\n   1069         \"numpy_to_regular\": numpy_to_regular,\r\n   1070         \"regular_to_jagged\": regular_to_jagged,\r\n   1071         \"function_name\": function_name,\r\n   1072         \"broadcast_parameters_rule\": broadcast_parameters_rule,\r\n   1073     },\r\n   1074 )\r\n   1075 assert isinstance(out, tuple)\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_broadcasting.py:1036, in apply_step(backend, inputs, action, depth, depth_context, lateral_context, behavior, options)\r\n   1035 elif result is None:\r\n-> 1036     return continuation()\r\n   1037 else:\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_broadcasting.py:1009, in apply_step.<locals>.continuation()\r\n   1008 elif any(x.is_list for x in contents):\r\n-> 1009     return broadcast_any_list()\r\n   1011 # Any RecordArrays?\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_broadcasting.py:586, in apply_step.<locals>.broadcast_any_list()\r\n    584         nextinputs.append(x)\r\n--> 586 outcontent = apply_step(\r\n    587     backend,\r\n    588     nextinputs,\r\n    589     action,\r\n    590     depth + 1,\r\n    591     copy.copy(depth_context),\r\n    592     lateral_context,\r\n    593     behavior,\r\n    594     options,\r\n    595 )\r\n    596 assert isinstance(outcontent, tuple)\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_broadcasting.py:1036, in apply_step(backend, inputs, action, depth, depth_context, lateral_context, behavior, options)\r\n   1035 elif result is None:\r\n-> 1036     return continuation()\r\n   1037 else:\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_broadcasting.py:1009, in apply_step.<locals>.continuation()\r\n   1008 elif any(x.is_list for x in contents):\r\n-> 1009     return broadcast_any_list()\r\n   1011 # Any RecordArrays?\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_broadcasting.py:725, in apply_step.<locals>.broadcast_any_list()\r\n    724 elif isinstance(x, listtypes):\r\n--> 725     nextinputs.append(x._broadcast_tooffsets64(offsets).content)\r\n    726 # Handle implicit left-broadcasting (non-NumPy-like broadcasting).\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/contents/listoffsetarray.py:397, in ListOffsetArray._broadcast_tooffsets64(self, offsets)\r\n    394 if index_nplike.known_data and not index_nplike.array_equal(\r\n    395     this_zero_offsets, offsets\r\n    396 ):\r\n--> 397     raise ValueError(\"cannot broadcast nested list\")\r\n    399 return ListOffsetArray(\r\n    400     offsets, next_content[: offsets[-1]], parameters=self._parameters\r\n    401 )\r\n\r\nValueError: cannot broadcast nested list\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nValueError                                Traceback (most recent call last)\r\nCell In[22], line 5\r\n      2 l2 = [[1,2],[1,2]]\r\n      4 print(np.array(l1) == np.array(l2))\r\n----> 5 print(ak.Array(l1) == ak.Array(l2))\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_operators.py:50, in _binary_method.<locals>.func(self, other)\r\n     48 if _disables_array_ufunc(other):\r\n     49     return NotImplemented\r\n---> 50 return ufunc(self, other)\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/highlevel.py:1355, in Array.__array_ufunc__(self, ufunc, method, *inputs, **kwargs)\r\n   1290 \"\"\"\r\n   1291 Intercepts attempts to pass this Array to a NumPy\r\n   1292 [universal functions](https://docs.scipy.org/doc/numpy/reference/ufuncs.html)\r\n   (...)\r\n   1352 See also #__array_function__.\r\n   1353 \"\"\"\r\n   1354 name = f\"{type(ufunc).__module__}.{ufunc.__name__}.{method!s}\"\r\n-> 1355 with ak._errors.OperationErrorContext(name, inputs, kwargs):\r\n   1356     return ak._connect.numpy.array_ufunc(ufunc, method, inputs, kwargs)\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_errors.py:63, in ErrorContext.__exit__(self, exception_type, exception_value, traceback)\r\n     60 try:\r\n     61     # Handle caught exception\r\n     62     if exception_type is not None and self.primary() is self:\r\n---> 63         self.handle_exception(exception_type, exception_value)\r\n     64 finally:\r\n     65     # `_kwargs` may hold cyclic references, that we really want to avoid\r\n     66     # as this can lead to large buffers remaining in memory for longer than absolutely necessary\r\n     67     # Let's just clear this, now.\r\n     68     self._kwargs.clear()\r\n\r\nFile ~/anaconda3/lib/python3.10/site-packages/awkward/_errors.py:78, in ErrorContext.handle_exception(self, cls, exception)\r\n     76     self.decorate_exception(cls, exception)\r\n     77 else:\r\n---> 78     raise self.decorate_exception(cls, exception)\r\n\r\nValueError: cannot broadcast nested list\r\n\r\nThis error occurred while calling\r\n\r\n    numpy.equal.__call__(\r\n        <Array [[1], [2]] type='2 * var * int64'>\r\n        <Array [[1, 2], [1, 2]] type='2 * var * int64'>\r\n    )\r\n\r\n```\r\nThank you for the help and please let us know if we should open this as a new issue. ",
  "created_at":"2023-07-05T18:32:42Z",
  "id":1622272725,
  "issue":2367,
  "node_id":"IC_kwDODBCWws5gserV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-05T18:32:42Z",
  "user":"U_kgDOBlQU1w"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi @jbrewster7, these two arrays are not considered broadcastable because they both have ragged, unequal sublist lengths. The broadcasting rules are outlined partially [here](https://awkward-array.org/doc/main/reference/generated/ak.broadcast_arrays.html).\r\n```pycon\r\n>>> import awkward as ak\r\n>>> l1 = ak.Array([[1],[2]])\r\n>>> l1.type.show()\r\n2 * var * int64\r\n>>> l2 = ak.Array([[[1,2],[1,2]]])\r\n>>> l2.type.show()\r\n1 * var * var * int64\r\n```\r\n\r\nIf you want to perform length-1 broadcasting, as NumPy does, then the length-1 sublists must be regular. You can ensure this by converting from a ragged dimension to a regular one, using `ak.to_regular`:\r\n\r\n```python\r\nl1 = ak.Array(ak.to_regular([[1],[2]], axis=1))\r\nl2 = ak.Array([[[1,2],[1,2]]])\r\n\r\n(l1 == l2).show(type=True)\r\n```\r\n\r\nThis answer is terse; I'm short on time.  But I know that Jim will likely follow up here :)",
  "created_at":"2023-07-05T18:44:11Z",
  "id":1622287069,
  "issue":2367,
  "node_id":"IC_kwDODBCWws5gsiLd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-05T18:53:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2368](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1106ca2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/ec98c6358301218b08e381e1eaaf5f6e97b85b67?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ec98c63) will **increase** coverage by `0.04%`.\n> The diff coverage is `94.33%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdHlwZS5weQ==) | `95.60% <83.33%> (-0.38%)` | :arrow_down: |\n| [src/awkward/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvcmVjb3JkdHlwZS5weQ==) | `86.20% <86.66%> (+1.85%)` | :arrow_up: |\n| [src/awkward/types/arraytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvYXJyYXl0eXBlLnB5) | `93.54% <100.00%> (\u00f8)` | |\n| [src/awkward/types/listtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbGlzdHR5cGUucHk=) | `91.66% <100.00%> (-0.23%)` | :arrow_down: |\n| [src/awkward/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbnVtcHl0eXBlLnB5) | `92.94% <100.00%> (+1.08%)` | :arrow_up: |\n| [src/awkward/types/optiontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvb3B0aW9udHlwZS5weQ==) | `80.76% <100.00%> (+1.52%)` | :arrow_up: |\n| [src/awkward/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvcmVndWxhcnR5cGUucHk=) | `93.18% <100.00%> (+2.07%)` | :arrow_up: |\n| [src/awkward/types/scalartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvc2NhbGFydHlwZS5weQ==) | `80.95% <100.00%> (+3.67%)` | :arrow_up: |\n| [src/awkward/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5pb250eXBlLnB5) | `86.79% <100.00%> (+1.88%)` | :arrow_up: |\n| [src/awkward/types/unknowntype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5rbm93bnR5cGUucHk=) | `93.10% <100.00%> (+3.10%)` | :arrow_up: |\n\n... and [1 file with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2368/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-07T15:36:40Z",
  "id":1500396192,
  "issue":2368,
  "node_id":"IC_kwDODBCWws5Zbjqg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T19:37:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> So types wouldn't even have an __eq__? Users are forced to use is_equal_to?\r\n\r\nNo, I agree that we need `__eq__`; it's an expected Python feature, and should we not implement it, Python will just check object identity (which is definitely not what we want!). \r\n\r\nThis PR sets `__eq__` to be exactly `is_equal_to`, therefore it invokes the default-argument variant of `is_equal_to`.",
  "created_at":"2023-04-07T16:15:58Z",
  "id":1500429659,
  "issue":2368,
  "node_id":"IC_kwDODBCWws5Zbr1b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T16:15:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I see:\r\n\r\n```python\r\n    __eq__ = is_equal_to\r\n```\r\n\r\nI missed that, searching for \"`def __eq__`\".\r\n\r\nThis is good to go!",
  "created_at":"2023-04-07T16:19:41Z",
  "id":1500432683,
  "issue":2368,
  "node_id":"IC_kwDODBCWws5Zbskr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T16:19:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski when I made https://github.com/scikit-hep/awkward/pull/1773, I was leaning towards records having a definable order (as they do for tuples). However, it sounds like we're not interested in pushing that idea, so #1773 really just guarantees order under serialisation _only_.\r\n\r\nIff. this is the case, do you agree that I need to mirror the permutation logic (in union type equality comparison) for the record comparison case? Nicely, the initial permutation is always the trivial one (c1, c2, ..., cn), which should often be the right one.",
  "created_at":"2023-04-07T16:25:29Z",
  "id":1500437509,
  "issue":2368,
  "node_id":"IC_kwDODBCWws5ZbtwF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T16:25:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, the permutation will always be needed. (That's what I meant in my first paragraph, before going on a tangent about `union[?X, Y]` and `union[X, ?Y]`.)\r\n\r\nThe order is preserved through serialization and lots of operations\u2014it's important for us to not lose it\u2014but it is not essential to the meaning of the record or union. Not losing the order is so that a user-supplied `Point[x: float64, y: float64]` doesn't become `Point[y: float64, x: float64]`, which would be confusing and could be a big problem if there are a lot of fields. But if a _user_ asks whether those two are the same thing, I think we should say \"yes.\"\r\n\r\nThe way I think about it formally, a record type (instance) is a mapping from names to field types (field instances), and a domain of \"names\" is not usually ordered. We implement an ordering to not wantonly change it as a kindness to users, but formally, it isn't part of the definition.",
  "created_at":"2023-04-07T16:47:17Z",
  "id":1500454208,
  "issue":2368,
  "node_id":"IC_kwDODBCWws5Zbx1A",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-04-07T16:47:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this PR fixes #2369 by handling error rewriting at the bottom of the stack (the error context manager). With Python's existing machinery, there's no nice way <3.10 to rewrite an exception without using `raise exc from old_exc`, which partially duplicates the message. \r\n\r\nCan you live with that? \r\n\r\nOtherwise, in 3.10 we can switch to using the `add_note` API. For <3.10, we could just modify the exception in-place. \r\n\r\nExample traceback:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/home/angus/Git/awkward/src/awkward/highlevel.py\", line 950, in __getitem__\r\n    out = self._layout[where]\r\n  File \"/home/angus/Git/awkward/src/awkward/contents/content.py\", line 555, in __getitem__\r\n    return self._getitem(where)\r\n  File \"/home/angus/Git/awkward/src/awkward/contents/content.py\", line 600, in _getitem\r\n    out = next._getitem_next(nextwhere[0], nextwhere[1:], None)\r\n  File \"/home/angus/Git/awkward/src/awkward/contents/regulararray.py\", line 495, in _getitem_next\r\n    return nextcontent._getitem_next(nexthead, nexttail, advanced)\r\n  File \"/home/angus/Git/awkward/src/awkward/contents/indexedarray.py\", line 395, in _getitem_next\r\n    return self._getitem_next_field(head, tail, advanced)\r\n  File \"/home/angus/Git/awkward/src/awkward/contents/content.py\", line 348, in _getitem_next_field\r\n    return self._getitem_field(head)._getitem_next(nexthead, nexttail, advanced)\r\n  File \"/home/angus/Git/awkward/src/awkward/contents/indexedarray.py\", line 294, in _getitem_field\r\n    self._content._getitem_field(where, only_fields),\r\n  File \"/home/angus/Git/awkward/src/awkward/contents/recordarray.py\", line 476, in _getitem_field\r\n    return self.content(where)\r\n  File \"/home/angus/Git/awkward/src/awkward/contents/recordarray.py\", line 411, in content\r\n    out = self.form_cls.content(self, index_or_field)\r\n  File \"/home/angus/Git/awkward/src/awkward/forms/recordform.py\", line 155, in content\r\n    index = self.field_to_index(index_or_field)\r\n  File \"/home/angus/Git/awkward/src/awkward/contents/recordarray.py\", line 405, in field_to_index\r\n    return self.form_cls.field_to_index(self, field)\r\n  File \"/home/angus/Git/awkward/src/awkward/forms/recordform.py\", line 132, in field_to_index\r\n    raise (\r\nawkward._errors.FieldNotFoundError: no field 'z' in record with 2 fields\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/angus/.config/JetBrains/PyCharm2023.1/scratches/scratch_415.py\", line 21, in <module>\r\n    array[0, \"z\"]\r\n  File \"/home/angus/Git/awkward/src/awkward/highlevel.py\", line 949, in __getitem__\r\n    with ak._errors.SlicingErrorContext(self, where):\r\n  File \"/home/angus/Git/awkward/src/awkward/_errors.py\", line 53, in __exit__\r\n    raise self.rewrite_exception(exception_type, exception_value)\r\nawkward._errors.FieldNotFoundError: while attempting to slice\r\n\r\n    <Array [{x: 100, y: 200}, {x: 300, ...}] type='2 * {x: int64, y: int64}'>\r\n\r\nwith\r\n\r\n    (0, 'z')\r\n\r\nError details: no field 'z' in record with 2 fields\r\n```\r\n\r\nThe \"pure\" solution here is probably to even avoid repeating the error details, and have the final exception just be the top level \"error occured whilst slicing XXX with YYY\", but I reckon you'll not go for that!",
  "created_at":"2023-04-06T16:57:20Z",
  "id":1499357783,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5ZXmJX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-06T17:08:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2370](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (08b9922) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/ee25546db20198e32af676836a7db954989a005b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ee25546) will **decrease** coverage by `0.01%`.\n> The diff coverage is `14.97%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends.py](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzLnB5) | `83.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `25.71% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/hist.py](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvaGlzdC5weQ==) | `47.36% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3JlZHVjZXJzLnB5) | `82.26% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview\\_cuda.py](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3X2N1ZGEucHk=) | `26.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `83.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `91.19% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| ... and [116 more](https://codecov.io/gh/scikit-hep/awkward/pull/2370?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-04-06T17:02:07Z",
  "id":1499363336,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5ZXngI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T19:16:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Yeah, we assume that most people won't scroll to learn details about an exception. If the last thing in the stack trace only says what function they called with what arguments, there would be no information (at that place) saying what actually went wrong.\r\n\r\nSince this PR removes the AK001 `ak._errors.wrap_error` boilerplate, the diff is huge. It would definitely be a plus if the alternative is nicer. But where is the alternative? **What should I look at to see how it's done now?**\r\n\r\nI'd be a little uncomfortable with modifying the call stack (what if some other library is also modifying it?) or modifying exceptions in place (if they're not ours, how can we be sure it would work?). Knowing that we can switch to `add_note` when that becomes the minimum Python is comforting\u2014it means that even if the solution isn't great, it won't be permanent. Python 3.10 can become the minimum-supported Python [on October 5](https://endoflife.date/python), [2025](https://youtu.be/zKQfxi8V5FA).\r\n\r\nWill it satisfy the original goal of [providing meaningful error reporting for GPU processes that run asynchronously on a background thread](https://github.com/scikit-hep/awkward/discussions/1321)?",
  "created_at":"2023-04-06T17:31:39Z",
  "id":1499399195,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5ZXwQb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-06T17:31:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We already re-build exceptions (assuming that we can pass in args) ; I don't think it's much more of a stretch to directly change their args in place. The downside is if someone is holding on to the exception, they'll see that it updates in place.\n\nI think the core point of this PR - to defer formatting of the array until we know the user will see this exception - is the right thing to do; not only for performance - we want to decorate any exception, not just those that we raise ourselves.\n\nWe can actually rewrite traceback / frames, but I agree - that's not ideal.\n\nI'll keep thinking on this, though! ",
  "created_at":"2023-04-06T18:26:23Z",
  "id":1499456944,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5ZX-Ww",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-06T18:26:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've reworked the error message ordering, to better support the \"decorate an existing error\" approach that will be favoured by `add_note`:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/home/angus/Git/awkward/src/awkward/operations/ak_count.py\", line 119, in count\r\n    return _impl(array, axis, keepdims, mask_identity, highlevel, behavior)\r\n  File \"/home/angus/Git/awkward/src/awkward/operations/ak_count.py\", line 128, in _impl\r\n    out = ak._do.reduce(\r\n  File \"/home/angus/Git/awkward/src/awkward/_do.py\", line 318, in reduce\r\n    raise ValueError(\r\nValueError: axis=4 exceeds the depth of the nested list structure (which is 1)\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/angus/.config/JetBrains/PyCharm2023.1/scratches/scratch_415.py\", line 15, in <module>\r\n    ak.count(array, axis=4)\r\n  File \"/home/angus/Git/awkward/src/awkward/operations/ak_count.py\", line 98, in count\r\n    with ak._errors.OperationErrorContext(\r\n  File \"/home/angus/Git/awkward/src/awkward/_errors.py\", line 53, in __exit__\r\n    raise self.rewrite_exception(exception_type, exception_value)\r\nValueError: axis=4 exceeds the depth of the nested list structure (which is 1).\r\n\r\nThis error occurred while calling\r\n\r\n    ak.count(\r\n        array = <Array [{x: 100, y: 200}, {...}] type='2 * {x: int64, y: in...'>\r\n        axis = 4\r\n        keepdims = False\r\n        mask_identity = False\r\n        highlevel = True\r\n        behavior = None\r\n    )\r\n```\r\n\r\nYou can now easily see the duplicated message `ValueError: axis=4 exceeds the depth of the nested list structure (which is 1)`. I don't hate this, though; the final error message is readable, and Python clearly shows that the original error _causes_ the final error.\r\n\r\nPython 3.10 would eliminate the final traceback, and just add notes directly. Here's a similar effect to `add_note`, by overwriting `exception_value.args`:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/home/angus/.config/JetBrains/PyCharm2023.1/scratches/scratch_415.py\", line 15, in <module>\r\n    ak.count(array, axis=4)\r\n  File \"/home/angus/Git/awkward/src/awkward/operations/ak_count.py\", line 119, in count\r\n    return _impl(array, axis, keepdims, mask_identity, highlevel, behavior)\r\n  File \"/home/angus/Git/awkward/src/awkward/operations/ak_count.py\", line 128, in _impl\r\n    out = ak._do.reduce(\r\n  File \"/home/angus/Git/awkward/src/awkward/_do.py\", line 318, in reduce\r\n    raise ValueError(\r\nValueError: axis=4 exceeds the depth of the nested list structure (which is 1).\r\n\r\nThis error occurred while calling\r\n\r\n    ak.count(\r\n        array = <Array [{x: 100, y: 200}, {...}] type='2 * {x: int64, y: in...'>\r\n        axis = 4\r\n        keepdims = False\r\n        mask_identity = False\r\n        highlevel = True\r\n        behavior = None\r\n    )\r\n\r\n```",
  "created_at":"2023-04-07T15:57:09Z",
  "id":1500412616,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5ZbnrI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T15:57:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I like the fact that we're following the `add_note` behavior now, so that we'll be able to move to that exclusively without observable changes in 2025.\r\n\r\nI've approved this and it can be merged when ready. I'll take a look at this one test error.",
  "created_at":"2023-04-07T16:17:34Z",
  "id":1500431041,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5ZbsLB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T16:17:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I like the fact that we're following the add_note behavior now, so that we'll be able to move to that exclusively without observable changes in 2025.\r\n\r\nI will just confirm how a 3.11 implementation would look. I also made a mistake; `add_note` is actually a 3.11 feature. I think it might have originally been 3.10, but got bumped?\r\n\r\n> I've approved this and it can be merged when ready. I'll take a look at this one test error.\r\n\r\nThanks! It's just a `str(exception)` case that we know will be broken here.",
  "created_at":"2023-04-07T16:26:58Z",
  "id":1500439138,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5ZbuJi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T16:26:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The test failures are because the error message text has changed. (It's always a dubious thing to make a test depend on the exact text of some human-readable thing, like a `__repr__` or a `__str__`, but it was expedient to do so.)\r\n\r\nI was going to just change them so the tests would pass, but I don't think I like the new format. This is `str(err)`:\r\n\r\n```\r\ncannot slice EmptyArray (of length 0) with 0: array is empty.\r\n\r\nThis error occurred while attempting to slice\r\n\r\n    <Array [] type='0 * unknown'>\r\n\r\nwith\r\n\r\n    0\r\n```\r\n\r\nThe \"details\" strings were partial sentences (not capitalized and no period) because that's a Python convention and the error formatting used that. Now it's backward.\r\n\r\nBut a bigger issue than the grammar/punctuation is that the bottom of a Python stack trace should say what the error is (just as the top of a Java stack trace does): that's where we've been trained to look (and anyone new to Python should learn that convention). The \"details\" string is the error; the \"This error occurred while attempting to slice\" is the context. Even though users are more likely to be able to use the \"while attempting to slice\" information, since it refers to something they can change in their code, we need to have the actual error at the bottom.",
  "created_at":"2023-04-07T16:28:16Z",
  "id":1500440233,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5Zbuap",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T16:28:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> `add_note` is actually a 3.11 feature\r\n\r\nOctober 4, 2026, then. There isn't a song about that. Although it would be more appropriate to the video, since _Metropolis_ was set in 2026.",
  "created_at":"2023-04-07T16:30:36Z",
  "id":1500442129,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5Zbu4R",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "hooray":1,
   "total_count":2
  },
  "updated_at":"2023-04-07T16:30:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Here's the Python 3.11 equivalent using `add_note`:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/home/angus/.config/JetBrains/PyCharm2023.1/scratches/scratch_415.py\", line 15, in <module>\r\n    ak.count(array, axis=4)\r\n  File \"/home/angus/Git/awkward/src/awkward/operations/ak_count.py\", line 119, in count\r\n    return _impl(array, axis, keepdims, mask_identity, highlevel, behavior)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/angus/Git/awkward/src/awkward/operations/ak_count.py\", line 128, in _impl\r\n    out = ak._do.reduce(\r\n          ^^^^^^^^^^^^^^\r\n  File \"/home/angus/Git/awkward/src/awkward/_do.py\", line 318, in reduce\r\n    raise ValueError(\r\nValueError: axis=4 exceeds the depth of the nested list structure (which is 1)\r\n\r\nThis error occurred while calling\r\n\r\n    ak.count(\r\n        array = <Array [{x: 100, y: 200}, {...}] type='2 * {x: int64, y: in...'>\r\n        axis = 4\r\n        keepdims = False\r\n        mask_identity = False\r\n        highlevel = True\r\n        behavior = None\r\n    )\r\n```\r\n\r\nI can add support for this _now_ so that we can eventually remove the old code.",
  "created_at":"2023-04-07T16:41:26Z",
  "id":1500449814,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5ZbwwW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T16:41:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"After some discussion on Slack, I've acquiesced. The new `add_note` always adds to the bottom of exception text, so post-3.11 Python users will have to scroll their eyes up to the `ExceptionClassName:`, past the notes that 20 different libraries have all added to it. I think that could get out of hand, but we should adopt the future patterns.\r\n\r\nOur \"this error occurred\" message could get rather long. Hopefully, it doesn't get in the way of people looking for the actual error. In particular, the file path and line number (above `ExceptionClassName:`) is typically the most important information. (For some things, like LaTeX, it is the _only_ information I can ever make use of.)\r\n\r\nWhen originally writing this, I had thought about including an \"`ak.whatever` called from\" file path and line number, like this:\r\n\r\n```\r\nThis error occurred while calling\r\n\r\n    ak.count(\r\n        array = <Array [{x: 100, y: 200}, {...}] type='2 * {x: int64, y: in...'>\r\n        axis = 4\r\n        keepdims = False\r\n        mask_identity = False\r\n        highlevel = True\r\n        behavior = None\r\n    )\r\n\r\non line 123 of /Users/me/my_awesome_analysis_code.py\r\n```\r\n\r\nwhich would make being on the bottom of the stack trace text even more useful for users who are fixing their code, rather than finding the place in our code where the exception actually happened. I decided against it because it would require us to query the call stack every time an `ak.whatever` function is called. (I haven't measured the performance impact\u2014just wary of it.)\r\n\r\nBut regardless of this possible improvement, I guess we should put our notes at the bottom, as is standard. So I'm in favor of this PR adhering to the new `add_note` way of formatting the text.",
  "created_at":"2023-04-07T17:36:42Z",
  "id":1500494603,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5Zb7sL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T17:36:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, sounds good to me. I'm personally not against this style, but I appreciate that it's not to everyone's liking.\r\n\r\nFor users, there is https://rich.readthedocs.io/en/stable/traceback.html which is one of several libraries that provides a nicer exception formatter, but must be installed manually (or via `sitecustomize`).",
  "created_at":"2023-04-07T17:46:13Z",
  "id":1500501013,
  "issue":2370,
  "node_id":"IC_kwDODBCWws5Zb9QV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T17:46:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"From @lgray:\r\n\r\n> so in particular it's when there is a ListOffsetArray in the records that are being cartesian'd and then `[index]`'d\r\n\r\nand\r\n\r\n> and it particular I'd also say that tagging the ListOffsetArrays in the cartesian is also wrong? Unless there's some mandatory manipulation that needs to happy to the objects? That makes a lot of assumptions about what those ListOffsetArrays are doing that doesn't make much sense (at least on first thought).\r\n\r\n@lgray, if you mean the appearance of `'muon_list!', 'jet_list!'` in `ab>>>`, I expect them to be there because `ak.cartesian` needs to know the structure of the lists at the `axis` value where it's enumerating the Cartesian product. In an imperative implementation, it would be doing `for` loops over those lists, so it definitely has to see the lists and their lengths.\r\n\r\nBut if you mean the appearance of `'muon_crossref_index!', 'jet_crossref_index!'`, yeah, that's what I called mysterious. It might be a clue.",
  "created_at":"2023-04-07T17:12:21Z",
  "id":1500474792,
  "issue":2372,
  "node_id":"IC_kwDODBCWws5Zb22o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T17:12:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> But if you mean the appearance of 'muon_crossref_index!', 'jet_crossref_index!', yeah, that's what I called mysterious. It might be a clue.\r\n\r\nYes, I mean this *exactly*. `muon_list!` and `jet_list!` are expected.\r\nThe cross refs make little sense that they should be there, they play no role in broadcasting.",
  "created_at":"2023-04-07T17:17:56Z",
  "id":1500478792,
  "issue":2372,
  "node_id":"IC_kwDODBCWws5Zb31I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T17:17:56Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I'll also mention that the cross refs can be a pain since they're doubly nested indices, so their on disk / in-memory representations can be pretty large (since they're N^2 in the size of the collection, for two large collections). It would be best to avoid loading them spuriously.",
  "created_at":"2023-04-07T17:23:37Z",
  "id":1500485105,
  "issue":2372,
  "node_id":"IC_kwDODBCWws5Zb5Xx",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-04-07T17:23:37Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The cause of this bug is `recursively_apply`, which visits all of the nodes in `ak.unzip`. Currently, `recursively_apply` invokes `touch_data` on each node that it visits. \r\n\r\nI think this is reasonable for `recursively_apply`, which trims the contents as it goes. The real bug here is in our visitor, which isn't quite behaving properly.",
  "created_at":"2023-04-07T17:40:58Z",
  "id":1500497660,
  "issue":2372,
  "node_id":"IC_kwDODBCWws5Zb8b8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T17:40:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Trimming content (which `recursively_apply` _must_ do) shouldn't/doesn't? count as a touch. That's part of why slicing\r\n\r\n```python\r\nsome_array[from_here:to_there]\r\n```\r\n\r\ndoesn't count as a touch.\r\n\r\nI hope you're right that it's something that can be fixed by fixing the visitor.",
  "created_at":"2023-04-07T18:03:43Z",
  "id":1500514158,
  "issue":2372,
  "node_id":"IC_kwDODBCWws5ZcAdu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T18:04:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski actually yes, it doesn't. I was looking at this branch (not related to the layout in this issue, but I was already on the tab), which does (is this a bug?) https://github.com/scikit-hep/awkward/blob/01417bcc50fb95e8da2c60cd7041bbce443e02ef/src/awkward/contents/listarray.py#L743\r\n\r\nI have to wrap my hand around how we want `touch_data` to behave. In theory, we want _any_ operation that involves buffers to touch data, but the assertion \r\n\r\n> `some_array[from_here:to_there]`\r\n>\r\n> doesn't count as a touch.\r\n\r\ndisagrees with that. \r\n",
  "created_at":"2023-04-07T18:56:02Z",
  "id":1500549607,
  "issue":2372,
  "node_id":"IC_kwDODBCWws5ZcJHn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T18:56:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Huh, hold on a moment, this no longer fixes things for me. Perhaps I regressed something ...",
  "created_at":"2023-04-07T17:50:07Z",
  "id":1500503443,
  "issue":2373,
  "node_id":"IC_kwDODBCWws5Zb92T",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T17:50:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2373?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2373](https://codecov.io/gh/scikit-hep/awkward/pull/2373?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5f8ac2e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/01417bcc50fb95e8da2c60cd7041bbce443e02ef?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (01417bc) will **decrease** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2373?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward/pull/2373?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bnppcC5weQ==) | `95.83% <100.00%> (-0.33%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-04-07T17:52:14Z",
  "id":1500504789,
  "issue":2373,
  "node_id":"IC_kwDODBCWws5Zb-LV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T18:52:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, of course, we `None` is treated as an implicit recursion. Fixed!",
  "created_at":"2023-04-07T17:53:14Z",
  "id":1500505412,
  "issue":2373,
  "node_id":"IC_kwDODBCWws5Zb-VE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T17:53:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Let me check it with a full nanoevents form.",
  "created_at":"2023-04-07T18:14:30Z",
  "id":1500521579,
  "issue":2373,
  "node_id":"IC_kwDODBCWws5ZcCRr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T18:14:30Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Even for my repro this branch doesn't fix the over-touching.",
  "created_at":"2023-04-07T18:20:23Z",
  "id":1500525086,
  "issue":2373,
  "node_id":"IC_kwDODBCWws5ZcDIe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T18:22:56Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Ah, excuse me, it *has* fixed part of it:\r\n```\r\n(coffea-dev) lgray@Lindseys-MBP awkward % python -i ../coffea/form_madness.py      \r\nab>>> ['muon_list!', 'jet_list!'] \r\n\r\ndr>>>> ['muon_list!', 'jet_list!', 'muon_eta!', 'jet_eta!', 'muon_phi!', 'jet_phi!'] \r\n\r\nmmin>> ['muon_list!', 'jet_list!', 'muon_eta!', 'jet_eta!', 'muon_phi!', 'jet_phi!'] \r\n\r\npt>>>> ['muon_list!', 'jet_list!', 'muon_eta!', 'jet_eta!', 'muon_phi!', 'jet_phi!', 'jet_pt!', 'jet_crossref_index!', 'jet_crossref_content!', 'jet_thing1!'] \r\n```\r\n\r\nIt doesn't touch the \"crossref\"s any more at an early stage but still touches all the jet fields.\r\nI suppose this is what is meant by \"cases below unzip\". \r\nLet me see if I can back-out unzip and still get the problem.",
  "created_at":"2023-04-07T18:24:27Z",
  "id":1500527727,
  "issue":2373,
  "node_id":"IC_kwDODBCWws5ZcDxv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T18:25:46Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It doesn't touch the \"crossref\"s any more at an early stage but still touches all the jet fields.\r\nI suppose this is what is meant by \"cases below unzip\".\r\nLet me see if I can back-out unzip and still get the problem.\r\n\r\nYes, I'm not super familiar with the purpose yet, but I can see that I wouldn't expect these cases to touch these buffers.",
  "created_at":"2023-04-07T18:43:05Z",
  "id":1500540174,
  "issue":2373,
  "node_id":"IC_kwDODBCWws5ZcG0O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T18:43:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"If you mean the purpose of the \"crossref\", it could could be any name, the purpose is sort of aside the point. I could call it \"cheeseburger\" and it would still overtouch the data (so long as cheeseburger is a ListOffsetArray) when I index after a cartesian.",
  "created_at":"2023-04-07T18:55:41Z",
  "id":1500549377,
  "issue":2373,
  "node_id":"IC_kwDODBCWws5ZcJEB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T18:56:00Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> If you mean the purpose of the \"crossref\", it could could be any name, the purpose is sort of aside the point. I could call it \"cheeseburger\" and it would still overtouch the data (so long as cheeseburger is a ListOffsetArray) when I index after a cartesian.\r\n\r\nNo, you're fine there! It's really that I don't understand the details of nanoevents just yet, at least, not as a user.",
  "created_at":"2023-04-07T18:57:30Z",
  "id":1500550730,
  "issue":2373,
  "node_id":"IC_kwDODBCWws5ZcJZK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T18:57:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Ah, that has to do with the oral tradition of how CMS/ATLAS HEP physicists are trained to think about their data. It is highly object oriented and full of relational linkages (leading to lots of structure and arrays that are indexers of other arrays in awkward). It's a pretty decent way to think about the data, and maybe we can improve that with time, but it is hard to tell people to change the way they think in more than one direction at once (and moving to awkward array is already a big jump).\r\n\r\nNanoevents accomplishes this by taking columns following a naming convention in some file format (which is usually collections of flat or singly jagged arrays in root files with a particular naming convention) and generating the form (with appropriate form keys to the original arrays) that uses the structure and relationships possible in awkward array to expose the structured / relational nature of collider physics data. The details I think you're wondering about are probably mostly related to cross-cleaning of physics objects and relationships of jets to constituents and such.\r\n\r\nThe implementation details are mostly @nsmith-, if you want to dig very deep.",
  "created_at":"2023-04-07T19:06:34Z",
  "id":1500558145,
  "issue":2373,
  "node_id":"IC_kwDODBCWws5ZcLNB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-07T19:07:24Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2375?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2375](https://codecov.io/gh/scikit-hep/awkward/pull/2375?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2e12056) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e91ba74f869fd21558a54f664337fff9e292aa32?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e91ba74) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 2e12056 differs from pull request most recent head 93ec2e8. Consider uploading reports for the commit 93ec2e8 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2375?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2375?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.86% <\u00f8> (-0.05%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-04-07T19:47:52Z",
  "id":1500589898,
  "issue":2375,
  "node_id":"IC_kwDODBCWws5ZcS9K",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-08T13:58:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@agoose77 @jpivarski looks good on my side please merge. The other example of over-touching I have is at the level of `dask-awkward`, pure awkward typetracers do the right thing.",
  "created_at":"2023-04-08T15:45:50Z",
  "id":1500918125,
  "issue":2375,
  "node_id":"IC_kwDODBCWws5ZdjFt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-08T15:45:59Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is certainly a bug, and the direct fix is as you describe it! However, we have a more general fix in mind here; to eliminate the special logic in favour of a more general implementation. This issue should be closed automatically once the fix is available, thanks for filing the issue!",
  "created_at":"2023-04-08T13:48:30Z",
  "id":1500895739,
  "issue":2376,
  "node_id":"IC_kwDODBCWws5Zddn7",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-04-08T13:48:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fixed by #2547",
  "created_at":"2023-07-02T17:08:21Z",
  "id":1616736670,
  "issue":2376,
  "node_id":"IC_kwDODBCWws5gXXGe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:08:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've labelled this a bug perhaps prematurely. I notice that we _don't_ raise an error if you try to flatten an empty array (subject to some caveats), regardless of depth.\r\n\r\nI can see the rationale here; try not to break things, it's unknown after all. I'm tempted to say that this should be an error, though; unknown arrays shouldn't (in my view) propagate too far into a script, because ultimately they lack information and represent that fact. I see them more as a token for \"something is missing here\".\r\n\r\nDo you agree? I'll take your opinion on this as a direction for how to treat this answer.\r\n\r\nNote that, in this case the error occurs because `empty[empty]` produces a `NumpyArray` with dtype `int64`, which then obeys conventional out-of-bounds flattening semantics.",
  "created_at":"2023-04-08T13:35:32Z",
  "id":1500893185,
  "issue":2377,
  "node_id":"IC_kwDODBCWws5ZddAB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-08T13:35:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I hadn't considered that, but yes, we should adopt a policy of calling out unknown types in situations that would be errors for other types of arrays, and then give users tools for dealing with it (the type-ensure function you're working on). We can treat unknown types as a problematic thing that should be called out, as long as we can tell people what to do about it.",
  "created_at":"2023-04-08T14:03:19Z",
  "id":1500898761,
  "issue":2377,
  "node_id":"IC_kwDODBCWws5ZdeXJ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-04-08T14:03:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Hello!\r\n\r\nI enabled the setting, though I don't see what our project would be vulnerable _from_, since it's not a service or anything that handles our own sensitive data. It's free software that one might use to manage their own sensitive data, but if so, they need to be careful because this library doesn't provide any more or less safety guarantees than the Python language itself.\r\n\r\nAlso, some of the maintainers (myself included) have posted our email addresses on our GitHub profiles. There are ways to contact us privately. (There's also [a Gitter channel](https://matrix.to/#/#Scikit-HEP_awkward:gitter.im), which allows private messages.)",
  "created_at":"2023-04-10T13:46:38Z",
  "id":1501830752,
  "issue":2383,
  "node_id":"IC_kwDODBCWws5ZhB5g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-10T13:46:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@igibek did you manage to report the vulnerability that you discovered?",
  "created_at":"2023-05-05T15:44:08Z",
  "id":1536445297,
  "issue":2383,
  "node_id":"IC_kwDODBCWws5blEtx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-05T15:44:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm closing this issue for now, as I believe the necessary information for contacting us has been disseminated here! Feel free to re-open this if needed.",
  "created_at":"2023-05-15T09:46:49Z",
  "id":1547531097,
  "issue":2383,
  "node_id":"IC_kwDODBCWws5cPXNZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T09:46:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The assignment broadcasts `(a.j1 + a.j2 + a.j3)` with `a`. I'm not 100% sure whether broadcasting an array of records (possibly nested in lists) uses the `IndexedArray` lazy-carry or not.",
  "created_at":"2023-04-10T15:01:23Z",
  "id":1501923400,
  "issue":2384,
  "node_id":"IC_kwDODBCWws5ZhYhI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-10T15:01:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'll take this, unless you want to!",
  "created_at":"2023-04-10T19:15:08Z",
  "id":1502202299,
  "issue":2385,
  "node_id":"IC_kwDODBCWws5Zicm7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-10T19:15:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Please, go ahead! I don't have a good idea for what to replace `len(base.fields) == 0` with, other than building a new Form method like `purelist_isregular` (for `purelist_isrecord`).",
  "created_at":"2023-04-10T19:21:18Z",
  "id":1502209473,
  "issue":2385,
  "node_id":"IC_kwDODBCWws5ZieXB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-10T19:21:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think we can just test this in the existing visitor; setting a flag if we encounter the layout?",
  "created_at":"2023-04-10T19:22:58Z",
  "id":1502211391,
  "issue":2385,
  "node_id":"IC_kwDODBCWws5Zie0_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-10T19:22:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"That said, a `purelist_isrecord` would be useful for testing the branches of the union, so perhaps I'll add that.",
  "created_at":"2023-04-10T19:25:27Z",
  "id":1502214218,
  "issue":2385,
  "node_id":"IC_kwDODBCWws5ZifhK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-10T19:25:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Wait, this is daft! We should definitely be fixing this, I'll take a look. The fix should be fairly simple.",
  "created_at":"2023-04-10T19:41:25Z",
  "id":1502229481,
  "issue":2386,
  "node_id":"IC_kwDODBCWws5ZijPp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-10T19:41:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2387?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2387](https://codecov.io/gh/scikit-hep/awkward/pull/2387?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a6df6c9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/be60b5330f7f872fd01b34c44d2686eeafa9bbfc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (be60b53) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2387?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/2387?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX2ZpZWxkLnB5) | `100.00% <100.00%> (\u00f8)` | |\n\n... and [1 file with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2387/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-10T20:00:23Z",
  "id":1502247287,
  "issue":2387,
  "node_id":"IC_kwDODBCWws5Zinl3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-10T20:00:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2388?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2388](https://codecov.io/gh/scikit-hep/awkward/pull/2388?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (988ad34) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/be60b5330f7f872fd01b34c44d2686eeafa9bbfc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (be60b53) will **decrease** coverage by `0.01%`.\n> The diff coverage is `50.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2388?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_errors.py](https://codecov.io/gh/scikit-hep/awkward/pull/2388?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `80.00% <50.00%> (-0.49%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-04-10T20:07:41Z",
  "id":1502256312,
  "issue":2388,
  "node_id":"IC_kwDODBCWws5Zipy4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-10T20:07:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It's fixed!\r\n\r\n```\r\n>>> import awkward as ak\r\n>>> no_fields = ak.Array([[{}, {}], [], [{}]])\r\n>>> no_fields[\"new_field\"] = 123\r\nTraceback (most recent call last):\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/highlevel.py\", line 1025, in __setitem__\r\n    self._layout = ak.operations.with_field(\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_with_field.py\", line 47, in with_field\r\n    return _impl(array, what, where, highlevel, behavior)\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_with_field.py\", line 87, in _impl\r\n    raise ValueError(\"no tuples or records in array; cannot add a new field\")\r\nValueError: no tuples or records in array; cannot add a new field\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/highlevel.py\", line 1028, in __setitem__\r\n    self._numbaview = None\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/_errors.py\", line 54, in __exit__\r\n    self.handle_exception(exception_type, exception_value)\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/_errors.py\", line 64, in handle_exception\r\n    raise self.decorate_exception(cls, exception)\r\nValueError: no tuples or records in array; cannot add a new field\r\n\r\nThis error occurred while calling\r\n\r\n    ak.Array.__setitem__(\r\n        self = <Array [[{}, {}], [], [{}]] type='3 * var * {}'>\r\n        field_name = 'new_field'\r\n        field_value = 123\r\n    )\r\n```\r\n\r\n(And the above wouldn't even be an error in `main`.)",
  "created_at":"2023-04-10T20:41:23Z",
  "id":1502293403,
  "issue":2388,
  "node_id":"IC_kwDODBCWws5Ziy2b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-10T20:41:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2389](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8d7618a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/265f6326686f3dd3c29bbc7985dcbe28534afbf3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (265f632) will **increase** coverage by `0.04%`.\n> The diff coverage is `98.05%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.81% <75.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/dispatch.py](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvZGlzcGF0Y2gucHk=) | `96.55% <96.55%> (\u00f8)` | |\n| [src/awkward/\\_backends.py](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzLnB5) | `88.75% <100.00%> (+4.90%)` | :arrow_up: |\n| [src/awkward/\\_kernels.py](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2tlcm5lbHMucHk=) | `68.93% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2xheW91dC5weQ==) | `83.50% <100.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvX19pbml0X18ucHk=) | `77.77% <100.00%> (-12.97%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `91.17% <100.00%> (+0.19%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `42.46% <100.00%> (+1.62%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `84.61% <100.00%> (+0.83%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `64.00% <100.00%> (+1.50%)` | :arrow_up: |\n| ... and [7 more](https://codecov.io/gh/scikit-hep/awkward/pull/2389?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-04-11T18:49:52Z",
  "id":1503919218,
  "issue":2389,
  "node_id":"IC_kwDODBCWws5Zo_xy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-11T19:01:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I like it! Just one question, though:\r\n> \r\n> > * `nplike_of(obj)` fails for objects that are not `np.ndarray`, or `cp.ndarray`, ..., or `TypeTracerArray`\r\n> \r\n> Don't we need this to deal with array-like function arguments? The tests would fail if what I'm thinking is true, and that hasn't happened, so perhaps the array-like \u2192 array conversion (`to_layout`) has already happened by the time `nplike_of` gets called?\r\n\r\nYes! The main point of this PR is to make `nplike_of` less smart. It should only be used when we _know_ that we have array-like objects (or, at least, we use it knowing that we _don't_ have content objects). If we _do_ have contents, then we should be using `backend_of`, which gives us both `index_nplike` and `nplike`.\r\n\r\nThis PR is an alternative solution to an idea I had of giving `Index` objects a `Backend` instead of nplike, such that it would be possible to mix `Index` and `Content` objects in `backend_of`. However, it doesn't make sense to talk about such things; index objects don't need the concept of a backend. It would only serve to disambiguate mixing `Index` and `Content`, and the easier solution to that is not to; `Index` objects come from a `Content` object, so use the `Content` in `backend_of`.",
  "created_at":"2023-04-11T20:53:34Z",
  "id":1504076179,
  "issue":2389,
  "node_id":"IC_kwDODBCWws5ZpmGT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-11T20:53:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2390](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a62c587) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/eccc2340985a430b37a58e8b164ecaad298731bb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eccc234) will **increase** coverage by `0.10%`.\n> The diff coverage is `92.83%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview\\_cuda.py](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3X2N1ZGEucHk=) | `31.25% <50.00%> (+4.58%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19idWZmZXJzLnB5) | `92.30% <50.00%> (+0.64%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `45.45% <50.00%> (+5.45%)` | :arrow_up: |\n| [src/awkward/\\_backends/cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2N1cHkucHk=) | `66.66% <66.66%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.54% <66.66%> (-0.26%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.12% <86.66%> (+0.33%)` | :arrow_up: |\n| [src/awkward/\\_backends/backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2JhY2tlbmQucHk=) | `89.28% <89.28%> (\u00f8)` | |\n| [src/awkward/\\_backends/dispatch.py](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2Rpc3BhdGNoLnB5) | `95.38% <95.38%> (\u00f8)` | |\n| [src/awkward/\\_backends/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2pheC5weQ==) | `97.36% <97.36%> (\u00f8)` | |\n| ... and [48 more](https://codecov.io/gh/scikit-hep/awkward/pull/2390?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-04-11T21:12:53Z",
  "id":1504099988,
  "issue":2390,
  "node_id":"IC_kwDODBCWws5Zpr6U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-11T21:12:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> With this PR, do the Coffea tests still work?\r\n\r\nFor my local install, `coffea` tests fail on main (both Awkward & Coffea), and if I downgrade `awkward` to v2.1.2, they still fail. The number of failures does not change if I bump `awkward` to this PR. Therefore, I'm comfortable merging it with the assumption that I'm not making things _worse_.\r\n\r\nI'll ping @lgray to figure out whether I should be testing a different branch to `main`.",
  "created_at":"2023-04-11T21:17:01Z",
  "id":1504104222,
  "issue":2390,
  "node_id":"IC_kwDODBCWws5Zps8e",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-11T21:17:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@agoose77 let me check - there are some xfails right now because of some strange interactions with dask that are not your fault which I have not marked.",
  "created_at":"2023-04-11T21:50:28Z",
  "id":1504149127,
  "issue":2390,
  "node_id":"IC_kwDODBCWws5Zp36H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-11T21:50:28Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@agoose77 coffea main should now pass tests if everything is ok. :-)",
  "created_at":"2023-04-12T00:12:52Z",
  "id":1504309199,
  "issue":2390,
  "node_id":"IC_kwDODBCWws5Zqe_P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-12T00:12:52Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I ran coffea's test suite (and dask-awkward) on this branch, and saw no regressions :) Merging!",
  "created_at":"2023-04-12T09:54:52Z",
  "id":1504992376,
  "issue":2390,
  "node_id":"IC_kwDODBCWws5ZtFx4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-12T09:54:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2391?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2391](https://codecov.io/gh/scikit-hep/awkward/pull/2391?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ae4a6cd) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/83df6e50563c1f2162c968117ee872510e374f6b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (83df6e5) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2391?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends/dispatch.py](https://codecov.io/gh/scikit-hep/awkward/pull/2391?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2Rpc3BhdGNoLnB5) | `95.38% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/dispatch.py](https://codecov.io/gh/scikit-hep/awkward/pull/2391?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvZGlzcGF0Y2gucHk=) | `96.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-04-12T13:00:52Z",
  "id":1505235683,
  "issue":2391,
  "node_id":"IC_kwDODBCWws5ZuBLj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-12T13:00:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2394?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2394](https://codecov.io/gh/scikit-hep/awkward/pull/2394?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (22bef5c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/83df6e50563c1f2162c968117ee872510e374f6b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (83df6e5) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-04-12T14:48:20Z",
  "id":1505411219,
  "issue":2394,
  "node_id":"IC_kwDODBCWws5ZusCT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-12T15:12:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2395?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2395](https://codecov.io/gh/scikit-hep/awkward/pull/2395?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2e8eab1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/83df6e50563c1f2162c968117ee872510e374f6b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (83df6e5) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2395?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2395?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `77.32% <100.00%> (+0.06%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-04-12T15:20:02Z",
  "id":1505463878,
  "issue":2395,
  "node_id":"IC_kwDODBCWws5Zu45G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-12T15:20:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2396?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2396](https://codecov.io/gh/scikit-hep/awkward/pull/2396?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (04fcbfc) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/62f06afa145bc0b6c1877d8fbb735efc0d006adb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (62f06af) will **increase** coverage by `0.00%`.\n> The diff coverage is `46.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2396?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/growablebuffer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2396?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvZ3Jvd2FibGVidWZmZXIucHk=) | `79.77% <46.66%> (+0.07%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-04-13T09:05:43Z",
  "id":1506612890,
  "issue":2396,
  "node_id":"IC_kwDODBCWws5ZzRaa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-13T20:50:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - this completes unification of the C++ and Python and Numba algorithms. Please, have a look. Thanks!",
  "created_at":"2023-04-13T20:47:06Z",
  "id":1507590759,
  "issue":2396,
  "node_id":"IC_kwDODBCWws5Z3AJn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-13T20:47:06Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"What do we need to do over in dask awkward to make it function as expected?\r\n\r\nI'm not sure if we've actually hit this one yet, given that the other PR fixed the issue I was running into with Yi-Mu.",
  "created_at":"2023-04-13T16:39:53Z",
  "id":1507270800,
  "issue":2397,
  "node_id":"IC_kwDODBCWws5Z1yCQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-13T16:39:53Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"We'll be able to avoid relying on `np.dtype.metadata` by completing https://github.com/dask-contrib/dask-awkward/pull/203 with a Dummy version of `NumpyArray` (\"Dummy\" \u2192 \"Placeholder\"). By rehydrating arrays on Dask workers with Dummy subclasses of `Index` and `NumpyArray`, we'll be able to make operations like `ascontiguousarray` be no-ops for the rehydrated array, just as they are (with this PR) for the TypeTracerArray.\r\n\r\nThe current method of rehydrating with zero-strided (but otherwise real NumPy) arrays doesn't do that.\r\n\r\nWhat I'm addressing here is a preferred refactoring; I don't know if you were asking about something more fundamental, like why this PR exists at all.",
  "created_at":"2023-04-13T16:49:23Z",
  "id":1507282452,
  "issue":2397,
  "node_id":"IC_kwDODBCWws5Z104U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-13T16:49:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Oh I was trying to understand what additional PRs would be needed in dask-awkward before minting another release, and it sounds like None until we run into this problem there.",
  "created_at":"2023-04-13T16:51:49Z",
  "id":1507285282,
  "issue":2397,
  "node_id":"IC_kwDODBCWws5Z11ki",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-13T16:51:49Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2397](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (764c052) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/60790fae55c2606d7dea317f51a8faa28c79859d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (60790fa) will **decrease** coverage by `0.02%`.\n> The diff coverage is `56.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `42.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_kernels.py](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2tlcm5lbHMucHk=) | `66.66% <41.17%> (-2.27%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `88.88% <50.00%> (+4.27%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `90.57% <75.00%> (-0.60%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `64.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpylike.py](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.81% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `77.29% <100.00%> (-0.04%)` | :arrow_down: |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.41% <100.00%> (-0.05%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-04-13T16:57:23Z",
  "id":1507293055,
  "issue":2397,
  "node_id":"IC_kwDODBCWws5Z13d_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-13T16:57:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Currently this is a manual process. We should definitely improve the sitiuation. I'd thought this would be complex as we'd want to create a release workflow, but actually it might be easier - we can simply edit the release for the matching tag to attach the assets. ",
  "created_at":"2023-04-13T18:11:09Z",
  "id":1507410357,
  "issue":2402,
  "node_id":"IC_kwDODBCWws5Z2UG1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-13T20:37:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Ah, in that case, @ManasviGoyal will need one for the recent version, but it can wait until next week. Eventually, it will need to be automatic, so that's what this issue will be asking for.",
  "created_at":"2023-04-13T18:33:36Z",
  "id":1507442270,
  "issue":2402,
  "node_id":"IC_kwDODBCWws5Z2b5e",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-04-13T18:33:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #2406",
  "created_at":"2023-04-18T15:31:33Z",
  "id":1513369341,
  "issue":2402,
  "node_id":"IC_kwDODBCWws5aNC79",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-18T15:31:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2403?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2403](https://codecov.io/gh/scikit-hep/awkward/pull/2403?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (82f543b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/fea6249d10f46278fba010a737e36cfe234970fa?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fea6249) will **increase** coverage by `0.00%`.\n> The diff coverage is `98.82%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2403?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/2403?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEucHk=) | `96.99% <98.80%> (+3.11%)` | :arrow_up: |\n| [src/awkward/\\_connect/numba/growablebuffer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2403?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvZ3Jvd2FibGVidWZmZXIucHk=) | `71.89% <100.00%> (-7.88%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-04-14T19:01:38Z",
  "id":1509093547,
  "issue":2403,
  "node_id":"IC_kwDODBCWws5Z8vCr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-20T13:06:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Does this offer additional functionality compared to or perform better than creating a list in Numba and then converting it to a numpy array on return? To my knowledge, lists in Numba are implemented like vectors and conversion to numpy arrays is a zero copy operation inside numba.",
  "created_at":"2023-04-21T06:31:38Z",
  "id":1517333442,
  "issue":2403,
  "node_id":"IC_kwDODBCWws5acKvC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-21T06:31:38Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've not been following @ianna's work too closely, but `GrowableBuffer` has different memory characteristics to `std::vector`-like containers, which should improve its relative performance for certain use cases. In particular, for the case where you're just appending a lot of data and don't need to look at the buffer until the point that you need a contiguous buffer.\r\n\r\nBoth `std::vector` and `GrowableBuffer` use resize-on-grow strategies, but the latter only grows the size of the _next_ panel, rather than resizing the entire array into a single contiguous block (and copying contents).\r\n\r\nWhen building an Awkward Array, that's a common use case. I'm not sure whether we e.g. plan to make it possible to look _into_ the array, but it should be possible to make that reasonably performant (keep a list of offsets, binary search into them). However, I don't know if that's on the cards. I assume we'll wait for a need @ianna? :)",
  "created_at":"2023-04-21T11:40:18Z",
  "id":1517695110,
  "issue":2403,
  "node_id":"IC_kwDODBCWws5adjCG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-21T12:15:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Does this offer additional functionality compared to or perform better than creating a list in Numba and then converting it to a numpy array on return?\r\n\r\nSo... that's a great idea! This `GrowableBuffer` is a Numba-reimplementation of our C++ `GrowableBuffer`. We needed this in C++ at first because we needed sharable buffer data (`std::vector::data` is not safely sharable), and then later because we gave up on sharing and could then take advantage of the fact that the buffer didn't need to be contiguous (`std::vector::data` must be contiguous, and therefore reallocate-and-copy as it grows). The current algorithm makes discontiguous panels as it grows, in which the first panel is small and all subsequent panels are large, since it's common to have many small buffers and a few large ones.\r\n\r\n![233456786-587d1886-d56e-4aaa-a835-51bf3e1ea781](https://user-images.githubusercontent.com/1852447/233683948-b54ff276-4afe-44c4-ab1e-20b4e0624aa6.png)\r\n\r\n(where `initial=1024` items and `resize=8` by default). A `std::vector` grows exponentially (and therefore logarithmically often) in order to preserve contiguousness, and therefore it can overallocate by at most its resize factor (usually `1.5`, right?). By allocating equal-sized panels, we only overallocate by `initial \u00d7 resize`, which doesn't scale with the total length of the `GrowableBuffer` as the `std::vector` does.\r\n\r\nSo keeping this logic in C++ is a good thing for controlling memory use, and the speed is close to optimal if our `resize` factor is big enough that the panel-handling overhead does not dominate over the data copy that we have to do anyway.\r\n\r\nIn Numba, however, things are different. The same argument about controlling memory use holds, but this Numba-`GrowableBuffer` actually uses `nb.typed.List` to manage its list of panels, which are `nb.types.ArrayType`. All of these things have to be reference-counted, unlike the C++ implementation, which is a linked list of `std::unique_ptrs`. Worse still, we have to put integer metadata (total length and length of the last panel) into a `nb.types.ArrayType` to ensure that all references to the `GrowableBuffer` share the same mutable state. So there are multiple ways in which this `GrowableBuffer` could be slower than just using Numba's `nb.typed.List` directly.\r\n\r\nI found that to be the case: this `GrowableBuffer` is a few times slower than an `nb.typed.List` of numbers.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/1852447/233675206-17bbff07-d186-40b9-b59f-b23255c2523b.png\">\r\n\r\nFor your work, @HDembinski, I think you should continue to use `nb.typed.List`. @ianna pointed you to this because you had asked for it a few years ago. Although `nb.typed.List` existed (since 2019) when you asked in scikit-hep/uproot5/discussions/307 (2021), I didn't know about it, and I had had bad experiences with Numba's old reflected list.\r\n\r\nFor our work, I'm not sure whether we should use this `GrowableBuffer` _in Numba_ or not. (No question about using the C++ `GrowableBuffer` in C++.) For now, we won't change anything, but in the future, we might replace the Numba-`GrowableBuffer`'s implementation with a simple `nb.typed.List` internally\u2014it would become a thin wrapper. That would still have value because we want to maintain some symmetry between the C++ `LayoutBuilder` and the Numba `LayoutBuilder`'s implementations; it would be easier to compare them if both are interacting with an object named `GrowableBuffer`.\r\n\r\nIt's also useful to have this `GrowableBuffer` because (as I said at the beginning), it's an illustration of how to write a mutable Numba extension type, a model for writing the `LayoutBuilder` classes.",
  "created_at":"2023-04-21T16:39:48Z",
  "id":1518081870,
  "issue":2403,
  "node_id":"IC_kwDODBCWws5afBdO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-21T16:39:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Great answer, thank you. Your implementation sounds like how a C++ std::deque is implemented, although the details could be different.",
  "created_at":"2023-04-21T18:08:11Z",
  "id":1518173931,
  "issue":2403,
  "node_id":"IC_kwDODBCWws5afX7r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-21T18:08:11Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"MEMBER",
  "body":"The first thing that seems like a problem is that `pip` is trying to compile `awkward-cpp`. Either none of the many platform-Python version combinations in https://pypi.org/project/awkward-cpp/#files match your system or you intentionally asked for a recompilation with `--no-binary`. If it's the former, we'd be interested to know what system you have that is not in our list of prebuilt wheels. Maybe it could be added. If it's the latter, it would be interesting to know why you want to rebuild it from source.\r\n\r\nBut okay, assuming that it's going to be rebuilt from source, the error here is happening in Scikit-build, which is used to organize the compilation. Somehow, this Scikit-build is lacking a `__version__` string. Such a thing doesn't exist in the Scikit-build [source code](https://github.com/scikit-build/scikit-build/blob/main/skbuild/_version.pyi); presumably it's supposed to be generated when Scikit-build gets installed, which suggests that your Scikit-build is not properly installed. Any thoughts on this, @henryiii?\r\n\r\nAlthough `pip` is supposed to be able to build from scratch (when an appropriate wheel can't be found or `--no-binary` is requested), there's another way to build from scratch that allows for developing, if that's what you're intending to do: https://github.com/scikit-hep/awkward#installation-for-developers",
  "created_at":"2023-04-15T17:39:40Z",
  "id":1509903764,
  "issue":2404,
  "node_id":"IC_kwDODBCWws5Z_02U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-15T17:39:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"The OS is FreeBSD 13.1. There are no binaries.\r\n\r\n",
  "created_at":"2023-04-15T17:55:34Z",
  "id":1509914999,
  "issue":2404,
  "node_id":"IC_kwDODBCWws5Z_3l3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-15T17:55:34Z",
  "user":"MDQ6VXNlcjI3MTkwNg=="
 },
 {
  "author_association":"MEMBER",
  "body":"FreeBSD is an important OS with a significant share of the server market. (Last time I checked, anyway. I'm not finding figures now that substantiate this. Maybe I'm decades out of date?)\r\n\r\nI would have thought, though, that one of the so-called \"manylinux\" wheels would work on FreeBSD, since \"manylinux\" actually just means a set of common shared libraries with minimal version numbers. Some recent FreeBSD ought to be ahead of some of the manylinux specifications. But if `pip` didn't automatically know that, I'm not sure how to check it or convince `pip` that it should have used it. Maybe the `auditwheel` tool can say something about this.\r\n\r\nIn my recent web searches, I haven't been able to find out how FreeBSD users do Python-pip installation at all.\r\n\r\nHmmm. https://github.com/conda/conda/issues/10450#issuecomment-812589409 Maybe you could use the \"Linux compatibility layer?\"",
  "created_at":"2023-04-15T18:16:23Z",
  "id":1509919171,
  "issue":2404,
  "node_id":"IC_kwDODBCWws5Z_4nD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-15T18:16:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Yes, FreeBSD is used a lot in servers.\r\n\r\nFor ports/packages purposed we need to build a package from source.\r\n\r\nI encountered this problem while trying to create a FreeBSD port for awkward.",
  "created_at":"2023-04-15T18:24:45Z",
  "id":1509921602,
  "issue":2404,
  "node_id":"IC_kwDODBCWws5Z_5NC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-15T18:24:45Z",
  "user":"MDQ6VXNlcjI3MTkwNg=="
 },
 {
  "author_association":"MEMBER",
  "body":"Is it due to an old version of hatch-vcs? The current ones produce `__version__`. If you build scikit-build-core from source and have an old hatch-vcs, that might happen. I can switch this to the classic import name in the next release to be safer. \r\n\r\nBSD do not have the necessary forward compatibility or cross-compatibility guarantees requires to make a \u201cmanybsd\u201d common binary platform. It\u2019s been discussed off and on for years. But so far it\u2019s not feasible.",
  "created_at":"2023-04-15T18:34:22Z",
  "id":1509923488,
  "issue":2404,
  "node_id":"IC_kwDODBCWws5Z_5qg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-15T18:34:22Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, that makes sense. But in that case, I think the problem is with Scikit-build, awkward-cpp's build dependency. And not necessarily Scikit-build itself but the way it was installed. Is it possible to run [Scikit-build's tests](https://github.com/scikit-build/scikit-build/tree/main/tests)?\r\n\r\nSpecifically,\r\n\r\n```\r\ncannot import name '__version__' from 'scikit_build_core._version'\r\n```\r\n\r\nlooks like the stopping issue here. Ah, @henryiii just responded with more insight into the problem.",
  "created_at":"2023-04-15T18:35:23Z",
  "id":1509923670,
  "issue":2404,
  "node_id":"IC_kwDODBCWws5Z_5tW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-15T18:35:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually it looks like it was a change in setuptools-scm's default template, which would make it requires a recent setuptools-scm. I've switched to the previous name (which still works), so the next patch release (soonish, probably by EoD Monday) will work with those versions.",
  "created_at":"2023-04-16T00:42:46Z",
  "id":1510010640,
  "issue":2404,
  "node_id":"IC_kwDODBCWws5aAO8Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-16T00:42:46Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"scikit-build-core 0.3.1 uses the old name, and came out yesterday, could you try again with that?",
  "created_at":"2023-04-17T02:38:41Z",
  "id":1510606857,
  "issue":2404,
  "node_id":"IC_kwDODBCWws5aCggJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-17T02:38:52Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm going to close this issue, if that's OK with everyone involved, as it's not an issue with `awkward-cpp` :)",
  "created_at":"2023-04-20T13:48:39Z",
  "id":1516365076,
  "issue":2404,
  "node_id":"IC_kwDODBCWws5aYeUU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-20T13:48:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2406?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2406](https://codecov.io/gh/scikit-hep/awkward/pull/2406?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2abdf60) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2a42f42b4726c696028b58c395125612b8bb06b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2a42f42) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-04-17T14:09:10Z",
  "id":1511427740,
  "issue":2406,
  "node_id":"IC_kwDODBCWws5aFo6c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-17T14:09:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2407?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2407](https://codecov.io/gh/scikit-hep/awkward/pull/2407?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9dacf6f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d4bbddedb575b8288f477ee203d5bee97bd0bbbb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d4bbdde) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2407?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/2407?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-04-17T21:50:37Z",
  "id":1512127789,
  "issue":2407,
  "node_id":"IC_kwDODBCWws5aIT0t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-17T21:50:37Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2408?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2408](https://app.codecov.io/gh/scikit-hep/awkward/pull/2408?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7562075) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/1f6041ed63cc43befe5988798805c40003f9c775?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1f6041e) will **increase** coverage by `0.40%`.\n> The diff coverage is `88.49%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2408?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/growablebuffer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2408?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvZ3Jvd2FibGVidWZmZXIucHk=) | `71.89% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layoutbuilder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2408?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0YnVpbGRlci5weQ==) | `87.26% <87.26%> (\u00f8)` | |\n| [src/awkward/numba/layoutbuilder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2408?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEvbGF5b3V0YnVpbGRlci5weQ==) | `89.51% <89.51%> (\u00f8)` | |\n| [src/awkward/numba/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2408?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEvX19pbml0X18ucHk=) | `97.81% <100.00%> (\u00f8)` | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2408/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-18T11:40:13Z",
  "id":1512929052,
  "issue":2408,
  "node_id":"IC_kwDODBCWws5aLXcc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T20:46:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"### Defining the semantics\r\n\r\nWhat methods should all the builders have and what should they do? (Anything that has `append` has an `extend`.) Everything has a `__len__`. They have the indexes they need (`ListOffset` has `offsets`, etc.) as properties.\r\n\r\n- `Numpy`: `append` passes a value to `GrowableBuffer.append`\r\n- `Empty`: has no methods; can't be filled\r\n- `ListOffset`:\r\n  - has `content` property\r\n  - `begin_list` returns `content`\r\n  - `end_list` appends the length of `content` to `offsets`\r\n- `Regular`:\r\n  - has `content` property\r\n  - `begin_list` returns `content`\r\n  - `end_list` does nothing\r\n- `IndexedOption`:\r\n  - has `content` property\r\n  - `append_valid` appends the length of `content` to `index` and returns `content`\r\n  - `append_invalid` appends a `-1` to the `index` and returns nothing\r\n- `ByteMasked`:\r\n  - has `content` property\r\n  - `append_valid` appends `valid_when` as a byte to `mask` and returns `content`\r\n  - `append_invalid` appends `not valid_when` as a byte to `mask` and returns `content`\r\n- `BitMasked`:\r\n  - has `content` property and a length-2 NumPy array of `length` and `bit_position` (to avoid a modulo)\r\n  - `append_valid` appends `valid_when` as a bit to `mask` and updates `length` and `bit_position` and returns `content`\r\n  - `append_invalid` appends `not valid_when` as a bit to `mask` and updates `length` and `bit_position` and returns `content`\r\n- `Unmasked`: has `content` property\r\n- `Record`:\r\n  - has nonempty `contents` property\r\n  - `fields` property, `content(string literal)` method that returns an element of the `contents`\r\n- `Tuple`:\r\n  - has nonempty `contents` property\r\n  - `content(integer literal)` method that returns an element of the `contents`\r\n- `Union`:\r\n  - has `contents` property of length >= 2\r\n  - `append_content(integer literal)` method that appends the literal integer to `tags`, appends the length of that one `content` to `index` and returns that one `content`\r\n\r\nWe're dropping `List` and `Indexed`, since they don't produce arrays that are usefully different from what you can construct with the above. This is similar to the reasoning about dropping `EmptyRecord`, `EmptyTuple`.\r\n\r\nThere are types you can't make with this: empty records and tuples, and `RegularArray` with `size == 0`. Given an array made with the above, you can get all of those with slices.",
  "created_at":"2023-06-07T16:11:02Z",
  "id":1581137471,
  "issue":2408,
  "node_id":"IC_kwDODBCWws5ePj4_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-07T16:15:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"By the way, I'm not ignoring this\u2014it's a large PR that I'll need to allocate a large block of time to.",
  "created_at":"2023-06-23T16:43:17Z",
  "id":1604536693,
  "issue":2408,
  "node_id":"IC_kwDODBCWws5fo0l1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-23T16:43:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Most of the comments I've made above apply to all `LayoutBuilder` subclasses, but I only wrote them for the first instances to avoid cluttering this PR thread.\r\n\r\nI also suggested that all of the `LayoutBuilder` subclasses should have a `form` property, so that their Form (and from that, the Type) can be determined without doing a snapshot. This property does not need to be implemented in the compiled context (and can't be, since Forms haven't been lowered to Numba).\r\n\r\nThose `form` implementations would be a straightforward recursion, and can be tested against the `snapshot`'s Forms in the tests.",
  "created_at":"2023-06-27T02:37:26Z",
  "id":1608632801,
  "issue":2408,
  "node_id":"IC_kwDODBCWws5f4cnh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T02:37:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"As you said in the group meeting today, this PR is now done(ish?) and reviewable, so I'll take it out of draft status and remind myself to review it again.",
  "created_at":"2023-06-29T12:53:15Z",
  "id":1613132825,
  "issue":2408,
  "node_id":"IC_kwDODBCWws5gJnQZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T12:53:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2409?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2409](https://codecov.io/gh/scikit-hep/awkward/pull/2409?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fad8734) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2b4b6d3fe93e514ccf1fcfaae90ca8b6c7e8fb93?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2b4b6d3) will **increase** coverage by `0.01%`.\n> The diff coverage is `97.05%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2409?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends/dispatch.py](https://codecov.io/gh/scikit-hep/awkward/pull/2409?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2Rpc3BhdGNoLnB5) | `94.02% <80.00%> (-1.36%)` | :arrow_down: |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2409?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `94.02% <100.00%> (+0.72%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-04-18T14:57:21Z",
  "id":1513304480,
  "issue":2409,
  "node_id":"IC_kwDODBCWws5aMzGg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-18T15:00:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this PR changes how empty arrays behave; they are returned without conversion.\r\n\r\ne.g. (old)\r\n```pycon\r\n>>> ak.broadcast_arrays([], [1,2,])\r\n[<Array [] type='0 * float64'>, <Array [] type='0 * int64'>]\r\n\r\n\r\n```\r\nvs (new)\r\n```pycon\r\n>>> ak.broadcast_arrays([], [1,2,])\r\n[<Array [] type='0 * unknown'>, <Array [] type='0 * int64'>]\r\n```\r\n\r\nWe touched on an aspect of this https://github.com/scikit-hep/awkward/issues/2364, do you agree with this change?\r\n\r\nI think in-general we should remove this conversion logic from `broadcast_and_apply`, as we want to avoid converting to an arbitrary dtype.",
  "created_at":"2023-04-18T16:57:12Z",
  "id":1513502201,
  "issue":2410,
  "node_id":"IC_kwDODBCWws5aNjX5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-18T16:57:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2410?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2410](https://codecov.io/gh/scikit-hep/awkward/pull/2410?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2534d5f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2b4b6d3fe93e514ccf1fcfaae90ca8b6c7e8fb93?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2b4b6d3) will **increase** coverage by `0.10%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2410?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/2410?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <100.00%> (\u00f8)` | |\n\n... and [6 files with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2410/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-18T17:03:44Z",
  "id":1513510723,
  "issue":2410,
  "node_id":"IC_kwDODBCWws5aNldD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-18T17:03:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't see why broadcasting should change a dtype, so the new behavior is better. It's also small enough and corner-case enough that we don't need to do a deprecation cycle. (Also, it's unclear how we could, since it's a difference in return value, not arguments.)",
  "created_at":"2023-04-18T17:34:08Z",
  "id":1513557252,
  "issue":2410,
  "node_id":"IC_kwDODBCWws5aNw0E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-18T17:34:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ok! I'll make another PR to remove empty conversion in general, which could also (if we want) remove conversion for reducers too. ",
  "created_at":"2023-04-18T19:19:59Z",
  "id":1513678665,
  "issue":2410,
  "node_id":"IC_kwDODBCWws5aOOdJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-18T19:19:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2411?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2411](https://codecov.io/gh/scikit-hep/awkward/pull/2411?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (40affd9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3d3cc63be661f7938ae0e2dd76dec5e9d68396fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3d3cc63) will **decrease** coverage by `0.02%`.\n> The diff coverage is `93.33%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2411?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/2411?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `90.52% <93.33%> (-1.64%)` | :arrow_down: |\n\n... and [1 file with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2411/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-19T12:30:59Z",
  "id":1514652492,
  "issue":2411,
  "node_id":"IC_kwDODBCWws5aR8NM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-19T12:38:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2412](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0469183) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3136218d14eb7349a0e61ba1ffc6725fd2634dc8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3136218) will **increase** coverage by `0.02%`.\n> The diff coverage is `56.25%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.22% <20.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.92% <25.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.42% <33.33%> (+0.01%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.53% <50.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `76.61% <50.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.32% <50.00%> (+0.05%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.26% <50.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.93% <50.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.34% <50.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `72.80% <50.00%> (+0.10%)` | :arrow_up: |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward/pull/2412?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-04-19T12:50:44Z",
  "id":1514680717,
  "issue":2412,
  "node_id":"IC_kwDODBCWws5aSDGN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-19T21:35:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2413](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3a1362b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3d3cc63be661f7938ae0e2dd76dec5e9d68396fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3d3cc63) will **decrease** coverage by `0.04%`.\n> The diff coverage is `76.31%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc2Nsb3NlLnB5) | `88.46% <60.00%> (-7.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_nan\\_to\\_num.py](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbnVtLnB5) | `94.82% <60.00%> (-3.33%)` | :arrow_down: |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `86.41% <63.63%> (-3.86%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXNrLnB5) | `92.59% <75.00%> (-3.41%)` | :arrow_down: |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `88.04% <100.00%> (-0.37%)` | :arrow_down: |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `94.21% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `92.72% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX2ZpZWxkLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_zip.py](https://codecov.io/gh/scikit-hep/awkward/pull/2413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha196aXAucHk=) | `91.07% <100.00%> (\u00f8)` | |\n\n... and [2 files with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2413/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-19T21:10:45Z",
  "id":1515385685,
  "issue":2413,
  "node_id":"IC_kwDODBCWws5aUvNV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-19T21:10:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"We now have an `ak.enforce_type`. Can this PR be closed?",
  "created_at":"2023-09-04T15:27:22Z",
  "id":1705447776,
  "issue":2413,
  "node_id":"IC_kwDODBCWws5lpxFg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:27:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think the contrary; we want to be stricter now that it's easier to remove unknown arrays through `enforce_type`.",
  "created_at":"2023-09-04T15:32:09Z",
  "id":1705453307,
  "issue":2413,
  "node_id":"IC_kwDODBCWws5lpyb7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:32:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"So `EmptyArray` would not be allowed to broadcast with `NumpyArray` at all? Even though someone could reassign `EmptyArray`, that sounds inconvenient. (Broadcasting is only ever about convenience.)",
  "created_at":"2023-09-04T15:39:06Z",
  "id":1705461528,
  "issue":2413,
  "node_id":"IC_kwDODBCWws5lp0cY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:39:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Rather that it won't be coerced during broadcasting. This PR name should really imply that broadcasting won't handle unknown arrays, just as it doesn't handle NumPy arrays.",
  "created_at":"2023-09-04T15:54:54Z",
  "id":1705478664,
  "issue":2413,
  "node_id":"IC_kwDODBCWws5lp4oI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:54:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"So the broadcasting logic can be simplified by just removing the `EmptyArray` case? That sounds good! But it would probably be easier to start over, rather than bring this PR up-to-date, right?",
  "created_at":"2023-09-04T15:56:32Z",
  "id":1705480619,
  "issue":2413,
  "node_id":"IC_kwDODBCWws5lp5Gr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:56:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2415?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2415](https://codecov.io/gh/scikit-hep/awkward/pull/2415?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2d7c863) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3136218d14eb7349a0e61ba1ffc6725fd2634dc8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3136218) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-04-19T18:10:44Z",
  "id":1515162556,
  "issue":2415,
  "node_id":"IC_kwDODBCWws5aT4u8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-19T21:42:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2417?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2417](https://codecov.io/gh/scikit-hep/awkward/pull/2417?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (55c1494) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/fea6249d10f46278fba010a737e36cfe234970fa?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fea6249) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2417?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2417?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.80% <100.00%> (+0.27%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-04-20T12:30:34Z",
  "id":1516244922,
  "issue":2417,
  "node_id":"IC_kwDODBCWws5aYA-6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-20T12:40:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2418?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2418](https://codecov.io/gh/scikit-hep/awkward/pull/2418?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d1b65ca) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/fea6249d10f46278fba010a737e36cfe234970fa?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fea6249) will **increase** coverage by `0.10%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2418?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2418?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.57% <100.00%> (+5.37%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-04-20T13:54:59Z",
  "id":1516375179,
  "issue":2418,
  "node_id":"IC_kwDODBCWws5aYgyL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-20T13:54:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"~~Whenever you can please merge and I'll continue on with finishing up ADL benchmark Q8.~~\r\n~~If I can finish that, we're \ud83d\ude80. I'd just like to keep giving feedback until it's going!~~\r\n\r\nApologies I am not braining well today. I'll merge locally and try it out. :-)",
  "created_at":"2023-04-20T16:26:22Z",
  "id":1516619161,
  "issue":2418,
  "node_id":"IC_kwDODBCWws5aZcWZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-20T16:26:57Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@agoose77 @jpivarski just confirmed this now - all the [ADL benchmarks](https://github.com/CoffeaTeam/coffea-benchmarks/blob/coffea2023/coffea-adl-benchmarks.ipynb) work perfectly with this patch in place :-) Please merge it! \ud83d\ude80 ",
  "created_at":"2023-04-20T16:37:31Z",
  "id":1516633884,
  "issue":2418,
  "node_id":"IC_kwDODBCWws5aZf8c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-20T16:37:31Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"We don't need codecov to pass, and it's stuck, so I'll just merge it manually.",
  "created_at":"2023-04-21T17:01:33Z",
  "id":1518104927,
  "issue":2421,
  "node_id":"IC_kwDODBCWws5afHFf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-21T17:01:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"To be clear, I was more thinking in the distributed context, i.e. whether `dak.to_parquet` allowed repartitioning the distributed dask-awkward array. @lgray indicated that this does not exist at present.",
  "created_at":"2023-04-24T16:44:57Z",
  "id":1520504893,
  "issue":2422,
  "node_id":"IC_kwDODBCWws5aoRA9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-24T16:44:57Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, I see. If it's distributed, then each worker has to fill a separate file, and a common metadata file should be created after they're all done. That's something `dak.to_parquet` could do, since it could add the final-metadata task in the DAG.\r\n\r\nBut the issue still stands: I think we have this memory-saving (but not time-saving) feature in `ak.to_parquet` which is also useful for making the file more granular upon reading.",
  "created_at":"2023-04-24T16:48:42Z",
  "id":1520509387,
  "issue":2422,
  "node_id":"IC_kwDODBCWws5aoSHL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-24T16:48:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is not currently the case; currently `ak.to_layout` is used to load data into a layout. We could add this, though; I'll make that a feature request.",
  "created_at":"2023-04-25T15:29:38Z",
  "id":1522002751,
  "issue":2422,
  "node_id":"IC_kwDODBCWws5at-s_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T15:29:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think it might be a lost feature, then. But it was pretty well hidden, too, and maybe we should rethink the API to provide it in a more obvious way. We certainly wouldn't want someone to pass in a jagged array as a list (non-array iterator) and get a separate row group for every short nested list.\r\n\r\nI'll close this issue and think about it offline.",
  "created_at":"2023-04-25T17:42:58Z",
  "id":1522174813,
  "issue":2422,
  "node_id":"IC_kwDODBCWws5auotd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T17:42:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2423?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2423](https://codecov.io/gh/scikit-hep/awkward/pull/2423?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e0dfb35) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d53227141ea5cf690692c0d00cfa1e628977ea37?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d532271) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-04-25T01:12:59Z",
  "id":1521023582,
  "issue":2423,
  "node_id":"IC_kwDODBCWws5aqPpe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T01:12:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I removed codecov as a required test. (It was a weak requirement anyway; the test coverage would have to drop way down for it to fail.)",
  "created_at":"2023-04-25T18:42:46Z",
  "id":1522249616,
  "issue":2424,
  "node_id":"IC_kwDODBCWws5au6-Q",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2023-04-25T18:42:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2425](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cfb4803) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d53227141ea5cf690692c0d00cfa1e628977ea37?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d532271) will **increase** coverage by `0.00%`.\n> The diff coverage is `83.09%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdHlwZS5weQ==) | `95.21% <75.00%> (-0.40%)` | :arrow_down: |\n| [src/awkward/types/listtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbGlzdHR5cGUucHk=) | `90.00% <80.00%> (-1.67%)` | :arrow_down: |\n| [src/awkward/types/optiontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvb3B0aW9udHlwZS5weQ==) | `80.35% <80.00%> (-0.42%)` | :arrow_down: |\n| [src/awkward/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvcmVjb3JkdHlwZS5weQ==) | `87.50% <80.00%> (+1.29%)` | :arrow_up: |\n| [src/awkward/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5pb250eXBlLnB5) | `85.96% <80.00%> (-0.83%)` | :arrow_down: |\n| [src/awkward/types/unknowntype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5rbm93bnR5cGUucHk=) | `90.90% <80.00%> (-2.20%)` | :arrow_down: |\n| [src/awkward/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `85.13% <81.48%> (-0.51%)` | :arrow_down: |\n| [src/awkward/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvcmVndWxhcnR5cGUucHk=) | `91.66% <83.33%> (-1.52%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.84% <100.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/forms/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvX19pbml0X18ucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| ... and [2 more](https://codecov.io/gh/scikit-hep/awkward/pull/2425?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [14 files with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2425/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-25T09:51:57Z",
  "id":1521503537,
  "issue":2425,
  "node_id":"IC_kwDODBCWws5asE0x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-26T08:12:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> One thing that's missing: a categorical type has to create an IndexedForm node and add __array__: \"categorical\" to it, or find an IndexedOptionForm and add __array__: \"categorical\" to that instead. Examples:\r\n\r\nGood point!",
  "created_at":"2023-04-25T22:06:52Z",
  "id":1522481440,
  "issue":2425,
  "node_id":"IC_kwDODBCWws5avzkg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T22:06:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2426?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2426](https://codecov.io/gh/scikit-hep/awkward/pull/2426?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e961105) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d53227141ea5cf690692c0d00cfa1e628977ea37?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d532271) will **increase** coverage by `0.02%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2426?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2426?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.51% <\u00f8> (+0.16%)` | :arrow_up: |\n\n... and [4 files with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2426/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-04-25T10:36:02Z",
  "id":1521561500,
  "issue":2426,
  "node_id":"IC_kwDODBCWws5asS-c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T10:36:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yeah, originally I thought we'd need to be careful about where to introduce the options. However, I think this is fine; options always merge parameters with non options at the `.content` level, so merging early won't cause problems there, I think.",
  "created_at":"2023-04-25T22:46:28Z",
  "id":1522513475,
  "issue":2427,
  "node_id":"IC_kwDODBCWws5av7ZD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T22:46:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2429?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2429](https://codecov.io/gh/scikit-hep/awkward/pull/2429?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1a692c6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b10e63862cc818fd4ca12af29857cd66b72b2516?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b10e638) will **decrease** coverage by `0.04%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2429?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2429?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `75.86% <0.00%> (-1.07%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward/pull/2429?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `92.59% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/2429?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX2ZpZWxkLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-04-25T19:10:53Z",
  "id":1522284176,
  "issue":2429,
  "node_id":"IC_kwDODBCWws5avDaQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T22:29:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"This variant also fails, with the PR thus far:\r\n```python3\r\nimport json\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nfromjson = {\r\n    \"class\": \"RecordArray\",\r\n    \"fields\": [\"muon\"],\r\n    \"contents\": [\r\n        {\r\n#            \"class\": \"ListOffsetArray\",\r\n#            \"offsets\": \"i64\",\r\n#            \"content\": {\r\n                \"class\": \"RecordArray\",\r\n                \"fields\": [\"pt\", \"eta\", \"phi\", \"crossref\", \"thing1\"],\r\n                \"contents\": [\r\n                    {\r\n                        \"class\": \"NumpyArray\",\r\n                        \"primitive\": \"int64\",\r\n                        \"inner_shape\": [],\r\n                        \"parameters\": {},\r\n                        \"form_key\": \"muon_pt!\",\r\n                    },\r\n                    {\r\n                        \"class\": \"NumpyArray\",\r\n                        \"primitive\": \"int64\",\r\n                        \"inner_shape\": [],\r\n                        \"parameters\": {},\r\n                        \"form_key\": \"muon_eta!\",\r\n                    },\r\n                    {\r\n                        \"class\": \"NumpyArray\",\r\n                        \"primitive\": \"int64\",\r\n                        \"inner_shape\": [],\r\n                        \"parameters\": {},\r\n                        \"form_key\": \"muon_phi!\",\r\n                    },\r\n                    {\r\n                        \"class\": \"ListOffsetArray\",\r\n                        \"offsets\": \"i64\",\r\n                        \"content\": {\r\n                            \"class\": \"NumpyArray\",\r\n                            \"primitive\": \"int64\",\r\n                            \"inner_shape\": [],\r\n                            \"parameters\": {},\r\n                            \"form_key\": \"muon_crossref_content!\",\r\n                        },\r\n                        \"parameters\": {},\r\n                        \"form_key\": \"muon_crossref_index!\",\r\n                    },\r\n                    {\r\n                        \"class\": \"NumpyArray\",\r\n                        \"primitive\": \"int64\",\r\n                        \"inner_shape\": [],\r\n                        \"parameters\": {},\r\n                        \"form_key\": \"muon_thing1!\",\r\n                    },\r\n                ],\r\n                \"parameters\": {\"__record__\": \"TestBehavior\"},\r\n                \"form_key\": \"muon_record!\",\r\n            },\r\n#            \"parameters\": {},\r\n#            \"form_key\": \"muon_list_outer!\",\r\n#        },\r\n    ],\r\n    \"parameters\": {},\r\n    \"form_key\": \"outer!\",\r\n}\r\n\r\n@ak.mixin_class(ak.behavior)\r\nclass TestBehavior:\r\n    @ak.mixin_class_method(np.add, {\"TestBehavior\"})\r\n    def add(self, other):\r\n        return ak.zip(\r\n            {\r\n                \"pt\": self.pt + other.pt,\r\n            },\r\n            with_name=\"TestBehavior\",\r\n            behavior=self.behavior,\r\n        )\r\n\r\nform = ak.forms.from_json(json.dumps(fromjson))\r\n\r\nttlayout, report = ak._nplikes.typetracer.typetracer_with_report(form, forget_length=True)\r\n\r\nttarray = ak.Array(ttlayout, behavior=ak.behavior)\r\n\r\nmuons = ttarray.muon\r\n\r\n# both of the following fail individually and are required\r\nmuons = ak.with_field(muons, 0.4, \"something\")\r\n\r\nttarray[\"othermuons\"] = muons\r\n\r\nmuons[\"somethingelse\"] = 0.5\r\n```\r\n\r\n",
  "created_at":"2023-04-25T20:01:25Z",
  "id":1522344282,
  "issue":2429,
  "node_id":"IC_kwDODBCWws5avSFa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T20:04:09Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray apologies, my previous commit never pushed to the remote. I've made another commit to address your reproducer (thanks!), does it work now?",
  "created_at":"2023-04-25T21:35:28Z",
  "id":1522452053,
  "issue":2429,
  "node_id":"IC_kwDODBCWws5avsZV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-25T21:35:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"With the view that data touching occurs when an operation meaningfully depends upon the contents of a buffer, I don't expect `with_field` to touch the `flat_list!` key. The proper way for optimisations to be applied, though, is to inject \"fake\" buffers that allow us to avoid rewriting layouts (which is not just easier to reason about, but is also more correct). That's being tracked [here](https://github.com/dask-contrib/dask-awkward/pull/184). \r\n\r\nI'll ping @jpivarski just to get his perspective; I don't want to make a bold statement that's incorrect here.\r\n\r\nIf my view holds, then we'll need to move this issue to `dask-awkward` :)",
  "created_at":"2023-04-26T07:49:38Z",
  "id":1522944818,
  "issue":2431,
  "node_id":"IC_kwDODBCWws5axksy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-26T08:07:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Looking at this again, it's clear that the above statement is wrong: we _should_ touch `flat_list!` because it gets broadcasted to fit the muon list structure! This is also fixed \u2014 we now touch these data due to advanced indexing of typetracer arrays during broadcasting. Thanks for the issue Lindsey!\r\n\r\nClosed by #2479 ",
  "created_at":"2023-06-16T12:17:04Z",
  "id":1594587078,
  "issue":2431,
  "node_id":"IC_kwDODBCWws5fC3fG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-16T12:17:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"**IP addresses as strings:** they usually arrive as strings. In fact, as bytestrings\u2014not `127.0.0.1`, but `b'\\x7f\\x00\\x00\\x01'`. Libraries of algorithms on them will likely expect that, too. It would be a pain to convert them into tuples and back again.\r\n\r\n---------------------------\r\n\r\n**What are all the ways that people use `ak.behavior`?**\r\n\r\n  1. https://pivarski-princeton.s3.amazonaws.com/GitHub-CMSSW-user-nonfork-raw-data-1Mcut.tar (82.7 GB)\r\n  2. https://pivarski-princeton.s3.amazonaws.com/GitHub-ROOT-user-nonfork-raw-data-1Mcut.tar (44.3 GB)\r\n\r\nare the full contents of all the non-fork repos of users who have either (1) forked CMSSW before Feb 14, 2023 or (2) had any GitHub interaction at all with ROOT between 2017 and April 13, 2013. After untarring them (in a new, empty directory), they're thousands of username directories containing tens of thousands of zipped-tarball repos.\r\n\r\nI'm running this on all of them:\r\n\r\n```python\r\nimport glob\r\nimport tarfile\r\nimport re\r\n\r\nfor filename in glob.glob(\"/home/jpivarski/storage/data/GitHub-*-raw-data-1Mcut/*/*.tgz\"):\r\n    try:\r\n        with tarfile.open(filename) as repo_tgz:\r\n            for info in repo_tgz:\r\n                try:\r\n                    if info.name.lower().endswith(\".py\"):\r\n                        with repo_tgz.extractfile(info) as file:\r\n                            text = file.read()\r\n                            for match in re.finditer(b\"^\\s*(.*\\.behavior\\s*\\[.*)$\", text, re.M):\r\n                                try:\r\n                                    print(\r\n                                        info.name + \"\\t\" + match.group(1).decode(errors=\"surrogateescape\"),\r\n                                        flush=True,\r\n                                    )\r\n                                except:\r\n                                    pass\r\n                except:\r\n                    pass\r\n    except:\r\n        pass\r\n\r\n```\r\n\r\nI'll post the results here. The `info.name` will contain the `USERNAME/REPONAME/full/path/to/file`.\r\n\r\nFor more information, see the README on https://github.com/jpivarski-talks/2023-05-09-chep23-analysis-of-physicists.",
  "created_at":"2023-04-26T19:18:24Z",
  "id":1523924042,
  "issue":2432,
  "node_id":"IC_kwDODBCWws5a1TxK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-26T19:33:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Wow, that's not many results at all:\r\n\r\n```\r\nssrothman/EECAnalysis/processing/EECProcessor.py\tfname = data.behavior[\"__events_factory__\"]._partition_key.replace(\"/\", \"-\")\r\nPKUfudawei/NanoAnalysis/src/processors/Processor.py\ttokens = self.event.behavior[\"__events_factory__\"]._partition_key.split('/')\r\nmaxgalli/FlashSimStudies/preprocessing/extract_photons.py\tf_out = events.behavior[\"__events_factory__\"]._partition_key.replace(\r\nnikoladze/physlite_experiments/physlite_experiments/behavior.py\treturn self.behavior[\"__events__\"][0]()\r\n```\r\n\r\n  * [ssrothman/EECAnalysis/processing/EECProcessor.py](https://github.com/ssrothman/EECAnalysis/blob/1b9e77caa823e3dc485715182605ea223f8b44ea/processing/EECProcessor.py#L445)\r\n  * [PKUfudawei/NanoAnalysis/src/processors/Processor.py](https://github.com/PKUfudawei/NanoAnalysis/blob/e87a17fdf8428f022f61c90646f96c3f54173620/src/processors/Processor.py#L247)\r\n  * [maxgalli/FlashSimStudies/preprocessing/extract_photons.py](https://github.com/maxgalli/FlashSimStudies/blob/74b01cb80e9ce4141014c5b0bb65dff55db64ebc/preprocessing/extract_photons.py#L159-L161)\r\n  * [nikoladze/physlite_experiments/physlite_experiments/behavior.py](https://github.com/nikoladze/physlite_experiments/blob/e640bb3b906f5da037ba60e1a143d5f44347c638/physlite_experiments/behavior.py#L11)\r\n\r\nThere were some instances of `ak.behavior.update(some_dict)` but that dict came from some library (not included in the personal, non-fork repos). There were also uses of `@ak.mixin_class`, which sets behaviors, but only for records and arrays of records.\r\n\r\nI think it's safe to say that _nobody_ is overloading `__array__` parameters.",
  "created_at":"2023-04-26T19:48:05Z",
  "id":1523956383,
  "issue":2432,
  "node_id":"IC_kwDODBCWws5a1bqf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-26T19:48:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Huh, interesting! I would have predicted more than that. I wonder how these results change for local behaviours in `array.behavior`? These would likely be found with a non-delimited regex like `r\"\\bbehavior\\[\"`, module some false positives.",
  "created_at":"2023-04-26T20:20:31Z",
  "id":1523997291,
  "issue":2432,
  "node_id":"IC_kwDODBCWws5a1lpr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-26T20:20:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski and I discussed this today. We concluded that there are two favoured options to solving the problem of custom strings with string-like broadcasting:\r\n1. Arrays with `__array__: \"string\"` or `__array__: \"bytestring\"`, **AND** an optional `__string__` \"flavour\" parameter.\r\n2. Arrays with `__array__: \"string\"` or `__array__: \"bytestring\"`, **OR** with a `__string__` \"flavour\" parameter.\r\n\r\nBefore comparing these approaches, it's worth thinking about what we want from custom strings:\r\n- String-like broadcasting\r\n- String-like typestrings (already supported via `__typestr__`)\r\n- Well-defined rules for mixing string types\r\n- Custom behavior classes (e.g. ip-address methods)\r\n\r\nJim also pointed out that we might not need the behavior classes by default; the getitem logic already exists in our content objects. \r\n\r\nOption (1) does not admit distinct array classes _unless_ we extend the arrayclass lookup mechanism to consider both `__array__` and `__string__`. The easiest route would be:\r\n1. Is the array a `__array__: \"string\"` (or bytestring)?\r\n2. Does the array have a `__string__` variant?\r\n   1. Does the `__string__` name exist in `ak.behavior`? \u2192 Use this class\r\n4. Does the `__array__` name exist in `ak.behavior` (yes, always)? \u2192 Use this class\r\n\r\nThe problem with the above route is that the nominal type is now `__array__ OR __string__`. This dilutes the meaning of `__array__`, and makes it redundant if `__string__` is set.\r\nOr, we state that the nominal type of a custom string is `(__array__, __string__)`, e.g. `(\"string\", \"ip-address\")`. This means custom strings arrayclasses would be registered with `ak.behavior[\"string\", \"ip-address\"]` or `ak.behavior[\"bytestring\", \"ip-address\"]`. This feels unbalanced to me.\r\n\r\nOption (2) preserves `__array__` as the _nominal_ type. There remains a 1:1 relationship between the array class, type string, etc, and `__array__`. However, there is no longer a way to express \"this is a custom _byte_-string\". Therefore, we probably want `__bytestring__` as a complementary parameter that says \"this is a custom bytestring\".\r\n\r\nCrucially, option (2) allows us to decouple the _nominal_ type from the \"dtype\" (even though strings are not a dtype in awkward). \r\n\r\nI'm biased in favour of (2), but I'd like to discuss this further.",
  "created_at":"2023-05-31T21:56:05Z",
  "id":1571015709,
  "issue":2432,
  "node_id":"IC_kwDODBCWws5do8wd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-31T21:56:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I like option (2) as well.\r\n\r\nTo be specific, these are the classes that might not be needed or even used anymore (possible dead code):\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/ca7637a0b4fa0aba0337095a604145e2491df26f/src/awkward/behaviors/string.py#L12-L107\r\n\r\nWhen extracting a single string from an `ak.Array`, we don't return an instance of `StringBehavior` (as we would with ordinary overloads); we return a Python `str`. (Similarly for `bytes`.) This was raised as an issue in #873 and then spent some time as a draft PR in #874. Nobody complained, so it was implemented.\r\n\r\nIn fact, the following searches don't turn up any references to (not definitions of) the classes:\r\n\r\n  * [repo:scikit-hep/awkward StringBehavior](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+StringBehavior&type=code)\r\n  * [repo:scikit-hep/awkward ByteStringBehavior](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+ByteStringBehavior&type=code)\r\n  * [repo:scikit-hep/awkward CharBehavior](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+CharBehavior&type=code)\r\n  * [repo:scikit-hep/awkward ByteBehavior](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+ByteBehavior&type=code)\r\n\r\n(apart from tests and documentation). I highly doubt that anyone uses these objects outside our codebase, since they don't link to anything in the codebase, so they must be dead code.\r\n\r\nIt would also be fairly easy to deprecate them, now. Just add a warning to the `__init__` and then `super().__init__(*args, **kwargs)`.",
  "created_at":"2023-05-31T22:53:57Z",
  "id":1571067678,
  "issue":2432,
  "node_id":"IC_kwDODBCWws5dpJce",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-31T22:53:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"On that note - we don't use all of the behavior class methods for strings/chars, but we use some:\r\n- `ByteBehavior.__str__`, `.__repr__`\r\n- `CharBehavior.__str__`, `__repr__`\r\n\r\nI wonder whether custom `__str__` / `__repr__` should _also_ be assigned using `ak.behavior`, so that nested types can have nice reprs without having to resolve the array class. Then, I think, we can drop the need for a custom class in all cases, provided that we fix (if needed) the `__cast__` and scalar promotion of Python strings for `__eq__`, etc.",
  "created_at":"2023-06-01T17:29:56Z",
  "id":1572500929,
  "issue":2432,
  "node_id":"IC_kwDODBCWws5dunXB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-01T17:29:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't want to keep `ByteBehavior`/`CharBehavior` for the sake of their `__str__`/`__repr__`, but it is a good point that some overloaded types will want to overload how they appear in a string representation. Specifically, for this to catch it:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/47975bdc01e514e49340e784bfb46278a44ebb94/src/awkward/_prettyprint.py#L70-L90\r\n\r\nRecords can easily do this. For array-like overloads (e.g. IP addresses), there's still a class to overload, right? If there's a class to overload, there's nothing special to do: users can define a `__str__`/`__repr__` on that class.",
  "created_at":"2023-06-16T21:54:46Z",
  "id":1595356939,
  "issue":2432,
  "node_id":"IC_kwDODBCWws5fFzcL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-16T21:54:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I had the thought in #2528 that it's reasonable to keep the byte/char behaviors. We're considering making our _string_ abstraction built-in & customisable, but the byte/char arrays are not likely to be significantly impacted by this; custom strings use chars, and custom binary strings use bytes.",
  "created_at":"2023-06-23T09:44:01Z",
  "id":1604020583,
  "issue":2432,
  "node_id":"IC_kwDODBCWws5fm2ln",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-23T09:44:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #2549!",
  "created_at":"2023-06-30T12:25:30Z",
  "id":1614580028,
  "issue":2432,
  "node_id":"IC_kwDODBCWws5gPIk8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-30T12:25:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Here is what one must do to define a \"subclass\" for a record behavior now:\r\n\r\n```python\r\nimport numpy as np\r\nimport awkward as ak\r\nimport vector\r\nvector.register_awkward()\r\n\r\n\r\nclass MomentumRecord4DWithCharge(vector.backends.awkward.MomentumRecord4D):\r\n    pass\r\n\r\n\r\nclass MomentumArray4DWithCharge(vector.backends.awkward.MomentumArray4D):\r\n    pass\r\n\r\n\r\nak.behavior[\"Momentum4DWithCharge\"] = MomentumRecord4DWithCharge\r\nak.behavior[\"*\", \"Momentum4DWithCharge\"] = MomentumArray4DWithCharge\r\n\r\n\r\ndef add_them(x, y):\r\n    vector_x = ak.with_name(x, \"Momentum4D\")\r\n    vector_y = ak.with_name(y, \"Momentum4D\")\r\n    vector_out = ak.with_name(vector_x + vector_y, \"Momentum4DWithCharge\")\r\n    vector_out[\"charge\"] = x[\"charge\"] + y[\"charge\"]\r\n    return vector_out\r\n\r\n\r\nak.behavior[np.add, \"Momentum4DWithCharge\", \"Momentum4DWithCharge\"] = add_them\r\n```\r\n\r\nThen, given two arrays with the new name:\r\n\r\n```python\r\narray1 = ak.zip({\r\n    \"px\": [[1.1, 2.1], [], [3.1]],\r\n    \"py\": [[1.2, 2.2], [], [3.2]],\r\n    \"pz\": [[1.3, 2.3], [], [3.3]],\r\n    \"E\": [[10.0, 20.0], [], [30.0]],\r\n    \"charge\": [[+1, -1], [], [-1]],\r\n}, with_name=\"Momentum4DWithCharge\")\r\n\r\narray2 = ak.zip({\r\n    \"px\": [[4.1, 5.1], [], [6.1]],\r\n    \"py\": [[4.2, 5.2], [], [6.2]],\r\n    \"pz\": [[4.3, 5.3], [], [6.3]],\r\n    \"E\": [[40.0, 50.0], [], [60.0]],\r\n    \"charge\": [[-1, +1], [], [-1]],\r\n}, with_name=\"Momentum4DWithCharge\")\r\n\r\n(array1 + array2).show(type=True, limit_cols=120)\r\n```\r\n\r\nprints\r\n\r\n```\r\ntype: 3 * var * Momentum4DWithCharge[\r\n    x: float64,\r\n    y: float64,\r\n    z: float64,\r\n    t: float64,\r\n    charge: int64\r\n]\r\n[[{x: 5.2, y: 5.4, z: 5.6, t: 50, charge: 0}, {x: 7.2, y: 7.4, z: 7.6, t: 70, charge: 0}],\r\n [],\r\n [{x: 9.2, y: 9.4, z: 9.6, t: 90, charge: -2}]]\r\n```\r\n\r\nAdding new methods and properties is no big deal because this part is already handled by Python class inheritance. `MomentumArray4DWithCharge` is a subclass of `vector.backends.awkward.MomentumArray4D`, so it gets all of the Vector methods and properties:\r\n\r\n```python\r\n>>> array1.pt\r\n<Array [[1.63, 3.04], [], [4.46]] type='3 * var * float64'>\r\n```\r\n\r\nand I can add any new ones to the class definitions above.\r\n\r\nThe ugly part is the ufunc-handling, which is most often seen in operator overloading. (Although `__add__`, etc. functions could be added to the classes, there's a standard mapping to NumPy ufuncs, so it is easier to overload the ufuncs and get those operators for free.) The new name `\"Momentum4DWithCharge\"` does not match any behavior definitions like\r\n\r\n```python\r\nak.behavior[np.add, \"Momentum4D\", \"Momentum4D\"] = ...\r\n```\r\n\r\nso it's considered a completely new thing, a blank slate. Any attempt to add `array1` and `array2` before defining\r\n\r\n```python\r\nak.behavior[np.add, \"Momentum4DWithCharge\", \"Momentum4DWithCharge\"] = add_them\r\n```\r\n\r\nwould raise\r\n\r\n```\r\nTypeError: no numpy.add overloads for custom types: Momentum4DWithCharge, Momentum4DWithCharge\r\n\r\nThis error occurred while calling\r\n\r\n    numpy.add.__call__(\r\n        <MomentumArray4DWithCharge [[{px: 1.1, ...}, ...], ...] type='3 * v...'>\r\n        <MomentumArray4DWithCharge [[{px: 4.1, ...}, ...], ...] type='3 * v...'>\r\n    )\r\n```\r\n\r\nwhich is, admittedly, nicer than just getting the wrong answer (adding them as plain `\"Momentum4D\"` and losing their charge). This happens because records without explicit ufunc overloads fail in ufuncs: this is what the safety mechanism is supposed to do.\r\n\r\nIf this were normal Python inheritance, every `__add__`, etc. method would have to be overloaded to say what should happen with the new `\"charge\"` field. For addition, charges are added; for scalar multiplication, the charge should be unchanged but passed through, for computing the magnitude (`__abs__`), the charge is irrelevant, etc.\r\n\r\nIn this system, we still have to do that, but all of those overloads are not nested within the class definition, just as the original ufunc implementations were not nested within the class definition. That's not different. But there's no notion of `super()`; we can only say that addition on `\"Momentum4DWithCharge\"` should do what addition on `\"Momentum4D\"` does plus a little more by explicitly casting to the supertype. Nothing tells us that Momentum4DWithCharge's direct supertype is Momentum4D.\r\n\r\n```python\r\ndef add_them(x, y):\r\n    vector_x = ak.with_name(x, \"Momentum4D\")\r\n    vector_y = ak.with_name(y, \"Momentum4D\")\r\n    vector_out = ak.with_name(vector_x + vector_y, \"Momentum4DWithCharge\")\r\n    vector_out[\"charge\"] = x[\"charge\"] + y[\"charge\"]\r\n    return vector_out\r\n```\r\n\r\nThe `with_name` dance could get annoying after a while.\r\n\r\nAnother thing that isn't covered is what to do with\r\n\r\n```python\r\nak.behavior[np.add, \"Momentum4DWithCharge\", \"Momentum4D\"] = ...\r\nak.behavior[np.add, \"Momentum4D\", \"Momentum4DWithCharge\"] = ...\r\n```\r\n\r\nSince they're not specified, these combinations would raise the `TypeError`. They can be explicitly implemented, and the preferred implementation would probably be to upcast the Momentum4DWithCharge into another Momentum4D and proceed with the pair of Momentum4Ds, since the reverse is impossible due to the lack of `\"charge\"` data. That natural implementation could be implicit, if the exact combination is not found but a superclass is. (We'd have to check all combinations of superclasses, though!)\r\n\r\nIn summary, inheritance can be implemented now, but it's more manual than it ought to be. Some drudgery is inescapable: you _have to_ say how the new `\"charge\"` field affects every operation (both ufuncs and methods/properties). If there was a way to look up a named record type's supertype, however, then at least we could provide something like a `super()` function to apply the parent's operation and automatically (dynamically?) fill the matrix of ufunc subclass-superclass argument combinations.",
  "created_at":"2023-04-26T18:41:36Z",
  "id":1523882078,
  "issue":2433,
  "node_id":"IC_kwDODBCWws5a1Jhe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-26T18:41:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It's not always clear what should happen here \u2014 it is highly array dependent. Maybe we could come up with a heuristic, but ultimately we should wait to hear from users if something is allocating far too much or is too slow.",
  "created_at":"2023-05-10T12:10:00Z",
  "id":1542093750,
  "issue":2434,
  "node_id":"IC_kwDODBCWws5b6nu2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-10T12:10:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I agree.",
  "created_at":"2023-04-28T09:18:33Z",
  "id":1527251092,
  "issue":2435,
  "node_id":"IC_kwDODBCWws5bCACU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-28T09:18:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2437?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2437](https://codecov.io/gh/scikit-hep/awkward/pull/2437?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (479fb7b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/86e725ae63d278d5b9767a6e3922593eb0ea2e7c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (86e725a) will **decrease** coverage by `0.01%`.\n> The diff coverage is `60.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2437?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/2437?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `89.62% <50.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/2437?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `84.88% <66.66%> (-0.25%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-04-28T10:06:15Z",
  "id":1527317297,
  "issue":2437,
  "node_id":"IC_kwDODBCWws5bCQMx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-28T10:06:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks! That was my next step, you've saved me some time! ",
  "created_at":"2023-04-29T07:44:12Z",
  "id":1528705440,
  "issue":2437,
  "node_id":"IC_kwDODBCWws5bHjGg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-29T07:44:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Indeed I can show very clear differences in memory use using memray (`pip install memray`):\r\nHere's ak2:\r\n<img width=\"632\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1068089/235263921-7009b798-d2d2-4a6a-92ca-acede18c56c8.png\">\r\n\r\nHere's ak1:\r\n<img width=\"668\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1068089/235263948-60e0d70e-e65f-43f2-b2bc-dcbd78a86029.png\">\r\n\r\nak1 uses approximately 3x less memory than ak2 for this set of operations with the same data!\r\n\r\nThe particular point of nastiness for memory and time appears to be: \r\n`trijet[\"p4\"] = trijet.j1 + trijet.j2 + trijet.j3`\r\nfollowed by\r\n```\r\ntrijet = ak.flatten(\r\n    trijet[ak.singletons(ak.argmin(abs(trijet.p4.mass - 172.5), axis=1))]\r\n)\r\n```\r\n\r\n`ak.combinations` is also slower/more memory hungry but is in the noise compared to the above.",
  "created_at":"2023-04-28T22:30:03Z",
  "id":1528156510,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bFdFe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-28T22:33:35Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I will also add that the above test data is pretty similar in multiplicity to real data from the CMS detector - so regular users will hit this performance difference.",
  "created_at":"2023-04-28T22:41:47Z",
  "id":1528166273,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bFfeB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-28T22:41:47Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"It seems likely to me that the performance regression is in the sum of 4-vectors,\r\n\r\n```python\r\np4 = trijet.j1 + trijet.j2   # just a single + to narrow it down\r\n```\r\n\r\nnot the broadcast-and-assign,\r\n\r\n```python\r\ntrijet[\"p4\"] = p4\r\n```\r\n\r\nIs that correct?",
  "created_at":"2023-04-29T01:16:35Z",
  "id":1528379873,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bGTnh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-29T01:16:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"That is correct in both ak1 and ak2.",
  "created_at":"2023-04-29T01:45:30Z",
  "id":1528447354,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bGkF6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-29T01:45:30Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Profiling the script _up to_ the addition using memray, I see \r\n- Total usage of 9.7 GB usage on v1, and 13.9 GB on v2.\r\n- The `IndexedArray.project` call uses the most memory; 6.9 GB on v1, and 10.4 GB on v2.\r\n- The ufunc `apply` call uses 2.8 GB on v1, 3.5 GB on v2.\r\n\r\nThese aren't _significantly_ worse, but let's dig further.\r\n\r\nI logged when a carry was performed; the memory usage here is dominated by buffer carry operations. We perform the same number of `NumpyArray` carrys in both v1 and v2, over the same shape buffers. The obvious thing to point the finger at here is the garbage collector; in v1, these buffers are freed the moment they lose enough references, whereas in v2 we may have to wait for the Python GC to do a sweep (cyclic references). I added `gc.collect(2)` into the `NumpyArray._carry` method, and saw the total memory usage drop to 8.3 GB, though the actual carry is 7.6 GB.\r\n\r\nThis implies that we have some reference cycles that are making it harder to free these buffers, because only cycles are freed by the GC; simple 0-refcounts are immediately freed.\r\n\r\nHowever, this is probably not the full picture; I suspect the most likely cause could be the existence of concurrent partial results in a single stack frame. If function `X` has `N` intermediate steps, the peak memory usage of `X` is `N * M`, even if the final memory usage is `M`. Perhaps we have more of these cases in v2 than v1. I will keep looking at this over the next few days to get a bigger picture.\r\n\r\nPerformance wise, up to (and including) the vector addition, v1 and v2 produce very similar times (9.31 s for v1, 10.83 s for v2 (wall)). Again, not a thorough test.",
  "created_at":"2023-04-29T11:45:38Z",
  "id":1528769718,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bHyy2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-29T16:19:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Odd that it seems OS dependent? @nsmith- was seeing things being rather more memory hungry in linux in the [adl-benchmarks](https://github.com/CoffeaTeam/coffea-benchmarks/blob/coffea2023/coffea-adl-benchmarks.ipynb) so far as well. \r\n\r\nI'd argue as well that in absolute term 3GB more memory usage is pretty significant given our 2GB/core standard slot size in CMS (yes here we're talking about a 6-7GB anyway but...). Implies significantly reduced partition sizes in regular slots to be successful -> more data inefficiencies.",
  "created_at":"2023-04-29T16:56:31Z",
  "id":1528828807,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bIBOH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-29T17:00:04Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I'm starting to suspect this might be platform dependent:\r\n![image](https://user-images.githubusercontent.com/1068089/235357531-95fd6d86-5b69-43ed-8a36-04e1cb74e899.png)\r\n\r\n(this was on a centos7 image, coffea 0.7 = awkward1, coffea2023 = awkward2) but also smaller chunk sizes compared to where I see issues... so take this with a grain of salt.",
  "created_at":"2023-04-30T14:12:02Z",
  "id":1529034828,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bIzhM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-04-30T14:12:02Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've looked at this further today. Here, I disabled the GC, and added debug information to the destructor to provide an insight into what's being freed, and when. These are the results:\r\n```\r\nFreeing container with 0 referrers to our array@ 139669413579440 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413579344 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413579248 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413581168 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413580976 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413580880 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413581360 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413580592 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413581552 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413580688 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413297968 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413581936 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413582128 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413582416 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413581456 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413582992 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413580400 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413583184 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413298064 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413582608 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413581744 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413582032 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413583472 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413582896 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413583664 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413583088 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413583856 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413582512 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413580784 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413584240 with  709 MB\r\nFreeing container with 0 referrers to our array@ 139669413579632 with  709 MB\r\n```\r\n\r\nTo break this down, this output is printed after a manual `gc.collect(2)` at the end of a simple program that evaluates `trijet.j1 + trijet.j2 + trijet.j3`, which means that by the time that `__del__` is called, it sees no referrers. The ID is printed alongside the number of bytes used by the array. \r\n\r\nClearly this is a scenario in which we're seeing a lot of refcount cycles. Whilst it is perfectly feasible to use the GC cycle detection to correct this, in a real analysis we'd all prefer to avoid these cycles such that we naturally free these objects much earlier.\r\n",
  "created_at":"2023-05-01T11:16:05Z",
  "id":1529597878,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bK8-2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-01T11:21:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Digging into this, it looks like our error handling machinery is introducing a ref-cycle via delayed formatting that's keeping these buffers around. Disabling lazy formatting leads to reduced memory consumption under normal GC configuration (12.1 GB vs 17.6 GB in `main`).\r\n\r\nIt should be fairly trivial to break this cycle.",
  "created_at":"2023-05-01T14:52:30Z",
  "id":1529794889,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bLtFJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-01T14:52:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray can you try https://github.com/scikit-hep/awkward/pull/2442 and see how it impacts the RSS? I'm confident that this is the cause of the obscene RSS growth that we're seeing, though it's possible that there will remain some increased usage if we've introduced any further temporary buffers. I expect this to be less likely for the code pathways being traversed here, because it's nearly a 1:1 port of v1, but it remains possible.",
  "created_at":"2023-05-01T15:19:21Z",
  "id":1529826998,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bL062",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-01T15:19:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@agoose77 Giving this a try now.",
  "created_at":"2023-05-01T16:04:13Z",
  "id":1529890644,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bMEdU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-01T16:04:13Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"A significant improvement in the allocated memory high-water mark (confirmed in multiple runs) in ak2:\r\n<img width=\"629\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1068089/235484734-20e00ab5-27ab-47c6-bcdc-3c8ddb657e2b.png\">\r\n\r\nThe times are also much closer to ak1, the only major outlier is the `ak.combinations` which is still about 2x worse in the time domain. Seems like keeping things simple for the gc is a very good idea.",
  "created_at":"2023-05-01T16:11:39Z",
  "id":1529907124,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bMIe0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-01T16:12:25Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"FYI, incidentally, #2442 also improves the parallel execution time over 56M events in dask with a \"large\" number of partitions (500) by around a factor 2. ~40s instead of 80s (or longer sometimes...)! I suppose all from less time spent in gc, since dask is complaining about it less! Getting snappy, the memory is also much more well behaved.",
  "created_at":"2023-05-01T19:12:15Z",
  "id":1530095161,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bM2Y5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-01T19:28:20Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I would assume that #2442 benefits mainly in avoid paging, but I have not looked to see whether it's a real issue. The main culprit in #2442 is internal `ak.XXX` functions re-entering the error context; the outermost `ak.XXX` functions usually only involve a handful of arrays.",
  "created_at":"2023-05-01T20:18:38Z",
  "id":1530172157,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bNJL9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-01T20:18:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray can you provide any more information on\r\n\r\n> the only major outlier is the ak.combinations which is still about 2x worse in the time domain\r\n\r\nI'm running the `trijet = ...` statement in both ak1 and ak2, and they're both 2-3 s (2.5 s for ak1 vs 2.75 s for ak2). \r\n\r\nAre you referring to a different reproducer?",
  "created_at":"2023-05-02T07:50:26Z",
  "id":1531034193,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bQbpR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-02T07:50:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"No the same one! What os / arch are you testing on?",
  "created_at":"2023-05-02T11:19:21Z",
  "id":1531295848,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bRbho",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-02T11:19:21Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ubuntu Linux x86-64, 32 GB ram.",
  "created_at":"2023-05-02T13:00:17Z",
  "id":1531435105,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bR9hh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-02T13:00:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Weird. I'll try it there too but I'm surprised there's such a marked difference on macos/arm. Don't have more machine variants to test on though.",
  "created_at":"2023-05-02T13:13:05Z",
  "id":1531453767,
  "issue":2440,
  "node_id":"IC_kwDODBCWws5bSCFH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-02T13:13:05Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray - this PR implements a more aggressive memory release policy in building Awkward Arrays. Though, I do not see much difference with your test on my Mac. Could you, please, test it within a realistic analysis and see if it makes any difference? Thanks!",
  "created_at":"2023-05-09T08:12:31Z",
  "id":1539657328,
  "issue":2441,
  "node_id":"IC_kwDODBCWws5bxU5w",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T08:12:31Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Hi @ianna we're largely finding, I think, that macos is kind of weird when it comes to memory. The answers are very different w.r.t. linux. \r\n\r\nI'll try this out but if you have a linux machine to try it on - I'd check there!",
  "created_at":"2023-05-09T13:39:38Z",
  "id":1540146330,
  "issue":2441,
  "node_id":"IC_kwDODBCWws5bzMSa",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-05-09T13:39:38Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"This PR is addressing an issue that has already been closed for other reasons, and it's months old. I'm going to guess that it is not needed anymore and will close it. If I'm wrong, we can reopen it.",
  "created_at":"2023-09-04T15:24:14Z",
  "id":1705443978,
  "issue":2441,
  "node_id":"IC_kwDODBCWws5lpwKK",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-09-04T15:24:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We can otherwise convert the `PartialMethod` objects to use weakrefs, but I think this is a more robust solution!",
  "created_at":"2023-05-02T07:39:22Z",
  "id":1531023030,
  "issue":2442,
  "node_id":"IC_kwDODBCWws5bQY62",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-02T07:39:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's true. weakrefs often sound like a good solution, but I've never encountered one yet that didn't turn out to be a bad idea.\r\n\r\nAlso consider that this is being tested in single threaded mode (CPU kernels), but it's supposed to work for a background thread (GPU kernels). Chasing down weakrefs deleted by another thread would be difficult (if that's what would happen in the GPU case\u2014I'm not sure that it would).",
  "created_at":"2023-05-02T08:31:44Z",
  "id":1531082509,
  "issue":2442,
  "node_id":"IC_kwDODBCWws5bQncN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-02T08:31:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2442?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2442](https://codecov.io/gh/scikit-hep/awkward/pull/2442?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5835ec6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7445784e71cd4469d74d12ea2147b0c0f5fc4b28?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7445784) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2442?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_errors.py](https://codecov.io/gh/scikit-hep/awkward/pull/2442?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `80.86% <100.00%> (+0.09%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-05-02T13:07:44Z",
  "id":1531445958,
  "issue":2442,
  "node_id":"IC_kwDODBCWws5bSALG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-02T13:07:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2444?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2444](https://codecov.io/gh/scikit-hep/awkward/pull/2444?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cef2bea) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0843fa3114e6216de950e0f5e67364f6d5e0bdae?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0843fa3) will **increase** coverage by `0.05%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2444?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/2444?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.92% <100.00%> (+0.34%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/2444?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX2ZpZWxkLnB5) | `100.00% <100.00%> (\u00f8)` | |\n\n... and [2 files with indirect coverage changes](https://codecov.io/gh/scikit-hep/awkward/pull/2444/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-05-02T16:17:32Z",
  "id":1531754452,
  "issue":2444,
  "node_id":"IC_kwDODBCWws5bTLfU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-02T16:17:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2445?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2445](https://app.codecov.io/gh/scikit-hep/awkward/pull/2445?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9aab8a2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/bbd4fc49e756b667c30c41f2abb327f029fc5b54?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bbd4fc4) will **decrease** coverage by `0.08%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 9aab8a2 differs from pull request most recent head 4b544ea. Consider uploading reports for the commit 4b544ea to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n[see 10 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2445/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-05-03T18:08:47Z",
  "id":1533490522,
  "issue":2445,
  "node_id":"IC_kwDODBCWws5bZzVa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T13:02:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2446?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2446](https://app.codecov.io/gh/scikit-hep/awkward/pull/2446?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e941338) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/bbd4fc49e756b667c30c41f2abb327f029fc5b54?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bbd4fc4) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-05-09T01:56:26Z",
  "id":1539280820,
  "issue":2446,
  "node_id":"IC_kwDODBCWws5bv4-0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T01:56:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2447?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2447](https://app.codecov.io/gh/scikit-hep/awkward/pull/2447?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5749abf) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/bbd4fc49e756b667c30c41f2abb327f029fc5b54?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bbd4fc4) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `85.11% <100.00%> (+0.17%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-05-09T13:00:42Z",
  "id":1540081091,
  "issue":2447,
  "node_id":"IC_kwDODBCWws5by8XD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T13:00:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"See `test_XXXX_failure.py` for a test that is deliberately failing to demonstrate this feature.",
  "created_at":"2023-05-09T13:12:30Z",
  "id":1540100852,
  "issue":2448,
  "node_id":"IC_kwDODBCWws5bzBL0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T13:12:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I see, although PyLint doesn't like tests that so obviously would always fail.\r\n\r\nI'm not quite following here \u2014 I added these failing tests to trigger a failed run with annotations (on GitHub)\r\n![image](https://github.com/scikit-hep/awkward/assets/1248413/7ab88ba0-9f0e-42cd-9d15-77c068febf23)\r\n\r\nIncidentally, I don't see any pylint warnings about this trivial assertion (either on GHA, or locally)",
  "created_at":"2023-05-10T08:49:42Z",
  "id":1541602586,
  "issue":2448,
  "node_id":"IC_kwDODBCWws5b4v0a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-10T08:49:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh! This was the intention! I had thought these were PyLint failures because PyLint has always been plugged into this system (correlating errors to code in GitHub). Also, PyLint could be smart enough to find out that this assertion would always fail, and that's why I was suggesting a way to fool it. But I misunderstood what was supposed to happen here.",
  "created_at":"2023-05-10T09:00:25Z",
  "id":1541621006,
  "issue":2448,
  "node_id":"IC_kwDODBCWws5b40UO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-10T09:00:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, I see! Well, if you're happy with this feature, I'll remove the failing test!",
  "created_at":"2023-05-10T09:04:52Z",
  "id":1541627711,
  "issue":2448,
  "node_id":"IC_kwDODBCWws5b418_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-10T09:04:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2448?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2448](https://app.codecov.io/gh/scikit-hep/awkward/pull/2448?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c13b710) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/3d84e056122b48b097750e87ef9298df3b7a66e2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3d84e05) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-05-10T09:37:04Z",
  "id":1541792508,
  "issue":2448,
  "node_id":"IC_kwDODBCWws5b5eL8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-10T09:37:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2449?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2449](https://app.codecov.io/gh/scikit-hep/awkward/pull/2449?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b7971d3) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/bbd4fc49e756b667c30c41f2abb327f029fc5b54?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bbd4fc4) will **decrease** coverage by `0.01%`.\n> The diff coverage is `85.71%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2449?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2449?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.78% <66.66%> (-0.36%)` | :arrow_down: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2449?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.38% <100.00%> (+0.06%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2449?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.87% <100.00%> (+0.02%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-05-09T13:29:07Z",
  "id":1540128373,
  "issue":2449,
  "node_id":"IC_kwDODBCWws5bzH51",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T13:29:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2450?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2450](https://app.codecov.io/gh/scikit-hep/awkward/pull/2450?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (39f2880) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/484745df4e8d1eb9f2064d784cba3549487a98cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (484745d) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-05-09T18:04:09Z",
  "id":1540629776,
  "issue":2450,
  "node_id":"IC_kwDODBCWws5b1CUQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-09T18:04:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2451](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3dc2c8a) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/83f75881ba62dc1b99749b507339841470449c95?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (83f7588) will **increase** coverage by `0.36%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.29% <\u00f8> (+0.16%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_all.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `95.65% <\u00f8> (+12.89%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_any.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `95.65% <\u00f8> (+12.89%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_argmax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `83.33% <\u00f8> (+17.47%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_argmin.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `83.33% <\u00f8> (+17.47%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_corr.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3JyLnB5) | `86.66% <\u00f8> (+8.88%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_count.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudC5weQ==) | `100.00% <\u00f8> (+16.00%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_count\\_nonzero.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudF9ub256ZXJvLnB5) | `95.45% <\u00f8> (+13.31%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_covar.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3Zhci5weQ==) | `88.00% <\u00f8> (+10.58%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_linear\\_fit.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19saW5lYXJfZml0LnB5) | `89.65% <\u00f8> (-0.18%)` | :arrow_down: |\n| ... and [10 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2451?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-05-10T07:49:51Z",
  "id":1541516843,
  "issue":2451,
  "node_id":"IC_kwDODBCWws5b4a4r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-10T07:49:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2454](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dc5e9b3) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f3ce29e0a6014ebbce8a722826abc6fc7ae14791?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f3ce29e) will **decrease** coverage by `0.01%`.\n> The diff coverage is `82.57%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/form.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `84.44% <0.00%> (-1.02%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_type.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190eXBlLnB5) | `85.71% <40.00%> (\u00f8)` | |\n| [src/awkward/types/type.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdHlwZS5weQ==) | `94.33% <66.66%> (-0.88%)` | :arrow_down: |\n| [src/awkward/types/scalartype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvc2NhbGFydHlwZS5weQ==) | `80.76% <71.42%> (-1.05%)` | :arrow_down: |\n| [src/awkward/types/uniontype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5pb250eXBlLnB5) | `87.09% <72.72%> (+1.13%)` | :arrow_up: |\n| [src/awkward/types/unknowntype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5rbm93bnR5cGUucHk=) | `91.89% <83.33%> (+0.98%)` | :arrow_up: |\n| [src/awkward/types/arraytype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvYXJyYXl0eXBlLnB5) | `94.28% <85.71%> (+0.73%)` | :arrow_up: |\n| [src/awkward/types/numpytype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbnVtcHl0eXBlLnB5) | `93.33% <85.71%> (-1.05%)` | :arrow_down: |\n| [src/awkward/types/regulartype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvcmVndWxhcnR5cGUucHk=) | `91.83% <87.50%> (+0.17%)` | :arrow_up: |\n| [src/awkward/types/listtype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbGlzdHR5cGUucHk=) | `90.24% <88.88%> (+0.24%)` | :arrow_up: |\n| ... and [16 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2454?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-05-11T12:14:52Z",
  "id":1543888919,
  "issue":2454,
  "node_id":"IC_kwDODBCWws5cBeAX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-11T12:14:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Strings (string[5] versus string) are the only case where I'd expect that. I wouldn't want to complicate the API by generalizing it, but maybe it could apply to only the string typeclass?\r\n\r\nI can't think of a reason _not_ to generalise to non-strings equally as strongly as I can think of a reason. I'm tempted to kick this bucket down the road until someone wants it as a feature?",
  "created_at":"2023-05-15T20:53:26Z",
  "id":1548559444,
  "issue":2454,
  "node_id":"IC_kwDODBCWws5cTSRU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T20:53:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Sure, that sounds good. Since it only applies to RegularArrays, it's only overloads of `__array__`, not `__record__`. An overload for an `__array__` with a custom name that isn't a string is a... ? I can't think of what would fit those constraints.",
  "created_at":"2023-05-15T21:01:16Z",
  "id":1548570754,
  "issue":2454,
  "node_id":"IC_kwDODBCWws5cTVCC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T21:01:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Sure, that sounds good. Since it only applies to RegularArrays, it's only overloads of `__array__`, not `__record__`. An overload for an `__array__` with a custom name that isn't a string is a... ? I can't think of what would fit those constraints.\r\n\r\nIt would be a custom array type, which has regular list semantics. It would only have this custom repr if the user _also_ sets `__typestr__`, which is fairly \"you can do it if you want, but it might not be meaningful\" in my view?",
  "created_at":"2023-05-15T21:57:56Z",
  "id":1548657904,
  "issue":2454,
  "node_id":"IC_kwDODBCWws5cTqTw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T21:58:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Based upon the above, I take your approval as go to merge!",
  "created_at":"2023-05-15T22:16:51Z",
  "id":1548687433,
  "issue":2454,
  "node_id":"IC_kwDODBCWws5cTxhJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T22:16:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2456](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7b3b8d0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f3ce29e0a6014ebbce8a722826abc6fc7ae14791?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f3ce29e) will **increase** coverage by `0.01%`.\n> The diff coverage is `87.65%`.\n\n> :exclamation: Current head 7b3b8d0 differs from pull request most recent head a5d1c9c. Consider uploading reports for the commit a5d1c9c to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/form.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `84.44% <0.00%> (-1.02%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_type.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190eXBlLnB5) | `85.71% <40.00%> (\u00f8)` | |\n| [src/awkward/types/type.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdHlwZS5weQ==) | `94.33% <66.66%> (-0.88%)` | :arrow_down: |\n| [src/awkward/types/scalartype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvc2NhbGFydHlwZS5weQ==) | `80.76% <71.42%> (-1.05%)` | :arrow_down: |\n| [src/awkward/types/uniontype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5pb250eXBlLnB5) | `87.09% <72.72%> (+1.13%)` | :arrow_up: |\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.50% <75.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.05% <75.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.69% <75.00%> (\u00f8)` | |\n| [src/awkward/contents/unmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `73.20% <80.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.78% <81.81%> (\u00f8)` | |\n| ... and [37 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2456?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-05-11T14:43:10Z",
  "id":1544116750,
  "issue":2456,
  "node_id":"IC_kwDODBCWws5cCVoO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T12:30:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR starts work on nominal type inheritance, with the a new `stringlike` type (inherited from by `string` and `bytestring`). This type can be used to build new binary stream views that are neither strings nor bytes. \r\n\r\nIntroducing nominal inheritance raises the question of where else it should apply. For example, with ufuncs of `X + Y`, if only `X + X` is defined and `Y` is a subtype of `X`, do we support this? The answer is whether we are implementing OOP or type classes. I think I prefer type classes, i.e. `X + Y` is only permitted if `X` and `Y` belong to the same type (unless the user implements an explicit overload)\r\n\r\nIn https://github.com/scikit-hep/awkward/issues/2433 we touch on this. I'm in agreement that something which performs the `with_name` dance, and expands the permutations of `X, Y` would be useful.\r\n\r\nIncidentally, maybe we should expose the `is_subtype` functionality so that library authors can test it.",
  "created_at":"2023-05-11T16:02:54Z",
  "id":1544265306,
  "issue":2456,
  "node_id":"IC_kwDODBCWws5cC55a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-12T12:44:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski it would be useful to discuss this effort in our weekly meeting. In anticipation of that, here's what I think we'll need to touch upon:\r\n\r\nFundamentally, this PR is redefining strings as something that is behavior-dependent. I think this is the _right_ move; strings are a kind of composed type that requires this additional context. However, this means that many of our API methods need to be modified to accept the behavior dictionary, and this is challenging for descriptors like properties, e.g. `Form.purelist_depth` et al.\r\n\r\nA trivial solution to all of this is to set the behavior in a top-level context. I'm not really sure that I like this suggestion \u2014 whilst it's a lot cleaner internally, it means that L2 users would need to be aware of such a context, i.e. we're just kicking the problem to a much less visible part of the room.\r\n\r\nWe can of-course make this API change if we need to. We can introduce new methods like\r\n- ```python\r\n  def depth(\r\n      behavior: Mapping, stop_at_strings: bool = True, stop_at_records: bool = True\r\n  ) -> tuple[bool, int]:\r\n      ...\r\n  ```\r\n- ```python\r\n  def depth_limits(\r\n      behavior: Mapping, stop_at_strings: bool = True, stop_at_records: bool = True\r\n  ) -> tuple[int, int]:\r\n      ...\r\n  ```\r\nwhich give us more control than the existing `purelist_depth`, `minmax_depth`, `branch_depth`.\r\n\r\nI've been thinking \u2014 is there any way to avoid needing `behavior` everywhere? One approach would be to introduce a nominal _subtype_, i.e. custom strings have the following parameters\r\n```python\r\n{\r\n    \"__array__\": \"string\",\r\n    \"__flavor__\": \"my-string\"\r\n}\r\n```\r\n\r\nThis is inelegant for a couple of reasons:\r\n1. `__array__` no longer exclusively defines an array's type;\r\n2. Subtype relations are now defined on every instance of an array instead of in a global table (`ak.behavior`).\r\n3. Rules for how the standard flavor interacts with custom flavors would need to be considered.\r\n\r\nSo, I'm not yet in favor of this second approach, but I mention it for posterity.",
  "created_at":"2023-05-15T12:42:24Z",
  "id":1547790619,
  "issue":2456,
  "node_id":"IC_kwDODBCWws5cQWkb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T12:48:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"My thoughts, copied from Slack:\r\n\r\nI think I have exactly the same quantum admixture of opinions about introducing a `behavior` argument everywhere versus introducing a `__flavor__` parameter. I prefer the `behavior` everywhere but the `__flavor__` idea is interesting, _maybe_ better.\r\n\r\n`__flavor__` can only be a string, matched to Python classes in a similar way as `__array__`, but a different implementation. That's the downside.\r\n\r\nYou end up with \"multiple ways to do it.\"\r\n\r\nIt's probably for the best that all of those depth-parameters become a single method with arguments. They were parameters to simplify writing the pybind11, which is all ancient history now.\r\n",
  "created_at":"2023-05-15T17:32:22Z",
  "id":1548267718,
  "issue":2456,
  "node_id":"IC_kwDODBCWws5cSLDG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T17:32:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> My thoughts, copied from Slack:\r\n> \r\n> I think I have exactly the same quantum admixture of opinions about introducing a behavior argument everywhere versus introducing a __flavor__ parameter. I prefer the behavior everywhere but the __flavor__ idea is interesting, maybe better.\r\n\r\nGood to know we both feel similarly :stuck_out_tongue: It would have been nice if you had held a very strong opinion in one direction so that we didn't need to weigh up both arguments ;)\r\n\r\n\r\n> `__flavor__` can only be a string, matched to Python classes in a similar way as `__array__`, but a different implementation. That's the \r\n> \r\n> You end up with \"multiple ways to do it.\"\r\n\r\nYep, big drawback.\r\n\r\n> It's probably for the best that all of those depth-parameters become a single method with arguments. They were parameters to simplify writing the pybind11, which is all ancient history now.\r\n\r\nI think _this_ can be a starting point \u2014 implementing this can happen orthogonally to whether behaviour should _also_ be an argument.",
  "created_at":"2023-05-15T22:15:06Z",
  "id":1548685244,
  "issue":2456,
  "node_id":"IC_kwDODBCWws5cTw-8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T22:15:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"At this point, I'm fairly confident that we are not going to implement custom strings using nominal inheritance, so this PR can be closed!",
  "created_at":"2023-06-20T10:59:59Z",
  "id":1598562796,
  "issue":2456,
  "node_id":"IC_kwDODBCWws5fSCHs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-20T10:59:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This seems simple enough; build a list over the `RecordArray` which the custom reducer reduces along `axis=-1`. However, the open question is how to handle masking/identity. The simplest interface is to always require the custom reducer to include an identity element for empty sublists. This can then be masked out by the dispatcher. We currently do this for our normal reduction pathways. \r\n\r\nHowever, doing this with existing highlevel primitives may not be trivial. e.g. an implementation of `ak.max` for a record structure, which looks at the first slot:\r\n```python\r\ndef _my_record_max(array):\r\n    key = array[\"0\"]\r\n    j = ak.from_regular(\r\n        ak.argmax(key, keepdims=True, mask_identity=False, axis=-1)\r\n    )\r\n    return array[j][..., 0]\r\n\r\n\r\nak.behavior[(ak.max, \"my_record\")] = _tuples_max\r\n```\r\n\r\nThis will fail if we have an empty sublist and we don't mask the reducer.\r\n\r\nOne of the constraints that we are operating under is the desire not to have third party code using our `nplike` abstraction. Whilst for NumPy, CuPy, and JAX that should be possible (just type-check the buffers), typetracer would prove more fiddly (incidentally, this does add a vote in favour of making our typetracer nplike L2).\r\n\r\nThe above can be extended to support empty sublists:\r\n```python\r\ndef _option_is_trivial(array):\r\n    any_is_none = ak.any(ak.is_none(array, axis=0), axis=None)\r\n    return not (ak.typetracer.is_unknown_scalar(any_is_none) or any_is_none)\r\n\r\n\r\ndef _my_record_max(array):\r\n    key = array[\"0\"]\r\n    j = ak.from_regular(\r\n        ak.argmax(key, keepdims=True, mask_identity=True, axis=-1)\r\n    )\r\n    out = ak.to_layout(\r\n        array[j][..., 0]\r\n    )\r\n    assert out.is_option\r\n    \r\n    if _option_is_trivial(out):\r\n        out = out.to_IndexedOptionArray64()\r\n        return ak.contents.IndexedArray(\r\n            out.index,\r\n            out.content\r\n        )\r\n    else:\r\n        return ak.fill_none(out, identity_element)\r\n```\r\nbut where there are any empty sublists, it will involve a copy of `out` in `ak.fill_none` _even if_ the output is subsequently masked.\r\n\r\nI think the proper API therefore includes the `mask_identity` flag. Here's an attempt to write a simple max that doesn't copy the `RecordArray` unless it has no choice, without using `nplike`.\r\n\r\n```python\r\ndef _option_is_trivial(array):\r\n    any_is_none = ak.any(ak.is_none(array, axis=0), axis=None)\r\n    return not (ak.typetracer.is_unknown_scalar(any_is_none) or any_is_none)\r\n\r\n\r\ndef _my_record_max(array: ak.Array, mask_identity: bool):\r\n    key = array[\"0\"]\r\n    j = ak.from_regular(ak.argmax(key, keepdims=True, mask_identity=True, axis=-1))\r\n    out = ak.to_layout(\r\n        array[j][..., 0]\r\n    )\r\n\r\n    if mask_identity:\r\n        return out\r\n    # Avoid content `_carry` for options with empty masks\r\n    elif _option_is_trivial(out):\r\n        out = out.to_IndexedOptionArray64()\r\n        return ak.contents.IndexedArray(\r\n            out.index,\r\n            out.content\r\n        )\r\n    # _carry the content (and fill missing values)\r\n    else:\r\n        return ak.fill_none(out, identity_element)\r\n```\r\n\r\nMeanwhile, `argmax` is trivial!\r\n```python\r\ndef _my_record_argmax(array: ak.Array, mask_identity: bool):\r\n    return ak.argmax(array[\"0\"], keepdims=False, mask_identity=False, axis=-1)\r\n```\r\n",
  "created_at":"2023-05-12T15:48:47Z",
  "id":1545949781,
  "issue":2458,
  "node_id":"IC_kwDODBCWws5cJVJV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T07:54:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2458?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2458](https://app.codecov.io/gh/scikit-hep/awkward/pull/2458?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (872de48) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4468cf548e6b6c6758fbba5403652bdd3aa0162a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4468cf5) will **decrease** coverage by `0.01%`.\n> The diff coverage is `75.86%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2458?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_with\\_name.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2458?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX25hbWUucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2458?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.22% <50.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2458?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.68% <77.77%> (-0.44%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-05-14T16:38:08Z",
  "id":1546941478,
  "issue":2458,
  "node_id":"IC_kwDODBCWws5cNHQm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-19T12:02:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I agree. In truth, I'm currently thinking about how vector should support this - the dispatch machinery is fairly long. I suspect it will just require simply writing the same code! ",
  "created_at":"2023-05-15T17:23:20Z",
  "id":1548255124,
  "issue":2458,
  "node_id":"IC_kwDODBCWws5cSH-U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T17:23:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski inspired by the existing (and more complex) binary addition, I took a stab at sum [here](https://gist.github.com/agoose77/7484748f78d79be59c3b265111ee9a62). \r\n\r\nFor vector, I can't initially think of any reducers that we'd want to implement that do not have identities. Can you think of any?\r\n\r\nIn the event that there are none, the idea here is that we can re-use the sum implementation for numpy-backed vectors too (by `moveaxis`, reduce, `moveaxis`, to prepare the array for reduction)",
  "created_at":"2023-05-15T22:04:54Z",
  "id":1548671464,
  "issue":2458,
  "node_id":"IC_kwDODBCWws5cTtno",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T22:05:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"My implementation here implicitly assumes that records are atoms, i.e. one cannot reduce _deeper_ than the record itself. This was motivated by `RecordArray.purelist_depth` which returns 1, and justifies not passing `axis` to the custom reducer. I believe this holds, but weigh in if you think that's a misstep.",
  "created_at":"2023-05-15T22:20:04Z",
  "id":1548691441,
  "issue":2458,
  "node_id":"IC_kwDODBCWws5cTyfx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T22:20:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> For vector, I can't initially think of any reducers that we'd want to implement that do not have identities. Can you think of any?\r\n\r\nIn Vector (and elsewhere), the only reducer I can think of wanting to override at all is `sum`. The `any`/`all` pair applies to booleans, which are not geometrical vectors, the `min`/`max` pair applies to objects with an ordering, and $n>1$-dimensional vectors do not have an ordering; same for `argmin`/`argmax`. I can't even see a reason to have `prod` (scalar product is not reducible with more than two arguments; vector product only has a definition for 3D vectors; and neither of these should be confused with `*`, which only combines a scalar with a vector).\r\n\r\nTwo reducers that can be implemented for Vectors: `count` and `count_nonzero` (where \"nonzero\" means \"nonzero magnitude\"). They have identities, though.\r\n\r\n> My implementation here implicitly assumes that records are atoms, i.e. one cannot reduce _deeper_ than the record itself.\r\n\r\nThat's right. We can enshrine that as a rule.",
  "created_at":"2023-05-15T23:34:50Z",
  "id":1548754044,
  "issue":2458,
  "node_id":"IC_kwDODBCWws5cUBx8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-16T09:49:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2459](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d84d1b5) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f3ce29e0a6014ebbce8a722826abc6fc7ae14791?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f3ce29e) will **increase** coverage by `0.00%`.\n> The diff coverage is `96.55%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/emptyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `81.69% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `91.07% <75.00%> (+0.16%)` | :arrow_up: |\n| [src/awkward/\\_backends/dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2Rpc3BhdGNoLnB5) | `94.02% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `94.45% <100.00%> (+0.53%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `94.47% <100.00%> (+0.45%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvZGlzcGF0Y2gucHk=) | `96.00% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.50% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.05% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.29% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `77.11% <100.00%> (\u00f8)` | |\n| ... and [49 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2459?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-05-15T12:21:51Z",
  "id":1547762229,
  "issue":2459,
  "node_id":"IC_kwDODBCWws5cQPo1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-15T13:23:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2460?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2460](https://app.codecov.io/gh/scikit-hep/awkward/pull/2460?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (100954d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e3e844c95cc02f15e2b4962f036fc871c16890e7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e3e844c) will **decrease** coverage by `0.01%`.\n> The diff coverage is `84.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2460?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2460?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `92.40% <84.00%> (-1.80%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-05-15T23:13:55Z",
  "id":1548740479,
  "issue":2460,
  "node_id":"IC_kwDODBCWws5cT-d_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-16T09:40:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2461?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2461](https://app.codecov.io/gh/scikit-hep/awkward/pull/2461?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ce6b869) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e3e844c95cc02f15e2b4962f036fc871c16890e7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e3e844c) will **not change** coverage.\n> The diff coverage is `33.33%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/layout.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `83.66% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `85.11% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mask.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXNrLnB5) | `96.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_json.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19qc29uLnB5) | `84.41% <0.00%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.54% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `84.91% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2461?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.69% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-05-16T01:25:52Z",
  "id":1548833188,
  "issue":2461,
  "node_id":"IC_kwDODBCWws5cUVGk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-16T01:25:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray is this duration (~4s) representative of the typical time for a full analysis optimisation?",
  "created_at":"2023-05-17T13:01:01Z",
  "id":1551350140,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5cd7l8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T13:01:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"That's for one dataset so nominally multiply that 4s by 30-40.",
  "created_at":"2023-05-17T13:06:50Z",
  "id":1551359859,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5cd99z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T13:06:50Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Drat, I lost my saved reply!\r\n\r\nThe short answer to this issue is that the return-on-investment for optimising Awkward here is highly dependent upon the runtime of the true computation. If the computation takes ~hrs, then a two-minute optimisation is not significant in comparison. Especially if single-partition workflows can be used to prototype things before the final computation. \r\n\r\nThe problem here is really that we're trying to optimise in a naive way, which we touched on briefly in Slack a few weeks back:\r\n\r\n>In today's meeting, we were talking about possible paths for optimising optimisation.\r\nSome ideas:\r\n>- we've done pretty well here, in making fast layer fusions and column selection! Now the chief problem is cull\r\n>- critical to quantify scale of the problem. Can we do without extra work? Maybe the \"interactive\" rather than batch approach can be done without distributed and not benefit from (some) optimisations due to lower task overhead\r\n>- my suggestion is somewhere above of little class hacks to avoid materialising big dicts and sets and save on memory but not time\r\n>- Other potential data types like enums, dataclasses, string conventions, numerical hashes instead of python tuples\r\n>- [@lgray](https://iris-hep.slack.com/team/UFX8TJM8W) \u2019s attempts at compiling inner loops for speed (in numba, cython, rust, ets.). If not numba, would greatly complicate build and distribution. I have my doubts on how much mole-whacking can or should be done here.\r\n>- [@lgray](https://iris-hep.slack.com/team/UFX8TJM8W) just made a way to select only one partition throughout the gaph (if it is all blockwise or treereduction). Can we use something based on that as out cull() and ignore dask's version?\r\n\r\nUltimately, Dask needs to do less here, in my view. In Awkward, I don't see any hotspots, so shaving this down by e.g. 50% is going to be a lot of work that will probably have an impact on readability.\r\n\r\nThat said, could you give https://github.com/scikit-hep/awkward/pull/2464 a try? There is _some_ low hanging fruit in `ak._behavior`.",
  "created_at":"2023-05-17T17:40:39Z",
  "id":1551811725,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5cfsSN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T17:40:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I will try it soon! Thanks!\r\n\r\nAnd yeah I understand the trade-offs and investments. This is why I marked this lower priority, since it's kinda thorny, and not immediately pressing, and the payoff is somewhat unclear.\r\n\r\nMy one worry is that people do spend a fair amount of time running over all datasets but with a reduced number of files where turn-around time for an answer *is* minutes, and then optimize becomes a sticking issue because they're looping over all datasets still but not processing them completely yet still paying full \"taxes\" for compiling the graphs.",
  "created_at":"2023-05-17T17:50:10Z",
  "id":1551822518,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5cfu62",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T17:50:52Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Re-reading @martindurant's notes - I understand what he's talking about with the cull now! We can do a bit of a switch-a-roo, getting the graph topology from 'faking' one partition of data and then insert the necessary keys.\r\n\r\nI can see how to do that! I'll try it soon.\r\n\r\nThat may be a better solution than numba (but I would still like to pursue that).",
  "created_at":"2023-05-17T17:53:47Z",
  "id":1551826553,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5cfv55",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T17:53:47Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"https://github.com/scikit-hep/awkward/pull/2464 shaves nearly a second off of `dak.necessary_columns`! (on mac laptop, someone should check on standard linux setup)",
  "created_at":"2023-05-17T21:04:33Z",
  "id":1552082333,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5cguWd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T21:28:14Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm closing this for now; Dask's just doing quite a lot of (redundant, in this case) work. From looking at this, I didn't see any more low hanging fruit, though it may be possible to revisit the problem in future.",
  "created_at":"2023-06-16T12:11:27Z",
  "id":1594580276,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5fC100",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-16T12:11:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"OK - we should give a tiny peek to the churn that was introduced with awkward 2.2.2 since that started setting off warnings from a time-spent-in-gc threshold in dask. (unless that's what you meant you looked at)",
  "created_at":"2023-06-16T12:12:52Z",
  "id":1594582026,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5fC2QK",
  "performed_via_github_app":null,
  "reactions":{
   "eyes":1,
   "total_count":1
  },
  "updated_at":"2023-06-16T12:13:27Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Do you have a reproducer for that? It would be good to profile it, if we can reproduce on a single-threaded cluster.",
  "created_at":"2023-06-16T13:53:15Z",
  "id":1594713392,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5fDWUw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-16T13:53:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Using: https://github.com/dask-contrib/dask-awkward/files/11710067/complex_repro.zip\r\n\r\ncoffea 2023.6.0rc0 + awkward 2.2.1 pyinstrument for `dak.necessary_columns` (which is single threaded execution on empty data):\r\n```\r\ntime col: 3.519811334\r\n\r\n  _     ._   __/__   _ _  _  _ _/_   Recorded: 16:00:47  Samples:  3369\r\n /_//_/// /_\\ / //_// / //_'/ //     Duration: 3.520     CPU time: 3.535\r\n/   _/                      v4.3.0\r\n\r\nProgram: yimu_test5.py\r\n\r\n3.519 <module>  yimu_test5.py:1\r\n\u2514\u2500 3.519 necessary_columns  dask_awkward/lib/inspect.py:11\r\n   \u2514\u2500 3.519 _necessary_columns  dask_awkward/lib/optimize.py:390\r\n      \u2514\u2500 3.516 _get_column_reports  dask_awkward/lib/optimize.py:333\r\n         \u251c\u2500 3.436 get_sync  dask/local.py:551\r\n         \u2502  \u2514\u2500 3.435 get_async  dask/local.py:350\r\n         \u2502     \u251c\u2500 3.020 fire_tasks  dask/local.py:452\r\n         \u2502     \u2502  \u2514\u2500 2.956 submit  dask/local.py:539\r\n         \u2502     \u2502     \u2514\u2500 2.910 batch_execute_tasks  dask/local.py:234\r\n         \u2502     \u2502        \u2514\u2500 2.908 <listcomp>  dask/local.py:238\r\n         \u2502     \u2502           \u2514\u2500 2.908 execute_task  dask/local.py:214\r\n         \u2502     \u2502              \u2514\u2500 2.898 _execute_task  dask/core.py:82\r\n         \u2502     \u2502                 \u2514\u2500 2.866 __call__  dask/optimization.py:987\r\n         \u2502     \u2502                    \u2514\u2500 2.855 get  dask/core.py:128\r\n         \u2502     \u2502                       \u2514\u2500 2.825 _execute_task  dask/core.py:82\r\n         \u2502     \u2502                          \u251c\u2500 0.884 __array_ufunc__  awkward/highlevel.py:1291\r\n         \u2502     \u2502                          \u2502  \u2514\u2500 0.843 array_ufunc  awkward/_connect/numpy.py:213\r\n         \u2502     \u2502                          \u2502     \u251c\u2500 0.548 broadcast_and_apply  awkward/_broadcasting.py:1063\r\n         \u2502     \u2502                          \u2502     \u2502  \u2514\u2500 0.523 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502     \u2502     \u2514\u2500 0.498 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502     \u2502        \u2514\u2500 0.491 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502     \u2502           \u2514\u2500 0.441 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502     \u2502              \u2514\u2500 0.412 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502     \u2502                 \u251c\u2500 0.370 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502     \u2502                 \u2502  \u2514\u2500 0.338 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502     \u2502                 \u2502     \u251c\u2500 0.144 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502     \u2502                 \u2502     \u2502  \u2514\u2500 0.119 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502     \u2502                 \u2502     \u2502     \u2514\u2500 0.100 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502     \u2502                 \u2502     \u2502        \u2514\u2500 0.073 action  awkward/_connect/numpy.py:222\r\n         \u2502     \u2502                          \u2502     \u2502                 \u2502     \u2502           \u2514\u2500 0.063 find_ufunc  awkward/_behavior.py:97\r\n         \u2502     \u2502                          \u2502     \u2502                 \u2502     \u251c\u2500 0.122 [self]  \r\n         \u2502     \u2502                          \u2502     \u2502                 \u2502     \u2514\u2500 0.066 action  awkward/_connect/numpy.py:222\r\n         \u2502     \u2502                          \u2502     \u2502                 \u2502        \u2514\u2500 0.052 find_ufunc  awkward/_behavior.py:97\r\n         \u2502     \u2502                          \u2502     \u2502                 \u2514\u2500 0.036 broadcast_any_indexed  awkward/_broadcasting.py:964\r\n         \u2502     \u2502                          \u2502     \u251c\u2500 0.184 recursively_apply  awkward/_do.py:20\r\n         \u2502     \u2502                          \u2502     \u2502  \u2514\u2500 0.141 _recursively_apply  awkward/contents/listoffsetarray.py:2071\r\n         \u2502     \u2502                          \u2502     \u2502     \u2514\u2500 0.135 continuation  awkward/contents/listoffsetarray.py:2086\r\n         \u2502     \u2502                          \u2502     \u2502        \u2514\u2500 0.095 _recursively_apply  awkward/contents/numpyarray.py:1261\r\n         \u2502     \u2502                          \u2502     \u2502           \u2514\u2500 0.095 unary_action  awkward/_connect/numpy.py:303\r\n         \u2502     \u2502                          \u2502     \u2502              \u2514\u2500 0.095 action  awkward/_connect/numpy.py:222\r\n         \u2502     \u2502                          \u2502     \u2502                 \u2514\u2500 0.079 find_ufunc  awkward/_behavior.py:97\r\n         \u2502     \u2502                          \u2502     \u2502                    \u2514\u2500 0.038 __iter__  _collections_abc.py:742\r\n         \u2502     \u2502                          \u2502     \u251c\u2500 0.049 _array_ufunc_custom_cast  awkward/_connect/numpy.py:141\r\n         \u2502     \u2502                          \u2502     \u2514\u2500 0.036 wrap_layout  awkward/_layout.py:19\r\n         \u2502     \u2502                          \u251c\u2500 0.436 apply  dask/utils.py:41\r\n         \u2502     \u2502                          \u2502  \u251c\u2500 0.218 sum  awkward/operations/ak_sum.py:13\r\n         \u2502     \u2502                          \u2502  \u2502  \u2514\u2500 0.202 _impl  awkward/operations/ak_sum.py:267\r\n         \u2502     \u2502                          \u2502  \u2502     \u2514\u2500 0.187 reduce  awkward/_do.py:262\r\n         \u2502     \u2502                          \u2502  \u2502        \u2514\u2500 0.140 _reduce_next  awkward/contents/listoffsetarray.py:1464\r\n         \u2502     \u2502                          \u2502  \u2502           \u2514\u2500 0.045 _reduce_next  awkward/contents/listoffsetarray.py:1464\r\n         \u2502     \u2502                          \u2502  \u251c\u2500 0.065 count  awkward/operations/ak_count.py:12\r\n         \u2502     \u2502                          \u2502  \u2502  \u2514\u2500 0.061 _impl  awkward/operations/ak_count.py:110\r\n         \u2502     \u2502                          \u2502  \u2502     \u2514\u2500 0.058 reduce  awkward/_do.py:262\r\n         \u2502     \u2502                          \u2502  \u2502        \u2514\u2500 0.037 _reduce_next  awkward/contents/listoffsetarray.py:1464\r\n         \u2502     \u2502                          \u2502  \u251c\u2500 0.058 mean  awkward/operations/ak_mean.py:13\r\n         \u2502     \u2502                          \u2502  \u2502  \u2514\u2500 0.057 _impl  awkward/operations/ak_mean.py:152\r\n         \u2502     \u2502                          \u2502  \u2514\u2500 0.040 min  awkward/operations/ak_min.py:13\r\n         \u2502     \u2502                          \u2502     \u2514\u2500 0.040 _impl  awkward/operations/ak_min.py:148\r\n         \u2502     \u2502                          \u2502        \u2514\u2500 0.038 reduce  awkward/_do.py:262\r\n         \u2502     \u2502                          \u251c\u2500 0.433 __call__  dask_awkward/lib/core.py:1895\r\n         \u2502     \u2502                          \u2502  \u251c\u2500 0.321 pt  coffea/nanoevents/methods/vector.py:121\r\n         \u2502     \u2502                          \u2502  \u2502  \u2514\u2500 0.320 r  coffea/nanoevents/methods/vector.py:85\r\n         \u2502     \u2502                          \u2502  \u2502     \u2514\u2500 0.293 r2  coffea/nanoevents/methods/vector.py:111\r\n         \u2502     \u2502                          \u2502  \u2502        \u2514\u2500 0.261 func  numpy/lib/mixins.py:18\r\n         \u2502     \u2502                          \u2502  \u2502           \u2514\u2500 0.260 __array_ufunc__  awkward/highlevel.py:1291\r\n         \u2502     \u2502                          \u2502  \u2502              \u2514\u2500 0.249 array_ufunc  awkward/_connect/numpy.py:213\r\n         \u2502     \u2502                          \u2502  \u2502                 \u2514\u2500 0.223 broadcast_and_apply  awkward/_broadcasting.py:1063\r\n         \u2502     \u2502                          \u2502  \u2502                    \u2514\u2500 0.217 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502  \u2502                       \u2514\u2500 0.205 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502  \u2502                          \u2514\u2500 0.203 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502  \u2502                             \u2514\u2500 0.192 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502  \u2502                                \u2514\u2500 0.188 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502  \u2502                                   \u251c\u2500 0.120 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502  \u2502                                   \u2502  \u2514\u2500 0.106 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502  \u2502                                   \u2502     \u2514\u2500 0.093 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502  \u2502                                   \u2502        \u2514\u2500 0.074 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502  \u2502                                   \u2502           \u2514\u2500 0.063 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502  \u2502                                   \u2514\u2500 0.065 broadcast_any_indexed  awkward/_broadcasting.py:964\r\n         \u2502     \u2502                          \u2502  \u2502                                      \u2514\u2500 0.043 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502  \u2502                                         \u2514\u2500 0.043 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502  \u2502                                            \u2514\u2500 0.043 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502  \u2502                                               \u2514\u2500 0.040 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502  \u2502                                                  \u2514\u2500 0.040 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502  \u2502                                                     \u2514\u2500 0.040 broadcast_any_indexed  awkward/_broadcasting.py:964\r\n         \u2502     \u2502                          \u2502  \u2514\u2500 0.106 eta  coffea/nanoevents/methods/vector.py:512\r\n         \u2502     \u2502                          \u2502     \u2514\u2500 0.077 r  coffea/nanoevents/methods/vector.py:85\r\n         \u2502     \u2502                          \u2502        \u2514\u2500 0.069 r2  coffea/nanoevents/methods/vector.py:111\r\n         \u2502     \u2502                          \u2502           \u2514\u2500 0.062 func  numpy/lib/mixins.py:18\r\n         \u2502     \u2502                          \u2502              \u2514\u2500 0.062 __array_ufunc__  awkward/highlevel.py:1291\r\n         \u2502     \u2502                          \u2502                 \u2514\u2500 0.057 array_ufunc  awkward/_connect/numpy.py:213\r\n         \u2502     \u2502                          \u2502                    \u2514\u2500 0.052 broadcast_and_apply  awkward/_broadcasting.py:1063\r\n         \u2502     \u2502                          \u2502                       \u2514\u2500 0.051 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502                          \u2514\u2500 0.051 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502                             \u2514\u2500 0.051 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502                                \u2514\u2500 0.044 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502                                   \u2514\u2500 0.041 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502                                      \u2514\u2500 0.041 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u251c\u2500 0.410 __call__  dask_awkward/lib/structure.py:860\r\n         \u2502     \u2502                          \u2502  \u2514\u2500 0.410 with_field  awkward/operations/ak_with_field.py:19\r\n         \u2502     \u2502                          \u2502     \u2514\u2500 0.387 _impl  awkward/operations/ak_with_field.py:55\r\n         \u2502     \u2502                          \u2502        \u2514\u2500 0.361 broadcast_and_apply  awkward/_broadcasting.py:1063\r\n         \u2502     \u2502                          \u2502           \u2514\u2500 0.352 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502              \u2514\u2500 0.350 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502                 \u2514\u2500 0.349 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502                    \u2514\u2500 0.337 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502                       \u251c\u2500 0.280 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502                       \u2502  \u2514\u2500 0.266 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502                       \u2502     \u2514\u2500 0.247 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502                       \u2502        \u251c\u2500 0.152 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502  \u251c\u2500 0.093 broadcast_any_indexed  awkward/_broadcasting.py:964\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502  \u2502  \u2514\u2500 0.076 <listcomp>  awkward/_broadcasting.py:965\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502  \u2502     \u2514\u2500 0.076 project  awkward/contents/indexedarray.py:408\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502  \u2502        \u2514\u2500 0.074 _carry  awkward/contents/recordarray.py:505\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502  \u2502           \u2514\u2500 0.073 <listcomp>  awkward/contents/recordarray.py:526\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502  \u2502              \u2514\u2500 0.063 _carry  awkward/contents/numpyarray.py:315\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502  \u2502                 \u2514\u2500 0.044 __getitem__  awkward/_nplikes/typetracer.py:312\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502  \u2514\u2500 0.058 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502     \u2514\u2500 0.058 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502        \u2514\u2500 0.054 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502           \u2514\u2500 0.054 broadcast_any_indexed  awkward/_broadcasting.py:964\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502              \u2514\u2500 0.049 <listcomp>  awkward/_broadcasting.py:965\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502                 \u2514\u2500 0.049 project  awkward/contents/indexedarray.py:408\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502                    \u2514\u2500 0.047 _carry  awkward/contents/recordarray.py:505\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502                       \u2514\u2500 0.047 <listcomp>  awkward/contents/recordarray.py:526\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2502                          \u2514\u2500 0.041 _carry  awkward/contents/numpyarray.py:315\r\n         \u2502     \u2502                          \u2502                       \u2502        \u2514\u2500 0.087 action  awkward/operations/ak_with_field.py:123\r\n         \u2502     \u2502                          \u2502                       \u2502           \u2514\u2500 0.078 <listcomp>  awkward/operations/ak_with_field.py:156\r\n         \u2502     \u2502                          \u2502                       \u2502              \u2514\u2500 0.075 __getitem__  awkward/contents/content.py:535\r\n         \u2502     \u2502                          \u2502                       \u2502                 \u2514\u2500 0.071 _getitem  awkward/contents/content.py:538\r\n         \u2502     \u2502                          \u2502                       \u2502                    \u2514\u2500 0.046 _getitem_field  awkward/contents/recordarray.py:467\r\n         \u2502     \u2502                          \u2502                       \u2502                       \u2514\u2500 0.043 content  awkward/contents/recordarray.py:405\r\n         \u2502     \u2502                          \u2502                       \u2502                          \u2514\u2500 0.036 content  awkward/forms/recordform.py:140\r\n         \u2502     \u2502                          \u2502                       \u2514\u2500 0.057 action  awkward/operations/ak_with_field.py:123\r\n         \u2502     \u2502                          \u2502                          \u2514\u2500 0.051 <listcomp>  awkward/operations/ak_with_field.py:156\r\n         \u2502     \u2502                          \u2502                             \u2514\u2500 0.051 __getitem__  awkward/contents/content.py:535\r\n         \u2502     \u2502                          \u2502                                \u2514\u2500 0.049 _getitem  awkward/contents/content.py:538\r\n         \u2502     \u2502                          \u251c\u2500 0.363 __getitem__  awkward/highlevel.py:520\r\n         \u2502     \u2502                          \u2502  \u251c\u2500 0.291 __getitem__  awkward/contents/content.py:535\r\n         \u2502     \u2502                          \u2502  \u2502  \u2514\u2500 0.291 _getitem  awkward/contents/content.py:538\r\n         \u2502     \u2502                          \u2502  \u2502     \u251c\u2500 0.173 _getitem  awkward/contents/content.py:538\r\n         \u2502     \u2502                          \u2502  \u2502     \u2502  \u2514\u2500 0.152 _getitem  awkward/contents/content.py:538\r\n         \u2502     \u2502                          \u2502  \u2502     \u2502     \u2514\u2500 0.116 _getitem_next  awkward/contents/regulararray.py:451\r\n         \u2502     \u2502                          \u2502  \u2502     \u2502        \u2514\u2500 0.101 _getitem_next_jagged  awkward/contents/listoffsetarray.py:416\r\n         \u2502     \u2502                          \u2502  \u2502     \u2502           \u2514\u2500 0.083 _getitem_next_jagged  awkward/contents/listarray.py:389\r\n         \u2502     \u2502                          \u2502  \u2502     \u2502              \u2514\u2500 0.043 _getitem_next_jagged  awkward/contents/listoffsetarray.py:416\r\n         \u2502     \u2502                          \u2502  \u2502     \u2514\u2500 0.056 _getitem_next  awkward/contents/regulararray.py:451\r\n         \u2502     \u2502                          \u2502  \u2514\u2500 0.039 wrap_layout  awkward/_layout.py:19\r\n         \u2502     \u2502                          \u251c\u2500 0.147 __call__  dask_awkward/lib/core.py:1887\r\n         \u2502     \u2502                          \u2502  \u2514\u2500 0.147 delta_r  coffea/nanoevents/methods/vector.py:602\r\n         \u2502     \u2502                          \u2502     \u2514\u2500 0.085 eta  coffea/nanoevents/methods/vector.py:512\r\n         \u2502     \u2502                          \u2502        \u2514\u2500 0.063 r  coffea/nanoevents/methods/vector.py:85\r\n         \u2502     \u2502                          \u2502           \u2514\u2500 0.057 r2  coffea/nanoevents/methods/vector.py:111\r\n         \u2502     \u2502                          \u2502              \u2514\u2500 0.050 func  numpy/lib/mixins.py:18\r\n         \u2502     \u2502                          \u2502                 \u2514\u2500 0.050 __array_ufunc__  awkward/highlevel.py:1291\r\n         \u2502     \u2502                          \u2502                    \u2514\u2500 0.046 array_ufunc  awkward/_connect/numpy.py:213\r\n         \u2502     \u2502                          \u2502                       \u2514\u2500 0.041 broadcast_and_apply  awkward/_broadcasting.py:1063\r\n         \u2502     \u2502                          \u2502                          \u2514\u2500 0.041 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502                             \u2514\u2500 0.041 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502                                \u2514\u2500 0.041 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2502                                   \u2514\u2500 0.038 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                          \u2502                                      \u2514\u2500 0.036 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                          \u2502                                         \u2514\u2500 0.036 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                          \u2514\u2500 0.059 __call__  dask_awkward/lib/structure.py:806\r\n         \u2502     \u2502                             \u2514\u2500 0.059 where  awkward/operations/ak_where.py:14\r\n         \u2502     \u2502                                \u2514\u2500 0.055 _impl3  awkward/operations/ak_where.py:97\r\n         \u2502     \u2502                                   \u2514\u2500 0.050 broadcast_and_apply  awkward/_broadcasting.py:1063\r\n         \u2502     \u2502                                      \u2514\u2500 0.048 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                                         \u2514\u2500 0.044 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u2502                                            \u2514\u2500 0.043 broadcast_any_list  awkward/_broadcasting.py:485\r\n         \u2502     \u2502                                               \u2514\u2500 0.041 apply_step  awkward/_broadcasting.py:355\r\n         \u2502     \u2502                                                  \u2514\u2500 0.036 continuation  awkward/_broadcasting.py:1008\r\n         \u2502     \u251c\u2500 0.255 keys  dask/highlevelgraph.py:530\r\n         \u2502     \u2502  \u2514\u2500 0.255 to_dict  dask/highlevelgraph.py:522\r\n         \u2502     \u2502     \u2514\u2500 0.255 ensure_dict  dask/utils.py:1236\r\n         \u2502     \u2502        \u2514\u2500 0.238 __iter__  _collections_abc.py:719\r\n         \u2502     \u2502           \u2514\u2500 0.235 __iter__  dask/blockwise.py:493\r\n         \u2502     \u2502              \u2514\u2500 0.233 _dict  dask/blockwise.py:452\r\n         \u2502     \u2502                 \u251c\u2500 0.067 fuse  dask/optimization.py:450\r\n         \u2502     \u2502                 \u2502  \u2514\u2500 0.036 get  dask/config.py:520\r\n         \u2502     \u2502                 \u251c\u2500 0.060 dims  dask/blockwise.py:440\r\n         \u2502     \u2502                 \u2502  \u2514\u2500 0.058 _make_dims  dask/blockwise.py:1480\r\n         \u2502     \u2502                 \u2502     \u2514\u2500 0.057 broadcast_dimensions  dask/blockwise.py:1420\r\n         \u2502     \u2502                 \u251c\u2500 0.046 make_blockwise_graph  dask/blockwise.py:759\r\n         \u2502     \u2502                 \u2514\u2500 0.038 __init__  dask/optimization.py:965\r\n         \u2502     \u2514\u2500 0.057 order  dask/order.py:84\r\n         \u2514\u2500 0.040 mock  dask_awkward/layers/layers.py:94\r\n```\r\n\r\ncoffea@main + awkward >= 2.2.2 pyinstrument for the same:\r\n```\r\n  _     ._   __/__   _ _  _  _ _/_   Recorded: 16:03:20  Samples:  4944\r\n /_//_/// /_\\ / //_// / //_'/ //     Duration: 5.126     CPU time: 5.142\r\n/   _/                      v4.3.0\r\n\r\nProgram: yimu_test5.py\r\n\r\n5.126 <module>  yimu_test5.py:1\r\n\u2514\u2500 5.126 necessary_columns  dask_awkward/lib/inspect.py:15\r\n   \u2514\u2500 5.126 _necessary_columns  dask_awkward/lib/optimize.py:402\r\n      \u2514\u2500 5.122 _get_column_reports  dask_awkward/lib/optimize.py:343\r\n         \u2514\u2500 5.034 get_sync  dask/local.py:551\r\n            \u2514\u2500 5.032 get_async  dask/local.py:350\r\n               \u251c\u2500 4.467 fire_tasks  dask/local.py:452\r\n               \u2502  \u2514\u2500 4.395 submit  dask/local.py:539\r\n               \u2502     \u2514\u2500 4.354 batch_execute_tasks  dask/local.py:234\r\n               \u2502        \u2514\u2500 4.351 <listcomp>  dask/local.py:238\r\n               \u2502           \u2514\u2500 4.349 execute_task  dask/local.py:214\r\n               \u2502              \u2514\u2500 4.343 _execute_task  dask/core.py:82\r\n               \u2502                 \u2514\u2500 4.312 __call__  dask/optimization.py:987\r\n               \u2502                    \u2514\u2500 4.306 get  dask/core.py:128\r\n               \u2502                       \u2514\u2500 4.264 _execute_task  dask/core.py:82\r\n               \u2502                          \u251c\u2500 1.262 __array_ufunc__  awkward/highlevel.py:1291\r\n               \u2502                          \u2502  \u2514\u2500 1.207 array_ufunc  awkward/_connect/numpy.py:213\r\n               \u2502                          \u2502     \u251c\u2500 0.820 broadcast_and_apply  awkward/_broadcasting.py:1041\r\n               \u2502                          \u2502     \u2502  \u2514\u2500 0.799 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502     \u2502     \u2514\u2500 0.770 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502     \u2502        \u2514\u2500 0.764 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502     \u2502           \u2514\u2500 0.724 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502     \u2502              \u2514\u2500 0.680 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502     \u2502                 \u251c\u2500 0.568 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502     \u2502                 \u2502  \u251c\u2500 0.376 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502     \u2502                 \u2502  \u2502  \u2514\u2500 0.323 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502     \u2502                 \u2502  \u2502     \u251c\u2500 0.199 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502     \u2502                 \u2502  \u2502     \u2502  \u251c\u2500 0.087 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502     \u2502                 \u2502  \u2502     \u2502  \u2502  \u2514\u2500 0.083 action  awkward/_connect/numpy.py:222\r\n               \u2502                          \u2502     \u2502                 \u2502  \u2502     \u2502  \u2502     \u2514\u2500 0.060 find_ufunc  awkward/_behavior.py:84\r\n               \u2502                          \u2502     \u2502                 \u2502  \u2502     \u2502  \u2514\u2500 0.054 _broadcast_tooffsets64  awkward/contents/listoffsetarray.py:360\r\n               \u2502                          \u2502     \u2502                 \u2502  \u2502     \u251c\u2500 0.065 broadcast_any_indexed  awkward/_broadcasting.py:936\r\n               \u2502                          \u2502     \u2502                 \u2502  \u2502     \u2514\u2500 0.058 broadcast_any_option  awkward/_broadcasting.py:754\r\n               \u2502                          \u2502     \u2502                 \u2502  \u2514\u2500 0.137 _broadcast_tooffsets64  awkward/contents/listoffsetarray.py:360\r\n               \u2502                          \u2502     \u2502                 \u2514\u2500 0.106 broadcast_any_indexed  awkward/_broadcasting.py:936\r\n               \u2502                          \u2502     \u2502                    \u2514\u2500 0.084 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502     \u2502                       \u2514\u2500 0.061 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502     \u2502                          \u2514\u2500 0.061 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502     \u251c\u2500 0.256 recursively_apply  awkward/_do.py:20\r\n               \u2502                          \u2502     \u2502  \u251c\u2500 0.178 _recursively_apply  awkward/contents/listoffsetarray.py:2053\r\n               \u2502                          \u2502     \u2502  \u2502  \u2514\u2500 0.174 continuation  awkward/contents/listoffsetarray.py:2068\r\n               \u2502                          \u2502     \u2502  \u2502     \u2514\u2500 0.119 _recursively_apply  awkward/contents/numpyarray.py:1235\r\n               \u2502                          \u2502     \u2502  \u2502        \u2514\u2500 0.118 unary_action  awkward/_connect/numpy.py:307\r\n               \u2502                          \u2502     \u2502  \u2502           \u2514\u2500 0.118 action  awkward/_connect/numpy.py:222\r\n               \u2502                          \u2502     \u2502  \u2502              \u2514\u2500 0.083 find_ufunc  awkward/_behavior.py:84\r\n               \u2502                          \u2502     \u2502  \u2514\u2500 0.059 _recursively_apply  awkward/contents/indexedarray.py:1041\r\n               \u2502                          \u2502     \u2502     \u2514\u2500 0.058 continuation  awkward/contents/indexedarray.py:1066\r\n               \u2502                          \u2502     \u2514\u2500 0.073 _array_ufunc_custom_cast  awkward/_connect/numpy.py:141\r\n               \u2502                          \u251c\u2500 0.783 __call__  dask_awkward/lib/core.py:1994\r\n               \u2502                          \u2502  \u251c\u2500 0.572 pt  coffea/nanoevents/methods/vector.py:121\r\n               \u2502                          \u2502  \u2502  \u2514\u2500 0.572 r  coffea/nanoevents/methods/vector.py:85\r\n               \u2502                          \u2502  \u2502     \u2514\u2500 0.542 r2  coffea/nanoevents/methods/vector.py:111\r\n               \u2502                          \u2502  \u2502        \u2514\u2500 0.498 func  numpy/lib/mixins.py:18\r\n               \u2502                          \u2502  \u2502           \u2514\u2500 0.497 __array_ufunc__  awkward/highlevel.py:1291\r\n               \u2502                          \u2502  \u2502              \u2514\u2500 0.487 array_ufunc  awkward/_connect/numpy.py:213\r\n               \u2502                          \u2502  \u2502                 \u2514\u2500 0.460 broadcast_and_apply  awkward/_broadcasting.py:1041\r\n               \u2502                          \u2502  \u2502                    \u2514\u2500 0.454 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502  \u2502                       \u2514\u2500 0.439 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502  \u2502                          \u2514\u2500 0.439 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502  \u2502                             \u2514\u2500 0.418 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502  \u2502                                \u2514\u2500 0.412 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502  \u2502                                   \u251c\u2500 0.255 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502  \u2502                                   \u2502  \u2514\u2500 0.186 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502  \u2502                                   \u2502     \u2514\u2500 0.178 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502  \u2502                                   \u2502        \u251c\u2500 0.113 broadcast_any_indexed  awkward/_broadcasting.py:936\r\n               \u2502                          \u2502  \u2502                                   \u2502        \u2502  \u2514\u2500 0.071 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502  \u2502                                   \u2502        \u2502     \u2514\u2500 0.066 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502  \u2502                                   \u2502        \u2502        \u2514\u2500 0.066 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502  \u2502                                   \u2502        \u2502           \u2514\u2500 0.054 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502  \u2502                                   \u2502        \u2502              \u2514\u2500 0.053 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502  \u2502                                   \u2502        \u2502                 \u2514\u2500 0.052 broadcast_any_indexed  awkward/_broadcasting.py:936\r\n               \u2502                          \u2502  \u2502                                   \u2502        \u2514\u2500 0.064 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502  \u2502                                   \u2514\u2500 0.154 broadcast_any_indexed  awkward/_broadcasting.py:936\r\n               \u2502                          \u2502  \u2502                                      \u2514\u2500 0.120 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502  \u2502                                         \u2514\u2500 0.114 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502  \u2502                                            \u2514\u2500 0.114 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502  \u2502                                               \u2514\u2500 0.087 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502  \u2502                                                  \u2514\u2500 0.084 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502  \u2502                                                     \u2514\u2500 0.084 broadcast_any_indexed  awkward/_broadcasting.py:936\r\n               \u2502                          \u2502  \u2502                                                        \u2514\u2500 0.056 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502  \u2514\u2500 0.191 eta  coffea/nanoevents/methods/vector.py:512\r\n               \u2502                          \u2502     \u2514\u2500 0.139 r  coffea/nanoevents/methods/vector.py:85\r\n               \u2502                          \u2502        \u2514\u2500 0.130 r2  coffea/nanoevents/methods/vector.py:111\r\n               \u2502                          \u2502           \u2514\u2500 0.120 func  numpy/lib/mixins.py:18\r\n               \u2502                          \u2502              \u2514\u2500 0.120 __array_ufunc__  awkward/highlevel.py:1291\r\n               \u2502                          \u2502                 \u2514\u2500 0.117 array_ufunc  awkward/_connect/numpy.py:213\r\n               \u2502                          \u2502                    \u2514\u2500 0.106 broadcast_and_apply  awkward/_broadcasting.py:1041\r\n               \u2502                          \u2502                       \u2514\u2500 0.103 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502                          \u2514\u2500 0.100 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502                             \u2514\u2500 0.100 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502                                \u2514\u2500 0.096 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502                                   \u2514\u2500 0.093 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u251c\u2500 0.748 __call__  dask_awkward/lib/structure.py:860\r\n               \u2502                          \u2502  \u2514\u2500 0.748 with_field  awkward/operations/ak_with_field.py:19\r\n               \u2502                          \u2502     \u2514\u2500 0.726 _impl  awkward/operations/ak_with_field.py:55\r\n               \u2502                          \u2502        \u2514\u2500 0.693 broadcast_and_apply  awkward/_broadcasting.py:1041\r\n               \u2502                          \u2502           \u2514\u2500 0.640 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502              \u2514\u2500 0.638 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502                 \u2514\u2500 0.634 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502                    \u251c\u2500 0.573 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502                    \u2502  \u251c\u2500 0.518 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502                    \u2502  \u2502  \u2514\u2500 0.510 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502                    \u2502  \u2502     \u251c\u2500 0.251 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502  \u251c\u2500 0.169 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502  \u2502  \u251c\u2500 0.102 broadcast_any_indexed  awkward/_broadcasting.py:936\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502  \u2502  \u2502  \u2514\u2500 0.080 <listcomp>  awkward/_broadcasting.py:940\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502  \u2502  \u2502     \u2514\u2500 0.079 _push_inside_record_or_project  awkward/contents/indexedarray.py:1140\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502  \u2502  \u2502        \u2514\u2500 0.075 <listcomp>  awkward/contents/indexedarray.py:1143\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502  \u2502  \u2502           \u2514\u2500 0.074 simplified  awkward/contents/indexedarray.py:152\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502  \u2502  \u2514\u2500 0.067 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502  \u2502     \u2514\u2500 0.054 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502  \u2514\u2500 0.081 action  awkward/operations/ak_with_field.py:123\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502     \u2514\u2500 0.072 <listcomp>  awkward/operations/ak_with_field.py:156\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502        \u2514\u2500 0.070 __getitem__  awkward/contents/content.py:509\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2502           \u2514\u2500 0.065 _getitem  awkward/contents/content.py:512\r\n               \u2502                          \u2502                    \u2502  \u2502     \u2514\u2500 0.224 _broadcast_tooffsets64  awkward/contents/listoffsetarray.py:360\r\n               \u2502                          \u2502                    \u2502  \u2502        \u2514\u2500 0.175 __getitem__  awkward/contents/content.py:509\r\n               \u2502                          \u2502                    \u2502  \u2502           \u2514\u2500 0.175 _getitem  awkward/contents/content.py:512\r\n               \u2502                          \u2502                    \u2502  \u2502              \u2514\u2500 0.147 _getitem_range  awkward/contents/recordarray.py:444\r\n               \u2502                          \u2502                    \u2502  \u2502                 \u2514\u2500 0.121 <listcomp>  awkward/contents/recordarray.py:462\r\n               \u2502                          \u2502                    \u2502  \u2502                    \u2514\u2500 0.079 _getitem_range  awkward/contents/numpyarray.py:305\r\n               \u2502                          \u2502                    \u2502  \u2502                       \u2514\u2500 0.061 __getitem__  awkward/_nplikes/typetracer.py:304\r\n               \u2502                          \u2502                    \u2502  \u2514\u2500 0.052 action  awkward/operations/ak_with_field.py:123\r\n               \u2502                          \u2502                    \u2514\u2500 0.052 __getitem__  awkward/contents/content.py:509\r\n               \u2502                          \u251c\u2500 0.578 apply  dask/utils.py:41\r\n               \u2502                          \u2502  \u251c\u2500 0.266 sum  awkward/operations/ak_sum.py:13\r\n               \u2502                          \u2502  \u2502  \u2514\u2500 0.241 _impl  awkward/operations/ak_sum.py:267\r\n               \u2502                          \u2502  \u2502     \u2514\u2500 0.233 reduce  awkward/_do.py:262\r\n               \u2502                          \u2502  \u2502        \u2514\u2500 0.185 _reduce_next  awkward/contents/listoffsetarray.py:1444\r\n               \u2502                          \u2502  \u251c\u2500 0.103 mean  awkward/operations/ak_mean.py:13\r\n               \u2502                          \u2502  \u2502  \u2514\u2500 0.100 _impl  awkward/operations/ak_mean.py:152\r\n               \u2502                          \u2502  \u2514\u2500 0.083 count  awkward/operations/ak_count.py:12\r\n               \u2502                          \u2502     \u2514\u2500 0.080 _impl  awkward/operations/ak_count.py:110\r\n               \u2502                          \u2502        \u2514\u2500 0.077 reduce  awkward/_do.py:262\r\n               \u2502                          \u251c\u2500 0.413 __getitem__  awkward/highlevel.py:520\r\n               \u2502                          \u2502  \u2514\u2500 0.338 __getitem__  awkward/contents/content.py:509\r\n               \u2502                          \u2502     \u2514\u2500 0.338 _getitem  awkward/contents/content.py:512\r\n               \u2502                          \u2502        \u251c\u2500 0.209 _getitem  awkward/contents/content.py:512\r\n               \u2502                          \u2502        \u2502  \u2514\u2500 0.189 _getitem  awkward/contents/content.py:512\r\n               \u2502                          \u2502        \u2502     \u2514\u2500 0.140 _getitem_next  awkward/contents/regulararray.py:467\r\n               \u2502                          \u2502        \u2502        \u2514\u2500 0.122 _getitem_next_jagged  awkward/contents/listoffsetarray.py:403\r\n               \u2502                          \u2502        \u2502           \u2514\u2500 0.110 _getitem_next_jagged  awkward/contents/listarray.py:443\r\n               \u2502                          \u2502        \u2514\u2500 0.056 _getitem_next  awkward/contents/regulararray.py:467\r\n               \u2502                          \u251c\u2500 0.257 __call__  dask_awkward/lib/core.py:1986\r\n               \u2502                          \u2502  \u2514\u2500 0.257 delta_r  coffea/nanoevents/methods/vector.py:602\r\n               \u2502                          \u2502     \u251c\u2500 0.133 eta  coffea/nanoevents/methods/vector.py:512\r\n               \u2502                          \u2502     \u2502  \u2514\u2500 0.101 r  coffea/nanoevents/methods/vector.py:85\r\n               \u2502                          \u2502     \u2502     \u2514\u2500 0.092 r2  coffea/nanoevents/methods/vector.py:111\r\n               \u2502                          \u2502     \u2502        \u2514\u2500 0.076 func  numpy/lib/mixins.py:18\r\n               \u2502                          \u2502     \u2502           \u2514\u2500 0.076 __array_ufunc__  awkward/highlevel.py:1291\r\n               \u2502                          \u2502     \u2502              \u2514\u2500 0.073 array_ufunc  awkward/_connect/numpy.py:213\r\n               \u2502                          \u2502     \u2502                 \u2514\u2500 0.065 broadcast_and_apply  awkward/_broadcasting.py:1041\r\n               \u2502                          \u2502     \u2502                    \u2514\u2500 0.064 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502     \u2502                       \u2514\u2500 0.062 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502     \u2502                          \u2514\u2500 0.062 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                          \u2502     \u2502                             \u2514\u2500 0.057 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                          \u2502     \u2502                                \u2514\u2500 0.056 continuation  awkward/_broadcasting.py:986\r\n               \u2502                          \u2502     \u2514\u2500 0.064 delta_phi  coffea/nanoevents/methods/vector.py:199\r\n               \u2502                          \u2514\u2500 0.081 __call__  dask_awkward/lib/structure.py:806\r\n               \u2502                             \u2514\u2500 0.081 where  awkward/operations/ak_where.py:14\r\n               \u2502                                \u2514\u2500 0.078 _impl3  awkward/operations/ak_where.py:97\r\n               \u2502                                   \u2514\u2500 0.075 broadcast_and_apply  awkward/_broadcasting.py:1041\r\n               \u2502                                      \u2514\u2500 0.072 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                                         \u2514\u2500 0.072 continuation  awkward/_broadcasting.py:986\r\n               \u2502                                            \u2514\u2500 0.072 broadcast_any_list  awkward/_broadcasting.py:488\r\n               \u2502                                               \u2514\u2500 0.068 apply_step  awkward/_broadcasting.py:362\r\n               \u2502                                                  \u2514\u2500 0.061 continuation  awkward/_broadcasting.py:986\r\n               \u251c\u2500 0.401 keys  dask/highlevelgraph.py:530\r\n               \u2502  \u2514\u2500 0.401 to_dict  dask/highlevelgraph.py:522\r\n               \u2502     \u2514\u2500 0.401 ensure_dict  dask/utils.py:1236\r\n               \u2502        \u2514\u2500 0.388 __iter__  _collections_abc.py:719\r\n               \u2502           \u2514\u2500 0.386 __iter__  dask/blockwise.py:493\r\n               \u2502              \u2514\u2500 0.385 _dict  dask/blockwise.py:452\r\n               \u2502                 \u251c\u2500 0.188 make_blockwise_graph  dask/blockwise.py:759\r\n               \u2502                 \u2502  \u2514\u2500 0.173 _get_coord_mapping  dask/blockwise.py:665\r\n               \u2502                 \u2502     \u2514\u2500 0.169 [self]  \r\n               \u2502                 \u251c\u2500 0.073 fuse  dask/optimization.py:450\r\n               \u2502                 \u2514\u2500 0.058 dims  dask/blockwise.py:440\r\n               \u2502                    \u2514\u2500 0.055 _make_dims  dask/blockwise.py:1480\r\n               \u2502                       \u2514\u2500 0.052 broadcast_dimensions  dask/blockwise.py:1420\r\n               \u2514\u2500 0.062 order  dask/order.py:84\r\n```\r\n\r\nAlso emits some warnings as follows in the latter:\r\n```\r\n2023-06-16 16:02:27,243 - distributed.utils_perf - WARNING - full garbage collections took 12% CPU time recently (threshold: 10%)\r\n2023-06-16 16:02:28,004 - distributed.utils_perf - WARNING - full garbage collections took 12% CPU time recently (threshold: 10%)\r\n2023-06-16 16:02:28,544 - distributed.utils_perf - WARNING - full garbage collections took 13% CPU time recently (threshold: 10%)\r\n2023-06-16 16:02:29,077 - distributed.utils_perf - WARNING - full garbage collections took 13% CPU time recently (threshold: 10%)\r\n2023-06-16 16:02:29,592 - distributed.utils_perf - WARNING - full garbage collections took 14% CPU time recently (threshold: 10%)\r\n2023-06-16 16:02:30,105 - distributed.utils_perf - WARNING - full garbage collections took 15% CPU time recently (threshold: 10%)\r\n2023-06-16 16:02:30,635 - distributed.utils_perf - WARNING - full garbage collections took 16% CPU time recently (threshold: 10%)\r\n2023-06-16 16:02:31,183 - distributed.utils_perf - WARNING - full garbage collections took 16% CPU time recently (threshold: 10%)\r\n```",
  "created_at":"2023-06-16T14:03:51Z",
  "id":1594730934,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5fDam2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-16T14:04:12Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"And again that's OSX so perhaps a grain of salt but it was a very noticeable slowdown compared to 2.2.1",
  "created_at":"2023-06-16T14:06:59Z",
  "id":1594740791,
  "issue":2462,
  "node_id":"IC_kwDODBCWws5fDdA3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-16T14:06:59Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In this particular reproducer, the mask is applied to the leaves (wrapping `pt` with a mask derived from `eta`), i.e. at `axis > 0`. Meanwhile, the default axis for `is_none` is `axis=0`, which is a list. From the type alone, it's discernible that there are no `None` values at `axis=0`.\r\n\r\nEven if we check `is_none` on `axis=1`, this does not require `pt` to have real data to perform the check; we only read the mask, which is derived from `eta` and already triggers the touching for that field.",
  "created_at":"2023-05-17T12:04:54Z",
  "id":1551271396,
  "issue":2463,
  "node_id":"IC_kwDODBCWws5cdoXk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T12:21:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Ok good then this is more a conceptual problem in dak as to how to deal with this operation. i.e. for option type leaves it should know to reach through to touch the underlying data when `.compute()` is requested?",
  "created_at":"2023-05-17T12:47:55Z",
  "id":1551330570,
  "issue":2463,
  "node_id":"IC_kwDODBCWws5cd20K",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T12:47:55Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I believe the motivation for this PR was dask-contrib/dask-awkward/issues/260, right? That's a symptom of our existing optimisation logic \u2014 we drop the untouched buffers from Parquet loading, which manifests as missing fields for operations that still need \"something\" to represent the buffer, e.g. `ak.zip`. \r\n\r\nThe PR that will fix this is dask-contrib/dask-awkward/pull/184, which performs a secondary rehydration step to rebuild the layout to comply with the non-projected form. It does this by introducing \"dummy\" `Index` (and soon `NumpyArray`) nodes that don't contain any data. ",
  "created_at":"2023-05-17T12:55:41Z",
  "id":1551341569,
  "issue":2463,
  "node_id":"IC_kwDODBCWws5cd5gB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T12:55:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I guess then that all makes sense. My major issue then is someone requires it to continue moving their porting work for their analysis forward. \r\n\r\nWill a manual data-touch likely work around what's to be fixed by https://github.com/dask-contrib/dask-awkward/pull/184? Or is the time for that pull to be completed short?",
  "created_at":"2023-05-17T13:03:40Z",
  "id":1551354475,
  "issue":2463,
  "node_id":"IC_kwDODBCWws5cd8pr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T13:04:57Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The only fix at the touching level is to disable culling and always touch everything. However, I know that we don't want that. `ak.typetracer.empty_if_typetracer` can be used to do this on a per-array basis, although subsequent code might fail if it expects an array with non-zero length for some reason.\r\n\r\n",
  "created_at":"2023-05-17T17:06:10Z",
  "id":1551770635,
  "issue":2463,
  "node_id":"IC_kwDODBCWws5cfiQL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T17:06:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2464?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2464](https://app.codecov.io/gh/scikit-hep/awkward/pull/2464?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0e991f5) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/05f5eb1f5445c4de7e35e5f055ec55da05b167d3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (05f5eb1) will **decrease** coverage by `0.01%`.\n> The diff coverage is `95.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2464?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_behavior.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2464?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JlaGF2aW9yLnB5) | `94.17% <94.73%> (-0.88%)` | :arrow_down: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2464?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `94.47% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-05-17T17:50:59Z",
  "id":1551823453,
  "issue":2464,
  "node_id":"IC_kwDODBCWws5cfvJd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-17T17:50:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2467?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2467](https://app.codecov.io/gh/scikit-hep/awkward/pull/2467?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (88fddfe) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/7327ef0b67132a609d0b369d5ebb65f776d0c504?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7327ef0) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2467?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/types/listtype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2467?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbGlzdHR5cGUucHk=) | `90.24% <100.00%> (\u00f8)` | |\n| [src/awkward/types/numpytype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2467?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbnVtcHl0eXBlLnB5) | `93.33% <100.00%> (\u00f8)` | |\n| [src/awkward/types/optiontype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2467?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvb3B0aW9udHlwZS5weQ==) | `81.96% <100.00%> (\u00f8)` | |\n| [src/awkward/types/recordtype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2467?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvcmVjb3JkdHlwZS5weQ==) | `88.00% <100.00%> (\u00f8)` | |\n| [src/awkward/types/regulartype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2467?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvcmVndWxhcnR5cGUucHk=) | `91.83% <100.00%> (\u00f8)` | |\n| [src/awkward/types/uniontype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2467?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5pb250eXBlLnB5) | `87.09% <100.00%> (\u00f8)` | |\n| [src/awkward/types/unknowntype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2467?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5rbm93bnR5cGUucHk=) | `91.89% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-05-23T01:15:18Z",
  "id":1558314918,
  "issue":2467,
  "node_id":"IC_kwDODBCWws5c4f-m",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-02T17:59:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This sounds like a good use-case for #1391. That would propagate units, though it would not convert them.\r\n\r\nOr maybe it could be some custom behaviors? https://awkward-array.org/doc/main/reference/ak.behavior.html That would even make it possible to convert appropriately. (The `NumpyArray` nodes would have two parameters, `__array__: \"units\"` and `__units__: \"light year\"` and there would be a custom `ak.Array` subclass with some mathematical operations overloaded, such as `np.add`\u2014maybe only addition.)\r\n\r\nI can try to write a prototype. This may be complex enough that we should build it in, rather than making users implement it\u2014so the new feature would be a new set of behaviors in src/awkward/behaviors. It would be the only `__array__` behaviors that are not string-like, and @agoose77 and I were trying to think if there would be anything like that.",
  "created_at":"2023-05-23T14:21:35Z",
  "id":1559509610,
  "issue":2468,
  "node_id":"IC_kwDODBCWws5c9Dpq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-23T14:21:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@gpiert thanks for opening #2788 regarding this! \r\n\r\nIt's planned that we add support for units through `pint`. We're working our way through features to get there :) ",
  "created_at":"2023-10-31T13:54:46Z",
  "id":1787268543,
  "issue":2468,
  "node_id":"IC_kwDODBCWws5qh42_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-31T13:54:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Cross posted from https://github.com/scikit-hep/awkward/issues/2788#issuecomment-1787324956:\r\n\r\n> That was probably in private conversations, then: we're thinking of using a Pint UnitRegistry as a source of truth about units and their relationships, but some of the handling would have to be manual. (For example, we have to implement reducers ourselves. If an array has units, `ak.sum` would preserve those units but `ak.prod` shouldn't even be possible. `ak.any` and `ak.all` would drop the units when converting numbers into booleans...)\r\n>\r\n> Thus, we're recognizing Pint as the standard way to express units, to the exclusion of any other libraries that might do the same thing, and we'll try to reuse code in Pint as much as possible (e.g. in unit conflicts, which of the two should be converted to the other, and what do we multiply by to get that conversion?), but there will be limits and some things will need to be computed by hand in Awkward.",
  "created_at":"2023-10-31T14:25:41Z",
  "id":1787326010,
  "issue":2468,
  "node_id":"IC_kwDODBCWws5qiG46",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-31T14:25:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've been thinking about a more robust solution to this problem; the typetracer kernel implementations should touch any typetracer arguments, removing the need to remember to do this. Do you see any issue to this before I get started in a later PR?",
  "created_at":"2023-05-23T16:28:19Z",
  "id":1559787210,
  "issue":2469,
  "node_id":"IC_kwDODBCWws5c-HbK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-23T16:30:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2469?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2469](https://app.codecov.io/gh/scikit-hep/awkward/pull/2469?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3e82d38) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/c12295293f46aab4dfad5f743f9df4b3531f5133?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c122952) will **decrease** coverage by `0.01%`.\n> The diff coverage is `55.55%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2469?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2469?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.03% <33.33%> (-0.35%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2469?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.68% <33.33%> (-0.20%)` | :arrow_down: |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2469?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.84% <100.00%> (+0.06%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-05-23T17:28:32Z",
  "id":1559866980,
  "issue":2469,
  "node_id":"IC_kwDODBCWws5c-a5k",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-23T17:28:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> [...] (Also, I think it already does that. Isn't there a touch_data in the TypeTracer generic implementation of kernel calls?)\r\n\r\nNo, surprisingly we do this manually at each call site! I think we can remove all of those statements accordingly.",
  "created_at":"2023-05-23T17:31:03Z",
  "id":1559869799,
  "issue":2469,
  "node_id":"IC_kwDODBCWws5c-bln",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-23T17:31:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That sounds like a good idea.",
  "created_at":"2023-05-23T17:33:26Z",
  "id":1559872381,
  "issue":2469,
  "node_id":"IC_kwDODBCWws5c-cN9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-23T17:33:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2471?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2471](https://app.codecov.io/gh/scikit-hep/awkward/pull/2471?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (08e46d0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/14584cec7ed83a655bbfcd77608ecf1980afecf4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (14584ce) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2471?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2471?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.73% <100.00%> (+0.05%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-05-24T11:20:53Z",
  "id":1560937411,
  "issue":2471,
  "node_id":"IC_kwDODBCWws5dCgPD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-24T11:20:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It's reasonable to say that strings are un-flattenable, with instructions for how to make it not a string and therefore flattenable. On the other hand, there are probably a lot of other methods like this one. Perhaps it could be generalized inside recursively_apply and broadcast_and_apply, but there are also operations defined as layout methods that would have to be excluded one by one (like flatten).\r\n> \r\n> Like, should we exclude ak.local_index on a string? (Maybe someone would want positions of each character...)\r\n\r\nI agree. My current stance is that `__array__` is meaningful, and we should always respect it. If users want e.g. character positions, they must drop the string abstraction.\r\n\r\nMeanwhile, I *think* `recursively_apply` could implement a flag. I don't think we want to preclude the ability to use it to recurse into the character array, but you're right that we should enforce this decision automatically instead of opt-in.",
  "created_at":"2023-05-26T17:51:48Z",
  "id":1564727322,
  "issue":2471,
  "node_id":"IC_kwDODBCWws5dQ9ga",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-26T17:51:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2472?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2472](https://app.codecov.io/gh/scikit-hep/awkward/pull/2472?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f0886d6) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/14584cec7ed83a655bbfcd77608ecf1980afecf4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (14584ce) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2472?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_kernels.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2472?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2tlcm5lbHMucHk=) | `67.52% <100.00%> (+0.85%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-05-24T11:50:42Z",
  "id":1560975139,
  "issue":2472,
  "node_id":"IC_kwDODBCWws5dCpcj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-24T11:50:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2473](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (20e54ba) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/14584cec7ed83a655bbfcd77608ecf1980afecf4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (14584ce) will **decrease** coverage by `0.01%`.\n> The diff coverage is `96.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.87% <76.47%> (-0.42%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.75% <94.11%> (-0.04%)` | :arrow_down: |\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.48% <94.44%> (-0.02%)` | :arrow_down: |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.88% <94.44%> (-0.17%)` | :arrow_down: |\n| [src/awkward/contents/unmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `73.22% <94.44%> (+0.02%)` | :arrow_up: |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.72% <95.23%> (-0.13%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `77.45% <100.00%> (+0.33%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.46% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.07% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.73% <100.00%> (+0.05%)` | :arrow_up: |\n| ... and [3 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2473?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-05-24T13:47:09Z",
  "id":1561186243,
  "issue":2473,
  "node_id":"IC_kwDODBCWws5dDc_D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-24T15:04:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"My thinking was - not all Array objects implement strides, so we don't need to pass it through the `NumpyArray` unless there's a good reason. In the back of my mind, I'm thinking about minimising how many details we expose about our arrays beyond \"it's contiguous\" and \"it's not contiguous\".\r\n\r\nIn any case, we can close this, I won't push it!",
  "created_at":"2023-05-25T07:57:27Z",
  "id":1562453210,
  "issue":2475,
  "node_id":"IC_kwDODBCWws5dISTa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-25T07:57:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2476?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2476](https://app.codecov.io/gh/scikit-hep/awkward/pull/2476?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (26f183f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f905b2093e1a00c180a1ee3c124840194080217f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f905b20) will **decrease** coverage by `0.03%`.\n> The diff coverage is `80.43%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/shape.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvc2hhcGUucHk=) | `82.14% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_nplikes/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `79.06% <28.57%> (-9.82%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpylike.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `74.01% <66.66%> (-0.07%)` | :arrow_down: |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.47% <86.36%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `90.66% <100.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.79% <100.00%> (-0.04%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-05-25T08:04:49Z",
  "id":1562464689,
  "issue":2476,
  "node_id":"IC_kwDODBCWws5dIVGx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-25T08:47:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2477?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2477](https://app.codecov.io/gh/scikit-hep/awkward/pull/2477?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f65d11b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/91708e894ecb72f5c3a847da51e5b93198fe06be?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (91708e8) will **increase** coverage by `0.00%`.\n> The diff coverage is `84.25%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2477?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2477?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.90% <82.14%> (+0.16%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2477?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.96% <85.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2477?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.41% <90.47%> (-0.31%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2477?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.93% <100.00%> (+0.13%)` | :arrow_up: |\n\n... and [3 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2477/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-05-25T14:22:11Z",
  "id":1563000019,
  "issue":2477,
  "node_id":"IC_kwDODBCWws5dKXzT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-01T08:36:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Something peculiar is going on with the x86 test. The traceback doesn't initially make sense to me \u00ad\u2014 I'll need to dig into this further.",
  "created_at":"2023-05-27T11:02:13Z",
  "id":1565351742,
  "issue":2477,
  "node_id":"IC_kwDODBCWws5dTV8-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-27T11:02:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski the tests are failing on 32-bit systems. It looks likely NumPy doesn't support `int64` types in some contexts (I think they use `intp` under the hood) without unsafely casting. \r\n\r\nI think this means we *can't* drop the `size=1` broadcasting kernel, as we need to support this dtype. Does this follow?\r\n\r\nAlternatively, we forcibly cast, knowing that `intp` is expected to represent all valid sizes of allocatable objects.",
  "created_at":"2023-05-30T14:46:42Z",
  "id":1568569585,
  "issue":2477,
  "node_id":"IC_kwDODBCWws5dfnjx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-30T15:35:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We can forcibly cast (and do that in other circumstances). That's the reason that \"64\" is in the name of the function; we really mean `int64_t` and not `ssize_t`. If NumPy is doing `intp` casts, then we should explicitly cast to `int64`. That's essentially what the Awkward1-era kernels were doing (with lots of `(int64_t)xyz` in the code), and it doesn't make sense to bring back the kernels when that's semantically equivalent to casting NumPy (and casting NumPy gets us to smaller code).",
  "created_at":"2023-05-30T16:22:43Z",
  "id":1568724985,
  "issue":2477,
  "node_id":"IC_kwDODBCWws5dgNf5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-30T16:22:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> We can forcibly cast (and do that in other circumstances). That's the reason that \"64\" is in the name of the function; we really mean `int64_t` and not `ssize_t`.\r\n\r\nTo be clear, this is currently the bug - NumPy internally performs a cast to `int32` (which I assume is what `intp` aliases to), and this is not a safe cast, so it fails. We would need to cast `counts` to `intp` (or `int32`) for this to work, which is an unsafe cast to a smaller width on 32-bit systems (see 16e40ef). I'm somewhat comfortable doing that; in-memory Awkward arrays are limited in length by the same rules that permit `intp` to represent any array length in C. So, even though `Index64` offsets are larger than `intp` on 32-bit, they can only hold meaningful values `< np.iinfo(np.intp).max`. This axiom would fall down if we used this logic in e.g. Dask, however, it is not a problem given that Dask manages these indices separately.",
  "created_at":"2023-05-30T17:12:06Z",
  "id":1568787539,
  "issue":2477,
  "node_id":"IC_kwDODBCWws5dgcxT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-30T18:18:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2478](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7685164) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/43fdda39346b2afb648b71f9c69cd31526709429?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (43fdda3) will **increase** coverage by `0.00%`.\n> The diff coverage is `85.18%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.93% <0.00%> (+0.44%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.68% <66.66%> (-0.06%)` | :arrow_down: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.03% <80.00%> (-0.04%)` | :arrow_down: |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.83% <100.00%> (-0.06%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.65% <100.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.42% <100.00%> (-0.04%)` | :arrow_down: |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.72% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.66% <100.00%> (-0.06%)` | :arrow_down: |\n| [src/awkward/index.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `91.07% <100.00%> (+0.33%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-05-26T13:55:28Z",
  "id":1564432397,
  "issue":2478,
  "node_id":"IC_kwDODBCWws5dP1gN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-26T13:55:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK - we'll make a separate PR to make these methods public, then!",
  "created_at":"2023-05-26T17:50:08Z",
  "id":1564725828,
  "issue":2478,
  "node_id":"IC_kwDODBCWws5dQ9JE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-26T17:50:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2479](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c4de315) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/13aea6de849a794ccb35b4743edc1602dcd97f7a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (13aea6d) will **decrease** coverage by `0.23%`.\n> The diff coverage is `64.33%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.81% <\u00f8> (+0.10%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `36.47% <6.66%> (-6.00%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/placeholder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvcGxhY2Vob2xkZXIucHk=) | `48.88% <48.88%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `75.78% <57.53%> (-1.15%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `65.45% <83.33%> (+1.45%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `88.88% <85.00%> (-1.78%)` | :arrow_down: |\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.59% <97.22%> (-0.37%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/shape.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvc2hhcGUucHk=) | `83.05% <100.00%> (+0.90%)` | :arrow_up: |\n| [src/awkward/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXRyYWNlci5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n... and [2 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2479/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-01T21:35:56Z",
  "id":1572820194,
  "issue":2479,
  "node_id":"IC_kwDODBCWws5dv1Ti",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-01T21:49:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I added some assertions, and fixed some broadcasting bugs (where known sizes in typetracer weren't correct). If you'd be so kind as to pass your eyes over the changes, then merge at your discretion?\r\n\r\nOne aspect to this PR that is on my radar is whether introducing `unknown_length` in non `known_data=False` contexts might be problematic. The `index_nplike.shape_item_as_index` will always fail for `unknown_length` (it doesn't map to a valid index), so any code that e.g. uses the length of a placeholder `Index` (with unknown length) in some secondary calculation would fail.\r\n\r\nThat is to say - we have been assuming that `touch_shape` is not needed, and we have not been using it in dask-awkward. But, it's possible that we do need the shape in some contexts.\r\n\r\nI suppose this is where our re-hydration PR falls short of the ideal case, where we can query the buffer dtype and sizes from the metadata without reading the contents themselves. This would obviate the need for `unknown_length` in `PlaceholderArray`. ",
  "created_at":"2023-06-01T21:44:17Z",
  "id":1572829174,
  "issue":2479,
  "node_id":"IC_kwDODBCWws5dv3f2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-01T21:44:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Then again, what's the alternative? It's possible (I don't know) that it's non-trivial to determine only the lengths of the offsets of a ragged column in Parquet. In such a case, we could not apply this optimisation if we also required known lengths.\r\n\r\nPerhaps this serves in favour of `unknown_length` outside of typetracer contexts, and suggests that we should be mindful of this in code that e.g. creates new `Index` objects to take a known length. ",
  "created_at":"2023-06-01T21:50:15Z",
  "id":1572835414,
  "issue":2479,
  "node_id":"IC_kwDODBCWws5dv5BW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-01T21:50:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"In Parquet version 2 (not universally adopted), it's possible to read just the definition and repetition levels and reconstruct the `offsets` of a jagged array without the `content`.\r\n\r\nBut If it's only the overall length (single integer) that you're talking about, that's always available in metadata and can be read independently of the data for any version of Parquet.\r\n\r\nI'll be reviewing this PR soon.",
  "created_at":"2023-06-01T21:56:46Z",
  "id":1572840996,
  "issue":2479,
  "node_id":"IC_kwDODBCWws5dv6Yk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-01T21:56:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2481?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2481](https://app.codecov.io/gh/scikit-hep/awkward/pull/2481?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a4a1c3c) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/91708e894ecb72f5c3a847da51e5b93198fe06be?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (91708e8) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-05-29T18:07:06Z",
  "id":1567397027,
  "issue":2481,
  "node_id":"IC_kwDODBCWws5dbJSj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-05-29T18:07:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2482?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2482](https://app.codecov.io/gh/scikit-hep/awkward/pull/2482?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (afa3066) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/91708e894ecb72f5c3a847da51e5b93198fe06be?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (91708e8) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/layout.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `83.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.35% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-06-01T08:02:07Z",
  "id":1571556032,
  "issue":2482,
  "node_id":"IC_kwDODBCWws5drArA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-01T08:02:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - thanks!",
  "created_at":"2023-06-01T08:27:50Z",
  "id":1571593190,
  "issue":2482,
  "node_id":"IC_kwDODBCWws5drJvm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-01T08:27:50Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2485?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2485](https://app.codecov.io/gh/scikit-hep/awkward/pull/2485?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fadd32b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/0e08f59e488f0907bd540e4f7e1d197d2d0c0529?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0e08f59) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2485?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2485?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.59% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-06-02T15:22:03Z",
  "id":1573915743,
  "issue":2485,
  "node_id":"IC_kwDODBCWws5d0Axf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-02T15:22:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Wait, this is wrong (and the tests show it ... didn't run the full test suite locally as I'm working remotely). `ListArray.starts` has length zero for an empty list which makes sense!",
  "created_at":"2023-06-02T16:35:14Z",
  "id":1574018703,
  "issue":2486,
  "node_id":"IC_kwDODBCWws5d0Z6P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-02T16:35:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's right; `offsets` is length-1 for an empty array of lists, but `starts` and `stops` are length-0 for an empty array of lists, regardless of whether we're talking about `ListOffsetArray` or `ListArray` (though we can't always make `offsets` for a `ListArray`).",
  "created_at":"2023-06-02T16:41:28Z",
  "id":1574025362,
  "issue":2486,
  "node_id":"IC_kwDODBCWws5d0biS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-02T16:41:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2488?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2488](https://app.codecov.io/gh/scikit-hep/awkward/pull/2488?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (10f8b92) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/7327ef0b67132a609d0b369d5ebb65f776d0c504?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7327ef0) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2488?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2488?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.07% <100.00%> (+0.24%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2488?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.59% <100.00%> (+0.16%)` | :arrow_up: |\n\n... and [4 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2488/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-02T17:09:48Z",
  "id":1574057582,
  "issue":2488,
  "node_id":"IC_kwDODBCWws5d0jZu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-03T10:25:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"If all that we know about `out` is that it is a list array, it might not have an `offsets`. (`ListArray.offsets` does not exist). Also, if the array is empty, `offsets[0]` can be any value, possibly even one that doesn't exist in the `content`.\r\n\r\n```python\r\n>>> listoffsetarray = ak.Array([[1, 2, 3]])[0:0]\r\n>>> listoffsetarray.layout.offsets.data[0] = 1000\r\n>>> listoffsetarray.layout\r\n<ListOffsetArray len='0'>\r\n    <offsets><Index dtype='int64' len='1'>\r\n        [1000]\r\n    </Index></offsets>\r\n    <content><NumpyArray dtype='int64' len='3'>[1 2 3]</NumpyArray></content>\r\n</ListOffsetArray>\r\n>>> listoffsetarray\r\n<Array [] type='0 * var * int64'>\r\n```\r\n\r\nIt's not a good thing to use in a slice of `content`.\r\n\r\nAt this point in the code, an empty array has to be considered as a separate case. In context, it looks like you'll want\r\n\r\n```python\r\nout.content[0:0]\r\n```\r\n\r\nfor that case.\r\n\r\nPreviously, these had used `out.starts` because `starts` and `stops` exist for all three list array types. But even then, if list `i` within an array of lists is empty, then `starts[i] == stops[i]` but these values can be anything at all.\r\n\r\n```python\r\n>>> listarray = ak.Array([[1, 2, 3], [], [4, 5]])[[True, True, True]]\r\n>>> listarray.layout.starts.data[1] = 1000\r\n>>> listarray.layout.stops.data[1] = 1000\r\n>>> listarray.layout\r\n<ListArray len='3'>\r\n    <starts><Index dtype='int64' len='3'>\r\n        [   0 1000    3]\r\n    </Index></starts>\r\n    <stops><Index dtype='int64' len='3'>\r\n        [   3 1000    5]\r\n    </Index></stops>\r\n    <content><NumpyArray dtype='int64' len='5'>[1 2 3 4 5]</NumpyArray></content>\r\n</ListArray>\r\n>>> listarray\r\n<Array [[1, 2, 3], [], [4, 5]] type='3 * var * int64'>\r\n```\r\n\r\nSo the old code wasn't right, either. Maybe this?\r\n\r\n```python\r\nstarts, stops = out.starts.data, out.stops.data\r\nnonempty = starts != stops\r\nif nplike.count_nonzero(nonempty) == 0:\r\n    return out.content[0:0]\r\nelse:\r\n    return out.content[nplike.min(starts[nonempty]) : nplike.max(stops[nonempty])]\r\n```\r\n\r\nOr is the `out` at this point in the code constructed in such a way that we know enough about its structure to not have to do these defensive checks?",
  "created_at":"2023-06-02T17:39:41Z",
  "id":1574090842,
  "issue":2488,
  "node_id":"IC_kwDODBCWws5d0rha",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-02T17:39:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Since `out = next._reduce_next(...)`, we know that it's not an out-of-order `ListArray`. The `nplike.min` and `nplike.max` are overkill.\r\n\r\nWe don't know what `axis` it is, so there's no guarantee that the first list is nonempty. (If `axis` is less than the level we're at, then I think it would always be true that each list has greater than or equal to the length of all that follow it. But this point in the code is not guaranteed to be in a case like that.)\r\n\r\n```python\r\nstarts, stops = out.starts.data, out.stops.data\r\nnonempty = starts != stops\r\nnonempty_starts = starts[nonempty]\r\nif len(nonempty_starts) == 0:\r\n    return out.content[0:0]\r\nelse:\r\n    return out.content[nonempty_starts : stops[nonempty]]\r\n```\r\n\r\nwith appropriate handling of typetracer arrays.\r\n\r\nIs there any reason why the original code only has a lower bound on the slice and not an upper bound? If there really shouldn't be an upper bound, I guess you don't need `stops[nonempty]`.",
  "created_at":"2023-06-02T17:46:48Z",
  "id":1574099070,
  "issue":2488,
  "node_id":"IC_kwDODBCWws5d0th-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-02T17:46:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I should have added more explanation here, because it's definitely something that should have comments.\r\n\r\nWhilst we're checking `is_list`, we also know that the result of `out` can be only `RegularArray` or `ListOffsetArray` types, i.e. not `ListArray`. So we can safely use `offsets` here. The reason that we _only_ trim the start is because the slice is done only to ensure that `outindex` (which starts at 0) aligns with the content.\r\n\r\nAs such, I don't *think* we need to change anything here, but I should add comments to elucidate this.\r\n\r\nWait, though, `is_list` should come _after_ `is_regular`, so there is a bug, although it doesn't actually have an effect, as `RegularArray` has an `offsets` too.",
  "created_at":"2023-06-02T18:40:52Z",
  "id":1574160575,
  "issue":2488,
  "node_id":"IC_kwDODBCWws5d08i_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-02T18:44:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"`RegularArray` can _now_ have `offsets`. It's probably historical. Even though you could rely on `RegularArray.offsets` and have fewer if statements, those offsets have to be generated; it would be a waste just to check the first element.\r\n\r\nPerhaps the if-predicates should be `isinstance(out, RegularArray)` and `isinstance(out, ListOffsetArray)`, rather than using the `is_regular` and `is_list` methods, since you want to make assumptions about the specific `Content` subclass that `out` is? You can put an `AssertionError` in the else clause.\r\n\r\nWhat you're saying about `out` and `outindex` rings a bell...",
  "created_at":"2023-06-02T19:56:48Z",
  "id":1574243290,
  "issue":2488,
  "node_id":"IC_kwDODBCWws5d1Qva",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-02T19:56:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> `RegularArray` can _now_ have `offsets`. It's probably historical. Even though you could rely on `RegularArray.offsets` and have fewer if statements, those offsets have to be generated; it would be a waste just to check the first element.\r\n\r\nYep \u2014 and to be clear, I mean to say that by providing this interface, the misordered `if` statements never caused a noticeable bug when reducing with regular dimensions! We definitely want to use both branches to maximise performance.\r\n\r\n> Perhaps the if-predicates should be `isinstance(out, RegularArray)` and `isinstance(out, ListOffsetArray)`, rather than using the `is_regular` and `is_list` methods, since you want to make assumptions about the specific `Content` subclass that `out` is? You can put an `AssertionError` in the else clause.\r\n\r\nI like being able to avoid the cross-content explicit type checks, but in this case I think that would indeed be clearer.\r\n\r\nIf you're happy with this, please merge!",
  "created_at":"2023-06-03T10:10:38Z",
  "id":1574834071,
  "issue":2488,
  "node_id":"IC_kwDODBCWws5d3g-X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-03T10:20:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2489?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2489](https://app.codecov.io/gh/scikit-hep/awkward/pull/2489?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c594242) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4132e52aa4c681260dfb7333a0cb46a6265c68cb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4132e52) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2489?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.90% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-06-03T10:49:55Z",
  "id":1574854179,
  "issue":2489,
  "node_id":"IC_kwDODBCWws5d3l4j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-03T10:49:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2492?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2492](https://app.codecov.io/gh/scikit-hep/awkward/pull/2492?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0eb13e8) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a96dd6be506cf31a1a6576dee182b99b8fcd7293?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a96dd6b) will **decrease** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n> :exclamation: Current head 0eb13e8 differs from pull request most recent head 40bbc18. Consider uploading reports for the commit 40bbc18 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2492?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2492?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2492?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.58% <100.00%> (+0.16%)` | :arrow_up: |\n\n... and [2 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2492/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-05T15:49:16Z",
  "id":1577051417,
  "issue":2492,
  "node_id":"IC_kwDODBCWws5d_-UZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-05T18:53:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2493?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2493](https://app.codecov.io/gh/scikit-hep/awkward/pull/2493?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9839de3) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/63a01bf02ad501eef9788505b586e269932c1b2b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (63a01bf) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2493?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2493?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.90% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-06-05T18:54:18Z",
  "id":1577299968,
  "issue":2493,
  "node_id":"IC_kwDODBCWws5eA7AA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-05T18:54:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski actually, I've confused myself. The whole point of running `pipx run nox -s prepare -- --headers --signatures --tests` as a primary step is to ensure that most of the \"state\" of the repo is contained in `awkward-cpp`; we run the `build` tool from _inside_ `awkward-cpp` so it makes sense that we don't depend upon external state.\r\n\r\nTherefore, I'm not sure how we ran into that cache invalidation bug. I'll try out some ideas on a PR.",
  "created_at":"2023-06-05T22:53:47Z",
  "id":1577585174,
  "issue":2493,
  "node_id":"IC_kwDODBCWws5eCAoW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-05T22:53:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2494?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2494](https://app.codecov.io/gh/scikit-hep/awkward/pull/2494?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (79c942d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a96dd6be506cf31a1a6576dee182b99b8fcd7293?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a96dd6b) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-06-05T19:27:45Z",
  "id":1577356520,
  "issue":2494,
  "node_id":"IC_kwDODBCWws5eBIzo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-05T19:27:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'll take a look! By the way, you can use `ak.forms.from_dict` instead of `from_json` to avoid the JSON serialisation :)",
  "created_at":"2023-06-05T20:11:24Z",
  "id":1577410829,
  "issue":2495,
  "node_id":"IC_kwDODBCWws5eBWEN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-05T20:11:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2497?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2497](https://app.codecov.io/gh/scikit-hep/awkward/pull/2497?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8db7d72) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/216191a051df0119b1807120c8810ce3a5e478ba?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (216191a) will **increase** coverage by `0.01%`.\n> The diff coverage is `85.71%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2497?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2497?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `88.72% <\u00f8> (-0.17%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpylike.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2497?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `74.08% <\u00f8> (+0.06%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2497?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.27% <75.00%> (+0.46%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_concatenate.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2497?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.21% <91.30%> (-0.62%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-06-05T22:51:26Z",
  "id":1577583451,
  "issue":2497,
  "node_id":"IC_kwDODBCWws5eCANb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-07T21:13:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"FYI I tried this in the full use case (over in the ml_tools PR to coffea) and it works like a charm! Awesome!",
  "created_at":"2023-06-05T23:31:41Z",
  "id":1577685872,
  "issue":2497,
  "node_id":"IC_kwDODBCWws5eCZNw",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":2,
   "total_count":2
  },
  "updated_at":"2023-06-05T23:31:41Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2499?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2499](https://app.codecov.io/gh/scikit-hep/awkward/pull/2499?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3ff753d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/be876a0ae3d78de29a33c635cdcc75315c4b1740?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (be876a0) will **decrease** coverage by `0.03%`.\n> The diff coverage is `68.05%`.\n\n> :exclamation: Current head 3ff753d differs from pull request most recent head 728933a. Consider uploading reports for the commit 728933a to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2499?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/form.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2499?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `80.07% <57.44%> (-4.82%)` | :arrow_down: |\n| [src/awkward/forms/emptyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2499?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `81.08% <75.00%> (-0.61%)` | :arrow_down: |\n| [src/awkward/index.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2499?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `92.02% <81.81%> (+0.35%)` | :arrow_up: |\n| [src/awkward/forms/listoffsetform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2499?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdG9mZnNldGZvcm0ucHk=) | `92.85% <100.00%> (+1.29%)` | :arrow_up: |\n| [src/awkward/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2499?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXRyYWNlci5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n... and [3 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2499/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-05T23:54:59Z",
  "id":1577699371,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eCcgr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-08T14:56:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'm a bit reluctant to further expose `length_one_array`. I noticed an issue the other day, but had yet to get around to it. Your PR reminded me of the problem; there exists a subset of forms for which `length_one_array` is not able to return:\r\n\r\n```pycon\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> buffer = ak.from_numpy(np.zeros((4, 5, 6)))\r\n>>> result = buffer.layout.form.length_one_array(highlevel=False)\r\nTraceback (most recent call last):\r\n  File \"/home/angus/.config/JetBrains/PyCharm2023.1/scratches/scratch_571.py\", line 5, in <module>\r\n    result = buffer.layout.form.length_one_array(highlevel=False)\r\n  File \"/home/angus/Git/awkward/src/awkward/forms/form.py\", line 462, in length_one_array\r\n    return ak.operations.ak_from_buffers._impl(\r\n  File \"/home/angus/Git/awkward/src/awkward/operations/ak_from_buffers.py\", line 146, in _impl\r\n    out = reconstitute(form, length, container, getkey, backend, byteorder, simplify)\r\n  File \"/home/angus/Git/awkward/src/awkward/operations/ak_from_buffers.py\", line 190, in reconstitute\r\n    data = _from_buffer(\r\n  File \"/home/angus/Git/awkward/src/awkward/operations/ak_from_buffers.py\", line 171, in _from_buffer\r\n    array = nplike.frombuffer(buffer, dtype=dtype, count=count)\r\n  File \"/home/angus/Git/awkward/src/awkward/_nplikes/array_module.py\", line 60, in frombuffer\r\n    return self._module.frombuffer(buffer, dtype=dtype, count=count)\r\nValueError: buffer is smaller than requested size\r\n\r\nProcess finished with exit code 1\r\n\r\n```\r\n\r\ni.e., `purelist_regular` arrays of >1 dimension.\r\n\r\nGiven that this is an intrinsic limitation, I wonder whether we should forgo exposing this to L2?",
  "created_at":"2023-06-06T13:02:12Z",
  "id":1578728420,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eGXvk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T13:02:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I must have forgotten about that. Yes, a `RegularArray` can have any `size`, and the buffer that is provided has to allow for those sizes. If we have `RegularArray` inside `RegularArray` (with any nesting), those sizes multiply.\r\n\r\nHow big the buffer needs to be is knowable. I could add a `how_big` helper function to recursively walk over the Form and predict it. Alternatively, we can try to make the array, catch this exception, double the buffer size, and try again (in a loop). It will terminate after logarithmically many steps.\r\n\r\nNevertheless, I'd be happier with a `how_big` helper function. It shouldn't be too complicated, and working through it would be a reminder of whether there are any other issues beyond `RegularArray`. I can't think of any right now.",
  "created_at":"2023-06-06T15:42:47Z",
  "id":1579011800,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eHc7Y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T15:42:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> How big the buffer needs to be is knowable. \r\n\r\nYes, this is true. I can only think of regular arrays for now, and it should be fairly trivial to write. Let's move forward with that idea.\r\n\r\n",
  "created_at":"2023-06-06T15:44:04Z",
  "id":1579013845,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eHdbV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T15:44:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I think I prefer `length_one_if_typetracer`, but for completeness, what about `unary_if_typetracer`?",
  "created_at":"2023-06-06T20:55:05Z",
  "id":1579437499,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eJE27",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T20:55:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"`unary_if_typetracer` doesn't really help. So far, I think the best is still `length_one_if_typetracer`.\r\n\r\nBy the way, I intend to get to `how_big` later today, as well as your requests for review. They're all open tabs.",
  "created_at":"2023-06-06T22:11:40Z",
  "id":1579523363,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eJZ0j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T22:11:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> By the way, I intend to get to how_big later today\r\n\r\nJust to be clear \u2014 I made some commits in this PR that tackle that! Let me know if you want to take a different approach.",
  "created_at":"2023-06-06T22:16:49Z",
  "id":1579528567,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eJbF3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T22:16:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Do you mean `_smallest_zero_buffer_lengths`? It looks good, although it seems like the name should say it's for a length-1 array. I don't understand the \"`zero_buffer`\" in the name. A length-0 array is easy to estimate: only `ListOffsetArray` is going to require a non-zero `Index`, and the largest that `Index` can be is 8 bytes. It's the length-1 case that's trickier.\r\n\r\nThis function only needs to return the maximum of a quantity that is never negative. It seems more straightforward to me to implement that as a reducer with identity `0` instead of an iterator. Then, when `ak.forms.regularform._smallest_zero_buffer_lengths` has to multiply what its content returned by its `size`, it only has to multiply one value; not an iterator of values. (Multiplication by a constant integer `size` is a homomorphism over maximization: $\\mbox{size} \\cdot \\max(x_1, x_2) = \\max(\\mbox{size} \\cdot x_1, \\mbox{size} \\cdot x_2)$. It's enough to multiply the winner of the maximization on `RegularForm.content` by `size`, rather than multiply each contender.)",
  "created_at":"2023-06-06T22:41:39Z",
  "id":1579555451,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eJhp7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T22:41:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Do you mean _smallest_zero_buffer_lengths? It looks good, although it seems like the name should say it's for a length-1 array. I don't understand the \"zero_buffer\" in the name. A length-0 array is easy to estimate: only ListOffsetArray is going to require a non-zero Index, and the largest that Index can be is 8 bytes. It's the length-1 case that's trickier.\r\n\r\nYes, long day ;)\r\n\r\n> This function only needs to return the maximum of a quantity that is never negativ\r\n\r\nYes - I touch on this inline, but essentially, I want to avoid the need to invoke `max` within the recursion, because it frees us up to not worry about `unknown_length` until the top-level",
  "created_at":"2023-06-06T22:43:43Z",
  "id":1579556823,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eJh_X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T22:43:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Maybe call `max_prefer_unknown` within the recursion?",
  "created_at":"2023-06-06T22:49:09Z",
  "id":1579560896,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eJi_A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T22:49:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> max_prefer_unknown\r\n\r\nYes, I just didn't want to propagate this detail via an import & dispatch. But, it's all a bit unclear to me whether the iterator-approach is a solution in search of a problem. Right now with placeholder arrays, unknown lengths, etc, there are things to be figured out about how far into a layout `unknown_length` gets, both for typetracer and non-typetracer.\r\n",
  "created_at":"2023-06-06T22:51:00Z",
  "id":1579562005,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eJjQV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T22:51:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Just to be clear, the size of the buffer only needs to be derived for `length_one_if_typetracer`.\r\n\r\nFor `empty_if_typetracer`, the buffer never needs to be larger than 8 bytes.\r\n\r\nBuffer length for `length_one_if_typetracer` is a maximization over:\r\n\r\n  * `if BitMaskedArray`: 1 and **do not recurse**\r\n  * `if ByteMaskedArray`: 1 and **do not recurse**\r\n  * `if EmptyArray`: raise an error because if you could recurse here, it's unprotected and `length_one_if_typetracer` will be trying to make a length-1 `EmptyArray`\r\n  * `if IndexedArray`: `index.itemsize` and recurse into `self.content`\r\n  * `if IndexedOptionArray`: `index.itemsize` and **do not recurse**\r\n  * `if ListArray`: `starts.itemsize` and recurse into `self.content`\r\n  * `if ListOffsetArray`: `2 * offsets.itemsize` and recurse into `self.content`\r\n  * `if NumpyArray`: `self.itemsize * reduce(operator.mul, self.inner_shape)`\r\n  * `if RecordArray`: maximum of recursing into `self.contents`\r\n  * `if RegularArray`: `self.size` times the result of recursing into `self.content`\r\n  * `if UnionArray`: `index.itemsize` and the result of recursing into `self.contents[0]` (because the only tag will be `0`; `EmptyArray` is never legal in a `UnionArray`)\r\n  * `if UnmaskedArray`: recurse into `content`\r\n\r\nFor `length_one_if_typetracer`, the `container` passed to `from_buffers` will need to arrange for the `IndexedOptionArrays` to get `-1` instead of `0` (i.e. almost all buffers get `b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"` but `IndexedOptionArrays` get `b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"`). This is because, if you have an `EmptyArray`, it is very likely inside of an option-type array of all `None`. Similarly, `BitMaskedArray` and `ByteMaskedArray` get `b\"\\x00\"` if `valid_when is True` and `b\"\\xff\"` if `valid_when is False`, so that they produce `None` as well.\r\n\r\nBuffers can be longer than they need to be (i.e. `b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"` is just as good as `b\"\\xff\"`).\r\n\r\nIt would probably be easiest to make the recursive function that finds the buffer size also make the buffers, so that it can give `BitMaskedArrays`, `ByteMaskedArrays`, and `IndexedOptionArrays` the appropriate choice of zeros or ones.",
  "created_at":"2023-06-06T23:01:04Z",
  "id":1579572174,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eJlvO",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-06-06T23:20:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"On names: perhaps, given the `empty` vs. `length_one`. Singleton doesn't make sense on reading. What about `length_zero_if_typetracer` and `length_one_if_typetracer`? To me, at least, it is then crystal clear what's going on.\r\n\r\nCan slap a deprecation on `empty_if_typetracer` and change downstream code.",
  "created_at":"2023-06-07T23:11:09Z",
  "id":1581628446,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eRbwe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-07T23:11:48Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"> Can slap a deprecation on `empty_if_typetracer` and change downstream code.\r\n\r\nThis is a good suggestion. Then `length_zero_if_typetracer` and `length_one_if_typetracer` are symmetric. The `empty_if_typetracer` function can raise a warning and then pass to `length_zero_if_typetracer`.\r\n\r\n@agoose77, should the name-change be in this PR?",
  "created_at":"2023-06-07T23:54:26Z",
  "id":1581666077,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eRk8d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-07T23:54:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @agoose77, should the name-change be in this PR?\r\n\r\nYep, that seems like the right decision",
  "created_at":"2023-06-08T00:02:00Z",
  "id":1581671269,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eRmNl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-08T00:02:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77 I've added the name change and deprecation warning. It's also in the [wiki](https://github.com/scikit-hep/awkward/wiki#api-breaking-changes-after-20).",
  "created_at":"2023-06-08T14:56:12Z",
  "id":1582744545,
  "issue":2499,
  "node_id":"IC_kwDODBCWws5eVsPh",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-06-08T14:56:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2500?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2500](https://app.codecov.io/gh/scikit-hep/awkward/pull/2500?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a73a088) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/21c8d5386b8906ef92083657deaf6e388ea6e070?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (21c8d53) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-06-06T01:07:35Z",
  "id":1577748864,
  "issue":2500,
  "node_id":"IC_kwDODBCWws5eComA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-06T01:07:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2503?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2503](https://app.codecov.io/gh/scikit-hep/awkward/pull/2503?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (89b64a4) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/21c8d5386b8906ef92083657deaf6e388ea6e070?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (21c8d53) will **increase** coverage by `0.10%`.\n> The diff coverage is `88.88%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2503?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/cling.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2503?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `25.71% <0.00%> (\u00f8)` | |\n| [src/awkward/forms/emptyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2503?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `82.95% <93.75%> (+1.26%)` | :arrow_up: |\n| [src/awkward/\\_connect/numba/arrayview.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2503?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.35% <100.00%> (\u00f8)` | |\n\n... and [21 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2503/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-06T20:08:26Z",
  "id":1579376593,
  "issue":2503,
  "node_id":"IC_kwDODBCWws5eI1_R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-09T09:43:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Following from @jpivarski's observation above, I realised that I hadn't noticed our parameter-based datetime handling. We had a discussion on Slack, and I think we know that `__units__` is likely the name that #2468 will use for registry-based units. This is distinct datetime units, which are a different subset.\r\n\r\nI'm interested in the idea that we could change the primitive to be \"datetime64\", and add a special \"__datetime_unit__\" parameter to store this state. `NumpyArray` would enforce the presence of such a parameter for the given dtype.\r\n\r\nThe benefits of this suggestion are that we can simplify our primitive strings, and avoid the need to parse the \"unit\" information, by placing it in a structural location (parameters)\r\n\r\nThis PR is on hold until we firmly resolve what to do with the two implementations of time-unit handling.",
  "created_at":"2023-06-07T01:21:44Z",
  "id":1579701404,
  "issue":2503,
  "node_id":"IC_kwDODBCWws5eKFSc",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-06-07T01:22:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'm planning upon deprecating the time-unit logic in a separate PR. Is this good to go?\r\n\r\nEDIT: you approved already, so I'm happy to merge.",
  "created_at":"2023-06-09T09:28:07Z",
  "id":1584265336,
  "issue":2503,
  "node_id":"IC_kwDODBCWws5ebfh4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-09T12:13:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2504?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2504](https://app.codecov.io/gh/scikit-hep/awkward/pull/2504?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dd5a007) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/5222b9588ca9fb1e0f926db78835e4df2078e774?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5222b95) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2504?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends/backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2504?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2JhY2tlbmQucHk=) | `86.66% <\u00f8> (-0.29%)` | :arrow_down: |\n| [src/awkward/\\_kernels.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2504?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2tlcm5lbHMucHk=) | `66.95% <\u00f8> (-0.57%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-06-06T23:59:21Z",
  "id":1579617808,
  "issue":2504,
  "node_id":"IC_kwDODBCWws5eJw4Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-09T09:32:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"On hold until after an `awkward` release, because it's blocking an `uproot` release.",
  "created_at":"2023-06-07T14:30:42Z",
  "id":1580948826,
  "issue":2504,
  "node_id":"IC_kwDODBCWws5eO11a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-07T14:30:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Do you have a tool that identifies dead C++ code?\r\n\r\nAlas no, I erred in favour of the biological computer living upstairs ;) ",
  "created_at":"2023-06-09T13:58:54Z",
  "id":1584622295,
  "issue":2504,
  "node_id":"IC_kwDODBCWws5ec2rX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-09T13:58:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2505](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (35fb169) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/7342b7942710bb2e320f9377bf90d07f6133bbe2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7342b79) will **increase** coverage by `0.08%`.\n> The diff coverage is `92.03%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.65% <73.33%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.90% <76.47%> (\u00f8)` | |\n| [src/awkward/\\_backends/backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2JhY2tlbmQucHk=) | `88.37% <87.50%> (-0.92%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `85.09% <87.50%> (+0.02%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.59% <93.10%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.07% <93.33%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.09% <95.45%> (\u00f8)` | |\n| [src/awkward/\\_reducers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3JlZHVjZXJzLnB5) | `94.20% <97.50%> (+5.43%)` | :arrow_up: |\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.93% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.03% <100.00%> (+1.32%)` | :arrow_up: |\n| ... and [4 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2505?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-06-07T02:02:30Z",
  "id":1579746928,
  "issue":2505,
  "node_id":"IC_kwDODBCWws5eKQZw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-07T02:02:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2506](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b3e907c) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/33750f362b0398b4d30936a8572cf1c77faa1edf?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (33750f3) will **increase** coverage by `0.01%`.\n> The diff coverage is `90.53%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL3R5cGV0cmFjZXIucHk=) | `78.12% <\u00f8> (-21.88%)` | :arrow_down: |\n| [src/awkward/\\_backends/backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2JhY2tlbmQucHk=) | `86.95% <88.88%> (-1.42%)` | :arrow_down: |\n| [src/awkward/\\_connect/jax/reducers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3JlZHVjZXJzLnB5) | `86.20% <89.31%> (+3.93%)` | :arrow_up: |\n| [src/awkward/\\_reducers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3JlZHVjZXJzLnB5) | `94.98% <94.73%> (+0.77%)` | :arrow_up: |\n| [src/awkward/\\_backends/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2pheC5weQ==) | `100.00% <100.00%> (+2.63%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `94.50% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.33% <100.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `75.81% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.09% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-06-07T02:15:25Z",
  "id":1579763794,
  "issue":2506,
  "node_id":"IC_kwDODBCWws5eKUhS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-07T20:02:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> but it makes sense if it's a distinction between L3 and L4.\r\n\r\nexactly that!",
  "created_at":"2023-06-07T20:08:51Z",
  "id":1581439544,
  "issue":2506,
  "node_id":"IC_kwDODBCWws5eQto4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-07T20:08:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2507?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2507](https://app.codecov.io/gh/scikit-hep/awkward/pull/2507?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3faa298) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4a980df838863ccd8b849f06d216af8e28af0572?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4a980df) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2507?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/jax/reducers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2507?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3JlZHVjZXJzLnB5) | `86.20% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_reducers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2507?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3JlZHVjZXJzLnB5) | `97.18% <100.00%> (+0.11%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2507?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `90.99% <100.00%> (-0.11%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-06-07T11:38:58Z",
  "id":1580615164,
  "issue":2507,
  "node_id":"IC_kwDODBCWws5eNkX8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-09T12:59:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2509?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2509](https://app.codecov.io/gh/scikit-hep/awkward/pull/2509?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (def60d2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/acaaa1bc3038721ad22a3e66f4227387e8f85aca?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (acaaa1b) will **increase** coverage by `0.00%`.\n> The diff coverage is `98.73%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2509?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_reducers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2509?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3JlZHVjZXJzLnB5) | `97.07% <98.73%> (+2.09%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-06-07T13:19:38Z",
  "id":1580805171,
  "issue":2509,
  "node_id":"IC_kwDODBCWws5eOSwz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-07T20:39:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Actually, although this causes problems if the kernel is used in a _non_ local context, it is acceptable for locally-derived parents. \r\n\r\nFor the local reducers, the reduction does not require re-ordering of the contents, so the content is not carryd and thus the parents will be generated in-order. Whereas, non-local reducers will require a carry, so the order of parents is only required to agree with the order of `nextcarry`.\r\n\r\nFor posterity, the reason for (locally contiguous) non-monotonically increasing parents is that the non-local kernels generating them typically do something like\r\n```cpp\r\nnextparents[k] = parents[i]*size + offset;\r\n```\r\nIn the presence of non-zero `parents`, this kernel cannot generate monotonically increasing nextparents in a single pass. \r\n\r\nTherefore, this issue can be closed, and the new working description of reduction is:\r\n\r\n- Local reducers (above the reduction axis) require monotonically increasing, contiguous parents\r\n- Nonlocal reducers (at or below the reduction axis) require locally contiguous parents\r\n\r\nNote that the requirement for contiguousness is a design decision; it is not required in order to implement the necessary kernels for reduction, but it does make them much simpler.\r\n\r\n",
  "created_at":"2023-06-08T11:44:05Z",
  "id":1582431638,
  "issue":2510,
  "node_id":"IC_kwDODBCWws5eUf2W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-08T11:44:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2511?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2511](https://app.codecov.io/gh/scikit-hep/awkward/pull/2511?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9a06563) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/7342b7942710bb2e320f9377bf90d07f6133bbe2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7342b79) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-06-07T18:06:48Z",
  "id":1581284551,
  "issue":2511,
  "node_id":"IC_kwDODBCWws5eQHzH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-07T18:06:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is a Python detail unique to `KeyError` (see [BPO](https://bugs.python.org/issue2651)) that we can't really work around. In fact, it's one of the motivations for the __note__ work we added in 2.1.x!\r\n\r\nWe could rewrite `KeyError`s by generating custom subclasses, but this would be surprising to users, I think. I'm not sure that there's a good way to solve this besides _not_ decorating `KeyError`s on <3.11.",
  "created_at":"2023-06-08T00:01:27Z",
  "id":1581670865,
  "issue":2513,
  "node_id":"IC_kwDODBCWws5eRmHR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-08T00:01:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yikes! Then as a first step, let's not decorate `KeyError` (i.e. check `type(err) is KeyError`, not `isinstance(err, KeyError)`) and over time introduce subclasses for `KeyError` so that we can have decorated errors.",
  "created_at":"2023-06-08T13:08:52Z",
  "id":1582552728,
  "issue":2513,
  "node_id":"IC_kwDODBCWws5eU9aY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-08T13:08:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"No, better idea: catch `KeyError` and re-raise it (pre-3.11) as a subclass that isn't much different from the builtin `KeyError` (maybe even with the name `KeyError`, but in our own module) but has the `__str__` that we want, so that it displays properly. That would take care of the issue once and for all, without us having to introduce specialized `KeyErrors` throughout the codebase.",
  "created_at":"2023-06-08T13:11:10Z",
  "id":1582558188,
  "issue":2513,
  "node_id":"IC_kwDODBCWws5eU-vs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-08T13:11:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> No, better idea: catch `KeyError` and re-raise it (pre-3.11)\r\n\r\nYes, we can just re-raise `KeyError`s in places that we anticipate them, and plan to remove this workaround (and exception class) by 3.11.\r\n\r\nIn general, it's better not to implement custom exception types unless they're needed (in this case, we need them). Therefore, I think we should _not_ make these error types public, so that users don't try and catch them. We don't export any of our error types _yet_ (that was anticipated as a need for dask-awkward, but I don't think we're catching it yet).",
  "created_at":"2023-06-08T13:12:16Z",
  "id":1582559776,
  "issue":2513,
  "node_id":"IC_kwDODBCWws5eU_Ig",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-08T13:12:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2514?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2514](https://app.codecov.io/gh/scikit-hep/awkward/pull/2514?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c7d0b8d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/645c8177b3a21aba15cee31276ec4f0dc426a078?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (645c817) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2514?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2514?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2514?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `85.15% <100.00%> (+0.05%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-06-09T08:49:40Z",
  "id":1584209912,
  "issue":2514,
  "node_id":"IC_kwDODBCWws5ebR_4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-10T16:36:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"What do we think should be the datashape for `complex128` _with_ parameters?\r\n\r\n1. `complex[float64, foo=bar]`\r\n2. `complex[float64][foo=bar]`\r\n\r\nI think (1) without considering the ease of implementation.",
  "created_at":"2023-06-22T17:41:22Z",
  "id":1603069324,
  "issue":2516,
  "node_id":"IC_kwDODBCWws5fjOWM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T17:41:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'd also prefer (1) aesthetically and because I think it's more in keeping with Datashape style.",
  "created_at":"2023-06-22T20:54:26Z",
  "id":1603301723,
  "issue":2516,
  "node_id":"IC_kwDODBCWws5fkHFb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T20:54:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2518?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2518](https://app.codecov.io/gh/scikit-hep/awkward/pull/2518?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0e0e584) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/645c8177b3a21aba15cee31276ec4f0dc426a078?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (645c817) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2518?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/numpyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2518?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbnVtcHlmb3JtLnB5) | `96.63% <100.00%> (+0.14%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-06-09T12:56:00Z",
  "id":1584533474,
  "issue":2518,
  "node_id":"IC_kwDODBCWws5ecg_i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-10T16:45:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2519?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2519](https://app.codecov.io/gh/scikit-hep/awkward/pull/2519?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3483e2b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/60114c54f1b447884ba51210239ee8999d326aae?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (60114c5) will **decrease** coverage by `0.01%`.\n> The diff coverage is `66.66%`.\n\n> :exclamation: Current head 3483e2b differs from pull request most recent head e59cb86. Consider uploading reports for the commit e59cb86 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2519?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_errors.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2519?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `80.27% <66.66%> (-0.59%)` | :arrow_down: |\n\n... and [3 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2519/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-09T14:49:05Z",
  "id":1584707818,
  "issue":2519,
  "node_id":"IC_kwDODBCWws5edLjq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-14T18:30:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I made a counter-edit to indicate what I meant. If we're saying its name is `KeyError`, then we should let its name be `KeyError`; module encapsulation is for making these sorts of same-name-but-distinct references.\r\n\r\nIt means that we can never use unqualified `KeyError` in the text of this file\u2014it always has to be `builtins.KeyError`\u2014but that's normal. Uproot's reading.py has to do that with the function named `open`, and ak_zip.py has to do that with the function named `zip`.",
  "created_at":"2023-06-14T18:31:29Z",
  "id":1591788066,
  "issue":2519,
  "node_id":"IC_kwDODBCWws5e4MIi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-14T18:31:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2520?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2520](https://app.codecov.io/gh/scikit-hep/awkward/pull/2520?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0451c78) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/60114c54f1b447884ba51210239ee8999d326aae?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (60114c5) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2520?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2520?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.22% <\u00f8> (-0.06%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-06-09T22:10:22Z",
  "id":1585181103,
  "issue":2520,
  "node_id":"IC_kwDODBCWws5ee_Gv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-09T22:10:22Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It's late here, but at face value, we should touch data in a complex slice - this would fail at runtime if these data were bogus.\n\nIt might be that we end up in this path unnecessarily, or that it represents a case that would actually require touching data.\n\nThe reproducer you showed looks like it should touch data, because it assigns in place, which would broadcast. ",
  "created_at":"2023-06-09T23:35:59Z",
  "id":1585278253,
  "issue":2520,
  "node_id":"IC_kwDODBCWws5efW0t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-09T23:37:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"No worries on it being late, it's also Friday.\r\n\r\nI can confirm that the built and optimized task graph with this change applied runs all the way through and has touched all and only the correct data. \r\n\r\n~7000 layer task graph, ~10k events. \r\n\r\nWithout this patch it tries to load about 2-3x more columns than are needed. \r\n\r\nThe reproducer shouldn't require loading \"MET_pt\" to calculate only \"Muon_pt\".\r\n\r\nConclusion - something is fishy with these lines. And then fishier still since \"MET_pt\" doesn't get optimized away even with this patch in place for the repro.",
  "created_at":"2023-06-09T23:57:13Z",
  "id":1585291807,
  "issue":2520,
  "node_id":"IC_kwDODBCWws5efaIf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-09T23:57:13Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"After sleeping on it and then thinking more - this is a separate issue from the dask_awkward one.\r\n\r\n- the complex example has been running fine since April, touching exactly the correct columns\r\n- these two lines drastically alter the touching behavior, aggressively expanding the number of columns touched \r\n  - when we already know the set of columns pre awkward 2.2.2 was enough\r\n  \r\n The dask_awkward issue as more to do `dak.necessary_columns(uproot_dask_array.field)` being somehow affected by `uproot_dask_array[\"newfield\"] = uproot_dask_array.unrelated_field` where it is obvious that you need not consider touching `unrelated_field` to `dask.compute(uproot_dask_array.field)`.",
  "created_at":"2023-06-10T12:11:22Z",
  "id":1585639513,
  "issue":2520,
  "node_id":"IC_kwDODBCWws5egvBZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-10T12:12:02Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've looked at the example with a fresh pair of eyes, and I believe that this \"bug\" is deliberate. To be clear, this is not the intended end-user experience, and I'll expand upon this point. What you're seeing in dask-contrib/dask-awkward#280 is an example of https://github.com/dask-contrib/dask-awkward/pull/184#issuecomment-1573437965.\r\n\r\n\r\nBy definition, `with_field` _should_ touch all the offset buffers down to the leaves, because it uses broadcasting. This means that `Array.__setitem__` can actually change the structure of the container array:\r\n```pycon\r\n>>> array = ak.to_regular(ak.zip({'x':[[1],[2],[3],[4]]}))\r\n>>> array\r\n<Array [[{x: 1}], [{x: 2}], [{...}], [{x: 4}]] type='4 * 1 * {x: int64}'>\r\n>>> array['y'] = [[1,2,3],[4,5,6],[7], []]\r\n>>> array\r\n<Array [[{x: 1, y: 1}, {...}, {...}], ..., []] type='4 * var * {x: int64, y...'>\r\n```\r\n\r\nI asked on Slack whether you were using nanoevents. In fact, I should have been more precise and asked \"Are you using nanoevents _remapping_?\". I would expect nano-events arrays that _do not_ have the nanoevents remapping to have this problem. Whilst we know that, due to the way that the data were serialised, `MET_xxx` and `Muon_xxx` have the same offsets, at read-time they are considered different arrays with distinct `form-keys`. As such, we must touch both of the arrays (via `column.to_list`) to ensure that the offsets are included. The benefit of reading these as remapped nano-events is that the `form_keys` can be such that the `MET` and `Muon` are sub-branches of a root node with common offsets. That's why scikit-hep/uproot5#901 is important; it allows us to encode this additional information into the structure.\r\n\r\nThis is effectively a limitation of how column optimisation is done in dask-awkward; it's an optimisation over structure, rather than low-level buffers. This is not a bad thing, just a statement of how things work!",
  "created_at":"2023-06-10T12:13:39Z",
  "id":1585640851,
  "issue":2520,
  "node_id":"IC_kwDODBCWws5egvWT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-10T12:14:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Here's the more complex test I am talking about https://github.com/dask-contrib/dask-awkward/files/11710067/complex_repro.zip. Try this with and without patch (and then also with awkward 2.2.1 and dask_awkward 2023.6.0) and you will be able to reproduce my claims.",
  "created_at":"2023-06-10T12:14:16Z",
  "id":1585641290,
  "issue":2520,
  "node_id":"IC_kwDODBCWws5egvdK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-10T12:14:16Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"To answer your question: I can cause the bug in dask_awkward *without* nanoevents remapping.\r\n\r\nThis over-greedy columns stuff here I can't figure out how to make a non-complex reproducer.",
  "created_at":"2023-06-10T12:16:13Z",
  "id":1585642767,
  "issue":2520,
  "node_id":"IC_kwDODBCWws5egv0P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-10T12:16:13Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"And I agree with you on with_field for typetracers and how that touches in a single statement - but necessary_columns / dask.compute should be fed only the information they need to calculate the exact output requested. I have a feeling this one will smooth out as time goes by and we evolve in the next couple weeks. For sure, the optimization over structure rather than low level knowledge of inputs, which we are about get, will yield a better answer.\r\n\r\nWhatever the underlying issue is that's in this PR, which I think is separate from the dask_awkward issue (they just appeared related at first), is of a slightly different flavor.",
  "created_at":"2023-06-10T12:20:19Z",
  "id":1585645221,
  "issue":2520,
  "node_id":"IC_kwDODBCWws5egwal",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-10T12:28:24Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I replied to @lgray on Slack, but I'll repost it here for posterity, so that others can track why this PR is being closed.\r\n\r\n@lgray I'm not fully tracking the notion that there are two issues here. Let me restate what I think is going on, and you can hopefully tell me if we're on the same page.\r\n\r\n\r\nI would expect that existing workflows using PyPI releases of `awkward`, `uproot`, and the latest `main` of `dask-awkward` will lead to increased touching such that workflows become slower to execute. This is because;\r\n* https://github.com/scikit-hep/awkward/commit/19f62aaac1f77c8d8096730f56dead782260d400 fixes a long-standing bug in which advanced slices (that evaluate pointers in NumPy) weren't considered as touching operations\r\n* `ak.with_field` et al. use broadcasting, which performs these kinds of index operations\r\n* awkward-dask assumes that only columns of the same parentage have the same offsets, i.e. contents of the same `RecordArray`. This is not how Awkward actually works; buffers (offsets) can be re-used across unrelated layouts.\r\n* `uproot.dask` returns arrays of type `{field1: var * ..., field2: var * ..., field3: var * ...}` instead of `var * {field1: ..., field2: ..., field3: ...}`, meaning that there's insufficient information to know that the offsets of all fields are identically.\r\n\r\nThe solution is therefore to encode information that offsets are shared. Arrays with no shared parentage like those returned from `uproot.dask` need some auxiliary information that encodes this, e.g. https://github.com/scikit-hep/uproot5/pull/900:\r\n* nanoevents can rebuild the form such that the type is `var * {field1: ..., field2: ..., field3: ...}`, meaning that the optimisation logic can properly detect this case. Although the broadcasting in e.g. `with_field` still touches the offsets all the way to the record layout, it transpires that they're the same form key, and the non-read field _itself_ is not read.\r\n\r\nWithout the change that fixed touching and caused this new behaviour, results would vary depending upon whether executed via dask or awkward, which would be bad.",
  "created_at":"2023-06-10T16:32:30Z",
  "id":1585729075,
  "issue":2520,
  "node_id":"IC_kwDODBCWws5ehE4z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-10T16:32:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2521?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2521](https://app.codecov.io/gh/scikit-hep/awkward/pull/2521?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3a3d144) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/c6b109585559118a7b1184e4eb8463eafdbf27ed?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c6b1095) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-06-12T18:12:56Z",
  "id":1587835458,
  "issue":2521,
  "node_id":"IC_kwDODBCWws5epHJC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-16T12:17:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2522?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2522](https://app.codecov.io/gh/scikit-hep/awkward/pull/2522?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0451553) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/1e65496286aee16d6788ba1a84c03c3fbed414c1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1e65496) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-06-13T01:53:51Z",
  "id":1588395513,
  "issue":2522,
  "node_id":"IC_kwDODBCWws5erP35",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-13T01:53:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Improvements: this function isn't going through the standard `ErrorContext`, so the error message contains text about the fact that this is happening in `ak.to_parquet` and what the correct order of arguments ought to be. These tidbits wouldn't be necessary if there was an error context.\r\n\r\nAlso, only strings for `destination`? That's what the docstring says. What about accepting a `pathlib.Path`? [pq.ParquetWriter](https://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetWriter.html) accepts a file-like object\u2014we could in principle pass on that capability, but we'd have to bypass a lot of fsspec to do it.",
  "created_at":"2023-06-13T17:18:35Z",
  "id":1589723287,
  "issue":2523,
  "node_id":"IC_kwDODBCWws5ewUCX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-13T17:18:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2523?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2523](https://app.codecov.io/gh/scikit-hep/awkward/pull/2523?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5d3ea7e) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e627d4a9c1d7ea07cf9e3f607410fa6848db0b41?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e627d4a) will **decrease** coverage by `0.01%`.\n> The diff coverage is `60.00%`.\n\n> :exclamation: Current head 5d3ea7e differs from pull request most recent head faac18c. Consider uploading reports for the commit faac18c to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2523?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_to\\_parquet.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2523?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19wYXJxdWV0LnB5) | `52.88% <60.00%> (+0.35%)` | :arrow_up: |\n\n... and [3 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2523/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-13T17:26:41Z",
  "id":1589733501,
  "issue":2523,
  "node_id":"IC_kwDODBCWws5ewWh9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-15T16:08:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Just poking around and saw this, so feel free to disregard - although it's just a nice quality of life thing, it would be nice to have support for Path. Every time I use `to_parquet`, I forget to convert from Path, so if it's not a big burden, it would be a helpful addition",
  "created_at":"2023-06-13T21:08:52Z",
  "id":1590030258,
  "issue":2523,
  "node_id":"IC_kwDODBCWws5exe-y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-13T21:08:52Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"MEMBER",
  "body":"That one's easy. Allowing file-like objects to pass through to the `ParquetWriter`, to take advantage of its ability to use them, would be harder.",
  "created_at":"2023-06-13T21:37:35Z",
  "id":1590057561,
  "issue":2523,
  "node_id":"IC_kwDODBCWws5exlpZ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-06-13T21:37:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2524?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2524](https://app.codecov.io/gh/scikit-hep/awkward/pull/2524?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f342fb4) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/1e65496286aee16d6788ba1a84c03c3fbed414c1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1e65496) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2524?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2524?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.59% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2524?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.85% <100.00%> (+0.19%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-06-14T16:45:20Z",
  "id":1591634869,
  "issue":2524,
  "node_id":"IC_kwDODBCWws5e3mu1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-14T17:01:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2525](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c5cd53e) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f928ba2c3319d69c78b9bfc9e409581e6391e47f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f928ba2) will **increase** coverage by `0.20%`.\n> The diff coverage is `92.48%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_mean.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `82.22% <57.14%> (+4.44%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_std.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdGQucHk=) | `85.36% <57.14%> (+4.87%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_var.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha192YXIucHk=) | `83.33% <57.14%> (+4.16%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.82% <60.00%> (+1.28%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_from\\_avro\\_file.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2F2cm9fZmlsZS5weQ==) | `80.00% <63.63%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_arrow\\_schema.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2Fycm93X3NjaGVtYS5weQ==) | `70.00% <66.66%> (+10.00%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_from\\_cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2N1cHkucHk=) | `83.33% <66.66%> (+16.66%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `33.33% <66.66%> (+7.24%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `45.45% <66.66%> (+7.35%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `58.33% <66.66%> (+12.87%)` | :arrow_up: |\n| ... and [94 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2525?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-06-15T16:13:19Z",
  "id":1593359708,
  "issue":2525,
  "node_id":"IC_kwDODBCWws5e-L1c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-15T19:54:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've changed a couple of the error messages so that the keyword argument names match the signatures (in places where we invoke the context manager manually), and made some of these cases render the `self` argument by position (for readability).",
  "created_at":"2023-06-15T19:11:01Z",
  "id":1593589879,
  "issue":2525,
  "node_id":"IC_kwDODBCWws5e_EB3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-15T19:11:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2527?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2527](https://app.codecov.io/gh/scikit-hep/awkward/pull/2527?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (85a1fb0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f928ba2c3319d69c78b9bfc9e409581e6391e47f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f928ba2) will **decrease** coverage by `0.04%`.\n> The diff coverage is `90.90%`.\n\n> :exclamation: Current head 85a1fb0 differs from pull request most recent head 92e1e36. Consider uploading reports for the commit 92e1e36 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2527?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2527?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.03% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2527?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.59% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2527?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.76% <90.90%> (+0.09%)` | :arrow_up: |\n\n... and [3 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2527/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-16T11:06:38Z",
  "id":1594506518,
  "issue":2527,
  "node_id":"IC_kwDODBCWws5fCj0W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-16T11:09:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2528](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2ffa297) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f818083308721a5756744f9507620b3d61afe433?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f818083) will **increase** coverage by `0.03%`.\n> The diff coverage is `87.20%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `90.00% <\u00f8> (-1.08%)` | :arrow_down: |\n| [src/awkward/behaviors/string.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `74.49% <42.85%> (-1.90%)` | :arrow_down: |\n| [src/awkward/\\_operators.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX29wZXJhdG9ycy5weQ==) | `94.82% <94.82%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.41% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `94.53% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/\\_connect/pyarrow.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `91.22% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `65.45% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.65% <100.00%> (+0.37%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.82% <100.00%> (\u00f8)` | |\n| [src/awkward/numba.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEucHk=) | `97.01% <100.00%> (+0.02%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-06-16T12:06:06Z",
  "id":1594573988,
  "issue":2528,
  "node_id":"IC_kwDODBCWws5fC0Sk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T12:36:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The `dispatcher` mechanism is something we might want to use for the high-level array formatting, too. Right now we don't do anything special to format containers-of-arrays, and we detect these using a recursive (depth-limited) search. For now, I'm not going to think about it :)",
  "created_at":"2023-06-19T13:24:34Z",
  "id":1597188968,
  "issue":2530,
  "node_id":"IC_kwDODBCWws5fMyto",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-19T13:24:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I also noticed a couple of places where L3 functions were L2 and being decorated as high-level functions. This PR corrects those.",
  "created_at":"2023-06-19T13:25:14Z",
  "id":1597189945,
  "issue":2530,
  "node_id":"IC_kwDODBCWws5fMy85",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-19T13:25:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"These test failures are odd. I can't reproduce them locally, and I've not touched any of the code that I'd expect to trigger them.",
  "created_at":"2023-06-19T13:42:12Z",
  "id":1597216875,
  "issue":2530,
  "node_id":"IC_kwDODBCWws5fM5hr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-19T13:42:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Do the tests running directly on `main` work?",
  "created_at":"2023-06-19T13:48:38Z",
  "id":1597227400,
  "issue":2530,
  "node_id":"IC_kwDODBCWws5fM8GI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-19T13:48:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Strangely not: https://github.com/scikit-hep/awkward/actions/runs/5312769508/jobs/9617751770. But my test suite passes locally, and these were passing historically. \r\n\r\nThe codecov workflow _is_ passing on main. This workflow does run a different set of steps, so it's possible that a dependency is at fault. I think I'll try and spin up a clean environment image to test in.",
  "created_at":"2023-06-19T14:18:59Z",
  "id":1597277875,
  "issue":2530,
  "node_id":"IC_kwDODBCWws5fNIaz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-20T08:24:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2530](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (325aa6d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f818083308721a5756744f9507620b3d61afe433?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f818083) will **increase** coverage by `0.16%`.\n> The diff coverage is `96.89%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `90.00% <\u00f8> (-1.08%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `45.83% <75.00%> (+0.37%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `57.14% <75.00%> (-1.20%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_rdataframe.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZGF0YWZyYW1lLnB5) | `35.71% <75.00%> (+1.09%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_std.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdGQucHk=) | `82.97% <81.81%> (-2.39%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_var.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha192YXIucHk=) | `81.48% <81.81%> (-1.86%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argmax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `88.23% <85.71%> (-1.77%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argmin.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `88.23% <85.71%> (-1.77%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_max.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXgucHk=) | `88.23% <85.71%> (-1.77%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_min.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19taW4ucHk=) | `88.23% <85.71%> (-1.77%)` | :arrow_down: |\n| ... and [102 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2530/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-21T11:41:57Z",
  "id":1600682467,
  "issue":2530,
  "node_id":"IC_kwDODBCWws5faHnj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T11:41:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closing in favour of #2531",
  "created_at":"2023-06-22T14:24:00Z",
  "id":1602734543,
  "issue":2530,
  "node_id":"IC_kwDODBCWws5fh8nP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T14:24:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, I don't think so: now every `ak.*` function is both a function _and_ a generator? An object being iterable is a user-visible property, and who knows what kind of confusing situation someone might get into by having this very surprising property on all of our functions. Moreover, the reason/rationale isn't obviously related to the purpose you're trying to achieve (i.e. it's purely technical).\r\n\r\nSince this is an alternative, let's go with the original.",
  "created_at":"2023-06-20T19:18:28Z",
  "id":1599372631,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fVH1X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-20T19:18:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> [N]ow every ak.* function is both a function and a generator? An object being iterable is a user-visible property, and who knows what kind of confusing situation someone might get into by having this very surprising property on all of our functions. \r\n\r\nUsers won't see this unless they go digging into the source code; the decorator ensures that the function behaves like a function.\r\n\r\n> Moreover, the reason/rationale isn't obviously related to the purpose you're trying to achieve (i.e. it's purely technical).\r\n\r\nHmm, I'm not sure I agree. We're constrained by several factors here: readability, code duplication, and ultimately the language features at our disposal. In this context, generators let us exit the execution of the function, and pass control flow to the caller. We can otherwise do this with separate functions (see #2530), a gnarly explicit dispatch mechanism (see below), or something like a closure (see below also!)\r\n\r\n### Callback\r\n```python\r\nclass DispatchTarget:\r\n    def __init__(self, target):\r\n        self.target = target\r\n\r\ndef maybe_dispatch(*arrays):\r\n    for array in arrays:\r\n        if hasattr(array, '__awkward_function__'):\r\n            return DispatchTarget(array.__awkward_function__)\r\n\r\ndef dispatched(func):\r\n    def wrapper(*args, **kwargs):\r\n        dispatch_or_result = func(*args, **kwargs)\r\n        if isinstance(dispatch_or_result, DispatchTarget):\r\n            return dispatch_or_result.target(wrapper, args, kwargs)\r\n        else:\r\n            return dispatch_or_result\r\n    return wrapper\r\n```\r\nthat yields\r\n```python\r\n@dispatched\r\ndef any(array, ...):\r\n\tdispatch = maybe_dispatch(array)\r\n    if dispatch is not None:\r\n        return dispatch\r\n    else:\r\n        return ...\r\n```\r\n\r\nThis gets messier if there are multiple arguments that need to be handled separately.\r\n\r\nI find the generator-based approach simpler:\r\n```python\r\n@dispatched\r\ndef any(array, ...):\r\n    yield array\r\n```\r\n\r\n### Closure\r\n```python\r\ndef dispatched(func):\r\n    def wrapper(*args, **kwargs):\r\n        impl, *arrays = func(*args, **kwargs)\r\n        for array in arrays:\r\n            if hasattr(array, '__awkward_function__'):\r\n                return array.__awkward_function__(\r\n                    wrapper, args, kwargs\r\n                )\r\n        return impl()\r\n    return wrapper\r\n```\r\n```python\r\n@dispatched\r\ndef any(array, ...):\r\n    def impl():\r\n        ...\r\n    return impl, array\r\n```",
  "created_at":"2023-06-20T21:18:31Z",
  "id":1599569250,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fV31i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-20T21:22:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> the decorator ensures that the function behaves like a function.\r\n\r\nOh, I didn't recognize that. In that case, what I said after that point is a moot point.",
  "created_at":"2023-06-21T00:20:21Z",
  "id":1599766180,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fWn6k",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-06-21T00:20:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2531](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (10785bb) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2e4d3d93ced5de7dba724afb086d597c5e24d6b5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2e4d3d9) will **increase** coverage by `0.03%`.\n> The diff coverage is `95.72%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `43.47% <66.66%> (-1.98%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `53.84% <66.66%> (-4.49%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_rdataframe.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZGF0YWZyYW1lLnB5) | `33.33% <66.66%> (-1.29%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argmax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `87.50% <80.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argmin.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `87.50% <80.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_max.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXgucHk=) | `87.50% <80.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_min.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19taW4ucHk=) | `87.50% <80.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_prod.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wcm9kLnB5) | `87.50% <80.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_sum.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdW0ucHk=) | `87.50% <80.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Rpc3BhdGNoLnB5) | `84.37% <84.37%> (\u00f8)` | |\n| ... and [93 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2531/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-21T11:38:29Z",
  "id":1600677504,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5faGaA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T15:04:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@douglasdavis if we push ahead with this PR, then `dask-awkward` will be able to define a `__awkward_function__` classmethod (or instance method, at present) on `dask_awkward.Array` that enables `ak.high_level_function(dask_array)`. As it stands, if any array-like argument has this method, we dispatch to it instead of calling our own implementation.\r\n\r\nWill this process be sufficient for dask-awkward? Is it reasonable to have `dask_awkward` check the types of the arguments in each function to ensure you're not mixing dask and non-dask awkward arrays? Would we want the ability for another third-party library to take precedence?",
  "created_at":"2023-06-21T12:41:51Z",
  "id":1600763633,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fabbx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T12:43:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I'll take this PR for a spin and see how it feels!",
  "created_at":"2023-06-21T16:05:52Z",
  "id":1601124461,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fbzht",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T16:05:52Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"one note:\r\ndask_awkward relies heavily on `ak.from_json` in testing and this PR appears to have broken it:\r\n\r\n\r\n```python\r\nIn [1]: import awkward as ak\r\n   ...: \r\n   ...: \r\n   ...: with open(\"file.json\", \"wt\") as f:\r\n   ...:     text = '{\"a\":[1,2,3]}\\n{\"a\":[4,5,6,7]}'\r\n   ...:     print(text, file=f)\r\n   ...: \r\n   ...: \r\n   ...: with open(\"file.json\", \"rb\") as f:\r\n   ...:     a = ak.from_json(f, line_delimited=True)\r\n   ...: \r\n\r\nIn [2]: a\r\nOut[2]: <Array [] type='0 * unknown'>\r\n```\r\n",
  "created_at":"2023-06-21T16:23:51Z",
  "id":1601151605,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fb6J1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T16:23:51Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"In general this does look like a reasonable interface to me. This was all it took:\r\n\r\n```diff\r\ndiff --git a/src/dask_awkward/lib/core.py b/src/dask_awkward/lib/core.py\r\nindex b53a8f0..7fb2729 100644\r\n--- a/src/dask_awkward/lib/core.py\r\n+++ b/src/dask_awkward/lib/core.py\r\n@@ -1198,6 +1198,17 @@ class Array(DaskMethodsMixin, NDArrayOperatorsMixin):\r\n         \"\"\"Clear the divisions of a Dask Awkward Collection.\"\"\"\r\n         self._divisions = (None,) * (self.npartitions + 1)\r\n \r\n+    def __awkward_function__(self, func, args, kwargs):\r\n+        import dask_awkward\r\n+\r\n+        if any(isinstance(arg, ak.Array) for arg in args):\r\n+            raise TypeError(\"cannot mix awkward.Array and dask_awkward.Array\")\r\n+\r\n+        fn_name = func.__qualname__\r\n+        fn = getattr(dask_awkward, fn_name)\r\n+        res = fn(*args, **kwargs)\r\n+        return res\r\n+\r\n     def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\r\n         if method != \"__call__\":\r\n             raise RuntimeError(\"Array ufunc supports only method == '__call__'\")\r\n```\r\n\r\nAnd this works as expected:\r\n\r\n\r\n```python\r\nIn [1]: ds = dak.from_parquet(\"s3://ddavistemp/hpq\", storage_options={\"anon\": True})\r\n\r\nIn [2]: ak.min(ak.fill_none(ak.min(ds.muons.pt, axis=1), -1.0))\r\nOut[2]: dask.awkward<min, type=Scalar, dtype=Unknown>\r\n\r\nIn [3]: ak.min(ak.fill_none(ak.min(ds.muons.pt, axis=1), -1.0)).compute()\r\nOut[3]: -1.0\r\n```",
  "created_at":"2023-06-21T16:46:21Z",
  "id":1601200748,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fcGJs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T16:46:21Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@douglasdavis OK, after decorating all of our internal functions, it's clear that there is little need for the ability to use multiple yield statements (which would follow from fiddly control-flow to unpack arguments that contain array-like objects). So, we can simplify the dispatch logic to expect a single yield statement. As such, this means that we _can_ pass the list of array-like objects, enabling dask-awkward to quickly reject the overload as an error.\r\n\r\nPractically, this means dispatch functions changing from\r\n```python\r\n@high_level_function\r\ndef broadcast_arrays(*arrays, ...):\r\n    yield from arrays\r\n    return ...\r\n```\r\nto\r\n```python\r\n@high_level_function\r\ndef broadcast_arrays(*arrays, ...):\r\n    yield arrays\r\n    return ...\r\n```",
  "created_at":"2023-06-22T14:26:10Z",
  "id":1602737874,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fh9bS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T17:30:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm done with this PR now, just added an error for multiple yields! Are you happy for it to be merged @jpivarski?",
  "created_at":"2023-06-22T14:56:54Z",
  "id":1602790478,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fiKRO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T14:58:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes! This is a good design. The only question I have is about the dask-awkward implementation: why\r\n\r\n```python\r\nif any(isinstance(arg, ak.Array) for arg in args):\r\n    raise TypeError(\"cannot mix awkward.Array and dask_awkward.Array\")\r\n```\r\n\r\nWhy not `dak.from_awkward`?\r\n\r\nThat's not a question for this PR, though. This is ready to merge.",
  "created_at":"2023-06-22T20:59:07Z",
  "id":1603306899,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fkIWT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T20:59:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think in general it might be better to ensure that users load data in a dask-friendly manner. Whilst I suppose for things like `fill_none`, passing a small `ak.Array` is sensible, we don't want to encourage mixing these arrays in contexts that it is harmful to performance? I'm not yet sure on that, though \u2014 I'd be interested to see how things develop in dask-awkward, as you suggest.",
  "created_at":"2023-06-22T21:04:27Z",
  "id":1603313550,
  "issue":2531,
  "node_id":"IC_kwDODBCWws5fkJ-O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T21:04:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"pre-commit.ci autofix",
  "created_at":"2023-06-29T15:08:35Z",
  "id":1613352361,
  "issue":2532,
  "node_id":"IC_kwDODBCWws5gKc2p",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2023-06-29T15:08:35Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2532?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2532](https://app.codecov.io/gh/scikit-hep/awkward/pull/2532?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e494db0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/bb327c798ae6c183d8308a151b67f0bba71c1d7c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bb327c7) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2532?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_behavior.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2532?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JlaGF2aW9yLnB5) | `92.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2532?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.64% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_nplikes/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2532?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvX19pbml0X18ucHk=) | `80.95% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_errors.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2532?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `79.11% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-06-29T15:15:32Z",
  "id":1613364233,
  "issue":2532,
  "node_id":"IC_kwDODBCWws5gKfwJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-30T14:44:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I wonder if we should swap the order of black and Ruff?",
  "created_at":"2023-06-29T15:31:48Z",
  "id":1613409586,
  "issue":2532,
  "node_id":"IC_kwDODBCWws5gKq0y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T15:31:48Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"It was my understanding that black runs before Ruff, which sounds to me like the right order.\r\n\r\n* If black fixes any formatting issues that Ruff would complain about, then black should go before Ruff.\r\n* Since black changes the line numbers of issues that Ruff would complain about, and changes the lines on which a `# noqa` comment is active, black should go before Ruff.\r\n* If Ruff changes the code to fix easy issues (I think it does), and if Ruff's output format is not acceptable to black, then Ruff should go before black.\r\n\r\nOnly the last consideration implies Ruff \u2192 black, and if all three considerations apply, then we'd have to do black \u2192 Ruff \u2192 black. (In principle, it might never terminate, since the second run of black could move the positions of `# noqa` comments! But I would think that enough Ruff users are also black users, and black is not very configurable or at least has well-established defaults, that these issues would get resolved by the Ruff community, not by doing something special downstream.)",
  "created_at":"2023-06-29T15:47:05Z",
  "id":1613441666,
  "issue":2532,
  "node_id":"IC_kwDODBCWws5gKyqC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T15:47:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"thanks for catching & working on this!",
  "created_at":"2023-06-20T15:19:33Z",
  "id":1599003016,
  "issue":2533,
  "node_id":"IC_kwDODBCWws5fTtmI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-20T15:19:33Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2534](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fe81bf2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f818083308721a5756744f9507620b3d61afe433?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f818083) will **increase** coverage by `0.04%`.\n> The diff coverage is `95.83%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `90.00% <\u00f8> (-1.08%)` | :arrow_down: |\n| [src/awkward/\\_operators.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX29wZXJhdG9ycy5weQ==) | `94.82% <94.82%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.41% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `94.53% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/\\_connect/pyarrow.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `91.22% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `65.45% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.65% <100.00%> (+0.37%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.82% <100.00%> (\u00f8)` | |\n| [src/awkward/numba.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2534?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEucHk=) | `97.01% <100.00%> (+0.02%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-06-20T14:51:11Z",
  "id":1598945124,
  "issue":2534,
  "node_id":"IC_kwDODBCWws5fTfdk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-20T23:07:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"numpy issue https://github.com/numpy/numpy/issues/22876 and PR https://github.com/numpy/numpy/pull/23113",
  "created_at":"2023-06-20T18:26:26Z",
  "id":1599295067,
  "issue":2534,
  "node_id":"IC_kwDODBCWws5fU05b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-20T18:26:26Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, so my reading of this is that\r\n\r\n  * NumPy only introduced `__slots__ = ()`\r\n  * mixins without `__slots__` are not mixable into classes with `__slots__` (worse: Python just _ignores_ the subclassed `__slots__`)\r\n  * a superclass/mixin with `__slots__ = ()` is unrestrictive about what slots downstream classes define.\r\n\r\nBy that logic, the NumPy developers concluded that there could be no downside to it. In #2533, we seem to have discovered a downside: `__class__` can't be assigned to by other classes that don't define `__slots__` because they have a different memory model.\r\n\r\nMaybe a different solution to this is to define `__slots__` for `ak.Array` and `ak.Record`? That would put them in the same memory model as `NDArrayOperatorsMixin`-with-`__slots__`. If we do that, would that require downstream libraries from Awkward (i.e. Coffea and Vector) to also define `__slots__` in their behavior classes?\r\n\r\nWe don't want an infectious implementation requirement to spread to all downstream libraries that use Awkward, especially if the error message is cryptic, like\r\n\r\n```\r\nTypeError: __class__ assignment: 'MyAwesomeBehavior' object layout differs from 'NDArrayOperatorsMixin'\r\n```\r\n\r\nIf defining `__slots__` for `ak.Array` and `ak.Record` infects downstream libraries with the need to define `__slots__` on their behaviors, then let's define our own `NDArrayOperatorsMixin` without `__slots__`. (At worst, downstream libraries will try to use `__slots__` and Python will ignore their performance hints.)\r\n\r\nIf defining `__slots__` for `ak.Array` and `ak.Record` has no implications for downstream libraries, let's define `__slots__` for `ak.Array` and `ak.Record`.",
  "created_at":"2023-06-20T18:55:23Z",
  "id":1599343975,
  "issue":2534,
  "node_id":"IC_kwDODBCWws5fVA1n",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-20T18:55:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The way that the layout checker works is that it has a notion of type-supertype \"compatibility\", and it attempts to find a compatible common base. \r\n\r\nTo generate our mixin classes for _both_ records and arrays, we do something like\r\n\r\n```python\r\nclass ArrayImpl(MixinType, ak.Array):\r\n    ...\r\n```\r\n\r\nThe logic checking type-supertype compatibility for multiple inheritance walks down the `tp_base` (or `__base__` in Python) slot, and checks whether it is \"compatible\" with the type. If the child has a `__dict__` and the parent does not, this is `False`.\r\n\r\nLet's imagine that we add slots to `ak.Array` and the _generated_ classes for records and arrays. If the _user_ doesn't define `__slots__`, we'll end up with a dict, and the compatibility check fails. Conversely, without `__slots__`, the base for the mixin (`ArrayImpl`) is `object`, whilst for `ak.Array` the base is `NDArrayOperatorsMixin`, which also fails.\r\n\r\nOf the two approaches, it's probably safer to assume that the user _doesn't_ define `__slots__` for these mixin classes, because doing so would currently fail:\r\n```python\r\nimport awkward as ak\r\n\r\n\r\nbehavior = {}\r\n\r\n\r\nclass Point:\r\n    __slots__ = ()\r\n\r\n\r\nclass MyPoint(Point, ak.Array):\r\n    ...\r\n\r\n\r\nbehavior[\"*\", \"Point\"] = MyPoint\r\n\r\nak.operations.zip(\r\n    {\r\n        \"x\": ak.Array([1, 1]),\r\n        \"y\": ak.Array([1, 1]),\r\n    },\r\n    with_name=\"Point\",\r\n    behavior=behavior,\r\n)\r\n```\r\n\r\nFor the same reasons outlined above: `MyPoint.__base__` is `Point`, which is the final \"compatible base\" for `MyPoint`, and is not the same base as that of `ak.Array`.\r\n\r\nI think, therefore, the safest immediate step is to drop the slots, by using our own mixin. For our ecosystem, I think there's lesser benefit to `__slots__` usage; we don't expect high-frequency usage of array attributes to dominate over the array kernels. I might be wrong, though.",
  "created_at":"2023-06-20T20:22:20Z",
  "id":1599445529,
  "issue":2534,
  "node_id":"IC_kwDODBCWws5fVZoZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-20T20:22:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I think, therefore, the safest immediate step is to drop the slots, by using our own mixin. For our ecosystem, I think there's lesser benefit to `__slots__` usage; we don't expect high-frequency usage of array attributes to dominate over the array kernels. I might be wrong, though.\r\n\r\nLet's go with that. I was also thinking that `__slots__` aren't going to help much for `ak.Array`, considering that it contains so many large, nested, tree-like objects.",
  "created_at":"2023-06-21T00:15:18Z",
  "id":1599762944,
  "issue":2534,
  "node_id":"IC_kwDODBCWws5fWnIA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T00:15:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've taken your above comment as approval for merging!",
  "created_at":"2023-06-21T09:03:35Z",
  "id":1600467747,
  "issue":2534,
  "node_id":"IC_kwDODBCWws5fZTMj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T09:03:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for adding this! I'll take a look and let you know what I find.",
  "created_at":"2023-06-20T21:07:32Z",
  "id":1599515223,
  "issue":2535,
  "node_id":"IC_kwDODBCWws5fVqpX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-20T21:07:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is very surprising! There must be some hidden $\\mathcal{O}(n^2)$ thing in it; 1500 strings is not something that should lead to an hour of processing. Maybe it's unnecessarily running up and down the tree structure or something.\r\n\r\nAnyway, this is not a situation in which we were expecting that kind of performance. Even if it didn't have a bad impact on real use-cases, it would be wrong anyway.",
  "created_at":"2023-06-21T00:22:58Z",
  "id":1599767887,
  "issue":2535,
  "node_id":"IC_kwDODBCWws5fWoVP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T00:22:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The time complexity of my fix was still going to be unkind to large arrays; though it used a set to look-up fixed strings, it still did this `N * M` times in order to conform to the existing selection interface.\r\n\r\nThis isn't really good enough, so I've simplified the existing code to make it possible to drop down to $\\mathcal{O}(n \\log m)$. This is done through a new `_SpecifierMatcher` object that partitions the current column of selections into fixed-strings and patterns, for which only patterns have $\\mathcal{O}(n \\times m)$ (for smaller $m$).\r\n\r\nI just need to implement union trimming support.",
  "created_at":"2023-06-21T09:50:41Z",
  "id":1600535729,
  "issue":2536,
  "node_id":"IC_kwDODBCWws5fZjyx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T09:54:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The original logic had some pruning behavior. After logical column selection by pattern matching, we have the following rules (where `Record()` indicates a record with no contents).\r\n\r\n- `Record(Record())` prunes to `Record()`\r\n- `Record()` (top-level) does not prune\r\n- `Union(Record(), X)` prunes to `Union(X)`\r\n- `Union(X)` prunes to `X`\r\n- `Union()` prunes to `Unknown`\r\n\r\nThis means that all but the outermost record can disappear if inner fields are not selected, e.g.\r\n```python\r\nimport awkward as ak\r\n\r\nform = ak.forms.from_dict(\r\n    {\r\n        \"class\": \"ListOffsetArray\",\r\n        \"offsets\": \"i64\",\r\n        \"content\": {\r\n            \"class\": \"ListOffsetArray\",\r\n            \"offsets\": \"i64\",\r\n            \"content\": {\r\n                \"class\": \"RecordArray\",\r\n                \"fields\": [\"x\"],\r\n                \"contents\": [\r\n                    {\r\n                        \"class\": \"ListOffsetArray\",\r\n                        \"offsets\": \"i64\",\r\n                        \"content\": {\r\n                            \"class\": \"RecordArray\",\r\n                            \"fields\": [\"y\"],\r\n                            \"contents\": [\"int64\"],\r\n                        },\r\n                    }\r\n                ],\r\n            },\r\n        },\r\n    }\r\n)\r\nprint(form.select_columns([\"x.z\"]))\r\n```\r\nwhich gives\r\n```json\r\n{\r\n    \"class\": \"ListOffsetArray\",\r\n    \"offsets\": \"i64\",\r\n    \"content\": {\r\n        \"class\": \"ListOffsetArray\",\r\n        \"offsets\": \"i64\",\r\n        \"content\": {\r\n            \"class\": \"RecordArray\",\r\n            \"fields\": [],\r\n            \"contents\": []\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis PR implements a `prune_unions_and_records` flag that performs a separate pruning pass, \r\n```python\r\nprint(form.select_columns([\"x.z\"], prune_unions_and_records=False))\r\n```\r\nso we can see the un-pruned variant:\r\n```json\r\n{\r\n    \"class\": \"ListOffsetArray\",\r\n    \"offsets\": \"i64\",\r\n    \"content\": {\r\n        \"class\": \"ListOffsetArray\",\r\n        \"offsets\": \"i64\",\r\n        \"content\": {\r\n            \"class\": \"RecordArray\",\r\n            \"fields\": [\r\n                \"x\"\r\n            ],\r\n            \"contents\": [\r\n                {\r\n                    \"class\": \"ListOffsetArray\",\r\n                    \"offsets\": \"i64\",\r\n                    \"content\": {\r\n                        \"class\": \"RecordArray\",\r\n                        \"fields\": [],\r\n                        \"contents\": []\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nLike the original code, we only prune interior forms (with respect to an outermost (maybe nested) record or union. ",
  "created_at":"2023-06-21T11:21:12Z",
  "id":1600655110,
  "issue":2536,
  "node_id":"IC_kwDODBCWws5faA8G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T11:22:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2536](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6820568) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f818083308721a5756744f9507620b3d61afe433?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f818083) will **increase** coverage by `0.03%`.\n> The diff coverage is `83.25%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `90.00% <\u00f8> (-1.08%)` | :arrow_down: |\n| [src/awkward/forms/listform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdGZvcm0ucHk=) | `80.20% <33.33%> (-3.31%)` | :arrow_down: |\n| [src/awkward/forms/regularform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvcmVndWxhcmZvcm0ucHk=) | `82.79% <33.33%> (-3.57%)` | :arrow_down: |\n| [src/awkward/forms/bitmaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `85.10% <42.85%> (-3.66%)` | :arrow_down: |\n| [src/awkward/forms/bytemaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `84.09% <42.85%> (-3.87%)` | :arrow_down: |\n| [src/awkward/forms/indexedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZGZvcm0ucHk=) | `80.61% <42.85%> (-3.26%)` | :arrow_down: |\n| [src/awkward/forms/indexedoptionform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZG9wdGlvbmZvcm0ucHk=) | `87.64% <42.85%> (-4.03%)` | :arrow_down: |\n| [src/awkward/forms/unmaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5tYXNrZWRmb3JtLnB5) | `84.21% <42.85%> (-4.53%)` | :arrow_down: |\n| [src/awkward/forms/emptyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `84.09% <75.00%> (+1.13%)` | :arrow_up: |\n| [src/awkward/forms/unionform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5pb25mb3JtLnB5) | `87.23% <83.33%> (+4.88%)` | :arrow_up: |\n| ... and [12 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2536?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-06-21T11:59:56Z",
  "id":1600704832,
  "issue":2536,
  "node_id":"IC_kwDODBCWws5faNFA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T11:59:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski you've marked this as ready in your review. After your previous comment, I decided to go further and change the time complexity. Would you mind reviewing one final time?",
  "created_at":"2023-06-21T12:32:36Z",
  "id":1600750609,
  "issue":2536,
  "node_id":"IC_kwDODBCWws5faYQR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-21T12:32:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It looks like `_prune_columns` avoids a walk down-and-back-up subtrees, which would improve the time complexity if trees are deep (and would reduce time, anyway). That looks like an improvement as well, and I know there are `select_columns` tests that verify correctness, so everything here looks good and ready to merge.\r\n\r\nHmm, I'm not quite sure if I understand this point properly. `_prune_columns` will visit every layout node, and rebuilds the layout from the bottom up. This will be slower than doing everything in one pass, but I don't think it's going to be majorly problematic; all of our operations assume we can rebuild layouts fairly cheaply.\r\n\r\n> When you run the tests interactively, does `test_very_large_record` exhibit a noticeable pause? I guess it must be quick enough that it's not hours (or GitHub Actions would have rejected it).\r\n\r\nWith 1e6 fields under instrumentation, building the form takes ~4s on my machine, and the selection `form.select_columns(form.fields)` takes ~10s. That time is dominated by setup logic like `glob.escape` and building the various tables. I think that's fine; it's fast enough.",
  "created_at":"2023-06-22T11:21:34Z",
  "id":1602467458,
  "issue":2536,
  "node_id":"IC_kwDODBCWws5fg7aC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T11:21:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I don't think my reply above will put this at odds with merging: this directly improves the existing $\\mathcal{O}(n^2)$ behavior. Therefore, I'm merging :)",
  "created_at":"2023-06-22T13:55:14Z",
  "id":1602684739,
  "issue":2536,
  "node_id":"IC_kwDODBCWws5fhwdD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T13:55:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That looks good/sounds good. I was being verbal about my interpretation of `_prune_columns`, which apparently was wrong.",
  "created_at":"2023-06-22T21:03:03Z",
  "id":1603311640,
  "issue":2536,
  "node_id":"IC_kwDODBCWws5fkJgY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T21:03:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I was being verbal about my interpretation \r\n\r\nOh, I know - and it's useful; I can get a good sense of your thought processes! :)",
  "created_at":"2023-06-22T21:05:45Z",
  "id":1603315222,
  "issue":2536,
  "node_id":"IC_kwDODBCWws5fkKYW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T21:06:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2538?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2538](https://app.codecov.io/gh/scikit-hep/awkward/pull/2538?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cbcd89e) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/efa1168e5a03069e4f8e3cd25b01b773d0cb24c3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (efa1168) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-06-22T20:08:11Z",
  "id":1603250377,
  "issue":2538,
  "node_id":"IC_kwDODBCWws5fj6jJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T20:48:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Hitting:\r\n\r\n```\r\nRun python3 -m pip install -r docs/requirements-wasm.txt\r\n[13](https://github.com/scikit-hep/awkward/actions/runs/5349678787/jobs/9701234421#step:5:14)\r\nERROR: Could not open requirements file: [Errno 2] No such file or directory: 'docs/requirements-wasm.txt'\r\n```\r\n\r\nWhich appears on main, too.",
  "created_at":"2023-06-22T20:14:04Z",
  "id":1603256966,
  "issue":2538,
  "node_id":"IC_kwDODBCWws5fj8KG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-22T20:14:04Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2540?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2540](https://app.codecov.io/gh/scikit-hep/awkward/pull/2540?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7e079c2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/7b22fd1c087bd0c539ce2ba2445a5fd1385d1685?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7b22fd1) will **decrease** coverage by `0.01%`.\n> The diff coverage is `89.15%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2540?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_parameters.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2540?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BhcmFtZXRlcnMucHk=) | `82.95% <57.14%> (+0.19%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2540?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.11% <60.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/\\_behavior.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2540?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JlaGF2aW9yLnB5) | `93.22% <96.55%> (-0.33%)` | :arrow_down: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2540?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `94.44% <100.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2540?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `85.15% <100.00%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2540?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.82% <100.00%> (\u00f8)` | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2540/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-23T12:29:57Z",
  "id":1604215080,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5fnmEo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T11:50:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Custom strings will still need to have behaviour overloads for things like `np.equal`, but the layout-level logic for handling strings should work with custom and default strings. \n\nI think this is sensible. Another approach would be to have fallbacks, so that the __array__ behaviours are used if the __name__ doesn't define them. Doing that would mean that ufuncs operating upon a mixture of custom and default strings would work out of the box. I think that is undesirable - mixing types is general not well advised.\n\nThere are more options here, but these are the main two that I can think of. ",
  "created_at":"2023-06-23T16:30:59Z",
  "id":1604521902,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5fow-u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-23T16:37:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  This will become an API forever, and if I were an outsider, I might think that __name__ is a display kind of thing, not a functional kind of thing. (\r\n\r\nYes, this is unfortunate. I think the constraint at fault here is the existing use of `__array__`; it is already a good name for what we want to implement.\r\n\r\n> Maybe __derivation__ or __derived__? Or __subclass__ because it specifically puts subclasses of ak.Array onto the data and it's about making customized strings/bytes and customized categoricals.\r\n\r\nOne thing to account for is that there is a reason to use `__name__` for non-string/categoricals. This PR reorients things so that `__array__` is only used for strings / categoricals. The motivation for that was to avoid the `'__array__:' 'string'` property differing between built-in and custom strings i.e to keep existing string-aware logic invariant.\r\n\r\nIf we chose instead to make `__name__` meaningful only for strings/categoricals, then users/library authors would need to do more work before successfully adding a nominal type to an arbitrary layout, i.e. check whether it's a string/categorical, and act accordingly.",
  "created_at":"2023-06-24T07:43:52Z",
  "id":1605300161,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5fru_B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-25T11:22:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've changed the PR to use `__subclass__`. I think my preferred solution is to make the existing usages of `__array__` a different parameter like `__kind__`, and seeing as that's not on the table, I have no strong feelings on the ~`__subtype__`~ `__subclass__` name!\r\n\r\nThat said, we don't currently prevent users from setting ~`__subtype__`~ `__subclass__` if `__array__` is not set. This might cause some confusion / bad practices.",
  "created_at":"2023-06-26T11:55:41Z",
  "id":1607311399,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5fzaAn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T21:01:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"In fact, you switched mid-sentence between `__subclass__` and `__subtype__`. But since this points to a _class_ that inherits from `ak.Array`, using \"class\" in the name is perhaps better.\r\n\r\nOh! `__array_class__`? It doesn't matter that it's long; these are entirely targeted at library developers, not at all at casual users. This spelling ties in the fact that it needs to be coordinated with `__array__`.\r\n\r\nSetting `__array_class__` without `__array__` doesn't make sense, and we can check for it in\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/5543a0178d3b3469070c481f77c786c5214b65ab/src/awkward/contents/content.py#L95\r\n\r\nThis wouldn't be the first long-range invariant: strings need to have `__array__: \"string\"` and their `content`'s `__array__: \"char\"`.",
  "created_at":"2023-06-26T20:56:03Z",
  "id":1608243517,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f29k9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T20:56:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Oh! __array_class__? It doesn't matter that it's long; \r\n\r\nYes, we will be rendering this parameter like `__array__` is currently, i.e. `var * NAME`.\r\n\r\n> Setting `__array_class__` without `__array__` doesn't make sense, and we can check for it in\r\n\r\nThis is the part that I want to make sure we're on the same page about. \r\n\r\nI originally wanted to make the change `__array__` \u2192 `__kind__` to make it clear that `__kind__` is fundamentally doing a different thing to `__array__`. In future, strings will drop the string behavior classes, meaning that `__kind__` can be a non-behavior-class parameter. `__kind__` would still have affected ufuncs etc, but that can all be explained in a table.\r\n\r\nGiven that we're not making this change, however, in my mind `__array__` and `__array_class__` are semantically identical _apart_ from the places where we're asking about string-ness or categorical-ness; these places only look at `__array__`. For everything that isn't string/categorical specific, they're just higher-lower precedence names for `__array__`. Therefore, we prohibit setting `__array_class__` without `__array__`.\r\n\r\nI'm most fond of an `__array_XXX__` name; in fact, I also proposed something like this at one point, but I can't see where... I've rewritten these PRs a few times now :P",
  "created_at":"2023-06-26T21:10:11Z",
  "id":1608268801,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f3DwB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T21:10:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is how I've been understanding the intended future behavior (with some newfound clarity, having written and rewritten this comment many times):\r\n\r\n`__array__` has only 6 meaningful values: `\"string\"`, `\"bytestring\"`, `\"char\"`, `\"byte\"`, `\"categorical\"`, and `\"sorted_map\"`, which are all of the values that Awkward and Uproot have ever used for this parameter. Whenever the value of `__array__` has some consequences for how the array works (in `__getitem__`, `to_list`, broadcasting, Arrow-conversion, validity-checking, etc.), those consequences will be hard-coded, not configurable through `ak.behavior`. Therefore, `__array__` does not determine what Python class gets applied to a layout when that layout is at the top of the tree, because everything that it does is hard-coded.\r\n\r\n`__array_class__` determines what Python class gets applied to a layout when that layout is at the top of the tree. Therefore, `__array_class__` is \"the array/non-record equivalent of `__record__`.\"\r\n\r\nTherefore, if we have the following,\r\n\r\n```python\r\nclass IPAddress(bytes):   # okay, this has to subclass from bytes, not ak.Array\r\n    def do_an_ip_address_thing(self, arg):\r\n        # compute something for a single IP address, like b'\\xc0\\x80\\x01\\x00' (192.128.1.0)\r\n    def __repr__(self):\r\n        return \".\".join(map(str, np.frombuffer(self, \"u1\")))\r\n\r\nclass IPAddressArray(ak.Array):\r\n    def do_an_ip_address_thing(self, arg):\r\n        # compute something for an array of IP addresses (vectorized version of the above)\r\n\r\nak.behavior[\"IPAddress\"] = IPAddress\r\nak.behavior[\"*\", \"IPAddress\"] = IPAddressArray\r\n```\r\n\r\non a listnode-containing-numpynode-of-uint8 layout with `__array__: \"bytestring\"` and `__array_class__: \"IPAddress\"` would make the array act like an array of bytestrings with the `do_an_ip_address_thing` method and `repr`. IP addresses are an Awkward subclass of bytestrings because `__array__` gives it the hard-coded bytestring behaviors and `__array_class__` gives library developers a way to define new methods.\r\n\r\nNow that I think of it, there's no reason for `__array_class__` to be limited to nodes that also define `__array__`. Being string-like/categorical-like/map-like though hard-coded, built-in code is orthogonal to what Python class gets overlaid on nodes that are at the top of the layout. It used to be that `__array__` did both, but now we want to split up these two actions into two parameters.\r\n\r\n**Old:**\r\n\r\n  * `__array__` has hard-coded consequences for some of its values.\r\n  * `__array__` also determines which Python class to to wrap a `layout` with.\r\n\r\n**New:**\r\n\r\n  * `__array__` has hard-coded consequences for some of its values.\r\n  * `__array_class__` determines which Python class to to wrap a `layout` with.\r\n\r\nFor overloads, we lose the `__array__`/`__record__` symmetry in favor of a less elegant `__array_class__`/`__record__` pairing[^1], but the hard-coded behaviors that have become established in `__array__` do not need to change.\r\n\r\n-----------\r\n\r\nIn the example above, I included\r\n\r\n```python\r\nak.behavior[\"*\", \"IPAddress\"] = IPAddressArray\r\n```\r\n\r\nwhich I just realized is possible, furthering the symmetry between `__array_class__` and `__record__` in a useful way. (If we had an `IPAddress` override, we would definitely want to vectorize its methods.)\r\n\r\nAlso, the class assigned through `__array_class__` would have to be a subclass of `str` if `__array__` is `\"string\"` or `\"char\"`, it would have to be a subclass of `bytes` if `__array__` is `\"bytestring\"` or `\"byte\"`, and it would have to be a subclass of `ak.Array` otherwise. That's a long-range consequence of string/bytestring's hard-coded `__getitem__` behavior, but not something that needs to be explicitly checked. (Library developers either get it right or they get an error.)\r\n\r\n[^1]: If we really want to, we can introduce `__record_class__` as the new spelling of `__record__` and _very slowly_ or never deprecate `__record__`. The deprecation period would have to be a year, and we shouldn't introduce warnings until after the summer is over.",
  "created_at":"2023-06-26T22:24:34Z",
  "id":1608403098,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f3kia",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T22:25:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"### Purelist array classes\r\n> In the example above, I included\r\n> ```python\r\n> ak.behavior[\"*\", \"IPAddress\"] = IPAddressArray\r\n> ```\r\n\r\nCurrently the `\"*\", NAME` syntax applies only to arrays-of-records. Are you proposing that we increase the symmetry, and resolve `__array__` at any list depth? I think this would be useful.\r\n\r\n> Now that I think of it, there's no reason for `__array_class__` to be limited to nodes that also define `__array__`\r\n\r\nOK, this aligns with my general feeling! This relaxation means we can speak about `__array__` in a limited set of circumstances, and user/library code can safely set `__array_class__`.",
  "created_at":"2023-06-26T23:18:59Z",
  "id":1608453527,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f3w2X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T23:18:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"## Dropping auxiliary behavior classes\r\n\r\nA problem with having `__array__` not affect the choice of array class is that `byte` and `char` currently have behavior classes that do something useful. (Incidentally, it appears I've made a mistake in #2528, because the byte/char classes are marked as deprecated). \r\n\r\nHere are the methods for `chat`/`byte`:\r\n- `__bytes__`\r\n- `__str__`\r\n- `__repr__`\r\n- `__iter__`\r\n- `__eq__`\r\n- `__neq__`\r\n- `__add__`\r\n- `__radd__`\r\n\r\n\r\nThere is a pattern that is increasingly becoming clear to me; we're trying to move away from the behavior system as a mechanism for implementing core features. Instead, I think we're reframing behaviors as intended to _override_ built-in features, not implement it directly? \r\nIf so, I think we want to remove the need for these `ByteBehavior` and `CharBehavior` classes:\r\n\r\n### Moving methods to `ak.Array`?\r\nTo solve this, we could extend `ak.Array` to define byte/char-aware `__bytes__`, `__str__`, and `__repr__` (although I actually think `__repr__` should not be defined specially for char/byte; it should be true to the actual (array) object). \r\n\r\n### Moving methods to `ak.behavior`?\r\nWe can also define ufunc overloads for the various ufuncs. That might be tricky; right now, Python `str` objects are cast (via `__cast__`) to `\"string\"`, not `\"char\"`. This means that `my_array_of_char == \"word\"` which would throw an exception. If we change this to produce `\"char\"`, then the same is true for `my_array_of_strings == \"word\"`. I'll give this problem some more thought, as all of these things are somewhat interconnected.\r\n\r\n### Don't use `ak.behavior`?\r\nI might be ad-nauseam in my explanation here, but the one point I really want to keep alive is that `__array_class__` and `__record__` don't _just_ set `__class__`, they also (orthogonally) determine ufunc overloads etc. We _can_ use one of those features without the other. \r\n\r\nBut, should we in this case? This PR is moving in the direction that strings are a fundamental part of the Awkward type system. In fact, if we had no technical debt we could argue that `string_type` should be an attribute of `ListOffsetArray` and `ListOffsetForm`, rather than a parameter. However, that ship has long sailed. Stopping array-class resolution from considering `__array__` implies to me that the same should hold true for ufuncs and other features. In other words, I'm suggesting that our `__array__` no longer be a nominal type in _any_ sense.\r\n\r\n\r\n",
  "created_at":"2023-06-26T23:23:44Z",
  "id":1608456518,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f3xlG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T23:23:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"## Purelist array classes\r\n\r\nYes,\r\n\r\n```python\r\nak.behavior[\"*\", \"IPAddress\"] = IPAddressArray\r\n```\r\n\r\nwould be a new thing to make `__array_class__` and `__record__` more symmetric. Afterward, it may be that [ak.mixin_class](https://awkward-array.org/doc/main/reference/generated/ak.mixin_class.html) could be extended to apply to both record and array behaviors, but the fact that some array behavior classes would need to extend `str` and `bytes` makes that tricky.",
  "created_at":"2023-06-26T23:27:34Z",
  "id":1608458783,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f3yIf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T23:27:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It's easier to split these things into multiple comments...\r\n\r\nThough the above is subject to change (you might not like the direction!), I'm going to summarise the history / where my head is at with all of this.\r\n\r\n1. Strings are complex enough that we decided to make them first-party citizens rather than add-ons that users could have created (#2474)\r\n2. We decided that users should be able to define custom strings that obey intrinsic string rules (like broadcasting), but allow additional behaviors and ufunc/reducer overloads (#2432)\r\n3. Here, we decided that `__array__`, the mechanism that supports strings/categoricals, should not be used for type-class resolution. We added a new `__array_class__` that has much greater symmetry with `__record__`\r\n4. We propose that existing purelist array-class lookup also support names from `__array_class__`, not just `__record__`.\r\n5. Here, I propose that `__array__` also not be considered for any nominal lookups, finalising the move towards a built-in type\r\n\r\n(5) requires that we add built-in support to our existing overload mechanisms to recognise char/byte.\r\n\r\nI'm writing all of this in a vacuum, though. We currently allow users to define ufunc overloads for unnamed strings. I'm _assuming_ that we can find data to show that this is not important enough to protect.",
  "created_at":"2023-06-26T23:30:54Z",
  "id":1608460847,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f3yov",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T01:08:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  but the fact that some array behavior classes would need to extend str and bytes makes that tricky.\r\n\r\nWould they need this? I think it would be better if `char` and `byte` classes were `ak.Array`s, but implemented `__bytes__` and `__str__` [like we currently do](https://github.com/scikit-hep/awkward/blob/5543a0178d3b3469070c481f77c786c5214b65ab/src/awkward/behaviors/string.py#L25-L30)",
  "created_at":"2023-06-26T23:32:08Z",
  "id":1608461638,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f3y1G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T23:32:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Remember that those `StringBehavior` and `ByteStringBehavior` classes are not used anywhere:\r\n\r\n```bash\r\n% fgrep -r StringBehavior src/awkward --include=\"*.py\"\r\nsrc/awkward/behaviors/string.py:class ByteStringBehavior(Array):\r\nsrc/awkward/behaviors/string.py:class StringBehavior(Array):\r\n```\r\n\r\nThey're defined, but not ever instantiated. #2528 was not a mistake.\r\n\r\nThe generation of string representations, like `'HAL'` and `'IBM'` in\r\n\r\n```python\r\n>>> ak.Array(\r\n...     ak.contents.ListOffsetArray(\r\n...         ak.index.Index64([0, 3, 6]),\r\n...         ak.contents.NumpyArray(\r\n...             np.array([72, 65, 76, 73, 66, 77], \"u1\"),\r\n...             parameters={\"__array__\": \"char\"},\r\n...         ),\r\n...         parameters={\"__array__\": \"string\"},\r\n...     )\r\n... )\r\n<Array ['HAL', 'IBM'] type='2 * string'>\r\n```\r\n\r\nare generated in a hard-coded way, _not_ through the `StringBehavior`. It happens in `ak.Array.__getitem__` here:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/5543a0178d3b3469070c481f77c786c5214b65ab/src/awkward/highlevel.py#L950-L958\r\n\r\nand in `ak._prettyprint.get_at` here:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/5543a0178d3b3469070c481f77c786c5214b65ab/src/awkward/_prettyprint.py#L43-L49\r\n\r\n(because the pretty-printer bypasses `ak.Array.__getitem__`).\r\n\r\nSo there aren't methods currently defined in `StringBehavior` and `ByteStringBehavior` that need to be taken over; they were already taken over.",
  "created_at":"2023-06-26T23:57:41Z",
  "id":1608486237,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f341d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T23:57:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> I think it would be better if `char` and `byte` classes were `ak.Array`s, but implemented `__bytes__` and `__str__`\r\n\r\n`ak.Array.__getitem__` returns `str` and `bytes` for a single string or a single bytestring because it was requested: #873. Similarly, it returns `None` for missing values instead of an `ak.masked`.",
  "created_at":"2023-06-27T00:03:49Z",
  "id":1608492931,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f36eD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T00:03:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Remember that those StringBehavior and ByteStringBehavior classes are not used anywhere:\r\n\r\nRight, but the same is not true of `CharBehavior` or `ByteBehavior`\r\n\r\n\r\n\r\n> > I think it would be better if `char` and `byte` classes were `ak.Array`s, but implemented `__bytes__` and `__str__`\r\n> \r\n> `ak.Array.__getitem__` returns `str` and `bytes` for a single string or a single bytestring because it was requested: #873. Similarly, it returns `None` for missing values instead of an `ak.masked`.\r\n\r\nI agree. However, if we have `__array__: \"char\"` layouts, then I think they should not be subclasses of byte/char. If you do `ak.to_layout(\"hello\")`, it should be a `char` array that can be coerced to string, but _isn't_ a string.",
  "created_at":"2023-06-27T00:12:18Z",
  "id":1608502570,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f380q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T00:12:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Though the above is subject to change (you might not like the direction!), I'm going to summarise the history / where my head is at with all of this.\r\n> \r\n> 1. Strings are complex enough that we decided to make them first-party citizens rather than add-ons that users could have created ([feat!: drop string broadcasting overloading\u00a0#2474](https://github.com/scikit-hep/awkward/pull/2474))\r\n> 2. We decided that users should be able to define custom strings that obey intrinsic string rules (like broadcasting), but allow additional behaviors and ufunc/reducer overloads ([Simplify customisation that is used to implement strings\u00a0#2432](https://github.com/scikit-hep/awkward/issues/2432))\r\n> 3. Here, we decided that `__array__`, the mechanism that supports strings/categoricals, should not be used for type-class resolution. We added a new `__array_class__` that has much greater symmetry with `__record__`\r\n\r\nYes, we are on the same page about the 3 points above.\r\n\r\n> 4. We propose that existing purelist array-class lookup also support names from `__array_class__`, not just `__record__`.\r\n> (4) requires that we add built-in support to our existing overload mechanisms to recognise strings.\r\n\r\nNumber 4 is a new point, and I think we're in agreement that it's a good idea. I don't understand the comment about needing to make our existing overload mechanisms recognize strings. The overload mechanisms will (future) involve only `__array_class__`, and the string-handling (now) involves only `__array__`. These two concerns have become independent.\r\n\r\n> 5. Here, I propose that `__array__` also not be considered for any nominal lookups, finalising the move towards a built-in type\r\n\r\nI had to re-read this to understand it, and I think we're on the same page about number 5 as well. `__array__` will also not be considered for any nominal lookups; `__array__` will be used exclusively for built-in behaviors.\r\n\r\n> I'm writing all of this in a vacuum, though. We currently allow users to define ufunc overloads for unnamed strings. I'm _assuming_ that we can find data to show that this is not important enough to protect.\r\n\r\nI understand that this would be breaking any current uses of the `__array__` parameter, and I know that you're an example of one user who used it (though you were a power-user, even before you joined the team!). In my scan of API usage, I didn't even find any examples of record-overloading outside of Coffea and Vector, and `__array__` (now `__array_class__`) overloading is more difficult with more constrained use-cases. It's also impossible to put into a deprecation cycle (the way that `__record__` \u2192 `__record_class__` could be, if we want). So this breaking change appears to be safe and we can't do it in a non-breaking way, anyway.",
  "created_at":"2023-06-27T00:16:49Z",
  "id":1608517150,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f4AYe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T00:16:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I see that `CharBehavior` and `ByteBehavior` haven't been extracted yet, but I think they should be.\r\n\r\n```bash\r\n% fgrep -r CharBehavior src/awkward --include=\"*.py\"\r\nsrc/awkward/behaviors/string.py:class CharBehavior(Array):\r\nsrc/awkward/behaviors/string.py:        if isinstance(other, (str, CharBehavior)):\r\nsrc/awkward/behaviors/string.py:        if isinstance(other, (str, CharBehavior)):\r\nsrc/awkward/behaviors/string.py:        if isinstance(other, (str, CharBehavior)):\r\nsrc/awkward/behaviors/string.py:    behavior[\"char\"] = CharBehavior\r\n% fgrep -r ByteBehavior src/awkward --include=\"*.py\"\r\nsrc/awkward/behaviors/string.py:class ByteBehavior(Array):\r\nsrc/awkward/behaviors/string.py:        if isinstance(other, (bytes, ByteBehavior)):\r\nsrc/awkward/behaviors/string.py:        if isinstance(other, (bytes, ByteBehavior)):\r\nsrc/awkward/behaviors/string.py:        if isinstance(other, (bytes, ByteBehavior)):\r\nsrc/awkward/behaviors/string.py:    behavior[\"byte\"] = ByteBehavior\r\n```\r\n\r\nIf `array[100]` returns an arbitrary-length `str`, then I'd strongly expect `array[100, 5]` to return a length-1 `str`. In particular, I'd expect `array[100][5]` and `array[100, 5]` to return the same thing (not something that can be coerced to the same thing).\r\n\r\nOn the other hand,\r\n\r\n```python\r\nak.to_layout(\"hello\")\r\n```\r\n\r\nis the other direction: it must return a char array that can be coerced to string, but isn't a string. `ak.Array.__getitem__` takes things out of the Awkward system and `ak.to_layout` puts them into it.",
  "created_at":"2023-06-27T00:23:50Z",
  "id":1608522476,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f4Brs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T00:23:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I don't understand the comment about needing to make our existing overload mechanisms recognize strings. The overload mechanisms will (future) involve only __array_class__, and the string-handling (now) involves only __array__. These two concerns have become independent.\r\n\r\nI should say \"char\" / \"byte\". We implement certain features via behavior overloads (ufuncs), which would need to be folded into the core ufunc machinery if we don't treat \"char\" as a nominal type.",
  "created_at":"2023-06-27T01:07:49Z",
  "id":1608553254,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5f4JMm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T01:07:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Following from our meeting, we decided to introduce a new `__list__` name instead of `__subclass__`. This will be scoped _only_ to list types, and `__record__` should be scoped only to records. Additionally, `(\"*\", \"name\")` should resolve lists to any depth (stopping at records!).\r\n\r\nIf we change the content rules such that `__record__` and `__list__` can only be added to their respective types, then we can create a new `any_purelist_parameter` function that finds the outermost of several parameters. This would be used to resolve the array class.",
  "created_at":"2023-06-28T15:16:39Z",
  "id":1611633269,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5gD5J1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-28T15:16:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closing in favour of a new PR.",
  "created_at":"2023-06-29T10:54:23Z",
  "id":1612877733,
  "issue":2540,
  "node_id":"IC_kwDODBCWws5gIo-l",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T10:54:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is expected; `passing` and `failing` have all of the same fields as `ttarray.muon`, and concatenating them together should produce a result with new buffers. Even if you were computing only `concat.pt`, we would still expect every field to be touched; the act of concatenating buffers to form `concat` is a touching operation.\r\n\r\nThe optimisation to say \"we could avoid reading these concatenated buffers in the _final_ result\" is path dependent, rather than the per-operation system we currently use, such that the touched keys are given by the final computed keys. It would also involve widening the set of operations that support placeholders, and more importantly change the meaning of placeholder arrays from \"arrays whose contents aren't read*\" to \"arrays whose contents can be undefined / arbitrary\".\r\n\r\nWe touched on this discussion a while ago. @jpivarski / @douglasdavis do you recall where we left things?",
  "created_at":"2023-06-25T14:42:34Z",
  "id":1606117434,
  "issue":2541,
  "node_id":"IC_kwDODBCWws5fu2g6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-25T14:46:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"~It's kind of interesting this only became an issue with the dask_awkward 2023.6.2 -> 2023.6.3 change, despite it having been expected behavior in awkward itself.~\r\n\r\nI cannot reproduce that behavior myself.",
  "created_at":"2023-06-25T14:48:56Z",
  "id":1606119434,
  "issue":2541,
  "node_id":"IC_kwDODBCWws5fu3AK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-25T14:52:21Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"seems like this is expected behavior - we should discuss what the outcome at the level of dask_awkward should be of such a statement.",
  "created_at":"2023-06-25T16:35:50Z",
  "id":1606152200,
  "issue":2541,
  "node_id":"IC_kwDODBCWws5fu_AI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-25T16:35:50Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2543?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2543](https://app.codecov.io/gh/scikit-hep/awkward/pull/2543?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bb6f770) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a50db5a4bac876ebf146eaf6e8e5e02870045b60?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a50db5a) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2543?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2543?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `90.99% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-06-26T12:45:19Z",
  "id":1607393807,
  "issue":2543,
  "node_id":"IC_kwDODBCWws5fzuIP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T12:45:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"In the following, the _lists_ have parameter `hello: \"there\"`,\r\n\r\n```python\r\n>>> original = ak.with_parameter([[1], [], [2, 3]], \"hello\", \"there\")\r\n>>> original\r\n<Array [[1], [], [2, 3]] type='3 * [var * int64, parameters={\"hello\": \"ther...'>\r\n>>> ak.sum(original, axis=-1, keepdims=True)\r\n<Array [[1], [0], [5]] type='3 * 1 * int64'>\r\n```\r\n\r\nbut the output array has lists without parameters.\r\n\r\nIn fact, the input lists were variable-length and the output lists are fixed-size with a length of 1. That's already a different type. When we keep parameters, it is because we want to keep the type unchanged, but that's already not what's happening in the above. How disruptive of a backward-incompatible change would it be to preserve the `is_regular` of the lists when keeping a list-type with `keepdims=True`?\r\n\r\n---------------\r\n\r\nSeparately, the type (and therefore the parameters) of the reduced data should be maintained for _some_ reducers. (Above the horizontal line, parameter-preservation is a question that is independent of which reducer we're talking about. In this section, it depends on which reducer we're talking about.)\r\n\r\nIn the following, the _numbers_ have parameter `hello: \"there\"`,\r\n\r\n```python\r\n>>> original = ak.unflatten(ak.with_parameter([1, 2, 3], \"hello\", \"there\"), [1, 0, 2])\r\n>>> original\r\n<Array [[1], [], [2, 3]] type='3 * var * int64[parameters={\"hello\": \"there\"}]'>\r\n>>> ak.sum(original, axis=-1)\r\n<Array [1, 0, 5] type='3 * int64'>\r\n>>> ak.sum(original, axis=-1, keepdims=True)\r\n<Array [[1], [0], [5]] type='3 * 1 * int64'>\r\n```\r\n\r\nbut the output array has numbers without parameters. It seems that `sum` ought to be a `List[T] \u2192 T` function, and thus preserve whatever parameters `T` has. This isn't the case for all reducers:\r\n\r\n* `ak.all` perhaps ought to keep any parameters on booleans, but shouldn't keep parameters if it converts numbers into booleans (`False` for anything equal to zero; `True` otherwise).\r\n* `ak.any` same argument.\r\n* `ak.sum`, `ak.nansum` ought to keep parameters.\r\n* `ak.prod`, `ak.nanprod` ought to keep parameters.\r\n* `ak.max`, `ak.nanmax` should keep parameters, and the case is stronger here than it is with the sum and product reducers.\r\n* `ak.min`, `ak.nanmin` same argument.\r\n* `ak.argmax`, `ak.nanargmax` absolutely should not keep parameters, since it returns an index type that is unrelated to whatever input it is given, `List[T] \u2192 int64`.\r\n* `ak.argmin`, `ak.nanargmin` same argument.\r\n* `ak.count` same argument. The count is a new integer type.\r\n* `ak.count_nonzero` same argument.\r\n\r\nThe same thing could be said of non-reducer statistics that reduce dimension:\r\n\r\n* `ak.moment` perhaps ought to keep parameters, for the same reasons that `ak.sum` does.\r\n* `ak.mean`, `ak.nanmean` same argument.\r\n* `ak.var`, `ak.nanvar` same argument.\r\n* `ak.std`, `ak.nanstd` same argument.\r\n* `ak.covar` has two input arrays and multiplies their elements. That should not preserve type.\r\n* `ak.corr` also divides by them and returns a unitless number. That should not preserve type.\r\n* `ak.linear_fit` same argument.\r\n* `ak.ptp` should keep parameters for the same reasons that `ak.min` and `ak.max` do.\r\n* `ak.softmax` should not, for the same reasons as `ak.corr`.\r\n\r\nIt quickly gets to be a complicated landscape. We want to come up with a simple rule for this, so that it's easy to predict what's going to happen (and whether some observed behavior is a bug or not).\r\n\r\nThe simplest rule would be that they should never preserve their parameters, which is the status quo. Maybe this isn't what one wants, but parameters can be reintroduced, and at least it's easy to know what's going to happen.\r\n\r\nThe next-simplest rule would be that only `ak.max`, `ak.nanmax`, `ak.min`, `ak.nanmin` and maybe `ak.ptp` preserve parameters. By asking for the maximum or minimum such-and-such, you expect to get a such-and-such back. (`ak.ptp` might get this for free, depending on how it is implemented.)\r\n\r\nThe next-to-next-simplest rule would be to also include `ak.sum`, `ak.nansum`, `ak.prod`, `ak.nanprod`, and maybe `ak.moment`, `ak.mean`, `ak.nanmean`, `ak.var`, `ak.nanvar`, `ak.std`, and `ak.nanstd` (which wouldn't get it for free; they'd have to keep the division by counts from dropping the parameters).\r\n\r\nThe \"next-simplest rule\" above looks the most reasonable to me, until we start talking about units. If we're propagating units, using Pint on all of the ufuncs and implementing it ourselves for the reducers (because we always have to implement special features on reducers; there's no avoiding it), then we'd have to do special things for sums versus products, and `ak.covar`, `ak.linear_fit`, and `ak.softmax` get very interesting.",
  "created_at":"2023-06-26T19:44:28Z",
  "id":1608129119,
  "issue":2544,
  "node_id":"IC_kwDODBCWws5f2hpf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T19:44:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> When we keep parameters, it is because we want to keep the type unchanged,\r\n\r\nI've not been operating under that impression hitherto. I've applied this rule for nominal parameters like `__array__`, but not for others. \r\n\r\n> How disruptive of a backward-incompatible change would it be to preserve the is_regular of the lists when keeping a list-type with keepdims=True?\r\n\r\nI think we decided a policy _not_ to do this (see https://github.com/scikit-hep/awkward/pull/1943#issuecomment-1336197310).\r\n\r\n> It quickly gets to be a complicated landscape. We want to come up with a simple rule for this, so that it's easy to predict what's going to happen (and whether some observed behavior is a bug or not).\r\n\r\nYes :disappointed:. Depending upon your view for non-nominal parameters, it could be that these should always be preserved, whilst nominal parameters are governed by the rules you outline above. My rules would be:\r\n\r\n1. Preserve non-nominal parameters in all cases\r\n2. Preserve nominal parameters for `sum`, `min`, `max`, `prod`, `ptp`, `moment`, `mean`, `var`, `std`, and their `nan` variants.\r\n\r\nUnit handling _does_ get complicated, but we already need to consider units for reducers in #2545. I'm hoping that the unit conversion will happen first, and thereafter units are *just* another parameter (that we don't want to lose!)",
  "created_at":"2023-06-26T20:22:22Z",
  "id":1608191056,
  "issue":2544,
  "node_id":"IC_kwDODBCWws5f2wxQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T20:34:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I think we decided a policy _not_ to do this (see [#1943 (comment)](https://github.com/scikit-hep/awkward/pull/1943#issuecomment-1336197310)).\r\n\r\nOh, right.\r\n\r\n------\r\n\r\nI'm neutral on whether `__units__` is a special parameter, following the same propagation rules as `__record__`, or whether it's an ordinary parameter, following the same propagation rules as `gobbletygook`. As long as it's one or the other.\r\n\r\nIn the implementation, you might find that you need to make it special.\r\n\r\n------\r\n\r\nOut of the functions in your list, `prod` (and `nanprod`) is actually incompatible with units.\r\n\r\n```python\r\n>>> array = ak.unflatten(ak.with_parameter([1, 2, 3, 4, 5], \"__units__\", \"cm\"), [3, 0, 2])\r\n>>> array\r\n<Array [[1, 2, 3], [], [4, 5]] type='3 * var * int64[parameters={\"__units__...'>\r\n\r\n>>> ak.prod(array, axis=-1)\r\n<Array [6, 1, 20] type='3 * int64'>\r\n```\r\n\r\nTechnically, the units of the first element of the output should be $\\mbox{cm}^2$, the second element should be unitless, and the third element should be $\\mbox{cm}^3$. But units have to be the same for a whole array, so that's out of the question.\r\n\r\nI don't think any of the others are incompatible with units, and the statistical functions implemented by reducers may be able to inherit the correct unit propagation automatically once the reducers are done.",
  "created_at":"2023-06-26T20:47:19Z",
  "id":1608229866,
  "issue":2544,
  "node_id":"IC_kwDODBCWws5f26Pq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T20:47:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Out of the functions in your list, prod (and nanprod) is actually incompatible with units.\r\n\r\nYep, good spot (I was thinking about the group properties of the _numerics_). I wonder what the mathematical analogue is for the units. `pint` is able to decide upon a unit for `np.prod` upon regular arrays, but we have the problem of ragged arrays (as you point out).",
  "created_at":"2023-06-26T20:54:29Z",
  "id":1608241787,
  "issue":2544,
  "node_id":"IC_kwDODBCWws5f29J7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T20:54:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm just playing around here.\r\n\r\nThere are two separate possibilities for adding unit support:\r\n1. We implement units as an array behavior\r\n2. We implement units as a fundamental (orthogonal) feature\r\n\r\nThis PR implements (2). \r\n\r\nI think (1) is a worse prospect, because it prevents users/library authors from adding array behaviors in addition to units, unless they re-implement the entire units mechanism themselves. Our current typestring override logic is not advanced enough to let users fully mimic a custom units typestring, so this would be noticeable.\r\n\r\nMy current thinking is that we want to reserve behaviors for users/library authors, *not* core features; otherwise we preclude their use. That is to say, just because library authors *could* implement unit support using behaviors, does not mean to say that we should do so ourselves.\r\n\r\n@jpivarski how does that logic sound?",
  "created_at":"2023-06-26T15:05:15Z",
  "id":1607678143,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f0zi_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T15:05:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I agree that (2) is a good way to go, and we can be opinionated about Pint registries being the preferred way to get units.\r\n\r\nI think we already know that Vector would want to \"play well\" (i.e. \"compose\") with the application of units, so we would either need to immediately make behavior-composition possible or develop built-in units with an eye toward compatibility with Vector. The latter is more pragmatic.",
  "created_at":"2023-06-26T18:58:14Z",
  "id":1608062220,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f2RUM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T18:58:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I agree that behavior composition is less pragmatic \u2014 it is a can of worms given our existing 1:1 approach for names-classes. \r\n\r\nDoes this mean that you're in favour of e.g. units being added to records, rather than their fields? I can see an argument in both directions and I'm on the fence; there's an elegance to nor limiting ourselves to `NumpyArray`. \r\n\r\nYou're right about `pint` being only one example of a unit registry. My current thinking is that whilst our interface can try to avoid pulling pint into too many modules internally, we probably don't want to make this pluggable, otherwise we would need to define a specification for units. I think `pint` is well enough established that we can just say \"we're using pint's interpretation of units\".",
  "created_at":"2023-06-26T19:17:42Z",
  "id":1608090532,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f2YOk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T19:17:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think units should be added to `NumpyArray`/`NumpyForm` (non-temporal dtypes only). It has nothing to do with records. But it seems that's your idea, too:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/afd3855c6e7cbc7924e3924eab50c4231020de61/src/awkward/contents/content.py#L105\r\n\r\nSorry if whatever I said led you to think about records.\r\n\r\nVector defines behaviors on records, that's true. But if you define the right unit-behaviors on `NumpyArray`, then they _should_ pass through Vector's formulas correctly. For example, Vector converts Cartesian to polar with\r\n\r\n```python\r\nlib.sqrt(x**2 + y**2)\r\n```\r\n\r\nwhere `lib` is usually `numpy`. If `x` is in $\\mbox{cm}$ and `y` is in $\\mbox{mm}$, `x**2` becomes $\\mbox{cm}^2$ and `y**2` becomes $\\mbox{mm}^2$, the `numpy.add` ufunc puts them in a common unit, and the `numpy.sqrt` reduces that unit by a power. Pint may need to be a backend to make the ufuncs work, or maybe it can be queried in a metadata-only way so that it's equally applicable to CuPy arrays. (So that units compose with backends, as well as behaviors. Or `PintBackend` could be a non-singleton that gets instantiated with an other backend.)\r\n\r\nThis is all that Vector is doing when it sets the fields of record arrays to `x`, `y`, and `rho`, so if we get the ufuncs right, it _ought_ to just pass through Vector. I wouldn't believe it without seeing it demonstrated, though\u2014there are a lot of little things that could go wrong. Unfortunately, we're obliged to do the reducers ourselves, but Vector has only one reducer.\r\n\r\n> You're right about `pint` being only one example of a unit registry. My current thinking is that whilst our interface can try to avoid pulling pint into too many modules internally, we probably don't want to make this pluggable, otherwise we would need to define a specification for units. I think `pint` is well enough established that we can just say \"we're using pint's interpretation of units\".\r\n\r\nThat's what I meant, too: that we can freely use Pint as though it's the only system for handling units because it's so well established. The \"registry\" I was referring to is `pint.UnitRegistry`. I think that the implementation would use that, rather than carrying unit information in `pint.Quantity` arrays, since the latter would definitely require a new Awkward backend and would require extra work in implementing reducers.\r\n\r\nI was not suggesting that we make the system of units pluggable the way that backends are pluggable. For something like this, we can ask people to express their units in Pint's terms.",
  "created_at":"2023-06-26T20:31:17Z",
  "id":1608201978,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f2zb6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T20:31:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Sorry if whatever I said led you to think about records.\r\n\r\nI was thinking about vector!\r\n\r\n`pint` plays nicely with `__array_function__` and `__array_ufunc__`, so we don't _need_ to restrict units to 1D NumpyArray nodes. My sense is to start with that restriction, as we can't tighten it up later very easily.\r\n\r\n> Pint may need to be a backend to make the ufuncs work, or maybe it can be queried in a metadata-only way so that it's equally applicable to CuPy arrays\r\n\r\nThankfully, due to the above, it does work nicely with `cupy` and `jax` (at least, trivially). However, this PR uses `Quantity(ak.Array)`, given that we also implement `__array_function__` et al. That means we can ensure user functions don't have to handle units (although, maybe that's a bad design decision - maybe library authors would want that.",
  "created_at":"2023-06-26T21:00:19Z",
  "id":1608252281,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f2_t5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T21:00:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't see how we can use `pint.Quantity(ak.Array)` (Pint on the outside), since an `ak.Array` can have many `NumpyArrays`, all with different units.\r\n\r\nIf we use `pint.Quantity` anywhere, it would have to be as the array class associated with a new `Backend` (Pint on the inside), and _then_ it wouldn't compose with choice-of-backend unless that new `PintBackend` took another `Backend` as its constructor argument:\r\n\r\n```python\r\nbackend = PintBackend(CupyBackend)\r\n```\r\n\r\nBut maybe we don't use `pint.Quantity` anywhere, or we only briefly make the `pint.Quantity` from the `__units__` immediately before passing arrays to a ufunc in `ak._connect.numpy.array_ufunc` and break it back down into the `Backend`'s array class before passing it on. We could benefit from Pint's `__array_ufunc__` that way without introducing a new `PintBackend`, but its `__array_function__` wouldn't provide much benefit, and of course we have to handle reducers ourselves (as usual).\r\n\r\nIn either of the two possible implementations, Vectors with units _should_ pass through (i.e. compose), but that remains to be seen. An array of vectors could be constructed with different units in its `x` and `y` fields, and computations of `rho` would regularize them to whatever Pint prefers in the `np.add` ufunc step. That _should_ work automatically, if Pint is implemented on the inside, not the outside.",
  "created_at":"2023-06-26T22:40:51Z",
  "id":1608416482,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f3nzi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T22:40:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I don't see how we can use pint.Quantity(ak.Array) (Pint on the outside), since an ak.Array can have many NumpyArrays, all with different units.\r\n\r\nThat's what this PR does in three phases:\r\n1. Strip the `__units__` parameter, and create a `reg.Quantity(array_without_units, array.parameter(\"__units__\"))`\r\n2. Invoke the reducer upon these decorated arrays\r\n3. Pull out the result array, and set the units as a parameter.\r\n\r\n> But maybe we don't use pint.Quantity anywhere, or we only briefly make the pint.Quantity from the __units__ immediately before passing arrays to a ufunc in ak._connect.numpy.array_ufunc and break it back down into the Backend's array class before passing it on.\r\n\r\nYes, this! ",
  "created_at":"2023-06-26T23:38:55Z",
  "id":1608466046,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f3z5-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T23:38:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"In https://github.com/scikit-hep/awkward/pull/2545#issuecomment-1608466046, \"array\" means a rectilinear buffer, not an `ak.Array`, right?\r\n\r\nThat would be (e.g. for the `NumpyBackend`) using `pint.Quantity(np.ndarray, the_units_string)`, possibly in a short-lived way, but it would not be using `pint.Quantity(ak.Array)` at any point.",
  "created_at":"2023-06-27T00:38:19Z",
  "id":1608532651,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f4EKr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T00:38:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"No, it can wrap `ak.Array`; we also implement `__array_function__` / `__array_ufunc__`, so we can handle the basic operations that pint performs. We *could* also implement this via the underlying `NumpyArray.data`, but that precludes us from putting units on higher-level objects (like records, or lists), should we see fit to do so.",
  "created_at":"2023-06-27T01:05:26Z",
  "id":1608551370,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f4IvK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T01:05:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"But, conceptually, an `ak.Array` shouldn't have units. Units don't make sense on any of the data structures except numbers (`NumpyArray`), which are strictly at the leaves of the tree. A record or a list can't have units of, say, centimeters. Only the fields of a record (if they're numerical) can have units\u2014different units for different fields\u2014and only the items of a list (if they're numerical) can have units.\r\n\r\nI'm not talking about technical difficulties in making a `pint.Quantity(ak.Array)`, but conceptual ones. It makes sense to put units on the leaves of the tree; it only makes sense to put units on the whole tree when the whole tree consists of just one leaf (a 1-D numerical `ak.Array`).",
  "created_at":"2023-06-27T02:43:44Z",
  "id":1608645296,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f4fqw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T02:43:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> But, conceptually, an ak.Array shouldn't have units. Units don't make sense on any of the data structures except numbers (NumpyArray), which are strictly at the leaves of the tree. A record or a list can't have units of, say, centimeters. Only the fields of a record (if they're numerical) can have units\u2014different units for different fields\u2014and only the items of a list (if they're numerical) can have units.\r\n\r\nIt might seem like I'm being pedantic on this, but I'm rather trying to elucidate the desired behavior. I think it does make sense to have units on records; it's a way of saying \"all fields have the same unit\". I also don't think we want to open that can of worms \u2014 thinking about it this morning, this would make operations of `record.x + other_value_with_units` fail, as `record.x` doesn't itself have units. Rather than complicate things with unit propagation, we should just constrain this to the leaves.",
  "created_at":"2023-06-27T07:50:21Z",
  "id":1608976568,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f5wi4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T07:50:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"For several of the coordinate systems in Vector, the units on each field would be different.\r\n\r\n * planar $\\rho$, $\\phi$: the $\\rho$ has length, the $\\phi$ is unitless\r\n * spatial $\\theta$ and $\\eta$ are unitless, but the planar part would have units (just $\\rho$ or both $x$ and $y$)\r\n * Lorentz $E$ and $m$ are technically different units from the spatial part, though we usually work in systems in which $c = 1$ so it doesn't matter. But an energy _might_ be expressed in Joules or a mass _might_ be in grams, and then converting them to sensible units for combination with the momenta would be important.\r\n\r\nIn Vector, associations between the fields of the records are generally loose. For instance, they don't even need to be the same numeric type: $x$ can be `int32` and $y$ can be `float64`. They'd all get promoted to the widest floating-point type pretty quickly, after a few steps in the calculation, but if we're not even forcing the numeric types to be the same among fields, it would be weird to force the units, which even have to be different for some coordinate systems.\r\n\r\n(Can you tell I'm enjoying GitHub's $\\LaTeX$ features?)",
  "created_at":"2023-06-27T18:41:18Z",
  "id":1610036953,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f9zbZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T18:41:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> (Can you tell I'm enjoying GitHub's \\LaTeX features?)\r\n\r\nI can now, haha!",
  "created_at":"2023-06-27T19:16:15Z",
  "id":1610082432,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5f9-iA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T19:16:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2545](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cf78d7b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/002a3afabf5511955b89bf25dcbb3b56d528df2f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (002a3af) will **decrease** coverage by `0.12%`.\n> The diff coverage is `56.55%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `92.60% <0.00%> (-0.43%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_pint.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19waW50LnB5) | `43.75% <43.75%> (\u00f8)` | |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `84.45% <47.82%> (-7.42%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_from\\_pint.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BpbnQucHk=) | `50.00% <50.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.07% <63.63%> (-0.10%)` | :arrow_down: |\n| [src/awkward/units.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdW5pdHMucHk=) | `71.42% <71.42%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `85.04% <100.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2545/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-07-03T11:19:17Z",
  "id":1617990235,
  "issue":2545,
  "node_id":"IC_kwDODBCWws5gcJJb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T11:19:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2546?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2546](https://app.codecov.io/gh/scikit-hep/awkward/pull/2546?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6170ffa) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a50db5a4bac876ebf146eaf6e8e5e02870045b60?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a50db5a) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-06-26T18:10:33Z",
  "id":1607981018,
  "issue":2546,
  "node_id":"IC_kwDODBCWws5f19fa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-26T18:10:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"From #873, whilst the `__iter__` and `__getitem__` logic on _string_ arrays will give us Python strings, the same operations on arrays of `char` do not. \r\n\r\nThe reason for this is that #873 implements the `uint8[] \u2192 str` transformation in `ak.Array.__getitem__`. We can't do the same for `char`, because the `NumpyArray._getitem_at` operation on `char` returns an integer, with no metadata about the fact that it is a unicode code point. \r\n\r\nThe \"obvious\" solution is to make `NumpyArray._getitem_at` aware of `char`/`byte`, and return the Python type. But, for symmetry reasons that makes me wonder whether `ListOffsetArray` should do the same for strings, and the existing logic on `ak.Array` be removed.\r\n\r\nI can't clearly see what the risks of doing this are. My hunch is that it would be fine; anything interacting with layouts on a per-item basis can pay the cost of string conversion. But, your thoughts are welcome here @jpivarski ",
  "created_at":"2023-06-27T14:28:36Z",
  "id":1609625243,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5f8O6b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T14:31:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think you should go with the \"obvious\" solution of adding the `parameter` check in `NumpyArray._getitem_at`, just as it is in `ListOffsetArray._getitem_at`. We can say that the reason the check is duplicated is for performance: putting together a string by repeatedly calling `NumpyArray._getitem_at` and having it repeatedly check the `parameters` would be a waste when it can be done once at the list level.\r\n\r\nThe weirdness of having lists check for stringiness and return a `str` and also having list contents check for stringiness and return a `str` is due to Python: the characters of a string are not a different type from the string itself. Formally, you'd expect them to be different, as they are in C (`char` vs `char*`) or C++ (`char` vs `std::string`) or Java (`char` vs `java.lang.String`). The weirdness is evident in that this doesn't terminate or raise an error:\r\n\r\n```python\r\ndef iterate_over(thing):\r\n    for x in thing:\r\n        print(x)\r\n        iterate_over(x)\r\n\r\niterate_over(\"a string\")\r\n```\r\n\r\nBut to comply with Pythonic expectations, both list types and `NumpyArray` should check `parameters` and return a `str`.",
  "created_at":"2023-06-27T18:52:07Z",
  "id":1610049723,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5f92i7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T18:52:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I think you should go with the \"obvious\" solution of adding the `parameter` check in `NumpyArray._getitem_at`, just as it is in `ListOffsetArray._getitem_at`. We can say that the reason the check is duplicated is for performance: putting together a string by repeatedly calling `NumpyArray._getitem_at` and having it repeatedly check the `parameters` would be a waste when it can be done once at the list level.\r\n> \r\n> The weirdness of having lists check for stringiness and return a `str` and also having list contents check for stringiness and return a `str` is due to Python: the characters of a string are not a different type from the string itself. Formally, you'd expect them to be different, as they are in C (`char` vs `char*`) or C++ (`char` vs `std::string`) or Java (`char` vs `java.lang.String`). The weirdness is evident in that this doesn't terminate or raise an error:\r\n> \r\n> ```python\r\n> def iterate_over(thing):\r\n>     for x in thing:\r\n>         print(x)\r\n>         iterate_over(x)\r\n> \r\n> iterate_over(\"a string\")\r\n> ```\r\n> \r\n> But to comply with Pythonic expectations, both list types and `NumpyArray` should check `parameters` and return a `str`.\r\n\r\nCould you clarify this slightly? The `ListOffsetArray` (et al.) and `NumpyArray` cater to different types; `char` is set on `NumpyArray`, whilst `string` is set on `ListOffsetArray`. Whilst it's hard to get a bare `NumpyArray(..., parameters={\"__array__\": \"char\"})`, it's not impossible (`ak.Array(ak.to_layout(\"hello\"))`), and it is also trivial to pull out a character from a string (`ak.Array([\"hello\"])[0, 0]`). Pulling out characters and whole strings should both involve casting to a Python type (str, and str again!). \r\n\r\nThe question for me is whether this should always happen in `Content._getitem_at`, rather than only enforced at the highlevel. We can't actually enforce the `char` logic at highlevel for the reasons outlined above.",
  "created_at":"2023-06-27T19:19:12Z",
  "id":1610086164,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5f9_cU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T19:19:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, that's right: it was handled in `ak.Array.__getitem__` (high-level) because there are multiple `Content._getitem` paths that can get you to a string or char: direct `_getitem_at` and indirect `_getitem_next`. We don't want one to return a length-1 `str` and the other to return an `np.uint8`.\r\n\r\nYeah, this test only happens at high-level:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/f2783ba480b5f9f668b687e327d0a5a453b82e5b/src/awkward/highlevel.py#L950-L958\r\n\r\nand not at low-level:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/f2783ba480b5f9f668b687e327d0a5a453b82e5b/src/awkward/contents/listoffsetarray.py#L290-L303\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/f2783ba480b5f9f668b687e327d0a5a453b82e5b/src/awkward/contents/numpyarray.py#L295-L303\r\n\r\n-------------\r\n\r\n```python\r\n>>> del ak.behavior[\"char\"]\r\n>>> ak.Array(ak.to_layout(\"hello\"))\r\n<Array [104, 101, 108, 108, 111] type='5 * char'>\r\n>>> ak.Array(ak.to_layout(\"hellothere\"))[0]\r\n104\r\n```\r\n\r\nSo the problem is conveying the information that the final result of the slice is a char from the last step of `Content.__getitem__`, which could be `_getitem_at`, `_getitem_next`, or (maybe?) something else, to the `ak.Array.__getitem__` routine, which does not deeply inspect the `Content`'s `__getitem__` machinery, just the final result. By the time it gets a `np.uint8`, the information about it being a char is gone.\r\n\r\nWell, `NumpyArray._getitem_at`, `NumpyArray._getitem_next`, etc. could return `np.character`...?\r\n\r\n-------\r\n\r\nNo: here's a better idea. Note that Awkward slicing does not make a distinction between string and bytestring: if you index the contents of a Unicode string, your indexes are not counting Unicode characters; they're counting bytes. That was a decision to keep the slicing rules simple; a Unicode-aware codepoint-index slice could be implemented in a future strings module. (It would need compiled routines to get all the variable-width UTF-8 rules right.)\r\n\r\n```python\r\n>>> money = ak.Array([\"$\", \"\u00a2\", \"\u20ac\", \"\ud83d\udcb0\"])\r\n\r\n>>> ak.num(money)\r\n<Array [1, 2, 3, 4] type='4 * int64'>\r\n\r\n>>> money.layout\r\n<ListOffsetArray len='4'>\r\n    <parameter name='__array__'>'string'</parameter>\r\n    <offsets><Index dtype='int64' len='5'>\r\n        [ 0  1  3  6 10]\r\n    </Index></offsets>\r\n    <content><NumpyArray dtype='uint8' len='10'>\r\n        <parameter name='__array__'>'char'</parameter>\r\n        [ 36 194 162 226 130 172 240 159 146 176]\r\n    </NumpyArray></content>\r\n</ListOffsetArray>\r\n\r\n>>> money[0, 0]\r\n36\r\n>>> money[1, 0]\r\n194\r\n>>> money[1, 1]\r\n162\r\n>>> money[2, 0]\r\n226\r\n>>> money[2, 1]\r\n130\r\n>>> money[2, 2]\r\n172\r\n>>> money[3, 0]\r\n240\r\n>>> money[3, 1]\r\n159\r\n>>> money[3, 2]\r\n146\r\n>>> money[3, 3]\r\n176\r\n```\r\n\r\nConsidering that `ak.Array.__getitem__` into a string _does not give you Unicode characters_, we can't expect it to give you a length-1 string. It's showing you _part_ of a UTF-8 encoding.\r\n\r\nSo this could just be a policy decision: we always show individual-item selections of a string as integers. That's what Python 3 users expect of `bytes` but not `str`:\r\n\r\n```python\r\n>>> list(\"$\u00a2\u20ac\ud83d\udcb0\")\r\n['$', '\u00a2', '\u20ac', '\ud83d\udcb0']\r\n\r\n>>> list(\"$\u00a2\u20ac\ud83d\udcb0\".encode(\"utf-8\"))\r\n[36, 194, 162, 226, 130, 172, 240, 159, 146, 176]\r\n```\r\n\r\nThe policy can be that Awkward returns integers from both bytestrings and strings because it's not really selecting characters, anyway. I see a stronger case that this is the _right_ thing to do, though it's not obvious at first and we may find ourselves explaining it as a gotcha.\r\n\r\nIn other words,\r\n\r\n```python\r\n>>> del ak.behavior[\"char\"]\r\n\r\n>>> ak.Array(ak.to_layout(\"hello\"))\r\n<Array [104, 101, 108, 108, 111] type='5 * char'>\r\n\r\n>>> ak.Array(ak.to_layout([\"hello\", \"there\"]))\r\n<Array ['hello', 'there'] type='2 * string'>\r\n```\r\n\r\nis fine as-is. What do you think of that?",
  "created_at":"2023-06-27T20:15:14Z",
  "id":1610154172,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5f-QC8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T20:15:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> is fine as-is. What do you think of that?\r\n\r\nIn general, I strongly prefer this. I'd really like to drop as much magic from these routines as possible, so that we can more easily reason about what's going on here!\r\n\r\nI was looking to modify `NumpyArray.to_list()` to return integers instead of bytestrings for `char`, so this all fits in very nicely.",
  "created_at":"2023-06-27T21:22:14Z",
  "id":1610237983,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5f-kgf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T21:23:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, the latest iteration is thus:\r\n- `to_list` still converts `char` arrays to a single string.\r\n- `N * char` \u2192 `str` conversion still happens in `Array.__getitem__` & `Array.__iter__` (we want to be able to access the low-level `char` nodes at low-level, e.g. in `from_iter` with strings).\r\n- `ak.prettyprint` renders `char` arrays as `[101, 93, 50, ...]` instead of `\"e]2...\"`. This is to ensure that parameters are still visible. If we _really_ want this to render like a string, we can.\r\n- `char` elements are always returned as integers, because they may be partical codepoints\r\n\r\n",
  "created_at":"2023-06-27T22:46:15Z",
  "id":1610320237,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5f-4lt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T22:46:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2547](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (79dbd36) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/0901aa4d2c571a09b8b59a77a55871b9d3e82ed0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0901aa4) will **increase** coverage by `0.06%`.\n> The diff coverage is `91.72%`.\n\n> :exclamation: Current head 79dbd36 differs from pull request most recent head b370831. Consider uploading reports for the commit b370831 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.96% <\u00f8> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `86.94% <\u00f8> (\u00f8)` | |\n| [src/awkward/behaviors/string.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `63.63% <\u00f8> (-10.87%)` | :arrow_down: |\n| [src/awkward/behaviors/categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL2NhdGVnb3JpY2FsLnB5) | `71.42% <50.00%> (-3.92%)` | :arrow_down: |\n| [src/awkward/\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2NhdGVnb3JpY2FsLnB5) | `58.62% <58.62%> (\u00f8)` | |\n| [src/awkward/\\_prettyprint.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3ByZXR0eXByaW50LnB5) | `69.38% <60.00%> (-2.76%)` | :arrow_down: |\n| [src/awkward/types/type.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdHlwZS5weQ==) | `93.95% <88.88%> (-0.39%)` | :arrow_down: |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.18% <95.83%> (+0.19%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `77.11% <95.83%> (+0.28%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.80% <96.47%> (-2.74%)` | :arrow_down: |\n| ... and [7 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2547/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-27T22:46:35Z",
  "id":1610320559,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5f-4qv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-28T21:18:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Having char _arrays_ convert to `str`/`bytes` sounds like a good idea, and it's probably implemented that way either because your or I expected it or someone asked for it.\r\n\r\n_Individual items_ pulled from a char array should be integers, because they could be a partial codepoint.\r\n\r\nThe only odd one out is the pretty-print of a char array as a list of integers. Any alternative would be a very special case, since it would be a pretty-printed array that doesn't begin and end with `[` and `]`. I'd say we don't need to do that unless asked, when asked. Changing `repr` is not what I would consider a backward-incompatible change, since no one should be depending on the formatting of a `repr` (Python anti-pattern).",
  "created_at":"2023-06-27T22:51:14Z",
  "id":1610323932,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5f-5fc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T22:51:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I believe this is good to go. Overall, it removes a feature: the ability to add two `char` / `byte` arrays. It isn't very easy to identify this from existing repo usage given, but my feeling is that this is very niche. Due to `Array._getitem`, it should be difficult to obtain a bare char array unless one performs `ak.to_layout(\"hello world\")`.\r\n",
  "created_at":"2023-06-28T11:38:14Z",
  "id":1611245003,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5gCaXL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-28T11:38:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski could you check whether I've added the typer and lowering in the best place? It seems to wrap the getitem result, but I don't know enough about what to expect here!",
  "created_at":"2023-06-28T14:52:15Z",
  "id":1611593361,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5gDvaR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-28T14:52:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski could you check whether I've added the typer and lowering in the best place? It seems to wrap the getitem result, but I don't know enough about what to expect here!\r\n\r\nWhile talking about this on Zoom, I looked into it, and I think that checking at the level of `ContentType.getitem_at_check` is fine. The string check _could_ be done only in the list types, but going to the extra work of changing it to do that is unnecessary. Upon entering a Numba context, we assume that the array is fully valid; `__array__: string` would only be on list-types, so the check on all other types would always return `False`.",
  "created_at":"2023-06-28T15:00:38Z",
  "id":1611607315,
  "issue":2547,
  "node_id":"IC_kwDODBCWws5gDy0T",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-28T15:00:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2548?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2548](https://app.codecov.io/gh/scikit-hep/awkward/pull/2548?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3b944e7) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f2783ba480b5f9f668b687e327d0a5a453b82e5b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f2783ba) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2548?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/form.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2548?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `82.48% <100.00%> (\u00f8)` | |\n| [src/awkward/forms/recordform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2548?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvcmVjb3JkZm9ybS5weQ==) | `89.44% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-06-27T18:00:32Z",
  "id":1609981087,
  "issue":2548,
  "node_id":"IC_kwDODBCWws5f9lyf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-27T18:00:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2549](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dcd86b3) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/1f6041ed63cc43befe5988798805c40003f9c775?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1f6041e) will **increase** coverage by `0.38%`.\n> The diff coverage is `89.06%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_parameters.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BhcmFtZXRlcnMucHk=) | `82.95% <57.14%> (+0.19%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.86% <80.00%> (+0.06%)` | :arrow_up: |\n| [src/awkward/record.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `83.53% <80.00%> (-0.42%)` | :arrow_down: |\n| [src/awkward/forms/emptyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `84.26% <83.33%> (+0.17%)` | :arrow_up: |\n| [src/awkward/forms/numpyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbnVtcHlmb3JtLnB5) | `95.83% <83.33%> (-0.81%)` | :arrow_down: |\n| [src/awkward/forms/bitmaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `85.41% <85.71%> (+0.31%)` | :arrow_up: |\n| [src/awkward/forms/bytemaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `84.44% <85.71%> (+0.35%)` | :arrow_up: |\n| [src/awkward/forms/unionform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5pb25mb3JtLnB5) | `87.50% <85.71%> (+0.26%)` | :arrow_up: |\n| [src/awkward/forms/unmaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5tYXNrZWRmb3JtLnB5) | `84.61% <85.71%> (+0.40%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.16% <87.50%> (+0.13%)` | :arrow_up: |\n| ... and [9 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [12 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2549/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-29T11:01:43Z",
  "id":1612899022,
  "issue":2549,
  "node_id":"IC_kwDODBCWws5gIuLO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T22:08:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The addition of the new `__list__` nominal type parameter provides the ability to set `__typestr__` for a list type. However, unlike records which can sensibly be considered atoms, lists are usually part of a deeper structure that we care about seeing the type of. Having\r\n`N * my-list` instead of `N * my-list * int64` is worse. I wonder if we should think about this before merging this PR.",
  "created_at":"2023-06-29T14:13:35Z",
  "id":1613257404,
  "issue":2549,
  "node_id":"IC_kwDODBCWws5gKFq8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T14:13:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> The addition of the new `__list__` nominal type parameter provides the ability to set `__typestr__` for a list type. However, unlike records which can sensibly be considered atoms, lists are usually part of a deeper structure that we care about seeing the type of. Having `N * my-list` instead of `N * my-list * int64` is worse. I wonder if we should think about this before merging this PR.\r\n\r\nSorry that I missed this question!\r\n\r\nA `__typestr__` for `__list__` would be useful because a common reason to override a list would be to define an opaque binary blob. The developer of that library would want the type of the hidden data to show up as \"`my-list`\", _without_ any hint about the contents. So, for instance,\r\n\r\n```\r\n1000 * var * PNG-image\r\n```\r\n\r\nfor an array of lists of overloaded bytestrings that are interpreted as PNG images.\r\n\r\nThe `__typestr__` was introduced to make it possible to label strings as `string` and adhere to Datashape, as part of the goal of making string entirely user-definable. I think that was already gone at the time when Awkward 1 was converted to Awkward 2.\r\n\r\nSince then, the `__typestr__` was useful for overloaded records, in which the library developer wanted to hide the details of the record structure. (I think this was in some version of Coffea.)\r\n\r\nThe bytestring use-case (I can't think of any others, involving `__list__`) would also want to hide the internal structure of the list, for the same reason. In fact, that was also true when `__typestr__` was set to `\"string\"`.\r\n\r\nSo yes, I think it would be a good addition, but it can be applied in the same way that it is for `__record__`, which is simpler than trying to let the inner contents through (or parameterize/templatize `__typestr__` in some way).",
  "created_at":"2023-06-29T22:13:19Z",
  "id":1613868766,
  "issue":2549,
  "node_id":"IC_kwDODBCWws5gMa7e",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-06-29T22:13:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2550?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2550](https://app.codecov.io/gh/scikit-hep/awkward/pull/2550?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4cba0f5) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/1f6041ed63cc43befe5988798805c40003f9c775?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1f6041e) will **decrease** coverage by `0.01%`.\n> The diff coverage is `66.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2550?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2550?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.64% <\u00f8> (+0.31%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2550?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.00% <\u00f8> (-0.04%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2550?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.32% <33.33%> (-0.28%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2550?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.99% <100.00%> (+0.14%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-06-29T14:42:42Z",
  "id":1613308143,
  "issue":2550,
  "node_id":"IC_kwDODBCWws5gKSDv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T14:42:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I don't think it was failing to recurse before: my reading of the red/removed code is that it would only stop recursion if it hit an error, which is what it's supposed to do. (I didn't construct a test, though.)\r\n\r\n\r\n\r\nThe intention was that we have cross-layout checks in a separate method. However, only `ak._do.validity_error` checked this for the top-level layout (hence the test). We might still want a dedicated `ak.Content._validity_error_parameters` function in future (if we have such checks), but this is L3 and we don't currently need it.",
  "created_at":"2023-06-29T22:00:54Z",
  "id":1613859049,
  "issue":2550,
  "node_id":"IC_kwDODBCWws5gMYjp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T22:00:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna RE `EmptyArray`, do you have any reproducers? From looking at the source code, we perform the same check for the form and the array.\r\n\r\nConcerning `int32` and `i32`, my understanding is that we want a single value, and we're currently using `i32`. We don't do much validation in the forms, though, so perhaps we should.\r\n\r\nAs for the `_dtype_to_form`, we only support integer types for masks, even booleans. How are we ending up with a boolean?",
  "created_at":"2023-06-29T14:36:24Z",
  "id":1613298291,
  "issue":2551,
  "node_id":"IC_kwDODBCWws5gKPpz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T14:36:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna RE `EmptyArray`, do you have any reproducers? From looking at the source code, we perform the same check for the form and the array.\r\n> \r\nOh... yes, my fault. I should update the `Empty` layout builder to check that `parameters` are always `None`.\r\n```python\r\n>>> layout = ak.contents.EmptyArray(parameters={\"When I was one\": \"I just begun\"})\r\n<stdin>:1: DeprecationWarning: In version 2.2.0, this will be an error.\r\nTo raise these warnings as errors (and get stack traces to find out where they're called), run\r\n    import warnings\r\n    warnings.filterwarnings(\"error\", module=\"awkward.*\")\r\nafter the first `import awkward` or use `@pytest.mark.filterwarnings(\"error:::awkward.*\")` in pytest.\r\nIssue: EmptyArray cannot contain parameters.\r\n>>> layout = ak.contents.EmptyArray(parameters=None)\r\n```\r\n> Concerning `int32` and `i32`, my understanding is that we want a single value, and we're currently using `i32`. We don't do much validation in the forms, though, so perhaps we should.\r\n> \r\n> As for the `_dtype_to_form`, we only support integer types for masks, even booleans. How are we ending up with a boolean?\r\n\r\nI'm creating a `GrowableBuffer(np.bool)` for the `mask`...",
  "created_at":"2023-06-29T15:00:17Z",
  "id":1613337574,
  "issue":2551,
  "node_id":"IC_kwDODBCWws5gKZPm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T15:00:17Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"closing it as discussed at the meeting",
  "created_at":"2023-06-29T15:22:29Z",
  "id":1613380306,
  "issue":2551,
  "node_id":"IC_kwDODBCWws5gKjrS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-29T15:22:29Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR is done! We will possibly need to revisit this again in future; broadcasting is a fiddly thing, but it's definitely an improvement, and removes some `xfail`s!",
  "created_at":"2023-06-30T13:46:14Z",
  "id":1614675470,
  "issue":2552,
  "node_id":"IC_kwDODBCWws5gPf4O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-30T13:46:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2552?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2552](https://app.codecov.io/gh/scikit-hep/awkward/pull/2552?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (83f9273) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/228577bedf1176980f043b30807243b5ce7f3110?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (228577b) will **decrease** coverage by `0.10%`.\n> The diff coverage is `93.58%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2552?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2552?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.99% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2552?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.02% <92.45%> (-0.58%)` | :arrow_down: |\n| [src/awkward/\\_parameters.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2552?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BhcmFtZXRlcnMucHk=) | `82.22% <95.65%> (-0.74%)` | :arrow_down: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2552?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.86% <100.00%> (\u00f8)` | |\n\n... and [5 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2552/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-06-30T16:07:38Z",
  "id":1614872862,
  "issue":2552,
  "node_id":"IC_kwDODBCWws5gQQEe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-30T16:07:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2553?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2553](https://app.codecov.io/gh/scikit-hep/awkward/pull/2553?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (aa70734) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/bb327c798ae6c183d8308a151b67f0bba71c1d7c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bb327c7) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head aa70734 differs from pull request most recent head 7b05ec7. Consider uploading reports for the commit 7b05ec7 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-06-30T13:23:03Z",
  "id":1614647025,
  "issue":2553,
  "node_id":"IC_kwDODBCWws5gPY7x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-30T14:05:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - Could you, please, have a look? I don't understand why the docs are not built. I see lots of warnings, but it doesn't look like they are related to this PR: https://github.com/scikit-hep/awkward/actions/runs/5423275687/jobs/9861495154 Am I wrong? Thanks!",
  "created_at":"2023-06-30T20:30:29Z",
  "id":1615165127,
  "issue":2553,
  "node_id":"IC_kwDODBCWws5gRXbH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-06-30T20:30:29Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna the latest build reported in the PR seem to have succeeded?",
  "created_at":"2023-06-30T20:32:57Z",
  "id":1615167457,
  "issue":2553,
  "node_id":"IC_kwDODBCWws5gRX_h",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-06-30T20:33:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Oh, I think, I broke the main build - I got a message that it needs a new C++ release :-(",
  "created_at":"2023-07-03T17:34:35Z",
  "id":1618926746,
  "issue":2553,
  "node_id":"IC_kwDODBCWws5gftya",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T17:34:35Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna that's OK - we anticipated it, and C++ releases conveniently can be done ahead of the Python release in an async fashion.",
  "created_at":"2023-07-03T17:44:19Z",
  "id":1618936535,
  "issue":2553,
  "node_id":"IC_kwDODBCWws5gfwLX",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-07-03T17:44:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2554?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2554](https://app.codecov.io/gh/scikit-hep/awkward/pull/2554?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4d7a6f1) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/002a3afabf5511955b89bf25dcbb3b56d528df2f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (002a3af) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-06-30T22:44:54Z",
  "id":1615254199,
  "issue":2554,
  "node_id":"IC_kwDODBCWws5gRtK3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T17:00:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Taking your \"it's fine\" as tacit approval :)",
  "created_at":"2023-07-03T23:06:25Z",
  "id":1619241808,
  "issue":2554,
  "node_id":"IC_kwDODBCWws5gg6tQ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-07-03T23:06:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii I'd be interested in your thoughts about dropping lower bounds on dependencies that are already implied by the Python version. In this case, the NumPy lower bound is technically 1.18, but that's already imposed by the Python constraint of 3.8. What do you think about this, is it reasonable to remove the LB, or does it remove useful information?",
  "created_at":"2023-07-02T11:04:22Z",
  "id":1616600783,
  "issue":2557,
  "node_id":"IC_kwDODBCWws5gW17P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T11:04:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2557?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2557](https://app.codecov.io/gh/scikit-hep/awkward/pull/2557?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d275653) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/fb612e847b793d95e4ec67b7a4490138c9428d2c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fb612e8) will **increase** coverage by `0.05%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2557?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2557?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `92.18% <\u00f8> (+0.31%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2557?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.96% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2557?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `94.28% <100.00%> (+28.83%)` | :arrow_up: |\n| [src/awkward/\\_typing.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2557?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGluZy5weQ==) | `91.66% <100.00%> (+0.75%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-07-02T11:25:49Z",
  "id":1616610355,
  "issue":2557,
  "node_id":"IC_kwDODBCWws5gW4Qz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T23:10:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski did you have any thoughts RE removing the lower bound on NumPy (as we can use the minimum supported Python version as our LB)? I'm not aware of any problems in the wild, but wanted to see if anyone else has concerns.",
  "created_at":"2023-07-03T22:45:56Z",
  "id":1619228056,
  "issue":2557,
  "node_id":"IC_kwDODBCWws5gg3WY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T22:45:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I noticed that, but I understood why it was happening: Python version ranges now _imply_ NumPy version ranges, so an explicit constraint on NumPy version is redundant.\r\n\r\nIn the wild, one could circumvent dependency managers when installing these packages. If they then run into an issue with NumPy not supporting NEP-13 or NEP-18, then they brought that problem upon themselves.",
  "created_at":"2023-07-03T22:51:49Z",
  "id":1619231621,
  "issue":2557,
  "node_id":"IC_kwDODBCWws5gg4OF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T22:51:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"It does still help the solver a bit in rare cases (no need to download earlier versions to check compatibility), and has a small user readability benefit, but no strong opinion. If' you'd like to remove it (say to highlight that you support everything valid), that' fine too.",
  "created_at":"2023-07-03T22:56:13Z",
  "id":1619234647,
  "issue":2557,
  "node_id":"IC_kwDODBCWws5gg49X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T22:56:13Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, given both of your feedback, I'll err on the side of being explicit here. It might make our lives slightly easier in future if our supported Python deprecation schedule changes relative to NumPy's.",
  "created_at":"2023-07-03T22:57:55Z",
  "id":1619236578,
  "issue":2557,
  "node_id":"IC_kwDODBCWws5gg5bi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T22:57:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2559?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2559](https://app.codecov.io/gh/scikit-hep/awkward/pull/2559?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1c02005) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/002a3afabf5511955b89bf25dcbb3b56d528df2f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (002a3af) will **increase** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2559?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_layout.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2559?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2xheW91dC5weQ==) | `84.04% <\u00f8> (+0.36%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-07-02T11:07:12Z",
  "id":1616601409,
  "issue":2559,
  "node_id":"IC_kwDODBCWws5gW2FB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T17:12:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"So, the check that this PR removes was added in https://github.com/scikit-hep/awkward/pull/1763\r\n\r\nI'm not totally clear on what the right solution is here. I think we probably want to allow tracers to be used as buffers for transient layouts, but ensure that the result is tracer free. As such, this PR needs a bit more time.",
  "created_at":"2023-07-04T09:12:26Z",
  "id":1619859451,
  "issue":2559,
  "node_id":"IC_kwDODBCWws5gjRf7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-04T09:12:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2560?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2560](https://app.codecov.io/gh/scikit-hep/awkward/pull/2560?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (84b33eb) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/002a3afabf5511955b89bf25dcbb3b56d528df2f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (002a3af) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2560?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2560?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.90% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-07-02T22:22:20Z",
  "id":1616868112,
  "issue":2560,
  "node_id":"IC_kwDODBCWws5gX3MQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-02T22:22:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2562?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2562](https://app.codecov.io/gh/scikit-hep/awkward/pull/2562?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78eacc0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/002a3afabf5511955b89bf25dcbb3b56d528df2f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (002a3af) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-07-03T16:12:16Z",
  "id":1618805483,
  "issue":2562,
  "node_id":"IC_kwDODBCWws5gfQLr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T16:12:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2563?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2563](https://app.codecov.io/gh/scikit-hep/awkward/pull/2563?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (010af4d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/628d535a83c30450142e5ffc2f565a267d7d23fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (628d535) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-07-03T17:45:12Z",
  "id":1618937709,
  "issue":2563,
  "node_id":"IC_kwDODBCWws5gfwdt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T17:45:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2564?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2564](https://app.codecov.io/gh/scikit-hep/awkward/pull/2564?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8ba5608) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/125eaffa040de7553a208f955d50f677fc5cfbc0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (125eaff) will **increase** coverage by `0.00%`.\n> The diff coverage is `97.36%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2564?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2564?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `94.67% <97.36%> (+1.56%)` | :arrow_up: |\n\n... and [2 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2564/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-07-03T22:46:13Z",
  "id":1619228225,
  "issue":2564,
  "node_id":"IC_kwDODBCWws5gg3ZB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-03T22:46:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2565?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2565](https://app.codecov.io/gh/scikit-hep/awkward/pull/2565?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ef4ab12) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/745a8108bf799af819bf6b4fcf3fcac45ab1d232?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (745a810) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-07-04T02:38:58Z",
  "id":1619379683,
  "issue":2565,
  "node_id":"IC_kwDODBCWws5ghcXj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-04T02:38:58Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2566?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2566](https://app.codecov.io/gh/scikit-hep/awkward/pull/2566?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c1e8786) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f309c4c49a53875c28950e976abc1626f8628011?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f309c4c) will **increase** coverage by `0.01%`.\n> The diff coverage is `57.69%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2566?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2566?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.36% <36.36%> (-1.11%)` | :arrow_down: |\n| [src/awkward/forms/emptyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2566?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `84.88% <71.42%> (+0.61%)` | :arrow_up: |\n| [src/awkward/types/unknowntype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2566?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5rbm93bnR5cGUucHk=) | `79.41% <71.42%> (-7.08%)` | :arrow_down: |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2566?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.47% <100.00%> (+0.71%)` | :arrow_up: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2566/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-07-04T17:17:41Z",
  "id":1620554247,
  "issue":2566,
  "node_id":"IC_kwDODBCWws5gl7IH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-04T17:36:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2567?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2567](https://app.codecov.io/gh/scikit-hep/awkward/pull/2567?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (04b9e2f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/0ec6c482b582b5720d74e4dbd1d0128206a189d7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0ec6c48) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2567?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_concatenate.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2567?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.32% <100.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_where.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2567?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `92.72% <100.00%> (+0.13%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-07-04T16:52:12Z",
  "id":1620534297,
  "issue":2567,
  "node_id":"IC_kwDODBCWws5gl2QZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-04T16:52:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2570?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2570](https://app.codecov.io/gh/scikit-hep/awkward/pull/2570?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (50614aa) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2c75c0fa0bdb068566c0b7b4759f97e0e9b822a3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2c75c0f) will **increase** coverage by `0.01%`.\n> The diff coverage is `72.72%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2570?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2570?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_errors.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2570?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `79.68% <100.00%> (+0.74%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2570?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.80% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_kernels.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2570?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2tlcm5lbHMucHk=) | `69.36% <14.28%> (+2.41%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-07-05T15:31:14Z",
  "id":1622003704,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5grc_4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-14T17:25:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"For @agoose77, this is the work that @kkothari2001 did to get `tests-cuda` working again. I'll make it a draft because, despite all of our CPU-bound automated tests passing, there are still 2 failing GPU tests.\r\n\r\nI've scheduled \"Set up CUDA test-runner for Awkward\" for myself on July 17, since that's when I arrive at Princeton and I can talk to the Princeton computing people directly.",
  "created_at":"2023-07-05T15:45:25Z",
  "id":1622030898,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5grjoy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-05T15:45:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski did you manage to follow up with the Princeton compute team regarding a CUDA runner? :)",
  "created_at":"2023-08-04T10:45:13Z",
  "id":1665406364,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5jRBWc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-04T10:45:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I had a conversation with @vineetbansal, who has set up a GPU test on an owned machine, but not in Princeton infrastructure. If we get this working, we know there are at least two use-cases that would justify it.\r\n\r\n@vineetbansal, you said there was someone with whom we could follow this up. Who was that?",
  "created_at":"2023-08-04T16:05:26Z",
  "id":1665854395,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5jSuu7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-04T16:05:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I think @kkothari2001 has finished as much of this PR as he's going to do. (Is that right? Let me know!) We should take it the rest of the way, and it would be best for one of us with direct access to a GPU. (That sounds like me.)\r\n\r\nWe don't have a dedicated GPU runner yet. Maybe instead I could put a weekly manual test on my calendar...",
  "created_at":"2023-08-14T17:14:41Z",
  "id":1677736527,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5kADpP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-14T17:14:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I have a GPU and this is on my todo list for this week! Happy for you to take the lead, but I can do it! ",
  "created_at":"2023-08-14T17:44:23Z",
  "id":1677800532,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5kATRU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-14T17:44:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We could rock-paper-scissors for it. `:)`\r\n\r\nIf you get a chance to look at it this week, please do. Beyond that, I can take on the weekly testing as a manual task. Calendars tell me what to do nowadays, so when it pops up, I'll run it and adjust to whatever small issues there are, which will both keep me in touch with changes in nplikes/backends and act as a constant reminder to get the dedicated GPU test-runner sorted out.",
  "created_at":"2023-08-14T17:57:42Z",
  "id":1677818936,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5kAXw4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-14T17:57:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"As an update to this, on the problem of CI testing CUDA: there are emulators. Can they be used with CuPy (the only CUDA library we use)? There are no explicit indications that it will work, and all of these emulators are old.\r\n\r\n  * [MCUDA](http://impact.crhc.illinois.edu/mcuda.aspx)\r\n  * [gpgpu-sim_distribution](https://github.com/gpgpu-sim/gpgpu-sim_distribution/tree/dev)\r\n  * [coriander](https://github.com/hughperkins/coriander)\r\n  * [gpuocelot](https://github.com/gtcasl/gpuocelot)\r\n\r\nOr maybe we can roll our own emulator. Since we only use the GPU through CuPy and CuPy-compiled `RawKernels`, perhaps we could mock CuPy with a combination of NumPy and cppyy. (That is, remove the \"`__global__`\" from the source code, compile it as C++, and run it in a loop or OpenMP threads.) This would not fully test its correctness, which would have to be occasionally tested on a real GPU, but it would catch issues like the ones that led to this PR\u2014that the infrastructure changed and new kernels were added without equivalent updates for the CUDA side. Those are the kinds of issues that would require continuous testing, anyway\u2014the more subtle concurrency issues are either encountered at development time or when moving to a different platform (for race conditions to surface), not everyday CI.",
  "created_at":"2023-10-29T16:53:31Z",
  "id":1784165774,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5qWDWO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-29T16:53:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Numba has a CUDA emulator (`export NUMBA_ENABLE_CUDASIM=1`), and that could help with our Numba-CUDA backend, but not the CuPy nplike.",
  "created_at":"2023-10-29T16:55:23Z",
  "id":1784166266,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5qWDd6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-29T16:55:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've made the tests pass on my machine by `xfail`-ing tests that require the missing kernel. I think that we should merge this, and @ManasviGoyal can work in a new branch?",
  "created_at":"2023-11-14T17:01:31Z",
  "id":1810699576,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5r7RU4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-14T17:01:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I manually tested it, and I'm going to set up a calendar reminder for me to manually test it\u2014perpetually\u2014until I manage to set up a routine solution.\r\n\r\n(I found and fixed one bug that way: 50614aa87b831fd7840ebfcb36b9e0f5466989d7.)",
  "created_at":"2023-11-14T17:22:31Z",
  "id":1810746347,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5r7cvr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-14T17:22:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @jpivarski! I'm just setting up a Docker (podman) image to run this in a cron job. I intend for it to file a GitHub issue if it notices that something fails. So, let's hold the merge.",
  "created_at":"2023-11-14T17:46:31Z",
  "id":1810805027,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5r7rEj",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-11-14T17:46:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It passed all tests, and I'll merge it now.",
  "created_at":"2023-11-14T19:37:44Z",
  "id":1811071088,
  "issue":2570,
  "node_id":"IC_kwDODBCWws5r8sBw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-14T19:37:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2572?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2572](https://app.codecov.io/gh/scikit-hep/awkward/pull/2572?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5fa7101) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/01cd79f7d71695b966d7d1c725e779bacf0ad66c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (01cd79f) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2572?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2572?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `81.01% <100.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-07-05T18:23:27Z",
  "id":1622260641,
  "issue":2572,
  "node_id":"IC_kwDODBCWws5gsbuh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-05T18:38:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, thanks! (I didn't want to bother you.)",
  "created_at":"2023-07-05T18:26:08Z",
  "id":1622263986,
  "issue":2572,
  "node_id":"IC_kwDODBCWws5gsciy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-05T18:26:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski not at all! But I appreciate it.\r\n\r\nJust making a quick change that I noticed...",
  "created_at":"2023-07-05T18:27:59Z",
  "id":1622266197,
  "issue":2572,
  "node_id":"IC_kwDODBCWws5gsdFV",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-07-05T18:27:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think those are unrelated to this fix, but also necessary. Thanks for noticing them!",
  "created_at":"2023-07-05T18:31:18Z",
  "id":1622271052,
  "issue":2572,
  "node_id":"IC_kwDODBCWws5gseRM",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-07-05T18:31:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Maybe\r\n\r\n```python\r\nak.to_backend(out, \"tt\", forget_length=True)  # other backends ignore forget_length?\r\n```\r\n\r\nor\r\n\r\n```python\r\nak.to_backend(out, \"forget_length\")  # implicitly typetracer backend\r\n```\r\n\r\nor\r\n\r\n```python\r\nak.to_typetracer(out, forget_length=True)  # specially named function with an argument\r\n```\r\n\r\nI like the last one best.",
  "created_at":"2023-07-07T21:29:09Z",
  "id":1626160055,
  "issue":2576,
  "node_id":"IC_kwDODBCWws5g7Tu3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-07T21:29:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"My vote's for the last one as well, especially if it handles highlevel and layouts as expected. Tidy descriptive interface!",
  "created_at":"2023-07-07T21:37:37Z",
  "id":1626180682,
  "issue":2576,
  "node_id":"IC_kwDODBCWws5g7YxK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-07T21:37:37Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Superseded by #2584.",
  "created_at":"2023-07-17T17:31:03Z",
  "id":1638576654,
  "issue":2577,
  "node_id":"IC_kwDODBCWws5hqrIO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-17T17:31:03Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yeah, so the difference here is that Awkward 2 returns NumPy types:\r\n\r\n```python\r\n>>> ak.__version__\r\n'2.3.1'\r\n>>> type(x[0, 0])\r\n<class 'numpy.bool_'>\r\n```\r\n\r\nand Awkward 1 returns Python types:\r\n\r\n```python\r\n>>> ak.__version__\r\n'1.10.3'\r\n>>> type(x[0, 0])\r\n<class 'bool'>\r\n```\r\n\r\n(for all primitive types, including numbers and times). That's why this is only an effect when you get down to the scalar level. (You see it in `x[0, 0]` and not in `x[0]`.)\r\n\r\nThe difference in what `~` does on scalars is outside of Awkward itself.\r\n\r\n```python\r\n>>> ~bool(False)\r\n-1\r\n>>> ~np.bool_(False)\r\nTrue\r\n```\r\n\r\nIt's because Python is bad and considers booleans to be a type of number. `~` is bitwise inversion; `False` is `0`, and the bitwise inverse of `0` is `-1` (by [two's complement rules](https://en.wikipedia.org/wiki/Two%27s_complement)[^1]).\r\n\r\nMeanwhile, NumPy is good and considers booleans to be distinct from numbers. `~` inverses the boolean.\r\n\r\nI don't know what can be done here: returning NumPy types instead of Python types was one of the backward-compatibility breaking changes we made in the v1 \u2192 v2 transition (for reasons like the above: NumPy is right and Python is wrong about what booleans are). Making the output of `x[0, 0]` invert as a boolean under `~` would be to put that backward-incompatible change into v1, but that's what v2 was for.\r\n\r\nI guess what I'm saying is that this isn't a bug; it's a feature of v2.\r\n\r\n[^1]: Fun fact: for this reason, FORTH defines false to be `0` and true to be `-1`, so that they're completely closed under bitwise operations, and then they don't even define any logical operations.",
  "created_at":"2023-07-10T20:59:06Z",
  "id":1629723419,
  "issue":2578,
  "node_id":"IC_kwDODBCWws5hI5sb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-10T20:59:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Along this line (~x)[0,0] does what you may expect from numpy for the reasons explained here (if I read that correctly)!",
  "created_at":"2023-07-10T23:17:41Z",
  "id":1629857972,
  "issue":2578,
  "node_id":"IC_kwDODBCWws5hJai0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-10T23:17:41Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes,\r\n\r\n```python\r\n>>> ak.__version__\r\n'1.10.3'\r\n>>> x = ak.Array([[False, False, False], [False, False], [False, False, False]])\r\n>>> ~x[0, 0]\r\n-1\r\n>>> (~x)[0, 0]\r\nTrue\r\n```\r\n\r\nis understood (though clearly that can be confusing, but that's why we changed the output type).",
  "created_at":"2023-07-11T18:55:45Z",
  "id":1631352941,
  "issue":2578,
  "node_id":"IC_kwDODBCWws5hPHht",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-11T18:55:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"I'll add for the record the relationship between these arrays is `d = ak.where((ak.num(a) > 0), b, ak.full_like(c, False, dtype=bool))`",
  "created_at":"2023-07-10T22:06:09Z",
  "id":1629795101,
  "issue":2579,
  "node_id":"IC_kwDODBCWws5hJLMd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-10T22:06:09Z",
  "user":"MDQ6VXNlcjQwMDA1MTA0"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Here's my interpretation of the v1 code to generate this example:\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\na = ak.layout.ListOffsetArray64(\r\n    ak.layout.Index64([0, 0, 0, 0]),\r\n    ak.layout.EmptyArray()\r\n)\r\nb = ak.layout.ListOffsetArray64(\r\n    ak.layout.Index64([0, 3, 5, 8]),\r\n    ak.layout.IndexedOptionArray64(\r\n        ak.layout.Index64([-1]*8),\r\n        ak.layout.NumpyArray(np.zeros(0, dtype=np.bool_))\r\n    )\r\n)\r\nc = ak.layout.ListOffsetArray64(\r\n    ak.layout.Index64([0, 3, 5, 8]),\r\n    ak.layout.IndexedArray64(\r\n        ak.layout.Index64([5241, 5242, 5243, 55080, 55081, 85773, 85774, 85775]),\r\n        ak.layout.NumpyArray(np.random.random(90906).astype(np.float32))\r\n    )\r\n)\r\n\r\nd = ak.where((ak.num(a) > 0), b, ak.full_like(c, False, dtype=np.bool_))\r\nprint(ak.is_valid(d))\r\nprint(ak.type(d))\r\n```\r\n\r\nI believe I see the problem; the type should be `N * var * ?bool` but instead it's `N * var * bool`, i.e. we're losing the option type!",
  "created_at":"2023-07-15T14:29:58Z",
  "id":1636784973,
  "issue":2579,
  "node_id":"IC_kwDODBCWws5hj1tN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-15T14:47:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It must be an `IndexedArray64` where an `IndexedOptionArray64` is intended (in v1).\r\n\r\nIf it's happening in `ak.where`, that function was mostly Python, so it might not require a C++ modification.\r\n\r\nHere's the v1 `ak.where`:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/3375b4a7abe3ca38fd74f0e07d0c4a310bcb35c6/src/awkward/operations/structure.py#L1790-L1860\r\n\r\nThe fact that it goes through `UnionArray8_64.simplify` is suspicious; it could be in the simplification logic. If that's the case, then it would be in the v1 C++.",
  "created_at":"2023-07-15T16:28:55Z",
  "id":1636816895,
  "issue":2579,
  "node_id":"IC_kwDODBCWws5hj9f_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-15T16:28:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #2582",
  "created_at":"2023-07-20T16:18:07Z",
  "id":1644216282,
  "issue":2579,
  "node_id":"IC_kwDODBCWws5iAL_a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-20T16:18:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this is a backport for `main-v1`, which still has `_v2` (although it doesn't receive feature updates). In fact, our unofficial policy for `_v2` is that it doesn't get *much* bugfix support either, because so many bugs are fixed by the large-scale changes in `main`.",
  "created_at":"2023-07-18T07:34:04Z",
  "id":1639663938,
  "issue":2583,
  "node_id":"IC_kwDODBCWws5hu0lC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-18T07:34:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2583?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`main-v1@3375b4a`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head fb3a23d differs from pull request most recent head f2c1ee9. Consider uploading reports for the commit f2c1ee9 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-07-18T08:09:28Z",
  "id":1639726915,
  "issue":2583,
  "node_id":"IC_kwDODBCWws5hvD9D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-18T08:45:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2585](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2656a8e) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/1e3b2d4ebfa1be0a0bc61c0aa8c09fe64e26943d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1e3b2d4) will **not change** coverage.\n> The diff coverage is `37.50%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/arrayview.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.35% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.64% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.99% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.32% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.60% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `81.01% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.50% <0.00%> (\u00f8)` | |\n| [src/awkward/forms/bitmaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `85.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/bytemaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `84.44% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/indexedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZGZvcm0ucHk=) | `81.00% <\u00f8> (\u00f8)` | |\n| ... and [7 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2585?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-07-18T03:25:36Z",
  "id":1639279324,
  "issue":2585,
  "node_id":"IC_kwDODBCWws5htWrc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-07T18:55:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, we should catch exception and not base exception. I'm surprised this happens (without looking at the source), as it's a common pattern  that I'd expect us to have anticipated. I'll make a patch soon. ",
  "created_at":"2023-07-18T20:05:24Z",
  "id":1640923429,
  "issue":2586,
  "node_id":"IC_kwDODBCWws5hzoEl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-18T20:05:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2587?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2587](https://app.codecov.io/gh/scikit-hep/awkward/pull/2587?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bcf2e2a) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/b0349dfb68c9259d079e825585693a45d9c4ddcf?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b0349df) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2587?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_errors.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2587?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `79.11% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-07-19T07:46:10Z",
  "id":1641588197,
  "issue":2587,
  "node_id":"IC_kwDODBCWws5h2KXl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-19T07:46:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm currently AFK, so I can't check this myself - how much memory does the result occupy if you load the 11-nanoaod dataframe? I.e what is the `nbytes` of the result. Correspondingly, how much memory does the system have?\n\nMy hunch is that there is insufficient free memory to allocate, thus the program segfaults upon writing to the (non)allocated result. ",
  "created_at":"2023-07-20T09:22:10Z",
  "id":1643579164,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5h9wcc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-20T09:23:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"The nbytes of the 11 files case is 5750300292 (~5.7GB).\n\nThe system has 2TB of RAM so I really exclude that the problem is the lack of free memory.\n\nFurthermore, I have tried to build 2 different rdataframe, convert them into 2 different awkward array calling from_rdataframe, and then merge them into a single awkward array and everything works fine.",
  "created_at":"2023-07-20T09:51:13Z",
  "id":1643620314,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5h96fa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-20T09:51:13Z",
  "user":"MDQ6VXNlcjMxMjQ3MDY2"
 },
 {
  "author_association":"NONE",
  "body":"I have tried with all the 93 files that I have creating Rdataframe in bunches of 10 files, converting them to awkward arrays and then concatenating together and it works.\r\n\r\nThe final ak_array nbytes is 44377449808 (~44GB) and contains ~110.000.000 events.\r\n\r\n```python\r\nimport ROOT\r\nimport awkward as ak\r\nimport glob\r\nimport numpy as np\r\n\r\nfolder=glob.glob(\"/scratchnvme/pviscone/Preselection_Skim/powheg/root_files/predict/*.root\")\r\n\r\nrdf_list=[]\r\nfor i in range(np.ceil(len(folder)/10).astype(int)):\r\n        rdf_list.append(ROOT.RDataFrame(\"Events\",folder[10*i:10*(i+1)]))\r\n\r\ncolumns=[\"Jet_pt\",\r\n        \"Jet_phi\",\r\n        \"Jet_eta\",\r\n        \"Jet_btagDeepFlavB\",\r\n        \"Jet_btagDeepFlavCvB\",\r\n        \"Jet_btagDeepFlavCvL\",\r\n        \"Muon_pt\",\r\n        \"Muon_phi\",\r\n        \"Muon_eta\",\r\n        \"Electron_pt\",\r\n        \"Electron_phi\",\r\n        \"Electron_eta\",\r\n        \"LHEPart_pdgId\",\r\n        \"MET_pt\",\r\n        \"MET_phi\",\r\n        \"Photon_pt\",\r\n        \"Photon_phi\",\r\n        \"Photon_eta\",]\r\n\r\nak_arr=ak.from_rdataframe(rdf_list[0],columns=columns)\r\nfor rdf in rdf_list[1:]:\r\n        ak_arr=ak.concatenate([ak_arr,ak.from_rdataframe(rdf,columns=columns)],axis=0)\r\n```",
  "created_at":"2023-07-20T12:37:23Z",
  "id":1643849793,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5h-yhB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-20T12:37:23Z",
  "user":"MDQ6VXNlcjMxMjQ3MDY2"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I can't reproduce this locally with an arbitrary ROOT file ~5GB (in RAM), and I'm doubtful I'll be able to make much headway like that. Would you be able to perform e.g. a bisect search to figure out which column(s) trigger this, so that we can make a minimum reproducer? Ideally a single column.",
  "created_at":"2023-07-20T17:02:01Z",
  "id":1644277123,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5iAa2D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-20T17:02:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"The number of columns (and which column I choose) seems to be irrelevant.\r\n\r\n---\r\nI have tried to do something more general without loading files, simply creating a RDataFrame in place.\r\nI instantiated RDataFrames of different lengths in a loop to see when it crashes.\r\n\r\n```python\r\nimport ROOT\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\ndef rdf2ak(n):\r\n       rdf=ROOT.RDataFrame(int(n)).Define(\"Dummy\",\"1.\")\r\n       ak_arr=ak.from_rdataframe(rdf,columns=[\"Dummy\"])\r\n       return ak_arr\r\n\r\nvalues=np.linspace(133e6,135e6,20,dtype=int)\r\n\r\nfor value in values:\r\n       print(value)\r\n       rdf2ak(value)\r\n```\r\n```text\r\n\u276f python -i try.py \r\n133000000\r\n133105263\r\n133210526\r\n133315789\r\n133421052\r\n133526315\r\n133631578\r\n133736842\r\n133842105\r\n133947368\r\n[1]    90645 segmentation fault (core dumped)  python -i try.py\r\n```\r\n\r\nI have also tried other values. \r\nThe number of entries that makes it crash fluctuates, but is always around 134,000,000.\r\n\r\n---\r\nIf I fill the RDataFrame with RVec<float>(10,1.) the number of entries that makes it crash is exactly 1/10th of the previous one\r\n\r\n```python\r\nimport ROOT\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\ndef rdf2ak(n):\r\n       rdf=ROOT.RDataFrame(int(n)).Define(\"Dummy\",\"ROOT::RVec<float>(10,1.)\")\r\n       ak_arr=ak.from_rdataframe(rdf,columns=[\"Dummy\"])\r\n       return ak_arr\r\n\r\nvalues=np.linspace(133e5,135e5,20,dtype=int)\r\n\r\nfor value in values:\r\n       print(value)\r\n       rdf2ak(value)\r\n\r\n```\r\n\r\n```text\r\n\u276f python -i try_rvec.py \r\n13300000\r\n13310526\r\n13321052\r\n13331578\r\n13342105\r\n13352631\r\n13363157\r\n13373684\r\n13384210\r\n[1]    93274 segmentation fault (core dumped)  python -i try_rvec.py\r\n```\r\n\r\n---\r\nRepeating the same trial but defining 2 columns changes nothing.\r\n```python\r\nimport ROOT\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\ndef rdf2ak(n):\r\n       rdf=(ROOT.RDataFrame(int(n)).Define(\"Dummy\",\"ROOT::RVec<float>(10,1.)\")\r\n                                   .Define(\"Dummy2\",\"ROOT::RVec<float>(10,2.)\"))\r\n       ak_arr=ak.from_rdataframe(rdf,columns=[\"Dummy\",\"Dummy2\"])\r\n       return ak_arr\r\n\r\nvalues=np.linspace(133e5,135e5,20,dtype=int)\r\n\r\nfor value in values:\r\n       print(value)\r\n       rdf2ak(value)\r\n```\r\n\r\n```text\r\n\u276f python -i try_rvec2col.py \r\n13300000\r\n13310526\r\n13321052\r\n13331578\r\n13342105\r\n13352631\r\n13363157\r\n13373684\r\n13384210\r\n[1]    95454 segmentation fault (core dumped)  python -i try_rvec2col.py\r\n```\r\n\r\n---\r\n\r\nso it seems that if there are more than ~134 10^6 floats (~500MB) in a column, it crashes ",
  "created_at":"2023-07-20T19:57:18Z",
  "id":1644517809,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5iBVmx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-20T19:57:18Z",
  "user":"MDQ6VXNlcjMxMjQ3MDY2"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is sufficient for me to reproduce locally. It seems that we crash in the writing of the buffers from our growable buffer implementation. I will take a look and find the cause. ",
  "created_at":"2023-07-21T15:17:01Z",
  "id":1645748938,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5iGCLK",
  "performed_via_github_app":null,
  "reactions":{
   "confused":1,
   "total_count":1
  },
  "updated_at":"2023-07-21T15:17:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This is sufficient for me to reproduce locally. It seems that we crash in the writing of the buffers from our growable buffer implementation. I will take a look and find the cause.\r\n\r\nI cannot reproduce it:\r\n```\r\n>>> import ROOT\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> \r\n>>> def rdf2ak(n):\r\n...        rdf=ROOT.RDataFrame(int(n)).Define(\"Dummy\",\"ROOT::RVec<float>(10,1.)\")\r\n...        ak_arr=ak.from_rdataframe(rdf,columns=[\"Dummy\"])\r\n...        return ak_arr\r\n... \r\n>>> values=np.linspace(133e5,135e5,20,dtype=int)\r\n>>> for value in values:\r\n...        print(value)\r\n...        rdf2ak(value)\r\n... \r\n13300000\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13300000 * {Dummy: va...'>\r\n13310526\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13310526 * {Dummy: va...'>\r\n13321052\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13321052 * {Dummy: va...'>\r\n13331578\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13331578 * {Dummy: va...'>\r\n13342105\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13342105 * {Dummy: va...'>\r\n13352631\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13352631 * {Dummy: va...'>\r\n13363157\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13363157 * {Dummy: va...'>\r\n13373684\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13373684 * {Dummy: va...'>\r\n13384210\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13384210 * {Dummy: va...'>\r\n13394736\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13394736 * {Dummy: va...'>\r\n13405263\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13405263 * {Dummy: va...'>\r\n13415789\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13415789 * {Dummy: va...'>\r\n13426315\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13426315 * {Dummy: va...'>\r\n13436842\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13436842 * {Dummy: va...'>\r\n13447368\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13447368 * {Dummy: va...'>\r\n13457894\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13457894 * {Dummy: va...'>\r\n13468421\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13468421 * {Dummy: va...'>\r\n13478947\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13478947 * {Dummy: va...'>\r\n13489473\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13489473 * {Dummy: va...'>\r\n13500000\r\n<Array [{Dummy: [1, 1, ..., 1, 1]}, ..., {...}] type='13500000 * {Dummy: va...'>\r\n>>> \r\n```",
  "created_at":"2023-07-21T17:12:41Z",
  "id":1646009511,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5iHByn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-21T17:12:41Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"@ianna\u00a0\r\n\r\nI have tried to run the same code on my laptop, and it crashes at a slight higher value than before (I was using another machine).  \r\nThere isn't a precise value that makes it crash, have you tried also higher values?\r\n\r\nIf you can't reproduce the error, could this problem be system-dependent?\u00a0\r\n\r\nI really don't know how from\\_rdataframe is implemented, but there are some differences across systems. For example, mutex has a different implementation in Linux and macOS, and you can see the effect easily, for example, using fork() in the ROOT shell.\u00a0\r\n\r\nI have run it only on Linux machines (arch and CentOS), do you have a different system?",
  "created_at":"2023-07-21T17:55:59Z",
  "id":1646054927,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5iHM4P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-21T18:01:41Z",
  "user":"MDQ6VXNlcjMxMjQ3MDY2"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"On my system, the value `134052631` triggers the segfault @ianna (not exclusively). Not yet sure why.",
  "created_at":"2023-07-21T20:42:41Z",
  "id":1646217580,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5iH0ls",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-21T20:42:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@pviscone - I'm running on darwin macOS 11.6 Clang 14.0.6, Python 3.10.8, and \r\n```\r\n>>> ROOT.__version__\r\n'6.26/10'\r\n>>> ak.__version__\r\n'2.3.1'\r\n>>> np.__version__\r\n'1.23.5'\r\n```\r\nI have tried to go to the higher values - I observe high CPU consumption, but no segfault... I'll try to check with the later versions of ROOT and Python.\r\n",
  "created_at":"2023-07-22T01:52:58Z",
  "id":1646375947,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5iIbQL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-22T01:53:21Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Well, this is strange ... I _was_ able to reproduce this but suddenly am no longer able. When it was segfaulting, it didn't seem to be the `memcpy`, which was what I'd expected.",
  "created_at":"2023-07-22T08:56:53Z",
  "id":1646533499,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5iJBt7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-22T08:56:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Well, this is strange ... I _was_ able to reproduce this but suddenly am no longer able. When it was segfaulting, it didn't seem to be the `memcpy`, which was what I'd expected.\r\n\r\nI'll try to run it with a later version of ROOT and also valgrind it on CentOS.",
  "created_at":"2023-07-23T14:17:22Z",
  "id":1646851469,
  "issue":2590,
  "node_id":"IC_kwDODBCWws5iKPWN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-23T14:17:22Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fixed by #2592 ",
  "created_at":"2023-07-26T21:44:46Z",
  "id":1652538980,
  "issue":2591,
  "node_id":"IC_kwDODBCWws5if75k",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2023-07-26T21:44:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2592?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2592](https://app.codecov.io/gh/scikit-hep/awkward/pull/2592?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e5f6f78) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/d3e494aa5c44f14fbe870c43a8e1d37f050fb4e4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d3e494a) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2592?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_nan\\_to\\_num.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2592?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbnVtLnB5) | `98.21% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-07-26T21:53:57Z",
  "id":1652548645,
  "issue":2592,
  "node_id":"IC_kwDODBCWws5if-Ql",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-27T13:19:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2595?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2595](https://app.codecov.io/gh/scikit-hep/awkward/pull/2595?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2ee730a) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/ce63bf2b4afebd93e5b1b67d9985d66b51d37bc5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ce63bf2) will **increase** coverage by `0.01%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2595?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_transform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2595?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `95.23% <100.00%> (+0.89%)` | :arrow_up: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2595/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-07-27T14:09:09Z",
  "id":1653701876,
  "issue":2595,
  "node_id":"IC_kwDODBCWws5ikXz0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-04T08:52:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"What would the purpose of such a `QTable`-like feature be? If it's about grouping data in a column-based structure, we have [record arrays](https://awkward-array.org/doc/main/user-guide/how-to-create-records.html). Is this what you're referring to, or is it the `Quantity` aspect to this that I'm not considering? ",
  "created_at":"2023-07-28T13:26:53Z",
  "id":1655683079,
  "issue":2597,
  "node_id":"IC_kwDODBCWws5ir7gH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-28T13:26:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"I am just starting trying to use this project, so maybe what you mention is already enough, but an astropy QTable is a table made of [Quantities](https://docs.astropy.org/en/stable/api/astropy.units.Quantity.html#astropy.units.Quantity) (arrays with attached units - what triggered #2468) which supports all table-like operations (like masking, indexing, etc....)\r\n\r\nMore details here\r\nhttps://docs.astropy.org/en/stable/table/",
  "created_at":"2023-07-28T13:29:43Z",
  "id":1655686591,
  "issue":2597,
  "node_id":"IC_kwDODBCWws5ir8W_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-28T13:29:43Z",
  "user":"MDQ6VXNlcjE3ODM2NjEw"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'd invite your thoughts on the `.var` discussion, now that we're a year or so along from when we last discussed this (though I still cannot find the original discussion...)",
  "created_at":"2023-07-28T19:54:56Z",
  "id":1656243029,
  "issue":2598,
  "node_id":"IC_kwDODBCWws5iuENV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-28T19:54:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This was discussed in #203, a feature request for `minby` and `maxby` functions, which would combine the `argmin` step with the slicing step. (I don't think it's the conversation you're looking for, though.)\r\n\r\nA combined `minby` function has the advantage that it's very clear what it does, and if you're looking for a solution to this use-case, it would stand out in the documentation as being the obvious answer.\r\n\r\nIt has the disadvantage that you can't separate the `argmin` step from the slicing step. If you want to select a set of variables according to the minimum of variable X, you'd have to recompute the minimum X in each `argmin` call. (Or you'd have to `ak.zip` the other variables together and apply `minby` to that, and then maybe `ak.unzip` them afterward if you still want them separate.)\r\n\r\n`.at[ix]` and `.var[ix]` are more general solutions, but they might not help people recognize that they are solutions to the min-by problem. If someone has to know or figure out that `records.at[j_max]` will slice their result appropriately but `records[j_max]` will not, then it doesn't look like a step forward in pedagogy.\r\n\r\nI'm not against `.at[ix]` and `.var[ix]` in principle; the fact that we have `.mask[ix]` is an suggestion that there can be more accessors like it. And we could have explicit documentation for \"how to select items in one array by the minimum/maximum of values from another array\" that features it. (Documentation can highlight one slicing syntax as the recommended way to do it, with drill-down sections on other ways to do it and why they differ.)\r\n\r\nAre there use-cases that `.at[ix]` and `.var[ix]` would address other than the min-by/max-by problem?",
  "created_at":"2023-08-01T19:37:24Z",
  "id":1660962429,
  "issue":2598,
  "node_id":"IC_kwDODBCWws5jAEZ9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-01T19:37:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"There are definitely use cases in the sense that users don't exclusively use `argmax/min` to create index arrays. `.var` in particular is useful, although I think in time I'm leaning towards removing the need for any ragged dimensions and instead dropping NumPy array indexing compatibility (which I suspect won't be popular enough to do).\r\n\r\nLike you, I'm not in favour of having multiple indexing modes that are slightly different. Ultimately the built-in `__getitem__` is the one that most users expect to JustWork\u2122, and right now that's not trivially possible.",
  "created_at":"2023-08-02T08:02:48Z",
  "id":1661705374,
  "issue":2598,
  "node_id":"IC_kwDODBCWws5jC5ye",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-02T08:02:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It looks like using a `numba.typed.List` could improve a `LayoutBuilder` performance:\r\n```\r\nMULTIPLIER 10000000\r\ntest_Numpy_LayoutBuilder()\r\n Real time: 5.15 seconds\r\n CPU time: 5.14 seconds\r\n\r\ntest_Numpy_LayoutBuilder()\r\n Real time: 4.02 seconds\r\n CPU time: 4.01 seconds\r\n\r\ntest_Numpy_ArrayBuilder()\r\n Real time: 0.58 seconds\r\n CPU time: 0.58 seconds\r\n\r\ntest_Numpy_ArrayBuilder()\r\n Real time: 0.58 seconds\r\n CPU time: 0.58 seconds\r\n\r\ntest_Numpy_TypedList()\r\n Real time: 1.03 seconds\r\n CPU time: 1.03 seconds\r\n\r\ntest_Numpy_TypedList()\r\n Real time: 0.68 seconds\r\n CPU time: 0.67 seconds\r\n```",
  "created_at":"2023-07-31T15:39:03Z",
  "id":1658620796,
  "issue":2599,
  "node_id":"IC_kwDODBCWws5i3It8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-07-31T15:39:03Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"A benchmark from [HDembinski](https://github.com/numba/numba/issues/6803#issuecomment-812856279). See [the notebook](https://nbviewer.org/github/HDembinski/essays/blob/master/benchmark%20of%20building%20an%20array%20with%20numba.ipynb)\r\n\r\n```python\r\nIn [1]: import numba as nb\r\n   ...: import numpy as np\r\n   ...: import awkward as ak\r\n   ...: print(f\"{nb.__version__=}\")\r\n   ...: print(f\"{ak.__version__=}\")\r\n   ...: \r\nnb.__version__='0.58.0rc1'\r\nak.__version__='2.3.3'\r\n```\r\n<img width=\"596\" alt=\"Screenshot 2023-08-28 at 20 50 34\" src=\"https://github.com/scikit-hep/awkward/assets/1390682/1a32d56f-f958-4231-b646-28696a513d7c\">\r\n\r\n",
  "created_at":"2023-08-28T19:06:41Z",
  "id":1696225377,
  "issue":2599,
  "node_id":"IC_kwDODBCWws5lGlhh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-28T19:06:41Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Today I came across this issue again (I assume) from `dak.necessary_columns`. There at some point it tries to do `pickle.dumps` on its typetracers.\r\nExample:\r\n```python\r\na = ak.Array(\r\n    ak.mask(ak.Array([1.]), [True, False]).layout.to_typetracer(True).to_IndexedOptionArray64()\r\n)\r\npickle.dumps(a)\r\n```\r\nThis gives an `AssertionError`. I assume the right behavior is to give a `TypeError`. I get the expected `TypeError` when removing `to_IndexedOptionArray64()`.",
  "created_at":"2023-08-04T14:04:09Z",
  "id":1665664524,
  "issue":2600,
  "node_id":"IC_kwDODBCWws5jSAYM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-04T14:04:09Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for the report! We can implement [a naive version](https://gist.github.com/agoose77/313bf6e24146c9fd0f92b160b6cb0e5e) (somewhat untested) using `ak.transform`, though I agree that we might want to provide such an implementation natively.",
  "created_at":"2023-08-02T11:12:43Z",
  "id":1662017591,
  "issue":2601,
  "node_id":"IC_kwDODBCWws5jEGA3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-02T11:12:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I was wondering how this compares to using a `np.logical_or`:\r\n```python\r\nnp.logical_or(a==3, 1==5)\r\n# <Array [[False, True, True], [True, False]] type='2 * var * bool'>\r\n```\r\nThis would have to be stacked to include all elements of the `isin` list, but seems to already handle raggedness via being a ufunc? Not sure if there are edge cases where this breaks.\r\n\r\n_edit:_ I see that the gist is already using `logical_or`, so I guess the rest is needed to address things  I did not think of.",
  "created_at":"2023-08-02T11:24:41Z",
  "id":1662032402,
  "issue":2601,
  "node_id":"IC_kwDODBCWws5jEJoS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-02T11:25:24Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The `ak.unflatten(T(ak.flatten(...)), ...)` pattern is effectively what happens _inside_ Awkward Array; many functions recurse _through_ the layouts until they hit the correct depth.\r\n\r\n`ak.transform` permits a user to write a function that stops at an arbitrary layout within the tree, equivalent to applying the above pattern to any arbitrary depth. \r\n\r\nWe have a non-insignificant suite of types to consider. Among the main ones to think about here are option types and strings. The example linked above handles these cases in addition to simple number-only layouts. Unions should just work, but I've not given them too much thought for this simple example.\r\n\r\nIn theory, `np.isin` is free to implement a binary search to improve search performance for large haystacks. IIRC, it may do so if appropriate.",
  "created_at":"2023-08-02T11:53:14Z",
  "id":1662071670,
  "issue":2601,
  "node_id":"IC_kwDODBCWws5jETN2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-02T11:54:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I made some progress understanding what causes this to happen. Here is a significantly simplified reproducer:\r\n```python\r\nimport awkward as ak\r\nimport numba\r\nimport numpy as np\r\n\r\nbehavior = {}\r\n\r\nak.jax.register_and_check()\r\n\r\nUSE_JAX = False  # set to False to run this successfully\r\ninput_arr = ak.Array([1.0], backend=(\"jax\" if USE_JAX else \"cpu\"))\r\n\r\n\r\n@numba.vectorize(\r\n    [\r\n        numba.float32(numba.float32, numba.float32),\r\n        numba.float64(numba.float64, numba.float64),\r\n    ]\r\n)\r\ndef _some_kernel(x, y):\r\n    return x * x + y * y\r\n\r\n\r\n@ak.mixin_class(behavior)\r\nclass SomeClass:\r\n    @property\r\n    def some_kernel(self):\r\n        return _some_kernel(self.x, self.y)\r\n\r\n\r\nak.behavior.update(behavior)\r\n\r\narr = ak.zip({\"x\": input_arr, \"y\": input_arr}, with_name=\"SomeClass\")\r\n\r\narr.some_kernel  # crashes with Jax\r\n```\r\n\r\nThis results in\r\n```pytb\r\nAttributeError: module 'jax.numpy' has no attribute '_some_kernel'\r\n\r\nThis error occurred while calling\r\n\r\n    numpy._some_kernel.__call__(\r\n        <Array [1.0] type='1 * float32'>\r\n        <Array [1.0] type='1 * float32'>\r\n    )\r\n```\r\n\r\nThe code runs successfully with `USE_JAX = False`. It also works fine when removing the `@numba.vectorize` decorator from the kernel. I imagine numba + jax are just generically incompatible here. If that is the case and it is expected that this setup does not work, maybe there is a way to improve the error message for such a setup.",
  "created_at":"2023-10-05T08:36:02Z",
  "id":1748380547,
  "issue":2603,
  "node_id":"IC_kwDODBCWws5oNiuD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-05T09:30:26Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Right - at the moment, users can't override ufuncs for JAX, so numba ufuncs throw exceptions. Numba functions wouldn't be differentiable via JAX; we'd need to substitute a JAX implementation. ",
  "created_at":"2023-10-05T13:27:31Z",
  "id":1748899775,
  "issue":2603,
  "node_id":"IC_kwDODBCWws5oPhe_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-05T13:27:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2604](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (50b7abd) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/780276594ad8f0b716e810f7a43349bbdd08b2fb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7802765) will **decrease** coverage by `0.06%`.\n> The diff coverage is `71.72%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/bitmaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `82.52% <42.85%> (-2.90%)` | :arrow_down: |\n| [src/awkward/forms/indexedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZGZvcm0ucHk=) | `78.50% <42.85%> (-2.50%)` | :arrow_down: |\n| [src/awkward/forms/listform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdGZvcm0ucHk=) | `77.14% <42.85%> (-2.45%)` | :arrow_down: |\n| [src/awkward/forms/numpyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbnVtcHlmb3JtLnB5) | `83.13% <50.00%> (-12.71%)` | :arrow_down: |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.82% <75.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/forms/bytemaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `84.53% <85.71%> (+0.09%)` | :arrow_up: |\n| [src/awkward/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.14% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/\\_ext.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2V4dC5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/forms/emptyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `86.02% <100.00%> (+1.13%)` | :arrow_up: |\n| [src/awkward/forms/indexedoptionform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZG9wdGlvbmZvcm0ucHk=) | `88.77% <100.00%> (+0.86%)` | :arrow_up: |\n| ... and [5 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2604?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-08-03T02:43:21Z",
  "id":1663213427,
  "issue":2604,
  "node_id":"IC_kwDODBCWws5jIp9z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-07T21:38:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"We should let @zbhatti test this before merging.",
  "created_at":"2023-08-03T02:43:38Z",
  "id":1663213595,
  "issue":2604,
  "node_id":"IC_kwDODBCWws5jIqAb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T02:43:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> We should let @zbhatti test this before merging.\r\n\r\n@zbhatti in your environment to try this out you should follow the instructions here: https://github.com/scikit-hep/awkward#installation-for-developers (but with this branch `jpivarski/allow-unpickle-from-awkward1` checked out)",
  "created_at":"2023-08-03T06:22:00Z",
  "id":1663356395,
  "issue":2604,
  "node_id":"IC_kwDODBCWws5jJM3r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T19:31:41Z",
  "user":"MDQ6VXNlcjUxNDIzOTQ="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is apparently easier than I'd anticipated, thanks for tackling it @jpivarski!\r\n\r\nWe could create shim classes in `_ext` to avoid mixing v1 logic into v2 forms, but I'm not *that* worried about it, so let's keep it as-is.\r\n\r\nI've added support for partitioned arrays, which I think ticks all boxes?",
  "created_at":"2023-08-04T10:25:44Z",
  "id":1665384855,
  "issue":2604,
  "node_id":"IC_kwDODBCWws5jQ8GX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-04T10:25:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I've added support for partitioned arrays, which I think ticks all boxes?\r\n\r\nThat's great!\r\n\r\nTo fix CI, we'll need to merge in #2617.\r\n\r\nIt looks like the last successful test (5b1677c0a57342af1fddbc9ce7923c97f32ee1b1) passed the sdist tests.\r\n\r\nhttps://github.com/scikit-hep/awkward/pull/2604#discussion_r1282580623 should have been a separate PR, but we can just wait for this one to get merged, since I think that's pretty soon.\r\n\r\nWe haven't heard from @zbhatti about whether this works in his case. We can wait a bit longer, but then move ahead anyway and if there are any specific problems with unpickling his files, we'll address them in another PR.",
  "created_at":"2023-08-07T17:51:43Z",
  "id":1668341320,
  "issue":2604,
  "node_id":"IC_kwDODBCWws5jcN5I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-07T17:51:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> We can wait a bit longer, but then move ahead anyway and if there are any specific problems with unpickling his files, we'll address them in another PR.\r\n\r\n@jpivarski as I'm working with him I think it is fine to merge whenever you're ready and he can follow up with additional questions.",
  "created_at":"2023-08-07T20:40:58Z",
  "id":1668550326,
  "issue":2604,
  "node_id":"IC_kwDODBCWws5jdA62",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-08-07T20:40:58Z",
  "user":"MDQ6VXNlcjUxNDIzOTQ="
 },
 {
  "author_association":"MEMBER",
  "body":"Is Termux included in Python's `manylinux` or `musllinux` definitions? That's [what we support](https://pypi.org/project/awkward-cpp/#files), although it sounds cool to run Awkward on a phone!\r\n\r\nI don't know whether this procedure with `patchelf` would invalidate our wheels by including .so versions that might clash with what we find on a target system. (Fixing for Termux might be breaking for other Linux systems.)\r\n\r\nIf we leave things as-is, call this not a bug, I would like to turn this Issue into a Discussion so that it remains unclosed for anyone else who encounters this problem on Termux.",
  "created_at":"2023-08-03T16:21:03Z",
  "id":1664275405,
  "issue":2605,
  "node_id":"IC_kwDODBCWws5jMtPN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T16:21:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"To be clear, I wasn't suggesting you do the `patchelf` hack to fix it. It's a workaround that worked for me and might help others (as you say). I also thought the information might help you diagnose the issue.\r\nThe actual problem is happening in the link step, but I don't know enough about the build system to help more than that.\r\n\r\nNot sure about `manylinux`/`musllinux`. I'll try and find out.",
  "created_at":"2023-08-03T16:39:20Z",
  "id":1664301231,
  "issue":2605,
  "node_id":"IC_kwDODBCWws5jMziv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T16:39:20Z",
  "user":"MDQ6VXNlcjY0ODAxNjA="
 },
 {
  "author_association":"MEMBER",
  "body":"It might not be an error: perhaps `manylinux`/`musllinux` are supposed to leave these libraries out (they've very fundamental: `libdl.so`, `libc++_shared.so`, `libm.so`, `libc.so`). It may be that Termux doesn't qualify as a `manylinux` or `musllinux` distribution, and so it's not supported by Python libraries that only build these wheels (like Awkward). There are other Linux distributions that don't qualify.\r\n\r\nIf that's the case, then the best thing to do, I think, is to convert this Issue into a Discussion, so that other Termux users can learn the work-around.",
  "created_at":"2023-08-03T17:08:04Z",
  "id":1664338941,
  "issue":2605,
  "node_id":"IC_kwDODBCWws5jM8v9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T17:08:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"A super brief search suggests that this is an android linker behaviour: https://github.com/android/ndk/issues/201",
  "created_at":"2023-08-04T10:40:22Z",
  "id":1665401054,
  "issue":2605,
  "node_id":"IC_kwDODBCWws5jRADe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-04T10:40:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm going to close this for now, as we don't target termux. It would be interesting to hear more about your use case, so please feel free to loop us in with what you're doing!",
  "created_at":"2023-11-07T21:09:00Z",
  "id":1800123153,
  "issue":2605,
  "node_id":"IC_kwDODBCWws5rS7MR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-07T21:09:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna I notice that it gives an error - `inline variables require at least std:c++17` and `LayoutBuilder.h` is restricted to `std:c++11`. ",
  "created_at":"2023-08-03T13:48:04Z",
  "id":1664017595,
  "issue":2606,
  "node_id":"IC_kwDODBCWws5jLuS7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T15:25:40Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2606?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2606](https://app.codecov.io/gh/scikit-hep/awkward/pull/2606?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (85efce2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/ce63bf2b4afebd93e5b1b67d9985d66b51d37bc5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ce63bf2) will **increase** coverage by `0.01%`.\n> Report is 2 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n[see 2 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2606/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-08-03T13:49:54Z",
  "id":1664020584,
  "issue":2606,
  "node_id":"IC_kwDODBCWws5jLvBo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-06T17:03:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski `default_options` is an inline variable that's why it gives an error that it requires C++17.\r\n\r\n`D:\\a\\awkward\\awkward\\header-only\\layout-builder\\awkward/LayoutBuilder.h(22,36): error C7525: inline variables require at least '/std:c++17' [D:\\a\\awkward\\awkward\\build\\tests\\test_1494-layout-builder.vcxproj]`",
  "created_at":"2023-08-03T15:39:17Z",
  "id":1664214743,
  "issue":2606,
  "node_id":"IC_kwDODBCWws5jMebX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T15:39:17Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"Ah, right! I missed that `default_options` is a variable.\r\n\r\nIf you want a quick-and-dirty way to ensure that this PR does not depend on #2608, you could replace the inline variable with a preprocessor `#define`. That name will leak into any code that `#includes` this file, without `namespace` qualifications, so the name would need to be qualified:\r\n\r\n```c++\r\n#define AWKWARD_LAYOUTBUILDER_DEFAULT_OPTIONS awkward::BuilderOptions(1024, 1)\r\n```\r\n\r\nand then use `AWKWARD_LAYOUTBUILDER_DEFAULT_OPTIONS` in place of `awkward::LayoutBuilder::default_options` everywhere.\r\n\r\n------------------------\r\n\r\nFor completeness, all of the functions ought to be `inline`, as @henryiii pointed out. In LayoutBuilder.h, I see:\r\n\r\n  * `default_options` (already addressed)\r\n  * `class Empty` is not a template, but I'm not sure if the always-inline rule for header-only libraries applies to classes...\r\n\r\nIn utils.h, I see:\r\n\r\n  * `type_to_name` is a templated function, but it has been instantiated for some concrete types, so I guess that needs to be inlined (already addressed)\r\n  * `type_to_numpy_like`, same thing\r\n  * `type_to_form` is a templated function, and I don't see any concrete instantiations, so I guess it's fine to leave it non-inlined\r\n  * `visit_impl` is implemented in some concrete cases; maybe that needs to be inlined. It hasn't been: does anything bad happen if you try inlining it? (Do you know what it's used for, and do you have any tests that would verify that it's okay to inline?)",
  "created_at":"2023-08-03T16:06:17Z",
  "id":1664254770,
  "issue":2606,
  "node_id":"IC_kwDODBCWws5jMoMy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T16:06:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> If you want a quick-and-dirty way to ensure that this PR does not depend on #2608, you could replace the inline variable with a preprocessor `#define`. That name will leak into any code that `#includes` this file, without `namespace` qualifications, so the name would need to be qualified:\r\n> \r\n> ```c++\r\n> #define AWKWARD_LAYOUTBUILDER_DEFAULT_OPTIONS awkward::BuilderOptions(1024, 1)\r\n> ```\r\n> \r\n> and then use `AWKWARD_LAYOUTBUILDER_DEFAULT_OPTIONS` in place of `awkward::LayoutBuilder::default_options` everywhere.\r\n> \r\n\r\nYes, this can be a temporary workaround until the version isn't updated to C++17. Should I add these changes to this PR?\r\n\r\n\r\n> * `visit_impl` is implemented in some concrete cases; maybe that needs to be inlined. It hasn't been: does anything bad happen if you try inlining it? (Do you know what it's used for, and do you have any tests that would verify that it's okay to inline?)\r\n\r\n`visit_impl` is a struct so it can't be inlined. `default_options`, `type_to_name`, and `type_to_numpy_like` are the ones that give linker errors so I think those might be the only one that needs to be inlined.",
  "created_at":"2023-08-03T16:41:54Z",
  "id":1664304873,
  "issue":2606,
  "node_id":"IC_kwDODBCWws5jM0bp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T16:41:54Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, then it sounds good. Let's use the preprocessor as a temporary workaround for not requiring C++17 yet. (Our next opportunity to do that is September 1.)",
  "created_at":"2023-08-03T16:54:49Z",
  "id":1664321862,
  "issue":2606,
  "node_id":"IC_kwDODBCWws5jM4lG",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-08-03T16:54:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The debugging part of the exception stack trace:\r\n\r\n```\r\n>>> ak.sum(t, axis=1)\r\nTraceback (most recent call last):\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/_dispatch.py\", line 43, in dispatch\r\n    next(gen_or_result)\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_sum.py\", line 204, in sum\r\n    return _impl(array, axis, keepdims, mask_identity, highlevel, behavior)\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_sum.py\", line 267, in _impl\r\n    out = ak._do.reduce(\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/_do.py\", line 336, in reduce\r\n    next = layout._reduce_next(\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/contents/regulararray.py\", line 1094, in _reduce_next\r\n    assert nextlen == 0\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/_nplikes/shape.py\", line 74, in __eq__\r\n    raise TypeError(\"cannot compare unknown lengths against known values\")\r\nTypeError: cannot compare unknown lengths against known values\r\n```\r\n\r\nThe line where it fails is\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/ce63bf2b4afebd93e5b1b67d9985d66b51d37bc5/src/awkward/contents/regulararray.py#L1094\r\n\r\nI suppose it would be okay for this assertion to test \"unknown or zero.\" I'll open a PR, just trying it, and I'll ask you to test it to see if it works or if it hits another error later.",
  "created_at":"2023-08-03T16:27:13Z",
  "id":1664284016,
  "issue":2607,
  "node_id":"IC_kwDODBCWws5jMvVw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T16:27:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This change should happen on an Awkward minor release number. The next one is 2.4.0, [scheduled](https://github.com/scikit-hep/awkward/wiki#api-breaking-changes-after-20) for September 1, 2023. (We can't change a dependency major version number on an Awkward patch release.)",
  "created_at":"2023-08-03T16:54:03Z",
  "id":1664320934,
  "issue":2608,
  "node_id":"IC_kwDODBCWws5jM4Wm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T16:54:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, this is intentional; we know that the axis has length-one, so we add that information.Is this a problem for you?\r\n\r\nhttps://github.com/scikit-hep/awkward/pull/1943#issuecomment-1336197310 provides some context on the history of this decision :)",
  "created_at":"2023-08-03T16:37:19Z",
  "id":1664298670,
  "issue":2609,
  "node_id":"IC_kwDODBCWws5jMy6u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-03T16:37:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I noticed this issue because I was slicing using the now-regular array, which removes a dimension.\r\nIn this case, I will use `ak.from_regular` to make sure its variable-length again. Thanks.",
  "created_at":"2023-08-04T13:46:19Z",
  "id":1665632947,
  "issue":2609,
  "node_id":"IC_kwDODBCWws5jR4qz",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-08-04T13:46:19Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"This fixes the issue for me.",
  "created_at":"2023-08-04T13:53:13Z",
  "id":1665644362,
  "issue":2610,
  "node_id":"IC_kwDODBCWws5jR7dK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-04T13:53:13Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "author_association":"MEMBER",
  "body":"I should have marked this ready for review last week when @jrueb said it worked. This one ought to go in today's release because it's fixing a bug encountered in the wild. Any chance you could sign off on it today, @agoose77?",
  "created_at":"2023-08-11T16:35:11Z",
  "id":1675068052,
  "issue":2610,
  "node_id":"IC_kwDODBCWws5j14KU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T16:35:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks!",
  "created_at":"2023-08-11T16:38:17Z",
  "id":1675072840,
  "issue":2610,
  "node_id":"IC_kwDODBCWws5j15VI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T16:38:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2610?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2610](https://app.codecov.io/gh/scikit-hep/awkward/pull/2610?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9a05082) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/d1f98924a606391f6e1896ad5e7644cfc830dfbf?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d1f9892) will **not change** coverage.\n> Report is 2 commits behind head on main.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2610?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2610?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `84.68% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-08-11T16:43:12Z",
  "id":1675078655,
  "issue":2610,
  "node_id":"IC_kwDODBCWws5j16v_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T16:43:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Not going to wait for review on this one, as it's clearly a typo and we've already discussed this in another PR :)",
  "created_at":"2023-08-04T08:40:22Z",
  "id":1665238664,
  "issue":2612,
  "node_id":"IC_kwDODBCWws5jQYaI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-04T08:40:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2613](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5a9fb07) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/089f8430e4b95b8b6b84ce941f6d1423dd6f4518?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (089f843) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.05% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.64% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_errors.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `78.86% <100.00%> (-0.26%)` | :arrow_down: |\n| [src/awkward/\\_layout.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2xheW91dC5weQ==) | `83.67% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.07% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.36% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.99% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.32% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `81.01% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.18% <100.00%> (\u00f8)` | |\n| ... and [16 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2613?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-08-04T11:05:09Z",
  "id":1665432976,
  "issue":2613,
  "node_id":"IC_kwDODBCWws5jRH2Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-04T11:05:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`main@85ca6d5`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `98.93%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/pyarrow.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `91.15% <90.00%> (\u00f8)` | |\n| [src/awkward/operations/str/akstr\\_join.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfam9pbi5weQ==) | `92.68% <92.68%> (\u00f8)` | |\n| [src/awkward/operations/str/akstr\\_repeat.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfcmVwZWF0LnB5) | `94.44% <94.44%> (\u00f8)` | |\n| [.../awkward/operations/str/akstr\\_join\\_element\\_wise.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfam9pbl9lbGVtZW50X3dpc2UucHk=) | `95.65% <95.65%> (\u00f8)` | |\n| [src/awkward/operations/str/akstr\\_index\\_in.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfaW5kZXhfaW4ucHk=) | `96.42% <96.42%> (\u00f8)` | |\n| [src/awkward/operations/str/akstr\\_is\\_in.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfaXNfaW4ucHk=) | `96.42% <96.42%> (\u00f8)` | |\n| [src/awkward/operations/str/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvX19pbml0X18ucHk=) | `98.80% <98.80%> (\u00f8)` | |\n| [src/awkward/contents/unmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `73.62% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/str/akstr\\_capitalize.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfY2FwaXRhbGl6ZS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| ... and [43 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2616?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-08-04T21:57:35Z",
  "id":1666218423,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jUHm3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T17:49:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The `split_*` functions don't look fundamentally hard. They have to pass parameters (constants, not broadcasted arrays) and they output lists of strings instead of strings. If the `bytestring_to_string=True` option is needed for bytestrings (very unlikely!), then the string \u2192 bytestring repacking will need to be applied one level deeper (but I don't think that `bytestring_to_string=True` will be needed).\r\n\r\nThe `extract_regex` function is straightforward to call, but it returns an Arrow struct. If the record field names are formulaic (`\"\\1\"`, `\"\\2\"`, etc.), then we'd probably want to set the `fields` of the output to `None` so that it becomes an Awkward tuple. (We can assign to the output in place because it was just created by `ak.from_arrow`, and the `fields` is not the zero-copy data.)\r\n\r\nThe only remaining function that needs to be broadcasted (like `binary_repeat`) is `join_element_wise`. Unlike `binary_repeat`, there's no choice about whether to broadcast or not, and there can be more than two arrays to broadcast. (All of the `*strings` arrays [documented here](https://arrow.apache.org/docs/python/generated/pyarrow.compute.binary_join_element_wise.html) would have to be broadcasted). This will probably be the hardest one.\r\n\r\nBy comparison, `join` ([documented here](https://arrow.apache.org/docs/python/generated/pyarrow.compute.binary_join.html)) does not broadcast, but it needs to be applied at the level of lists of strings, not just strings (one level deep). It's a reducer.\r\n\r\nTwo of the containment tests take an array-like second argument: `index_in` and `is_in`. This argument is `value_set` (see [index_in](https://arrow.apache.org/docs/python/generated/pyarrow.compute.index_in.html) and [is_in](https://arrow.apache.org/docs/python/generated/pyarrow.compute.is_in.html), which is a set of strings that each string in the `values` is compared against, but _it is not broadcasted_ to `values`. So it's much easier than `join_element_wise`.\r\n\r\nNone of the remaining functions look sufficiently different from the ones that have been implemented so far as to be a problem.",
  "created_at":"2023-08-05T02:28:59Z",
  "id":1666356609,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jUpWB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-05T02:28:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Jim, this is a phenomenal piece of work. Looking forward to reviewing it.\r\n\r\nP.S. I touched your PR description to fix the links. Correct anything if you feel I made a mistake.",
  "created_at":"2023-08-06T17:00:01Z",
  "id":1666920708,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jWzEE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-06T17:15:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've added `split_whitespace`, `split_pattern`, and `split_pattern_regex`. I've noticed that these operations return nullable types, so the round-trip logic in `_get_action` doesn't correctly re-interpret the result as bytestrings if the input is a bytestring (and `bytestring_to_string=True`). \r\n\r\nAs such, I added a new `_get_split_action` that handles the case where a returned list contains a nullable string`. I don't *think* we should ever get anything besides an `UnmaskedArray` here, as we never pass any null data to Arrow.\r\n\r\nIt's not clear to me whether we're passing a nullable type, or whether Arrow is just deciding to return a nullable type. My hunch was that if the input `StringArray` is nullable, then the result is nullable, but I can't check whether the type we build is considered `nullable` by arrow; `large_string` or `large_binary` don't seem to expose this information.\r\n\r\nI haven't added tests here yet, but they should be fairly easy.",
  "created_at":"2023-08-07T11:45:15Z",
  "id":1667704440,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jZyZ4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-07T11:45:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"`binary_join` is not too tricky, but it looks like the Arrow kernel only supports nullable, _small_ strings. A first-pass is [here](https://gist.github.com/agoose77/28e5bb0250678e454356a85861a16368), although it should be cleaned up. I just played around to get it working, rather than thinking through robustly what the recursion function should look like.\r\n\r\nWhen working on these functions, two questions come to mind:\r\n1. Should we perform validation logic in Awkward, rather than relying on Arrow to error if an invalid type is passed?\r\n2. Should we treat operations on incompatible types (e.g. string operations on non-strings, or on record arrays) as errors, rather than silently returning the original array?\r\n\r\nOn both of these points, I think the answer is yes. There are some Awkward functions for which being permissive is perhaps a good thing, e.g. `ak.values_astype`. However, in general we have type information available and I think it would be useful for users to be able to detect operations upon the \"wrong\" types as early as possible. Do you agree, @jpivarski?",
  "created_at":"2023-08-07T13:06:39Z",
  "id":1667825759,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jaQBf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-07T13:35:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> When working on these functions, two questions come to mind:\r\n> \r\n> 1. Should we perform validation logic in Awkward, rather than relying on Arrow to error if an invalid type is passed?\r\n> 2. Should we treat operations on incompatible types (e.g. string operations on non-strings, or on record arrays) as errors, rather than silently returning the original array?\r\n\r\n1. We ensure the type of data that we send to Arrow. If there are any errors to catch after this, it could be hard to discover them all. (At least, it could be a big project.) Arrow's own error messages are _probably_ good enough, especially since we show which `ak.str.*` function it shows up in.\r\n2. The value-added that Awkward provides is that the strings could be nested in some other data types. For instance, we add the ability to do crazy stuff like this:\r\n\r\n```python\r\n>>> ak.str.upper(ak.Array([\"look\", [\"what\", [\"we\", [\"can\", \"do!\"]]]])).show()\r\n['LOOK',\r\n ['WHAT', ['WE', ['CAN', 'DO!']]]]\r\n```\r\n\r\nWe wouldn't want to throw that away because it's not (exclusively) string-like. Maybe if the `recursively_apply` finishes without finding _any_ strings, maybe that could be an error case. I'll look into that.",
  "created_at":"2023-08-07T19:32:29Z",
  "id":1668463488,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jcruA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-07T19:32:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> By comparison, `join` ([documented here](https://arrow.apache.org/docs/python/generated/pyarrow.compute.binary_join.html)) does not broadcast, but it needs to be applied at the level of lists of strings, not just strings (one level deep). It's a reducer.\r\n\r\nI was wrong: `binary_join` does broadcast. I'll try using your gist.",
  "created_at":"2023-08-07T20:13:08Z",
  "id":1668509153,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jc23h",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-07T20:13:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski is [559073b](https://github.com/scikit-hep/awkward/pull/2616/commits/559073b1b047e099b5fce0dcd0930bd2154feedd) necessary? The arguments for e.g. `ak_center` are not handled via broadcasting.",
  "created_at":"2023-08-07T20:39:14Z",
  "id":1668548444,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jdAdc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-07T20:39:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I completed a preliminary pass of the containment tests. Would you be able to give them another eye? The error behaviour isn't right yet, but the non-error cases should work.\r\n\r\nI'll give the docstrings a proper pass before final review, too. These are placeholder.",
  "created_at":"2023-08-07T22:48:40Z",
  "id":1668671916,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jdems",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-07T22:51:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I think this is ready to go! I see the merit in being permissive for our string operations, and I think upon reflection that most of our functions are like this.\r\n\r\nI have one outstanding API question that we need to figure out \u2014 whether to drop the `ak_` prefix for string function module names? I think we should, and it suggests that the module names in `ak.operations` should also be changed. I don't know the motivation for the `ak_` prefix; it helps with indicating that a module contains a high-level function, but that's not a strong motivation for keeping it. ",
  "created_at":"2023-08-08T11:09:42Z",
  "id":1669411497,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jgTKp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T12:38:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The `ak_` prefix was to distinguish between modules and the high-level functions they contain. Some of the high-level functions have the same names as Python built-ins, so I wanted something to not spread that degeneracy into the module names as well.\r\n\r\nYou're right that `ak_` makes a lot less sense for these functions, which aren't `ak.*` but `ak.str.*`. I wasn't sure what to do about that when starting this PR, but I just went with the flow. We could use a `ak_str_` prefix, adding boilerplate, but it would be less confusing. If someone has a nested, indented file-browser, digging more deeply into the file structure would indent to the right because these functions are in a directory named `str`, but also because their names have longer prefixes.\r\n\r\nMaybe all of the modules should be prefixed by something neutral, like `m_` for module (not to be confused with \"private\" in C++), `h_` for high-level function, or `o_` for operation.\r\n\r\nI don't think this needs to be decided now.\r\n\r\nIt's great that all of these functions are done! We should tell @martindurant that he can try them out on some log-file data whenever he gets a chance. I'll merge this (unclear who should review it) after testing against all other outstanding merges into main.",
  "created_at":"2023-08-08T14:13:55Z",
  "id":1669703032,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jhaV4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T14:13:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"If we don't sort this now, well have to change the names in a breaking way down the road (only breaking for imports, which resolve file paths under the hood). That's already true for ak.operations.\n\nI don't think we should make the ak.operations module private though - I think we want public apis to live in public modules. I'm still thinking that through, though. ",
  "created_at":"2023-08-08T14:21:50Z",
  "id":1669716449,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jhdnh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T14:21:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Technically true, but should people really be accessing `ak.XYZ` through `ak.operations.XYZ` or `ak.operations.ak_XYZ.XYZ` anyway? It seems like there should be only one way to access these functions; putting them inside directories is for our own organization. I'd be happy with `operations` \u2192 `_operations`.",
  "created_at":"2023-08-08T14:27:57Z",
  "id":1669734155,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jhh8L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T14:27:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I suppose this means there's no longer any need for the same functionality in awkward-pandas, but I do think it would like to keep a `str` accessor whatever you decide here, since that's the pandas pattern.\r\n\r\nHow is the performance?\r\n\r\nYes, agree that nice log datasets would be perfect;  https://github.com/logpai/loghub ?",
  "created_at":"2023-08-08T14:34:57Z",
  "id":1669745757,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jhkxd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T14:34:57Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"Performance should be whatever Arrow provides, which I expect to be good. (All of those functions are C++, exposed through Cython.)\r\n\r\nIt looks like the log files in that GitHub repo are not the full datasets. Some of them are supposedly 20\u201230 GB, but the file itself looks like a few kB. Besides, if they really put many GB in a git repo, it would be very hard to clone.\r\n\r\nWe'd also need something to preprocess it, to get it into an Awkward format. That text processing would take some significant time.\r\n\r\nAre any of them JSON? We already have an optimized JSON parser.",
  "created_at":"2023-08-08T14:44:38Z",
  "id":1669762426,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jho16",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T14:44:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"The full data files are at https://zenodo.org/record/8196385 (zip and tar.gz files). The repo contains all the data descriptions as READMEs.",
  "created_at":"2023-08-08T14:46:26Z",
  "id":1669765425,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jhpkx",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-08-08T14:46:26Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"I renamed the modules in `ak.operations.str` as `akstr_*` to acknowledge that they're not in the `ak.*` namespace, but the `ak.str.*` namespace. I think this will at least be a non-confusing choice (and I thought the extra underscore between \"ak\" and \"str\" is gratuitous). Eventually, I think `ak.operations` should be private (L3), but that can be later and it will require a deprecation cycle.\r\n\r\nI'm guessing this is not controversial, so I'll enable auto-merge, but you can stop it and we'll discuss if you have another idea.",
  "created_at":"2023-08-08T15:08:15Z",
  "id":1669804314,
  "issue":2616,
  "node_id":"IC_kwDODBCWws5jhzEa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T15:08:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"(Merging this into `main` and then from `main` to active PRs should fix the CI errors we started to see over the weekend.)",
  "created_at":"2023-08-07T15:39:54Z",
  "id":1668110364,
  "issue":2617,
  "node_id":"IC_kwDODBCWws5jbVgc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-07T15:39:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Writing to more than just local files (e.g. S3): Pandas does it; find out how they do it.\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/v2.0.3/pandas/io/feather_format.py#L93-L96\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/0f437949513225922d851e9581723d82120684a6/pandas/io/common.py#L649",
  "created_at":"2023-08-25T15:05:49Z",
  "id":1693512652,
  "issue":2618,
  "node_id":"IC_kwDODBCWws5k8PPM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-25T15:06:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2619?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2619](https://app.codecov.io/gh/scikit-hep/awkward/pull/2619?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (050bd26) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/7f8817e723cd45981ad6ab46091114c67dfbf458?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7f8817e) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-08-08T03:26:12Z",
  "id":1668850093,
  "issue":2619,
  "node_id":"IC_kwDODBCWws5jeKGt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T03:26:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski already approved the rationale here, and it's so small that I'm happy just to merge and unblock.",
  "created_at":"2023-08-08T10:13:30Z",
  "id":1669330186,
  "issue":2620,
  "node_id":"IC_kwDODBCWws5jf_UK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T10:13:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2620](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (19d578e) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/47bfdaab00c1a71aec59da3d49aedf8c7ff8f054?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (47bfdaa) will **increase** coverage by `0.00%`.\n> The diff coverage is `99.18%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Rpc3BhdGNoLnB5) | `85.00% <90.00%> (+0.62%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_all.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `96.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `92.68% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_any.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `96.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcartesian.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjYXJ0ZXNpYW4ucHk=) | `88.57% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcombinations.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjb21iaW5hdGlvbnMucHk=) | `86.95% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argmax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `87.50% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argmin.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `87.50% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argsort.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `81.48% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19iYWNrZW5kLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| ... and [93 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2620?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-08-08T10:20:41Z",
  "id":1669340523,
  "issue":2620,
  "node_id":"IC_kwDODBCWws5jgB1r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T10:20:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"As an L2 public function, typetracers are deep insider knowledge. The documentation on them shouldn't be too prominent, or we would give the wrong impression that people should use them for ordinary tasks. They are at the same level of depth as [AwkwardForth](https://awkward-array.org/doc/main/reference/awkwardforth.html), which is tucked away at the bottom of the [API reference page](https://awkward-array.org/doc/main/reference/index.html). Documentation on typetracers could go there.\r\n\r\n![image](https://github.com/scikit-hep/awkward/assets/1852447/9f718a3c-41f1-4263-8033-dc78170af41f)\r\n",
  "created_at":"2023-08-08T14:18:17Z",
  "id":1669710357,
  "issue":2621,
  "node_id":"IC_kwDODBCWws5jhcIV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T14:18:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> For group-by, I've been thinking that we might want to lean on Arrow even more and use its [group by aggregations](https://arrow.apache.org/docs/python/compute.html#grouped-aggregations). Same for [SQL-like joins](https://arrow.apache.org/docs/python/compute.html#table-and-dataset-joins).\r\n\r\nAgreed. It doesn't make sense for us to re-invent the wheel unless we have to. The downside with Arrow is that it doesn't support all of the backends that we use, but there may be places that specialised Arrow support is worth having.",
  "created_at":"2023-08-08T14:47:45Z",
  "id":1669767679,
  "issue":2622,
  "node_id":"IC_kwDODBCWws5jhqH_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-08T14:47:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2623?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2623](https://app.codecov.io/gh/scikit-hep/awkward/pull/2623?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fc769e2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/1cfea2fc38693c3ac5855cb9571dbca5d13537fc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1cfea2f) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n> :exclamation: Current head fc769e2 differs from pull request most recent head 40acf75. Consider uploading reports for the commit 40acf75 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2623?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_zip.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2623?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha196aXAucHk=) | `91.80% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-08-09T10:28:17Z",
  "id":1671068993,
  "issue":2623,
  "node_id":"IC_kwDODBCWws5jmn1B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-09T13:38:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I was thinking of that: the categorical values could also be numbers without much technical difficulty. But the other side of the equation is usefulness: if categorical values could be strings, integers, and floating point values, why would anyone use anything but the strings?\r\n\r\n(Records and lists _might_ be useful, at a cost of more technical difficulty.)\r\n\r\nImplementations of categoricals in [Pandas](https://pandas.pydata.org/docs/user_guide/categorical.html), [Parquet](https://parquet.apache.org/docs/file-format/data-pages/encodings/#dictionary-encoding-plain_dictionary--2-and-rle_dictionary--8), and [Arrow](https://arrow.apache.org/blog/2019/09/05/faster-strings-cpp-parquet/) (chronological order) were inspired by the [factor type in R](https://www.stat.berkeley.edu/~s133/factors.html). (I don't know how far back it goes before that.) In all the discussion about them, I've never seen any non-string examples. (I think it's technically possible to make non-string dictionary encodings in Parquet and Arrow, but documentation always demonstrates it with strings.) Sometimes, the order of the strings is relevant, sometimes not, and of course it's useful to have nullable strings, but all of the motivations I've seen boil down to three points:\r\n\r\n* wanting to be explicit about the set (and maybe order) of enumerated tokens, which are usually meaningful and human-readable\r\n* wanting to use less memory for a big dataset of them\r\n* wanting to use less time when doing equality comparisons among them (as in selection and group-by).\r\n\r\nSo I'm in favor of making categoricals a \"stringy\" thing, locating it in the `ak.str` namespace so it's easier to justify having its implementation depend on pyarrow, and only extend beyond that if a use-case ever does come up.",
  "created_at":"2023-08-09T17:27:07Z",
  "id":1671851882,
  "issue":2625,
  "node_id":"IC_kwDODBCWws5jpm9q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-09T17:27:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Alright. Then, the logic is in future we could un-deprecate (or restore, if it's already removed from the API by then) `ak.to_categorical` and generalise to non-strings.\r\n\r\nI am still in favour of `ak.categories` remaining if we deprecate `ak.to_categorical`; we can still read categorical data from other sources, even if it's only strings that users can create in Awkward?",
  "created_at":"2023-08-09T19:12:36Z",
  "id":1671997520,
  "issue":2625,
  "node_id":"IC_kwDODBCWws5jqKhQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-09T19:12:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I see, there are two possible ways to go:\r\n\r\n1. remove the ability to _create_ categorical data of non-strings, but accept any categorical data in a `from_arrow` conversion;\r\n2. exclude categorical data as a possibility in the construction of indexed arrays with `__array__: \"categorical\"`.\r\n\r\n(1) has the advantage that more Arrow/Parquet data would be readable, but (2) has the advantage that it might be easier to do manipulations on categorical data if we can make stronger assumptions about what it contains.\r\n\r\nI can't think of what manipulations get easier. The thing that we gain by restricting non-string data is the ability to compute uniqueness, which is only needed when making categorical data from non-categorical data. So yes, (1) does look like the best option.",
  "created_at":"2023-08-09T19:22:04Z",
  "id":1672014484,
  "issue":2625,
  "node_id":"IC_kwDODBCWws5jqOqU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-09T19:22:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Agreed, (1) is the list invasive for forward thinking changes.\r\n\r\nClosed by #2630, which adds a new function.",
  "created_at":"2023-08-09T21:45:41Z",
  "id":1672198050,
  "issue":2625,
  "node_id":"IC_kwDODBCWws5jq7ei",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-09T21:45:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not sure this is still required. `unknown_length` serves as a reasonable \"you shouldn't be seeing this\" value, and we now correctly load lengths when they're needed.",
  "created_at":"2023-11-07T21:07:14Z",
  "id":1800120895,
  "issue":2628,
  "node_id":"IC_kwDODBCWws5rS6o_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-07T21:07:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2629?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2629](https://app.codecov.io/gh/scikit-hep/awkward/pull/2629?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fc0ff9b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/417af4e98596577cf7a37f167c89aeb1eeaf6c11?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (417af4e) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-08-09T17:21:06Z",
  "id":1671844296,
  "issue":2629,
  "node_id":"IC_kwDODBCWws5jplHI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T16:21:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2630?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2630](https://app.codecov.io/gh/scikit-hep/awkward/pull/2630?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (43de707) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/6c52131fcbfc46f96886b0c8a88792a6ba41b682?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6c52131) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2630?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2630?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2NhdGVnb3JpY2FsLnB5) | `95.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2630?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jYXRlZ29yaWNhbC5weQ==) | `93.54% <100.00%> (+0.21%)` | :arrow_up: |\n| [src/awkward/operations/str/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2630?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvX19pbml0X18ucHk=) | `98.82% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/operations/str/akstr\\_to\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2630?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfdG9fY2F0ZWdvcmljYWwucHk=) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-08-09T19:27:37Z",
  "id":1672021749,
  "issue":2630,
  "node_id":"IC_kwDODBCWws5jqQb1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-09T19:52:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski your initial thoughts would be welcome here :)",
  "created_at":"2023-08-09T21:49:35Z",
  "id":1672202270,
  "issue":2631,
  "node_id":"IC_kwDODBCWws5jq8ge",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-09T21:49:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2631?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2631](https://app.codecov.io/gh/scikit-hep/awkward/pull/2631?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a88109e) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e2eb69a3ee104a364bd1e7198251c49d982ce3e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e2eb69a) will **decrease** coverage by `0.02%`.\n> Report is 4 commits behind head on main.\n> The diff coverage is `63.88%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2631?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_unflatten.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2631?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `96.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2631?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `84.68% <13.33%> (-1.69%)` | :arrow_down: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2631?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.58% <100.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2631?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `81.41% <100.00%> (+0.40%)` | :arrow_up: |\n\n... and [2 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2631/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-08-09T23:06:07Z",
  "id":1672294407,
  "issue":2631,
  "node_id":"IC_kwDODBCWws5jrTAH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T11:57:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2632?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2632](https://app.codecov.io/gh/scikit-hep/awkward/pull/2632?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1801222) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e2eb69a3ee104a364bd1e7198251c49d982ce3e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e2eb69a) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2632?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_unflatten.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2632?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `96.15% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-08-09T23:33:38Z",
  "id":1672317831,
  "issue":2632,
  "node_id":"IC_kwDODBCWws5jrYuH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-09T23:33:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2633?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2633](https://app.codecov.io/gh/scikit-hep/awkward/pull/2633?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9d4d682) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e2eb69a3ee104a364bd1e7198251c49d982ce3e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e2eb69a) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-08-10T02:32:33Z",
  "id":1672458635,
  "issue":2633,
  "node_id":"IC_kwDODBCWws5jr7GL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-10T02:32:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2634?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2634](https://app.codecov.io/gh/scikit-hep/awkward/pull/2634?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (746cbdb) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e2eb69a3ee104a364bd1e7198251c49d982ce3e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e2eb69a) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2634?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2634?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.16% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2634?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.60% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-08-10T10:18:11Z",
  "id":1672951869,
  "issue":2634,
  "node_id":"IC_kwDODBCWws5jtzg9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-10T10:18:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We should just write some demo data to disk, rather than loading a huge remote resource.",
  "created_at":"2023-08-10T12:17:25Z",
  "id":1673109484,
  "issue":2635,
  "node_id":"IC_kwDODBCWws5juZ_s",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-10T12:17:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> But another problem with basing tutorials on very large datasets is that it introduces a large computation cost every time we build documentation, as well as a likely source of failure. (For example, the machine running the test to generate the output is overwhelmed and the test sometimes fails to build.)\r\n\r\nYes, that's the main reason that I'm in favour of vendoring (a subset of) these data.",
  "created_at":"2023-08-11T11:24:06Z",
  "id":1674592939,
  "issue":2635,
  "node_id":"IC_kwDODBCWws5j0EKr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T11:24:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2635?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2635](https://app.codecov.io/gh/scikit-hep/awkward/pull/2635?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ee51821) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2d21296e224dc85044ae9df1a052454af4a36520?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2d21296) will **increase** coverage by `0.02%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head ee51821 differs from pull request most recent head 9e0e37a. Consider uploading reports for the commit 9e0e37a to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n[see 3 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2635/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-08-11T11:50:26Z",
  "id":1674619289,
  "issue":2635,
  "node_id":"IC_kwDODBCWws5j0KmZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T12:54:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Should this one be included in today's release? I approved it because I think it's the right documentation, though I'm not sure if the switch to vendoring a subset of the data is to happen in this PR or another one.\r\n\r\nThe tests aren't all running because it's a documentation-only PR, which I can force-merge if it's ready to go today.",
  "created_at":"2023-08-11T16:32:58Z",
  "id":1675064967,
  "issue":2635,
  "node_id":"IC_kwDODBCWws5j13aH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T16:32:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, we should include it! It contains the vendored log files as discussed :)",
  "created_at":"2023-08-11T22:00:34Z",
  "id":1675449122,
  "issue":2635,
  "node_id":"IC_kwDODBCWws5j3VMi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-12T14:33:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay! I'll merge it now. `awkward-cpp` is almost done.",
  "created_at":"2023-08-11T22:03:58Z",
  "id":1675452387,
  "issue":2635,
  "node_id":"IC_kwDODBCWws5j3V_j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T22:03:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Another thing I've been wondering about in this context: the trace points to an API `ak.from_arraylib` that I cannot find in the documentation. It lives in the internal `ak._layout` as `ak._layout.from_arraylib`, which explains why it is not documented. Is there a way to make this show up with its correct full path? I had a look at trying to understand the way this gets imported and am guessing that the `ak.from_jax` (which comes in via `ak.operations`) makes it have this name via https://github.com/scikit-hep/awkward/blob/8ba3e304150b8af588fa705aa1de91dae6f9aa6b/src/awkward/operations/ak_from_jax.py#L5 but then it is unclear to me why I can't call `ak.from_arraylib` myself too.",
  "created_at":"2023-08-11T09:05:52Z",
  "id":1674427214,
  "issue":2637,
  "node_id":"IC_kwDODBCWws5jzbtO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T09:05:52Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2639?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2639](https://app.codecov.io/gh/scikit-hep/awkward/pull/2639?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6958c59) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2d21296e224dc85044ae9df1a052454af4a36520?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2d21296) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-08-10T18:06:59Z",
  "id":1673676120,
  "issue":2639,
  "node_id":"IC_kwDODBCWws5jwkVY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T13:58:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"As a documentation-only PR, this has to be force-merged.",
  "created_at":"2023-08-11T16:31:00Z",
  "id":1675061939,
  "issue":2640,
  "node_id":"IC_kwDODBCWws5j12qz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T16:31:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2641?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2641](https://app.codecov.io/gh/scikit-hep/awkward/pull/2641?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (18b0eb4) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/38eb9adcff60b5f5d0156afb74ebad6cab11e162?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (38eb9ad) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-08-11T17:30:17Z",
  "id":1675141774,
  "issue":2641,
  "node_id":"IC_kwDODBCWws5j2KKO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-11T17:30:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2643?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2643](https://app.codecov.io/gh/scikit-hep/awkward/pull/2643?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8cded85) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e44cc0c9aa96236ab1c7b6ec9b5d5bf093af66dc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e44cc0c) will **not change** coverage.\n> Report is 1 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-08-14T12:39:54Z",
  "id":1677242464,
  "issue":2643,
  "node_id":"IC_kwDODBCWws5j-LBg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-14T12:39:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2644?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2644](https://app.codecov.io/gh/scikit-hep/awkward/pull/2644?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5ef5c77) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2825fadce5802f333c92d15d6e0642d2cb2e9e29?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2825fad) will **not change** coverage.\n> Report is 1 commits behind head on main.\n> The diff coverage is `21.42%`.\n\n> :exclamation: Current head 5ef5c77 differs from pull request most recent head 4f50eb3. Consider uploading reports for the commit 4f50eb3 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2644?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/layout.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2644?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `83.68% <10.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2644?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.37% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2644?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `84.95% <50.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-08-14T19:39:02Z",
  "id":1677951242,
  "issue":2644,
  "node_id":"IC_kwDODBCWws5kA4EK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-12T15:04:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Currently, the error is due to the `cmake` package on PyPI. The [Linux Python 3.12 test](https://github.com/scikit-hep/awkward/actions/runs/5900302218/job/16004317102?pr=2644) fails because\r\n\r\n```\r\n... (lots of output, ending with) ...\r\n  pip._vendor.pyproject_hooks._impl.BackendUnavailable: Traceback (most recent call last):\r\n    File \"/opt/hostedtoolcache/Python/3.12.0-rc.1/x64/lib/python3.12/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 77, in _build_backend\r\n      obj = import_module(mod_path)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^\r\n    File \"/opt/hostedtoolcache/Python/3.12.0-rc.1/x64/lib/python3.12/importlib/__init__.py\", line 90, in import_module\r\n      return _bootstrap._gcd_import(name[level:], package, level)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    File \"<frozen importlib._bootstrap>\", line 1293, in _gcd_import\r\n    File \"<frozen importlib._bootstrap>\", line 1266, in _find_and_load\r\n    File \"<frozen importlib._bootstrap>\", line 1216, in _find_and_load_unlocked\r\n    File \"<frozen importlib._bootstrap>\", line 400, in _call_with_frames_removed\r\n    File \"<frozen importlib._bootstrap>\", line 1293, in _gcd_import\r\n    File \"<frozen importlib._bootstrap>\", line 1266, in _find_and_load\r\n    File \"<frozen importlib._bootstrap>\", line 1237, in _find_and_load_unlocked\r\n    File \"<frozen importlib._bootstrap>\", line 841, in _load_unlocked\r\n    File \"<frozen importlib._bootstrap_external>\", line 994, in exec_module\r\n    File \"<frozen importlib._bootstrap>\", line 400, in _call_with_frames_removed\r\n    File \"/tmp/pip-build-env-1e13_weg/overlay/lib/python3.12/site-packages/setuptools/__init__.py\", line 10, in <module>\r\n      import distutils.core\r\n  ModuleNotFoundError: No module named 'distutils'\r\n\r\n  error: subprocess-exited-with-error\r\n  \r\n  \u00d7 pip subprocess to install build dependencies did not run successfully.\r\n  \u2502 exit code: 2\r\n  \u2570\u2500> See above for output.\r\n  \r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\n  full command: /opt/hostedtoolcache/Python/3.12.0-rc.1/x64/bin/python /opt/hostedtoolcache/Python/3.12.0-rc.1/x64/lib/python3.12/site-packages/pip/__pip-runner__.py install --ignore-installed --no-user --prefix /tmp/pip-build-env-opv7ul0k/overlay --no-warn-script-location --no-binary :none: --only-binary cmake -i https://pypi.org/simple -- 'cython >= 0.29.31' 'oldest-supported-numpy>=0.14' setuptools_scm 'setuptools >= 40.1.0' wheel\r\n  cwd: [inherit]\r\n  Installing build dependencies: finished with status 'error'\r\nerror: subprocess-exited-with-error\r\n\r\n\u00d7 pip subprocess to install build dependencies did not run successfully.\r\n\u2502 exit code: 2\r\n```\r\n\r\nThat's a long pip-install command, but I see `cmake` as the only package mentioned among all of the installation flags.\r\n\r\nIn the `cmake` pip package's setup.py file, I see\r\n\r\nhttps://github.com/scikit-build/cmake-python-distributions/blob/0acab486a2d7b4ae06b9c39a5d178402ee5b0afe/setup.py#L6\r\n\r\ntrying to import `distutils`. I also looked at the source package for the [most recent release of the `cmake` package on PyPI](https://pypi.org/project/cmake/3.27.2/#files) and the\r\n\r\n```\r\nfrom distutils.text_file import TextFile\r\n```\r\n\r\nline is in that setup.py, too.\r\n\r\nI don't see any [open issues on the `cmake` repository](https://github.com/scikit-build/cmake-python-distributions/issues) about \"3.12\" or \"distutils\", so I'll report this there unless @henryiii thinks this couldn't be related for some reason. (We are, after all, trying to get a binary-only `cmake` package, and the setup.py file is not in the binary wheels.)",
  "created_at":"2023-08-18T16:31:25Z",
  "id":1684160438,
  "issue":2644,
  "node_id":"IC_kwDODBCWws5kYj-2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-18T16:31:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I don't *think* this is CMake. When I was digging, it looked like maybe `oldest-supported-numpy` was pulling in a NumPy sdist. I was unsure as to why this happens, as we also pull in the pre-release. I wondered if the sdist needed to be build in order for pip to find the metadata, but that seems unlikely.",
  "created_at":"2023-08-18T17:03:19Z",
  "id":1684195270,
  "issue":2644,
  "node_id":"IC_kwDODBCWws5kYsfG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-18T17:03:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Awkward 2.4.0 will not support Python 3.12, but the next one probably will.",
  "created_at":"2023-09-04T15:22:48Z",
  "id":1705442228,
  "issue":2644,
  "node_id":"IC_kwDODBCWws5lpvu0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:22:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski can you give this a once-over? I'm happy to merge now.",
  "created_at":"2023-09-12T13:05:12Z",
  "id":1715688501,
  "issue":2644,
  "node_id":"IC_kwDODBCWws5mQ1Q1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-12T13:05:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"You can approve from a phone as long as you are it the code view part (on web or GitHub's App).",
  "created_at":"2023-09-12T14:31:17Z",
  "id":1715842402,
  "issue":2644,
  "node_id":"IC_kwDODBCWws5mRa1i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-12T14:31:17Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this PR fuses the two separate NumPy and pyarrow lower-bound tests to run them at the same time. I don't think this is essential, so I'll revert it such that we don't need to change our required tests.",
  "created_at":"2023-09-12T15:03:30Z",
  "id":1715901782,
  "issue":2644,
  "node_id":"IC_kwDODBCWws5mRpVW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-12T15:03:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2645](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6b1c661) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/0accfadd25d6562813e91771177bb5b0bda5a7b1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0accfad) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numexpr.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.64% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.99% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.32% <\u00f8> (\u00f8)` | |\n| [src/awkward/cppyy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY3BweXkucHk=) | `27.27% <\u00f8> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.11% <\u00f8> (\u00f8)` | |\n| [src/awkward/numba/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEvX19pbml0X18ucHk=) | `97.81% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.32% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `33.33% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `96.15% <\u00f8> (\u00f8)` | |\n| ... and [2 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2645?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-08-15T03:47:59Z",
  "id":1678388329,
  "issue":2645,
  "node_id":"IC_kwDODBCWws5kCixp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-23T14:53:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2646?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2646](https://app.codecov.io/gh/scikit-hep/awkward/pull/2646?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (38a06e5) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/961637e90c1275f1dd87ece3c97d92e2dcff0b02?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (961637e) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2646?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2646?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `91.17% <100.00%> (+1.39%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_arrow\\_table.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2646?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-08-15T12:47:28Z",
  "id":1678876515,
  "issue":2646,
  "node_id":"IC_kwDODBCWws5kEZ9j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-15T22:19:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@Jim Pivarski I started this PR with the intent of solving #2337, but I realised that some prep work would be necessary.\r\n\r\nCould you help me to figure out some of our design choices?\r\n\r\n1. Why do we serialise tuples as a table with an unnamed field-of-struct, where the struct has string names, rather than as a top-level field, i.e. why do we do\r\n   ```\r\n   pyarrow.Table\r\n   : struct<0: large_string not null, 1: large_string not null, 2: large_string not null> not null\r\n   child 0, 0: large_string not null\r\n   child 1, 1: large_string not null\r\n   child 2, 2: large_string not null\r\n   ----\r\n   ```\r\n   Rather than\r\n   ```\r\n   pyarrow.Table\r\n   0: large_string not null\r\n   1: large_string not null\r\n   2: large_string not null\r\n   ----\r\n   ```\r\n2. Why do we store metadata for non-extensionarray arrays? This metadata is currently used to reconstruct the top-level `RecordArray` and parents (which is not covered by the extensionarray logic). In my view, our non-extension output should be considered a lossy, tool-friendly format that coerces the output to something that can be written & read form from a file. As such, we don't need to include any metadata.\r\n3. Should we start versioning our extension-array system / metadata? Unlike `to_buffers`, this feels less stable and more likely to change in future.",
  "created_at":"2023-08-15T13:53:57Z",
  "id":1678971208,
  "issue":2646,
  "node_id":"IC_kwDODBCWws5kExFI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-15T13:53:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> 1. Why do we serialise tuples as a table with an unnamed field-of-struct?\r\n\r\nBackground: Arrow's Struct and Table are distinct things, but we only have Record. Sometimes we have to ask for user help in deciding which of these to turn a Record into, and that's why we have `ak.to_arrow` and `ak.to_arrow_table`. In Arrow, Struct is a type that can be mixed with any other types, but Table is always at top-level, and includes partitioning (a Table contains RecordBatches). Serialized formats like Parquet must be Tables, regardless of the Awkward type.\r\n\r\nYou're asking about Awkward tuples, i.e. Records without field names. Arrow doesn't have an equivalent of tuples: [Structs must have names](https://arrow.apache.org/docs/format/Columnar.html#struct-layout) (which is why, unfortunately, [pyarrow.compute.extract_regex](https://arrow.apache.org/docs/python/generated/pyarrow.compute.extract_regex.html) requires the regex to have named captures, rather than simple parenthesized groups). [Arrow Tables also need names](https://arrow.apache.org/docs/python/generated/pyarrow.Table.html). Either way, names must be invented, though we have a rule for creating these names: `\"0\"`, `\"1\"`, `\"2\"`, etc.\r\n\r\nBut even if either Arrow Struct or Arrow Table had names, we couldn't choose one or the other on that basis, since Awkward Records can appear at any level and Arrow Table is a special top-level only thing. I think you're asking, \"Given that `ak.to_arrow_table` is being called, why is a RecordArray with field names split into separate Table fields while a RecordArray without field names is put into a Table with one empty field name?\" I.e. why does this if-statement depend on `check[-1].is_tuple`?\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/a960a5615d763bfe13a2de271bb76fe42cab067f/src/awkward/operations/ak_to_arrow_table.py#L108-L155\r\n\r\nI'm not really sure. Are Arrow Table names `\"0\"`, `\"1\"`, `\"2\"`, etc. legal? Even if they're legal, are they reasonable in the Arrow world?\r\n\r\nThe most important thing is that data can round-trip through Arrow. The choice between turning Awkward tuples into a Table or a Struct-in-Table only changes how Arrow users see it if they're not using Awkward.\r\n\r\nIt would also be hard to change, since I don't see a way for a user to opt-in during a deprecation cycle.\r\n\r\n> 2. Why do we store metadata for non-extensionarray arrays?\r\n\r\nWe choose between the full extensionarray framework or no extensionarray based on user choice, not the type of the array. Even if a simple Awkward Array could easily round-trip through Arrow without any extensionarray metadata, the extensionarray will be there if `extensionarray=True` (the default).\r\n\r\nMaybe you're asking something different: if `extensionarray=False`, it should be a \"lossy, tool-friendly format.\" It doesn't carry metadata because it can't\u2014there's nowhere to put it.\r\n\r\n> 3. Should we start versioning our extension-array system / metadata?\r\n\r\nWe do expect it to change and you're right that we should be concerned about backward compatibility. We should feel free to add fields to the JSON, but have a fallback for if they're not there, pulling them from the dict with `get`.\r\n\r\nThere are drawbacks to including a version number in the protocol. Let's consider two ways of doing schema evolution:\r\n\r\n* There is a version number; a file has version `v_file` and the code has version `v_code`. If `v_code >= v_file`, then the code knows that it can read the file, because the code is full of if-then logic or it has separate functions for each version or something similar. If `v_code < v_file`, then the (old) code does not attempt to read the file because it assumes that future versions of the format may be changed in arbitrary ways. **Advantage:** future versions of the code are allowed to change in arbitrary ways. **Disadvantage:** forward-compatibility is categorically excluded. It may be that a future change is minor and it ought to be possible for old versions of the code to read it, but they're not allowed to in principle.\r\n* There is no version number; changes to the format must always be narrowing. That is, a future version of the format must be a subtype of past versions of the format, for example, by adding fields to a record. It's particularly easy to do this with JSON because JSON is dynamically typed, new fields can always be queried with `get`, rather than `__getitem__`, and if old code doesn't know about a new field, it doesn't even ask for it. **Advantage:** all versions of the code can read all versions of the format, though old code may be less capable than new code. (For example, a format change can patch a missing case that prevented lossless round-trips; the old code or files made with old code would still suffer from that lossiness. But it would be generally readable, despite that caveat.) **Disadvantage:** new formats must always be subtypes of old formats, which limits how the format can change.\r\n\r\nPython's pickle is an example of a versioned format, and it makes a lot of sense: the pickle developers want to be able to arbitrarily change the byte-format to make it as efficient as possible. The limitation, though, is that old versions of Python can't read new pickle protocols, and therefore they can't introduce new protocols too quickly or users would be faced with a big matrix of what's compatible and what's not.\r\n\r\nAvro schemas are versionless, and [its schema evolution](https://avro.apache.org/docs/1.11.1/specification/#schema-resolution) works by requiring the reader code's schema to be a subtype of the schema in the file (the writer code's schema). This makes a lot of sense, too, because these schemas are for user data, data analysts have to change their schemas frequently, and they need flexibility to use different code versions. Since there are a lot of record types, there are a lot of opportunities to insert new fields.\r\n\r\nSince our extensionarray format is a JSON document in metadata (scaling with the size of the type, not the size of the array), the byte-for-byte performance is not relevant. And I agree that we'll likely need more changes beyond the \"NullType Arrow field must be nullable\" fix. _Because_ of that reason, I think we _don't_ want a version number. I assume that we can keep adding features by adding fields to the JSON object indefinitely: new ones need to have a default value, much like Avro.",
  "created_at":"2023-08-15T16:29:42Z",
  "id":1679258467,
  "issue":2646,
  "node_id":"IC_kwDODBCWws5kF3Nj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-15T16:29:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> which is why, unfortunately, [pyarrow.compute.extract_regex](https://arrow.apache.org/docs/python/generated/pyarrow.compute.extract_regex.html) requires the regex to have named captures, rather than simple parenthesized groups\r\n\r\nWe *could* parse the regex itself, and rewrite unnamed groups as named groups. I won't make a PR, because writing the grammar for RE2 will be time consuming and it's not yet asked for!\r\n\r\n> I think you're asking, \"Given that ak.to_arrow_table is being called, why is a RecordArray with field names split into separate Table fields while a RecordArray without field names is put into a Table with one empty field name?\"\r\n\r\nYes, this.\r\n",
  "created_at":"2023-08-15T18:05:37Z",
  "id":1679373432,
  "issue":2646,
  "node_id":"IC_kwDODBCWws5kGTR4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-15T18:05:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Maybe you're asking something different: if extensionarray=False, it should be a \"lossy, tool-friendly format.\" It doesn't carry metadata because it can't\u2014there's nowhere to put it.\r\n\r\nNearly. I mean to say; this metadata is used to reconstruct properties of the Awkward layout if we round-trip. However, we don't guarantee round-trip for `extensionarray=False`, so why do we include the metadata required to do so for that case? It's not actively harmful, but I was curious.\r\n\r\n> Because of that reason, I think we don't want a version number. \r\n\r\nYes, in fact I ask because of that bugfix; we'll need to include metadata even for non-record arrays, e.g. if we have a bare empty array. I wondered about restructuring the metadata, but ultimately it's not hugely user-facing.",
  "created_at":"2023-08-15T18:08:42Z",
  "id":1679376562,
  "issue":2646,
  "node_id":"IC_kwDODBCWws5kGUCy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-15T18:08:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> However, we don't guarantee round-trip for `extensionarray=False`, so why do we include the metadata required to do so for that case? It's not actively harmful, but I was curious.\r\n\r\nOh! Just because it's less complicated to do so and the computational cost is not significant enough to worry about it.\r\n\r\n> we'll need to include metadata even for non-record arrays, e.g. if we have a bare empty array.\r\n\r\nThat would be fine. In fact, isn't it already the case? We need to carry information about option-types, even with no records present. Also,\r\n\r\n> I wondered about restructuring the metadata, but ultimately it's not hugely user-facing.\r\n\r\nit's absolutely an implementation detail. It needs to be consistent so that we don't lose the ability to read old files, but it doesn't have to be beautifully organized, just reasonably well. (This is what I mean when I say, \"Someplace to _stash_ some metadata.\")\r\n\r\nIn fact, one easy way to ensure that future formats are subtypes of past formats is to populate the old fields and add a new field called \"entirely_new_data_for_version_two\", and within that, an \"entirely_new_data_for_version_three\", and so on. I'm not actually suggesting it (the format needs to be non-horrible for developers, too), but if we're not primarily concerned with presentation, we'll never be locked out of full backward and forward compatibility.",
  "created_at":"2023-08-15T19:22:35Z",
  "id":1679473121,
  "issue":2646,
  "node_id":"IC_kwDODBCWws5kGrnh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-15T19:22:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski are you happy for this to merge as-is, and I'll follow up with the bugfix PR we discussed above?",
  "created_at":"2023-08-15T20:51:20Z",
  "id":1679595585,
  "issue":2646,
  "node_id":"IC_kwDODBCWws5kHJhB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-15T20:51:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm in favor, and I think it makes sense for `__arrow_array__` to invoke `ak.to_arrow` with `extensionarray=False`.",
  "created_at":"2023-08-15T16:33:37Z",
  "id":1679263189,
  "issue":2647,
  "node_id":"IC_kwDODBCWws5kF4XV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-15T16:33:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2649](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (884bed5) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a960a5615d763bfe13a2de271bb76fe42cab067f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a960a56) will **decrease** coverage by `0.05%`.\n> The diff coverage is `70.24%`.\n\n> :exclamation: Current head 884bed5 differs from pull request most recent head 976e7d1. Consider uploading reports for the commit 976e7d1 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `92.43% <\u00f8> (+0.25%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.17% <44.44%> (-0.36%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `85.01% <50.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_from\\_dlpack.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2RscGFjay5weQ==) | `55.17% <55.17%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.41% <62.06%> (-0.57%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpylike.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.74% <63.63%> (-0.34%)` | :arrow_down: |\n| [src/awkward/\\_connect/dlpack.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvZGxwYWNrLnB5) | `93.54% <93.54%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvX19pbml0X18ucHk=) | `80.95% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `88.88% <100.00%> (+0.16%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `37.20% <100.00%> (+0.73%)` | :arrow_up: |\n| ... and [3 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2649?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-08-15T18:17:28Z",
  "id":1679385971,
  "issue":2649,
  "node_id":"IC_kwDODBCWws5kGWVz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-15T20:58:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2650?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2650](https://app.codecov.io/gh/scikit-hep/awkward/pull/2650?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dfa5d06) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a960a5615d763bfe13a2de271bb76fe42cab067f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a960a56) will **decrease** coverage by `0.01%`.\n> The diff coverage is `72.22%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2650?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/str/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2650?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvX19pbml0X18ucHk=) | `96.62% <50.00%> (-2.20%)` | :arrow_down: |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2650?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.83% <66.66%> (-0.15%)` | :arrow_down: |\n| [src/awkward/\\_connect/pyarrow.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2650?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `91.23% <100.00%> (+0.08%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-08-15T18:27:18Z",
  "id":1679403519,
  "issue":2650,
  "node_id":"IC_kwDODBCWws5kGan_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-15T21:42:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I think this one will pass because the only error in your last commit was in the strings.\r\n\r\nFeel free to merge when you're ready!",
  "created_at":"2023-08-15T21:39:35Z",
  "id":1679653942,
  "issue":2650,
  "node_id":"IC_kwDODBCWws5kHXw2",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-08-15T21:39:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2651?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2651](https://app.codecov.io/gh/scikit-hep/awkward/pull/2651?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (332777d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a960a5615d763bfe13a2de271bb76fe42cab067f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a960a56) will **decrease** coverage by `0.05%`.\n> Report is 3 commits behind head on main.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2651?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2651?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.99% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_parameters.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2651?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BhcmFtZXRlcnMucHk=) | `82.22% <100.00%> (\u00f8)` | |\n\n... and [18 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2651/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-08-16T13:17:56Z",
  "id":1680590199,
  "issue":2651,
  "node_id":"IC_kwDODBCWws5kK8V3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-16T23:14:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"@agoose77 I pip installed from this branch and my reproducer on https://github.com/dask-contrib/dask-awkward/issues/340 and my code on https://github.com/iasonkrom/egamma-tnp work fine now. Looks good from my perspective but that's up to you to judge. Thanks!",
  "created_at":"2023-08-16T13:42:55Z",
  "id":1680635747,
  "issue":2651,
  "node_id":"IC_kwDODBCWws5kLHdj",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-08-16T13:44:04Z",
  "user":"MDQ6VXNlcjgyMTU1NDA0"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2652?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2652](https://app.codecov.io/gh/scikit-hep/awkward/pull/2652?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (16f20a1) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/0accfadd25d6562813e91771177bb5b0bda5a7b1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0accfad) will **decrease** coverage by `0.07%`.\n> The diff coverage is `43.47%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2652?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2652?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `79.54% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2652?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `80.86% <30.00%> (-8.02%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/placeholder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2652?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvcGxhY2Vob2xkZXIucHk=) | `48.88% <71.42%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpylike.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2652?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.76% <75.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2652?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.17% <75.00%> (-0.13%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-08-16T20:40:23Z",
  "id":1681242167,
  "issue":2652,
  "node_id":"IC_kwDODBCWws5kNbg3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-23T14:40:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Amongst other things, this PR adds `nbytes` as a part of the `ArrayLike` protocol. `TypeTracerArray` will use the shape to return a maybe-unknown number of bytes (length), whilst `PlaceholderArray` returns 0. This is because placeholder arrays are explicitly data-less, whilst typetracers are stand-in arrays.",
  "created_at":"2023-08-22T17:18:03Z",
  "id":1688611433,
  "issue":2652,
  "node_id":"IC_kwDODBCWws5kpipp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-22T17:18:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2653?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2653](https://app.codecov.io/gh/scikit-hep/awkward/pull/2653?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (41c037d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/eff0a812be716a489f01365ccb0128dacb057fb7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eff0a81) will **increase** coverage by `0.03%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2653?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2653?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.86% <\u00f8> (+1.44%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-08-16T21:53:10Z",
  "id":1681317811,
  "issue":2653,
  "node_id":"IC_kwDODBCWws5kNt-z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-16T23:05:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski in this PR so-far, I removed the unary pathway for ufuncs. I can't see why this was introduced in 0e0202a5cf54b5dbc2606861d058665b8d90fa07\r\n\r\nIt might just be that our broadcasting code has changed since then to make the need redundant. Are you OK with the removal?",
  "created_at":"2023-08-17T12:51:57Z",
  "id":1682232870,
  "issue":2654,
  "node_id":"IC_kwDODBCWws5kRNYm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-17T12:51:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2654?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2654](https://app.codecov.io/gh/scikit-hep/awkward/pull/2654?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (939c1b3) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/61c3660aa28795ef4c6d6aa11c9e59f110832e39?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (61c3660) will **decrease** coverage by `0.02%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2654?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2654?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `95.43% <100.00%> (+0.52%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2654?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.81% <100.00%> (-0.62%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_transform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2654?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `95.38% <100.00%> (+0.14%)` | :arrow_up: |\n\n... and [2 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2654/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-08-17T13:03:45Z",
  "id":1682250027,
  "issue":2654,
  "node_id":"IC_kwDODBCWws5kRRkr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-17T13:03:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2657?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2657](https://app.codecov.io/gh/scikit-hep/awkward/pull/2657?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4a8eaf0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f6b8e761e14f4e79891fec77cf87a92f6a91b0eb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f6b8e76) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2657?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2657?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.16% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2657?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.18% <\u00f8> (\u00f8)` | |\n| [src/awkward/index.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2657?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `92.02% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2657?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `96.15% <100.00%> (\u00f8)` | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2657/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-08-17T19:43:15Z",
  "id":1682863284,
  "issue":2657,
  "node_id":"IC_kwDODBCWws5kTnS0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-17T19:43:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2658?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2658](https://app.codecov.io/gh/scikit-hep/awkward/pull/2658?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9a261bc) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/5530433cb361253c8c3a75ece1ebc1b550e5b40a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5530433) will **decrease** coverage by `0.01%`.\n> The diff coverage is `75.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2658?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2658?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.11% <75.00%> (-0.18%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-08-18T11:21:30Z",
  "id":1683769700,
  "issue":2658,
  "node_id":"IC_kwDODBCWws5kXElk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-18T11:21:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, this is fragile in that it couples to the implementation that IPython uses to inspect objects for the `.*?` magic. However, as you note, the IPython code is fairly stable, and this PR's failure mode is just the existing behavior :)",
  "created_at":"2023-08-18T16:46:15Z",
  "id":1684177098,
  "issue":2658,
  "node_id":"IC_kwDODBCWws5kYoDK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-18T16:46:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2659?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2659](https://app.codecov.io/gh/scikit-hep/awkward/pull/2659?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (01e1dd9) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/01cbec2044130291ba8367824e87b4a8c1a8a0c8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (01cbec2) will **increase** coverage by `0.00%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `32.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2659?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/builder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2659?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `84.95% <15.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/\\_connect/numba/layout.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2659?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `83.68% <16.66%> (+0.02%)` | :arrow_up: |\n| [src/awkward/index.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2659?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `89.94% <42.85%> (-2.09%)` | :arrow_down: |\n| [src/awkward/\\_connect/numba/arrayview\\_cuda.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2659?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3X2N1ZGEucHk=) | `35.29% <50.00%> (+4.04%)` | :arrow_up: |\n| [src/awkward/\\_connect/numba/layoutbuilder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2659?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0YnVpbGRlci5weQ==) | `87.27% <50.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_connect/numba/arrayview.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2659?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.37% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_from\\_dlpack.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2659?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2RscGFjay5weQ==) | `62.06% <100.00%> (+6.89%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-08-18T18:41:31Z",
  "id":1684298852,
  "issue":2659,
  "node_id":"IC_kwDODBCWws5kZFxk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-21T16:21:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"From [the deprecation notice,](https://numba.readthedocs.io/en/0.58.0rc1/reference/deprecation.html#deprecation-of-old-style-numba-captured-errors), it seems to me that we should be using the Numba-aliased errors. I replaced our changes to `NumbaTypingError` with the appropriate specific error class. Hopefully this works ...\r\n\r\nI also therefore am mixing import styles, but I think in time we are moving to `from XXX import YYY`.",
  "created_at":"2023-08-21T12:36:09Z",
  "id":1686247621,
  "issue":2659,
  "node_id":"IC_kwDODBCWws5kghjF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-21T12:36:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm not really sure what the intended difference is between `nb.TypingError` and `nb.NumbaTypeError`. They both participate in the new-style of `NUMBA_CAPTURED_ERRORS`:\r\n\r\n```python\r\n>>> issubclass(numba.TypingError, numba.NumbaError)\r\nTrue\r\n>>> issubclass(numba.NumbaTypeError, numba.NumbaError)\r\nTrue\r\n```\r\n\r\nOh, it turns out that `nb.NumbaTypeError` is just a subclass of `nb.TypingError`.\r\n\r\n```python\r\n>>> numba.TypingError.mro()\r\n[<class 'numba.core.errors.TypingError'>, <class 'numba.core.errors.NumbaError'>, <class 'Exception'>, <class 'BaseException'>, <class 'object'>]\r\n>>> numba.NumbaTypeError.mro()\r\n[<class 'numba.core.errors.NumbaTypeError'>, <class 'numba.core.errors.TypingError'>, <class 'numba.core.errors.NumbaError'>, <class 'Exception'>, <class 'BaseException'>, <class 'object'>]\r\n```\r\n\r\nI'm on board with `from XXX import YYY`, and in that style, `NumbaTypeError` is less ambiguous than `TypingError` would be. So I think these are fine counter-edits.\r\n\r\n@ianna, what do you think?",
  "created_at":"2023-08-21T14:45:47Z",
  "id":1686471883,
  "issue":2659,
  "node_id":"IC_kwDODBCWws5khYTL",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-08-21T14:45:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, then I'll merge!",
  "created_at":"2023-08-21T16:14:24Z",
  "id":1686624309,
  "issue":2659,
  "node_id":"IC_kwDODBCWws5kh9g1",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-08-21T16:14:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2660](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (954140d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/0accfadd25d6562813e91771177bb5b0bda5a7b1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0accfad) will **increase** coverage by `0.04%`.\n> The diff coverage is `92.18%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/unionform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5pb25mb3JtLnB5) | `86.25% <66.66%> (-1.83%)` | :arrow_down: |\n| [src/awkward/forms/form.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `81.68% <68.42%> (-0.92%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.36% <100.00%> (\u00f8)` | |\n| [src/awkward/forms/bitmaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `83.78% <100.00%> (+1.25%)` | :arrow_up: |\n| [src/awkward/forms/bytemaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `85.71% <100.00%> (+1.17%)` | :arrow_up: |\n| [src/awkward/forms/emptyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `86.86% <100.00%> (+0.84%)` | :arrow_up: |\n| [src/awkward/forms/indexedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZGZvcm0ucHk=) | `80.00% <100.00%> (+1.49%)` | :arrow_up: |\n| [src/awkward/forms/indexedoptionform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZG9wdGlvbmZvcm0ucHk=) | `89.62% <100.00%> (+0.84%)` | :arrow_up: |\n| [src/awkward/forms/listform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdGZvcm0ucHk=) | `78.94% <100.00%> (+1.80%)` | :arrow_up: |\n| [src/awkward/forms/listoffsetform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdG9mZnNldGZvcm0ucHk=) | `94.28% <100.00%> (+0.40%)` | :arrow_up: |\n| ... and [5 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2660?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-08-18T19:36:48Z",
  "id":1684357684,
  "issue":2660,
  "node_id":"IC_kwDODBCWws5kZUI0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-23T14:36:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This looks pretty good! \r\n\r\nI'm not yet sure whether we want this logic to be implemented by the `Form` classes, though. My thinking is thus;\r\n\r\n- We want to separate the concerns of `Form` and `Content`.\r\n- `Content` handles `to_buffers`, and a top-level routine handles `from_buffers`\r\n\r\nAs such, we should probably have a top-level routine that handles `expected_from_buffers`. \r\n\r\nI'm also thinking about whether `Form.expected_from_buffers` should instead be accessed via `ak.expected_from_buffers`. We do have an array-aware method on `Form`: `Form.length_zero_array`, but that perhaps should be the exception rather than the rule.\r\n\r\nI can make these changes \u2014 at this stage it's just musings.",
  "created_at":"2023-08-21T13:06:26Z",
  "id":1686294579,
  "issue":2660,
  "node_id":"IC_kwDODBCWws5kgtAz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-21T13:06:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This kind of functionality should be level-2: public but not widely advertised. I don't think it should be a high-level `ak.*` function, for instance.\r\n\r\nIt could be a free function in the `ak.forms` namespace, like `ak.forms.from_dict` and `ak.forms.from_json`. Nothing in the name `expected_from_buffers` says that it's about Forms, rather than layouts, so\r\n\r\n```python\r\nak.forms.expected_from_buffers(some_form)\r\n```\r\n\r\nwould accomplish that as well as\r\n\r\n```python\r\nsome_form.expected_from_buffers\r\n```\r\n\r\nI'm not actually in favor of the following, but just to consider all options:\r\n\r\n```python\r\nak.from_buffers.expected(some_form)\r\n```\r\n",
  "created_at":"2023-08-21T14:52:44Z",
  "id":1686484253,
  "issue":2660,
  "node_id":"IC_kwDODBCWws5khbUd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-21T14:52:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I don't think it should be a high-level ak.* function, for instance.\r\n\r\nThere're probably too many constraints here to make everything work. I've changed my mind; although `from_buffers` is written in the `ak_` namespace, there's nothing to suggest that we can't encode a canonical form representation in `ak.forms`, which is what this does. I'm +1, although I'd therefore like to move the functions that are imported from `ak_from_buffers` to `ak.forms` itself (my todo).",
  "created_at":"2023-08-21T18:05:56Z",
  "id":1686793020,
  "issue":2660,
  "node_id":"IC_kwDODBCWws5kims8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-21T18:05:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski could you OK (nOK) my counter edits? ",
  "created_at":"2023-08-21T18:32:38Z",
  "id":1686830829,
  "issue":2660,
  "node_id":"IC_kwDODBCWws5kiv7t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-21T18:32:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski could you OK (nOK) my counter edits?\r\n\r\nOkay!",
  "created_at":"2023-08-23T14:27:56Z",
  "id":1690068377,
  "issue":2660,
  "node_id":"IC_kwDODBCWws5kvGWZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-23T14:27:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, and 59536896d9af7807d9855062b66824409393480e renames `Index._form_to_zero_length` to `Index._form_to_length_zero` for consistency with the other methods. This is a hidden name, so it should be safe to change, but I just want to double-check: @douglasdavis and @lgray, you're not calling this directly, right?",
  "created_at":"2023-08-18T22:15:32Z",
  "id":1684486299,
  "issue":2661,
  "node_id":"IC_kwDODBCWws5kZzib",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-18T22:15:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2661](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9c304b4) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/01cbec2044130291ba8367824e87b4a8c1a8a0c8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (01cbec2) will **increase** coverage by `0.01%`.\n> The diff coverage is `90.19%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/avro.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `86.94% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/unionform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5pb25mb3JtLnB5) | `88.07% <\u00f8> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.11% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_avro\\_file.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2F2cm9fZmlsZS5weQ==) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_iter.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2l0ZXIucHk=) | `91.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/emptyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `82.35% <61.53%> (-3.67%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.84% <100.00%> (+0.67%)` | :arrow_up: |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.49% <100.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/forms/form.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `82.59% <100.00%> (\u00f8)` | |\n| [src/awkward/index.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `92.02% <100.00%> (\u00f8)` | |\n| ... and [2 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [2 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2661/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-08-18T22:24:38Z",
  "id":1684492329,
  "issue":2661,
  "node_id":"IC_kwDODBCWws5kZ1Ap",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-18T22:24:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2662?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2662](https://app.codecov.io/gh/scikit-hep/awkward/pull/2662?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3f670a6) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/01cbec2044130291ba8367824e87b4a8c1a8a0c8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (01cbec2) will **decrease** coverage by `0.01%`.\n> The diff coverage is `55.55%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2662?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/index.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2662?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `89.94% <42.85%> (-2.09%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_from\\_dlpack.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2662?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2RscGFjay5weQ==) | `62.06% <100.00%> (+6.89%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-08-21T12:31:50Z",
  "id":1686241403,
  "issue":2662,
  "node_id":"IC_kwDODBCWws5kggB7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-21T12:31:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2663?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2663](https://app.codecov.io/gh/scikit-hep/awkward/pull/2663?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cd1a3b8) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a42e44c263fe9404c16462c4f09bf38ba9840630?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a42e44c) will **increase** coverage by `0.00%`.\n> The diff coverage is `90.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2663?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2663?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `95.64% <90.00%> (+0.20%)` | :arrow_up: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2663/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-08-21T21:16:10Z",
  "id":1687055460,
  "issue":2663,
  "node_id":"IC_kwDODBCWws5kjmxk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-21T21:16:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2665?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2665](https://app.codecov.io/gh/scikit-hep/awkward/pull/2665?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (840cd5c) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/0accfadd25d6562813e91771177bb5b0bda5a7b1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0accfad) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2665?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2665?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.28% <100.00%> (+0.17%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-08-22T21:38:39Z",
  "id":1688966316,
  "issue":2665,
  "node_id":"IC_kwDODBCWws5kq5Ss",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-23T14:49:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This will break with placeholder arrays, but that's probably fine - we can either fix it in future, or explicitly ban placeholders in pickling (in lieu of dask serialisation).",
  "created_at":"2023-08-23T14:39:17Z",
  "id":1690088106,
  "issue":2665,
  "node_id":"IC_kwDODBCWws5kvLKq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-23T14:39:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Should we also deprecate the `form_key` for `RecordForm` @jpivarski?",
  "created_at":"2023-08-25T14:13:57Z",
  "id":1693430187,
  "issue":2667,
  "node_id":"IC_kwDODBCWws5k77Gr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-25T14:13:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We decided against this for now; whilst it would be perhaps more correct to do this, it will only break people as the observable side-effect in the near term.",
  "created_at":"2023-09-01T12:52:25Z",
  "id":1702699485,
  "issue":2667,
  "node_id":"IC_kwDODBCWws5lfSHd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T12:52:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Interestingly, we technically already expose the recursive case at the top level, with \r\n```python\r\nak.typetracer.empty_if_typetracer(array)\r\n```\r\n\r\nIt does some other work besides touching the layout, but it should suffice for your use case, I believe :)",
  "created_at":"2023-08-24T20:02:54Z",
  "id":1692331589,
  "issue":2668,
  "node_id":"IC_kwDODBCWws5k3u5F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-24T20:02:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Thanks! Let me see if I can follow how to slot that in.\r\n\r\nCurrent implementation (via @jpivarski):\r\n\r\n```py\r\n>>> import awkward as ak\r\n>>> array = ak.Array([[{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}], [], [{\"x\": 3.3, \"y\": [1, 2, 3]}]])\r\n>>> form, length, container = ak.to_buffers(array)\r\n\r\n>>> typetracer, report = ak.typetracer.typetracer_with_report(form, forget_length=True)\r\n>>> proxy_array = ak.Array(typetracer)\r\n# using _touch_data, internal API\r\n>>> proxy_array[0, \"y\", 1:].layout._touch_data(recursive=True)\r\n>>> report.data_touched\r\n['node0', 'node3', 'node4']\r\n```\r\n\r\nProposed replacement:\r\n\r\n```py\r\n>>> typetracer2, report2 = ak.typetracer.typetracer_with_report(form, forget_length=True)\r\n>>> proxy_array2 = ak.Array(typetracer2)\r\n# empty_if_typetracer is deprecated; its recommended replacement is length_zero_if_typetracer\r\n>>> ak.typetracer.length_zero_if_typetracer(proxy_array2[0, \"y\", 1:])\r\n<Array [] type='0 * var * int64'>\r\n>>> report2.data_touched\r\n['node0', 'node3', 'node4']\r\n```\r\n\r\nSo far, so good. What sort of extra work does it do?",
  "created_at":"2023-08-25T00:58:43Z",
  "id":1692605531,
  "issue":2668,
  "node_id":"IC_kwDODBCWws5k4xxb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-25T00:58:43Z",
  "user":"MDQ6VXNlcjIyNzk1OTg="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"`ak.typetracer.length_zero_if_typetracer` recursively touches the typetracer array, and then allocates a single small buffer to create an array of zero length. We don't need that latter part, and I've observed that other users of typetracer also need this function. As such, let's just expose it, as you initially requested (although under the `ak.typetracer` namespace, I think).",
  "created_at":"2023-08-25T09:18:12Z",
  "id":1693047720,
  "issue":2668,
  "node_id":"IC_kwDODBCWws5k6duo",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-08-25T09:18:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2669?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2669](https://app.codecov.io/gh/scikit-hep/awkward/pull/2669?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1436d85) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/6de30f1cf7c864ec698e49148ede60bcfca73731?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6de30f1) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-08-24T17:54:21Z",
  "id":1692166810,
  "issue":2669,
  "node_id":"IC_kwDODBCWws5k3Gqa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-25T10:49:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This distinction between `item` and `element` was a difference in convention between Arrow and Spark (and Spark was more technically correct: there was some third party that said that `element` is what should be used). This could be a part of a transition toward conformity.\r\n\r\nAnyway, these are the only two names that need to be supported.",
  "created_at":"2023-08-24T19:35:24Z",
  "id":1692297015,
  "issue":2670,
  "node_id":"IC_kwDODBCWws5k3mc3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-24T19:35:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2670?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2670](https://app.codecov.io/gh/scikit-hep/awkward/pull/2670?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (aced13b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/12348fbd58b9ca11bff28b43972a22e5e08e05c1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (12348fb) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2670?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2670?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `91.17% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-08-24T19:35:59Z",
  "id":1692297780,
  "issue":2670,
  "node_id":"IC_kwDODBCWws5k3mo0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-24T19:35:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I am happy to merge this, unless @jpivarski has objections, I'll do so this evening.",
  "created_at":"2023-08-24T19:59:59Z",
  "id":1692328094,
  "issue":2670,
  "node_id":"IC_kwDODBCWws5k3uCe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-24T19:59:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2671?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2671](https://app.codecov.io/gh/scikit-hep/awkward/pull/2671?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ad0fe30) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/3cd54fad43dd34d4040a7c529de2bb0a989fcebb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3cd54fa) will **decrease** coverage by `0.01%`.\n> The diff coverage is `73.33%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2671?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_buffers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2671?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2J1ZmZlcnMucHk=) | `93.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2671?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXRyYWNlci5weQ==) | `84.61% <73.33%> (-9.68%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-08-25T08:36:54Z",
  "id":1692986591,
  "issue":2671,
  "node_id":"IC_kwDODBCWws5k6Ozf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-25T15:25:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski could you sign-off on 624634f and ad0fe30 which add `ak.typetracer.typetracer_from_form`? I added this in `ak.typetracer` only, rather than `ak._nplikes.typetracer` because it's a public-only function. In time, that might also be true of `_typetracer_with_report`, but I decided not to move that yet.",
  "created_at":"2023-08-25T15:17:02Z",
  "id":1693527735,
  "issue":2671,
  "node_id":"IC_kwDODBCWws5k8S63",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-25T15:17:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think it looks like a good idea. I looked it over while we were talking\u2014splitting my attention, but it was on the same topic\u2014and I can see the usefulness of having a function like this. It's public, but I think it was motivated by an external project. (Was it Tiled? Coffea? I just tried to confirm where I got this impression, but wasn't able to find direct evidence.)",
  "created_at":"2023-08-25T15:28:47Z",
  "id":1693543788,
  "issue":2671,
  "node_id":"IC_kwDODBCWws5k8W1s",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-25T15:28:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Both coffea and dask-awkward would benefit from a function like this (see https://github.com/dask-contrib/dask-awkward/pull/351 for an initial cleanup)",
  "created_at":"2023-08-25T15:29:53Z",
  "id":1693545212,
  "issue":2671,
  "node_id":"IC_kwDODBCWws5k8XL8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-25T15:29:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2672?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2672](https://app.codecov.io/gh/scikit-hep/awkward/pull/2672?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c3411c) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/6de30f1cf7c864ec698e49148ede60bcfca73731?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6de30f1) will **increase** coverage by `0.00%`.\n> The diff coverage is `94.73%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2672?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2672?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.43% <75.00%> (-0.22%)` | :arrow_down: |\n| [src/awkward/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2672?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXRyYWNlci5weQ==) | `94.28% <100.00%> (+1.18%)` | :arrow_up: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2672/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-08-25T09:22:30Z",
  "id":1693054014,
  "issue":2672,
  "node_id":"IC_kwDODBCWws5k6fQ-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-25T09:28:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Yes - there are a few places where we still call `_touch_data` though `length_zero_if_typetracer` got rid of most of them.",
  "created_at":"2023-08-25T13:46:28Z",
  "id":1693387629,
  "issue":2672,
  "node_id":"IC_kwDODBCWws5k7wtt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-25T13:46:28Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"Thank you!",
  "created_at":"2023-08-30T00:35:36Z",
  "id":1698321802,
  "issue":2672,
  "node_id":"IC_kwDODBCWws5lOlWK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-30T00:35:36Z",
  "user":"MDQ6VXNlcjIyNzk1OTg="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, `cumsum` is a useful function (and we did think about adding it, see #1362). I'll leave this open, as we should get around to it.",
  "created_at":"2023-08-29T08:19:42Z",
  "id":1696984809,
  "issue":2676,
  "node_id":"IC_kwDODBCWws5lJe7p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-29T08:19:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2677](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9092867) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/dea0139a9413cdfb51081caf643d47c9a10cc199?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dea0139) will **increase** coverage by `0.01%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `94.57%`.\n\n> :exclamation: Current head 9092867 differs from pull request most recent head d7b63dd. Consider uploading reports for the commit d7b63dd to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_to\\_backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19iYWNrZW5kLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `95.43% <50.00%> (-0.21%)` | :arrow_down: |\n| [src/awkward/\\_backends/dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2Rpc3BhdGNoLnB5) | `92.85% <88.23%> (-1.18%)` | :arrow_down: |\n| [src/awkward/operations/str/akstr\\_join.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfam9pbi5weQ==) | `93.33% <90.90%> (+0.65%)` | :arrow_up: |\n| [src/awkward/operations/str/akstr\\_repeat.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfcmVwZWF0LnB5) | `95.12% <92.85%> (+0.67%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_where.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `92.59% <93.75%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.89% <100.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.16% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.50% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `93.18% <100.00%> (+0.49%)` | :arrow_up: |\n| ... and [21 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2677?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-08-29T03:21:07Z",
  "id":1696709365,
  "issue":2677,
  "node_id":"IC_kwDODBCWws5lIbr1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-30T13:59:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2678](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e1ea6cc) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/dea0139a9413cdfb51081caf643d47c9a10cc199?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dea0139) will **increase** coverage by `0.01%`.\n> The diff coverage is `94.53%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_to\\_backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19iYWNrZW5kLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `95.43% <50.00%> (-0.21%)` | :arrow_down: |\n| [src/awkward/\\_backends/dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2Rpc3BhdGNoLnB5) | `92.85% <88.23%> (-1.18%)` | :arrow_down: |\n| [src/awkward/operations/str/akstr\\_join.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfam9pbi5weQ==) | `93.33% <90.90%> (+0.65%)` | :arrow_up: |\n| [src/awkward/operations/str/akstr\\_repeat.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfcmVwZWF0LnB5) | `95.12% <92.85%> (+0.67%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_where.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `92.59% <93.75%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.89% <100.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.16% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `93.18% <100.00%> (+0.49%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_argcartesian.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjYXJ0ZXNpYW4ucHk=) | `88.57% <100.00%> (\u00f8)` | |\n| ... and [20 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2678?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-08-29T11:33:27Z",
  "id":1697269601,
  "issue":2678,
  "node_id":"IC_kwDODBCWws5lKkdh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-29T12:40:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've noticed that PyArrow doesn't seem to return proper-sized offsets for the following\r\n```python\r\nimport pyarrow as pa\r\nimport pyarrow.compute as pc\r\n\r\nprint(\r\n    pc.utf8_split_whitespace(\r\n        pa.array([], type=pa.large_string()),\r\n    ).buffers()\r\n)\r\n\r\nprint(pa.array([], type=pa.large_string()).buffers())\r\n```\r\n\r\nCould you give this code-block a once-over, and confirm that we _should_ expect both sets of offsets buffers to have `size>=8`, i.e. the size of a single offset (64 bit)? I assume this is a PyArrow bug, but I want to be sure before reporting.",
  "created_at":"2023-08-29T13:40:36Z",
  "id":1697469490,
  "issue":2679,
  "node_id":"IC_kwDODBCWws5lLVQy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-29T13:40:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It looks like `pc.utf8_split_whitespace` on arrays of `large_string` is returning arrays of lists of `string`.\r\n\r\n```python\r\n>>> [None if x is None else len(x)\r\n...  for x in pa.array([], type=pa.large_string()).buffers()]\r\n[None, 8, 0]\r\n>>> # string-mask (None), string-offsets (8 bytes), string-data (0 bytes)\r\n\r\n>>> [None if x is None else len(x)\r\n...  for x in pc.utf8_split_whitespace(pa.array([], type=pa.large_string())).buffers()]\r\n[None, 4, None, 4, 4]\r\n>>> # list-mask (None), list-offsets (4), string-mask (None), string-offsets (4), string-data (4???)\r\n```\r\n\r\nversus\r\n\r\n```python\r\n>>> [None if x is None else len(x)\r\n...  for x in pa.array([], type=pa.string()).buffers()]\r\n[None, 4, 0]\r\n>>> # string-mask (None), string-offsets (4 bytes), string-data (0 bytes)\r\n\r\n>>> [None if x is None else len(x)\r\n...  for x in pc.utf8_split_whitespace(pa.array([], type=pa.string())).buffers()]\r\n[None, 4, None, 4, 4]\r\n>>> # list-mask (None), list-offsets (4), string-mask (None), string-offsets (4), string-data (4???)\r\n```\r\n\r\nThat's not obviously wrong: we have plenty of functions that take `Index32` inputs and return `Index64` outputs. Arrow's bias is toward 32-bit; 64-bit was a late addition before version 1.0. Maybe Arrow is even deciding on the index size of the output based on the lengths of the string values, which would be a problem for our Form-stability, but we can cast the outputs if we need to. We could just have a policy of always turning Arrow 32-bit output indexes into 64-bit\u2014that way, it would never be value-dependent.\r\n\r\n--------------\r\n\r\nNope, it really is an Arrow bug: the declared type is still `large_string`, despite the fact that the buffer is 4 bytes long:\r\n\r\n```python\r\n>>> pc.utf8_split_whitespace(pa.array([], type=pa.large_string())).type\r\nListType(list<item: large_string>)\r\n>>> pc.utf8_split_whitespace(pa.array([], type=pa.string())).type\r\nListType(list<item: string>)\r\n```\r\n\r\nIt's definitely wrong for Arrow to declare the type `large_string` and have only 4 bytes for the offset. (It needs a single `[0]` for the offsets of an empty string, just like Awkward.) The `large_` means 8-byte index.\r\n\r\nI also find it a bit odd that the string data for the empty lists of strings returned by `pc.utf8_split_whitespace` is non-empty (the \"`???`\" above). I don't know what rules for too-large buffers Arrow allows; it would be allowed in Awkward, but perhaps unexpected in this case because I don't see what good it might do.",
  "created_at":"2023-08-29T14:55:15Z",
  "id":1697607313,
  "issue":2679,
  "node_id":"IC_kwDODBCWws5lL26R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-29T14:55:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It's definitely wrong for Arrow to declare the type large_string and have only 4 bytes for the offset. (It needs a single [0] for the offsets of an empty string, just like Awkward.) The large_ means 8-byte index.\r\n\r\nGood, that matches my understanding here. I'll file a bug with PyArrow.",
  "created_at":"2023-08-29T14:57:50Z",
  "id":1697612051,
  "issue":2679,
  "node_id":"IC_kwDODBCWws5lL4ET",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-29T14:57:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've rebased the commits such that they could be applied in sequence. That might make for easier per-commit reviewing than the whole changeset in one go.",
  "created_at":"2023-08-30T11:11:00Z",
  "id":1698958479,
  "issue":2679,
  "node_id":"IC_kwDODBCWws5lRAyP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-30T11:11:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2679](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (65710fe) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/59d4235fe7818388fa9a3a418fc377e051d37846?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (59d4235) will **increase** coverage by `0.03%`.\n> The diff coverage is `99.25%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/str/akstr\\_extract\\_regex.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfZXh0cmFjdF9yZWdleC5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/str/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvX19pbml0X18ucHk=) | `99.11% <98.79%> (+2.48%)` | :arrow_up: |\n| [src/awkward/operations/str/akstr\\_index\\_in.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfaW5kZXhfaW4ucHk=) | `97.22% <100.00%> (+0.34%)` | :arrow_up: |\n| [src/awkward/operations/str/akstr\\_is\\_in.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfaXNfaW4ucHk=) | `97.22% <100.00%> (+0.34%)` | :arrow_up: |\n| [src/awkward/operations/str/akstr\\_join.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfam9pbi5weQ==) | `92.85% <100.00%> (-0.48%)` | :arrow_down: |\n| [.../awkward/operations/str/akstr\\_join\\_element\\_wise.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfam9pbl9lbGVtZW50X3dpc2UucHk=) | `96.42% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/operations/str/akstr\\_repeat.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfcmVwZWF0LnB5) | `95.00% <100.00%> (-0.13%)` | :arrow_down: |\n| [src/awkward/operations/str/akstr\\_slice.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfc2xpY2UucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/str/akstr\\_split\\_pattern.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfc3BsaXRfcGF0dGVybi5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [...wkward/operations/str/akstr\\_split\\_pattern\\_regex.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfc3BsaXRfcGF0dGVybl9yZWdleC5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| ... and [2 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [2 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2679/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-08-30T11:20:38Z",
  "id":1698972179,
  "issue":2679,
  "node_id":"IC_kwDODBCWws5lREIT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T11:30:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"After discussing this with @jpivarski, there's no _strong_ remaining impetus to continue this work, so I'm closing it.",
  "created_at":"2023-08-30T13:30:58Z",
  "id":1699182536,
  "issue":2680,
  "node_id":"IC_kwDODBCWws5lR3fI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-30T13:30:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2681?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2681](https://app.codecov.io/gh/scikit-hep/awkward/pull/2681?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5c8124f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f048aa3365e4dcea7ac62f3168f61b81c8a90f61?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f048aa3) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-08-30T14:32:03Z",
  "id":1699301096,
  "issue":2681,
  "node_id":"IC_kwDODBCWws5lSUbo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-30T14:32:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I just saw this on Scientific-Python Discord: the end is coming.\r\n\r\nnumpy/numpy#23717",
  "created_at":"2023-08-31T16:35:52Z",
  "id":1701388854,
  "issue":2681,
  "node_id":"IC_kwDODBCWws5laSI2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-31T16:35:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2682?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2682](https://app.codecov.io/gh/scikit-hep/awkward/pull/2682?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (035c891) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/59d4235fe7818388fa9a3a418fc377e051d37846?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (59d4235) will **increase** coverage by `0.00%`.\n> The diff coverage is `85.41%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2682?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_pickle.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2682?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BpY2tsZS5weQ==) | `85.36% <85.36%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2682?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.38% <85.71%> (+0.09%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-08-30T17:31:16Z",
  "id":1699579055,
  "issue":2682,
  "node_id":"IC_kwDODBCWws5lTYSv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-31T07:18:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, and this is ready to merge!",
  "created_at":"2023-09-01T16:52:47Z",
  "id":1703045160,
  "issue":2682,
  "node_id":"IC_kwDODBCWws5lgmgo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T16:52:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Hi!",
  "created_at":"2023-08-31T15:49:15Z",
  "id":1701296485,
  "issue":2683,
  "node_id":"IC_kwDODBCWws5lZ7ll",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-08-31T15:49:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2683?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2683](https://app.codecov.io/gh/scikit-hep/awkward/pull/2683?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4dba6e2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4124889b8213dacac9c80649cc09744453f397ca?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4124889) will **increase** coverage by `0.00%`.\n> The diff coverage is `88.57%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2683?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_to\\_feather.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2683?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19mZWF0aGVyLnB5) | `82.60% <82.60%> (\u00f8)` | |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2683?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_feather.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2683?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2ZlYXRoZXIucHk=) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-08-31T15:58:45Z",
  "id":1701312091,
  "issue":2683,
  "node_id":"IC_kwDODBCWws5lZ_Zb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-19T02:35:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"When you're ready (when the docstrings are done and you've done \"Update branch\" with no errors), do \"Ready for review\" and assign me as the reviewer.",
  "created_at":"2023-09-07T16:41:43Z",
  "id":1710472991,
  "issue":2683,
  "node_id":"IC_kwDODBCWws5l878f",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-07T16:41:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, I just remembered something: we want the new functions to show up in the documentation, too. They need to be added to the right sections of docs/reference/toctree.txt, and then they'll show up when you press the \"View deployment\" button, followed by \"API reference\", in the left side-bar.",
  "created_at":"2023-09-07T17:32:17Z",
  "id":1710536051,
  "issue":2683,
  "node_id":"IC_kwDODBCWws5l9LVz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-07T17:32:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2684?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2684](https://app.codecov.io/gh/scikit-hep/awkward/pull/2684?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9c28bed) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/59d4235fe7818388fa9a3a418fc377e051d37846?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (59d4235) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-01T08:59:44Z",
  "id":1702411689,
  "issue":2684,
  "node_id":"IC_kwDODBCWws5leL2p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T08:59:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii do you think the changes in this PR to use `target_compile_features` is appropriate?",
  "created_at":"2023-09-01T14:10:13Z",
  "id":1702811275,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5lftaL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T14:10:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes. It seems like it might get set in a few too many places - if you link to a PUBLIC or INTERFACE target with compile features set, then you get them too. (Not true with the properties).",
  "created_at":"2023-09-01T14:13:13Z",
  "id":1702815589,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5lfudl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T14:13:13Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Yes. It seems like it might get set in a few too many places\r\n\r\nThis was my worry / hunch. I'll untangle the ones we don't need.",
  "created_at":"2023-09-01T14:15:05Z",
  "id":1702818362,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5lfvI6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T14:15:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii how's this? ",
  "created_at":"2023-09-01T14:18:04Z",
  "id":1702822596,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5lfwLE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T14:18:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2685?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2685](https://app.codecov.io/gh/scikit-hep/awkward/pull/2685?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eca44b5) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/519bba6ed2eec4e227994d2fd1a62b2a51f15e20?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (519bba6) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-01T14:30:44Z",
  "id":1702843430,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5lf1Qm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-02T15:24:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii your comments above RE the INTERFACE properties made me realise I was missing some understanding about this. The PR should now reflect my working knowledge:\r\n1. `INTERFACE` libraries may only have `INTERFACE_` properties\r\n2. `set_target_properties` are not inheritable via linking\r\n\r\nI've changed our various `CMakeLists.txt` files to reflect this, and cherry picked 60f822e60f6e6fb2fe17d2f4f74d026b5e3c1f37 from #2687. Let me know if this looks wrong.",
  "created_at":"2023-09-02T15:09:20Z",
  "id":1703859472,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5ljtUQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-02T15:09:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii sorry to ping you on this again, would you be able to take another look? This is a blocker for our next minor release.",
  "created_at":"2023-09-04T14:23:12Z",
  "id":1705356623,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5lpa1P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T14:23:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Once this goes in, we'll also need a new `awkward-cpp` version.",
  "created_at":"2023-09-04T15:32:39Z",
  "id":1705453923,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5lpylj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:32:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR actually bumps that version. Have I erred there; did we want to separate the process of bumping awkward-cpp into two commits?",
  "created_at":"2023-09-04T15:33:19Z",
  "id":1705454715,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5lpyx7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:33:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I checked the [Needs C++ Release](https://github.com/scikit-hep/awkward/actions/runs/6075343421/job/16481336480) test, but then realized that that was redundant because this PR touches the C++ as well. So I was just noting, as a reminder, that we'll need to run a Deploy C++, and this PR blocks that ~1 hour long process from starting.",
  "created_at":"2023-09-04T15:41:47Z",
  "id":1705464691,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5lp1Nz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T15:41:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks, @henryiii!",
  "created_at":"2023-09-04T17:27:00Z",
  "id":1705562747,
  "issue":2685,
  "node_id":"IC_kwDODBCWws5lqNJ7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T17:27:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@henryiii, doesn't CMake back-port itself to use only the syntax and features defined in `cmake_minimum_required`? Our should go back to 3.15.\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/2d0de14df69a5940e1d4d9dd2038313e53b6b192/awkward-cpp/CMakeLists.txt#L3\r\n\r\nAn easy solution would be to increase this number to reflect the use of a new feature, but that would make Awkward hard to install on Compute Canada, so it would be better to not use the new feature. But also, I don't understand why this is happening, given the `cmake_minimum_required` setting.",
  "created_at":"2023-09-01T19:21:39Z",
  "id":1703224571,
  "issue":2686,
  "node_id":"IC_kwDODBCWws5lhST7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T19:21:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"`cmake_minimum_required` only sets policies to old standards. So if a behavior changes, `3.15` will use the 3.15 setting for that behavior. `3.15...3.18` will use the 3.18 version of that behavior, or the current version of the behavior, whichever is older. And it will throw an error if CMake is less than the minimum.\r\n\r\nYou very much should test the minimum version of CMake advertised. It's easy in GitHub Actions.\r\n\r\n`CXX_STANDARD` (which should be replaced with compile targets) should not be set on interface targets, it's not inheritable. None of those are. Only compile targets are inheritable.",
  "created_at":"2023-09-01T19:26:02Z",
  "id":1703228561,
  "issue":2686,
  "node_id":"IC_kwDODBCWws5lhTSR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T19:26:50Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Ahh, CMake 3.19+ allows you to add source files to an interface library (?), which is why these are no longer hard errors. But they are very much not doing anything without source files added to an interface library (which is... weird).\r\n\r\nI wish you could opt-into the old error.",
  "created_at":"2023-09-01T19:32:12Z",
  "id":1703234443,
  "issue":2686,
  "node_id":"IC_kwDODBCWws5lhUuL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T19:32:12Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"BTW, what architecture is that? Just curious as to why it's not getting a manylinux wheel.",
  "created_at":"2023-09-01T20:06:32Z",
  "id":1703266532,
  "issue":2686,
  "node_id":"IC_kwDODBCWws5lhcjk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T20:06:32Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii yes, I noticed that this needed cleaning up in #2685. I'll finish that or, get it merged, and we should be good. \n\nThis reminds me to add a cmake lower bound test. \n\n@wdconinc thanks for reporting this! ",
  "created_at":"2023-09-01T20:11:08Z",
  "id":1703270807,
  "issue":2686,
  "node_id":"IC_kwDODBCWws5lhdmX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T20:11:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> BTW, what architecture is that?\r\n\r\nIs this the info you want?\r\n```\r\n$ pip debug --verbose\r\nWARNING: This command is only meant for debugging. Do not use this with automation for parsing and getting these details, since the output and options of this command may change without notice.\r\npip version: pip 22.0.3 from /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/python/3.10.2/lib/python3.10/site-packages/pip (python 3.10)\r\nsys.version: 3.10.2 (main, Feb  4 2022, 19:10:35) [GCC 9.3.0]\r\nsys.executable: /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/python/3.10.2/bin/python3.10\r\n...\r\nCompatible tags: 36\r\n  cp310-cp310-linux_x86_64\r\n  cp310-abi3-linux_x86_64\r\n  cp310-none-linux_x86_64\r\n  ... etc\r\n```",
  "created_at":"2023-09-01T20:51:41Z",
  "id":1703307123,
  "issue":2686,
  "node_id":"IC_kwDODBCWws5lhmdz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T20:51:41Z",
  "user":"MDQ6VXNlcjQ2NTYzOTE="
 },
 {
  "author_association":"NONE",
  "body":"It doesn't have `manylinux` in the list of compatible tags.",
  "created_at":"2023-09-01T20:52:37Z",
  "id":1703307969,
  "issue":2686,
  "node_id":"IC_kwDODBCWws5lhmrB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T20:52:37Z",
  "user":"MDQ6VXNlcjQ2NTYzOTE="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@wdconinc would you be so kind as to verify whether the latest release (2.4.1) fixes this for you?",
  "created_at":"2023-09-05T14:20:01Z",
  "id":1706717682,
  "issue":2686,
  "node_id":"IC_kwDODBCWws5lunHy",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-09-05T14:20:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"```\r\nSuccessfully installed awkward-2.4.1 awkward-cpp-23 importlib-metadata-6.8.0+computecanada typing-extensions-4.7.1+computecanada zipp-3.16.2+computecanada\r\n```",
  "created_at":"2023-09-05T14:25:18Z",
  "id":1706726968,
  "issue":2686,
  "node_id":"IC_kwDODBCWws5lupY4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-05T14:25:18Z",
  "user":"MDQ6VXNlcjQ2NTYzOTE="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fantastic!\r\n\r\nAssuming that built a wheel locally, that is (which I can safely assume is the case if your arch hasn't changed - we aren't building any new wheel types).",
  "created_at":"2023-09-05T14:32:29Z",
  "id":1706739859,
  "issue":2686,
  "node_id":"IC_kwDODBCWws5lusiT",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-09-05T14:32:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2687?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2687](https://app.codecov.io/gh/scikit-hep/awkward/pull/2687?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7263726) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2d0de14df69a5940e1d4d9dd2038313e53b6b192?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2d0de14) will **increase** coverage by `0.03%`.\n> Report is 2 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n[see 14 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2687/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-09-01T20:28:07Z",
  "id":1703286278,
  "issue":2687,
  "node_id":"IC_kwDODBCWws5lhhYG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-01T20:28:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed in favour of #2685",
  "created_at":"2023-09-02T15:09:33Z",
  "id":1703859527,
  "issue":2687,
  "node_id":"IC_kwDODBCWws5ljtVH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-02T15:09:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hmm, looks like we probably shouldn't remove the `ak.behaviors.string` module (or categorical) just yet; any pickles whose array class is defined in these modules will thus fail to load. I propose to wait, and eventually we'll be able to remove these outright. Let's bump the removal to 6-12 months?",
  "created_at":"2023-09-02T15:53:03Z",
  "id":1703871954,
  "issue":2688,
  "node_id":"IC_kwDODBCWws5ljwXS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-02T15:53:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2688](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (da12418) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a5efdfe76987e780e39fd354bd8c8dea55ae0b0a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a5efdfe) will **increase** coverage by `0.05%`.\n> The diff coverage is `84.84%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.96% <\u00f8> (-0.18%)` | :arrow_down: |\n| [src/awkward/behaviors/categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL2NhdGVnb3JpY2FsLnB5) | `0.00% <0.00%> (-71.43%)` | :arrow_down: |\n| [src/awkward/forms/form.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `82.12% <\u00f8> (+0.43%)` | :arrow_up: |\n| [src/awkward/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXRyYWNlci5weQ==) | `87.09% <\u00f8> (+2.48%)` | :arrow_up: |\n| [src/awkward/types/optiontype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvb3B0aW9udHlwZS5weQ==) | `81.48% <60.00%> (+2.79%)` | :arrow_up: |\n| [src/awkward/types/unknowntype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5rbm93bnR5cGUucHk=) | `84.00% <71.42%> (+4.58%)` | :arrow_up: |\n| [src/awkward/behaviors/string.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `100.00% <100.00%> (+36.36%)` | :arrow_up: |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.57% <100.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/types/listtype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbGlzdHR5cGUucHk=) | `95.74% <100.00%> (+3.29%)` | :arrow_up: |\n| [src/awkward/types/numpytype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbnVtcHl0eXBlLnB5) | `94.68% <100.00%> (+1.68%)` | :arrow_up: |\n| ... and [4 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2688?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-09-02T16:02:25Z",
  "id":1703873825,
  "issue":2688,
  "node_id":"IC_kwDODBCWws5ljw0h",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T18:33:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hmm, the thought had occurred to me but I dismissed it as non-viable. I'm not sure why, though; it's a good idea!\r\n\r\nNow this can merge :)",
  "created_at":"2023-09-04T18:22:25Z",
  "id":1705600043,
  "issue":2688,
  "node_id":"IC_kwDODBCWws5lqWQr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T18:22:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2689?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2689](https://app.codecov.io/gh/scikit-hep/awkward/pull/2689?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a4a5c6c) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/aaf09c1213377ba81567a3cf4c1c76111b11fc52?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (aaf09c1) will **not change** coverage.\n> Report is 2 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-04T18:13:28Z",
  "id":1705594012,
  "issue":2689,
  "node_id":"IC_kwDODBCWws5lqUyc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-04T19:41:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2692?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2692](https://app.codecov.io/gh/scikit-hep/awkward/pull/2692?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (529bf85) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/8c1b38762d9f5b70059607fecc266964059a13b9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8c1b387) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-05T03:59:11Z",
  "id":1705912893,
  "issue":2692,
  "node_id":"IC_kwDODBCWws5lrio9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-05T14:40:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2693?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2693](https://app.codecov.io/gh/scikit-hep/awkward/pull/2693?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ebafccf) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a8f85527007e2db705358ea7ae36bb91b9590809?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a8f8552) will **increase** coverage by `0.04%`.\n> The diff coverage is `85.71%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2693?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2693?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `81.46% <80.00%> (+0.59%)` | :arrow_up: |\n| [src/awkward/\\_singleton.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2693?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NpbmdsZXRvbi5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2693/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-09-05T14:55:04Z",
  "id":1706778997,
  "issue":2693,
  "node_id":"IC_kwDODBCWws5lu2F1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-05T16:01:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@iasonkrom @NJManganelli",
  "created_at":"2023-09-06T16:20:33Z",
  "id":1708703360,
  "issue":2695,
  "node_id":"IC_kwDODBCWws5l2L6A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T16:20:33Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Interestingly:\r\n```python3\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    ar = ak.Array(200*np.random.random((100_000, 3)).astype(np.float32) + 32)\r\n\r\n    electrons = ak.zip({\"pt\": ar})\r\n\r\n    combos = ak.combinations(electrons, 2, fields=[\"first\", \"second\"])\r\n\r\n    for _ in range(10):\r\n        print(np.histogram(ak.flatten(combos.second.pt), bins=[0, 10, 20, 30, 40, 80, 120, 200]))\r\n```\r\nFunctions correctly and produces the correct output.\r\nSo the problem is somewhere on the histogramming side maybe? This is really odd.",
  "created_at":"2023-09-06T16:31:20Z",
  "id":1708720380,
  "issue":2695,
  "node_id":"IC_kwDODBCWws5l2QD8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T16:31:20Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"If I go to just using the boost_histogram python bindings, rather than hist, the problem is still there.\r\n\r\n@henryiii @HDembinski FYI this appears to be some deeply odd interaction between awkward array and boost histogram.\r\n\r\nWe may want to move the issue there?",
  "created_at":"2023-09-06T16:35:46Z",
  "id":1708727382,
  "issue":2695,
  "node_id":"IC_kwDODBCWws5l2RxW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T16:35:46Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Interestingly - if I switch dtype from `np.float32` to `np.float64` (i.e. just remove the `astype`) this reproducer segfaults when trying to fill the histogram. This change also functions correctly on arm64.",
  "created_at":"2023-09-06T16:41:34Z",
  "id":1708737784,
  "issue":2695,
  "node_id":"IC_kwDODBCWws5l2UT4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T16:43:16Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"casting to `.astype(np.float64)` fixes the problem though",
  "created_at":"2023-09-06T16:46:41Z",
  "id":1708753597,
  "issue":2695,
  "node_id":"IC_kwDODBCWws5l2YK9",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2023-09-06T16:46:41Z",
  "user":"MDQ6VXNlcjgyMTU1NDA0"
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"At a request from @agoose77 the following functions correctly:\r\n```python3\r\nimport boost_histogram as bh\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    ar = ak.Array(200*np.random.random((100_000, 3)).astype(np.float32) + 32)\r\n\r\n    electrons = ak.zip({\"pt\": ar})\r\n\r\n    combos = ak.combinations(electrons, 2, fields=[\"first\", \"second\"])\r\n\r\n    for _ in range(10):\r\n        x = bh.Histogram(bh.axis.Variable([0, 10, 20, 30, 40, 80, 120, 200]))\r\n        print(x.fill(ak.flatten(combos.second.pt).to_numpy()).values(flow=True))\r\n```\r\nwith either `np.float32` or default dtypes.",
  "created_at":"2023-09-06T16:54:29Z",
  "id":1708764235,
  "issue":2695,
  "node_id":"IC_kwDODBCWws5l2axL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T16:54:38Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"filling with `x=ak.flatten(ak.values_astype(combos.second.pt, np.float64))` while using `.astype(np.float32)` in generation also fixes it for me. Not doing `.astype` in the generation though always seg faults",
  "created_at":"2023-09-06T16:54:30Z",
  "id":1708764242,
  "issue":2695,
  "node_id":"IC_kwDODBCWws5l2axS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T16:54:30Z",
  "user":"MDQ6VXNlcjgyMTU1NDA0"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2696?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2696](https://app.codecov.io/gh/scikit-hep/awkward/pull/2696?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (42c8ce9) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/684a84deffb51c75ba05ec3ca69ad964c3ff5845?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (684a84d) will **decrease** coverage by `0.01%`.\n> The diff coverage is `25.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2696?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2696?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.19% <25.00%> (-0.19%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-09-06T18:02:23Z",
  "id":1708852558,
  "issue":2696,
  "node_id":"IC_kwDODBCWws5l2wVO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T18:02:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Oops, this is redundant with an ensuing PR.",
  "created_at":"2023-09-06T18:02:31Z",
  "id":1708852735,
  "issue":2696,
  "node_id":"IC_kwDODBCWws5l2wX_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T18:02:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@lgray this will be in the next release, ASAP.",
  "created_at":"2023-09-06T18:30:17Z",
  "id":1708890391,
  "issue":2697,
  "node_id":"IC_kwDODBCWws5l25kX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T18:30:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2697?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2697](https://app.codecov.io/gh/scikit-hep/awkward/pull/2697?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (98fce24) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/684a84deffb51c75ba05ec3ca69ad964c3ff5845?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (684a84d) will **increase** coverage by `0.01%`.\n> The diff coverage is `75.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2697?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2697?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.84% <66.66%> (+0.45%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2697?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.62% <80.00%> (-0.27%)` | :arrow_down: |\n| [src/awkward/\\_connect/dlpack.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2697?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvZGxwYWNrLnB5) | `100.00% <100.00%> (+7.14%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-09-06T18:40:17Z",
  "id":1708903520,
  "issue":2697,
  "node_id":"IC_kwDODBCWws5l28xg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T19:08:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"Fixes my code as seen in the output of the last cell here: https://github.com/iasonkrom/egamma-tnp/blob/debug_dask_histogram/debug_dask_histogram.ipynb",
  "created_at":"2023-09-06T18:50:04Z",
  "id":1708915700,
  "issue":2697,
  "node_id":"IC_kwDODBCWws5l2_v0",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-09-06T18:50:22Z",
  "user":"MDQ6VXNlcjgyMTU1NDA0"
 },
 {
  "author_association":"NONE",
  "body":"Would it be possible to roll out a patch 2.4.2 release?",
  "created_at":"2023-09-06T19:20:33Z",
  "id":1708956823,
  "issue":2697,
  "node_id":"IC_kwDODBCWws5l3JyX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-06T19:20:33Z",
  "user":"MDQ6VXNlcjgyMTU1NDA0"
 },
 {
  "author_association":"MEMBER",
  "body":"This is a docs-only PR; not all of the tests will run.",
  "created_at":"2023-09-07T17:28:00Z",
  "id":1710530952,
  "issue":2699,
  "node_id":"IC_kwDODBCWws5l9KGI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-07T17:28:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Ha, you beat me to it. Thanks.",
  "created_at":"2023-09-08T00:03:58Z",
  "id":1710904870,
  "issue":2699,
  "node_id":"IC_kwDODBCWws5l-lYm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-08T00:03:58Z",
  "user":"MDQ6VXNlcjIyNzk1OTg="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2700?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2700](https://app.codecov.io/gh/scikit-hep/awkward/pull/2700?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3a1fe28) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2825fadce5802f333c92d15d6e0642d2cb2e9e29?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2825fad) will **increase** coverage by `0.00%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2700?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2700?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.84% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2700?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [...kward/operations/ak\\_from\\_non\\_simplified\\_buffers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2700?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX25vbl9zaW1wbGlmaWVkX2J1ZmZlcnMucHk=) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>\n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep).",
  "created_at":"2023-09-08T07:42:10Z",
  "id":1711223321,
  "issue":2700,
  "node_id":"IC_kwDODBCWws5l_zIZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-08T08:11:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski let me know how this sits with you in its current form? :)",
  "created_at":"2023-09-08T08:04:47Z",
  "id":1711251706,
  "issue":2700,
  "node_id":"IC_kwDODBCWws5l_6D6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-08T08:04:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> With this name, it wouldn't come next to ak.from_buffers in a sorted list. (ak.from_buffers_non_simplified?) It's nearly identical to from_buffers, apart from one boolean argument, which makes for a lot of duplicated docstrings.\r\n\r\nYes, that occurred to me too. Then again, I don't mind that from a English standpoint.\r\n\r\n> It would be better as a non-default argument in ak.from_buffers. I also think the word \"simplify\" isn't enough\u2014even though we've defined it, it's a generic enough word that someone who reads it might not realize there's a technical definition to look up.\r\n\r\nAh, I thought you'd stood against that. In hindsight, I don't recall you ever saying that so I must have just got my wires crossed. I also prefer this! \r\n\r\n> What I had in mind for \"hiding\" it was more like making it an attribute of ak.from_buffers, like ak.from_buffers.noncanonical, or putting it in a module that's not promoted to the top-level ak.* namespace. \r\n\r\nRight, it also occurred to me to either:\r\n- Create new `ak_from_buff...` and _not_ export via `from XXX import *`\r\n   - Undecided on this\r\n- Create a new attribute of `from_buffers`\r\n   - This is cool, but I don't love it from a surprise perspective\r\n\r\nYet, given that we both support doing this via an argument, let's just do that and KISS.\r\n",
  "created_at":"2023-09-08T19:08:13Z",
  "id":1712110747,
  "issue":2700,
  "node_id":"IC_kwDODBCWws5mDLyb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-08T19:08:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> * Create new `ak_from_buff...` and _not_ export via `from XXX import *`\r\n\r\nA future maintainer is likely to think, \"Oops, that was a mistake. Let me fix that...\"\r\n\r\nLet's both go with making it an argument. (You're right that I was against it in the call; I just think it's _better_ than a new high-level function.) The name of that argument should be relatively long and self-explanatory, like `allow_noncanonical_form`.",
  "created_at":"2023-09-08T20:33:23Z",
  "id":1712191544,
  "issue":2700,
  "node_id":"IC_kwDODBCWws5mDfg4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-08T20:33:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Is there a superseding PR? I could not quickly find one.",
  "created_at":"2023-09-15T16:05:22Z",
  "id":1721520001,
  "issue":2700,
  "node_id":"IC_kwDODBCWws5mnE-B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-15T16:05:22Z",
  "user":"MDQ6VXNlcjIyNzk1OTg="
 },
 {
  "author_association":"MEMBER",
  "body":"Also in Linux, Python 3.11: https://github.com/CoffeaTeam/coffea/actions/runs/6113711628/job/16593791360?pr=891#step:10:309",
  "created_at":"2023-09-08T14:39:42Z",
  "id":1711780772,
  "issue":2701,
  "node_id":"IC_kwDODBCWws5mB7Ok",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-08T14:39:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm guessing this might be a rehydration thing, given the assert. It's probably a layout that is nested inside e.g. A list.\n\nFixing this is the next step for rehydration ",
  "created_at":"2023-09-08T16:06:22Z",
  "id":1711907840,
  "issue":2701,
  "node_id":"IC_kwDODBCWws5mCaQA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-08T16:06:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"With the latest `awkward`, `coffea` v2023.10.0.rc0 builds fine for me.",
  "created_at":"2023-10-18T14:39:55Z",
  "id":1768612721,
  "issue":2701,
  "node_id":"IC_kwDODBCWws5pauNx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-18T14:39:55Z",
  "user":"MDQ6VXNlcjMzMDU4NzQ3"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I agree. There's already precedence for this with `to_categorical`, which *could* be used for non-strings but is subject to the same constraints.",
  "created_at":"2023-09-08T19:04:04Z",
  "id":1712106622,
  "issue":2703,
  "node_id":"IC_kwDODBCWws5mDKx-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-08T19:04:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> It would be interesting to do a race between them, recognizing that the Arrow functions do not need to copy string data and the Numba functions do.\r\n\r\n\r\narrow *does* need to copy if the awkward strings are not contiguous, I think. \r\n\r\n(In light testing, the arrow string kernels are not much faster than a python loop, which is maybe not surprising since the basic algorithms are probably the same. This is for operations that don't create lists/strings as output, so the upfront costs of making python strings happen before benchmarking... Maybe the bulk of the time is in unicode lookups, not any memcopies.)",
  "created_at":"2023-09-28T15:07:57Z",
  "id":1739481138,
  "issue":2704,
  "node_id":"IC_kwDODBCWws5nrmAy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-28T15:07:57Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"That's true: an Awkward `ListArray` has to be copied when making list arrays in Arrow, but an Awkward `ListOffsetArray` does not. `ListOffsetArrays` are more common, though\u2014any Awkward operation that needs to rewrite a list array would rewrite it in a way that makes it contiguous.",
  "created_at":"2023-09-28T16:47:45Z",
  "id":1739683285,
  "issue":2704,
  "node_id":"IC_kwDODBCWws5nsXXV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-28T16:47:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2705?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2705](https://app.codecov.io/gh/scikit-hep/awkward/pull/2705?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5cb6384) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4124889b8213dacac9c80649cc09744453f397ca?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4124889) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-12T04:53:56Z",
  "id":1714962605,
  "issue":2705,
  "node_id":"IC_kwDODBCWws5mOECt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-19T02:59:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2706?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2706](https://app.codecov.io/gh/scikit-hep/awkward/pull/2706?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9284b9f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4124889b8213dacac9c80649cc09744453f397ca?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4124889) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-12T17:36:28Z",
  "id":1716154646,
  "issue":2706,
  "node_id":"IC_kwDODBCWws5mSnEW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-19T02:53:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2707?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2707](https://app.codecov.io/gh/scikit-hep/awkward/pull/2707?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a849bd3) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4124889b8213dacac9c80649cc09744453f397ca?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4124889) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-12T17:47:13Z",
  "id":1716169406,
  "issue":2707,
  "node_id":"IC_kwDODBCWws5mSqq-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-19T02:45:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"A key aspect of this bug is that `\"merged_at\"` is not a key in all of these JSON objects. The ArrayBuilder (`from_json` without a `schema`) chooses to make a set of JSON objects with different fields at the same level a single RecordArray with missing JSON objects as null values, instead of a UnionArray of different RecordArrays, with and without the missing field.\r\n\r\nTo show that this is the issue, see what happens when we look only at the JSON objects with this field:\r\n\r\n```python\r\n>>> import fsspec, awkward as ak\r\n>>> schema = {\r\n...     \"title\": \"untitled\",\r\n...     \"description\": \"Auto generated by dask-awkward\",\r\n...     \"type\": \"object\",\r\n...     \"properties\": {\r\n...         \"payload\": {\r\n...             \"type\": \"object\",\r\n...             \"properties\": {\r\n...                 \"pull_request\": {\r\n...                     \"type\": [\"object\", \"null\"],\r\n...                     \"properties\": {\"merged_at\": {\"type\": [\"string\", \"null\"]}},\r\n...                 }\r\n...             },\r\n...         }\r\n...     },\r\n... }\r\n>>> with fsspec.open(\r\n...     \"https://data.gharchive.org/2015-01-01-10.json.gz\", compression=\"infer\", mode=\"rt\"\r\n... ) as f:\r\n...     subset = \"\".join([x for x in list(f) if \"\\\"merged_at\\\":\" in x])\r\n... \r\n>>> array = ak.from_json(subset, line_delimited=True, schema=schema)\r\n>>> array.show(type=True)\r\ntype: 360 * {\r\n    payload: {\r\n        pull_request: ?{\r\n            merged_at: ?string\r\n        }\r\n    }\r\n}\r\n[{payload: {pull_request: {merged_at: None}}},\r\n {payload: {pull_request: {merged_at: None}}},\r\n {payload: {pull_request: {merged_at: None}}},\r\n {payload: {pull_request: {merged_at: '2015-01-01T10:00:32Z'}}},\r\n {payload: {pull_request: {merged_at: None}}},\r\n {payload: {pull_request: {merged_at: '2015-01-01T10:01:07Z'}}},\r\n {payload: {pull_request: {merged_at: '2015-01-01T10:01:08Z'}}},\r\n {payload: {pull_request: {merged_at: '2015-01-01T10:01:08Z'}}},\r\n {payload: {pull_request: {merged_at: '2015-01-01T10:01:11Z'}}},\r\n {payload: {pull_request: {merged_at: '2015-01-01T10:01:23Z'}}},\r\n ...,\r\n {payload: {pull_request: {merged_at: '2015-01-01T10:58:31Z'}}},\r\n {payload: {pull_request: {merged_at: None}}},\r\n {payload: {pull_request: {merged_at: '2015-01-01T10:59:00Z'}}},\r\n {payload: {pull_request: {merged_at: None}}},\r\n {payload: {pull_request: {merged_at: None}}},\r\n {payload: {pull_request: {merged_at: None}}},\r\n {payload: {pull_request: {merged_at: None}}},\r\n {payload: {pull_request: {merged_at: '2015-01-01T10:59:44Z'}}},\r\n {payload: {pull_request: {merged_at: '2015-01-01T10:59:55Z'}}}]\r\n```\r\n\r\n(Those `\"merged_at\"` fields that are `None` are distinct from  the cases that we dropped, which didn't even have a `\"merged_at\"` field.)\r\n\r\nThis could either be solved by `from_json` with `schema` raising an error when the field it has been requested doesn't exist or by filling in those cases with a null value. If the schema declares it as option-type, then we could fill it with a null value; if the schema does not declare it as option-type, then we _must_ raise an error (we wouldn't have any valid value to fill it with).",
  "created_at":"2023-09-15T14:26:28Z",
  "id":1721372172,
  "issue":2709,
  "node_id":"IC_kwDODBCWws5mmg4M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-15T14:28:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2710?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2710](https://app.codecov.io/gh/scikit-hep/awkward/pull/2710?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (46a18cf) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2825fadce5802f333c92d15d6e0642d2cb2e9e29?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2825fad) will **decrease** coverage by `0.01%`.\n> Report is 2 commits behind head on main.\n> The diff coverage is `88.23%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2710?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/shape.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2710?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvc2hhcGUucHk=) | `83.33% <83.33%> (+0.28%)` | :arrow_up: |\n| [src/awkward/\\_singleton.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2710?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NpbmdsZXRvbi5weQ==) | `89.65% <86.95%> (-10.35%)` | :arrow_down: |\n| [src/awkward/\\_backends/backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2710?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2JhY2tlbmQucHk=) | `86.66% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpylike.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2710?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.76% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-09-14T08:42:30Z",
  "id":1719019324,
  "issue":2710,
  "node_id":"IC_kwDODBCWws5mdic8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-14T08:50:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It doesn't look like CodeCov v4 is ready yet:\r\n\r\n```\r\nError: Unable to resolve action `codecov/codecov-action@v4`, unable to find version `v4`\r\n```\r\n\r\nI'm just going to close this PR. (It's not our problem!)",
  "created_at":"2023-09-19T21:16:13Z",
  "id":1726477334,
  "issue":2711,
  "node_id":"IC_kwDODBCWws5m5_QW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-19T21:16:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
  "created_at":"2023-09-19T21:16:16Z",
  "id":1726477625,
  "issue":2711,
  "node_id":"IC_kwDODBCWws5m5_U5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-19T21:16:16Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"MEMBER",
  "body":"@douglasdavis, what do you think of that second checkbox? If the schema says that option-typed fields `x`, `y`, `z` are required and the JSON doesn't have them, should we raise an error? Raising an error would be the simplest thing to do because we can quickly check the bitmap for uncleared bits.\r\n\r\nDoes the JSONSchema specification have anything to say about the distinction between fields whose values are `null` and fields that are simply not there?",
  "created_at":"2023-09-15T21:55:18Z",
  "id":1721901662,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5moiJe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-15T21:55:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2712?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2712](https://app.codecov.io/gh/scikit-hep/awkward/pull/2712?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9927f9f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/ffa1e4758d5dae224c88530b8e56d55c22ceeaa4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ffa1e47) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2712?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_json.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2712?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pzb24ucHk=) | `93.69% <100.00%> (+1.68%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-09-15T21:59:49Z",
  "id":1721905000,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5moi9o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-26T21:22:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The one error on MacOS Python 3.11 is in pyarrow: tests/test_2616_use_pyarrow_for_strings.py:930\r\n\r\nWe'll see if it's consistent.",
  "created_at":"2023-09-16T00:56:33Z",
  "id":1722086509,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5mpPRt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-16T00:56:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski JSONschema has `required` to indicate fields that can be omitted. It doesn't say whether they should be `null`, but for awkward that might be better than making a union. ",
  "created_at":"2023-09-16T10:06:16Z",
  "id":1722194625,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5mpprB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-18T14:23:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The one error on MacOS Python 3.11 is in pyarrow: tests/test_2616_use_pyarrow_for_strings.py:930\n> \n> We'll see if it's consistent.\n\nIt's a flaky error. I've a mind to disable the test for this as we see it in other PRs, and we can't easily fix it iirc. ",
  "created_at":"2023-09-16T10:08:28Z",
  "id":1722194998,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5mppw2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-16T10:08:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> @douglasdavis, what do you think of that second checkbox? If the schema says that option-typed fields `x`, `y`, `z` are required and the JSON doesn't have them, should we raise an error? Raising an error would be the simplest thing to do because we can quickly check the bitmap for uncleared bits.\r\n\r\nMy first thought is an error makes sense here; if the JSONSchema has the field (and listed with `\"type\": [\"string\", \"null\"]`), I'd expect that property to always appear in the JSON and have `null` if necessary (instead of of being omitted). If it's omitted it feels like a mismatch. But it does cross my mind that in real world messy datasets people have dropped nulls in their workflows for any number of reasons.\r\n\r\n> Does the JSONSchema specification have anything to say about the distinction between fields whose values are `null` and fields that are simply not there?\r\n\r\nThere is the `\"required\"` parameter for property definition: https://json-schema.org/understanding-json-schema/reference/object.html#required-properties",
  "created_at":"2023-09-18T14:16:23Z",
  "id":1723518127,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5musyv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-18T14:16:23Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I just realized Angus had already pointed out \"required\" before my comment above :) ",
  "created_at":"2023-09-18T15:55:11Z",
  "id":1723792494,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5mvvxu",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "updated_at":"2023-09-18T15:55:11Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"MEMBER",
  "body":"Don't let this one hold up the next release. I'll get it done soon, though.",
  "created_at":"2023-09-19T02:24:33Z",
  "id":1724736762,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5mzWT6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-19T02:24:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"All this needs now is a big round of tests. The JSON example that motivated this (which has missing keys where option-type is expected) is now parsable:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> schema = {\r\n...     \"title\": \"untitled\",\r\n...     \"description\": \"Auto generated by dask-awkward\",\r\n...     \"type\": \"object\",\r\n...     \"properties\": {\r\n...         \"payload\": {\r\n...             \"type\": \"object\",\r\n...             \"properties\": {\r\n...                 \"pull_request\": {\r\n...                     \"type\": [\"object\", \"null\"],\r\n...                     \"properties\": {\"merged_at\": {\"type\": [\"string\", \"null\"]}},\r\n...                 }\r\n...             },\r\n...         }\r\n...     },\r\n... }\r\n>>> with open(\"tests/samples/complex-nested.json\", \"rb\") as file:\r\n...     array = ak.from_json(file, line_delimited=True, schema=schema)\r\n... \r\n>>> array.show(type=True)\r\ntype: 10 * {\r\n    payload: {\r\n        pull_request: ?{\r\n            merged_at: ?string\r\n        }\r\n    }\r\n}\r\n[{payload: {pull_request: None}},\r\n {payload: {pull_request: {merged_at: None}}},\r\n {payload: {pull_request: None}},\r\n {payload: {pull_request: None}},\r\n {payload: {pull_request: None}},\r\n {payload: {pull_request: None}},\r\n {payload: {pull_request: None}},\r\n {payload: {pull_request: None}},\r\n {payload: {pull_request: None}},\r\n {payload: {pull_request: None}}]\r\n```\r\n\r\n(tests/samples/complex-nested.json is the first 10 lines of https://data.gharchive.org/2015-01-01-10.json.gz)\r\n\r\nBy the way, you can field-slice through missing data:\r\n\r\n```python\r\n>>> array[\"payload\", \"pull_request\", \"merged_at\"]\r\n<Array [None, None, None, None, ..., None, None, None] type='10 * ?string'>\r\n```\r\n\r\nWe'd do better with a less empty dataset...\r\n\r\n```python\r\n>>> array = ak.from_iter([\r\n...     {\"payload\": None},\r\n...     {\"payload\": {\"pull_request\": None}},\r\n...     {\"payload\": {\"pull_request\": {\"merged_at\": None}}},\r\n...     {\"payload\": {\"pull_request\": {\"merged_at\": \"1970-01-01\"}}},\r\n... ])\r\n>>> array[\"payload\", \"pull_request\", \"merged_at\"]\r\n<Array [None, None, None, '1970-01-01'] type='4 * ?string'>\r\n```",
  "created_at":"2023-09-19T23:57:22Z",
  "id":1726694012,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5m60J8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-19T23:57:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is done, though in the future, we may want to add string \u2192 date parsing in the C++ layer (avoid making lots of big date strings).\r\n\r\nIt adds a bitmap called \"checklist\" for all of the fields in every record (every record has its own checklist), and\r\n\r\n* `StartObject` (encountering a `{` token) initializes the checklist, copying 64 bits at a time from a constant prototype.\r\n* `Key` (encountering a `\"...\":` token)\r\n  * checks to see if the bit has already been checked; duplicate keys after the first are ignored\r\n  * checks off the bit corresponding to the field\r\n* `EndObject` (encountering a `}` token) collapses the checklist with bitwise-or and checks for differences from zero, as a quick way to see if each field has been encountered.\r\n* If any fields were missed, it enters a slow clean-up phase, in which it iterates over every field and for each unchecked bit,\r\n  * an option-type field gets filled with `None` (thus ignoring the distinction between option-type field has value `null` and option-type field is not present).\r\n  * other types of fields raise errors (\"JSON data does not match schema\").\r\n* Along the way, I also implemented an optimization: keys are now expected to be encountered in the order they appear in the `requires` list of the schema. If the keys in the data have the same order, they are always the first to be string-compared, minimizing string-comparisons. If not, it still works, but it may check more fields.\r\n\r\nSo this is how it stands: all of the features have been added, though some cases are favored over others for optimization. Having all keys from the `requires` list of the schema, in the order specified by the `requires` list, is the fastest case. Missing option-type fields and out-of-order fields are allowed, but slower.",
  "created_at":"2023-09-20T22:02:33Z",
  "id":1728485257,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5nBpeJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-20T22:02:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I set this to auto-merge. I just learned from @henryiii that there's an advantage to releasing a new awkward-cpp before the Python 3.12 release in a week and a half, and this PR is a good excuse to release a new awkward-cpp in the next few days.",
  "created_at":"2023-09-26T21:17:49Z",
  "id":1736314796,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5nfg-s",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-09-26T21:17:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I was walking and I remembered the reason for the division and modulo by 64. Since records can have more than 64 fields, we can't have one `uint64_t` integer be the bitmap for them all. That's why it's a `std::vector<uint64_t>` for each distinct record (and therefore a `std::vector<std::vector<uint64_t>>`). The bits for each field have to be distributed among the 64-bit integers in the same way as place value arithmetic, but base 64 instead of base 10. If we need to get at a middle digit, we need to divide to get rid of the lower significance part, and modulo to get rid of the higher significance part.\r\n\r\nIf we never had more than 64 fields, we could use a single `uint64_t` and only divide, no modulo.",
  "created_at":"2023-09-27T13:05:29Z",
  "id":1737362859,
  "issue":2712,
  "node_id":"IC_kwDODBCWws5njg2r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-27T13:05:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@danielballan this PR should do it! Apologies, this slipped off my task list.",
  "created_at":"2023-09-17T16:16:41Z",
  "id":1722511087,
  "issue":2713,
  "node_id":"IC_kwDODBCWws5mq27v",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-09-17T16:16:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2713?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2713](https://app.codecov.io/gh/scikit-hep/awkward/pull/2713?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ec321b0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/48bb0a1597a7b3fa914dd7e057ef61f7a8ff7e39?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (48bb0a1) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2713?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_buffers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2713?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2J1ZmZlcnMucHk=) | `93.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2713?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.84% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-09-17T16:28:16Z",
  "id":1722513367,
  "issue":2713,
  "node_id":"IC_kwDODBCWws5mq3fX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-17T16:28:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've employed a rule that if `from_buffers` has a known length, then the buffer itself must have a known length. This means that placeholders inside unions would be required to have known lengths.\r\n\r\nThe purpose of imposing this constraint that `from_buffers` can be naive, and as such render the caller of `from_buffers` responsible for populating the lengths appropriately. However, I this might be that this is too restrictive, and perhaps we should just let `from_buffers` fill in unknown lengths when it has the ability to. In any case, such a change could be made at a later date.",
  "created_at":"2023-09-18T11:00:33Z",
  "id":1723182040,
  "issue":2713,
  "node_id":"IC_kwDODBCWws5mtavY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-18T11:43:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I've employed a rule that if `from_buffers` has a known length, then the buffer itself must have a known length. This means that placeholders inside unions would be required to have known lengths.\r\n\r\n:heavy_check_mark:\r\n\r\nI can imagine wanting to be selective about which fields of a record one reads, but not about which possibilities of a union array. Possibilities in a union are supposed to be a short list; records can have thousands of fields.",
  "created_at":"2023-09-18T19:14:18Z",
  "id":1724223924,
  "issue":2713,
  "node_id":"IC_kwDODBCWws5mxZG0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-18T19:14:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I think this is ready to merge. (The code change is rather small; it's mostly an extensive test.)",
  "created_at":"2023-09-18T19:15:00Z",
  "id":1724224796,
  "issue":2713,
  "node_id":"IC_kwDODBCWws5mxZUc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-18T19:15:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Thanks to you both!",
  "created_at":"2023-09-20T11:33:50Z",
  "id":1727546244,
  "issue":2713,
  "node_id":"IC_kwDODBCWws5m-EOE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-20T11:33:50Z",
  "user":"MDQ6VXNlcjIyNzk1OTg="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2714?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2714](https://app.codecov.io/gh/scikit-hep/awkward/pull/2714?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6af79d5) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/48bb0a1597a7b3fa914dd7e057ef61f7a8ff7e39?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (48bb0a1) will **increase** coverage by `0.08%`.\n> The diff coverage is `90.38%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2714?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2714?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `86.95% <50.00%> (+5.49%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/placeholder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2714?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvcGxhY2Vob2xkZXIucHk=) | `67.74% <70.00%> (+7.74%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_from\\_buffers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2714?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2J1ZmZlcnMucHk=) | `94.15% <97.29%> (+0.67%)` | :arrow_up: |\n| [src/awkward/forms/form.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2714?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `82.12% <100.00%> (\u00f8)` | |\n| [src/awkward/forms/numpyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2714?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbnVtcHlmb3JtLnB5) | `83.72% <100.00%> (+0.09%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-09-18T10:23:36Z",
  "id":1723131855,
  "issue":2714,
  "node_id":"IC_kwDODBCWws5mtOfP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-18T11:01:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2715?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2715](https://app.codecov.io/gh/scikit-hep/awkward/pull/2715?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (76d0708) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/9761f60f9451f36dab921236fc19a7a22ba051ba?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9761f60) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-19T04:24:49Z",
  "id":1724812150,
  "issue":2715,
  "node_id":"IC_kwDODBCWws5mzot2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-19T04:24:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2716?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2716](https://app.codecov.io/gh/scikit-hep/awkward/pull/2716?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (45b6663) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/1e8fa979547695e5047ac0447ea3cb0097a4c110?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1e8fa97) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-19T17:13:56Z",
  "id":1726115035,
  "issue":2716,
  "node_id":"IC_kwDODBCWws5m4mzb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-25T20:54:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This one is [failing](https://github.com/scikit-hep/awkward/actions/runs/6238701304/job/16942373461?pr=2716) with\r\n\r\n```\r\nRun aws-actions/configure-aws-credentials@v4\r\n  with:\r\n    aws-region: eu-west-[2](https://github.com/scikit-hep/awkward/actions/runs/6238701304/job/16942373461?pr=2716#step:3:2)\r\n    audience: sts.amazonaws.com\r\n  env:\r\n    X86_64_PYTHON_VERSION: [3](https://github.com/scikit-hep/awkward/actions/runs/6238701304/job/16942373461?pr=2716#step:3:3).10.[6](https://github.com/scikit-hep/awkward/actions/runs/6238701304/job/16942373461?pr=2716#step:3:6)\r\n    SOURCE_DATE_EPOCH: 1668811211\r\n    S3_BUCKET: preview.awkward-array.org\r\n    DEPLOY_URL: http://preview.awkward-array.org.s3-website.us-east-1.amazonaws.com/\r\nError: Credentials could not be loaded, please check your action inputs: Could not load credentials from any providers\r\n```",
  "created_at":"2023-09-19T21:22:21Z",
  "id":1726507696,
  "issue":2716,
  "node_id":"IC_kwDODBCWws5m6Gqw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-19T21:22:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2718?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2718](https://app.codecov.io/gh/scikit-hep/awkward/pull/2718?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d988cd9) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/acac8e7bb95a52a583b189fc92250d315096d746?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (acac8e7) will **decrease** coverage by `0.02%`.\n> The diff coverage is `66.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2718?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2718?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.62% <66.66%> (-0.44%)` | :arrow_down: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2718/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-09-20T21:16:08Z",
  "id":1728437875,
  "issue":2718,
  "node_id":"IC_kwDODBCWws5nBd5z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-27T19:13:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2719?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2719](https://app.codecov.io/gh/scikit-hep/awkward/pull/2719?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3f40f00) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/01a1debd69d15f4a052b485db9cdd4d87a27b508?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (01a1deb) will **increase** coverage by `0.02%`.\n> The diff coverage is `60.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files Changed](https://app.codecov.io/gh/scikit-hep/awkward/pull/2719?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2719?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `77.06% <52.94%> (+0.76%)` | :arrow_up: |\n| [src/awkward/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2719?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXRyYWNlci5weQ==) | `87.50% <100.00%> (+0.40%)` | :arrow_up: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2719/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-09-22T09:49:05Z",
  "id":1731134840,
  "issue":2719,
  "node_id":"IC_kwDODBCWws5nLwV4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-22T11:50:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2721?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2721](https://app.codecov.io/gh/scikit-hep/awkward/pull/2721?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5f44fc7) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2a70afbf41d2565e6a483b683e1489c0d5f753e4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2a70afb) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 5f44fc7 differs from pull request most recent head fed5b86. Consider uploading reports for the commit fed5b86 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-25T17:26:57Z",
  "id":1734175927,
  "issue":2721,
  "node_id":"IC_kwDODBCWws5nXWy3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-25T19:09:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2722?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2722](https://app.codecov.io/gh/scikit-hep/awkward/pull/2722?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c6e6a6d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f2f8def26281dc8d9be7fa63c2dd2b713922a930?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f2f8def) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-26T04:54:31Z",
  "id":1734830040,
  "issue":2722,
  "node_id":"IC_kwDODBCWws5nZ2fY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-26T04:54:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2723?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2723](https://app.codecov.io/gh/scikit-hep/awkward/pull/2723?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fb16da0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/ffa1e4758d5dae224c88530b8e56d55c22ceeaa4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ffa1e47) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-26T17:27:36Z",
  "id":1735979025,
  "issue":2723,
  "node_id":"IC_kwDODBCWws5nePAR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-26T17:27:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2724](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5eb02cd) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/6dc52ccecdb5ef711d0299b0455c7f76d8d0c860?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6dc52cc) will **increase** coverage by `0.00%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `87.50%`.\n\n> :exclamation: Current head 5eb02cd differs from pull request most recent head 26f8931. Consider uploading reports for the commit 26f8931 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/bitmaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `83.92% <100.00%> (+0.14%)` | :arrow_up: |\n| [src/awkward/forms/bytemaskedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `85.84% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/forms/emptyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `86.86% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/form.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `82.12% <100.00%> (\u00f8)` | |\n| [src/awkward/forms/indexedform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZGZvcm0ucHk=) | `80.17% <100.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/forms/indexedoptionform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZG9wdGlvbmZvcm0ucHk=) | `89.71% <100.00%> (+0.09%)` | :arrow_up: |\n| [src/awkward/forms/listform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdGZvcm0ucHk=) | `79.13% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/forms/listoffsetform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdG9mZnNldGZvcm0ucHk=) | `94.33% <100.00%> (+0.05%)` | :arrow_up: |\n| [src/awkward/forms/numpyform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbnVtcHlmb3JtLnB5) | `83.72% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/recordform.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvcmVjb3JkZm9ybS5weQ==) | `90.55% <100.00%> (+0.05%)` | :arrow_up: |\n| ... and [3 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2724?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-09-27T20:26:12Z",
  "id":1738030870,
  "issue":2724,
  "node_id":"IC_kwDODBCWws5nmD8W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-03T15:20:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I don't see any examples in this PR in which the new recursive argument gets used, but in principle it could be useful to have.\r\n\r\nThe test file uses both variations :)",
  "created_at":"2023-10-03T15:20:33Z",
  "id":1745201495,
  "issue":2724,
  "node_id":"IC_kwDODBCWws5oBalX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-03T15:20:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2725?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2725](https://app.codecov.io/gh/scikit-hep/awkward/pull/2725?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (db4996b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/d9d020dbd6a84656b552302f21a43ea7b68f6b43?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d9d020d) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-27T10:30:21Z",
  "id":1737133259,
  "issue":2725,
  "node_id":"IC_kwDODBCWws5niozL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-27T14:11:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The cause of this is that `keepdims=True` for `axis=None` doesn't introduce regular nodes, unlike `axis!=None` which replaces the node at `axis` with a regular one. \r\n\r\nThis makes sense; unlike `axis=None`, `axis=N` only operates upon a single dimension. We _probably_ want to replace list nodes with regular nodes in `_remove_structure`.",
  "created_at":"2023-09-27T20:26:57Z",
  "id":1738032109,
  "issue":2727,
  "node_id":"IC_kwDODBCWws5nmEPt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-27T20:26:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay! (I read this message after the PR...)",
  "created_at":"2023-09-27T20:43:26Z",
  "id":1738051338,
  "issue":2727,
  "node_id":"IC_kwDODBCWws5nmI8K",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-27T20:43:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Is this addressing the issue that the array has the wrong length? I thought at first it could be related to regular vs irregular broadcasting before I noticed that the length was wrong.",
  "created_at":"2023-09-27T20:42:40Z",
  "id":1738050421,
  "issue":2728,
  "node_id":"IC_kwDODBCWws5nmIt1",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-09-27T20:42:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2728?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2728](https://app.codecov.io/gh/scikit-hep/awkward/pull/2728?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f955e56) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/d425cc0fb4f8a99b0736e15de927d52a777ec9df?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d425cc0) will **increase** coverage by `0.00%`.\n> The diff coverage is `80.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2728?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2728?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.43% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2728?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `85.04% <100.00%> (+0.36%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2728?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.77% <66.66%> (-0.09%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-09-27T21:46:56Z",
  "id":1738121952,
  "issue":2728,
  "node_id":"IC_kwDODBCWws5nmaLg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-28T17:08:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2729?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2729](https://app.codecov.io/gh/scikit-hep/awkward/pull/2729?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c3571ec) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/5534105dd248f75419d7d735f91c6b441525430a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5534105) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-09-28T19:08:28Z",
  "id":1739864712,
  "issue":2729,
  "node_id":"IC_kwDODBCWws5ntDqI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-09-28T19:08:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski This comes up in the context of calling `typetracer_with_report` upon a (partially) unlabelled form. I wonder if that should just be an error; what is the point of associating a report with a form if that relationship is many to one (`None`)?",
  "created_at":"2023-10-28T08:45:47Z",
  "id":1783750296,
  "issue":2731,
  "node_id":"IC_kwDODBCWws5qUd6Y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-28T08:45:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It was a convenient way to implement `Form.length_zero_array`. All of the nodes need at most 8 bytes of zeros (`b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"`). By setting `buffer_key` to produce constant lookups in the `container`, we only had to make a `container` with one key and don't have to care about what the `form_keys` of the Form are.\r\n\r\nIf `buffer_key` were forced to be one-to-one, then we'd have to make many keys in the `container`, one for each node, and create or replace `form_keys` in the Form. All of the values of the `container` could point to one object, but setting that up would be more lines of code than what we have.\r\n\r\nThat might be regarded as a hack. (I don't think so, because it conforms to the rules about how the abstraction works\u2014there's nothing in the rules that say the mapping has to be one-to-one.) There are also legitimate cases in which multiple Form nodes would point to the same `container` keys, such as if someone does `ak.cartesian([array, array])`; the buffers of `array` are going to be referenced twice in the array returned by `ak.cartesian`.",
  "created_at":"2023-10-28T16:11:21Z",
  "id":1783859634,
  "issue":2731,
  "node_id":"IC_kwDODBCWws5qU4my",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-28T16:11:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I agree about the convenience for `typetracer_from_form`, which definitely falls into this category. I'm rather thinking about `typetracer_with_report`, which uses the above but also introduces the `TypeTracerReport`. It's _that_ part of our API that I think effectively mandates meaningful form keys, and that I'd like to change.",
  "created_at":"2023-10-28T19:46:40Z",
  "id":1783907515,
  "issue":2731,
  "node_id":"IC_kwDODBCWws5qVES7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-28T19:46:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2732](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d3038d2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/6dc52ccecdb5ef711d0299b0455c7f76d8d0c860?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6dc52cc) will **increase** coverage by `0.00%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `72.41%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.60% <\u00f8> (-0.03%)` | :arrow_down: |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.07% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.38% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.77% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_buffers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2J1ZmZlcnMucHk=) | `94.07% <100.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.15% <50.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.57% <50.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `85.14% <50.00%> (+0.09%)` | :arrow_up: |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.55% <76.47%> (-0.28%)` | :arrow_down: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2732/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-10-02T13:32:52Z",
  "id":1743025782,
  "issue":2732,
  "node_id":"IC_kwDODBCWws5n5HZ2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-03T14:42:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2733?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2733](https://app.codecov.io/gh/scikit-hep/awkward/pull/2733?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c22aa5a) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/589b3510fafe8c1ca81f078463e748d36e155467?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (589b351) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2733?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2733?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2733?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.43% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_errors.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2733?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `78.86% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2733?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.16% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_copy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2733?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3B5LnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2733?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `96.15% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-10-03T05:34:24Z",
  "id":1744241145,
  "issue":2733,
  "node_id":"IC_kwDODBCWws5n9wH5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T21:55:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR touches the C++ source, so we should group it with another C++ patch.",
  "created_at":"2023-10-04T23:13:33Z",
  "id":1747771884,
  "issue":2733,
  "node_id":"IC_kwDODBCWws5oLOHs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T23:13:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"There is another failing [test](https://github.com/scikit-hep/vector/blob/826572b620a0df897883529154a9665d077d7539/tests/test_issues.py#L29-L49) in the same CI run related to awkward v1, but I'm not sure if the failure is a vector problem or an awkward problem -\r\n```\r\nFAILED tests/test_issues.py::test_issue_161 - numba.core.errors.LoweringError: Failed in nopython mode pipeline (step: native lowering)\r\nFailed in nopython mode pipeline (step: nopython frontend)\r\nCode using Numba extension API maybe depending on 'old_style' error-capturing, which is deprecated and will be replaced by 'new_style' in a future release. See details at https://numba.readthedocs.io/en/latest/reference/deprecation.html#deprecation-of-old-style-numba-captured-errors\r\nException origin:\r\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/awkward/_connect/_numba/arrayview.py\", line 877, in generic\r\n    raise TypeError(\r\n\r\n\r\nFile \"tests/test_issues.py\", line 38:\r\n    def repro(generator_like_jet_constituents):\r\n        <source elided>\r\n            s = 0\r\n            for generator_like_constituent in sublist:\r\n            ^\r\n\r\nDuring: lowering \"$18for_iter.2 = iternext(value=$phi18.1)\" at /home/runner/work/vector/vector/tests/test_issues.py (38)\r\n.\r\n.\r\n.\r\nE                 File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/awkward/_connect/_numba/arrayview.py\", line 877, in generic\r\nE                   raise TypeError(\r\nE               \r\nE               \r\nE               File \"tests/test_issues.py\", line 38:\r\nE                   def repro(generator_like_jet_constituents):\r\nE                       <source elided>\r\nE                           s = 0\r\nE                           for generator_like_constituent in sublist:\r\nE                           ^\r\nE               \r\nE               During: lowering \"$18for_iter.2 = iternext(value=$phi18.1)\" at /home/runner/work/vector/vector/tests/test_issues.py (38)\r\n\r\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/numba/core/errors.py:846: LoweringError\r\n.\r\n.\r\n.\r\n>       raise NotImplementedError(\"No definition for lowering %s%s\" % (key, sig))\r\nE       NotImplementedError: No definition for lowering static_getitem(ak.ArrayView(ak.RecordArrayType((ak.NumpyArrayType(array(int64, 1d, A), none, {}), ak.NumpyArrayType(array(int64, 1d, A), none, {})), (('x', 'y')), none, {\"__record__\": \"Vector2D\"}), None, ()), Literal[int](0)) -> VectorObject2DType(AzimuthalObjectXY(int64 x 2))\r\n\r\n```",
  "created_at":"2023-10-04T04:55:06Z",
  "id":1746134926,
  "issue":2734,
  "node_id":"IC_kwDODBCWws5oE-eO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T04:55:06Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@Saransh-cpp - I hope PR #2735 fixes the issue, but I haven't tested it with vector yet",
  "created_at":"2023-10-04T06:13:08Z",
  "id":1746200655,
  "issue":2734,
  "node_id":"IC_kwDODBCWws5oFOhP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T06:13:08Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks, @ianna!! Your branch fixed everything in vector; the CI is all green (red for Python 3.12 because of distutils, but should be fine once awkward has a new release) - https://github.com/scikit-hep/vector/actions/runs/6406416975",
  "created_at":"2023-10-04T13:36:54Z",
  "id":1746896132,
  "issue":2734,
  "node_id":"IC_kwDODBCWws5oH4UE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T13:36:54Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "author_association":"MEMBER",
  "body":"It's good to know that the Numba changes fixed the Vector tests, but just running the tests again after so much time revealed _other_ breaking changes from third-party libraries. I've taken over the PR and have found one change in NumExpr and one change in pyarrow that break our test suite. I'll only merge it and make an Awkward 1.x release after our own tests pass.\r\n\r\nI know that that's blocking this PR on vector; I don't know if there's time pressure to get this out. Maybe not\u2014the original reason for the issue was to support Python 3.12, and third-party libraries like Numba don't yet. (I hear from the Numba team that supporting Python 3.12 is likely to take less time than Python 3.11 took. Currently, some 94% of Numba's test suite is passing in Python 3.12, which is a good sign. Still, I think I can fix these Awkward 1.x issues on a shorter time-scale than that.)",
  "created_at":"2023-10-04T15:55:04Z",
  "id":1747197262,
  "issue":2734,
  "node_id":"IC_kwDODBCWws5oJB1O",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-10-04T15:55:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"With or without this PR (that is, `main-v1` or `ianna/numba-error-backport-to-v1`), I get 66 test failures. They might not be related to Numba. I'm going to work through the test failures to see what can be done.",
  "created_at":"2023-10-04T14:31:29Z",
  "id":1746999789,
  "issue":2735,
  "node_id":"IC_kwDODBCWws5oIRnt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T14:31:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2735?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`main-v1@e68a046`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 084f90e differs from pull request most recent head 4492cdc. Consider uploading reports for the commit 4492cdc to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-10-04T18:19:13Z",
  "id":1747413609,
  "issue":2735,
  "node_id":"IC_kwDODBCWws5oJ2pp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T19:36:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I know that the Windows 32-bit wheels build and are successfully tested from those builds.\r\n\r\nhttps://github.com/scikit-hep/awkward/actions/runs/6410147455/job/17402806110?pr=2735\r\n\r\nThere is no reason to struggle with build-test.yml, to get its Windows to see the correct version of Python when wheels.yml does it correctly.\r\n\r\nSo I'll just remove the 32-bit test from build-test.yml and merge.",
  "created_at":"2023-10-04T19:15:49Z",
  "id":1747491365,
  "issue":2735,
  "node_id":"IC_kwDODBCWws5oKJol",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T19:15:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I like the **\u221268,438**  :-)",
  "created_at":"2023-10-07T17:02:46Z",
  "id":1751770965,
  "issue":2735,
  "node_id":"IC_kwDODBCWws5oaedV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-07T17:02:46Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh yeah, I ran into a few problems with v2 tests failing, and this is v1, so I just dropped all of the tests. In principle, I could drop the `awkward._v2` source code as well, but I didn't do that because I wasn't sure whether it would break anything. (I'd have to look more closely.)\r\n\r\nYou had me wondering, for a moment, whether there was an integer wrap-around error, since -68,438 looks a bit like `-2**16`.",
  "created_at":"2023-10-09T12:59:32Z",
  "id":1752967302,
  "issue":2735,
  "node_id":"IC_kwDODBCWws5ofCiG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-09T12:59:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2736?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2736](https://app.codecov.io/gh/scikit-hep/awkward/pull/2736?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (30800d1) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/626ff08fa73e6f84de85147ffaf8acf1df7a2776?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (626ff08) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-10-04T17:37:01Z",
  "id":1747355446,
  "issue":2736,
  "node_id":"IC_kwDODBCWws5oJoc2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T17:37:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I just tried this with new VMs on AWS, which have no history of ever having Python installed (other than system Python). I tried installing `awkward` and `dask-awkward` three ways:\r\n\r\n  * both as conda-forge packages\r\n  * both as PyPI packages in an otherwise empty conda environment (i.e. conda itself was installed, but everything else came in through pip)\r\n  * both as PyPI packages on the system Python\r\n\r\nIn all cases, `tests/test_2682_custom_pickler.py` passed without `dask-awkward` installed and failed with `dask-awkward` installed.\r\n\r\nThis is very consistent, and now on a platform with no history. I have no idea how our CI manages to not have a problem with this.",
  "created_at":"2023-10-04T20:50:24Z",
  "id":1747620980,
  "issue":2738,
  "node_id":"IC_kwDODBCWws5oKpR0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T20:50:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The reason our CI doesn't catch it is because dask-awkward doesn't get installed in our CI.",
  "created_at":"2023-10-04T21:02:00Z",
  "id":1747635654,
  "issue":2738,
  "node_id":"IC_kwDODBCWws5oKs3G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T21:02:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The issue has been reproduced in CI:\r\n\r\nhttps://github.com/scikit-hep/awkward/actions/runs/6411516875/job/17407129086?pr=2739\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n_____________________________ test_default_pickler _____________________________\r\n\r\n    def test_default_pickler():\r\n>       assert _pickle_complex_array_and_return_form_impl() == ak.forms.from_dict(\r\n            {\"class\": \"ListOffsetArray\", \"offsets\": \"i64\", \"content\": \"int64\"}\r\n        )\r\nE       AssertionError: assert ListForm('i64', 'i64', NumpyForm('int64')) == ListOffsetForm('i64', NumpyForm('int64'))\r\nE        +  where ListForm('i64', 'i64', NumpyForm('int64')) = _pickle_complex_array_and_return_form_impl()\r\nE        +  and   ListOffsetForm('i64', NumpyForm('int64')) = <function from_dict at 0x7fdfc7fabec0>({'class': 'ListOffsetArray', 'content': 'int64', 'offsets': 'i64'})\r\nE        +    where <function from_dict at 0x7fdfc7fabec0> = <module 'awkward.forms' from '/home/runner/micromamba/envs/awkward/lib/python3.11/site-packages/awkward/forms/__init__.py'>.from_dict\r\nE        +      where <module 'awkward.forms' from '/home/runner/micromamba/envs/awkward/lib/python3.11/site-packages/awkward/forms/__init__.py'> = ak.forms\r\n\r\n\r\ntests/test_2682_custom_pickler.py:44: AssertionError\r\n______________________________ test_noop_pickler _______________________________\r\nconcurrent.futures.process._RemoteTraceback: \r\n\"\"\"\r\nTraceback (most recent call last):\r\n  File \"/home/runner/micromamba/envs/awkward/lib/python3.11/concurrent/futures/process.py\", line 256, in _process_worker\r\n    r = call_item.fn(*call_item.args, **call_item.kwargs)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/runner/work/awkward/awkward/tests/test_2682_custom_pickler.py\", line 26, in _pickle_complex_array_and_return_form_impl\r\n    return pickle.loads(pickle.dumps(array)).layout.form\r\n                        ^^^^^^^^^^^^^^^^^^^\r\n\r\nself = None\r\n\r\n    def __get_result(self):\r\n        if self._exception:\r\n            try:\r\n>               raise self._exception\r\nE               RuntimeError: Encountered multiple Awkward pickle reducers under the `awkward.pickle.reduce` entrypoint\r\n\r\nself       = None\r\n\r\n../../../micromamba/envs/awkward/lib/python3.11/concurrent/futures/_base.py:401: RuntimeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\ntmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_malformed_pickler0')\r\n\r\n    def test_malformed_pickler(tmp_path):\r\n>       with pytest.raises(RuntimeError, match=r\"malformed pickler!\"):\r\nE       AssertionError: Regex pattern did not match.\r\nE        Regex: 'malformed pickler!'\r\nE        Input: 'Encountered multiple Awkward pickle reducers under the `awkward.pickle.reduce` entrypoint'\r\n\r\ntmp_path   = PosixPath('/tmp/pytest-of-runner/pytest-0/test_malformed_pickler0')\r\n\r\ntests/test_2682_custom_pickler.py:87: AssertionError\r\n=========================== short test summary info ============================\r\nSKIPPED [1] tests/test_0115_generic_reducer_operation.py:1209: I can't think of a canonical UnionArray (non-mergeable contents) that can be used in a reducer\r\nSKIPPED [1] tests/test_0401_add_categorical_type_for_arrow_dictionary.py:400: Fix issues for categorical type\r\nSKIPPED [1] tests/test_0652_tests_of_complex_numbers.py:218: Remember to implement sorting for complex numbers.\r\nSKIPPED [1] tests/test_1072_sort.py:714: I can't think of a canonical UnionArray (non-mergeable contents) that can be used in sorting\r\nSKIPPED [1] tests/test_1072_sort.py:739: I can't think of a canonical UnionArray (non-mergeable contents) that can be used in sorting\r\nSKIPPED [1] tests/test_1300_awkward_to_cpp_converter_with_cling.py:345: ROOT was compiled without C++17 support\r\nSKIPPED [1] tests/test_1300_awkward_to_cpp_converter_with_cling.py:408: ROOT was compiled without C++17 support\r\nSKIPPED [1] tests/test_1300_awkward_to_cpp_converter_with_cling.py:467: ROOT was compiled without C++17 support\r\nSKIPPED [1] tests/test_1300_awkward_to_cpp_converter_with_cling.py:788: ROOT was compiled without C++17 support\r\nSKIPPED [4] tests/test_1440_start_v2_to_parquet.py:223: Categorical arrays can't roundtrip through Parquet due to ARROW-14525\r\nSKIPPED [2] tests/test_1613_generator_tolayout_records.py:145: ROOT was compiled without C++17 support\r\nSKIPPED [2] tests/test_1613_generator_tolayout_records.py:182: ROOT was compiled without C++17 support\r\nSKIPPED [2] tests/test_1613_generator_tolayout_records.py:202: ROOT was compiled without C++17 support\r\nSKIPPED [1] tests/test_1613_generator_tolayout_records.py:291: the test needs an external data file: see the comments\r\nSKIPPED [1] tests/test_1672_broadcast_parameters.py:9: string broadcasting is broken\r\nSKIPPED [1] tests/test_1672_broadcast_parameters.py:23: string broadcasting is broken\r\nSKIPPED [1] tests/test_1672_broadcast_parameters.py:37: string broadcasting is broken\r\nSKIPPED [1] tests/test_1672_broadcast_parameters.py:55: string broadcasting is broken\r\nSKIPPED [1] tests/test_1764_jax_jacobian.py:14: Jacobian support not implemented\r\nSKIPPED [1] tests/test_2306_cppyy_jit.py:48: Awkward Array can only work with cppyy 3.0.1 or later.\r\nSKIPPED [1] tests/test_2306_cppyy_jit.py:83: Awkward Array can only work with cppyy 3.0.1 or later.\r\nSKIPPED [1] tests/test_2327_array_interface.py:10: could not import 'cupy': No module named 'cupy'\r\nSKIPPED [1] tests/test_2649_dlpack_support.py:18: could not import 'cupy': No module named 'cupy'\r\n============ 4 failed, 2490 passed, 29 skipped in 239.86s (0:03:59) ============\r\n```",
  "created_at":"2023-10-04T21:19:09Z",
  "id":1747657614,
  "issue":2738,
  "node_id":"IC_kwDODBCWws5oKyOO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T21:19:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, this is a testing problem rather than a bug per-se. I think what's happening is that dask-awkward registers its own pickler, in addition to the pickler that is registered by the test itself. As such, we find _two_ picklers, and fail. I think the solution should involve hiding the dask-awkward pickler from our test suite, if we can.",
  "created_at":"2023-10-04T22:39:28Z",
  "id":1747744490,
  "issue":2738,
  "node_id":"IC_kwDODBCWws5oLHbq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T22:39:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The branch protection requirement on `Linux-ROOT` will need to be replaced with `Linux-ROOT-dask-awkward` after everything passes and we're ready to merge (because all of the other PRs will see the change in requirements, and they'll want something to merge from main to adjust for it).\r\n\r\nBut I couldn't just leave the name as `Linux-ROOT` when it's also testing dask-awkward. Maybe it should be called `Linux-third-party`?",
  "created_at":"2023-10-04T21:12:57Z",
  "id":1747649649,
  "issue":2739,
  "node_id":"IC_kwDODBCWws5oKwRx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T21:12:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2739?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2739](https://app.codecov.io/gh/scikit-hep/awkward/pull/2739?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f6b6d57) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/6dee1eac41c06d985a71fd26f237ed9d5133b5ef?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6dee1ea) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-10-04T21:18:05Z",
  "id":1747656388,
  "issue":2739,
  "node_id":"IC_kwDODBCWws5oKx7E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-05T19:01:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski is this finished? Does it just include `dask-awkward` as a dependency that is unused, but affects the environment through entrypoints?",
  "created_at":"2023-10-05T18:54:33Z",
  "id":1749470050,
  "issue":2739,
  "node_id":"IC_kwDODBCWws5oRsti",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-05T18:54:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's right: I intended to set it up as a test that would fail to show what needs to be fixed, [and then you fixed it](https://github.com/scikit-hep/awkward/actions/runs/6423272773/job/17441443619?pr=2739#step:12:2528), so it's done now.\r\n\r\nSince we don't explicitly import dask-awkward in any of our tests, the only effect was through entrypoints. But the effect was causing the test to fail (which can happen if someone decides to run the tests after installing from an sdist), so it was an important effect.\r\n\r\nI'll change the branch protection rules to know about the `Linux-ROOT` \u2192 `Linux-ROOT-dask-awkward` name change, then merge this PR, and then we should merge main into other ongoing PRs.",
  "created_at":"2023-10-05T21:00:12Z",
  "id":1749634700,
  "issue":2739,
  "node_id":"IC_kwDODBCWws5oSU6M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-05T21:00:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2740](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8473c7f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/c377185f6c771f3c68b08d43254da4857fa06b33?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c377185) will **decrease** coverage by `0.02%`.\n> The diff coverage is `90.90%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numexpr.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.66% <100.00%> (+0.25%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.77% <100.00%> (+0.14%)` | :arrow_up: |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.62% <\u00f8> (+0.25%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.48% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.53% <\u00f8> (-0.04%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_concatenate.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.29% <100.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_from\\_json.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pzb24ucHk=) | `93.69% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mask.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXNrLnB5) | `96.29% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_where.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `92.59% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_run\\_lengths.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19ydW5fbGVuZ3Rocy5weQ==) | `90.12% <71.42%> (-2.09%)` | :arrow_down: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2740/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-10-04T23:37:12Z",
  "id":1747792271,
  "issue":2740,
  "node_id":"IC_kwDODBCWws5oLTGP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T23:37:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Nearly; I removed the support for `NumpyArray` and `EmptyArray` for `__array__`, which leaves the base `Content.__array__` that already throws an exception. This was prohibited for the base class some time ago; we expect users who do not wish to be explicit about e.g. `ak.to_numpy` to have a high-level array for such things.\r\n\r\nFor index nodes, a manual regex was used. We could also remove `__array__` et al. from `Index`, I'm not yet sure how we feel; `Index.__array__` et al. are useful for third-party package authors, who probably aren't going to have much support for placeholders. By the same token, however, we probably need such package authors to support typetracer and placeholders in order to build a better dask ecosystem so they wouldn't need `__array__` either.",
  "created_at":"2023-10-05T06:07:58Z",
  "id":1748143992,
  "issue":2740,
  "node_id":"IC_kwDODBCWws5oMo94",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-05T06:08:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2741?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2741](https://app.codecov.io/gh/scikit-hep/awkward/pull/2741?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5605070) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/db7040778c59e0cf87ce14779f2fc56952103a02?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (db70407) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2741?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/index.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2741?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `89.34% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-10-04T22:39:51Z",
  "id":1747744873,
  "issue":2741,
  "node_id":"IC_kwDODBCWws5oLHhp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-04T22:39:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2742?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2742](https://app.codecov.io/gh/scikit-hep/awkward/pull/2742?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a10e70b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/6dee1eac41c06d985a71fd26f237ed9d5133b5ef?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6dee1ea) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-10-05T15:55:57Z",
  "id":1749187155,
  "issue":2742,
  "node_id":"IC_kwDODBCWws5oQnpT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-05T16:11:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Merging as this is a tiny, well defined change.",
  "created_at":"2023-10-06T15:14:15Z",
  "id":1750870214,
  "issue":2744,
  "node_id":"IC_kwDODBCWws5oXCjG",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-10-06T15:14:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2747?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2747](https://app.codecov.io/gh/scikit-hep/awkward/pull/2747?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a7a327d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/c9aaacf724f413a141c605932ec393d68b3c00f2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c9aaacf) will **decrease** coverage by `0.01%`.\n> The diff coverage is `25.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2747?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/cppyy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2747?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY3BweXkucHk=) | `27.27% <50.00%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2747?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.72% <0.00%> (-0.12%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-10-08T08:02:22Z",
  "id":1751954827,
  "issue":2747,
  "node_id":"IC_kwDODBCWws5obLWL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-08T08:02:22Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna I presume we need to install cppyy from source to obtain the supported version? Perhaps we should add a CI job to do this.\r\n\r\nWhen obtaining cppyy from Git, do you locally need to bump the version to 3.0.1?",
  "created_at":"2023-10-08T10:54:16Z",
  "id":1751996926,
  "issue":2747,
  "node_id":"IC_kwDODBCWws5obVn-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-08T10:54:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna I presume we need to install cppyy from source to obtain the supported version?\r\n\r\nyes\r\n\r\n> Perhaps we should add a CI job to do this.\r\n> \r\n> When obtaining cppyy from Git, do you locally need to bump the version to 3.0.1?\r\n\r\nyes",
  "created_at":"2023-10-08T14:34:37Z",
  "id":1752043140,
  "issue":2747,
  "node_id":"IC_kwDODBCWws5obg6E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-08T14:34:37Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for merging this @jpivarski, I missed Ianna's reply!",
  "created_at":"2023-10-09T17:52:02Z",
  "id":1753420435,
  "issue":2747,
  "node_id":"IC_kwDODBCWws5ogxKT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-09T17:52:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2748?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2748](https://app.codecov.io/gh/scikit-hep/awkward/pull/2748?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c3bab8f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a6e426ed8943233b97ee17ca95e51c6d42cb6a54?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a6e426e) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2748?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/cppyy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2748?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY3BweXkucHk=) | `27.27% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-10-11T08:00:10Z",
  "id":1757067516,
  "issue":2748,
  "node_id":"IC_kwDODBCWws5ourj8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-11T08:00:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It's my understanding that:\r\n\r\n3.0.1 was a speculative version for cppyy. As such, bumping it to 3.1.0 is non-harmful; it's still a yet-unreleased version, and we require the latest version for this code.\r\n\r\nTherefore, I've accepted and we can merge! Thanks @ianna ",
  "created_at":"2023-10-11T08:50:38Z",
  "id":1757172576,
  "issue":2748,
  "node_id":"IC_kwDODBCWws5ovFNg",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2023-10-11T08:50:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski how do you feel about this PR? \r\n\r\nNamely \u2014 considering `nplike.asarray(index)` an \"error\" internally, expecting it to fail under placeholders, but _not_ adding any tests for this yet\r\n\r\nUpfront it means we'll likely see exceptions that we could avoid by being more permissive in `nplike.asarray`, but I hope that this is just a bathtub model curve, and we'll have cleaner internals down the road.",
  "created_at":"2023-10-11T08:43:30Z",
  "id":1757157894,
  "issue":2749,
  "node_id":"IC_kwDODBCWws5ovBoG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-11T10:24:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2749](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cb8c70b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/a6e426ed8943233b97ee17ca95e51c6d42cb6a54?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a6e426e) will **increase** coverage by `0.00%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `78.78%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.99% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.48% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/unmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `74.40% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_flatten.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mbGF0dGVuLnB5) | `93.47% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_run\\_lengths.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19ydW5fbGVuZ3Rocy5weQ==) | `90.12% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_dataframe.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19kYXRhZnJhbWUucHk=) | `90.55% <100.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jYXRlZ29yaWNhbC5weQ==) | `93.54% <50.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `96.15% <75.00%> (\u00f8)` | |\n| [...rc/awkward/operations/ak\\_merge\\_union\\_of\\_records.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXJnZV91bmlvbl9vZl9yZWNvcmRzLnB5) | `87.03% <68.75%> (+1.45%)` | :arrow_up: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2749/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-10-11T08:55:29Z",
  "id":1757180761,
  "issue":2749,
  "node_id":"IC_kwDODBCWws5ovHNZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-11T08:55:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2752](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e8fff34) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/0e27b903000958536dfb115a663edeba61e17f5a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0e27b90) will **decrease** coverage by `0.01%`.\n> Report is 2 commits behind head on main.\n> The diff coverage is `73.17%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.99% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.48% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/unmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `74.40% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_flatten.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mbGF0dGVuLnB5) | `93.47% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_run\\_lengths.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19ydW5fbGVuZ3Rocy5weQ==) | `90.12% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_dataframe.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19kYXRhZnJhbWUucHk=) | `90.55% <100.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jYXRlZ29yaWNhbC5weQ==) | `93.54% <50.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_unflatten.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha191bmZsYXR0ZW4ucHk=) | `96.15% <75.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.12% <50.00%> (-0.50%)` | :arrow_down: |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.22% <50.00%> (-0.32%)` | :arrow_down: |\n| ... and [1 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2752/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-10-11T21:24:14Z",
  "id":1758565626,
  "issue":2752,
  "node_id":"IC_kwDODBCWws5o0ZT6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-11T21:24:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2754](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0b0691e) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/ea8de120307f880442404c6a95b4c66199e05765?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ea8de12) will **increase** coverage by `0.06%`.\n> The diff coverage is `97.18%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_layout.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2xheW91dC5weQ==) | `84.46% <100.00%> (+0.79%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_corr.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3JyLnB5) | `100.00% <100.00%> (+12.50%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_covar.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3Zhci5weQ==) | `100.00% <100.00%> (+11.11%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_linear\\_fit.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19saW5lYXJfZml0LnB5) | `100.00% <100.00%> (+9.67%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_moment.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tb21lbnQucHk=) | `88.00% <100.00%> (+0.50%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_ptp.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wdHAucHk=) | `97.05% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_softmax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb2Z0bWF4LnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_var.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha192YXIucHk=) | `82.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mean.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `87.23% <88.88%> (+6.38%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_std.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdGQucHk=) | `83.72% <88.88%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-10-12T20:56:54Z",
  "id":1760354879,
  "issue":2754,
  "node_id":"IC_kwDODBCWws5o7OI_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-13T19:18:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This looks done, it's a straightforward fix, and it has been hours since you touched it, so I'm going to merge it.",
  "created_at":"2023-10-13T19:09:55Z",
  "id":1762056445,
  "issue":2754,
  "node_id":"IC_kwDODBCWws5pBtj9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-13T19:09:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2756?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2756](https://app.codecov.io/gh/scikit-hep/awkward/pull/2756?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e95bc2c) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f35878ff190d662d38c8540d8019f308506265a2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f35878f) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-10-13T11:45:19Z",
  "id":1761380570,
  "issue":2756,
  "node_id":"IC_kwDODBCWws5o_Ija",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-13T11:45:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Design question (1) \u2014 should `array.attrs` _always_ return a dict, or can it return `None`?\r\n\r\n### Return `None`\r\n(invert the below for \"always return a dict\")  \r\n- Convenient token for \"no metadata\", allowing optimisations (including non-Awkward cases)\r\n- Harder to set metadata in a non-functional style (unless metadata already set)",
  "created_at":"2023-10-13T13:33:49Z",
  "id":1761529727,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5o_s9_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-13T13:33:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The `_parameters` are internally `None` or `dict` for performance, but the external `parameters` property always returns a `dict` for uniformity. In fact, the property creates the `dict` so that it can be mutably updated from that point onward.\r\n\r\nI think this is a good compromise, and it would follow the principle of least surprise if `attrs` does the same thing. In fact, I think this is what `behaviors` does, too.\r\n\r\nYou were only asking about how it looks from the outside, so I'm voting \"always return a dict.\" But since most users won't be using `attrs` (that's the situation we're starting from before this first implementation), so using `None` internally minimizes the performance impact of adding a new feature across all `ak.Arrays`.\r\n\r\nIf we really need a `has_attrs: bool` (more likely a `has_attr(name)`), then we can add it.\r\n\r\n-------------\r\n\r\nOh, unlike `parameters`, I think we should _not_ conflate key-not-found with value-is-None. We should allow users to consider `None` a meaningful value for an attribute, distinct from not having that attribute. `attrs` is the users' space, much more so than `parameters`.",
  "created_at":"2023-10-13T18:00:03Z",
  "id":1761954553,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5pBUr5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-13T18:00:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The `_parameters` are internally `None` or `dict` for performance, but the external `parameters` property always returns a `dict` for uniformity. In fact, the property creates the `dict` so that it can be mutably updated from that point onward.\r\n> ...\r\n> I think this is a good compromise, and it would follow the principle of least surprise if attrs does the same thing. In fact, I think this is what behaviors does, too.\r\n\r\nActually, `Array.behavior` returns `None | dict`, making it possible to predict whether the array will use the global behavior lookup.\r\n\r\n`attrs` doesn't have that benefit; there's only a single namespace to look at, so this motivation for exposing `None` disappears. I think it's therefore OK to hide the detail from users.\r\n\r\n-------------\r\n\r\n> Oh, unlike `parameters`, I think we should _not_ conflate key-not-found with value-is-None. We should allow users to consider `None` a meaningful value for an attribute, distinct from not having that attribute. `attrs` is the users' space, much more so than `parameters`.\r\n\r\nAgreed. ",
  "created_at":"2023-10-15T17:57:11Z",
  "id":1763461113,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5pHEf5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-15T17:57:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR indicates that it would be nice to have something like\r\n```python\r\nctx = HighLevelCtx()\r\n\r\nlayouts = ctx.finalise([\r\n    ak.to_layout(ctx.maybe_highlevel(a)) for a in arrays\r\n])\r\n\r\nbackend = ctx.backend\r\nbehavior = ctx.behavior\r\n\r\n```\r\n\r\nRather than the existing stateless functional API that revisits inputs multiple times. This function would ensure all layouts have the proper \"final\" backend.\r\n\r\nAs such, it's on-hold for PR #2763 and another PR.",
  "created_at":"2023-10-22T22:22:04Z",
  "id":1774215471,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5pwGEv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-22T22:22:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this is a big PR.\r\n\r\nI've split it into commits that should be a bit more manageable.\r\n\r\nI still need to do a pass to confirm that the various policy settings used by `ak.to_layout` are sensible, but I'd benefit from the main review to confirm that the (internal) API changes are a step in the right direction.\r\n\r\nThe purpose of the `HighLevelContext` addition to this PR was make the general idiom of pulling behaviors off of high-level object(s) and applying them to the results is less error prone. The use of `ctx.wrap_layout` leads to an Exception if the context hasn't been explicitly finalised, making it harder to pass the wrong `behavior` argument around.\r\n\r\nThere's a test failure pertaining to the choice to permit records, that I'll revisit.",
  "created_at":"2023-10-30T23:13:58Z",
  "id":1786189710,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5qdxeO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-30T23:13:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Do we have a formal policy regarding which functions should prohibit/support record objects? e.g. `ak.is_none` on a record.",
  "created_at":"2023-10-31T13:53:45Z",
  "id":1787266674,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5qh4Zy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-31T13:53:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Do we have a formal policy regarding which functions should prohibit/support record objects? e.g. `ak.is_none` on a record.\r\n\r\nI think it's fine. `ak.is_none(something)` should probably return `np.bool_(True)` if `something is None` and `np.bool_(False)` if `something` is any other scalar, including `ak.Record` or a single string. At least, that's what I would naively expect.\r\n\r\nThe function is doing something that could be done in other ways in Python, namely `something is None`, but Awkward functions partly overlap territory already covered by NumPy, so they can partly overlap territory already covered by Python, too\u2014as long as the main focus is on things that can't be done other ways. It would be odd if it raised an error saying, \"I could tell you the answer, but instead I'm going to tell you to ask your question in a different way,\" and it would lead to code that has to check\r\n\r\n```python\r\nif something is None:\r\n    ...\r\nelif not isinstance(something, ak.Array):\r\n    ...\r\nelse:\r\n    ...\r\n```\r\n\r\nIf an Awkward function has a _natural_ extension into space covered by NumPy or Python, then we're reducing work on the user's end by handling array, scalar, and `None` in a consistent way.",
  "created_at":"2023-10-31T14:07:15Z",
  "id":1787291803,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5qh-ib",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-31T14:07:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The context object is a big difference. I see that this context object is private, for our own use, and I'm not certain that it's necessary for keeping track of two pieces of data (behavior and attrs), but it's fine.\r\n\r\nIt's certainly not _necessary_. But, I found the `metadata_of` approach a bit more error-prone and verbose. I think the change to use `ctx` improves readability. The challenge here is not to over-optimise things, which is the motivation behind getting a sense check on the direction.\r\n\r\nThe rationale for `HighLevelContext` is that if one needs to obtain a layout object, we should be forced to consider its behavior and/or attrs.\r\n\r\n",
  "created_at":"2023-10-31T20:48:31Z",
  "id":1788012325,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5qkucl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-31T20:49:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've changed `ak.to_regular` so that it errors upon encountering a bare record. That might be too strict.",
  "created_at":"2023-11-01T22:45:48Z",
  "id":1789791997,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5qrg79",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-01T22:45:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2757](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e7cccc9) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/9ee586d26f4db7693e71ca539bc8c4337a8ff84e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9ee586d) will **decrease** coverage by `0.03%`.\n> The diff coverage is `94.51%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends/dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2Rpc3BhdGNoLnB5) | `92.85% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.84% <100.00%> (+0.09%)` | :arrow_up: |\n| [src/awkward/\\_connect/numba/builder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `85.26% <100.00%> (+0.20%)` | :arrow_up: |\n| [src/awkward/\\_connect/numexpr.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.78% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.94% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_slicing.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `86.86% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.84% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_all.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `95.65% <100.00%> (-0.51%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_almost\\_equal.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbG1vc3RfZXF1YWwucHk=) | `93.18% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_any.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `95.65% <100.00%> (-0.51%)` | :arrow_down: |\n| ... and [146 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [6 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2757/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-11-02T18:43:35Z",
  "id":1791334113,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5qxZbh",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-08T01:16:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna this is the PR that I mentioned on Slack \u2014 would you be able to lend a hand in passing `attrs` through Numba? The only difference to `Array.behavior` is that we need to drop any `attrs` keys that start with a special token `\"_transient_\"`.",
  "created_at":"2023-11-03T16:19:57Z",
  "id":1792740960,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5q2w5g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-03T16:19:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The token for transient attrs is `_transient_`: that's a little long. How about a special symbol, like `@`?\r\n\r\nI don't think that's relevant for Numba, though. All of the attrs can be passed through Numba because they don't need to be serialized. (They're attached to the type instance, and that's a compile-time thing, not a runtime thing. If it seems like they're needed in boxing, to produce the output array, I'm sure we can arrange a work-around that calls a function and puts these things together on the Python side, rather than the Numba runtime side.)",
  "created_at":"2023-11-03T16:27:33Z",
  "id":1792751975,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5q2zln",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-03T16:27:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The token for transient attrs is `_transient_`: that's a little long. How about a special symbol, like `@`?\r\n\r\nI prefer that, actually!\r\n\r\n> I don't think that's relevant for Numba, though. All of the attrs can be passed through Numba because they don't need to be serialized. (They're attached to the type instance, and that's a compile-time thing, not a runtime thing. If it seems like they're needed in boxing, to produce the output array, I'm sure we can arrange a work-around that calls a function and puts these things together on the Python side, rather than the Numba runtime side.)\r\n\r\nAh, in my recent memory we did rely on serialisation in Numba for behavior, and this would necessarily suffer the same restrictions. But, we have a strategy (`\"@\"` prefix) for dropping these problem keys.",
  "created_at":"2023-11-03T16:32:52Z",
  "id":1792769847,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5q2383",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-03T16:32:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It will be a little surprising for transient attributes to not survive a trip through Numba. Users probably don't expect Numba to pass data through serialization, though it does.\r\n\r\nIt comes up in the boxing functions, which is the only place where a type (and the things attached to it, like `behaviors` and `attrs`) are used at runtime in Numba-compiled code, and therefore it serializes. But instead of trying to pass the type object directly into that code, we can reference it somehow with a Python function call. As long as we obtain the object via Python and not lowered Numba, we can avoid putting it through serialization.",
  "created_at":"2023-11-03T16:43:24Z",
  "id":1792785867,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5q273L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-03T16:43:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I wasn't happy with the sharing of responsibilities that `HighLevelContent` was undertaking. I've modified the API such that `HighLevelContext` is only responsible for the behavior and attrs of the arrays it accepts. I also restored the context-manager behavior, so the name is even more apt.\r\n\r\n\r\nTo ensure that the layouts have the same backend, I added `ensure_same_backend`, which calls `to_backend` on any object which implements the method.\r\n\r\n\r\nThe purpose of this context manager is to make it difficult to forget to take the behavior and attrs from participating array objects:\r\n1. The `ctx.unwrap` method is easy to type\r\n2. The indentation of the context manager requires one to localise the layout handling code\r\n3. `HighLevelContext` handles both attrs and behavior\r\n4. `ctx.wrap` makes it possible to avoid referring to behavior or attrs at all\r\n\r\ne.g. `ak.mean`:\r\n```python\r\nwith HighLevelContext(behavior=behavior, attrs=attrs) as ctx:\r\n    x_layout, weight_layout = ensure_same_backend(\r\n        ctx.unwrap(x, allow_record=False, primitive_policy=\"error\"),\r\n        ctx.unwrap(\r\n            weight,\r\n            allow_record=False,\r\n            allow_unknown=False,\r\n            primitive_policy=\"error\",\r\n            none_policy=\"pass-through\",\r\n        ),\r\n    )\r\n\r\nx = ctx.wrap(x_layout)\r\nweight = ctx.wrap(weight_layout, allow_other=True)\r\n```",
  "created_at":"2023-11-07T08:41:03Z",
  "id":1798045848,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5rLACY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-07T08:44:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> **Note**\r\n> We should make a follow-up PR to deprecate `behavior` from `recursively_apply`",
  "created_at":"2023-11-07T09:35:45Z",
  "id":1798133520,
  "issue":2757,
  "node_id":"IC_kwDODBCWws5rLVcQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-07T14:49:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2758](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9ddc907) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2748c0c5a674f740cbc216973707955bf63ba3e9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2748c0c) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_argmax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `87.50% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argmin.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `87.50% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_max.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXgucHk=) | `87.50% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mean.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `87.23% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_min.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19taW4ucHk=) | `87.50% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_prod.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wcm9kLnB5) | `87.50% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_std.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdGQucHk=) | `83.72% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_sum.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdW0ucHk=) | `87.50% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_var.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha192YXIucHk=) | `82.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-10-16T14:48:04Z",
  "id":1764648181,
  "issue":2758,
  "node_id":"IC_kwDODBCWws5pLmT1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-16T14:48:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I reckon you might've seen this earlier, before I noticed that the CI was failing. I've fixed it now!",
  "created_at":"2023-10-16T16:38:50Z",
  "id":1764866924,
  "issue":2759,
  "node_id":"IC_kwDODBCWws5pMbts",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-16T16:38:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"[5a2a95a](https://github.com/scikit-hep/awkward/pull/2761/commits/5a2a95ad8449ea849cf8375b294c7fe991380b49) is preparation for another PR that made sense here.",
  "created_at":"2023-10-19T16:27:05Z",
  "id":1771330832,
  "issue":2761,
  "node_id":"IC_kwDODBCWws5plF0Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-19T16:27:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2761](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c4ddd8) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/43adb653e6cbb0ddfe90be723fa1482cf816ddc7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (43adb65) will **decrease** coverage by `0.01%`.\n> The diff coverage is `87.50%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `95.43% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.66% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.77% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_errors.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `78.86% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_layout.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2xheW91dC5weQ==) | `84.46% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvX19pbml0X18ucHk=) | `80.95% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvZGlzcGF0Y2gucHk=) | `96.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_slicing.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `86.59% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.16% <100.00%> (\u00f8)` | |\n| [src/awkward/index.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `89.34% <100.00%> (\u00f8)` | |\n| ... and [15 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2761/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-10-19T16:36:40Z",
  "id":1771347426,
  "issue":2761,
  "node_id":"IC_kwDODBCWws5plJ3i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-19T16:36:40Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Fairly recently, the internal Numba type string for an array with behaviors was changed from including a string of the entire behavior dict (with `repr`) to just a hash (much faster).\r\n\r\nOn the way out, is it reconstituting the array by trying to turn that string back into a Python object? Because the hash is not reversible. Could that be related to the issue?\r\n\r\n(I think round-tripping behaviors through Numba used to work, and I'm surprised that there aren't tests for it.)",
  "created_at":"2023-10-24T12:21:52Z",
  "id":1777101068,
  "issue":2762,
  "node_id":"IC_kwDODBCWws5p7GkM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T12:21:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I haven't looked at the code in detail (I opened the issue to keep an eye on it!), but I think the issue is that dicts aren't hashable, so the hashing fails.\r\n\r\nWe should definitely add a test for this as part of the fix.",
  "created_at":"2023-10-24T12:29:05Z",
  "id":1777111284,
  "issue":2762,
  "node_id":"IC_kwDODBCWws5p7JD0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T12:29:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Fairly recently, the internal Numba type string for an array with behaviors was changed from including a string of the entire behavior dict (with `repr`) to just a hash (much faster).\r\n> \r\n> On the way out, is it reconstituting the array by trying to turn that string back into a Python object? Because the hash is not reversible. Could that be related to the issue?\r\n> \r\n> (I think round-tripping behaviors through Numba used to work, and I'm surprised that there aren't tests for it.)\r\n\r\nYes, that's what I observe. The Python 'dict' is unhashable. The TypeError occures while unboxing the ArrayBuilder. Specifically in:\r\n```\r\n  File \"/Users/yana/Projects/PR2763/awkward/src/awkward/_connect/numba/builder.py\", line 78, in box_ArrayBuilder\r\n    c.pyapi.serialize_object(arraybuildertype.behavior)\r\n  File \"/Users/yana/opt/anaconda3/envs/numba_py311/lib/python3.11/site-packages/numba/core/pythonapi.py\", line 1410, in serialize_object\r\n    gv = self.module.__serialized[obj]\r\n         ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^\r\nTypeError: unhashable type: 'dict'\r\n\r\n```\r\nI think, we need to consider using the Numba Dict type here.  ",
  "created_at":"2023-10-24T13:48:36Z",
  "id":1777245675,
  "issue":2762,
  "node_id":"IC_kwDODBCWws5p7p3r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T13:48:36Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Numba dicts are for lowering; the problem here is hashing.\r\n\r\n```python\r\n>>> d = nb.typed.Dict()\r\n>>> d[\"one\"] = 1\r\n>>> d[\"two\"] = 2\r\n>>> d[\"three\"] = 3\r\n>>> d\r\nDictType[unicode_type,int64]<iv=None>({one: 1, two: 2, three: 3})\r\n>>> hash(d)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: unhashable type: 'Dict'\r\n```\r\n\r\nAssuming that all of the values are hashable, we could convert them to and from tuples (since the key order in modern dicts\u2014that is, after Python 3.5\u2014is stable).\r\n\r\n```python\r\n>>> d = {\"one\": 1, \"two\": 2, \"three\": 3}\r\n>>> tuple_d = tuple(d.items())\r\n>>> hash(tuple_d)\r\n-1150126290131628349\r\n>>> dict(tuple_d)\r\n{'one': 1, 'two': 2, 'three': 3}\r\n```",
  "created_at":"2023-10-24T15:34:32Z",
  "id":1777498411,
  "issue":2762,
  "node_id":"IC_kwDODBCWws5p8nkr",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-10-24T15:34:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2763](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (175c52f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/b333fe41a89d1eb7b5c5c19fd56c374587666488?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b333fe4) will **decrease** coverage by `0.04%`.\n> Report is 2 commits behind head on main.\n> The diff coverage is `91.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/arrayview.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.37% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.58% <100.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/\\_slicing.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `86.86% <100.00%> (+0.26%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.25% <100.00%> (+0.09%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.53% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_all.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `96.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_any.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `96.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcartesian.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjYXJ0ZXNpYW4ucHk=) | `88.57% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcombinations.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjb21iaW5hdGlvbnMucHk=) | `86.95% <\u00f8> (\u00f8)` | |\n| ... and [67 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2763?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-10-22T18:22:38Z",
  "id":1774163792,
  "issue":2763,
  "node_id":"IC_kwDODBCWws5pv5dQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-26T09:40:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Annoyingly, I've run into the problem of specifying scalar-promotion rules again. We kicked the bucket down the road somewhat, but I think it's time to robustly solve this. At this stage, I *think* we can just replicate NumPy's rules for Python scalars, because Python scalars are expected to be non-kernel outputs (i.e. static).\r\n\r\nHowever, if we have places where this doesn't hold, we might need to think about implementing NEP-50 (https://numpy.org/neps/nep-0050-scalar-promotion.html#motivation-and-scope) which proposes to remove the value-dependence that we're worried about in Awkward",
  "created_at":"2023-10-22T22:26:00Z",
  "id":1774216256,
  "issue":2763,
  "node_id":"IC_kwDODBCWws5pwGRA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-22T22:26:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I also removed the `__cast__` default that casts `str` to length-1 arrays of strings.\r\n\r\nThis might be needed for some commonsense broadcasting cases. For instance,\r\n\r\n```python\r\nsome_array[\"new_field\"] = \"a single string\"\r\n```\r\n\r\nmay need to be presented as `ak.Array([\"a single string\"])` so that broadcasting sees this as one atom to duplicate `len(some_array)` times.",
  "created_at":"2023-10-23T22:22:09Z",
  "id":1776114468,
  "issue":2763,
  "node_id":"IC_kwDODBCWws5p3Vsk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T22:22:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski the failing test in 3.12 on windows is due to the change in scalar promotion; Awkward promotes scalars to the `ArrayBuilder` default type (int64) rather than the NumPy default for the platform. I don't think that is necessarily a problem, though I wonder whether `ArrayBuilder` should default to the NumPy default dtype for the current platform rather than hard-coding `int64`. Any strong feelings here? The real question, though, is are you OK with changing this behavior such that untyped scalars go via `ArrayBuilder` rather than using `asarray`?",
  "created_at":"2023-10-24T00:38:03Z",
  "id":1776272785,
  "issue":2763,
  "node_id":"IC_kwDODBCWws5p38WR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T00:38:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We should be interpreting Python `int` as `int64`. That's a widespread convention; only NumPy on Windows doesn't do it and I think that's a mistake.\r\n\r\nIf the scalars are really untyped (i.e. Python `int` or `float`), they can go via ArrayBuilder, but NumPy-typed scalars (i.e. `np.int32` and `np.float64`) would lose their types if they went through ArrayBuilder. ArrayBuilder takes any integer as `int64` and any floating point number as `float64`; it just doesn't have other input types compiled into it (which would dramatically increase its surface area, since its number of methods has to be equal to the number of classes, so handling $n$ input types means $n^2$ method-class pairs).",
  "created_at":"2023-10-24T15:25:57Z",
  "id":1777481449,
  "issue":2763,
  "node_id":"IC_kwDODBCWws5p8jbp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T15:25:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> We should be interpreting Python int as int64. That's a widespread convention; only NumPy on Windows doesn't do it and I think that's a mistake.\r\n\r\nFine! Although, now that's _also_ a list that includes Emscripten whose default is 32 bit.\r\n\r\n> If the scalars are really untyped (i.e. Python int or float), they can go via ArrayBuilder, but NumPy-typed scalars (i.e. np.int32 and np.float64) would lose their types if they went through ArrayBuilder.\r\n\r\nYes, the `np.generic` scalars are handled via `np.asarray` :)",
  "created_at":"2023-10-24T15:33:47Z",
  "id":1777497024,
  "issue":2763,
  "node_id":"IC_kwDODBCWws5p8nPA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T15:33:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Emscripten whose default is 32 bit\r\n\r\nI ran into JavaScript being limited to 32-bit in the Kaitai web tool. That was quite a surprise.\r\n\r\nOkay, there are two exceptions: NumPy in Windows and JavaScript/Emscripten.",
  "created_at":"2023-10-24T15:37:59Z",
  "id":1777504585,
  "issue":2763,
  "node_id":"IC_kwDODBCWws5p8pFJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T15:37:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I just changed `strings_as_characters` to a new literal `string_policy`, and renamed `scalar_policy` to `primitive_policy`. \r\n\r\nThis allows finer control of strings, and brings some symmetry to the API",
  "created_at":"2023-10-24T17:17:23Z",
  "id":1777682161,
  "issue":2763,
  "node_id":"IC_kwDODBCWws5p9Ubx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T17:17:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm AFK at the moment, but I took a look at the typetracer pathway. Our default parameters for this call \n```python\nak.typetracer.typetracer_from_form( \n    ak.forms.from_type(\n        ak.types.from_datashape(\n            \"{x: var * {y:int64}}\", \n        highlevel=False\n        )\n    )\n)\n```\n\nproduces a layout containing a length zero record array.\n\nI'm pretty sure that we've just missed this part of the length metadata when dropping length information.\n\nIt looks like the parent layout doesn't recursively drop length information: https://github.com/scikit-hep/awkward/blob/main/src/awkward/contents/listoffsetarray.py#L214\n\nI think we probably want a literal argument for this: `length_policy: Literal[\"keep\", \"drop_outer\", \"drop_recursive\"]`",
  "created_at":"2023-10-21T08:24:17Z",
  "id":1773716417,
  "issue":2764,
  "node_id":"IC_kwDODBCWws5puMPB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-21T08:32:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2765](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a5d0892) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/fa4b2bc9546d6e2c4fd66801bed5af90748d54f9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fa4b2bc) will **decrease** coverage by `0.01%`.\n> The diff coverage is `94.11%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.25% <100.00%> (+0.09%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.07% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.12% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.99% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.48% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.38% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.77% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.22% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.55% <100.00%> (\u00f8)` | |\n| ... and [8 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2765?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-10-22T15:57:25Z",
  "id":1774130105,
  "issue":2765,
  "node_id":"IC_kwDODBCWws5pvxO5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-22T15:57:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This is an L2 public function, so we can, in principle, be strict with users. However, it doesn't seem to be necessary here. Changing\r\n> \r\n> ```python\r\n> forget_length: bool\r\n> ```\r\n> \r\n> into\r\n> \r\n> ```python\r\n> length_policy: Literal[\"keep\", \"drop_outer\", \"drop_recursive\"]\r\n> ```\r\n> \r\n> requires calling functions to change, so so there's a deprecation cycle. But it could have been changed to\r\n> \r\n> ```python\r\n> forget_length: bool | Literal[\"false\", \"true\", \"recursive\"]\r\n> ```\r\n> \r\n> such that `False` corresponds to `\"false\"`, `True` corresponds to `\"true\"` (dropping just the outer length, which is the old behavior), and `\"recursive\"` is the only new behavior: dropping lengths recursively.\r\n\r\nMy personal preference is fairly strongly against mixing types like this, especially at L2 where we can move further away from interactive-friendly APIs towards stricter typing.\r\n\r\n> That way, there would be no need to make downstream libraries change. Since we're strictly extending the old behavior (new set of options is a superset of the old set of options) and there's a natural way to keep using the old words while introducing a new word, this is less of an imposition. Only downstream libraries that want the new behavior need to do anything; others don't even need to know about the change. \r\n\r\nThat is a benefit, though, of gradually extending the argument.\r\n\r\n> (In addition, I have a more immediate understanding of what \"forget length\" means than \"length policy\".)\r\n\r\nNaming things is hard :( I like `policy` because it implies to me that there's more than two options. \r\n\r\n> As another alternative, perhaps\r\n> \r\n> ```python\r\n> forget_length: bool | Literal[\"recursive\"]\r\n> ```\r\n> \r\n> to be tighter? It depends on whether it's important for all options to have identical type. (Well, they do, even now: it's a union type.)\r\n> \r\n> Also, why string literals and not enums? Do any enums naturally map onto false and true?\r\n\r\nEnum's don't play as nicely with typing as I would like. I don't think you can type a function such that it accepts a literal string _or_ an enum value; even `StrEnum`s are considered different types. The benefit for using enums is the safety; a misspelled identifier throws a `NameError`. I'm finding with editor annotations that the use of type hints helps eliminate this kind of mistake, and it's my hope that we'll further concrete this once mypy is in the CI. Furthermore, defining classes for a single functions' options feels clunky vs inlining the literal types.\r\n\r\n",
  "created_at":"2023-10-23T13:38:49Z",
  "id":1775222278,
  "issue":2765,
  "node_id":"IC_kwDODBCWws5pz74G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T13:38:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"My one \"on the other hand\" is that this is an L2 function and we can be strict. But on the first hand, it just seems like this will appear to downstream dependencies as deck-chair shuffling, forcing them to change their code and introduce a version dependence without an obvious benefit.\r\n\r\nA union type is a single type. As I understand from your argument, it is the editors/IDEs that will most strongly pass on the benefit of this. (That's why a type hint is preferred over an enum.) Do the editors have a problem with union types? Does it not tab-complete or show you a menu of possible completions if the type is a union type?",
  "created_at":"2023-10-23T14:15:14Z",
  "id":1775303358,
  "issue":2765,
  "node_id":"IC_kwDODBCWws5p0Pq-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T14:15:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> A union type is a single type. As I understand from your argument, it is the editors/IDEs that will most strongly pass on the benefit of this. (That's why a type hint is preferred over an enum.) Do the editors have a problem with union types? Does it not tab-complete or show you a menu of possible completions if the type is a union type?\r\n\r\nNo, LSP and other tools support unions just fine \u2014 we shouldn't discard a union for that reason. \r\n\r\nMy rationale is essentially that this should always have supported more than one option *I think*; dropping lengths is a deeper operation than the top level. But I'm working on a few things at the moment, and this is not the hill to die on! So, if you've not been convinced in favour of deprecation in this PR, then I'm happy to kick the bucket down the road to a future \"deprecation cycle\" and/or not do it :)",
  "created_at":"2023-10-23T14:19:48Z",
  "id":1775312800,
  "issue":2765,
  "node_id":"IC_kwDODBCWws5p0R-g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T14:19:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'll need to look into it more deeply, but I don't see how this is what is needed to fix #2764. The outer length was the only length dropped from type-tracers for a reason. (Partitioning only happens at top level.) I'll let you know if I'm wrong, but I think it can be fixed by a smaller change.\r\n\r\nSo we'll put this aside for now. I'll make this PR a draft. If #2764 can be solved without it, we can close it.",
  "created_at":"2023-10-23T14:42:05Z",
  "id":1775362498,
  "issue":2765,
  "node_id":"IC_kwDODBCWws5p0eHC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T14:42:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The outer length was the only length dropped from type-tracers for a reason. (Partitioning only happens at top level.) I'll let you know if I'm wrong, but I think it can be fixed by a smaller change.\r\n\r\nWhilst it's true that we envisage dropping lengths for top-level partitions, I think we now use this function more generally than that. For example, taking an _existing_ array and converting it to typetracer will produce an array whose buffers nearly _all_ have known lengths. There may be cases where this is intended, but others where it is not. \r\n\r\nSo, whilst we can certainly fix #2764 by doing something special for the typetracer factory method, I think handling all of the other known cases we want to support means adding more policies for length erasure. ",
  "created_at":"2023-10-23T14:50:05Z",
  "id":1775379583,
  "issue":2765,
  "node_id":"IC_kwDODBCWws5p0iR_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T14:50:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"After discussing this with @jpivarski in our weekly Zoom meeting, we've concluded that lengths should never be partially forgotten \u2014 it should be all or nothing, as *most* of the time we don't know lengths because we don't know buffers, i.e. interior nodes cannot have known lengths.\r\n\r\nThe only case that we'd lose by choosing recursive forgetfulness is when a concrete layout is partitioned into smaller parts. That's not something we do for dask-awkward, nor is it likely that useful.",
  "created_at":"2023-10-26T09:43:04Z",
  "id":1780771826,
  "issue":2765,
  "node_id":"IC_kwDODBCWws5qJGvy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-26T09:43:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2766?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2766](https://app.codecov.io/gh/scikit-hep/awkward/pull/2766?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5e36dac) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/fa4b2bc9546d6e2c4fd66801bed5af90748d54f9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fa4b2bc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-10-23T13:07:21Z",
  "id":1775153283,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5pzrCD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T15:00:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I can see how this will make it much more convenient to fill buffers from a C interface, which has to pass each buffer individually. This implementation puts the recursion in the LayoutBuilder classes themselves, rather than outside of them.\r\n> \r\n> Is our C/C++ tidy formatter removing the curly brackets from single-statement `if`/`for` bodies? I'm surprised it's not enforcing them. According to https://stackoverflow.com/q/26111162/1623645, it's either named `readability-braces-around-statements` in clang-tidy or `InsertBraces` in clang-format.\r\n\r\nI think the clang-tidy is reinforcing it :-) \r\nSince we do not have a `.clang-tidy` configuration in the project it uses the following settings:\r\n```\r\n---\r\nChecks:          'clang-diagnostic-*,clang-analyzer-*'\r\nWarningsAsErrors: ''\r\nHeaderFilterRegex: ''\r\nAnalyzeTemporaryDtors: false\r\nFormatStyle:     none\r\nUser:            yana\r\nCheckOptions:\r\n  llvm-else-after-return.WarnOnConditionVariables: 'false'\r\n  modernize-loop-convert.MinConfidence: reasonable\r\n  modernize-replace-auto-ptr.IncludeStyle: llvm\r\n  cert-str34-c.DiagnoseSignedUnsignedCharComparisons: 'false'\r\n  google-readability-namespace-comments.ShortNamespaceLines: '10'\r\n  cert-err33-c.CheckedFunctions: '::aligned_alloc;::asctime_s;::at_quick_exit;::atexit;::bsearch;::bsearch_s;::btowc;::c16rtomb;::c32rtomb;::calloc;::clock;::cnd_broadcast;::cnd_init;::cnd_s\r\nignal;::cnd_timedwait;::cnd_wait;::ctime_s;::fclose;::fflush;::fgetc;::fgetpos;::fgets;::fgetwc;::fopen;::fopen_s;::fprintf;::fprintf_s;::fputc;::fputs;::fputwc;::fputws;::fread;::freopen;::\r\nfreopen_s;::fscanf;::fscanf_s;::fseek;::fsetpos;::ftell;::fwprintf;::fwprintf_s;::fwrite;::fwscanf;::fwscanf_s;::getc;::getchar;::getenv;::getenv_s;::gets_s;::getwc;::getwchar;::gmtime;::gmt\r\nime_s;::localtime;::localtime_s;::malloc;::mbrtoc16;::mbrtoc32;::mbsrtowcs;::mbsrtowcs_s;::mbstowcs;::mbstowcs_s;::memchr;::mktime;::mtx_init;::mtx_lock;::mtx_timedlock;::mtx_trylock;::mtx_u\r\nnlock;::printf_s;::putc;::putwc;::raise;::realloc;::remove;::rename;::scanf;::scanf_s;::setlocale;::setvbuf;::signal;::snprintf;::snprintf_s;::sprintf;::sprintf_s;::sscanf;::sscanf_s;::strch\r\nr;::strerror_s;::strftime;::strpbrk;::strrchr;::strstr;::strtod;::strtof;::strtoimax;::strtok;::strtok_s;::strtol;::strtold;::strtoll;::strtoul;::strtoull;::strtoumax;::strxfrm;::swprintf;::\r\nswprintf_s;::swscanf;::swscanf_s;::thrd_create;::thrd_detach;::thrd_join;::thrd_sleep;::time;::timespec_get;::tmpfile;::tmpfile_s;::tmpnam;::tmpnam_s;::tss_create;::tss_get;::tss_set;::unget\r\nc;::ungetwc;::vfprintf;::vfprintf_s;::vfscanf;::vfscanf_s;::vfwprintf;::vfwprintf_s;::vfwscanf;::vfwscanf_s;::vprintf_s;::vscanf;::vscanf_s;::vsnprintf;::vsnprintf_s;::vsprintf;::vsprintf_s;\r\n::vsscanf;::vsscanf_s;::vswprintf;::vswprintf_s;::vswscanf;::vswscanf_s;::vwprintf_s;::vwscanf;::vwscanf_s;::wcrtomb;::wcschr;::wcsftime;::wcspbrk;::wcsrchr;::wcsrtombs;::wcsrtombs_s;::wcsst\r\nr;::wcstod;::wcstof;::wcstoimax;::wcstok;::wcstok_s;::wcstol;::wcstold;::wcstoll;::wcstombs;::wcstombs_s;::wcstoul;::wcstoull;::wcstoumax;::wcsxfrm;::wctob;::wctrans;::wctype;::wmemchr;::wpr\r\nintf_s;::wscanf;::wscanf_s;'\r\n  cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField: 'false'\r\n  cert-dcl16-c.NewSuffixes: 'L;LL;LU;LLU'\r\n  google-readability-braces-around-statements.ShortStatementLines: '1'\r\n  cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic: 'true'\r\n  google-readability-namespace-comments.SpacesBeforeComments: '2'\r\n  modernize-loop-convert.MaxCopySize: '16'\r\n  modernize-pass-by-value.IncludeStyle: llvm\r\n  modernize-use-nullptr.NullMacros: 'NULL'\r\n  llvm-qualified-auto.AddConstToQualified: 'false'\r\n  modernize-loop-convert.NamingStyle: CamelCase\r\n  llvm-else-after-return.WarnOnUnfixable: 'false'\r\n  google-readability-function-size.StatementThreshold: '800'\r\n...\r\n```",
  "created_at":"2023-10-23T13:43:43Z",
  "id":1775232240,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5pz-Tw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T13:51:18Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Not to be down on ChatGPT, but I prefer Manasvi's solution. Instead of creating an temporary object that gets filled and later has to be deleted, Manasvi's solution goes directly to the thing we ultimately want to do: get the buffers to the right depth of the LayoutBuilder tree so that they can be filled.\r\n\r\nI'll admit that there are performance benefits to making the temporary `std::map`. In Manasvi's solution, every name is compared with the name of every node in the tree, and those are string comparisons, whereas with a `std::map<std::string, void*>`, there's only one tree-traversal for all buffers, and keys of the map are first checked by comparing hashes before string comparisons. At the absolute worst, there can be thousands of nodes in a tree, so we're comparing $\\mathcal{O}(n^2)$ string comparisons with $\\mathcal{O}(n)$ hashmap lookups, and $n \\approx 1000$. A million string comparisons sounds bad, but I'll bet it's not any more than a few milliseconds, and it's only done once per file/Awkward Array. Since this is not a speed-critical part of the code, I would favor a million string comparisons over having to delete a temporary `std::map`.\r\n\r\nBut if we go with the temporary `std::map` (and all of that code would make more sense in the Kaitai-Awkward runtime, rather than here in Awkward Array), then the Python needs to ensure that the map pointer gets deleted, even if there are errors.\r\n\r\n```python\r\n# Create a map\r\nmap_ptr = example.create_map()\r\n\r\ntry:\r\n    # Insert some values\r\n    example.insert_to_map(map_ptr, 1, 10)\r\n    example.insert_to_map(map_ptr, 2, 20)\r\n    example.insert_to_map(map_ptr, 3, 30)\r\n\r\n    # There's no reason to ever print the map\r\n\r\nfinally:\r\n    # Clean up memory\r\n    example.delete_map(map_ptr)\r\n```\r\n\r\nThat `try`-`finally` logic applies to the LayoutBuilder's opaque pointer, too, but it would be a different `try`-`finally` because the `try` block has to encompass all of the code after the pointer is constructed and before it is deleted, and the LayoutBuilder and `std::map` would be constructed at different times. Even if they're constructed one after the other, the two `try` blocks would be nested because one is on a line immediately following the other.\r\n\r\n(This is the kind of complexity I wanted to avoid by not having intermediate objects.)",
  "created_at":"2023-10-23T13:58:47Z",
  "id":1775268939,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5p0HRL",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2023-10-23T13:58:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"We have both a `.clang-tidy` and a `.clang-format` in [awkward-cpp](https://github.com/scikit-hep/awkward/tree/main/awkward-cpp), right? Do they apply to the header-only code?",
  "created_at":"2023-10-23T14:00:14Z",
  "id":1775271835,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5p0H-b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T14:00:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> We have both a `.clang-tidy` and a `.clang-format` in [awkward-cpp](https://github.com/scikit-hep/awkward/tree/main/awkward-cpp), right? Do they apply to the header-only code?\r\n\r\nNo, I don't think so",
  "created_at":"2023-10-23T14:02:57Z",
  "id":1775277553,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5p0JXx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T14:02:57Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Not to be down on ChatGPT, but I prefer Manasvi's solution. Instead of creating an temporary object that gets filled and later has to be deleted, Manasvi's solution goes directly to the thing we ultimately want to do: get the buffers to the right depth of the LayoutBuilder tree so that they can be filled.\r\n> \r\n> I'll admit that there are performance benefits to making the temporary `std::map`. In Manasvi's solution, every name is compared with the name of every node in the tree, and those are string comparisons, whereas with a `std::map<std::string, void*>`, there's only one tree-traversal for all buffers, and keys of the map are first checked by comparing hashes before string comparisons. At the absolute worst, there can be thousands of nodes in a tree, so we're comparing O(n2) string comparisons with O(n) hashmap lookups, and n\u22481000. A million string comparisons sounds bad, but I'll bet it's not any more than a few milliseconds, and it's only done once per file/Awkward Array. Since this is not a speed-critical part of the code, I would favor a million string comparisons over having to delete a temporary `std::map`.\r\n> \r\n> But if we go with the temporary `std::map` (and all of that code would make more sense in the Kaitai-Awkward runtime, rather than here in Awkward Array), then the Python needs to ensure that the map pointer gets deleted, even if there are errors.\r\n> \r\n> ```python\r\n> # Create a map\r\n> map_ptr = example.create_map()\r\n> \r\n> try:\r\n>     # Insert some values\r\n>     example.insert_to_map(map_ptr, 1, 10)\r\n>     example.insert_to_map(map_ptr, 2, 20)\r\n>     example.insert_to_map(map_ptr, 3, 30)\r\n> \r\n>     # There's no reason to ever print the map\r\n> \r\n> finally:\r\n>     # Clean up memory\r\n>     example.delete_map(map_ptr)\r\n> ```\r\n> \r\n> That `try`-`finally` logic applies to the LayoutBuilder's opaque pointer, too, but it would be a different `try`-`finally` because the `try` block has to encompass all of the code after the pointer is constructed and before it is deleted, and the LayoutBuilder and `std::map` would be constructed at different times. Even if they're constructed one after the other, the two `try` blocks would be nested because one is on a line immediately following the other.\r\n> \r\n> (This is the kind of complexity I wanted to avoid by not having intermediate objects.)\r\n\r\nI'm not worried about the performance, but rather a potential issues when a user loads multiple files, gets the sizes first for all files, then gets the names, etc. The results could be out of order. The helpers should be hidden.\r\n\r\nAnd, yes, I think the anonymous helpers would make more sense in an auto-generated part, or outside of the LayoutBuilder header.",
  "created_at":"2023-10-23T14:10:08Z",
  "id":1775292552,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5p0NCI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T14:10:08Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> And, yes, I think the anonymous helpers would make more sense in an auto-generated part, or outside of the LayoutBuilder header.\r\n>\r\nYes, you are right. The anonymous helpers don't need to be in the `LayoutBuilder` header as they serve no purpose there. I don't think they will be needed anywhere else later besides the kaitai code. So, they can be moved to the generated code.\r\n",
  "created_at":"2023-10-23T14:16:12Z",
  "id":1775305305,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5p0QJZ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-10-23T14:17:54Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Is our C/C++ tidy formatter removing the curly brackets from single-statement `if`/`for` bodies? I'm surprised it's not enforcing them. According to https://stackoverflow.com/q/26111162/1623645, it's either named `readability-braces-around-statements` in clang-tidy or `InsertBraces` in clang-format.\r\n\r\nIt's a bit uneven. There are few places where it is enforced while in other places it's not.",
  "created_at":"2023-10-23T14:31:52Z",
  "id":1775338927,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5p0YWv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T14:31:52Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"> I'm not worried about the performance, but rather a potential issues when a user loads multiple files, gets the sizes first for all files, then gets the names, etc. The results could be out of order. The helpers should be hidden.\r\n\r\nIt's already the case that a single LayoutBuilder instance can't be used with multiple files. It's a stateful object that is created when a file is opened, goes through all the sequential steps of snapshot-generation when it's done reading, and then is deleted when the file is closed. That's true in both its C++ and its C interface\u2014even in the C++ interface, the snapshot process involved multiple steps that have to go in order.\r\n\r\n> And, yes, I think the anonymous helpers would make more sense in an auto-generated part, or outside of the LayoutBuilder header.\r\n\r\nI would expect to find `std::map` generation in the Kaitai-Awkward runtime (not generated, but also not in the Awkward header-only code).\r\n\r\nBut Manasvi's solution of passing each buffer and name down through the LayoutBuilder tree is most easily expressed in the Awkward header-only code, so if you're going with that implementation, I agree with Manasvi's original idea that it should be here.\r\n\r\nI'm in favor of merging this PR if all of the curly brackets are put in.",
  "created_at":"2023-10-23T14:48:16Z",
  "id":1775375541,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5p0hS1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T14:48:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I would expect to find `std::map` generation in the Kaitai-Awkward runtime (not generated, but also not in the Awkward header-only code).\r\n> \r\n> But Manasvi's solution of passing each buffer and name down through the LayoutBuilder tree is most easily expressed in the Awkward header-only code, so if you're going with that implementation, I agree with Manasvi's original idea that it should be here.\r\n> \r\n> I'm in favor of merging this PR if all of the curly brackets are put in.\r\n\r\nI have removed the helper functions for now and fixed the curly braces (there were more in the code). Maybe we can this PR open and discuss further about this in tomorrow. I do have a few questions regarding what should go the the `kaitai-awkward-runtime` and what in the generated code.\r\n\r\nMaybe we can have something like `utils.h` in the `kaitai-awkward-runtime`  for such code if we decide to put  it there.",
  "created_at":"2023-10-23T15:03:27Z",
  "id":1775410502,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5p0p1G",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2023-10-23T15:03:27Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I'm happy with the PR. Please, feel free to merge it anytime. Thanks!",
  "created_at":"2023-10-23T15:31:56Z",
  "id":1775469048,
  "issue":2766,
  "node_id":"IC_kwDODBCWws5p04H4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T15:31:56Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2767](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f848940) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/589b3510fafe8c1ca81f078463e748d36e155467?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (589b351) will **increase** coverage by `0.00%`.\n> The diff coverage is `86.79%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends/backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2JhY2tlbmQucHk=) | `87.50% <100.00%> (+0.83%)` | :arrow_up: |\n| [src/awkward/\\_backends/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2pheC5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `91.73% <100.00%> (-0.04%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `87.50% <100.00%> (+0.54%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `80.85% <100.00%> (+1.30%)` | :arrow_up: |\n| [src/awkward/\\_slicing.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `86.59% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpylike.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.72% <72.72%> (-0.04%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2767?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `76.46% <81.81%> (-0.02%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-10-23T17:45:59Z",
  "id":1775707038,
  "issue":2767,
  "node_id":"IC_kwDODBCWws5p1yOe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T17:45:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I updated the PR description to make it explicit that this will have a high-level effect upon the visible type semantics of ufunc operations. When you next have a moment, could you confirm that you're happy to move in this direction? I *think* it's where NumPy is moving, but moreover we need our operations to be value agnostic, so I think we _have to_",
  "created_at":"2023-10-23T22:36:09Z",
  "id":1776129898,
  "issue":2767,
  "node_id":"IC_kwDODBCWws5p3Zdq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-23T22:36:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Previously, weren't we gluing our type promotion behavior to whatever NumPy does (by actually calling NumPy on empty arrays)? Then we'd inherit whatever NumPy decides to do in the future. Is that not what would automatically happen, without this PR?\r\n\r\nAs an aside, while it's bad for the output type of an operation to depend on the values in arrays, I'm less compelled to worry about it depending on the values of Python objects (scalar `int` or `float`), unless we can somehow have these Python objects be unknown in a Dask DAG. The type-tracer mechanism allows all of the values in our array buffers (and their sizes) to be unknown with known types, but Python scalar `int` and `float` are outside of this system. If it was a `np.int32` or a `np.float64`, that would be inside the system, as those are the kinds of values that can come out of arrays.\r\n\r\nAlso, it would be fine to assume that any Python `int` is always `np.int64` (we do that in several places, NumPy does it on all platforms but Windows, and Numba does it universally), and that any Python `float` is always `np.float64` (which it literally is, unlike the arbitrary-precision `int`).\r\n\r\nI'm not against this PR; if it's necessary to fully conform to NEP-50 and there are good reasons to believe that NumPy will actually adopt NEP-50.",
  "created_at":"2023-10-24T15:06:05Z",
  "id":1777438550,
  "issue":2767,
  "node_id":"IC_kwDODBCWws5p8Y9W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T15:06:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Previously, weren't we gluing our type promotion behavior to whatever NumPy does (by actually calling NumPy on empty arrays)? Then we'd inherit whatever NumPy decides to do in the future. Is that not what would automatically happen, without this PR?\r\n\r\nSomewhat; the main places that we need to define what happens w.r.t types is in typetracer. We want the same rules to apply to typetracer and non-typetracer, so our `ufunc` handling is changed in *this* PR to ensure that we can predict types. So we have to implement scaffolding for typetracer, and right now we're choosing to be value (which is always 0 for typetracer) dependent.\r\n\r\nThe real problem with NumPy's default handling is that scalars are _always_ typed by value; e.g. `np.int64(0)` resolves to `np.int8`/`np.int8` if added to such an array. This is worse than just being value-sensitive for Python scalars which may well be effectively static constants in the program.\r\n\r\n",
  "created_at":"2023-10-24T15:41:56Z",
  "id":1777511875,
  "issue":2767,
  "node_id":"IC_kwDODBCWws5p8q3D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T15:41:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"```python\r\n>>> np.array([1, 2, 3, 4, 5], np.int8) + np.int64(10)\r\narray([11, 12, 13, 14, 15], dtype=int8)\r\n```\r\n\r\nYikes! Okay, that's terrible. Yes, you're right to introduce scaffolding to predict types manually.\r\n\r\nAlthough this does it right:\r\n\r\n```python\r\n>>> np.array([1, 2, 3, 4, 5], np.int8) + np.array([np.int64(10)])\r\narray([11, 12, 13, 14, 15])\r\n```\r\n\r\nIt seems that it just needs to not be a scalar (`ndims == 0` array). This is perhaps a better way:\r\n\r\n```python\r\n>>> np.array([1, 2, 3, 4, 5], np.int8) + np.int64(10)[np.newaxis]\r\narray([11, 12, 13, 14, 15])\r\n```",
  "created_at":"2023-10-24T16:10:21Z",
  "id":1777567773,
  "issue":2767,
  "node_id":"IC_kwDODBCWws5p84gd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T16:10:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> ```python\r\n> >>> np.array([1, 2, 3, 4, 5], np.int8) + np.int64(10)\r\n> array([11, 12, 13, 14, 15], dtype=int8)\r\n> ```\r\n> \r\n> Yikes! Okay, that's terrible. Yes, you're right to introduce scaffolding to predict types manually.\r\n> \r\n> Although this does it right:\r\n> \r\n> ```python\r\n> >>> np.array([1, 2, 3, 4, 5], np.int8) + np.array([np.int64(10)])\r\n> array([11, 12, 13, 14, 15])\r\n> ```\r\n> \r\n> It seems that it just needs to not be a scalar (`ndims == 0` array). This is perhaps a better way:\r\n> \r\n> ```python\r\n> >>> np.array([1, 2, 3, 4, 5], np.int8) + np.int64(10)[np.newaxis]\r\n> array([11, 12, 13, 14, 15])\r\n> ```\r\n\r\nYes, I'm genuinely surprised that this is the default behavior, but I'm sure that there's a long and complex reason behind its history.\r\n\r\nThe behaviour you describe above _is_ now what this PR delivers:\r\n```python\r\n>>> ak.from_numpy(np.arange(10, dtype=np.uint8)) + np.int64(2**32 - 1)\r\n<Array [4294967295, 4294967296, ..., 4294967303, 4294967304] type='10 * int64'>\r\n```\r\n\r\nIn the examples in the PR description, I demonstrate what happens to _untyped_ scalars, which inherit the integer flavour of the array;\r\n```python\r\n>>> ak.from_numpy(np.arange(10, dtype=np.uint8)) + (2**32 - 1)\r\n/home/angus/Git/awkward/src/awkward/_nplikes/array_module.py:44: DeprecationWarning: NumPy will stop allowing conversion of out-of-bound Python integers to integer arrays.  The conversion of 4294967295 to uint8 will fail in the future.\r\nFor the old behavior, usually:\r\n    np.array(value).astype(dtype)\r\nwill give the desired result (the cast overflows).\r\n  return self._module.asarray(obj, dtype=dtype)\r\n<Array [255, 0, 1, 2, 3, 4, 5, 6, 7, 8] type='10 * uint8'>\r\n```",
  "created_at":"2023-10-24T16:37:01Z",
  "id":1777614078,
  "issue":2767,
  "node_id":"IC_kwDODBCWws5p9Dz-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T16:37:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm in favor of this.\r\n\r\nAlso, I read over this PR carefully yesterday; it can be merged.",
  "created_at":"2023-10-24T16:41:59Z",
  "id":1777623169,
  "issue":2767,
  "node_id":"IC_kwDODBCWws5p9GCB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T16:41:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Also, I read over this PR carefully yesterday; it can be merged.\r\n\r\nThanks \u2014 changing something as fundamental as this feels a lot safer with a detailed review :)",
  "created_at":"2023-10-24T16:47:35Z",
  "id":1777632864,
  "issue":2767,
  "node_id":"IC_kwDODBCWws5p9IZg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T16:47:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"From the error, it looks like `ak.argsort` is actually succeeding; it's the pretty-printing that's failing. Let me take a look at that!",
  "created_at":"2023-10-24T07:05:35Z",
  "id":1776642627,
  "issue":2768,
  "node_id":"IC_kwDODBCWws5p5WpD",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-10-24T07:05:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Thank you! Just to mention one more thing, it seems that an error also occurs when trying to use the result of `argsort` to actually sort an array, e.g. in this code:\r\n```\r\na = ak.Array([None,None,[None,None]])\r\nb = ak.argsort(a,axis=1)\r\nc = a[b]\r\n```\r\nThere is an error (pasted below) on the `c = a[b]` line (though it runs fine if `a` is not all `None`, e.g. if its `[None,None,[None,1.1]]`). I'm wondering if the #2769 will also fix this issue? \r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/contents/numpyarray.py\", line 333, in _carry\r\n    nextdata = self._data[carry.data]\r\n               ~~~~~~~~~~^^^^^^^^^^^^\r\nIndexError: index 2 is out of bounds for axis 0 with size 2\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/highlevel.py\", line 1014, in __getitem__\r\n    prepare_layout(self._layout[where]), self._behavior, allow_other=True\r\n                   ~~~~~~~~~~~~^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/contents/content.py\", line 519, in __getitem__\r\n    return self._getitem(where)\r\n           ^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/contents/content.py\", line 572, in _getitem\r\n    return self._getitem(where.layout)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/contents/content.py\", line 647, in _getitem\r\n    return self._getitem((where,))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/contents/content.py\", line 553, in _getitem\r\n    items = ak._slicing.normalise_items(where, backend)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_slicing.py\", line 320, in normalise_items\r\n    return [normalise_item(x, backend=backend) for x in where]\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_slicing.py\", line 269, in normalise_item\r\n    out = _normalise_item_bool_to_int(_normalise_item_nested(item), backend)\r\n                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_slicing.py\", line 428, in _normalise_item_nested\r\n    _normalise_item_nested(projected),\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_slicing.py\", line 380, in _normalise_item_nested\r\n    return _normalise_item_nested(next)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_slicing.py\", line 367, in _normalise_item_nested\r\n    _normalise_item_nested(item.content),\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_slicing.py\", line 419, in _normalise_item_nested\r\n    projected = item.content._carry(ak.index.Index64(nextindex[nonnull]), False)\r\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/contents/numpyarray.py\", line 335, in _carry\r\n    raise ak._errors.index_error(self, carry.data, str(err)) from err\r\nIndexError: cannot slice NumpyArray (of length 2) with array([1, 2]): index 2 is out of bounds for axis 0 with size 2\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/contents/numpyarray.py\", line 301, in _getitem_at\r\n    out = self._data[where]\r\n          ~~~~~~~~~~^^^^^^^\r\nIndexError: index 2 is out of bounds for axis 0 with size 2\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/k.mohrman/coffea_dir/ewkcoffea/analysis/wwz/mre2.py\", line 8, in <module>\r\n    c = a[b]\r\n        ~^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/highlevel.py\", line 1012, in __getitem__\r\n    with ak._errors.SlicingErrorContext(self, where):\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_errors.py\", line 67, in __exit__\r\n    self.handle_exception(exception_type, exception_value)\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_errors.py\", line 80, in handle_exception\r\n    self.decorate_exception(cls, exception)\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_errors.py\", line 91, in decorate_exception\r\n    exception.add_note(self.note)\r\n                       ^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_errors.py\", line 342, in note\r\n    {self.where}\"\"\"\r\n     ^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_errors.py\", line 327, in where\r\n    out = self._kwargs[\"where\"] = out()\r\n                                  ^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_errors.py\", line 33, in __call__\r\n    return self.func(*self.args, **self.kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_errors.py\", line 380, in format_slice\r\n    return repr(x)\r\n           ^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/highlevel.py\", line 1236, in __repr__\r\n    return self._repr(80)\r\n           ^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/highlevel.py\", line 1262, in _repr\r\n    valuestr = valuestr + \" \" + awkward._prettyprint.valuestr(self, 1, strwidth)\r\n                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_prettyprint.py\", line 240, in valuestr\r\n    _, strs = valuestr_horiz(data, limit_cols)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_prettyprint.py\", line 135, in valuestr_horiz\r\n    cols_taken, strs = valuestr_horiz(current, limit_cols - 2)\r\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_prettyprint.py\", line 117, in valuestr_horiz\r\n    current = get_at(data, index)\r\n              ^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/_prettyprint.py\", line 43, in get_at\r\n    out = data._layout._getitem_at(index)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/contents/indexedoptionarray.py\", line 308, in _getitem_at\r\n    return self._content._getitem_at(self._index[where])\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/k.mohrman/miniconda3/envs/ak-env/lib/python3.12/site-packages/awkward/contents/numpyarray.py\", line 303, in _getitem_at\r\n    raise ak._errors.index_error(self, where, str(err)) from err\r\nIndexError: cannot slice NumpyArray (of length 2) with 2: index 2 is out of bounds for axis 0 with size 2\r\n```",
  "created_at":"2023-10-24T13:13:35Z",
  "id":1777181423,
  "issue":2768,
  "node_id":"IC_kwDODBCWws5p7aLv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T13:13:35Z",
  "user":"MDQ6VXNlcjM2MTQ1MDI1"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2769?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2769](https://app.codecov.io/gh/scikit-hep/awkward/pull/2769?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d668e0c) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/8927adbe99b514f7ffd85c4980740a8a608e5b11?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8927adb) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2769?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2769?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.50% <100.00%> (+0.01%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-10-24T08:56:49Z",
  "id":1776800214,
  "issue":2769,
  "node_id":"IC_kwDODBCWws5p59HW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T16:51:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The definition should also be updated here: \r\n\r\nEek, nearly forgot that. Thanks.",
  "created_at":"2023-10-24T15:43:03Z",
  "id":1777513814,
  "issue":2769,
  "node_id":"IC_kwDODBCWws5p8rVW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-24T15:43:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2770?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2770](https://app.codecov.io/gh/scikit-hep/awkward/pull/2770?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2716f8f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/c310ec134ffa31f1b6945794d93d29849e7e4d8a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c310ec1) will **decrease** coverage by `0.02%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `88.88%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2770?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/builder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2770?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `85.02% <100.00%> (+0.06%)` | :arrow_up: |\n| [src/awkward/\\_connect/numba/layoutbuilder.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2770?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0YnVpbGRlci5weQ==) | `87.24% <83.33%> (-0.03%)` | :arrow_down: |\n\n... and [73 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2770/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-10-25T11:58:30Z",
  "id":1779109427,
  "issue":2770,
  "node_id":"IC_kwDODBCWws5qCw4z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-26T10:07:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Here's a non-pickleable array:\r\n```python\r\nimport pickle\r\n\r\nimport numpy as np\r\nimport numba as nb\r\nimport pytest\r\n\r\nimport awkward as ak\r\n\r\n\r\ndef make_add_xyr():\r\n    def add_xyr(left, right):\r\n        x = left.x + right.x\r\n        y = left.y + right.y\r\n        return ak.zip(\r\n            {\r\n                \"x\": x,\r\n                \"y\": y,\r\n                \"r\": np.sqrt(x**2 + y**2),\r\n            },\r\n            with_name=\"xyr\",\r\n        )\r\n\r\n    return add_xyr\r\n\r\n\r\nbehavior = {(np.add, \"xyr\", \"xyr\"): make_add_xyr()}\r\n\r\n\r\na = ak.Array([{\"x\": 3, \"y\": 4, \"r\": 5}], with_name=\"xyr\", behavior=behavior)\r\nb = ak.Array([{\"x\": 3, \"y\": 4, \"r\": 5}], with_name=\"xyr\", behavior=behavior)\r\n\r\nbuilder = ak.ArrayBuilder(behavior=behavior)\r\n\r\n\r\nwith pytest.raises(AttributeError):\r\n    behavior_pkl = pickle.dumps(behavior)\r\n\r\n\r\n@nb.njit\r\ndef make_ab(builder):\r\n    builder.begin_record(\"xyz\")\r\n    builder.field(\"x\").integer(3)\r\n    builder.field(\"y\").integer(4)\r\n    builder.field(\"z\").integer(3)\r\n    builder.end_record()\r\n\r\n    builder.begin_record(\"xyz\")\r\n    builder.field(\"x\").integer(3)\r\n    builder.field(\"y\").integer(4)\r\n    builder.field(\"z\").integer(3)\r\n    builder.end_record()\r\n    return builder\r\n\r\n\r\nresult = make_ab(builder).snapshot()\r\n\r\nprint(result)\r\n\r\n```\r\n\r\nWe discussed in the meeting perhaps stashing a reference in the Python layer, and retrieving it later on? Just in case we forgot this (though I doubt we did).",
  "created_at":"2023-10-26T06:17:23Z",
  "id":1780479287,
  "issue":2770,
  "node_id":"IC_kwDODBCWws5qH_U3",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-10-26T06:17:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @agoose77 - I'm done with the PR. Please, check and modify if needed. For example, I put both tests in one - it could be split. Thanks!\r\n\r\nNope, not quite finished with it :-(",
  "created_at":"2023-10-26T07:35:41Z",
  "id":1780571599,
  "issue":2770,
  "node_id":"IC_kwDODBCWws5qIV3P",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "updated_at":"2023-10-26T07:35:41Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've loosened the test to just ensure that the `.keys()` agree. The other test ensures that the behavior with non-serialised lambdas is equal, which I think is sufficient.",
  "created_at":"2023-10-26T09:54:03Z",
  "id":1780789914,
  "issue":2770,
  "node_id":"IC_kwDODBCWws5qJLKa",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-10-26T09:54:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2771?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2771](https://app.codecov.io/gh/scikit-hep/awkward/pull/2771?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9a5756a) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/b333fe41a89d1eb7b5c5c19fd56c374587666488?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b333fe4) will **not change** coverage.\n> Report is 1 commits behind head on main.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 9a5756a differs from pull request most recent head dfe79c9. Consider uploading reports for the commit dfe79c9 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-10-25T14:53:37Z",
  "id":1779461192,
  "issue":2771,
  "node_id":"IC_kwDODBCWws5qEGxI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-25T15:16:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I'm merging it so that we could test a build procedure from the master branch.",
  "created_at":"2023-10-26T07:55:18Z",
  "id":1780600128,
  "issue":2771,
  "node_id":"IC_kwDODBCWws5qIc1A",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-10-26T07:55:18Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It looks like this error message was added in https://github.com/apache/arrow/issues/20385, which was a response to our own issue https://github.com/apache/arrow/pull/33634\r\n\r\n@jpivarski I take this as an indication that we should pursue a solution in Awkward rather than trying to get upstream support for partial reads. What do you think? (I haven't taken too much time to read all of the discourse).",
  "created_at":"2023-10-27T10:54:59Z",
  "id":1782710657,
  "issue":2772,
  "node_id":"IC_kwDODBCWws5qQgGB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-27T10:54:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yeah, we need to do this ourselves. A good work-around will be:\r\n\r\n  * `ak.to_arrow` retains the associated ExtensionArray logic. We still need to round-trip Awkward Arrays through `pyarrow.array` and these are not storage types that will need per-column selection. Also, with `pyarrow.array`, there is no Table metadata, so ExtensionArray remains the only way to do this.\r\n  * `ak.to_arrow_table` changes in two ways: (1) it fills the table with `pyarrow.arrays` made with `extensionarray=False` and (2) it puts the Form and other Awkward information into the Table metadata.\r\n  * `ak.from_arrow` applied to `pyarrow.array` uses the existing ExtensionArray logic (it has no choice), and `ak.from_arrow` applied to Table uses the Table metadata to losslessly reconstruct the Awkward Array.\r\n  * The implementation of `ak.from_arrow` on Tables _might_ proceed by reading the non-ExtensionArray columns, constructing the ExtensionArray type, applying it to the columns, and then using the existing ExtensionArray infrastructure to ensure that the Awkward Array is properly built. Alternatively, it _might_ be an entirely different code path. On the one hand, we'd like to reuse code and treat `pyarrow.array` and `pyarrow.Table` in similar ways, but on the other hand, introducing the ExtensionArray could be more complicated than a straight conversion.\r\n  * If the implementation still goes through ExtensionArray, we may want to leave the name of the argument as `extensionarray: bool` in both `ak.to_arrow` and `ak.to_arrow_table`. If not, we might want to deprecate both or just the one in `ak.to_arrow_table` to be `lossless: bool`.",
  "created_at":"2023-10-27T15:32:24Z",
  "id":1783115515,
  "issue":2772,
  "node_id":"IC_kwDODBCWws5qSC77",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-27T15:32:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2773?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2773](https://app.codecov.io/gh/scikit-hep/awkward/pull/2773?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dfa9124) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/b333fe41a89d1eb7b5c5c19fd56c374587666488?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b333fe4) will **not change** coverage.\n> Report is 1 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-10-25T19:09:42Z",
  "id":1779889002,
  "issue":2773,
  "node_id":"IC_kwDODBCWws5qFvNq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-25T19:09:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"LGTM. Let me know if I'm OK to merge.",
  "created_at":"2023-10-26T13:50:38Z",
  "id":1781169712,
  "issue":2773,
  "node_id":"IC_kwDODBCWws5qKn4w",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-26T13:50:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Sure. :)",
  "created_at":"2023-10-26T13:51:08Z",
  "id":1781170716,
  "issue":2773,
  "node_id":"IC_kwDODBCWws5qKoIc",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-10-26T13:51:08Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2774?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2774](https://app.codecov.io/gh/scikit-hep/awkward/pull/2774?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f850ae2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/b333fe41a89d1eb7b5c5c19fd56c374587666488?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b333fe4) will **decrease** coverage by `0.01%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `50.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2774?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/shape.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2774?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvc2hhcGUucHk=) | `80.00% <50.00%> (-3.34%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-10-25T20:09:43Z",
  "id":1779979417,
  "issue":2774,
  "node_id":"IC_kwDODBCWws5qGFSZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-25T20:09:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski would benefit from your thoughts here \u2014 my suggestion is that `ak.num` should return the \"index\" type rather than `ShapeItem` type. This means we'd convert the `UnknownLength` to a `TypeTracerArray(shape=(), dtype=np.int64)`. Do you think that's appropriate? i.e. at the \"high level\", we get array objects, whilst `Content.length` is still an `unknown_length`.",
  "created_at":"2023-10-26T16:22:30Z",
  "id":1781445881,
  "issue":2774,
  "node_id":"IC_kwDODBCWws5qLrT5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-26T16:22:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Do you mean for `axis=0`? (Because for any other `axis`, the return value is an `ak.Array`.)\r\n\r\nThe return type on real data is a Python `int`, but that should probably be an `np.int64` instead:\r\n\r\n```python\r\n>>> type(ak.num(ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]]), axis=0))\r\n<class 'int'>   # should be <class 'numpy.int64'>\r\n```\r\n\r\nThen, like a scalar returned by reducers with `axis=None`, it would stay within the system of Awkward Arrays, Records, and nplike zero-dimensional arrays:\r\n\r\n```python\r\n>>> type(ak.count(ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]]), axis=None))\r\n<class 'numpy.int64'>\r\n```\r\n\r\nwhich can be important for CuPy.\r\n\r\nThat aligns exactly with what you're asking for (or, I'm just describing it in a different way):\r\n\r\n```python\r\n>>> ak.count(ak.to_backend(ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]]), \"typetracer\"), axis=None)\r\nTypeTracerArray(dtype('int64'), shape=())\r\n```",
  "created_at":"2023-10-26T21:14:55Z",
  "id":1781904572,
  "issue":2774,
  "node_id":"IC_kwDODBCWws5qNbS8",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-10-26T21:14:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed in favour of #2785",
  "created_at":"2023-10-30T11:28:40Z",
  "id":1784991099,
  "issue":2774,
  "node_id":"IC_kwDODBCWws5qZM17",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-10-30T11:28:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2775](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c88dfde) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/c310ec134ffa31f1b6945794d93d29849e7e4d8a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c310ec1) will **increase** coverage by `0.00%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.07% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.99% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.38% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.57% <\u00f8> (\u00f8)` | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2775/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-10-26T10:08:34Z",
  "id":1780813296,
  "issue":2775,
  "node_id":"IC_kwDODBCWws5qJQ3w",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-26T10:08:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"My pre-release tests in scirpy are failing with awkward 2.5.0rc0: https://github.com/scverse/scirpy/actions/runs/6722925605/job/18271885510\r\n\r\nI still need to investigate in more detail what's going on, but maybe you can hold off releasing this until then. \r\n\r\nThe offending line appears to be\r\n```python\r\nak.argsort(ak.fill_none(airr[k][idx], default), stable=True, axis=-1, ascending=False)\r\n```\r\n```pytb\r\n E           ValueError: cannot argsort an irreducible UnionArray\r\nE           \r\nE           This error occurred while calling\r\nE           \r\nE               ak.argsort(\r\nE                   <Array [['CAGGGSGTYKYIF'], ...] type='5 * var * union[string, 0 * c...'>\r\nE                   stable = True\r\nE                   axis = -1\r\nE                   ascending = False\r\nE               )\r\n\r\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/awkward/_errors.py:82: ValueError\r\n```",
  "created_at":"2023-11-01T18:11:36Z",
  "id":1789425462,
  "issue":2775,
  "node_id":"IC_kwDODBCWws5qqHc2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-01T18:13:09Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@grst that was actually introduced in our now-yanked version 2.4.7. This PR (https://github.com/scikit-hep/awkward/pull/2793) should fix it. Thanks for testing our pre release!",
  "created_at":"2023-11-01T22:34:48Z",
  "id":1789783051,
  "issue":2775,
  "node_id":"IC_kwDODBCWws5qrewL",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-11-01T22:34:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2777?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2777](https://app.codecov.io/gh/scikit-hep/awkward/pull/2777?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (47c3b49) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e8072ce06e1cb869f0914fa01df778fa10e6b4e0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e8072ce) will **increase** coverage by `0.01%`.\n> Report is 3 commits behind head on main.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2777?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/arrayview.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2777?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.73% <\u00f8> (+0.36%)` | :arrow_up: |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2777?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `85.14% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2777?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.29% <\u00f8> (\u00f8)` | |\n\n... and [3 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2777/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-10-26T15:27:07Z",
  "id":1781353152,
  "issue":2777,
  "node_id":"IC_kwDODBCWws5qLUrA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-26T23:16:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2779?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2779](https://app.codecov.io/gh/scikit-hep/awkward/pull/2779?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (62baa96) into [v2.5.0-rc-feature](https://app.codecov.io/gh/scikit-hep/awkward/commit/4ed2397a0ed3ea91f7c8d4fc217adab4915e25cd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4ed2397) will **increase** coverage by `0.04%`.\n> Report is 17 commits behind head on v2.5.0-rc-feature.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 62baa96 differs from pull request most recent head fb1e82d. Consider uploading reports for the commit fb1e82d to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2779?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2779?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_categories.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2779?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXRlZ29yaWVzLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2779?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2NhdGVnb3JpY2FsLnB5) | `95.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_is\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2779?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc19jYXRlZ29yaWNhbC5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n\n... and [65 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2779/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-10-27T10:16:34Z",
  "id":1782662216,
  "issue":2779,
  "node_id":"IC_kwDODBCWws5qQURI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-05T15:01:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2781?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2781](https://app.codecov.io/gh/scikit-hep/awkward/pull/2781?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dcb1c50) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/3f623eecbc93c98f2ef0b419c6831483afb12a91?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3f623ee) will **decrease** coverage by `0.03%`.\n> The diff coverage is `66.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2781?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2781?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `87.29% <87.50%> (-0.21%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2781?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `75.95% <57.89%> (-0.64%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-10-27T15:18:19Z",
  "id":1783092575,
  "issue":2781,
  "node_id":"IC_kwDODBCWws5qR9Vf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-27T15:18:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm closing this, because I first want to ensure that the CI fails in `main`.",
  "created_at":"2023-10-28T09:06:14Z",
  "id":1783754570,
  "issue":2781,
  "node_id":"IC_kwDODBCWws5qUe9K",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-28T09:06:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"A single (non-rectangular) Awkward Array could be encoded in Zarr by breaking it down into buffers, saving those as one-dimensional arrays in Zarr, and then reconstituting it from Zarr. Earlier discussions with the Zarr team were about defining a _standard_ way to do that, so that the Zarr object would declare itself to be an Awkward Array, because the intermediate buffers are not meaningful by themselves.\r\n\r\n[This documentation](https://awkward-array.org/doc/main/user-guide/how-to-convert-buffers.html) describes the process of breaking an Awkward Array into buffers and reconstituting it, with an example of saving it to HDF5. HDF5 has the same problem\u2014if someone opens the HDF5 file of raw buffers without knowing that it's supposed to be interpreted as an Awkward Array, they wouldn't necessarily be able to make sense of its contents. (That's why we don't have a _standard_ way to save to HDF5.)\r\n\r\nI haven't been following Zarr developments recently. Is it looking like a version 3 extension could mark a collection of differently sized, differently partitioned buffers as a higher-level object that should be interpreted by the Awkward library?\r\n\r\nAlternatively, do you need this for your own purposes, such that the encoding does not need to be standardized? (That could be done by just following the above-linked documentation, replacing Zarr for HDF5, and wouldn't need anything to be contributed centrally.)",
  "created_at":"2023-10-27T19:06:10Z",
  "id":1783380528,
  "issue":2782,
  "node_id":"IC_kwDODBCWws5qTDow",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-27T19:06:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Yeah I just needed this for my own purposes, so it didn't need to be standardized. I'll go ahead give your suggestion a shot, thank you!",
  "created_at":"2023-10-30T17:01:36Z",
  "id":1785670715,
  "issue":2782,
  "node_id":"IC_kwDODBCWws5qbyw7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-30T17:01:36Z",
  "user":"MDQ6VXNlcjg5MDkzMTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2783?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2783](https://app.codecov.io/gh/scikit-hep/awkward/pull/2783?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (14aebfd) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/3f623eecbc93c98f2ef0b419c6831483afb12a91?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3f623ee) will **decrease** coverage by `0.08%`.\n> The diff coverage is `57.53%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2783?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/numpylike.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2783?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlsaWtlLnB5) | `73.72% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_nplikes/cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2783?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `36.78% <33.33%> (-0.43%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2783?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `84.15% <66.66%> (-3.35%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2783?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `75.33% <50.00%> (-1.26%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-10-28T09:06:26Z",
  "id":1783754614,
  "issue":2783,
  "node_id":"IC_kwDODBCWws5qUe92",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-30T11:10:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"414f69a should break the CI, such that 6c708c6 fixes it!",
  "created_at":"2023-10-28T09:06:46Z",
  "id":1783754671,
  "issue":2783,
  "node_id":"IC_kwDODBCWws5qUe-v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-28T12:27:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm wondering why [this test](https://github.com/scikit-hep/awkward/blob/3f623eecbc93c98f2ef0b419c6831483afb12a91/.github/workflows/test.yml#L202-L204) didn't catch it. [Here](https://github.com/scikit-hep/awkward/actions/runs/6692365704/job/18181406683) is an example of the last time it ran.",
  "created_at":"2023-10-30T13:23:15Z",
  "id":1785189476,
  "issue":2784,
  "node_id":"IC_kwDODBCWws5qZ9Rk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-30T13:23:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"See #2783!",
  "created_at":"2023-10-30T13:23:53Z",
  "id":1785190651,
  "issue":2784,
  "node_id":"IC_kwDODBCWws5qZ9j7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-30T13:23:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yikes; okay.",
  "created_at":"2023-10-30T13:25:03Z",
  "id":1785192847,
  "issue":2784,
  "node_id":"IC_kwDODBCWws5qZ-GP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-30T13:25:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2785?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2785](https://app.codecov.io/gh/scikit-hep/awkward/pull/2785?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b8ace29) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/23f5322fbcfef23fc574abd2390a9174793a2b10?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (23f5322) will **increase** coverage by `0.00%`.\n> The diff coverage is `66.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2785?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_num.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2785?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19udW0ucHk=) | `93.75% <66.66%> (+0.20%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-10-30T11:23:08Z",
  "id":1784982693,
  "issue":2785,
  "node_id":"IC_kwDODBCWws5qZKyl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-01T12:13:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski to confirm \u2014 forcibly returning `ArrayLike` values from `ak.num` means that it's not possible to use `ak.num` to return concrete lengths for typetracers with known shapes. I assume you're OK with that, but I want to surface before we merge.",
  "created_at":"2023-10-31T12:38:57Z",
  "id":1787140234,
  "issue":2785,
  "node_id":"IC_kwDODBCWws5qhZiK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-31T12:38:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski to confirm \u2014 forcibly returning `ArrayLike` values from `ak.num` means that it's not possible to use `ak.num` to return concrete lengths for typetracers with known shapes. I assume you're OK with that, but I want to surface before we merge.\r\n\r\nI don't see anything wrong with that\u2014internally in the codebase, we should be using `.length` and users have `len` if they want to make a distinction between getting the length eagerly at DAG-building time (if the TypeTracer has a known shape) and getting the length as delayed data until it's taken up by a Dask worker.\r\n\r\nIn fact, if I had to make that distinction, I would expect the Awkward function to give me delayed data and the Python function to give me eager data, because Awkward knows about Dask and Python doesn't.\r\n\r\nI guess we're losing a case of \"give me the eager, numerical length if you have it and a delayed token if you don't.\" But if I wanted that case, I wouldn't have guessed that `ak.num` would provide it (and it would be a tricky thing to explain in the documentation\u2014likely undiscoverable, anyway). If I needed this case, I'd write a `try`-`except` around `len`.",
  "created_at":"2023-10-31T14:19:05Z",
  "id":1787313380,
  "issue":2785,
  "node_id":"IC_kwDODBCWws5qiDzk",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-10-31T14:19:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We do not need to worry about security advisories on NumPy; we're not building an application here.",
  "created_at":"2023-10-30T13:31:51Z",
  "id":1785207032,
  "issue":2786,
  "node_id":"IC_kwDODBCWws5qaBj4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-30T13:31:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
  "created_at":"2023-10-30T13:31:53Z",
  "id":1785207124,
  "issue":2786,
  "node_id":"IC_kwDODBCWws5qaBlU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-30T13:31:53Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"MEMBER",
  "body":"I agree. I just got those notifications, too. Some of our users are in secure environments (GRID deployments, Analysis Systems) and can safely ignore these NumPy security issues. I hope they get the same warnings we do, though.",
  "created_at":"2023-10-30T13:44:36Z",
  "id":1785233503,
  "issue":2786,
  "node_id":"IC_kwDODBCWws5qaIBf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-30T13:44:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Duplicate of #2468! :)",
  "created_at":"2023-10-31T13:43:42Z",
  "id":1787248239,
  "issue":2788,
  "node_id":"IC_kwDODBCWws5qhz5v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-31T13:43:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Ok! I thought about opening a new one, since there was not mention to Pint in #2468.",
  "created_at":"2023-10-31T13:46:22Z",
  "id":1787252958,
  "issue":2788,
  "node_id":"IC_kwDODBCWws5qh1De",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-31T13:46:22Z",
  "user":"MDQ6VXNlcjIwMzU4MTky"
 },
 {
  "author_association":"MEMBER",
  "body":"That was probably in private conversations, then: we're thinking of using a Pint UnitRegistry as a source of truth about units and their relationships, but some of the handling would have to be manual. (For example, we have to implement reducers ourselves. If an array has units, `ak.sum` would preserve those units but `ak.prod` shouldn't even be possible. `ak.any` and `ak.all` would drop the units when converting numbers into booleans...)\r\n\r\nThus, we're recognizing Pint as the standard way to express units, to the exclusion of any other libraries that might do the same thing, and we'll try to reuse code in Pint as much as possible (e.g. in unit conflicts, which of the two should be converted to the other, and what do we multiply by to get that conversion?), but there will be limits and some things will need to be computed by hand in Awkward.",
  "created_at":"2023-10-31T14:25:07Z",
  "id":1787324956,
  "issue":2788,
  "node_id":"IC_kwDODBCWws5qiGoc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-31T14:25:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Sounds great! Thanks a lot for elaborating. Looking forward to it!",
  "created_at":"2023-10-31T14:45:32Z",
  "id":1787365551,
  "issue":2788,
  "node_id":"IC_kwDODBCWws5qiQiv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-10-31T14:45:32Z",
  "user":"MDQ6VXNlcjIwMzU4MTky"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2789](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (65fc760) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/c31611497509484a93edaf30faa226206a28245b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c316114) will **decrease** coverage by `0.05%`.\n> The diff coverage is `75.62%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends/backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2JhY2tlbmQucHk=) | `88.09% <100.00%> (+0.59%)` | :arrow_up: |\n| [src/awkward/\\_backends/cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2N1cHkucHk=) | `66.66% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_backends/dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2Rpc3BhdGNoLnB5) | `92.85% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_backends/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2pheC5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_backends/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL251bXB5LnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_backends/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL3R5cGV0cmFjZXIucHk=) | `78.12% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_kernels.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2tlcm5lbHMucHk=) | `66.95% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvZGlzcGF0Y2gucHk=) | `96.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `94.44% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_typing.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGluZy5weQ==) | `92.85% <100.00%> (\u00f8)` | |\n| ... and [23 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2789?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-11-01T11:25:14Z",
  "id":1788797817,
  "issue":2789,
  "node_id":"IC_kwDODBCWws5qnuN5",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-01T11:36:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"[65fc760](https://github.com/scikit-hep/awkward/pull/2789/commits/65fc760b2529b4a5749041c2d9d0e45628010158) fixes an existing bug, but a new assertion caught it.",
  "created_at":"2023-11-01T11:31:59Z",
  "id":1788805252,
  "issue":2789,
  "node_id":"IC_kwDODBCWws5qnwCE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-01T11:31:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2790](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7a6bf6b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/23f5322fbcfef23fc574abd2390a9174793a2b10?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (23f5322) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `95.43% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.29% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mask.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXNrLnB5) | `96.29% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_where.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `90.74% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_with\\_field.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX2ZpZWxkLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_zip.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha196aXAucHk=) | `95.65% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/str/akstr\\_join.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfam9pbi5weQ==) | `92.85% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/str/akstr\\_repeat.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2790?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfcmVwZWF0LnB5) | `82.50% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-11-01T12:03:50Z",
  "id":1788840651,
  "issue":2790,
  "node_id":"IC_kwDODBCWws5qn4rL",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-01T12:03:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2791](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7deecb1) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/9dc10a03aea815edfcf9c5dc4278cc9a41a02fd4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9dc10a0) will **increase** coverage by `0.00%`.\n> The diff coverage is `96.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_parameters.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BhcmFtZXRlcnMucHk=) | `82.22% <\u00f8> (\u00f8)` | |\n| [src/awkward/types/arraytype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvYXJyYXl0eXBlLnB5) | `94.73% <100.00%> (+0.45%)` | :arrow_up: |\n| [src/awkward/types/listtype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbGlzdHR5cGUucHk=) | `95.83% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/types/numpytype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvbnVtcHl0eXBlLnB5) | `94.73% <100.00%> (+0.05%)` | :arrow_up: |\n| [src/awkward/types/optiontype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvb3B0aW9udHlwZS5weQ==) | `81.81% <100.00%> (+0.33%)` | :arrow_up: |\n| [src/awkward/types/regulartype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvcmVndWxhcnR5cGUucHk=) | `96.42% <100.00%> (+0.06%)` | :arrow_up: |\n| [src/awkward/types/scalartype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvc2NhbGFydHlwZS5weQ==) | `82.75% <100.00%> (+1.98%)` | :arrow_up: |\n| [src/awkward/types/uniontype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5pb250eXBlLnB5) | `85.96% <100.00%> (+0.25%)` | :arrow_up: |\n| [src/awkward/types/unknowntype.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdW5rbm93bnR5cGUucHk=) | `84.61% <100.00%> (+0.61%)` | :arrow_up: |\n| [src/awkward/types/type.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvdHlwZS5weQ==) | `94.81% <94.11%> (+0.04%)` | :arrow_up: |\n| ... and [1 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2791?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-11-01T20:49:10Z",
  "id":1789660199,
  "issue":2791,
  "node_id":"IC_kwDODBCWws5qrAwn",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-01T20:49:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2792?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2792](https://app.codecov.io/gh/scikit-hep/awkward/pull/2792?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fb492c2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/2fbaa2c273dc148427ad95cdb6f3f618e24d2878?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2fbaa2c) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2792?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/str/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2792?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvX19pbml0X18ucHk=) | `100.00% <100.00%> (+0.88%)` | :arrow_up: |\n| [src/awkward/operations/str/akstr\\_index\\_in.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2792?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfaW5kZXhfaW4ucHk=) | `97.14% <100.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/operations/str/akstr\\_is\\_in.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2792?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9zdHIvYWtzdHJfaXNfaW4ucHk=) | `97.14% <100.00%> (-0.08%)` | :arrow_down: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2792/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-11-01T17:55:34Z",
  "id":1789402790,
  "issue":2792,
  "node_id":"IC_kwDODBCWws5qqB6m",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-01T20:04:58Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2793?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2793](https://app.codecov.io/gh/scikit-hep/awkward/pull/2793?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1cd13d9) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4ed2397a0ed3ea91f7c8d4fc217adab4915e25cd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4ed2397) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2793?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_fill\\_none.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2793?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `97.72% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-11-01T22:39:17Z",
  "id":1789786674,
  "issue":2793,
  "node_id":"IC_kwDODBCWws5qrfoy",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-03T15:04:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2794?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2794](https://app.codecov.io/gh/scikit-hep/awkward/pull/2794?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (26ee0ac) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/c5722954ec2a1a12477beba6286aac60299869c9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c572295) will **decrease** coverage by `0.12%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `33.33%`.\n\n> :exclamation: Current head 26ee0ac differs from pull request most recent head 23f6d71. Consider uploading reports for the commit 23f6d71 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2794?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2794?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_with\\_field\\_attr.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2794?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX2ZpZWxkX2F0dHIucHk=) | `34.37% <34.37%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_field\\_attrs.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2794?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWVsZF9hdHRycy5weQ==) | `28.12% <28.12%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-11-02T23:21:00Z",
  "id":1791694508,
  "issue":2794,
  "node_id":"IC_kwDODBCWws5qyxas",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-03T14:04:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"What's the proposed mechanism here for transient attrs? Or will that come later?",
  "created_at":"2023-11-08T16:26:04Z",
  "id":1802238320,
  "issue":2794,
  "node_id":"IC_kwDODBCWws5ra_lw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-08T16:26:04Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Oh somehow I clicked the wrong PR :-) never mind.",
  "created_at":"2023-11-08T16:26:48Z",
  "id":1802239609,
  "issue":2794,
  "node_id":"IC_kwDODBCWws5ra_55",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-08T16:26:48Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I never loved this API. Let's close this until something firmer comes along.",
  "created_at":"2023-12-19T21:41:26Z",
  "id":1863511367,
  "issue":2794,
  "node_id":"IC_kwDODBCWws5vEu1H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-19T21:41:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2795](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8049b9f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/c5722954ec2a1a12477beba6286aac60299869c9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c572295) will **increase** coverage by `0.01%`.\n> The diff coverage is `87.21%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends/backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2JhY2tlbmQucHk=) | `88.09% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_backends/cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2N1cHkucHk=) | `66.66% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_backends/dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2Rpc3BhdGNoLnB5) | `92.85% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_backends/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2pheC5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_backends/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL251bXB5LnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_backends/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL3R5cGV0cmFjZXIucHk=) | `78.12% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `95.43% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2NhdGVnb3JpY2FsLnB5) | `58.62% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `25.71% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/reducers.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3JlZHVjZXJzLnB5) | `86.20% <100.00%> (\u00f8)` | |\n| ... and [143 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2795?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-11-03T13:38:11Z",
  "id":1792453452,
  "issue":2795,
  "node_id":"IC_kwDODBCWws5q1qtM",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-03T13:44:22Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is really just typing, so we should be safe to merge.",
  "created_at":"2023-11-03T14:04:11Z",
  "id":1792496522,
  "issue":2795,
  "node_id":"IC_kwDODBCWws5q11OK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-03T14:04:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2796?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2796](https://app.codecov.io/gh/scikit-hep/awkward/pull/2796?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (974ed44) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4ed2397a0ed3ea91f7c8d4fc217adab4915e25cd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4ed2397) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-03T17:32:01Z",
  "id":1792858582,
  "issue":2796,
  "node_id":"IC_kwDODBCWws5q3NnW",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-03T17:32:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2798](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (49d3dd0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4609b582fbab1cfac52b07d3ac6538772e658931?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4609b58) will **decrease** coverage by `0.06%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 49d3dd0 differs from pull request most recent head be3cbe0. Consider uploading reports for the commit be3cbe0 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.57% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.10% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.04% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.52% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.40% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.80% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.59% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_categories.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXRlZ29yaWVzLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2NhdGVnb3JpY2FsLnB5) | `95.23% <\u00f8> (\u00f8)` | |\n| ... and [1 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [4 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2798/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-11-05T15:08:44Z",
  "id":1793763585,
  "issue":2798,
  "node_id":"IC_kwDODBCWws5q6qkB",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-06T17:24:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2799?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2799](https://app.codecov.io/gh/scikit-hep/awkward/pull/2799?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3092be6) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/40ca1b2a097ddbb24838f6a3969af247f0954fc2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (40ca1b2) will **increase** coverage by `0.01%`.\n> The diff coverage is `66.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2799?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2799?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `86.02% <95.00%> (+1.95%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2799?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.94% <51.35%> (+0.02%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-11-06T10:11:39Z",
  "id":1794485113,
  "issue":2799,
  "node_id":"IC_kwDODBCWws5q9at5",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-06T16:12:40Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hmm, test fails on Windows. Let me perhaps choose some different types to avoid the 32-bit aspect to this. I'll use a typed `np.generic` scalar ~`np.int16`",
  "created_at":"2023-11-06T10:32:56Z",
  "id":1794520054,
  "issue":2799,
  "node_id":"IC_kwDODBCWws5q9jP2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-06T10:32:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2801](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6f3678c) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/bd4cb8db2826f32f8b6e4648142a5e85f5e4d252?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bd4cb8d) will **increase** coverage by `0.14%`.\n> The diff coverage is `85.71%`.\n\n> :exclamation: Current head 6f3678c differs from pull request most recent head 6c694f7. Consider uploading reports for the commit 6c694f7 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.05% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/\\_backends/backend.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2JhY2tlbmQucHk=) | `88.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_backends/cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2N1cHkucHk=) | `66.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_backends/dispatch.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2Rpc3BhdGNoLnB5) | `92.85% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_backends/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL2pheC5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_backends/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL251bXB5LnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_backends/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzL3R5cGV0cmFjZXIucHk=) | `78.12% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_behavior.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JlaGF2aW9yLnB5) | `86.91% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `95.43% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_categorical.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2NhdGVnb3JpY2FsLnB5) | `60.00% <100.00%> (+1.37%)` | :arrow_up: |\n| ... and [48 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [212 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2801/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-11-06T17:05:47Z",
  "id":1795511636,
  "issue":2801,
  "node_id":"IC_kwDODBCWws5rBVVU",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-07T09:44:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii have you come across a mechanism for scoping `isort.required-imports` to particular files?",
  "created_at":"2023-11-06T17:07:33Z",
  "id":1795515327,
  "issue":2801,
  "node_id":"IC_kwDODBCWws5rBWO_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-06T17:07:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"You can disable I101 for subsets of files. Sadly, that drops everything, not just the isort addition. There will be a way to do it with PEP 723 if that gets implemented per file. You can also put a `.ruff.toml` in a subdirectory, I think.",
  "created_at":"2023-11-06T17:50:16Z",
  "id":1795714368,
  "issue":2801,
  "node_id":"IC_kwDODBCWws5rCG1A",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-11-06T17:50:16Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Although I'm loathed to touch the C++ again, we really want to avoid these things living for a long time. As such, I'm just going to merge! Thanks all!",
  "created_at":"2023-11-07T09:45:11Z",
  "id":1798149389,
  "issue":2801,
  "node_id":"IC_kwDODBCWws5rLZUN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-07T09:45:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2802?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2802](https://app.codecov.io/gh/scikit-hep/awkward/pull/2802?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (90c4c9f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/4609b582fbab1cfac52b07d3ac6538772e658931?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4609b58) will **not change** coverage.\n> Report is 1 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-06T19:43:15Z",
  "id":1796186111,
  "issue":2802,
  "node_id":"IC_kwDODBCWws5rD5__",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-06T19:43:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2803?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2803](https://app.codecov.io/gh/scikit-hep/awkward/pull/2803?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3c72134) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/015a362026d3ae68b1d3f4ffd19307dc41354bc7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (015a362) will **increase** coverage by `0.12%`.\n> The diff coverage is `93.33%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2803?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2803?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `77.40% <66.66%> (+0.71%)` | :arrow_up: |\n| [src/awkward/\\_prettyprint.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2803?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3ByZXR0eXByaW50LnB5) | `85.57% <95.49%> (+12.39%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-11-07T17:05:40Z",
  "id":1799250510,
  "issue":2803,
  "node_id":"IC_kwDODBCWws5rPmJO",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-07T17:25:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I'm glad this is opt-in, so the default precision is still 3 digits\r\n\r\n@jpivarski note that the default precision for complex numbers will increase after this PR: https://github.com/scikit-hep/awkward/pull/2803/files#diff-9d47b8746eed8b0f77589c076ef5be2891fec7d0acd9d41f04dac9cc9bbb1076L227\r\n\r\nAre you OK with that change? I'm thinking it's fine; few people are likely using complex numbers, and fewer still should be relying on the string representation. Ideally we'd gracefully handle this but I don't think it's worth the added complexity.\r\n",
  "created_at":"2023-11-07T21:36:27Z",
  "id":1800200112,
  "issue":2803,
  "node_id":"IC_kwDODBCWws5rTN-w",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-07T21:36:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I had checked out the code and had tested it with a floating point value, so I missed the fact that the complex precision used to be 2 digits\r\n\r\n```python\r\n>>> ak.Array([np.pi + np.pi*1j]).show()\r\n[3.1+3.1j]\r\n```\r\n\r\nbut will now be 3 digits\r\n\r\n```python\r\n>>> ak.Array([np.pi + np.pi*1j]).show()\r\n[3.14+3.14j]\r\n```\r\n\r\nThe rationale for shorter complex numbers must have been because they use up so much space anyway, with two values, a `+` and a `j`. But I don't think this is worse. (Also, no, nobody should be relying on the text representation of numbers. We should be allowed to change that.)\r\n\r\nThe `limit_cols` argument gets more important, once one starts expanding the numeric representations.\r\n\r\nThis PR can be merged.",
  "created_at":"2023-11-07T21:43:02Z",
  "id":1800220912,
  "issue":2803,
  "node_id":"IC_kwDODBCWws5rTTDw",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-11-07T21:43:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2804](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3dc2f99) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/015a362026d3ae68b1d3f4ffd19307dc41354bc7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (015a362) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.57% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.10% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `76.89% <100.00%> (+0.64%)` | :arrow_up: |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.24% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.04% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.52% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.40% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.80% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.23% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.58% <100.00%> (\u00f8)` | |\n| ... and [3 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2804?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-11-07T17:42:16Z",
  "id":1799320317,
  "issue":2804,
  "node_id":"IC_kwDODBCWws5rP3L9",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-07T17:42:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2805](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ff3ef68) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/aafd2b4bc05ab8109114b6a702d2601b3e6a9cfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (aafd2b4) will **decrease** coverage by `0.01%`.\n> The diff coverage is `96.61%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_do.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.43% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.57% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.10% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.24% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.04% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.52% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `88.40% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.80% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.23% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.58% <100.00%> (\u00f8)` | |\n| ... and [73 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2805?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-11-07T17:52:17Z",
  "id":1799341220,
  "issue":2805,
  "node_id":"IC_kwDODBCWws5rP8Sk",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-07T19:12:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Actually, why are these changes only in ak.operations.str.*? We use recursively_apply in a lot of places, not just here. Why don't they all have behavior=behavior push-downs to remove? Was this never really a part of the recursively_apply interface and their use in string functions was a mistake?\r\n\r\nI was originally going to just start with `ak.str`, and follow up, as this PR was cherry-picked from another. However, let's just do it all together.",
  "created_at":"2023-11-07T19:01:55Z",
  "id":1799587456,
  "issue":2805,
  "node_id":"IC_kwDODBCWws5rQ4aA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-07T19:01:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"As this is a deprecation PR, we've already agreed upon it's contents, so I'm happy to merge without Jim's input.",
  "created_at":"2023-11-08T22:17:11Z",
  "id":1802767879,
  "issue":2807,
  "node_id":"IC_kwDODBCWws5rdA4H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-08T22:17:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2807?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2807](https://app.codecov.io/gh/scikit-hep/awkward/pull/2807?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dc35375) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/ec261c252a6877352f27503fd19d4f62af4b08d3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ec261c2) will **increase** coverage by `0.00%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `33.33%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2807?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2807?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXRyYWNlci5weQ==) | `89.65% <100.00%> (+0.76%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2807?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.91% <0.00%> (+0.08%)` | :arrow_up: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2807/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-11-08T22:26:27Z",
  "id":1802778251,
  "issue":2807,
  "node_id":"IC_kwDODBCWws5rdDaL",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-10T23:10:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for the bug report! This is indeed a bug in Awkward. Let me take a look.",
  "created_at":"2023-11-08T22:22:41Z",
  "id":1802774163,
  "issue":2808,
  "node_id":"IC_kwDODBCWws5rdCaT",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-11-08T22:22:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #2810 ",
  "created_at":"2023-11-09T13:38:38Z",
  "id":1803849807,
  "issue":2808,
  "node_id":"IC_kwDODBCWws5rhJBP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-09T13:38:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Thank you for such a quick fix!",
  "created_at":"2023-11-09T19:47:04Z",
  "id":1804534121,
  "issue":2808,
  "node_id":"IC_kwDODBCWws5rjwFp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-09T19:47:04Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Also, note that you can invoke numpy reducers directly on an awkward array, e.g. count_nonzero",
  "created_at":"2023-11-09T23:29:17Z",
  "id":1804840107,
  "issue":2808,
  "node_id":"IC_kwDODBCWws5rk6yr",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-11-09T23:29:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2809?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2809](https://app.codecov.io/gh/scikit-hep/awkward/pull/2809?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6914337) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/ec261c252a6877352f27503fd19d4f62af4b08d3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ec261c2) will **increase** coverage by `0.00%`.\n> The diff coverage is `94.11%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `86.37% <100.00%> (+0.35%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/numpy\\_like.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlfbGlrZS5weQ==) | `75.29% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.91% <87.50%> (+0.08%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-11-08T22:40:25Z",
  "id":1802793044,
  "issue":2809,
  "node_id":"IC_kwDODBCWws5rdHBU",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-08T22:55:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2812?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2812](https://app.codecov.io/gh/scikit-hep/awkward/pull/2812?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f080b50) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/9d874a050db59e691cd47e9bd1ad0cea751808ee?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9d874a0) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-09T23:09:18Z",
  "id":1804823955,
  "issue":2812,
  "node_id":"IC_kwDODBCWws5rk22T",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-09T23:09:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @dependabot, but we want to keep this as a lower bound. Beep beep, boop.",
  "created_at":"2023-11-10T10:56:37Z",
  "id":1805510351,
  "issue":2812,
  "node_id":"IC_kwDODBCWws5rnebP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-10T10:56:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
  "created_at":"2023-11-10T10:56:40Z",
  "id":1805510409,
  "issue":2812,
  "node_id":"IC_kwDODBCWws5rnecJ",
  "performed_via_github_app":"MDM6QXBwMjkxMTA=",
  "reactions":{},
  "updated_at":"2023-11-10T10:56:40Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2813?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2813](https://app.codecov.io/gh/scikit-hep/awkward/pull/2813?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (05ee4a2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/9d874a050db59e691cd47e9bd1ad0cea751808ee?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9d874a0) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-10T12:02:22Z",
  "id":1805618677,
  "issue":2813,
  "node_id":"IC_kwDODBCWws5rn431",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-10T23:08:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this PR fails on Windows. The error message in the CI indicates that the copy-assignment constructor for `GrowableBuffer` is being called by `std::vector`, but this constructor is implicitly deleted if one defines a move-assignment constructor. \r\n\r\nI'm not sure why it's suddenly an issue. It's possible that the CI toolchain bumped MSVC at the same time that I wrote this PR, but I doubt it; in this PR I also added an EXPORT_SYMBOL for the `FromJsonObjectSchema` class, which has `std::vector<GrowableBuffer<T>>` members. That seems like causative.\r\n\r\nThis raises the following questions for me:\r\n1. Why does GCC not complain if MSVC does?\r\n2. Why does the standard not imply that the `V` in `std::vector<V>` needs to be copy-assignable (and copy-constructible?)? It used to in C++11, but _seems_ to relax the rule for C++17+ (see \"Template parameters\" in https://en.cppreference.com/w/cpp/container/vector).\r\n3. Is it reasonable to add a copy-assignment constructor to `GrowableBuffer`? It seems to me like we really don't want that.\r\n\r\nI'll keep digging.",
  "created_at":"2023-11-10T22:21:11Z",
  "id":1806513066,
  "issue":2813,
  "node_id":"IC_kwDODBCWws5rrTOq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-10T22:21:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Well, that (05ee4a2) worked! I'm not entirely clear on why this became an error once I exported this class, but it seems that the emission of the default copy-assignment constructor leads to the attempted copy-assignment of the `GrowableBuffer`. \r\n\r\nClearly, we don't want that, so [05ee4a2](https://github.com/scikit-hep/awkward/pull/2813/commits/05ee4a25151a224074e5335db4b2094475b06b47) deletes the top-level copy-assignment (rather than implementing it)",
  "created_at":"2023-11-10T22:56:55Z",
  "id":1806537476,
  "issue":2813,
  "node_id":"IC_kwDODBCWws5rrZME",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-10T22:56:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2815?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2815](https://app.codecov.io/gh/scikit-hep/awkward/pull/2815?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b70447d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/ad04fc7140ad556519ed072432f5250a36a48070?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ad04fc7) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2815?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_firsts.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2815?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maXJzdHMucHk=) | `94.44% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-11-11T11:47:49Z",
  "id":1806794926,
  "issue":2815,
  "node_id":"IC_kwDODBCWws5rsYCu",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-11T11:47:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> `axis=0` is a case I hadn't thought about, but I guess you're right that it should return a scalar (`np.int64`).\r\n\r\nYou and me both!",
  "created_at":"2023-11-13T16:12:17Z",
  "id":1808474269,
  "issue":2815,
  "node_id":"IC_kwDODBCWws5ryyCd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-13T16:12:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2816?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2816](https://app.codecov.io/gh/scikit-hep/awkward/pull/2816?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2aa118c) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/cac93481d17d54616dd0e8e5edb7bf69fa57adec?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cac9348) will **increase** coverage by `0.00%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `85.71%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2816?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2816?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXRyYWNlci5weQ==) | `89.06% <85.71%> (-0.60%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-11-14T10:51:32Z",
  "id":1809975450,
  "issue":2816,
  "node_id":"IC_kwDODBCWws5r4gia",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-14T10:51:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2817?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2817](https://app.codecov.io/gh/scikit-hep/awkward/pull/2817?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8641bf0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/cac93481d17d54616dd0e8e5edb7bf69fa57adec?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cac9348) will **not change** coverage.\n> Report is 1 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-14T10:43:14Z",
  "id":1809960721,
  "issue":2817,
  "node_id":"IC_kwDODBCWws5r4c8R",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-14T10:43:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2818?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2818](https://app.codecov.io/gh/scikit-hep/awkward/pull/2818?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (85686a3) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/432d49b8d304538b5181f3fa20016102bc2c909f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (432d49b) will **decrease** coverage by `0.35%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2818?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/julia/utils.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2818?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvanVsaWEvdXRpbHMucHk=) | `0.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-11-14T11:03:13Z",
  "id":1809993557,
  "issue":2818,
  "node_id":"IC_kwDODBCWws5r4k9V",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-08T09:50:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna is this waiting on me? :)",
  "created_at":"2023-11-21T13:01:05Z",
  "id":1820883233,
  "issue":2818,
  "node_id":"IC_kwDODBCWws5siHkh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-21T13:01:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna is this waiting on me? :)\r\n\r\nNo. Thanks for asking.\r\n\r\nWhen AwkwardArray.jl is released and registered I'll update this PR with a more Julia-like recipe:\r\n```python\r\nfrom julia import Pkg\r\nPkg.add(\"AwkwardArray\")\r\n```",
  "created_at":"2023-11-21T16:05:38Z",
  "id":1821214810,
  "issue":2818,
  "node_id":"IC_kwDODBCWws5sjYha",
  "performed_via_github_app":null,
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "updated_at":"2023-11-21T16:05:38Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"closing it in favour of #2896 ",
  "created_at":"2023-12-13T13:41:19Z",
  "id":1853940378,
  "issue":2818,
  "node_id":"IC_kwDODBCWws5ugOKa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-13T13:41:19Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2819?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2819](https://app.codecov.io/gh/scikit-hep/awkward/pull/2819?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c37454a) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e3e48744d5a0ef09068996c1c590ca9bcb25492d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e3e4874) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-15T10:35:45Z",
  "id":1812211967,
  "issue":2819,
  "node_id":"IC_kwDODBCWws5sBCj_",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-15T14:06:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I fully tested this on a private repo, but a subtle configuration difference meant that when switching to `scikit-hep/awkward` for committing the service files to this branch, the service restarted on exit. This has lead to many (now closed) issues being filed here. Sorry! I don't have the necessary privileges to delete them, apparently.",
  "created_at":"2023-11-15T14:03:10Z",
  "id":1812591999,
  "issue":2819,
  "node_id":"IC_kwDODBCWws5sCfV_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-15T14:03:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2837?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2837](https://app.codecov.io/gh/scikit-hep/awkward/pull/2837?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ee3ef8d) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/ffc1533d1cef189ae9aa38903b0101570e8f7e64?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ffc1533) will **increase** coverage by `0.02%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2837?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2837?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `92.01% <100.00%> (+0.06%)` | :arrow_up: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2837/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-11-16T21:49:41Z",
  "id":1815369012,
  "issue":2837,
  "node_id":"IC_kwDODBCWws5sNFU0",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-16T21:49:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I don't think we can / should group `Type` under `Meta`; types form a distinct group to forms and layouts.",
  "created_at":"2023-11-20T19:24:03Z",
  "id":1819666149,
  "issue":2841,
  "node_id":"IC_kwDODBCWws5sdebl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-20T19:24:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2841](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3388a16) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/6ec2b071b0a4a987682c36d2208a55169c7d8ae5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6ec2b07) will **decrease** coverage by `0.05%`.\n> The diff coverage is `91.80%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_meta/indexedmeta.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX21ldGEvaW5kZXhlZG1ldGEucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_meta/indexedoptionmeta.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX21ldGEvaW5kZXhlZG9wdGlvbm1ldGEucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_meta/listoffsetmeta.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX21ldGEvbGlzdG9mZnNldG1ldGEucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.28% <100.00%> (-0.30%)` | :arrow_down: |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.02% <100.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.95% <100.00%> (-1.90%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.12% <100.00%> (-0.13%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `78.89% <100.00%> (-0.15%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.44% <100.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.71% <100.00%> (-0.06%)` | :arrow_down: |\n| ... and [31 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2841?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-11-20T22:18:37Z",
  "id":1819895235,
  "issue":2841,
  "node_id":"IC_kwDODBCWws5seWXD",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-20T22:18:37Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2842?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2842](https://app.codecov.io/gh/scikit-hep/awkward/pull/2842?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (456eafe) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/6ec2b071b0a4a987682c36d2208a55169c7d8ae5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6ec2b07) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-20T19:29:48Z",
  "id":1819673239,
  "issue":2842,
  "node_id":"IC_kwDODBCWws5sdgKX",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-20T19:29:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2847?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2847](https://app.codecov.io/gh/scikit-hep/awkward/pull/2847?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3d9dc79) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/46b68b4666e81fa956f94c3de5e28ae6ae4eee30?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (46b68b4) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-22T17:13:29Z",
  "id":1823175717,
  "issue":2847,
  "node_id":"IC_kwDODBCWws5sq3Ql",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-28T21:44:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Looks like we need to also avoid failing if the CUDA device isn't actually available locally (or class this as a setup failure)",
  "created_at":"2023-11-28T12:52:51Z",
  "id":1829783832,
  "issue":2849,
  "node_id":"IC_kwDODBCWws5tEEkY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-28T12:52:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2850?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2850](https://app.codecov.io/gh/scikit-hep/awkward/pull/2850?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f60369c) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/bbb78224e06f48e8ac6225f0566bbd294ea6d5e9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bbb7822) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-27T20:31:02Z",
  "id":1828550088,
  "issue":2850,
  "node_id":"IC_kwDODBCWws5s_XXI",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-27T20:31:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In a previous CI runs like https://github.com/scikit-hep/awkward/actions/runs/7010054914/job/19069748258\r\n\r\n![image](https://github.com/scikit-hep/awkward/assets/383090/7bd863b9-4735-4b47-9d96-39222f035b94)\r\n\r\nafter the fix it prints the name of the tests https://github.com/zonca/awkward/actions/runs/7024250732/job/19112557365?pr=2:\r\n\r\n![image](https://github.com/scikit-hep/awkward/assets/383090/c33fa307-e952-42a7-9f37-b178f95db055)\r\n",
  "created_at":"2023-11-28T20:41:23Z",
  "id":1830700914,
  "issue":2851,
  "node_id":"IC_kwDODBCWws5tHkdy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-28T20:41:23Z",
  "user":"MDQ6VXNlcjM4MzA5MA=="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2851?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2851](https://app.codecov.io/gh/scikit-hep/awkward/pull/2851?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f9df903) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/bbb78224e06f48e8ac6225f0566bbd294ea6d5e9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bbb7822) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-28T21:05:36Z",
  "id":1830744507,
  "issue":2851,
  "node_id":"IC_kwDODBCWws5tHvG7",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-28T21:05:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Whoops! Good catch @zonca, thanks!",
  "created_at":"2023-11-29T13:46:00Z",
  "id":1831926523,
  "issue":2851,
  "node_id":"IC_kwDODBCWws5tMPr7",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-11-29T13:46:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2852](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7d62858) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/123fa0961ddad0b46680ccd8c973255ea14e8575?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (123fa09) will **increase** coverage by `0.02%`.\n> The diff coverage is `92.19%`.\n\n> :exclamation: Current head 7d62858 differs from pull request most recent head dc9645f. Consider uploading reports for the commit dc9645f to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.14% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/\\_connect/jax/trees.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3RyZWVzLnB5) | `92.30% <100.00%> (+0.09%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `92.05% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/\\_meta/emptymeta.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX21ldGEvZW1wdHltZXRhLnB5) | `94.11% <100.00%> (+0.36%)` | :arrow_up: |\n| [src/awkward/\\_meta/indexedoptionmeta.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX21ldGEvaW5kZXhlZG9wdGlvbm1ldGEucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_meta/unionmeta.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX21ldGEvdW5pb25tZXRhLnB5) | `94.11% <100.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/array\\_module.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvYXJyYXlfbW9kdWxlLnB5) | `86.28% <\u00f8> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_nplikes/numpy\\_like.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHlfbGlrZS5weQ==) | `75.49% <100.00%> (+0.19%)` | :arrow_up: |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.61% <\u00f8> (-0.06%)` | :arrow_down: |\n| [src/awkward/\\_pickle.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BpY2tsZS5weQ==) | `85.71% <100.00%> (-1.59%)` | :arrow_down: |\n| ... and [141 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2852?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-11-29T13:56:59Z",
  "id":1831944367,
  "issue":2852,
  "node_id":"IC_kwDODBCWws5tMUCv",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-04T11:03:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Meta replaces the TypeVar T in many places; I suppose that's because T used to represent a Content or a Form, which had no common superclass, and now it can all be OOP-style, rather than template-style.\r\n\r\nThe `T` was used when I was trying to preserve the idea that `ListOffsetArray.content` is a `Content`, not just a `Meta`. But this ends up needing higher kinded types, which mypy does not yet express.",
  "created_at":"2023-12-01T19:23:20Z",
  "id":1836650868,
  "issue":2852,
  "node_id":"IC_kwDODBCWws5teRF0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-01T19:23:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> On the whole, there's a lot of differences, but it seems to be just (1) moving things and (2) merging the Content and Form hierarchies. Does this PR complete the merging of those hierarchies, or is there another after this?\r\n\r\nYes, I think so. We may be able to promote some Content functions to Meta, but on balance I think its complete.",
  "created_at":"2023-12-01T19:23:58Z",
  "id":1836651826,
  "issue":2852,
  "node_id":"IC_kwDODBCWws5teRUy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-01T19:23:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is going to be hard to understand in 12 months!\r\n\r\nHere's what I remember of our conversation:\r\n\r\n* merging `X` with `X` results in `X` (naturally)\r\n* merging `categorical[X]` with `X` results in `X` (I think this is least surprise, and has the least-bad performance consequences: the second `X` could be a million distinct strings)\r\n* merging `categorical[X]` with `categorical[X]` results in `categorical[X]`, but the look-up categories have to be combined into a single look-up, without duplicates, which changes the `indexes` of at least one of the two.\r\n\r\nThe third case can be handled for the special case in which `X = string` or `X = bytestring`, but not in general, not unless the user passes some way of determining whether two instances of `X` are equal, or a way of ensuring that a set of instances of `X` has no duplicates (a new `ak.behavior`?).\r\n\r\nFor now, the third case should just go to `NotImplementedError`, so that it's a reminder that something better needs to be done there (and maybe point to this issue). In the planned future, merging-strings should eventually be implemented. The general case is in the unplanned future\u2014we'll only do it if someone encounters this need. (So there may be a `NotImplementedError` case in the code forever, and that's fine.)",
  "created_at":"2023-11-29T18:00:56Z",
  "id":1832439400,
  "issue":2853,
  "node_id":"IC_kwDODBCWws5tOM5o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-29T18:00:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @jpivarski \u2014 haven't got round to writing up my notes yet! Looks like you've saved me the challenge :)",
  "created_at":"2023-11-29T20:49:16Z",
  "id":1832678948,
  "issue":2853,
  "node_id":"IC_kwDODBCWws5tPHYk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-29T20:49:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Just to add some additional context: we discussed making support for merging categoricals be a behavior-overload. It would probably make sense for this to only be defined for `RecordArray`, meaning that awkward should implement support for merging categoricals of the various primitive types that we support.",
  "created_at":"2023-12-08T13:09:13Z",
  "id":1847142906,
  "issue":2853,
  "node_id":"IC_kwDODBCWws5uGSn6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-08T13:09:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'd be in favor of that. I've been wondering if we can eliminate the third column (table of contents for the current page) because it's irrelevant for this page. In general, the problem is that the whole JupyterLite environment is fitting within an area designed for text, but this page should be exceptional.\r\n\r\nIf you find a way to add a full-screen button, that's great! If you take another approach and make this page custom, maybe by defining a new HTML `layout` for it and having that `layout` apply only to this page somehow, that would be another way to do it. @agoose77 is the author and already-but-soon-to-be-even-more expert in JupyterBook, so he might have some suggestions and opinions.\r\n\r\nIt's valuable for the JupyterLite element to not (always) be the entire page, since a user/reader of documentation will want to navigate to other parts of the documentation.\r\n\r\nThis \"Try it!\" page differs from NumPy's (https://numpy.org/, scroll down) so that it can guide the user with an example. But that means that there's no place for generic exploration, as NumPy has. But as you can see, NumPy's has less JupyterLite decoration around the edges, at the expense of not having cells that interleave input and output.",
  "created_at":"2023-11-29T20:12:57Z",
  "id":1832633185,
  "issue":2854,
  "node_id":"IC_kwDODBCWws5tO8Nh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-29T20:12:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi @zonca, thanks for opening this PR!\r\n\r\nThere _is_ a UI option to open the JupyterLab environment:\r\n![image](https://github.com/scikit-hep/awkward/assets/1248413/72634256-12e5-465b-ac41-4b37dacc8750)\r\n\r\nOr \"zen-mode\" fullscreen:\r\n![image](https://github.com/scikit-hep/awkward/assets/1248413/3ac9a8f3-2b0f-4b04-b82d-5f4fa5a264ef)\r\n\r\n\r\nHowever, it's _not_ self-evident (I had to hunt around for this myself the other day). Another approach to making this full-screen is to use a commandlink button in the notebook that enters \"zen mode\":\r\n```html\r\n<center>\r\n<button data-commandLinker-command=\"application:toggle-zen\" href=\"#\">Go fullscreen! <i class=\"fa-solid fa-expand\"></i></button>\r\n</center>\r\n```\r\n\r\nIf you create a Markdown cell at the top of the notebook and run this, what do you think?\r\n![image](https://github.com/scikit-hep/awkward/assets/1248413/cae2693a-2228-44eb-9f8b-1f0bfeed924b)\r\n",
  "created_at":"2023-11-29T20:43:58Z",
  "id":1832672309,
  "issue":2854,
  "node_id":"IC_kwDODBCWws5tPFw1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-29T20:44:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I agree those are hard to find, I think the button at the top of the notebook is best,\r\nI'll test and mark PR ready when it looks good.",
  "created_at":"2023-11-30T03:20:49Z",
  "id":1833044871,
  "issue":2854,
  "node_id":"IC_kwDODBCWws5tQguH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-30T03:20:49Z",
  "user":"MDQ6VXNlcjM4MzA5MA=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"ok @agoose77 I named it \"Toggle\" and I removed the icon because the icon only works within sphinx, if someone downloads the notebook or does \"Open JupyterLab\", the icon breaks.\r\n\r\nhttp://preview.awkward-array.org.s3-website.us-east-1.amazonaws.com/jupyterlite_fullscreen/getting-started/try-awkward-array.html",
  "created_at":"2023-11-30T06:24:40Z",
  "id":1833178917,
  "issue":2854,
  "node_id":"IC_kwDODBCWws5tRBcl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-30T06:24:40Z",
  "user":"MDQ6VXNlcjM4MzA5MA=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I don't think we need to worry about the icon breaking if someone downloads the notebook; the notebook as-is only works in pyodide due to the use of piplite. With that in mind, could we restore the icon? I think it helps confer the purpose of the button.",
  "created_at":"2023-11-30T07:15:21Z",
  "id":1833226768,
  "issue":2854,
  "node_id":"IC_kwDODBCWws5tRNIQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-30T07:15:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @zonca! This is a useful change :)",
  "created_at":"2023-11-30T10:15:07Z",
  "id":1833466815,
  "issue":2854,
  "node_id":"IC_kwDODBCWws5tSHu_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-30T10:15:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2855?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2855](https://app.codecov.io/gh/scikit-hep/awkward/pull/2855?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (82fd42a) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/f9bd0507ecfd99d40148f0c8f0940e3008bc7045?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f9bd050) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-11-29T17:52:57Z",
  "id":1832427762,
  "issue":2855,
  "node_id":"IC_kwDODBCWws5tOKDy",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-29T17:52:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2857?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2857](https://app.codecov.io/gh/scikit-hep/awkward/pull/2857?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9a3cfa5) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/3c2940c5929a2c11296a347553fdc231b85386ac?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3c2940c) will **decrease** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2857?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_full\\_like.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2857?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `98.38% <100.00%> (+0.02%)` | :arrow_up: |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2857/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-11-29T23:50:21Z",
  "id":1832879583,
  "issue":2857,
  "node_id":"IC_kwDODBCWws5tP4Xf",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-11-29T23:50:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is simple and blocking dask-awkward CI; I'll merge.",
  "created_at":"2023-11-30T10:29:21Z",
  "id":1833488820,
  "issue":2857,
  "node_id":"IC_kwDODBCWws5tSNG0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-11-30T10:29:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2860](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6cab4b0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/123fa0961ddad0b46680ccd8c973255ea14e8575?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (123fa09) will **increase** coverage by `0.05%`.\n> The diff coverage is `77.88%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `70.81% <100.00%> (+1.53%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.75% <100.00%> (+0.73%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.81% <100.00%> (-0.28%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.86% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.18% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `87.43% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `74.60% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.78% <83.33%> (+1.06%)` | :arrow_up: |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.22% <75.00%> (-0.25%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `80.95% <82.35%> (+2.05%)` | :arrow_up: |\n| ... and [2 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2860/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-11-30T14:00:14Z",
  "id":1833837204,
  "issue":2860,
  "node_id":"IC_kwDODBCWws5tTiKU",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-05T14:19:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna is this something that you'd be the person to ping for? :)",
  "created_at":"2023-12-01T15:28:48Z",
  "id":1836308208,
  "issue":2865,
  "node_id":"IC_kwDODBCWws5tc9bw",
  "performed_via_github_app":null,
  "reactions":{
   "eyes":1,
   "total_count":1
  },
  "updated_at":"2023-12-01T15:28:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is the sort of thing that @ianna can look into, but we haven't thought about what would happen if someone tries to use Awkward Arrays in `jitclass`; we should probably figure out if they can be expected to work and confirm that they're supported or else declare them unsupported, preferably with an error message.\r\n\r\nThe symptoms sound a lot like looking at uninitialized memory\u2014to have something work with anything but 3 elements suspiciously sounds like the \"working\" cases are just lucky that nothing has overwritten that memory. If so, it's very unlikely that the \"working\" cases will continue to work on another computer or another operating system.\r\n\r\nAwkward Arrays in Numba are borrowed references\u2014the `Lookup` object on the Python side holds a reference to keep the array in memory while the Numba-compiled function runs. If it goes out of scope on the Python side and gets deleted by the Python garbage collector (or just when the reference count goes to zero), then the Numba-compiled function will be looking at memory that has been released, which _might or might not_ still have the array's data in it.\r\n\r\nUnderstanding what's happening here would involve understanding how Numba's `jitclass` holds things in memory. (Also, we should verify with the Numba team whether `jitclass` is an interface that will continue to be supported. There's another way to make class-like objects that seems more robust and I'm wondering if it's intended as a replacement. I can't remember its name and I can't find it right now. I think it started with \"Struct...\".)",
  "created_at":"2023-12-01T17:50:20Z",
  "id":1836534967,
  "issue":2865,
  "node_id":"IC_kwDODBCWws5td0y3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-01T17:50:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"> The symptoms sound a lot like looking at uninitialized memory\u2014to have something work with anything but 3 elements suspiciously sounds like the \"working\" cases are just lucky that nothing has overwritten that memory. If so, it's very unlikely that the \"working\" cases will continue to work on another computer or another operating system.\r\n> \r\n> Awkward Arrays in Numba are borrowed references\u2014the `Lookup` object on the Python side holds a reference to keep the array in memory while the Numba-compiled function runs. If it goes out of scope on the Python side and gets deleted by the Python garbage collector (or just when the reference count goes to zero), then the Numba-compiled function will be looking at memory that has been released, which _might or might not_ still have the array's data in it.\r\n\r\nI see, it would explain it !\r\n\r\n> Understanding what's happening here would involve understanding how Numba's `jitclass` holds things in memory. (Also, we should verify with the Numba team whether `jitclass` is an interface that will continue to be supported. There's another way to make class-like objects that seems more robust and I'm wondering if it's intended as a replacement. I can't remember its name and I can't find it right now. I think it started with \"Struct...\".)\r\n\r\nIn the current version of the awkward library, it's not supposed to be used with `jitclass` then \ud83d\ude05 ",
  "created_at":"2023-12-04T14:37:25Z",
  "id":1838768358,
  "issue":2865,
  "node_id":"IC_kwDODBCWws5tmWDm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-04T14:37:25Z",
  "user":"MDQ6VXNlcjMzMjUxNjc2"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2866?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2866](https://app.codecov.io/gh/scikit-hep/awkward/pull/2866?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8b3534b) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/7f6975856b1b68fffd473f8825d019e01ccbbb25?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7f69758) will **increase** coverage by `0.01%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2866?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2866?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.67% <100.00%> (+0.54%)` | :arrow_up: |\n\n</details>",
  "created_at":"2023-12-01T19:20:59Z",
  "id":1836648231,
  "issue":2866,
  "node_id":"IC_kwDODBCWws5teQcn",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-01T19:20:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Right, I can see how those were missed while you were focusing on `ak.operations.*`. Good catch!\r\n> \r\n> Ready to merge.\r\n\r\nThat's _exactly_ what happened!",
  "created_at":"2023-12-01T21:09:38Z",
  "id":1836780533,
  "issue":2866,
  "node_id":"IC_kwDODBCWws5tewv1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-01T21:09:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This should be fixed in main! ",
  "created_at":"2023-12-02T09:08:38Z",
  "id":1837096206,
  "issue":2867,
  "node_id":"IC_kwDODBCWws5tf90O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-02T09:08:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hmm, looks like something's not linking on clang 14 between _ext and libawkward.",
  "created_at":"2023-12-05T00:01:37Z",
  "id":1839769824,
  "issue":2869,
  "node_id":"IC_kwDODBCWws5tqKjg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-05T00:01:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2869?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2869](https://app.codecov.io/gh/scikit-hep/awkward/pull/2869?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c431911) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/accbce3f3416611baceef46ae3e003e6e1b52ee6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (accbce3) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-13T14:25:02Z",
  "id":1854013887,
  "issue":2869,
  "node_id":"IC_kwDODBCWws5uggG_",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-14T12:10:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski at one point it wasn't obvious to me that this would be worth doing. But, at this juncture our use of shell commands is simple enough that it works cross-platform!",
  "created_at":"2023-12-14T18:52:21Z",
  "id":1856407176,
  "issue":2869,
  "node_id":"IC_kwDODBCWws5upoaI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-14T18:52:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski as this is blocking some other PRs, are you comfortable with me merging it and then merging into https://github.com/scikit-hep/awkward/pull/2902 https://github.com/scikit-hep/awkward/pull/2880 https://github.com/scikit-hep/awkward/pull/2896 https://github.com/scikit-hep/awkward/pull/2898 https://github.com/scikit-hep/awkward/pull/2899 https://github.com/scikit-hep/awkward/pull/2902?",
  "created_at":"2023-12-19T11:10:32Z",
  "id":1862563761,
  "issue":2869,
  "node_id":"IC_kwDODBCWws5vBHex",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-19T11:10:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I suppose so. Do you have permissions to change the set of required tests?",
  "created_at":"2023-12-19T14:45:33Z",
  "id":1862893000,
  "issue":2869,
  "node_id":"IC_kwDODBCWws5vCX3I",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-19T14:45:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"n.b. I rebased the merge commit on main to remove the change to the C++, which was a temporary attempt at fixing `macos-latest`",
  "created_at":"2023-12-19T21:29:46Z",
  "id":1863498327,
  "issue":2869,
  "node_id":"IC_kwDODBCWws5vErpX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-19T21:29:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"after this fix, the test where I added an error actually fails:\r\nhttps://github.com/zonca/awkward/pull/5",
  "created_at":"2023-12-05T20:48:18Z",
  "id":1841589014,
  "issue":2870,
  "node_id":"IC_kwDODBCWws5txGsW",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2023-12-05T20:48:18Z",
  "user":"MDQ6VXNlcjM4MzA5MA=="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2870](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3190cd6) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/123fa0961ddad0b46680ccd8c973255ea14e8575?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (123fa09) will **increase** coverage by `0.05%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `77.88%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `70.81% <100.00%> (+1.53%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.75% <100.00%> (+0.73%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.81% <100.00%> (-0.28%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.86% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.18% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `87.43% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `74.60% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.78% <83.33%> (+1.06%)` | :arrow_up: |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.22% <75.00%> (-0.25%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `80.95% <82.35%> (+2.05%)` | :arrow_up: |\n| ... and [2 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2870/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-12-05T20:51:42Z",
  "id":1841593173,
  "issue":2870,
  "node_id":"IC_kwDODBCWws5txHtV",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-05T20:51:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @zonca - this was a good oversight to catch! ",
  "created_at":"2023-12-06T11:33:51Z",
  "id":1842694505,
  "issue":2870,
  "node_id":"IC_kwDODBCWws5t1Ulp",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-06T11:33:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2871](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (11cdb13) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/123fa0961ddad0b46680ccd8c973255ea14e8575?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (123fa09) will **increase** coverage by `0.05%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `77.88%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `70.81% <100.00%> (+1.53%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.75% <100.00%> (+0.73%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.81% <100.00%> (-0.28%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.86% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.18% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `87.43% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `74.60% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.78% <83.33%> (+1.06%)` | :arrow_up: |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.22% <75.00%> (-0.25%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `80.95% <82.35%> (+2.05%)` | :arrow_up: |\n| ... and [2 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2871/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-12-06T03:42:12Z",
  "id":1842034917,
  "issue":2871,
  "node_id":"IC_kwDODBCWws5tyzjl",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-06T03:46:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"apologies just noticed there was already a `if` statement on that action,\r\nhowever it does not seem to work:\r\n\r\nhttps://github.com/zonca/awkward/pull/6",
  "created_at":"2023-12-06T04:03:06Z",
  "id":1842047794,
  "issue":2871,
  "node_id":"IC_kwDODBCWws5ty2sy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-06T04:03:06Z",
  "user":"MDQ6VXNlcjM4MzA5MA=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"hopefully this one instead is working:\r\n\r\nhttps://github.com/zonca/awkward/pull/7",
  "created_at":"2023-12-06T04:03:50Z",
  "id":1842048254,
  "issue":2871,
  "node_id":"IC_kwDODBCWws5ty2z-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-06T04:03:50Z",
  "user":"MDQ6VXNlcjM4MzA5MA=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We need to think about this - we don't want to leak any secrets to forked PRs. When I looked last, I felt we couldn't use any of the mechanisms for opening permissions without compromising access keys. It might be somewhat viable, I'll take a look this week! ",
  "created_at":"2023-12-06T11:37:17Z",
  "id":1842699102,
  "issue":2871,
  "node_id":"IC_kwDODBCWws5t1Vte",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-06T11:37:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2872](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (661b320) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/123fa0961ddad0b46680ccd8c973255ea14e8575?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (123fa09) will **increase** coverage by `0.05%`.\n> Report is 4 commits behind head on main.\n> The diff coverage is `77.88%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `70.81% <100.00%> (+1.53%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.75% <100.00%> (+0.73%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.81% <100.00%> (-0.28%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.86% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.18% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `87.43% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `74.60% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.78% <83.33%> (+1.06%)` | :arrow_up: |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.22% <75.00%> (-0.25%)` | :arrow_down: |\n| ... and [3 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2872/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-12-06T11:08:16Z",
  "id":1842658224,
  "issue":2872,
  "node_id":"IC_kwDODBCWws5t1Luw",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-07T12:40:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"As I said in our meeting, the reducers probably shouldn't be based on atomics, anyway. Will this PR be closed in favor of another?",
  "created_at":"2023-12-12T18:05:03Z",
  "id":1852553300,
  "issue":2872,
  "node_id":"IC_kwDODBCWws5ua7hU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-12T18:05:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> As I said in our meeting, the reducers probably shouldn't be based on atomics, anyway. Will this PR be closed in favor of another?\r\n\r\nYes, It will be better to work in a new one. I will close this.",
  "created_at":"2023-12-12T18:50:22Z",
  "id":1852620203,
  "issue":2872,
  "node_id":"IC_kwDODBCWws5ubL2r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-12T18:50:22Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2873](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (54bf2b2) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/123fa0961ddad0b46680ccd8c973255ea14e8575?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (123fa09) will **increase** coverage by `0.05%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `77.88%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `70.81% <100.00%> (+1.53%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.75% <100.00%> (+0.73%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.81% <100.00%> (-0.28%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.86% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.18% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `87.43% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `74.60% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.78% <83.33%> (+1.06%)` | :arrow_up: |\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.22% <75.00%> (-0.25%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `80.95% <82.35%> (+2.05%)` | :arrow_up: |\n| ... and [2 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2873/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-12-06T17:27:41Z",
  "id":1843343018,
  "issue":2873,
  "node_id":"IC_kwDODBCWws5t3y6q",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-06T17:27:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2874?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2874](https://app.codecov.io/gh/scikit-hep/awkward/pull/2874?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bec6d3a) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/c768a3a261c0347e8bac43573b7c128e7ab79296?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c768a3a) will **not change** coverage.\n> Report is 1 commits behind head on main.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-06T19:48:57Z",
  "id":1843586189,
  "issue":2874,
  "node_id":"IC_kwDODBCWws5t4uSN",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-07T09:00:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Should I go ahead and merge it? @jpivarski ",
  "created_at":"2023-12-07T12:51:58Z",
  "id":1845289572,
  "issue":2874,
  "node_id":"IC_kwDODBCWws5t_OJk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-07T12:51:58Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ManasviGoyal - looks good! please, squash and merge it if you are done with it. Thanks!\r\n\r\nSure. Thanks!",
  "created_at":"2023-12-07T13:02:49Z",
  "id":1845307817,
  "issue":2874,
  "node_id":"IC_kwDODBCWws5t_Smp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-07T13:02:49Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2875?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2875](https://app.codecov.io/gh/scikit-hep/awkward/pull/2875?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b798774) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/432d49b8d304538b5181f3fa20016102bc2c909f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (432d49b) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-07T09:57:12Z",
  "id":1845033795,
  "issue":2875,
  "node_id":"IC_kwDODBCWws5t-PtD",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-08T09:25:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2876?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2876](https://app.codecov.io/gh/scikit-hep/awkward/pull/2876?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (46f7f54) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/d11733454cca77696d1ad3132565d1a4bc677afd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d117334) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2876?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2876?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-12-07T12:42:33Z",
  "id":1845276752,
  "issue":2876,
  "node_id":"IC_kwDODBCWws5t_LBQ",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-08T08:39:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski @ianna \r\nThese are two more that had `cpu-kernels` in `v1` and don't have one in `v2`\r\n\r\n- awkward_reduce_argmax_bool_64\r\n- awkward_reduce_argmin_bool_64\r\n\r\nI see that they have a different if condition. But since their `cpu-kernels` were dropped, are they still needed? ",
  "created_at":"2023-12-07T14:03:16Z",
  "id":1845398468,
  "issue":2876,
  "node_id":"IC_kwDODBCWws5t_ovE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-07T14:09:29Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This is good to do as a first step, so that you don't accidentally spend time on obsolete kennels. The number of removed kennels doesn't surprise me\u2014going from v1 to v2, it became possible to use NumPy in places where we previously needed custom kernels. For the GPU, CuPy takes that role (assuming that CuPy is a good replacement for NumPy in those places, which it very likely is, and if not, a shim in its nplike would fix it).\r\n> \r\n@jpivarski These two should be removed too right?\r\n- awkward_reduce_argmax_bool_64\r\n- awkward_reduce_argmin_bool_64",
  "created_at":"2023-12-07T15:46:50Z",
  "id":1845585186,
  "issue":2876,
  "node_id":"IC_kwDODBCWws5uAWUi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-07T15:47:07Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"If you don't see them in v2, then yes.",
  "created_at":"2023-12-07T16:03:04Z",
  "id":1845613408,
  "issue":2876,
  "node_id":"IC_kwDODBCWws5uAdNg",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2023-12-07T16:03:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2877?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2877](https://app.codecov.io/gh/scikit-hep/awkward/pull/2877?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (46eee73) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/94007805991aa85beacd9632f1082ca0d69e1d03?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9400780) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-08T10:37:49Z",
  "id":1846937499,
  "issue":2877,
  "node_id":"IC_kwDODBCWws5uFgeb",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-08T11:20:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This is the division-versus-modulus that you brought up in our last meeting, right?\r\n\r\nYes!\r\n",
  "created_at":"2023-12-08T14:20:44Z",
  "id":1847257000,
  "issue":2877,
  "node_id":"IC_kwDODBCWws5uGueo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-08T14:20:44Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I simplified this to only address a missing `ak.numba.register_and_check()`.",
  "created_at":"2023-12-08T16:22:41Z",
  "id":1847475265,
  "issue":2879,
  "node_id":"IC_kwDODBCWws5uHjxB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-08T16:22:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2879?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2879](https://app.codecov.io/gh/scikit-hep/awkward/pull/2879?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d36a8b0) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/94007805991aa85beacd9632f1082ca0d69e1d03?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9400780) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-08T16:30:30Z",
  "id":1847485569,
  "issue":2879,
  "node_id":"IC_kwDODBCWws5uHmSB",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-08T16:30:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"All of the tests pass. @ianna, if you agree, you can do the merge. If not, let me know your reasons and we'll talk!",
  "created_at":"2023-12-08T17:32:48Z",
  "id":1847569220,
  "issue":2879,
  "node_id":"IC_kwDODBCWws5uH6tE",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-08T17:32:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2880?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`1cc22e5`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/1cc22e5c6bb1a1d1e972139803092f8a71d0af3d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98% compared to head [(`83cafc9`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2880?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98%.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2880?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2880?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-12-11T08:53:09Z",
  "id":1849579703,
  "issue":2880,
  "node_id":"IC_kwDODBCWws5uPli3",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-19T22:37:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> I was wandering if we should make the kernels code more readable (e.g self-documented) by using similar to the code base variable names?\r\n\r\nI'd prefer to not refactor the kernel names and the names of their arguments because\r\n\r\n* they're buried deeply, call it \"L5\" in our public-private scheme\r\n* refactoring will take time and probably introduce some bugs\r\n* right now, there's a big job to do\u2014adding the new kernels\u2014and I don't believe that this job would be easier if the kernel names and arguments were more in line with how they're used in the codebase. The problem of writing kernels is almost perfectly factored out of how the kernels are used in the codebase. \"Almost\" refers to the fact that the choice of good test cases would come from how they're intended to be used. (In fact, that criterion was already used to define most of the `unit-tests` in the kernel-test-data.json.)",
  "created_at":"2023-12-12T18:17:05Z",
  "id":1852570545,
  "issue":2880,
  "node_id":"IC_kwDODBCWws5ua_ux",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-12T18:17:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This PR doesn't affect awkward-cpp, so it does not need to go before @agoose77's upcoming release of awkward-cpp and awkward.",
  "created_at":"2023-12-12T18:18:54Z",
  "id":1852573086,
  "issue":2880,
  "node_id":"IC_kwDODBCWws5ubAWe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-12T18:18:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is a reasonable thing to expect `ak.concatenate` to support. Internally we implement concatenation using unions, and unions have a limitation of 128 contents. However, this restriction should not be something that users need to worry about in `ak.concatenate` unless they end up with >128 distinct content types.",
  "created_at":"2023-12-08T15:37:46Z",
  "id":1847398661,
  "issue":2881,
  "node_id":"IC_kwDODBCWws5uHREF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-08T15:37:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2882?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2882](https://app.codecov.io/gh/scikit-hep/awkward/pull/2882?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3afeca3) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/94007805991aa85beacd9632f1082ca0d69e1d03?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9400780) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-08T17:05:09Z",
  "id":1847534595,
  "issue":2882,
  "node_id":"IC_kwDODBCWws5uHyQD",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-08T17:05:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2883?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2883](https://app.codecov.io/gh/scikit-hep/awkward/pull/2883?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6d31acc) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/94007805991aa85beacd9632f1082ca0d69e1d03?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9400780) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-08T17:15:01Z",
  "id":1847547634,
  "issue":2883,
  "node_id":"IC_kwDODBCWws5uH1by",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-08T17:15:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"We only need one approval for merging. Last time, @ManasviGoyal also approved it, anyway.",
  "created_at":"2023-12-08T17:18:01Z",
  "id":1847551457,
  "issue":2883,
  "node_id":"IC_kwDODBCWws5uH2Xh",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-08T17:18:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I approved this on [zonca#3](https://github.com/zonca/awkward/pull/3), and see that it's the same `Indexed` Builder implementation here.\r\n> \r\n> This doesn't have the\r\n> \r\n> ```diff\r\n> - cmake -B build -S header-only -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=bin -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON\r\n> + cmake -B build -S header-only -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=bin -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON\r\n> ```\r\n> \r\n> update in .github/workflows/header-only-test.yml, but that's unrelated to adding the new Builder, so it's best not to have it in the PR, anyway. Everything else looks goo. (The [zonca#3](https://github.com/zonca/awkward/pull/3) was a difference after `IndexedOption` had been copied to `Indexed`, but this is a more direct addition.)\r\n\r\nright, that was already merged back in https://github.com/scikit-hep/awkward/pull/2870",
  "created_at":"2023-12-08T17:24:27Z",
  "id":1847559151,
  "issue":2883,
  "node_id":"IC_kwDODBCWws5uH4Pv",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-08T17:24:27Z",
  "user":"MDQ6VXNlcjM4MzA5MA=="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2886](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (27b2652) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e2510ca6475138b9bb2c7cd4c207d719ef7f342c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e2510ca) will **not change** coverage.\n> Report is 1 commits behind head on main.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `37.77% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `82.60% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `92.10% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.67% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_parameters.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BhcmFtZXRlcnMucHk=) | `82.22% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_singleton.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NpbmdsZXRvbi5weQ==) | `89.65% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_typing.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGluZy5weQ==) | `92.85% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `85.14% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_json.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2886?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pzb24ucHk=) | `93.57% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-12-11T09:40:19Z",
  "id":1849663948,
  "issue":2886,
  "node_id":"IC_kwDODBCWws5uP6HM",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-11T13:25:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ManasviGoyal - could you, please, run the linter and fix the warnings? Thanks!",
  "created_at":"2023-12-11T10:50:59Z",
  "id":1849819566,
  "issue":2886,
  "node_id":"IC_kwDODBCWws5uQgGu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-11T10:50:59Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ManasviGoyal - could you, please, run the linter and fix the warnings? Thanks!\r\n\r\nI think we need to update the `py.version` to `3.8` in `pyproject.toml` to support `typing.final`. Should I go ahead and go it?",
  "created_at":"2023-12-11T11:14:49Z",
  "id":1849862272,
  "issue":2886,
  "node_id":"IC_kwDODBCWws5uQqiA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-11T11:14:49Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > @ManasviGoyal - could you, please, run the linter and fix the warnings? Thanks!\r\n> \r\n> I think we need to update the `py.version` to `3.8` in `pyproject.toml` to support `typing.final`. Should I go ahead and go it?\r\n\r\nwhy is suddenly failing? what was changed?",
  "created_at":"2023-12-11T11:33:27Z",
  "id":1849889881,
  "issue":2886,
  "node_id":"IC_kwDODBCWws5uQxRZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-11T11:33:27Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ManasviGoyal is right that we should bump the PyLint Python version. I'd missed that when we last updated our Python bounds. I'm not sure why PyLint suddenly started noticing, though. I think we can safely assume that it's a strictness update on their part being pulled in via CI. No need to dig into it, though - we clearly should correct this on our side.",
  "created_at":"2023-12-11T12:03:00Z",
  "id":1849941883,
  "issue":2886,
  "node_id":"IC_kwDODBCWws5uQ997",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-11T12:03:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ManasviGoyal don't worry about pylint here - I'll fix it in a new PR.",
  "created_at":"2023-12-11T12:41:09Z",
  "id":1850002756,
  "issue":2886,
  "node_id":"IC_kwDODBCWws5uRM1E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-11T12:41:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ManasviGoyal don't worry about pylint here - I'll fix it in a new PR.\r\n\r\nThanks!",
  "created_at":"2023-12-11T12:43:07Z",
  "id":1850005799,
  "issue":2886,
  "node_id":"IC_kwDODBCWws5uRNkn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-11T12:43:07Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna I think this can be squash and merged now, right?",
  "created_at":"2023-12-11T14:06:33Z",
  "id":1850150791,
  "issue":2886,
  "node_id":"IC_kwDODBCWws5uRw-H",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-11T14:06:33Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"These have been fixed by #2886 ",
  "created_at":"2023-12-11T12:15:46Z",
  "id":1849962074,
  "issue":2887,
  "node_id":"IC_kwDODBCWws5uRC5a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-11T12:15:46Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fab!",
  "created_at":"2023-12-11T12:21:28Z",
  "id":1849971155,
  "issue":2887,
  "node_id":"IC_kwDODBCWws5uRFHT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-11T12:21:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is a duplicate of #2887, right?",
  "created_at":"2023-12-11T12:17:14Z",
  "id":1849964354,
  "issue":2888,
  "node_id":"IC_kwDODBCWws5uRDdC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-11T12:17:14Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, they are automatically logged on a cron job by my machine. Sometimes there are duplicates as it \"catches\" up with missed scheduled runs.",
  "created_at":"2023-12-11T12:22:00Z",
  "id":1849972080,
  "issue":2888,
  "node_id":"IC_kwDODBCWws5uRFVw",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-11T12:22:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2889?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2889](https://app.codecov.io/gh/scikit-hep/awkward/pull/2889?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1ede6fe) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e2510ca6475138b9bb2c7cd4c207d719ef7f342c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e2510ca) will **decrease** coverage by `0.02%`.\n> Report is 1 commits behind head on main.\n> The diff coverage is `58.33%`.\n\n> :exclamation: Current head 1ede6fe differs from pull request most recent head 27247dc. Consider uploading reports for the commit 27247dc to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2889?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/pyarrow.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2889?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `90.38% <58.33%> (-0.77%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-12-11T12:34:44Z",
  "id":1849992755,
  "issue":2889,
  "node_id":"IC_kwDODBCWws5uRKYz",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-11T15:00:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this fixes #2884, though I think we should refactor this logic down the road to obviate the need for the `revertable` mechanism entirely. Instead we should be able to instruct the callee to create a non-option. This gets a bit fiddly when handling records, whose option handling spans multiple nodes, but it should be doable.",
  "created_at":"2023-12-11T15:17:16Z",
  "id":1850285729,
  "issue":2889,
  "node_id":"IC_kwDODBCWws5uSR6h",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-11T15:17:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2890](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cae456f) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e2510ca6475138b9bb2c7cd4c207d719ef7f342c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e2510ca) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `37.77% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `82.60% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `92.10% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.67% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_parameters.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BhcmFtZXRlcnMucHk=) | `82.22% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_singleton.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NpbmdsZXRvbi5weQ==) | `89.65% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_typing.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGluZy5weQ==) | `92.85% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `85.14% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_json.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2890?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pzb24ucHk=) | `93.57% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-12-11T12:46:14Z",
  "id":1850010554,
  "issue":2890,
  "node_id":"IC_kwDODBCWws5uROu6",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-11T13:05:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2891](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (733f488) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e2510ca6475138b9bb2c7cd4c207d719ef7f342c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e2510ca) will **decrease** coverage by `0.01%`.\n> Report is 3 commits behind head on main.\n> The diff coverage is `81.81%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `37.77% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `82.60% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `92.10% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.67% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_parameters.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BhcmFtZXRlcnMucHk=) | `82.22% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_singleton.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NpbmdsZXRvbi5weQ==) | `89.65% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_typing.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGluZy5weQ==) | `92.85% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `85.14% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_json.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pzb24ucHk=) | `93.57% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/pyarrow.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2891?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `90.57% <66.66%> (-0.58%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-12-11T19:47:27Z",
  "id":1850774375,
  "issue":2891,
  "node_id":"IC_kwDODBCWws5uUJNn",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-11T19:47:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2893](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (da5cfef) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/e2510ca6475138b9bb2c7cd4c207d719ef7f342c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e2510ca) will **decrease** coverage by `0.01%`.\n> Report is 3 commits behind head on main.\n> The diff coverage is `81.81%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes/cupy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvY3VweS5weQ==) | `37.77% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/jax.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvamF4LnB5) | `82.60% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/numpy.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvbnVtcHkucHk=) | `92.10% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes/typetracer.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMvdHlwZXRyYWNlci5weQ==) | `74.67% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_parameters.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3BhcmFtZXRlcnMucHk=) | `82.22% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_singleton.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NpbmdsZXRvbi5weQ==) | `89.65% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_typing.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGluZy5weQ==) | `92.85% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `85.14% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_json.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pzb24ucHk=) | `93.57% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/pyarrow.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2893?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `90.57% <66.66%> (-0.58%)` | :arrow_down: |\n\n</details>",
  "created_at":"2023-12-12T09:36:49Z",
  "id":1851650186,
  "issue":2893,
  "node_id":"IC_kwDODBCWws5uXfCK",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-12T09:36:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski these are headers in the header-only part of `awkward` rather than `awkward-cpp`. For our header-only files, each component lives under `awkward/XXX.h`, so `foo/awkward/FOO.h` and `bar/awkward/BAR.h` can be flattened under the same `awkward/` prefix",
  "created_at":"2023-12-12T17:08:53Z",
  "id":1852456449,
  "issue":2893,
  "node_id":"IC_kwDODBCWws5uaj4B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-12T17:08:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"That's ... weird. I'm surprised? Let me do some bisection to find where this was introduced; I'm _certain_ this used to work.",
  "created_at":"2023-12-12T20:15:56Z",
  "id":1852738512,
  "issue":2894,
  "node_id":"IC_kwDODBCWws5ubovQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-12T20:15:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually, this would need some sort of deprecation cycle after all. Maybe it can be introduced with a new argument to `ak.argmin` and `ak.argmax` (only), which eventually becomes default and then is finally removed as an option.\r\n\r\nIt will require downstream code to use `ak.firsts` instead of `[:, 0]`:\r\n\r\n```python\r\n>>> array_of_int = ak.Array([\r\n...     [3, 1, 5, 2],\r\n...     [2, 2, -4, 1],\r\n...     [],\r\n...     [3, 7, 4]\r\n... ])\r\n>>> array_of_str = ak.Array([\r\n...     [\"three\", \"one\", \"five\", \"two\"],\r\n...     [\"two\", \"two\", \"minus four\", \"one\"],\r\n...     [],\r\n...     [\"three\", \"seven\", \"four\"]\r\n... ])\r\n\r\n>>> old_way = ak.argmin(array_of_int, axis=-1, keepdims=True)\r\n>>> old_way\r\n<Array [[1], [2], [None], [0]] type='4 * 1 * ?int64'>\r\n\r\n>>> new_way = ak.singletons(ak.argmin(array_of_int, axis=-1, keepdims=False))\r\n>>> new_way\r\n<Array [[1], [2], [], [0]] type='4 * var * int64'>\r\n\r\n>>> array_of_str[old_way][:, 0]\r\n<Array ['one', 'minus four', None, 'three'] type='4 * ?string'>\r\n\r\n>>> array_of_str[new_way][:, 0]\r\nTraceback (most recent call last):\r\n...\r\nIndexError: cannot slice ListArray (of length 4) with array(0): index out of range while attempting to get index 0 (in compiled code: https://github.com/scikit-hep/awkward/blob/awkward-cpp-26/awkward-cpp/src/cpu-kernels/awkward_NumpyArray_getitem_next_at.cpp#L21)\r\n\r\nThis error occurred while attempting to slice\r\n\r\n    <Array [['one'], ['minus four'], ..., ['three']] type='4 * var * string'>\r\n\r\nwith\r\n\r\n    (:, 0)\r\n\r\n>>> ak.firsts(array_of_str[new_way])\r\n<Array ['one', 'minus four', None, 'three'] type='4 * ?string'>\r\n```\r\n\r\nSo it's not something that can be put in now.\r\n\r\n> That's ... weird. I'm surprised? Let me do some bisection to find where this was introduced; I'm _certain_ this used to work.\r\n\r\nMaybe first we should find out if it was ever how this worked. There are probably tests depending on it, and if they use `[:, 0]`, then that indicates that it was how it worked as long as that test existed.",
  "created_at":"2023-12-12T20:18:26Z",
  "id":1852741673,
  "issue":2894,
  "node_id":"IC_kwDODBCWws5ubpgp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-12T20:18:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It looks like even in 1.10 the current behavior was nominal. Of course, this isn't just `argmin`; it's _all_ reducers.\r\n\r\nI've had some more time to think about it, and in the context of \"all reducers\", I don't find this as surprising as I did; I think of `keepdims=True` as \"preserve the list\", and `mask_identity=True` as \"use `None` instead of the identity\".\r\n\r\nI can see why `ak.min([], axis=-1, keepdims=True, mask_identity=True)` could logically produce `None` instead of `[None]`, but I find it increasingly a matter of preference vs an obvious bug.",
  "created_at":"2023-12-12T21:29:33Z",
  "id":1852839737,
  "issue":2894,
  "node_id":"IC_kwDODBCWws5ucBc5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-12T21:29:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I agree that the current behavior is correct for all reducers other than `ak.argmin` and `ak.argmax`; the reason I was thinking these two should be different is because they don't have identities.\r\n\r\nFor `ak.sum`, `[] \u2192 0` with `keepdims=False` and `[] \u2192 [0]` with `keepdims=True` makes sense (depending on how we're thinking about the word \"keep\").\r\n\r\nFor `ak.argmin`, `[] \u2192 None` with `keepdims=False` is fine; I just thought that `[] \u2192 []` when `keepdims=True`. However, it would also mean that `ak.argmin` and `ak.argmax` would then differ from the other reducers by producing a variable-length dimension instead of a regular, length 1 dimension, and that's getting a little too exceptional.\r\n\r\nI can see how `[] \u2192 [None]` for `ak.argmin` with `keepdims=True` makes some sense, and it's baked rather deeply into the expectations by now. Maybe it's too late. I'll withdraw the issue and not rock this boat.",
  "created_at":"2023-12-12T21:38:08Z",
  "id":1852849636,
  "issue":2894,
  "node_id":"IC_kwDODBCWws5ucD3k",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-12T21:38:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The same is true for `ak.min`, which has the same semantics as `ak.argmin`. I completely agree that for the purposes of an indexer it's non-ideal. It looks like we *might* have more support for a dedicated function for indexing, part of the same discussion as adding a dedicated ragged indexing accessor. I'll give it some thought!",
  "created_at":"2023-12-12T21:39:40Z",
  "id":1852851587,
  "issue":2894,
  "node_id":"IC_kwDODBCWws5ucEWD",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-12T21:39:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I was going to say that `ak.min` has an identity, `np.inf` (or `MAXINT`), but usually `mask_identity=True`, so it's covered up by `None`. So yes, it has the same semantics in the default case, and this behavior probably shouldn't depend on that argument. It might be too surprising for `mask_identity` to also control whether `keepdims` produces a variable-length dimension with `[] \u2192 []` or not.",
  "created_at":"2023-12-12T21:50:32Z",
  "id":1852865000,
  "issue":2894,
  "node_id":"IC_kwDODBCWws5ucHno",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-12T21:50:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We also make up identities for `argmin`/`argmax`, hence my thinking that they're quite similar to the `min`/`max` functions. I'm glad to see that you're also on the fence with respect to what we should do here! APIs are hard sometimes :P",
  "created_at":"2023-12-13T10:04:32Z",
  "id":1853615008,
  "issue":2894,
  "node_id":"IC_kwDODBCWws5ue-ug",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-13T10:04:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't remember what identities we make up for `argmin`/`argmax`, but they can't be as meaningful as the identities for `min`/`max`. Maybe we use `-1`, just so that it's different from `0`? (Although `-1` is an index that would select the wrong element.)\r\n\r\nBut yeah, this issue is closed; we're not doing it. The tutorial shows what I've been calling the \"old way\" above, and the tutorial would need to be changed if this behavior changed. (I didn't want to introduce/explain `ak.firsts`.)",
  "created_at":"2023-12-13T14:30:45Z",
  "id":1854023930,
  "issue":2894,
  "node_id":"IC_kwDODBCWws5ugij6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-13T14:30:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2896?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`eb004ce`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/eb004ce3fb0f5f8dac907a0fade8d55d0fdf791d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.93% compared to head [(`fa789b6`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2896?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.93%.\n> Report is 2 commits behind head on main.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-13T13:45:59Z",
  "id":1853948453,
  "issue":2896,
  "node_id":"IC_kwDODBCWws5ugQIl",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2024-01-12T16:53:22Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna from the README, it looks like we want this file to exist under `site-packages/awkward/juliapkg.json`. Is that so? I'd be keen to work on this, it might take some thinking about w.r.t editable installs etc.",
  "created_at":"2023-12-14T11:57:25Z",
  "id":1855715332,
  "issue":2896,
  "node_id":"IC_kwDODBCWws5um_gE",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-14T11:57:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna from the README, it looks like we want this file to exist under `site-packages/awkward/juliapkg.json`. Is that so? I'd be keen to work on this, it might take some thinking about w.r.t editable installs etc.\r\n\r\n@agoose77 - Thank you! It would be great if you could find time :-) ",
  "created_at":"2023-12-14T13:01:08Z",
  "id":1855810557,
  "issue":2896,
  "node_id":"IC_kwDODBCWws5unWv9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-14T13:01:08Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've modified the build configuration. We should explicitly check that editable installs perform this rewrite (they should, though; hatch uses the wheel target).",
  "created_at":"2023-12-19T22:06:13Z",
  "id":1863537844,
  "issue":2896,
  "node_id":"IC_kwDODBCWws5vE1S0",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-19T22:06:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2898?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAttention: `5 lines` in your changes are missing coverage. Please review.\n> Comparison is base [(`b749e49`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/b749e49d6fe078e530ef506bf526705bab3f35f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.90% compared to head [(`f023205`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2898?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.93%.\n> Report is 3 commits behind head on main.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2898?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2898?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_parquet\\_dataset.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2898?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19wYXJxdWV0X2RhdGFzZXQucHk=) | `90.38% <90.38%> (\u00f8)` | |\n\n... and [2 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2898/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-12-13T15:54:34Z",
  "id":1854192938,
  "issue":2898,
  "node_id":"IC_kwDODBCWws5uhL0q",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2024-02-05T14:59:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2899?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`28007e9`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/28007e94460761958a049ddcc775255ab0cefbf4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.88% compared to head [(`cb566d6`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2899?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98%.\n\n> :exclamation: Current head cb566d6 differs from pull request most recent head 9d3b826. Consider uploading reports for the commit 9d3b826 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n[see 27 files with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2899/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-12-14T16:58:52Z",
  "id":1856210653,
  "issue":2899,
  "node_id":"IC_kwDODBCWws5uo4bd",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2024-01-29T16:38:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"By the way I noticed that there is not `clang-format` in the pre-commit\r\n\r\n> @lobis - looks great! I don't think `clang-format` was run. Could you please run it by hand? Thanks!\r\n\r\nI manually formatted the file (no clang-format).\r\n\r\nI wasn't able to run clang-format without causing a huge diff so I created a separate PR for this (https://github.com/scikit-hep/awkward/pull/2902).",
  "created_at":"2023-12-14T17:14:40Z",
  "id":1856252541,
  "issue":2899,
  "node_id":"IC_kwDODBCWws5upCp9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-20T13:56:28Z",
  "user":"MDQ6VXNlcjM1ODAzMjgw"
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2900?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2900](https://app.codecov.io/gh/scikit-hep/awkward/pull/2900?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c481055) into [main](https://app.codecov.io/gh/scikit-hep/awkward/commit/accbce3f3416611baceef46ae3e003e6e1b52ee6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (accbce3) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-14T17:15:44Z",
  "id":1856254160,
  "issue":2900,
  "node_id":"IC_kwDODBCWws5upDDQ",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-14T17:15:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed in favour of #2904",
  "created_at":"2023-12-15T13:44:33Z",
  "id":1857905508,
  "issue":2900,
  "node_id":"IC_kwDODBCWws5uvWNk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-15T13:44:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
  "created_at":"2023-12-15T13:44:36Z",
  "id":1857905579,
  "issue":2900,
  "node_id":"IC_kwDODBCWws5uvWOr",
  "performed_via_github_app":"MDM6QXBwMjkxMTA=",
  "reactions":{},
  "updated_at":"2023-12-15T13:44:36Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed in favour of #2904",
  "created_at":"2023-12-15T13:44:42Z",
  "id":1857905733,
  "issue":2901,
  "node_id":"IC_kwDODBCWws5uvWRF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-15T13:44:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
  "created_at":"2023-12-15T13:44:45Z",
  "id":1857905816,
  "issue":2901,
  "node_id":"IC_kwDODBCWws5uvWSY",
  "performed_via_github_app":"MDM6QXBwMjkxMTA=",
  "reactions":{},
  "updated_at":"2023-12-15T13:44:45Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Wow the pre-commit bot did a really big diff, is the clang-format being ran correctly and it wasn't formatted before or what is going on? I'm having troubles running this `.clang-format` file myself so can't really tell.",
  "created_at":"2023-12-14T18:03:45Z",
  "id":1856339113,
  "issue":2902,
  "node_id":"IC_kwDODBCWws5upXyp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-14T18:03:45Z",
  "user":"MDQ6VXNlcjM1ODAzMjgw"
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Not sure why this is such a big diff @agoose77 , perhaps you want to make some changes?",
  "created_at":"2023-12-20T13:59:39Z",
  "id":1864523502,
  "issue":2902,
  "node_id":"IC_kwDODBCWws5vIl7u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-20T13:59:39Z",
  "user":"MDQ6VXNlcjM1ODAzMjgw"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This was something that @ianna and @jpivarski were discussing a while ago. I don't recall if we ever reached a conclusion on the style and went as far as enforcing it. Perhaps they can chime in?",
  "created_at":"2023-12-20T18:03:24Z",
  "id":1864908377,
  "issue":2902,
  "node_id":"IC_kwDODBCWws5vKD5Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-20T18:03:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@ianna and I had discussed it in #1842, #1865, #34, and #35.\r\n\r\nThis does have a lot of diffs, mostly in whitespace. We can merge a PR like this, but only once, after conclusively deciding on a set of style options.\r\n\r\nClang-format/clang-tidy doesn't come with a set of opinions, the way that black does, but there must be some de facto standards, like LLVM Style. Which is the most popular one?",
  "created_at":"2023-12-21T04:48:17Z",
  "id":1865476224,
  "issue":2902,
  "node_id":"IC_kwDODBCWws5vMOiA",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2023-12-21T04:48:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2904?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`f6d6f5c`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/f6d6f5c9edf420e6810d0af4483cf93c3e650bcf?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98% compared to head [(`91cb713`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2904?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98%.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-15T13:50:54Z",
  "id":1857914817,
  "issue":2904,
  "node_id":"IC_kwDODBCWws5uvYfB",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-19T21:37:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I updated the branch status checks using\r\n```bash\r\ncommit=\"<SOME-SHA-WITH-NEW-CHECKS>\"\r\n# Read checks\r\ngh api repos/scikit-hep/awkward/commits/${commit}/check-runs --paginate --jq '{ context: .check_runs[].name }' | jq -s '{ checks: . | unique }' > /tmp/checks.json\r\n# Remove the check pertaining to docs deployment (skipped for PRs)\r\n$EDITOR /tmp/checks.json\r\n# Patch checks\r\ngh api repos/scikit-hep/awkward/branches/main/protection/required_status_checks \\\r\n  --method PATCH \\\r\n  --input /tmp/checks.json\r\n```",
  "created_at":"2023-12-19T21:57:39Z",
  "id":1863528632,
  "issue":2904,
  "node_id":"IC_kwDODBCWws5vEzC4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-19T21:57:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@douglasdavis this may involve you as well",
  "created_at":"2023-12-15T15:51:23Z",
  "id":1858096373,
  "issue":2905,
  "node_id":"IC_kwDODBCWws5uwEz1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-15T15:51:23Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"ah! it's coming from the concatenate",
  "created_at":"2023-12-15T15:59:22Z",
  "id":1858108154,
  "issue":2905,
  "node_id":"IC_kwDODBCWws5uwHr6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-15T18:28:22Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"so, the error starts happening within the execution of this segment of code:\r\n```python3\r\npair = pair[\r\n    ak.singletons(\r\n        ak.argmin(\r\n            abs(\r\n                (events.leptons[pair.l1] + events.leptons[pair.l2]).mass\r\n                - 91.2\r\n            ),\r\n            axis=1,\r\n        )\r\n    )\r\n]\r\n```\r\n\r\nI'm trying to get a non-coffea reproducer out of it but haven't yet.",
  "created_at":"2023-12-15T16:31:29Z",
  "id":1858151201,
  "issue":2905,
  "node_id":"IC_kwDODBCWws5uwSMh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-15T16:31:43Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"More specifically it's the add operation:\r\n```\r\ntest = events.leptons[pair.l1] + events.leptons[pair.l2]\r\n```\r\nif I then try to compute anything on test I get the placeholder array error.\r\n\r\nIf I instead do something like:\r\n```\r\ntest = events.leptons[pair.l1].pt + events.leptons[pair.l2].pt\r\n```\r\n\r\nand compute test it's fine and produces the expected output (even if the meaning is nonsensical in this case). So it's something specifically about adding the object with the behavior?",
  "created_at":"2023-12-15T16:40:54Z",
  "id":1858164648,
  "issue":2905,
  "node_id":"IC_kwDODBCWws5uwVeo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-15T16:40:54Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I've narrowed it down a bit:\r\n```python3\r\nfrom coffea.nanoevents import NanoEventsFactory, NanoAODSchema\r\nimport awkward as ak\r\n\r\nif __name__ == \"__main__\":\r\n    NanoAODSchema.error_missing_event_ids = False\r\n\r\n    events = NanoEventsFactory.from_root(\r\n        {\"tests/samples/nano_dy.root\": {\"object_path\": \"Events\", \"steps\": [[0,40]]}},\r\n        metadata={\"dataset\": \"nano_dy\"},\r\n        schemaclass=NanoAODSchema,\r\n    ).events()\r\n\r\n    events[\"leptons\"] = ak.concatenate(\r\n        [events.Electron, events.Muon],\r\n        axis=1,\r\n    )\r\n\r\n    pair = ak.argcombinations(events.leptons, 2, fields=[\"l1\", \"l2\"])\r\n\r\n    print((events.leptons[pair.l1] + events.leptons[pair.l2]).pt.compute())\r\n```\r\n\r\nfails with the above error\r\n\r\nwhile:\r\n```python3\r\nfrom coffea.nanoevents import NanoEventsFactory, NanoAODSchema\r\nimport awkward as ak\r\n\r\nif __name__ == \"__main__\":\r\n    NanoAODSchema.error_missing_event_ids = False\r\n\r\n    events = NanoEventsFactory.from_root(\r\n        {\"tests/samples/nano_dy.root\": {\"object_path\": \"Events\", \"steps\": [[0,40]]}},\r\n        metadata={\"dataset\": \"nano_dy\"},\r\n        schemaclass=NanoAODSchema,\r\n    ).events()\r\n\r\n    events[\"leptons\"] = events.Electron\r\n\r\n    pair = ak.argcombinations(events.leptons, 2, fields=[\"l1\", \"l2\"])\r\n\r\n    print((events.leptons[pair.l1] + events.leptons[pair.l2]).pt.compute())\r\n```\r\n\r\nsucceeds!",
  "created_at":"2023-12-15T17:03:41Z",
  "id":1858201926,
  "issue":2905,
  "node_id":"IC_kwDODBCWws5uwelG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-15T17:04:31Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I have tried to cook up  a reproducer in uproot but since dak.zip touches all inputs the placeholder array doesn't seem to pop up.",
  "created_at":"2023-12-15T17:06:23Z",
  "id":1858206011,
  "issue":2905,
  "node_id":"IC_kwDODBCWws5uwfk7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-15T17:06:23Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Possibly related to https://github.com/dask-contrib/dask-awkward/pull/430",
  "created_at":"2023-12-15T18:32:53Z",
  "id":1858322062,
  "issue":2905,
  "node_id":"IC_kwDODBCWws5uw76O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-15T18:32:53Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We don't need the `argcombinations`:\r\n\r\n```python\r\nfrom coffea.nanoevents import NanoEventsFactory, NanoAODSchema\r\nimport awkward as ak\r\n\r\nif __name__ == \"__main__\":\r\n    NanoAODSchema.error_missing_event_ids = False\r\n\r\n    events = NanoEventsFactory.from_root(\r\n        {\"tests/samples/nano_dy.root\": {\"object_path\": \"Events\", \"steps\": [[0,40]]}},\r\n        metadata={\"dataset\": \"nano_dy\"},\r\n        schemaclass=NanoAODSchema,\r\n    ).events()\r\n\r\n    events[\"leptons\"] = ak.concatenate(\r\n        [events.Electron, events.Muon],\r\n        axis=1,\r\n    )\r\n\r\n    print((events.leptons + events.leptons).pt.compute())\r\n```",
  "created_at":"2023-12-15T22:06:56Z",
  "id":1858545558,
  "issue":2905,
  "node_id":"IC_kwDODBCWws5uxyeW",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2023-12-15T22:06:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"hah - I didn't even think to try. Nice.",
  "created_at":"2023-12-15T22:19:58Z",
  "id":1858559866,
  "issue":2905,
  "node_id":"IC_kwDODBCWws5ux196",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-15T22:19:58Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAttention: `30 lines` in your changes are missing coverage. Please review.\n> Comparison is base [(`1c52490`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/1c52490aaece5145d2739eff761cd7839757d8e9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98% compared to head [(`44bdb34`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98%.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bytemaskedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `89.75% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `74.81% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `75.12% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `80.95% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.15% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.78% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `82.86% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.18% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `85.19% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `87.43% <100.00%> (\u00f8)` | |\n| ... and [6 more](https://app.codecov.io/gh/scikit-hep/awkward/pull/2906?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2023-12-19T12:13:30Z",
  "id":1862649048,
  "issue":2906,
  "node_id":"IC_kwDODBCWws5vBcTY",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-20T17:52:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2907?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`e591e2d`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/e591e2dda91fb3efbf790d682c6082a2f0b2b900?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98% compared to head [(`e5f2869`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2907?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98%.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-18T19:53:42Z",
  "id":1861472090,
  "issue":2907,
  "node_id":"IC_kwDODBCWws5u889a",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-19T20:54:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2909?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`1cc22e5`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/1cc22e5c6bb1a1d1e972139803092f8a71d0af3d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98% compared to head [(`7f01673`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2909?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98%.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-19T22:44:57Z",
  "id":1863575375,
  "issue":2909,
  "node_id":"IC_kwDODBCWws5vE-dP",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-19T22:44:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@cmoore24-24",
  "created_at":"2023-12-21T01:10:02Z",
  "id":1865338494,
  "issue":2910,
  "node_id":"IC_kwDODBCWws5vLs5-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-21T01:10:02Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"This was working as expected in a prior version of awkward/dask-awkward (query 8 here run for CHEP):\r\nhttps://github.com/CoffeaTeam/coffea-benchmarks/blob/master/coffea-adl-benchmarks.ipynb\r\n\r\nI know things have changed greatly, but I'm sure we can get back to that state. This issue may likely hang between awkward and dask-awkward. @douglasdavis FYI",
  "created_at":"2023-12-21T01:24:20Z",
  "id":1865347404,
  "issue":2911,
  "node_id":"IC_kwDODBCWws5vLvFM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-21T01:24:20Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"What's happening here is that we broadcast through the union, which necessarily involves projecting out each content before recursing. This projection is eager, so we end up touching everything below-and-including each content of the union. Once we recurse through each content, we find the same ufunc overload for `np.add` (because leptons are leptons), and the resulting union over the result therefore simplifies away.\r\n\r\n@jpivarski this concerns the choice for `allow_lazy=False` vs `allow_lazy=True` in `UnionArray.project`. This code predates my time on Awkward, and I know you usually have well-formed ideas about whether it's reasonable to create an index or not. There are two solutions: either we change `UnionArray.project` to use `allow_lazy=True` internally, *or* we add a new `UnionArray.project_as_indexed` that explicitly sets `allow_lazy=True`. I think the former is fine; it makes a lot of sense to me that we should avoid the carry; it's trivial to project an `IndexedArray`.\r\n\r\nN.B.: presently, there is an implicit dependency upon the union formed by `ak.concatenate`.",
  "created_at":"2023-12-21T03:58:00Z",
  "id":1865440604,
  "issue":2911,
  "node_id":"IC_kwDODBCWws5vMF1c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-21T03:58:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We can change `UnionArray.project` to use `allow_lazy=True` internally.\r\n\r\nThis mechanism was introduced in #261 as an optimization for RecordArrays (#204). We weren't thinking about UnionArrays, but if unions can be optimized (for Dask) by the same mechanism, then great!\r\n\r\nYou can't directly nest an IndexedArray inside of a UnionArray, but since a UnionArray has an index anyway, those indexes can be combined without affecting the union's contents.",
  "created_at":"2023-12-21T05:01:54Z",
  "id":1865483926,
  "issue":2911,
  "node_id":"IC_kwDODBCWws5vMQaW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-21T05:01:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2912?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`0a8e9c8`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/0a8e9c81399b3c00b4f40e9edf51c31954750d30?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98% compared to head [(`93b69b3`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2912?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98%.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2912?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedoptionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2912?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.15% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2023-12-21T03:25:53Z",
  "id":1865423284,
  "issue":2912,
  "node_id":"IC_kwDODBCWws5vMBm0",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-27T16:50:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Checked in Connor's original reproducer - it is fixed with this patch and touching looks ok too.",
  "created_at":"2023-12-21T14:25:01Z",
  "id":1866358856,
  "issue":2912,
  "node_id":"IC_kwDODBCWws5vPmBI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-21T14:25:01Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Ack, I take that latter statement back. I hit a placeholder array now when I try to compute the following, the original repro wasn't doing the compute. Glad I checked it:\r\n```python3\r\nfrom coffea.nanoevents import NanoEventsFactory, PFNanoAODSchema\r\nfrom distributed import Client\r\n#import dask                                                                                                                                                                                                                                       \r\nimport dask_awkward as dak\r\n\r\nimport awkward as ak\r\n\r\nimport pyinstrument\r\nimport time\r\n\r\nif __name__ == \"__main__\":\r\n    client = Client()\r\n\r\n    PFNanoAODSchema.warn_missing_crossrefs = False\r\n\r\n    events = NanoEventsFactory.from_root(\r\n        {\"./nano_mc2017_1.root\": {\"object_path\": \"Events\", \"steps\": [[0,40],[40, 80]]}},\r\n        schemaclass=PFNanoAODSchema,\r\n    ).events()\r\n\r\n    fatjet = events.FatJet\r\n    pf = ak.flatten(fatjet.constituents.pf, axis=2)\r\n\r\n    unflat_pf = ak.unflatten(pf, counts=ak.flatten(ak.num(fatjet.constituents.pf, axis=2)), axis=1)\r\n\r\n    print(dak.necessary_columns(unflat_pf.pt))\r\n\r\n    print(unflat_pf.pt.compute())\r\n```\r\nresults in:\r\n```\r\n(coffea-dev) lgray@Lindseys-MacBook-Pro coffea % python connor_repro.py   \r\n/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/dask_awkward/lib/structure.py:895: UserWarning: Please ensure that dask.awkward<flatten, npartitions=2>\r\n        is partitionwise-compatible with dask.awkward<flatten, npartitions=2>\r\n        (e.g. counts comes from a dak.num(array, axis=1)),\r\n        otherwise this unflatten operation will fail when computed!\r\n  warnings.warn(\r\n{'from-uproot-24ce6ace95a270ade088eba20e030c80': frozenset({'nPFCands', 'FatJet_nConstituents', 'nFatJetPFCands', 'PFCands_pt', 'FatJetPFCands_pFCandsIdx', 'nFatJet'})}\r\n2023-12-21 08:29:18,789 - distributed.worker - WARNING - Compute Failed\r\nKey:       ('pt-fb9d8e1608f0364952db5bf8768b4897', 1)\r\nFunction:  subgraph_callable-68716d38-5732-42a0-ab99-8fa39786\r\nargs:      ('PFCands', 'pFCandsIdxG', 'FatJetPFCands', 'FatJet', ('./nano_mc2017_1.root', 'Events', 40, 80, True))\r\nkwargs:    {}\r\nException: 'TypeError(\"PlaceholderArray supports only trivial slices, not ndarray\\\\n\\\\nThis error occurred while calling\\\\n\\\\n    ak.unflatten(\\\\n        repr-raised-TypeError\\\\n        <Array [30, 29, 40, 27, 71, ..., 50, 23, 4, 61, 38] type=\\'68 * int64\\'>\\\\n        axis = 1\\\\n        behavior = None\\\\n    )\")'\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/_dispatch.py\", line 62, in dispatch\r\n    next(gen_or_result)\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/operations/ak_unflatten.py\", line 90, in unflatten\r\n    return _impl(array, counts, axis, highlevel, behavior, attrs)\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/operations/ak_unflatten.py\", line 98, in _impl\r\n    ctx.unwrap(array, allow_record=False, primitive_policy=\"error\").to_packed(),\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/contents/listoffsetarray.py\", line 2219, in to_packed\r\n    next_content = next._content[: next._offsets[-1]].to_packed()\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/contents/indexedoptionarray.py\", line 1744, in to_packed\r\n    self.project().to_packed(),\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/contents/indexedoptionarray.py\", line 583, in project\r\n    return self._content._carry(nextcarry, False)\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/contents/recordarray.py\", line 532, in _carry\r\n    contents = [\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/contents/recordarray.py\", line 533, in <listcomp>\r\n    self.content(i)._carry(carry, allow_lazy)\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/contents/numpyarray.py\", line 347, in _carry\r\n    nextdata = self._data[carry.data]\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/_nplikes/placeholder.py\", line 97, in __getitem__\r\n    raise TypeError(\r\nTypeError: PlaceholderArray supports only trivial slices, not ndarray\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"connor_repro.py\", line 28, in <module>\r\n    print(unflat_pf.pt.compute())\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/dask/base.py\", line 314, in compute\r\n    (result,) = compute(self, traverse=False, **kwargs)\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/dask/base.py\", line 599, in compute\r\n    results = schedule(dsk, keys, **kwargs)\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/distributed/client.py\", line 3226, in get\r\n    results = self.gather(packed, asynchronous=asynchronous, direct=direct)\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/distributed/client.py\", line 2361, in gather\r\n2023-12-21 08:29:18,794 - distributed.worker - WARNING - Compute Failed\r\nKey:       ('pt-fb9d8e1608f0364952db5bf8768b4897', 0)\r\nFunction:  subgraph_callable-68716d38-5732-42a0-ab99-8fa39786\r\nargs:      ('PFCands', 'pFCandsIdxG', 'FatJetPFCands', 'FatJet', ('./nano_mc2017_1.root', 'Events', 0, 40, True))\r\nkwargs:    {}\r\nException: 'TypeError(\"PlaceholderArray supports only trivial slices, not ndarray\\\\n\\\\nThis error occurred while calling\\\\n\\\\n    ak.unflatten(\\\\n        repr-raised-TypeError\\\\n        <Array [51, 50, 63, 34, 22, ..., 46, 53, 41, 67, 38] type=\\'65 * int64\\'>\\\\n        axis = 1\\\\n        behavior = None\\\\n    )\")'\r\n\r\n    return self.sync(\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/distributed/utils.py\", line 351, in sync\r\n    return sync(\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/distributed/utils.py\", line 418, in sync\r\n    raise exc.with_traceback(tb)\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/distributed/utils.py\", line 391, in f\r\n    result = yield future\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/tornado/gen.py\", line 769, in run\r\n    value = future.result()\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/distributed/client.py\", line 2224, in _gather\r\n    raise exception.with_traceback(traceback)\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/dask/optimization.py\", line 990, in __call__\r\n    return core.get(self.dsk, self.outkey, dict(zip(self.inkeys, args)))\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/dask/core.py\", line 149, in get\r\n    result = _execute_task(task, cache)\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/dask/core.py\", line 119, in _execute_task\r\n    return func(*(_execute_task(a, cache) for a in args))\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/dask/core.py\", line 119, in <genexpr>\r\n    return func(*(_execute_task(a, cache) for a in args))\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/dask/core.py\", line 119, in _execute_task\r\n    return func(*(_execute_task(a, cache) for a in args))\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/dask_awkward/lib/core.py\", line 1869, in __call__\r\n    return self.fn(*args, **kwargs)\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/_dispatch.py\", line 70, in dispatch\r\n    return gen_or_result\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/_errors.py\", line 85, in __exit__\r\n    self.handle_exception(exception_type, exception_value)\r\n  File \"/Users/lgray/coffea-dev/awkward/src/awkward/_errors.py\", line 95, in handle_exception\r\n    raise self.decorate_exception(cls, exception)\r\nTypeError: PlaceholderArray supports only trivial slices, not ndarray\r\n\r\nThis error occurred while calling\r\n\r\n    ak.unflatten(\r\n        repr-raised-TypeError\r\n        <Array [30, 29, 40, 27, 71, ..., 50, 23, 4, 61, 38] type='68 * int64'>\r\n        axis = 1\r\n        behavior = None\r\n    )\r\n```",
  "created_at":"2023-12-21T14:29:54Z",
  "id":1866368995,
  "issue":2912,
  "node_id":"IC_kwDODBCWws5vPofj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-21T14:38:17Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"The `necessary_columns` report looks correct to me, so probably something in the rehydration machinery in awkward?",
  "created_at":"2023-12-21T14:33:32Z",
  "id":1866376425,
  "issue":2912,
  "node_id":"IC_kwDODBCWws5vPqTp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-21T14:33:32Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Almost there, it presently overtouches, from the same reproducer:\r\n```\r\n(coffea-dev) lgray@Lindseys-MacBook-Pro coffea % python connor_repro.py\r\n/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/dask_awkward/lib/structure.py:895: UserWarning: Please ensure that dask.awkward<flatten, npartitions=2>\r\n        is partitionwise-compatible with dask.awkward<flatten, npartitions=2>\r\n        (e.g. counts comes from a dak.num(array, axis=1)),\r\n        otherwise this unflatten operation will fail when computed!\r\n  warnings.warn(\r\n{'from-uproot-f43b2959a838308afd95be4cbeebc4fb': frozenset({'PFCands_d0', 'PFCands_lostInnerHits', 'PFCands_pdgId', 'PFCands_trkChi2', 'nFatJet', 'PFCands_dz', 'PFCands_pt', 'PFCands_vtxChi2', 'FatJetPFCands_pFCandsIdx', 'PFCands_mass', 'PFCands_eta', 'nFatJetPFCands', 'nPFCands', 'PFCands_charge', 'PFCands_trkQuality', 'PFCands_d0Err', 'PFCands_dzErr', 'PFCands_puppiWeightNoLep', 'PFCands_puppiWeight', 'PFCands_phi', 'FatJet_nConstituents', 'PFCands_pvAssocQuality'})}\r\n[[[19.9, 4.32, 5.29, 6.13, 5.61, ..., 1.33, 0.67, 0.629, 0.668, 0.459]], ...]\r\n```\r\n\r\nshould be only:\r\n```\r\nfrozenset({'nPFCands', 'FatJet_nConstituents', 'nFatJetPFCands', 'PFCands_pt', 'FatJetPFCands_pFCandsIdx', 'nFatJet'})\r\n```",
  "created_at":"2023-12-27T16:53:22Z",
  "id":1870472091,
  "issue":2912,
  "node_id":"IC_kwDODBCWws5vfSOb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-27T16:58:06Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"As discussed via DM - this one is fine to go in as is, the resulting overtouching will be dealt with separately.",
  "created_at":"2023-12-27T18:41:08Z",
  "id":1870543104,
  "issue":2912,
  "node_id":"IC_kwDODBCWws5vfjkA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-27T18:41:08Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2913?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`a9c2e3b`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/a9c2e3b98c24e9c8687a2f2f746dfb6fd017548f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98% compared to head [(`b647a64`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2913?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98%.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Files](https://app.codecov.io/gh/scikit-hep/awkward/pull/2913?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/unionarray.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2913?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.22% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_enforce\\_type.py](https://app.codecov.io/gh/scikit-hep/awkward/pull/2913?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19lbmZvcmNlX3R5cGUucHk=) | `81.97% <100.00%> (\u00f8)` | |\n\n... and [1 file with indirect coverage changes](https://app.codecov.io/gh/scikit-hep/awkward/pull/2913/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep)\n\n</details>",
  "created_at":"2023-12-21T13:18:33Z",
  "id":1866227566,
  "issue":2913,
  "node_id":"IC_kwDODBCWws5vPF9u",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-21T13:18:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Excellent, the test case is fixed up:\r\n```\r\n/Users/lgray/coffea-dev/coffea/src/coffea/nanoevents/schemas/nanoaod.py:243: RuntimeWarning: Missing cross-reference index for FatJet_genJetAK8Idx => GenJetAK8\r\n  warnings.warn(\r\n{'from-uproot-b1b15c47a073739766e8fd9b6aac75c1': frozenset({'Electron_eta', 'Electron_pt', 'Muon_eta', 'Electron_charge', 'Electron_mass', 'Muon_phi', 'Muon_pt', 'nElectron', 'Electron_phi', 'nMuon', 'Muon_mass', 'Muon_charge'})}\r\n[[], [59.1], [120, 103], [21.3, 17.2], [154, ...], ..., [], [15.4], [], []]\r\n```\r\nas is the full example from the benchmarks:\r\n<img width=\"694\" alt=\"image\" src=\"https://github.com/scikit-hep/awkward/assets/1068089/bc0cf936-ab4a-4131-9308-d83b90c3ace7\">\r\n",
  "created_at":"2023-12-21T14:14:36Z",
  "id":1866337842,
  "issue":2913,
  "node_id":"IC_kwDODBCWws5vPg4y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-21T14:14:36Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2914?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`a9c2e3b`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/a9c2e3b98c24e9c8687a2f2f746dfb6fd017548f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98% compared to head [(`18cc49e`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2914?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.98%.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-22T22:47:07Z",
  "id":1868114629,
  "issue":2914,
  "node_id":"IC_kwDODBCWws5vWSrF",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2023-12-22T22:47:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"## [Codecov](https://app.codecov.io/gh/scikit-hep/awkward/pull/2915?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`eb004ce`)](https://app.codecov.io/gh/scikit-hep/awkward/commit/eb004ce3fb0f5f8dac907a0fade8d55d0fdf791d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.93% compared to head [(`9d49207`)](https://app.codecov.io/gh/scikit-hep/awkward/pull/2915?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) 81.93%.\n> Report is 1 commits behind head on main.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2023-12-25T19:46:35Z",
  "id":1869098621,
  "issue":2915,
  "node_id":"IC_kwDODBCWws5vaC59",
  "performed_via_github_app":"MDM6QXBwMjU0",
  "reactions":{},
  "updated_at":"2024-01-12T16:15:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@cmoore24-24 FYI, a few layers to this one",
  "created_at":"2023-12-27T17:24:27Z",
  "id":1870493200,
  "issue":2916,
  "node_id":"IC_kwDODBCWws5vfXYQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-27T17:24:27Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is clearly caused by `ak.unflatten` invoking `to_packed()` on the input array. In fact, we don't need to pack all the way down; only down to the active axis.",
  "created_at":"2023-12-27T17:37:46Z",
  "id":1870502175,
  "issue":2916,
  "node_id":"IC_kwDODBCWws5vfZkf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-27T17:37:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"A workaround for `np.real(a)`:\r\n\r\n```python\r\n(a + np.conjugate(a)) / 2\r\n```\r\n\r\nand a workaround for `np.imag(a)`:\r\n\r\n```python\r\n(a - np.conjugate(a)) / 2j\r\n```\r\n\r\nThe [Array API spec](https://data-apis.org/array-api/latest/API_specification/generated/array_api.imag.html) says that these should have floating point type, which can be determined from the complex `a.dtype` using\r\n\r\n```python\r\n.astype(f\"f{a.dtype.itemsize // 2}\")\r\n```\r\n\r\nif it weren't for the\r\n\r\n```\r\nComplexWarning: Casting complex values to real discards the imaginary part\r\n```\r\n\r\nThat's not something that can be fixed with [np.errstate](https://numpy.org/doc/stable/reference/generated/numpy.seterr.html)...",
  "created_at":"2023-12-29T19:16:27Z",
  "id":1872287083,
  "issue":2917,
  "node_id":"IC_kwDODBCWws5vmNVr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-29T19:16:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"(It's not necessary to self-assign! I'm just logging these [as I go](https://github.com/jpivarski/ragged/pull/5). :)\r\n\r\nI found another one: `np.round` is not a ufunc, but you'd think it is.\r\n\r\n```\r\n>>> np.round\r\n<function round at 0x7e6a458334b0>\r\n```\r\n\r\nI'll have a work-around for this in just a moment.",
  "created_at":"2023-12-30T11:57:48Z",
  "id":1872513530,
  "issue":2917,
  "node_id":"IC_kwDODBCWws5vnEn6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-30T11:57:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Given `a`,\r\n\r\n```python\r\na = np.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])\r\n```\r\n\r\nuse [np.modf](https://numpy.org/doc/stable/reference/generated/numpy.modf.html), [np.greater_equal](https://numpy.org/doc/stable/reference/generated/numpy.greater_equal.html), and [np.add](https://numpy.org/doc/stable/reference/generated/numpy.add.html):\r\n\r\n```python\r\nfrac, whole = np.modf(a)\r\nwhole + (frac >= 0.5)\r\n```\r\n\r\nThe [Array API](https://data-apis.org/array-api/latest/API_specification/generated/array_api.round.html) wants the output dtype to be the same as the input dtype, so it's fine that the result is floating-point. The new API also doesn't have a `decimals` argument (which might be why it's not a ufunc).\r\n\r\nThis function needs special handling if the inputs are complex\u2014it must be split into real and imaginary parts, the above procedure must be applied to those parts, and then the result is recombined into complex numbers.\r\n\r\nNumPy's old API and its implementation of the new API both seem to be making a mistake for complex numbers:\r\n\r\n```python\r\n>>> import numpy as np\r\n>>> import numpy.array_api as xp\r\n\r\n>>> np.round(np.asarray([1.1+0.1j, 2.2+0.2j, 5.5+0.5j, 6.6+0.6j]))\r\narray([1.+0.j, 2.+0.j, 6.+0.j, 7.+1.j])\r\n\r\n>>> xp.round(xp.asarray([1.1+0.1j, 2.2+0.2j, 5.5+0.5j, 6.6+0.6j]))\r\nArray([1.+0.j, 2.+0.j, 6.+0.j, 7.+1.j], dtype=complex128)\r\n```\r\n\r\nI think that `5.5+0.5j` should round to `6+1j`, not `6+0j`. I'll report it.",
  "created_at":"2023-12-30T12:10:21Z",
  "id":1872516151,
  "issue":2917,
  "node_id":"IC_kwDODBCWws5vnFQ3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-30T12:10:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Nope:\r\n\r\n> For values exactly halfway between rounded decimal values, NumPy rounds to the nearest even value. Thus 1.5 and 2.5 round to 2.0, -0.5 and 0.5 round to 0.0, etc.\r\n\r\n(The Array API documentation should specify things like this!)\r\n\r\nMy original formulation is also wrong for negative numbers.",
  "created_at":"2023-12-30T12:20:57Z",
  "id":1872517786,
  "issue":2917,
  "node_id":"IC_kwDODBCWws5vnFqa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-30T12:24:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Got it: given `a`\r\n\r\n```python\r\n>>> a = np.array([-2.5, -1.5, -0.6, -0.5, -0.4, 0.4, 0.5, 0.6, 1.5, 2.5])\r\n\r\n>>> np.round(a)\r\narray([-2., -2., -1., -0., -0.,  0.,  0.,  1.,  2.,  2.])\r\n\r\n>>> frac, whole = np.modf(a)\r\n>>> abs_frac = np.absolute(frac)\r\n>>> whole + ((abs_frac == 0.5) * (whole % 2 != 0) + (abs_frac > 0.5)) * np.sign(frac)\r\narray([-2., -2., -1., -0., -0.,  0.,  0.,  1.,  2.,  2.])\r\n```\r\n\r\nAnd then complex numbers are computed by applying this independently to the real and imaginary parts.\r\n\r\n**Edit:** made another correction, so that this works for absolute-value fractions equal to 0.5 and not equal to 0.5.",
  "created_at":"2023-12-30T12:31:47Z",
  "id":1872519532,
  "issue":2917,
  "node_id":"IC_kwDODBCWws5vnGFs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-30T13:10:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"https://github.com/data-apis/array-api/issues/726",
  "created_at":"2023-12-30T12:51:06Z",
  "id":1872522325,
  "issue":2917,
  "node_id":"IC_kwDODBCWws5vnGxV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-30T12:51:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"For round, you can use `np.around`",
  "created_at":"2023-12-30T13:40:52Z",
  "id":1872530407,
  "issue":2917,
  "node_id":"IC_kwDODBCWws5vnIvn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-30T13:40:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Although `np.around is not np.round`, (despite the [np.around](https://numpy.org/doc/stable/reference/generated/numpy.around.html) documentation saying that it's an alias), it's also not a ufunc:\r\n\r\n```python\r\n>>> np.around\r\n<function around at 0x763385fef6b0>\r\n\r\n>>> isinstance(np.round, np.ufunc)\r\nFalse\r\n>>> isinstance(np.around, np.ufunc)\r\nFalse\r\n```\r\n\r\nand so Awkward would need the same NEP-18 overload for `np.around` as it does for `np.round`. I'll add that to the title.",
  "created_at":"2023-12-30T14:40:43Z",
  "id":1872540122,
  "issue":2917,
  "node_id":"IC_kwDODBCWws5vnLHa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-30T14:40:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah now I remember - IIRC at one point I patched awkward to implement the round ufunc, but you could only overload `around`, not `round`. I don't know if that's still the case! ",
  "created_at":"2023-12-30T16:21:32Z",
  "id":1872558681,
  "issue":2917,
  "node_id":"IC_kwDODBCWws5vnPpZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-30T16:21:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's strange, since they're both not ufuncs. I would have thought that both of them would need to have a NEP-18 style overload (`__array_function__`).",
  "created_at":"2023-12-30T18:50:30Z",
  "id":1872583094,
  "issue":2917,
  "node_id":"IC_kwDODBCWws5vnVm2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-12-30T18:50:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 }
]