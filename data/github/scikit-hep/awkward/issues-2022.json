[
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-04T20:39:58Z",
  "comments":1,
  "created_at":"2022-01-04T20:07:34Z",
  "draft":false,
  "id":1093713512,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4whzhK",
  "number":1196,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-04T20:39:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove distutils dependence.",
  "updated_at":"2022-01-04T20:39:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-04T21:29:00Z",
  "comments":1,
  "created_at":"2022-01-04T20:40:57Z",
  "draft":false,
  "id":1093736662,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wh4Tq",
  "number":1197,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-04T21:29:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix ak.singletons for non-optional data.",
  "updated_at":"2022-01-04T21:29:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-04T22:29:11Z",
  "comments":1,
  "created_at":"2022-01-04T21:53:09Z",
  "draft":false,
  "id":1093783432,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wiCCf",
  "number":1198,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-04T22:29:11Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Allow non-array iterables in __array_function__.",
  "updated_at":"2022-01-04T22:29:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I forgot there was a 2.8.1 last time - but now there's a 2.9.0, so let's jump to that.\n",
  "closed_at":"2022-01-07T18:12:13Z",
  "comments":1,
  "created_at":"2022-01-04T22:05:21Z",
  "draft":false,
  "id":1093790633,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wiDgn",
  "number":1199,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-07T18:12:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: bump to pybind11 2.9.0",
  "updated_at":"2022-01-07T18:12:13Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-06-03T09:54:35Z",
  "comments":2,
  "created_at":"2022-01-05T10:06:22Z",
  "draft":true,
  "id":1094182103,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wjToj",
  "number":1200,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"replace shared_ptr with unique_ptr in Forth buffers",
  "updated_at":"2022-09-01T12:29:26Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-05T20:22:42Z",
  "comments":1,
  "created_at":"2022-01-05T19:47:50Z",
  "draft":false,
  "id":1094689960,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wk9mV",
  "number":1201,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-05T20:22:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Implemented v2 ak.to_list and switched all v2 tests to use it.",
  "updated_at":"2022-01-17T19:44:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-05T20:51:47Z",
  "comments":1,
  "created_at":"2022-01-05T20:20:07Z",
  "draft":false,
  "id":1094712519,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wlCWh",
  "number":1202,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-05T20:51:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Better error message for Content::axis_wrap_if_negative.",
  "updated_at":"2022-01-05T20:51:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-05T21:43:44Z",
  "comments":1,
  "created_at":"2022-01-05T20:35:51Z",
  "draft":false,
  "id":1094723751,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wlEsP",
  "number":1203,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-05T21:43:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Don't let ak.to_list act on v2 arrays (finishing #1201).",
  "updated_at":"2022-01-17T19:44:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-05T21:57:44Z",
  "comments":1,
  "created_at":"2022-01-05T20:46:39Z",
  "draft":false,
  "id":1094730719,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wlGJk",
  "number":1204,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-05T21:57:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak._v2.operations.convert.to_numpy is done.",
  "updated_at":"2022-01-17T19:44:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Tests that still need to be converted to v2:\r\n\r\n   * [x] test_0889-ptp.py\r\n   * [x] test_0982-missing-case-in-nonlocal-reducers.py\r\n   * [x] test_0992-correct-ptp-unmasking.py\r\n   * [x] test_1000-fixes-argmax-for-ListOffsetArray-with-nonzero-start.py\r\n   * [x] test_1071-mask-identity-false-should-not-return-option-type.py\r\n   * [x] test_1106-argminmax-axis-None-missing-values.py",
  "closed_at":"2022-01-07T17:15:00Z",
  "comments":1,
  "created_at":"2022-01-06T23:35:13Z",
  "draft":false,
  "id":1095802825,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wojCQ",
  "number":1206,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-07T17:15:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Highlevel non-reducers and improved testing/fixes for reducers.",
  "updated_at":"2022-01-17T19:44:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- [x] ak._v2.operations.convert.from_json\r\n- [x] ak._v2.operations.convert.from_json_file\r\n- [x] ak._v2.operations.convert.to_json\r\n- [x] ak._v2.operations.convert.to_json_file",
  "closed_at":"2022-02-04T16:07:24Z",
  "comments":12,
  "created_at":"2022-01-07T13:37:44Z",
  "draft":false,
  "id":1096324934,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wqPXY",
  "number":1207,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-04T16:07:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"json de-/serialisation from/to string or file",
  "updated_at":"2022-02-04T16:16:54Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@douglasdavis and @martindurant, this adds `ak._v2.Array`, `ak._v2.sum`, and all other functions that will be in the `ak` namespace after version 2.0.\r\n\r\n```python\r\nimport awkward._v2 as ak\r\n```\r\n\r\nwould be a good stepping stone to minimize changes when the 2.0 version is released.",
  "closed_at":"2022-01-07T18:01:41Z",
  "comments":1,
  "created_at":"2022-01-07T16:56:59Z",
  "draft":false,
  "id":1096493292,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wqxkM",
  "number":1208,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-07T18:01:41Z"
  },
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak._v2 namespace is now filled with the right symbols.",
  "updated_at":"2022-01-17T19:44:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nFor a while now (weeks?), the MacOS `tests/**/*.py` have been failing with low probability\u2014there's about a 1 in 5 chance that one of the tests (based on Python 3.6, 3.7, 3.8, 3.9, and 3.10) raises a segfault. [Here is an example.](https://dev.azure.com/jpivarski/Scikit-HEP/_build/results?buildId=8629&view=logs&j=a8b274c7-ba97-5314-7052-52a2bff17ff3&t=70094b08-aa59-59b5-e85c-b680ecf0ab0f) When that happens, the error code may be one of several signals, such as 6, 10, or 11. It often fails while running v2 tests, but that might just be because the v2 tests are after than the v1 tests. The fact that it hasn't been failing consistently in the same test suggests that the signal is invoked during a garbage collection, but the actual error is earlier.\r\n\r\nIf this really is due to a v1 segfault, it's rare enough that we could even ignore it\u2014there won't be many more v1 versions released. If it's due to something in v2, then we really must take care of it. (And if it's narrowed down to an easy v1 issue, then we'd also want to fix it in that case.)\r\n\r\nIf this had been a Linux segfault, I would run the tests locally many times in order to reproduce it (e.g. run it 100 times to virtually guarantee the P \u2248 1/25 case, then I would bisect the tests to find at least one that raises it. It might be necessary to insert explicit `gc.collect()` calls to trigger it in absence of many other tests. However, the bug only manifests itself on MacOS, and I don't have access to a Mac to do that intensive testing on. (Doing it through CI would be awful because it would add the compilation time to each run.)\r\n\r\nDoes anyone (@ianna, @ioanaif, @swishdiff, @agoose77, ...) have a Mac and is willing to try that bisection search? Maybe my first question should be if any Mac users have encountered this in their local tests (assuming you've been running enough tests recently).",
  "closed_at":"2022-01-21T22:08:49Z",
  "comments":18,
  "created_at":"2022-01-07T17:29:32Z",
  "id":1096519729,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5BW5Ax",
  "number":1209,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"MacOS tests randomly segfault",
  "updated_at":"2022-01-21T22:08:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Add @BioGeek as a contributor for doc.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward-1.0/pull/1187#issuecomment-1007614770)",
  "closed_at":"2022-01-07T18:02:13Z",
  "comments":0,
  "created_at":"2022-01-07T18:01:04Z",
  "draft":false,
  "id":1096542679,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wq7hB",
  "number":1210,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-07T18:02:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add BioGeek as a contributor for doc",
  "updated_at":"2022-01-07T18:02:14Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"  * - [x] test_0115-generic-reducer-operation.py\r\n  * - [x] test_1183-bugs-found-by-dask-project-2.py\r\n  * - [x] test_1162-ak-from_json_schema.py\r\n  * - [x] test_0138-emptyarray-type.py\r\n  * - [x] test_0150-flatten.py\r\n  * - [x] test_0166-0167-0170-random-issues.py\r\n  * - [x] test_0184-concatenate-operation.py\r\n  * - [x] test_0222-count-with-axis0.py\r\n  * - [x] test_0224-arrow-to-awkward.py\r\n  * - [x] test_0264-reduce-last-empty.py\r\n  * - [x] test_0315-integerindex.py\r\n  * - [x] test_0348-form-keys.py\r\n  * - [x] test_0404-array-validity-check.py\r\n  * - [x] test_0410-fix-argminmax-positions-for-missing-values.py\r\n  * - [x] test_0447-preserve-regularness-in-reduce.py\r\n  * - [x] test_0449-merge-many-arrays-in-one-pass.py\r\n  * - [x] test_0499-getitem-indexedarray-bug.py\r\n  * - [x] test_0504-block-ufuncs-for-strings.py\r\n  * - [x] test_0527-fix-unionarray-ufuncs-and-parameters-in-merging.py\r\n  * - [x] test_0557-min-max-initial-argument.py\r\n  * - [x] test_0593-preserve-nullability-in-arrow-and-parquet.py\r\n  * - [x] test_0652-tests-of-complex-numbers.py\r\n  * - [x] test_0828-arrow-datatype-null.py\r\n  * - [x] test_0835-datetime-type-pandas.py\r\n  * - [x] test_0835-datetime-type.py\r\n  * - [x] test_0835-datetime-type-pyarrow.py\r\n  * - [x] test_0875-arrow-null-type.py\r\n  * - [x] test_0884-index-and-identifier-refactoring.py\r\n  * - [x] test_0889-ptp.py\r\n  * - [x] test_0896-content-classes-refactoring.py\r\n  * - [x] test_0906-arrow-fixed-size-list-type.py\r\n  * - [x] test_0912-packed.py\r\n  * - [x] test_0914-types-and-forms.py\r\n  * - [x] test_0916-datetime-values-astype.py\r\n  * - [x] test_0927-numpy-array-nbytes.py\r\n  * - [x] test_0958-new-forms-must-accept-old-form-json.py\r\n  * - [x] test_0959-_getitem_array-implementation.py\r\n  * - [x] test_0962-convert-between-old-and-new-arrays.py\r\n  * - [x] test_0982-missing-case-in-nonlocal-reducers.py\r\n  * - [x] test_0992-correct-ptp-unmasking.py\r\n  * - [x] test_1000-fixes-argmax-for-ListOffsetArray-with-nonzero-start.py\r\n  * - [x] test_1006-packed-regular-array-zero-size.py\r\n  * - [x] test_1007-from_buffers-empty-ndarray.py\r\n  * - [x] test_1031b-start-getitem_next-specialized.py\r\n  * - [x] test_1031-start-getitem_next.py\r\n  * - [x] test_1059-localindex.py\r\n  * - [x] test_1066-to_numpy-masked-structured-array.py\r\n  * - [x] test_1071-mask-identity-false-should-not-return-option-type.py\r\n  * - [x] test_1072-sort.py\r\n  * - [x] test_1074-combinations.py\r\n  * - [x] test_1075-validityerror.py\r\n  * - [x] test_1106-argminmax-axis-None-missing-values.py\r\n  * - [x] test_1110-type-tracer-1.py\r\n  * - [x] test_1116-project-maskedarrays.py\r\n  * - [x] test_1125-to-arrow-from-arrow.py\r\n  * - [x] test_1132-utility-methods-for-highlevel-functions.py\r\n  * - [x] test_1134-from-buffers-to-buffers.py\r\n  * - [x] test_1135-rpad-operation.py\r\n  * - [x] test_1137-num.py\r\n  * - [x] test_1142-numbers-to-type.py\r\n  * - [x] test_1149-datetime-sort.py\r\n  * - [x] test_1154-arrow-tables-should-preserve-parameters.py\r\n",
  "closed_at":"2022-01-13T01:32:49Z",
  "comments":1,
  "created_at":"2022-01-07T23:48:17Z",
  "draft":false,
  "id":1096763470,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wroJk",
  "number":1211,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-13T01:32:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Removed v1_to_v2 from all v2 tests",
  "updated_at":"2022-01-17T19:44:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-11T23:07:01Z",
  "comments":8,
  "created_at":"2022-01-10T17:14:42Z",
  "draft":false,
  "id":1098164903,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wv2D4",
  "number":1212,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-11T23:07:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Drop Win32 Py3.10 test and musllinux in deployment.",
  "updated_at":"2022-01-11T23:07:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/setup-cfg-fmt: v1.17.0 \u2192 v1.20.0](https://github.com/asottile/setup-cfg-fmt/compare/v1.17.0...v1.20.0)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-01-10T20:38:59Z",
  "comments":1,
  "created_at":"2022-01-10T19:42:50Z",
  "draft":false,
  "id":1098301114,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wwScr",
  "number":1213,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-10T20:38:59Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-01-10T20:39:00Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-21T17:08:14Z",
  "comments":4,
  "created_at":"2022-01-11T22:03:16Z",
  "draft":false,
  "id":1099657630,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4w0uit",
  "number":1214,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-21T17:08:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: drop parameters for flattened RecordArray",
  "updated_at":"2022-01-21T17:08:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@douglasdavis This fixes the NotImplementedError you mentioned in Slack and also an error with greater-than-depth-1 nested booleans:\r\n\r\n```python\r\n>>> a = ak._v2.highlevel.Array([[[0, 1, 2]], [[], [3, 4]], [], [[5], [6, 7, 8, 9]]])\r\n>>> a[a % 2 == 0].show()\r\n```\r\n\r\nshould not be\r\n\r\n```python\r\n[[[1, 0, 1]],\r\n [[], [3, 4]],\r\n [],\r\n [[5], [7, 6, 7, 6]]]\r\n```\r\n\r\nbut should be\r\n\r\n```python\r\n[[[0, 2]],\r\n [[], [4]],\r\n [],\r\n [[], [6, 8]]]\r\n```\r\n\r\n(The booleans were being interpreted as integer positions, `0` and `1`, for lists of lists of numbers and deeper. A recursion wasn't getting passed on as it should be.)",
  "closed_at":"2022-01-12T00:13:18Z",
  "comments":1,
  "created_at":"2022-01-11T23:37:21Z",
  "draft":false,
  "id":1099716951,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4w069O",
  "number":1215,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-12T00:13:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Fixed handling of list-nested boolean slices.",
  "updated_at":"2022-01-17T19:44:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.8.0rc2\n\n### Description and code to reproduce\n\nLooks like it would be useful to add some code to consider when `len(self._layout)` is unknown in a typetracer array\r\n\r\n```python\r\nIn [29]: import awkward._v2 as ak\r\n\r\nIn [30]: x = ak.Array([[1, 2, 3], [], [4]])\r\n\r\nIn [31]: x.layout.typetracer\r\nOut[31]: \r\n<ListOffsetArray len='??'>\r\n    <offsets><Index dtype='int64' len='??'>[?? ... ??]</Index></offsets>\r\n    <content><NumpyArray dtype='int64' len='??'>[?? ... ??]</NumpyArray></content>\r\n</ListOffsetArray>\r\n\r\nIn [32]: x_tt = ak.Array(x.layout.typetracer)\r\n\r\nIn [33]: x_tt\r\nOut[33]: ---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n~/.pyenv/versions/3.9.9/envs/dask-awkward/lib/python3.9/site-packages/IPython/core/formatters.py in __call__(self, obj)\r\n    700                 type_pprinters=self.type_printers,\r\n    701                 deferred_pprinters=self.deferred_printers)\r\n--> 702             printer.pretty(obj)\r\n    703             printer.flush()\r\n    704             return stream.getvalue()\r\n\r\n~/.pyenv/versions/3.9.9/envs/dask-awkward/lib/python3.9/site-packages/IPython/lib/pretty.py in pretty(self, obj)\r\n    392                         if cls is not object \\\r\n    393                                 and callable(cls.__dict__.get('__repr__')):\r\n--> 394                             return _repr_pprint(obj, self, cycle)\r\n    395 \r\n    396             return _default_pprint(obj, self, cycle)\r\n\r\n~/.pyenv/versions/3.9.9/envs/dask-awkward/lib/python3.9/site-packages/IPython/lib/pretty.py in _repr_pprint(obj, p, cycle)\r\n    698     \"\"\"A pprint that just redirects to the normal repr function.\"\"\"\r\n    699     # Find newlines and replace them with p.break_()\r\n--> 700     output = repr(obj)\r\n    701     lines = output.splitlines()\r\n    702     with p.group():\r\n\r\n~/.pyenv/versions/3.9.9/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/highlevel.py in __repr__(self)\r\n   1248 \r\n   1249         pytype = type(self).__name__\r\n-> 1250         valuestr = awkward._v2._prettyprint.valuestr(self, 1, 50)\r\n   1251         length = max(10, 80 - len(pytype) - 10 - len(valuestr))\r\n   1252         typestr = repr(str(self.type))[1:-1]\r\n\r\n~/.pyenv/versions/3.9.9/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/_prettyprint.py in valuestr(data, limit_rows, limit_cols)\r\n    160 def valuestr(data, limit_rows, limit_cols):\r\n    161     if limit_rows <= 1:\r\n--> 162         _, strs = valuestr_horiz(data, limit_cols)\r\n    163         return \"\".join(strs)\r\n    164 \r\n\r\n~/.pyenv/versions/3.9.9/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/_prettyprint.py in valuestr_horiz(data, limit_cols)\r\n     42         limit_cols -= 2\r\n     43 \r\n---> 44         if len(data) == 0:\r\n     45             return 2, front + back\r\n     46 \r\n\r\n~/.pyenv/versions/3.9.9/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/highlevel.py in __len__(self)\r\n    539         is `3`, not `5`.\r\n    540         \"\"\"\r\n--> 541         return len(self._layout)\r\n    542 \r\n    543     def __iter__(self):\r\n\r\nTypeError: 'UnknownLengthType' object cannot be interpreted as an integer\r\n```",
  "closed_at":"2022-01-13T15:19:50Z",
  "comments":1,
  "created_at":"2022-01-12T16:06:07Z",
  "id":1100518110,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5BmJLe",
  "number":1216,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"typetracer array repr fails due to unknown length",
  "updated_at":"2022-01-13T15:19:50Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-13T21:19:00Z",
  "comments":2,
  "created_at":"2022-01-12T17:25:19Z",
  "draft":false,
  "id":1100603350,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4w3wzn",
  "number":1217,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-13T21:19:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.flatten",
  "updated_at":"2022-01-13T21:19:01Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@douglasdavis, here's what it looks like with only the type section (no values section).\r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n\r\n>>> x = ak.Array([[1, 2, 3], [], [4]])\r\n>>> ak.Array(x.layout.typetracer)\r\n<Array-typetracer type='?? * var * int64'>\r\n\r\n>>> x = ak.Record({\"x\": [1, 2, 3], \"y\": 1.1})\r\n>>> ak.Record(ak.record.Record(x.layout.array.typetracer, 0))\r\n<Record-typetracer type='{x: var * int64, y: float64}'>\r\n```",
  "closed_at":"2022-01-13T15:19:50Z",
  "comments":1,
  "created_at":"2022-01-12T18:32:52Z",
  "draft":false,
  "id":1100663546,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4w39KA",
  "number":1218,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-13T15:19:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Make highlevel __repr__ safe for typetracers.",
  "updated_at":"2022-01-17T19:44:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-13T15:00:09Z",
  "comments":1,
  "created_at":"2022-01-13T07:26:41Z",
  "draft":false,
  "id":1101311168,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4w6JFU",
  "number":1219,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-13T15:00:09Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.mask",
  "updated_at":"2022-01-13T15:00:09Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-13T18:36:47Z",
  "comments":1,
  "created_at":"2022-01-13T07:30:39Z",
  "draft":false,
  "id":1101314845,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4w6J3c",
  "number":1220,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-13T18:36:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.where",
  "updated_at":"2022-01-13T18:36:48Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-13T14:44:03Z",
  "comments":1,
  "created_at":"2022-01-13T08:32:57Z",
  "draft":false,
  "id":1101371841,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4w6WBa",
  "number":1221,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-13T14:44:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.local_index",
  "updated_at":"2022-01-13T14:44:04Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-13T14:36:39Z",
  "comments":1,
  "created_at":"2022-01-13T09:06:16Z",
  "draft":false,
  "id":1101405859,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4w6dSc",
  "number":1222,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-13T14:36:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.ravel",
  "updated_at":"2022-01-13T14:36:40Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-13T15:44:13Z",
  "comments":1,
  "created_at":"2022-01-13T14:57:22Z",
  "draft":false,
  "id":1101900745,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4w8KsU",
  "number":1223,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-13T15:44:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Restore pybind11 2.9.0.",
  "updated_at":"2022-01-13T15:44:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I've found myself having a need for POWER wheels for awkward array. What do you think about including them in the PyPI releases? I'm excluding Python 3.6 and 3.7 to shrink the build matrix but it's up to you if you want to keep that part.",
  "closed_at":"2022-01-20T16:31:16Z",
  "comments":7,
  "created_at":"2022-01-13T16:12:38Z",
  "draft":false,
  "id":1101989748,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4w8deM",
  "number":1224,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-20T16:31:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build wheels for ppc64le",
  "updated_at":"2024-01-18T17:09:01Z",
  "user":"MDQ6VXNlcjUyMjA1MzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-17T20:16:18Z",
  "comments":4,
  "created_at":"2022-01-14T14:17:00Z",
  "draft":false,
  "id":1103698310,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xCctO",
  "number":1225,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-17T20:16:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.zip",
  "updated_at":"2022-01-17T20:16:19Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-17T18:55:27Z",
  "comments":1,
  "created_at":"2022-01-17T13:15:28Z",
  "draft":false,
  "id":1105843629,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xJhO1",
  "number":1226,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-17T18:55:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.num",
  "updated_at":"2022-01-17T18:55:28Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":null,
  "closed_at":"2022-01-17T19:28:33Z",
  "comments":11,
  "created_at":"2022-01-17T17:45:04Z",
  "draft":false,
  "id":1106122141,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xKcBc",
  "number":1227,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix typo",
  "updated_at":"2022-01-17T19:32:24Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This replaces #1227, @martindurant.",
  "closed_at":"2022-01-17T19:46:48Z",
  "comments":1,
  "created_at":"2022-01-17T19:09:18Z",
  "draft":false,
  "id":1106181884,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xKof8",
  "number":1228,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-17T19:46:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Redo PR #1227: fixing 'emptyArray' typo.",
  "updated_at":"2022-01-17T19:46:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-19T19:45:03Z",
  "comments":1,
  "created_at":"2022-01-18T15:06:42Z",
  "draft":false,
  "id":1107018426,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xNWYe",
  "number":1229,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-19T19:45:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.pad_none",
  "updated_at":"2022-01-19T19:45:04Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\r\n\r\nHi all, \r\n\r\nI needed some Awkward-aware random functions today, and implemented some simple routines for `choice`, `shuffle`, and `random`. Whilst it is reasonably simple to implement these using `recursively_apply` and `broadcast_and_apply`, e.g.\r\n```python3\r\ndef random(size=None, highlevel=True, behavior=None):\r\n    if size is None:\r\n        size = 1\r\n\r\n    if isinstance(size, int):\r\n        return ak.from_numpy(\r\n            np.random.random(size=size), highlevel=highlevel, behavior=behavior\r\n        )\r\n\r\n    def getfunction(layout, depth):\r\n        if not isinstance(layout, ak.layout.NumpyArray):\r\n            return\r\n\r\n        size = np.asarray(layout)\r\n        offset = np.zeros(size.size + 1, dtype=np.uint64)\r\n        offset[1:] = np.cumsum(size)\r\n\r\n        return lambda: ak.layout.ListOffsetArray64(\r\n            ak.layout.Index64(offset),\r\n            ak.layout.NumpyArray(np.random.random(size=offset[-1])),\r\n        )\r\n\r\n    layout = ak.to_layout(size, allow_other=False)\r\n    out = ak._util.recursively_apply(layout, getfunction)\r\n    return ak._util.maybe_wrap_like(out, size, behavior, highlevel)\r\n```    \r\nthese routines are important enough that I feel they deserve their own submodule in the Awkward namespace, e.g. `ak.random`. \r\nEqually, I don't think we want to implement _too_ many functions from NumPy. Every function we re-implement increases our maintenance burden. I believe that these three functions cover many of the use cases:\r\n- sampling with replacement: `choice(array, size=None, axis=-1, rng=None)`\r\n- sampling without replacement: `shuffle(array, axis=-1, rng=None)`\r\n- random floats: `random(size=None, axis=-1, rng=None)`\r\n\r\nIn each of these cases, `size` is either an `int`, `None`, or an `ak.Array`.\r\n\r\nWe could also add `randint`, which is easily implemented in terms of `random`, so wouldn't be another kernel.\r\n\r\nThis issue is just a \"to-do\" tracker for my benefit for now. Does anyone have any thoughts?\r\n\r\n",
  "closed_at":null,
  "comments":8,
  "created_at":"2022-01-18T22:20:16Z",
  "id":1107419565,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5CAeGt",
  "number":1230,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"New random functions",
  "updated_at":"2022-04-15T19:49:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The `ast` library had an API change for python >= 3.8. https://bugs.python.org/issue40430. I couldn't update the script to work with all versions of Python, since doing that leads to more dead ends. After talking to Jim, the generated kernels will be checked in to the source tree very soon, so getting the script to work on any recent Python version will work for now.",
  "closed_at":"2022-01-20T16:31:41Z",
  "comments":3,
  "created_at":"2022-01-19T10:29:43Z",
  "draft":false,
  "id":1107926291,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xQTAd",
  "number":1231,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-20T16:31:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Updated the generate-cuda script. Works for py >= 3.8",
  "updated_at":"2022-01-20T16:31:42Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"address issue #1209 ",
  "closed_at":"2022-01-19T17:46:07Z",
  "comments":7,
  "created_at":"2022-01-19T12:22:05Z",
  "draft":false,
  "id":1108036647,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xQqj9",
  "number":1232,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-19T17:46:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"macos segfault bugfix",
  "updated_at":"2022-01-19T19:18:07Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-20T16:56:38Z",
  "comments":6,
  "created_at":"2022-01-19T13:22:33Z",
  "draft":false,
  "id":1108096176,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xQ3N7",
  "number":1233,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-20T16:56:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.with_name",
  "updated_at":"2022-01-20T16:56:38Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-21T17:53:53Z",
  "comments":1,
  "created_at":"2022-01-19T16:48:12Z",
  "draft":false,
  "id":1108329374,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xRob5",
  "number":1234,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-21T17:53:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.type and ak.values_astype",
  "updated_at":"2022-01-21T17:53:54Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-20T16:27:26Z",
  "comments":10,
  "created_at":"2022-01-19T19:17:40Z",
  "draft":false,
  "id":1108467065,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xSE9c",
  "number":1237,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-20T16:27:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove Windows 32-bit from the Python 3.10 build.",
  "updated_at":"2022-01-20T16:27:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Reverts scikit-hep/awkward-1.0#1224\r\n\r\n@chrisburr I should have done a manual CD test, first. It didn't deploy: https://github.com/scikit-hep/awkward-1.0/actions/runs/1724731128\r\n\r\nI'm reverting this to release 1.8.0rc3. We'll revisit it!",
  "closed_at":"2022-01-20T19:38:49Z",
  "comments":4,
  "created_at":"2022-01-20T19:38:31Z",
  "draft":false,
  "id":1109694076,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xWDh5",
  "number":1239,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-20T19:38:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Revert \"Build wheels for ppc64le\"",
  "updated_at":"2022-01-20T21:26:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Tests of Numba to convert:\r\n\r\n  - [X] ~~test_0056b-partitioned-array-numba.py~~ no more partitioned arrays\r\n  - [X] ~~test_0057b-virtual-array-numba.py~~ no more virtual arrays\r\n  - [x] test_0124-strings-in-numba.py\r\n  - [x] test_0127b-tomask-operation-numba.py\r\n  - [x] test_0290-bug-fixes-for-hats.py\r\n  - [X] ~~test_0390-virtual-forms.py~~ no more virtual arrays\r\n  - [x] test_0395-fix-numba-indexedarray.py\r\n  - [x] test_0494-numba-array-contains.py\r\n  - [x] test_0549-numba-array-asarray.py\r\n  - [x] test_0559-fix-booleans-in-numba.py\r\n  - [x] test_0572-numba-array-ndim.py\r\n  - [X] ~~test_0776-numba-booleans-in-virtual-array.py~~ no more virtual arrays\r\n  - [X] ~~test_0871-nested-virtual-in-numba.py~~ no more virtual arrays\r\n  - [x] test_0903-ArrayView-expects-contiguous-NumpyArrays.py\r\n\r\nNeed to implement ArrayBuilder in Numba for these:\r\n\r\n  - [x] test_0118-numba-cpointers.py\r\n  - [x] test_0397-arrays-as-constants-in-numba.py\r\n\r\nNeed to implement matrix multiplication for these (another PR):\r\n\r\n  - ~~test_0521-matrix-multiplication.py~~\r\n  - ~~test_0846-matrix-multiplication-numpy.py~~\r\n",
  "closed_at":"2022-02-05T00:56:33Z",
  "comments":1,
  "created_at":"2022-01-20T22:36:23Z",
  "draft":false,
  "id":1109832189,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xWgX8",
  "number":1240,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-05T00:56:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: getting Numba to work for v2 arrays",
  "updated_at":"2022-02-18T02:17:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.5.1\n\n### Description and code to reproduce\n\nI might be misunderstanding something, but for a non-jagged, 1-D array I would expect `ak.sum` to return the same result independent of the axis. However, only `axis = None` agrees.\r\n\r\nThe example code\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nwith open('eventweights.npy', 'rb') as f:\r\n        np_array = np.load(f)\r\n    \r\n    np_sum = np.sum(np_array) # calls ak.sum for awkward arrays\r\n    for axis in [None, -1, 0]:\r\n        ak_sum = ak.sum(np_array, axis=axis)\r\n        print(f\"axis = {axis}: np_sum = {np_sum}; ak_sum = {ak_sum}; diff = {np_sum - ak_sum}\")\r\n```\r\nproduces\r\n\r\n```\r\naxis = None: np_sum = 75.38936614990234; ak_sum = 75.38936614990234; diff = 0.0\r\naxis =   -1: np_sum = 75.38936614990234; ak_sum = 75.3895034790039; diff = -0.0001373291015625\r\naxis =    0: np_sum = 75.38936614990234; ak_sum = 75.3895034790039; diff = -0.0001373291015625\r\n```\r\nwhich is a small, but relevant difference (the example uses event weights).\r\n\r\nInput file: [eventweights.zip](https://github.com/scikit-hep/awkward-1.0/files/7912165/eventweights.zip)\r\n\r\nNote: I added the input file which includes `1486` entries which are typically `< 1`. I tried to reproduce the issue with smaller numpy arrays, but there they all agree. We've seen issues like these in the past with `TH2F` vs `TH2D`, but I am not sure what the culprit is here\r\n\r\nIs that expected or a bug?",
  "closed_at":"2022-01-24T21:24:50Z",
  "comments":9,
  "created_at":"2022-01-21T09:57:55Z",
  "id":1110275329,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5CLXUB",
  "number":1241,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.sum on flat 1-D numpy array: different results between axis=None and axis=-1",
  "updated_at":"2022-01-24T21:24:50Z",
  "user":"MDQ6VXNlcjEyMTMyNzY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-01-27T20:52:49Z",
  "comments":1,
  "created_at":"2022-01-21T14:09:23Z",
  "draft":false,
  "id":1110510708,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xYtpZ",
  "number":1242,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-27T20:52:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.parameters",
  "updated_at":"2022-01-27T20:52:49Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This cleans up the recommendations produced for cuda-build.sh. I don't think this is checked in CI, and I haven't run the changes. Not sure the old one wwas working properly either. This really needs to be further redone, it should not be injecting things like the WHEEL file; wheels are hashed and can't be edited like this. And there are ways to indicate they are not pure Python other than hacking it like this. But this is a start. CC @swishdiff \n",
  "closed_at":"2022-01-27T20:34:57Z",
  "comments":11,
  "created_at":"2022-01-21T15:44:35Z",
  "draft":false,
  "id":1110616123,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xZDz6",
  "number":1243,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-27T20:34:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"style: add shellcheck",
  "updated_at":"2022-01-27T20:34:57Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is completely automated. There are lots of further cleanups, but this is the automated stuff.\n",
  "closed_at":"2022-01-21T22:39:08Z",
  "comments":12,
  "created_at":"2022-01-21T15:50:41Z",
  "draft":false,
  "id":1110625093,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xZFzZ",
  "number":1244,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-21T22:39:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"style: pyupgrade to 3.6",
  "updated_at":"2022-01-21T22:51:11Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This was raised on Slack by @martindurant and @douglasdavis.\r\n\r\n**Before:**\r\n\r\n```python\r\nIn [1]: import awkward._v2 as ak, numpy as np\r\n\r\nIn [2]: x = np.ones((100, 100, 100))\r\n\r\nIn [3]: arr = ak.Array(x)\r\n\r\nIn [4]: %timeit ak.sum(arr, axis=None)\r\n813 \u00b5s \u00b1 6.08 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1,000 loops each)\r\n\r\nIn [5]: %timeit x.sum()\r\n332 \u00b5s \u00b1 5.38 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1,000 loops each)\r\n```\r\n\r\n**After:**\r\n\r\n```python\r\nIn [1]: import awkward._v2 as ak, numpy as np\r\n\r\nIn [2]: x = np.ones((100, 100, 100))\r\n\r\nIn [3]: arr = ak.Array(x)\r\n\r\nIn [4]: %timeit ak.sum(arr, axis=None)\r\n317 \u00b5s \u00b1 20.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1,000 loops each)\r\n\r\nIn [5]: %timeit x.sum()\r\n295 \u00b5s \u00b1 8.65 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1,000 loops each)\r\n```\r\n\r\nIt removes an unnecessary concatenation.",
  "closed_at":"2022-01-21T20:00:26Z",
  "comments":1,
  "created_at":"2022-01-21T19:30:37Z",
  "draft":false,
  "id":1110820512,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xZurw",
  "number":1245,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-21T20:00:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: layout.completely_flatten should not concatenate (performance issue).",
  "updated_at":"2022-02-18T02:16:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Followup to #1244 with some simi-manual and manual changes.\r\n\r\n\r\n- chore: drop sys.version_info checks\r\n- chore: drop py27,py35,py36 checks\r\n- chore: clean up things that mention 'ython 2/3'\r\n- chore: clean up ImportErrors\r\n- chore: replace repr with !r\r\n- chore: remove `__div__`\r\n\r\nI'd recommend always using the idiom `sys.version_info >= (3, 8)` or similar - never define a `py36` constant, it's less readable and far less automatable / statically typeable. Especially since there was one for >= 3.6 and one for <= 3.6! :)\r\n",
  "closed_at":"2022-01-24T23:13:03Z",
  "comments":2,
  "created_at":"2022-01-21T22:53:30Z",
  "draft":false,
  "id":1111024001,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xabae",
  "number":1246,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-24T23:13:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"style: further cleanup for Python 3.6+",
  "updated_at":"2022-01-24T23:13:04Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.8.3rc0\n\n### Description and code to reproduce\n\nThis bug is most easily triggered when invoking a NumPy function with a rectilinear Awkward argument and NumPy rectilinear argument, e.g. `np.isin`:\r\n```pycon\r\n>>> reference = np.r_[1,2,3,4]\r\n>>> test = ak.Array([1,2,9,0])\r\n>>> np.isin(test, reference)\r\n```\r\n\r\nwhich gives the following traceback:\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<__array_function__ internals>\", line 5, in isin\r\n  File \"/home/angus/Git/awkward-1.0/awkward/highlevel.py\", line 1440, in __array_function__\r\n    return ak._connect._numpy.array_function(func, types, args, kwargs)\r\n  File \"/home/angus/Git/awkward-1.0/awkward/_connect/_numpy.py\", line 40, in array_function\r\n    args = tuple(_to_rectilinear(x) for x in args)\r\n  File \"/home/angus/Git/awkward-1.0/awkward/_connect/_numpy.py\", line 40, in <genexpr>\r\n    args = tuple(_to_rectilinear(x) for x in args)\r\n  File \"/home/angus/Git/awkward-1.0/awkward/_connect/_numpy.py\", line 32, in _to_rectilinear\r\n    return nplike.to_rectilinear(arg, allow_missing=False)\r\n  File \"/home/angus/Git/awkward-1.0/awkward/nplike.py\", line 422, in to_rectilinear\r\n    return [self.to_rectilinear(x, *args, **kwargs) for x in array]\r\n  File \"/home/angus/Git/awkward-1.0/awkward/nplike.py\", line 422, in <listcomp>\r\n    return [self.to_rectilinear(x, *args, **kwargs) for x in array]\r\n  File \"/home/angus/Git/awkward-1.0/awkward/nplike.py\", line 425, in to_rectilinear\r\n    raise TypeError(\"to_rectilinear argument must be iterable\")\r\nTypeError: to_rectilinear argument must be iterable\r\n```\r\n\r\nI think we need to handle the case where an array is `np.ndarray`. ",
  "closed_at":"2022-01-25T09:44:54Z",
  "comments":0,
  "created_at":"2022-01-24T13:19:32Z",
  "id":1112640020,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5CUYoU",
  "number":1247,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`NumpyLike.to_rectilinear` fails for NumPy arrays",
  "updated_at":"2022-01-25T09:44:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1247",
  "closed_at":"2022-01-25T09:44:54Z",
  "comments":2,
  "created_at":"2022-01-24T13:23:56Z",
  "draft":false,
  "id":1112645750,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xfufl",
  "number":1248,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-25T09:44:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: support mixed array types in `NumpyLike.to_rectilinear`",
  "updated_at":"2022-01-25T09:44:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1193\r\nRequires #1279\r\n\r\nTo implement this feature, I introduce a temporary union. Let me know if there's a more elegant way to do this! Given that, unlike most other layout transformers, we need to modify several layers, I've split the transformation process into two different transforms - one to locate the first layout, another to actually perform the transformation.\r\n\r\nI also wondered whether it would be possible to write the new recursive `getfunction`s with an early-return style instead of explicitly handling each case? In the past, the return value had a lot of interpretation modes, so it was more dangerous. With v2, I wonder if we could re-consider this position?",
  "closed_at":"2022-02-10T23:25:03Z",
  "comments":5,
  "created_at":"2022-01-24T15:37:52Z",
  "draft":false,
  "id":1112806652,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xgQiD",
  "number":1249,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-10T23:25:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: support nested option types in `ak.is_none`",
  "updated_at":"2022-02-10T23:25:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"As we explored in #1241, sometimes the [naive sum that Awkward is currently performing](https://github.com/scikit-hep/awkward-1.0/blob/71b0a16ccf093fadc7892bd59362e43f0979e904/src/cpu-kernels/awkward_reduce_sum.cpp#L7-L21) produces different results to NumPy.  Any sum with finite-precision floats is algorithm dependent, but there are techniques that we can use to minimise the accumulation of error. There are two commonly used methods here:\r\n- [Kahan summation](https://en.wikipedia.org/wiki/Kahan_summation_algorithm)\r\n- [Pairwise summation](https://en.wikipedia.org/wiki/Pairwise_summation)\r\n\r\nKahan summation theoretically accumulates O(1) error growth for a sum of `n` numbers, whilst pairwise summation has an error bound of `log n`. Performance-wise, pairwise summation performs the same number of additions, and requires only a few extra operations in the process of partitioning the array into an (unordered) binary tree. In practice, NumPy uses pairwise summation in [its sum reducer](https://github.com/numpy/numpy/blob/c30876f6411ef0c5365a8e4cf40cc3d4ba41196c/numpy/core/src/umath/loops_utils.h.src#L77-L138)\r\n\r\nImplementing one of these routines for Awkward might present a slightly greater challenge, as the reducer is currently given a flat series of parent, index pointers rather than a per-sum contiguous array.",
  "closed_at":null,
  "comments":1,
  "created_at":"2022-01-25T09:32:11Z",
  "id":1113642695,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5CYNbH",
  "number":1250,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Use improved summation routine in sum kernels",
  "updated_at":"2023-06-06T20:56:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Description of new feature\r\n\r\nTthis issue is linked to the discussion discussion #1251. I think it would be useful to have a `__delitem__` method for `ak.Array`/`ak.Record`/etc..  objects in v2 to allow a user to remove a field from an awkard array. Ideally with some wrapping function that does the opposite to `with_field` (e.g. `ak.drop_field`) \r\nFor example:\r\n```\r\narray = ak.Array([{\"x\": 20, \"y\": [1, 2, 3, 4, 5]}])\r\narray.__delitem__(\"x\") \r\narray.fields\r\n>>> [\"y\"]\r\n```\r\n\r\nThanks, \r\nMo\r\n\r\n",
  "closed_at":"2022-04-15T19:41:48Z",
  "comments":2,
  "created_at":"2022-01-26T19:33:04Z",
  "id":1115408776,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Ce8mI",
  "number":1253,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Adding a `__delitem__``` method to awkward arrays in V2",
  "updated_at":"2022-04-15T19:41:48Z",
  "user":"MDQ6VXNlcjg5MTQ3NDc4"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Editable installs still don't work, but at least this allows building more than once.\n",
  "closed_at":"2022-01-27T18:40:19Z",
  "comments":1,
  "created_at":"2022-01-27T05:44:43Z",
  "draft":false,
  "id":1115799316,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xp4hO",
  "number":1254,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-27T18:40:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: building twice was broken",
  "updated_at":"2022-01-27T18:40:19Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-01-27T23:04:34Z",
  "comments":2,
  "created_at":"2022-01-27T05:47:39Z",
  "draft":false,
  "id":1115800776,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xp40Y",
  "number":1255,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-27T23:04:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pytest config, 6.0+",
  "updated_at":"2022-01-27T23:04:34Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\n1.7.0\r\n\r\n### Description and code to reproduce\r\n\r\nUsing `ak.singletons(array)` does not produce the expected behaviour unless at least one element of `array` is `None`. Instead, it leaves `array` unchanged.\r\n\r\n\r\n`a = ak.Array([1,5,6,2,7,None])`\r\n`b = ak.Array([1,5,6,2,7])`\r\n\r\n`print(ak.singletons(a))`\r\n`print(ak.singletons(b))`\r\n\r\nproduces\r\n\r\n> [[1], [5], [6], [2], [7], []]\r\n\r\n> [1, 5, 6, 2, 7]\r\n\r\n\r\nIf this _is_ the desired behaviour, it should be made clear in the documentation.",
  "closed_at":"2022-01-27T20:54:03Z",
  "comments":1,
  "created_at":"2022-01-27T11:40:18Z",
  "id":1116107501,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ChnLt",
  "number":1256,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"singletons only created when at least one element is None",
  "updated_at":"2022-01-27T20:54:11Z",
  "user":"MDQ6VXNlcjY4NDgzODQ="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@ianna, @ioanaif, @henryiii, @agoose77, @swishdiff, @reikdas, @SantamRC, @nsmith-: we're going to be referencing Awkward Array in a paper @aryan26roy is writing, and Zenodo's auto-generated list of authors is too large. Also, I've been meaning to do this ever since scikit-hep/scikit-hep/pull/159 (also for Uproot, though that will be another day).\r\n\r\nThis list includes\r\n\r\n   1. All the Princeton people who are explicitly working on this project: me, Yana, Ioana, Henry, and soon Angus.\r\n   2. All the students whose projects explicitly contributed to it: Anish, Reik, and Santam.\r\n   3. Nick, who made significant contributions. (Angus would be in this category, too, if not the first.)\r\n\r\nAm I missing anyone that I should be considering? I have to make a cutoff somewhere, which is hard to do (and it's why we have the all-contributors box).\r\n\r\nAlso Angus, Santam, and Nick, if you have an ORCID, I can add it.\r\n\r\nThanks!",
  "closed_at":"2022-01-28T19:37:39Z",
  "comments":8,
  "created_at":"2022-01-27T19:50:01Z",
  "draft":false,
  "id":1116675714,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xszOz",
  "number":1257,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-28T19:37:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add a CITATION.cff file to specify a set of authors.",
  "updated_at":"2022-01-28T19:37:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Because pytest treats warnings as errors now: #1255. Also, the fact that this didn't cause failures in #1255 must mean that Pandas is not being installed in any of the tests, so it's skipping the Pandas tests (except when it runs locally). Maybe we want to test that one (and only one) Pandas-related function? Something to think about.",
  "closed_at":"2022-01-28T00:10:20Z",
  "comments":1,
  "created_at":"2022-01-27T23:27:28Z",
  "draft":false,
  "id":1116841149,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xtVJc",
  "number":1258,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-28T00:10:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove distutils reference in test (now an error).",
  "updated_at":"2022-01-28T00:10:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Currently `ByteMaskedArray.simplify_optiontype()` has a few typos that mean it raises an `AttributeError` instead of returning a simplified layout.",
  "closed_at":"2022-01-28T17:16:13Z",
  "comments":1,
  "created_at":"2022-01-28T09:48:23Z",
  "draft":false,
  "id":1117200053,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xufVR",
  "number":1259,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-28T17:16:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: fix `ByteMaskedArray.simplify_optiontype()`",
  "updated_at":"2022-01-28T17:16:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"At the moment, v1 calls `simplify_optiontype` before returning from particular `getitem` methods in these content types, whilst v2 does not. Is this a planned change, or do we need to restore these?\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/fca80a69b23b2f5b2d952cc03fee722d9a867665/src/awkward/_v2/contents/bytemaskedarray.py#L161-L210\r\n\r\nvs\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/fca80a69b23b2f5b2d952cc03fee722d9a867665/src/libawkward/array/ByteMaskedArray.cpp#L664-L752",
  "closed_at":"2022-02-10T14:21:48Z",
  "comments":4,
  "created_at":"2022-01-28T10:14:48Z",
  "id":1117224839,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Cl3-H",
  "number":1260,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Simplify output of {Bit,Byte}MaskedArray",
  "updated_at":"2022-02-10T14:21:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\n1.7.0\n\n### Description and code to reproduce\n\nWhile trying to use awkward arrays in matrix multiplication, I ran into two different kinds of unexpected behavior. The following code shows an example.\r\n\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nv = np.asarray([1,2,3])\r\nA = np.asarray([[1,0,0],[0,1,0],[0,0,1]])\r\nvT1 = np.asarray([[1],[2],[3]])\r\nvT2 = np.asarray([1,2,3])\r\n\r\nprint(v @ A @ vT1)  # [14]\r\nprint(v @ A @ vT2)  # 14\r\n\r\nv = ak.Array([1,2,3])\r\nA = ak.Array([[1,0,0],[0,1,0],[0,0,1]])\r\nvT1 = ak.Array([[1],[2],[3]])\r\nvT2 = ak.Array([1,2,3])\r\n\r\nprint(v @ A @ vT1)  # output [[a], [b], [c]], different values for a, b, c each time\r\nprint(v @ A @ vT2)  # ValueError: in ListOffsetArray64 attempting to get 3, stops[i] > len(content)\r\n```\r\n\r\nIn the first case with `vT1`, uninitialized data seems to be accessed, leading to different outputs every time. The output shape also changes when compared to the `numpy` approach. I naively expected the second case with `vT2` to also work, and to report the same result as `numpy`. I believe the different treatment for this may be on purpose and a design choice, but wanted to include it here as well to be sure this is expected.",
  "closed_at":null,
  "comments":2,
  "created_at":"2022-01-28T16:26:00Z",
  "id":1117593641,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5CnSAp",
  "number":1261,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Matrix multiplication (@ operator) is broken and needs to be ported to kernels (out of Numba)",
  "updated_at":"2022-11-10T22:33:40Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This adds an initial noxfile. No \"fly by\" contributor docs for it yet, that\nwill probably come a bit later, after we get editable installs working.\n\nThis adds configuration and a nox job for PyLint. I've avoided touching the\ncode, and instead added suppression with a \"TODO\" on anything I think we should\nwork on fixing. I think we could make PRs once in a while removing some of\nthese suppressions. (Otherwise this becomes too many changes at once). Some are\nminor stylistic improvements, sometimes related to Python 3, some are\nsimplifications, and some are highly bug-prone that probably should be checked\nsooner rather than later (marked with `investigate!`).\n\nThe syntax for disabling inline is `# pylint: disable=<name>`, or\n`disable-next` to put it on the line before, or it can be at the top of a file.\nThis serves as nice documentation for a user to explain you know you are doing\nsomething a bit naughty.\n\nPyLint also has a bunch of over-the-top checks like `too-many-*` that I'd\nexpect we would always leave off. This is intentional - it's easier to see and\nturn off a check vs. find it and turn it on. I _think_ many of them are in the\n\"design\" group, but I can't see how to tell what is in a group, I only know how\nto list all groups (`pylint --list-groups`).\n",
  "closed_at":"2022-01-31T21:07:54Z",
  "comments":1,
  "created_at":"2022-01-28T17:25:32Z",
  "draft":false,
  "id":1117657166,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xv_bM",
  "number":1262,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-31T21:07:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: initial nox and pylint support",
  "updated_at":"2022-01-31T21:07:55Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I noticed that our cibuildwheel action was really old in #1262, which made me\nrealise nothing was keeping these up to date. Here's a dependabot that will do\nthat.\n",
  "closed_at":"2022-01-28T18:39:17Z",
  "comments":1,
  "created_at":"2022-01-28T17:41:42Z",
  "draft":false,
  "id":1117670341,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xwCMj",
  "number":1263,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-28T18:39:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: add dependabot for actions",
  "updated_at":"2022-01-28T18:39:17Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 1.12.0 to 2.3.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.3.1</h2>\n<ul>\n<li>\ud83d\udc1b Setting pip options like <code>PIP_USE_DEPRECATED</code> in <code>CIBW_ENVIRONMENT</code> no longer adversely affects cibuildwheel's ability to set up a Python environment (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/956\">#956</a>)</li>\n<li>\ud83d\udcda Docs fixes and improvements</li>\n</ul>\n<h2>v2.3.0</h2>\n<ul>\n<li>\ud83d\udcc8 cibuildwheel now defaults to manylinux2014 image for linux builds, rather than manylinux2010. If you want to stick with manylinux2010, it's simple to set this using <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#linux-image\">the image options</a>. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/926\">#926</a>)</li>\n<li>\u2728 You can now pass environment variables from the host machine into the Docker container during a Linux build. Check out <a href=\"https://cibuildwheel.readthedocs.io/en/latest/options/#environment-pass\">the docs for <code>CIBW_ENVIRONMENT_PASS_LINUX </code></a> for the details. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/914\">#914</a>)</li>\n<li>\u2728 Added support for building PyPy 3.8 wheels. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/881\">#881</a>)</li>\n<li>\u2728 Added support for building Windows arm64 CPython wheels on a Windows arm64 runner. We can't test this in CI yet, so for now, this is experimental. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/920\">#920</a>)</li>\n<li>\ud83d\udcda Improved the deployment documentation (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/911\">#911</a>)</li>\n<li>\ud83d\udee0 Changed the escaping behaviour inside cibuildwheel's  option placeholders e.g. <code>{project}</code> in <code>before_build</code> or <code>{dest_dir}</code> in <code>repair_wheel_command</code>. This allows bash syntax like <code>${SOME_VAR}</code> to passthrough without being interpreted as a placeholder by cibuildwheel. See <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#placeholders\">this section</a> in the docs for more info. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/889\">#889</a>)</li>\n<li>\ud83d\udee0 Pip updated to 21.3, meaning it now defaults to in-tree builds again. If this causes an issue with your project, setting environment variable <code>PIP_USE_DEPRECATED=out-of-tree-build</code> is available as a temporary flag to restore the old behaviour. However, be aware that this flag will probably be removed soon. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/881\">#881</a>)</li>\n<li>\ud83d\udc1b You can now access the current Python interpreter using <code>python3</code> within a build on Windows (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/917\">#917</a>)</li>\n</ul>\n<h2>v2.2.2</h2>\n<ul>\n<li>\ud83d\udc1b Fix bug in the GitHub Action step causing a syntax error (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/895\">#895</a>)</li>\n</ul>\n<h2>v2.2.1</h2>\n<ul>\n<li>\ud83d\udee0 Added a <code>config-file</code> option on the GitHub Action to specify something other than pyproject.toml in your GitHub Workflow file. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/883\">#883</a>)</li>\n<li>\ud83d\udc1b Fix missing resources in sdist and released wheel on PyPI. We've also made some internal changes to our release processes to make them more reliable. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/893\">#893</a>, <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/894\">#894</a>)</li>\n</ul>\n<h2>v2.2.1b1</h2>\n<ul>\n<li>\ud83d\udee0 Added a <code>config-file</code> option on the GitHub Action to specify something\nother than pyproject.toml in your GitHub Workflow file. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/883\">#883</a>)</li>\n<li>\ud83d\udc1b Fix missing resources in sdist and released wheel on PyPI. We've made\nsome internal change to our release processes to make them more reliable.\n(<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/893\">#893</a>, <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/894\">#894</a>)</li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li>\n<p>\ud83c\udf1f Added support for <a href=\"https://www.python.org/dev/peps/pep-0656/\">musllinux</a>. Support for this new wheel format lets projects build wheels for Linux distributions that use <a href=\"https://musl.libc.org/\">musl libc</a>, notably, <a href=\"https://alpinelinux.org/\">Alpine</a> Docker containers. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/768\">#768</a>)</p>\n<p>Musllinux builds are enabled by default. If you're not ready to build musllinux, add <code>*-musllinux_*</code> to your <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip\"><code>CIBW_SKIP</code>/<code>skip</code></a> option. Or, you might have to make some changes to your options - to simplify that process, you can use...</p>\n</li>\n<li>\n<p>\ud83c\udf1f TOML option overrides! This provides much greater flexibility in configuration via pyproject.toml. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/854\">#854</a>)</p>\n<p>You can now set build options for any subset of your builds using a match pattern. So, for example, you can customise CPython 3.8 builds with an override on <code>cp38-*</code> or musllinux builds by selecting <code>*musllinux*</code>. Check out <a href=\"https://cibuildwheel.readthedocs.io/en/latest/options/#overrides\">the docs</a> for more info on the specifics.</p>\n</li>\n<li>\n<p>\ud83d\udee0 Added support for building PyPy wheels on macOS 11 CI runners. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/875\">#875</a>)</p>\n</li>\n<li>\n<p>\ud83d\udee0 Setting an empty string for the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#manylinux-image\"><code>CIBW_*_IMAGE</code></a> option will now fallthrough to the config file or cibuildwheel's default, rather than causing an error. This makes the option easier to use in CI build matricies. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/829\">#829</a>)</p>\n</li>\n<li>\n<p>\ud83d\udee0 Support for TOML 1.0 when reading config files, via the <code>tomli</code> package. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/876\">#876</a>)</p>\n</li>\n</ul>\n<h2>v2.2.0b1</h2>\n<p><em>Currently in prerelease. The below release notes will be condensed into a single entry on final release.</em></p>\n<p><em>v2.2.0b1 (19 October 2021)</em></p>\n<ul>\n<li>\ud83c\udf1f TOML option overrides. This provides much greater flexibility in configuration via pyproject.toml.</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.3.1</h3>\n<p><em>14 December 2021</em></p>\n<ul>\n<li>\ud83d\udc1b Setting pip options like <code>PIP_USE_DEPRECATED</code> in <code>CIBW_ENVIRONMENT</code> no longer adversely affects cibuildwheel's ability to set up a Python environment (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/956\">#956</a>)</li>\n<li>\ud83d\udcda Docs fixes and improvements</li>\n</ul>\n<h3>v2.3.0</h3>\n<p><em>26 November 2021</em></p>\n<ul>\n<li>\ud83d\udcc8 cibuildwheel now defaults to manylinux2014 image for linux builds, rather than manylinux2010. If you want to stick with manylinux2010, it's simple to set this using <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#linux-image\">the image options</a>. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/926\">#926</a>)</li>\n<li>\u2728 You can now pass environment variables from the host machine into the Docker container during a Linux build. Check out <a href=\"https://cibuildwheel.readthedocs.io/en/latest/options/#environment-pass\">the docs for <code>CIBW_ENVIRONMENT_PASS_LINUX </code></a> for the details. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/914\">#914</a>)</li>\n<li>\u2728 Added support for building PyPy 3.8 wheels. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/881\">#881</a>)</li>\n<li>\u2728 Added support for building Windows arm64 CPython wheels on a Windows arm64 runner. We can't test this in CI yet, so for now, this is experimental. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/920\">#920</a>)</li>\n<li>\ud83d\udcda Improved the deployment documentation (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/911\">#911</a>)</li>\n<li>\ud83d\udee0 Changed the escaping behaviour inside cibuildwheel's  option placeholders e.g. <code>{project}</code> in <code>before_build</code> or <code>{dest_dir}</code> in <code>repair_wheel_command</code>. This allows bash syntax like <code>${SOME_VAR}</code> to passthrough without being interpreted as a placeholder by cibuildwheel. See <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#placeholders\">this section</a> in the docs for more info. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/889\">#889</a>)</li>\n<li>\ud83d\udee0 Pip updated to 21.3, meaning it now defaults to in-tree builds again. If this causes an issue with your project, setting environment variable <code>PIP_USE_DEPRECATED=out-of-tree-build</code> is available as a temporary flag to restore the old behaviour. However, be aware that this flag will probably be removed soon. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/881\">#881</a>)</li>\n<li>\ud83d\udc1b You can now access the current Python interpreter using <code>python3</code> within a build on Windows (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/917\">#917</a>)</li>\n</ul>\n<h3>v2.2.2</h3>\n<p><em>26 October 2021</em></p>\n<ul>\n<li>\ud83d\udc1b Fix bug in the GitHub Action step causing a syntax error (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/895\">#895</a>)</li>\n</ul>\n<h3>v2.2.1</h3>\n<p><em>26 October 2021</em></p>\n<ul>\n<li>\ud83d\udee0 Added a <code>config-file</code> option on the GitHub Action to specify something other than pyproject.toml in your GitHub Workflow file. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/883\">#883</a>)</li>\n<li>\ud83d\udc1b Fix missing resources in sdist and released wheel on PyPI. We've also made some internal changes to our release processes to make them more reliable. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/893\">#893</a>, <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/894\">#894</a>)</li>\n</ul>\n<h3>v2.2.0</h3>\n<p><em>22 October 2021</em></p>\n<ul>\n<li>\n<p>\ud83c\udf1f Added support for <a href=\"https://www.python.org/dev/peps/pep-0656/\">musllinux</a>. Support for this new wheel format lets projects build wheels for Linux distributions that use <a href=\"https://musl.libc.org/\">musl libc</a>, notably, <a href=\"https://alpinelinux.org/\">Alpine</a> Docker containers. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/768\">#768</a>)</p>\n<p>Musllinux builds are enabled by default. If you're not ready to build musllinux, add <code>*-musllinux_*</code> to your <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip\"><code>CIBW_SKIP</code>/<code>skip</code></a> option. Or, you might have to make some changes to your options - to simplify that process, you can use...</p>\n</li>\n<li>\n<p>\ud83c\udf1f TOML option overrides! This provides much greater flexibility in configuration via pyproject.toml. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/854\">#854</a>)</p>\n<p>You can now set build options for any subset of your builds using a match pattern. So, for example, you can customise CPython 3.8 builds with an override on <code>cp38-*</code> or musllinux builds by selecting <code>*musllinux*</code>. Check out <a href=\"https://cibuildwheel.readthedocs.io/en/latest/options/#overrides\">the docs</a> for more info on the specifics.</p>\n</li>\n<li>\n<p>\ud83d\udee0 Added support for building PyPy wheels on macOS 11 CI runners. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/875\">#875</a>)</p>\n</li>\n<li>\n<p>\ud83d\udee0 Setting an empty string for the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#manylinux-image\"><code>CIBW_*_IMAGE</code></a> option will now fallthrough to the config file or cibuildwheel's default, rather than causing an error. This makes the option easier to use in CI build matricies. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/829\">#829</a>)</p>\n</li>\n<li>\n<p>\ud83d\udee0 Support for TOML 1.0 when reading config files, via the <code>tomli</code> package. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/876\">#876</a>)</p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/461bed51d3619c4c670f008148de8ce1465ba586\"><code>461bed5</code></a> Bump version: v2.3.1</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/f8bd6a502bdcb7d36d018d48325008fb01115546\"><code>f8bd6a5</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/950\">#950</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/53b8f8149c4b90f2a79f0dabd2bbfc0f65127c45\"><code>53b8f81</code></a> fix: environment variable affect initial setup macOS/win (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/956\">#956</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/3b40094a3a647e41b69d0a6c11020795e20c05d6\"><code>3b40094</code></a> Update dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/958\">#958</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/96f90bad29899d678907178b7ba77ca605741704\"><code>96f90ba</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/960\">#960</a> from guillaumekln/update-opennmt-ctranslate2-info</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/acbb46e60c4d10c140d1d9ecdfc4e4f6cd9120c5\"><code>acbb46e</code></a> docs: update information for project OpenNMT/CTranslate2</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/be1dd0119f0981d7f50af90537a4d42cabb05b23\"><code>be1dd01</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/948\">#948</a> from pypa/windows-rm-ignore-errors</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/52f7801799043bd5a734617925c5b9542ef9c81d\"><code>52f7801</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/953\">#953</a> from tonybaloney/patch-4</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/c10e6fcd1a5f34421266093751c2e23dcef45146\"><code>c10e6fc</code></a> Update options.md</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/e518dcc5cb2d2dcec36a60204a481bde635869db\"><code>e518dcc</code></a> Update dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/949\">#949</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v1.12.0...v2.3.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=1.12.0&new-version=2.3.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-01-28T19:24:27Z",
  "comments":1,
  "created_at":"2022-01-28T18:39:42Z",
  "draft":false,
  "id":1117719679,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xwMDP",
  "number":1264,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-28T19:24:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bump pypa/cibuildwheel from 1.12.0 to 2.3.1",
  "updated_at":"2022-01-28T19:24:28Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/gh-action-pypi-publish](https://github.com/pypa/gh-action-pypi-publish) from 1.4.2 to 1.5.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/gh-action-pypi-publish/releases\">pypa/gh-action-pypi-publish's releases</a>.</em></p>\n<blockquote>\n<h2>v1.5.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Added an action input <code>print_hash</code> for showing the hash values of files to be uploaded \u2014 by <a href=\"https://github.com/meowmeowmeowcat\"><code>@\u200bmeowmeowmeowcat</code></a> in <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/pull/87\">pypa/gh-action-pypi-publish#87</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/pllim\"><code>@\u200bpllim</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/pull/55\">pypa/gh-action-pypi-publish#55</a></li>\n<li><a href=\"https://github.com/meowmeowmeowcat\"><code>@\u200bmeowmeowmeowcat</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/pull/87\">pypa/gh-action-pypi-publish#87</a></li>\n</ul>\n<p><strong>Full Diff</strong>: <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.4.2...v1.5.0\">https://github.com/pypa/gh-action-pypi-publish/compare/v1.4.2...v1.5.0</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/717ba43cfbb0387f6ce311b169a825772f54d295\"><code>717ba43</code></a> Trim the trailing whitespaces in <code>print-hash.py</code></li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/4992a00fb2ce867ab24eb17e1fe76738cabcc160\"><code>4992a00</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/issues/87\">#87</a> from meowmeowmeowcat/show-hash-values</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/977d0675615f6a62b2da99c5d6cd6da339b38bd5\"><code>977d067</code></a> Fix a bug</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/5d18baa42c7d858441b701f9f8d1db08ba9be00e\"><code>5d18baa</code></a> Drop unnecessary <code>file_iterable</code> var</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/0575dc8eab29bdb32fdc059da3f8ac7a22a26fb7\"><code>0575dc8</code></a> Refactor the hash helper script to use pathlib and CLI args</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/8682135dac51a0c6d0b2b03eacc20cdb11f203f2\"><code>8682135</code></a> Correct the if-clause for printing the hashes</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/c83d37bdf05723c6eca6bd0df3c05e00cacfa961\"><code>c83d37b</code></a> Introduce print_hash in README</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/777bfc4346c57a31fdf7ec381ef3e92018960946\"><code>777bfc4</code></a> Fix the message</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/ca30c7da983a24caeddb2e73a5f6fe1022d880a2\"><code>ca30c7d</code></a> Show a message before printing hash values of files</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/06a2dd66854ee73931657bb8a4e1f261ef938a5f\"><code>06a2dd6</code></a> Fix bug</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.4.2...v1.5.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/gh-action-pypi-publish&package-manager=github_actions&previous-version=1.4.2&new-version=1.5.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-01-28T19:40:34Z",
  "comments":1,
  "created_at":"2022-01-28T18:39:45Z",
  "draft":false,
  "id":1117719712,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xwMDr",
  "number":1265,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-28T19:40:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bump pypa/gh-action-pypi-publish from 1.4.2 to 1.5.0",
  "updated_at":"2022-01-28T19:40:35Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n56312ea2\r\n\r\nThis is seen in both v1 and v2 in master\r\n\r\n### Description and code to reproduce\r\n\r\nGiven this layout:\r\n```python3\r\nx = ak._v2.Array([\r\n    [\r\n        [\r\n            [1, 2, 3],\r\n            [4, 0, 0]\r\n        ],\r\n        [\r\n            [5, 6, 7],\r\n            [8, 0, 0]\r\n        ]\r\n    ],\r\n    [\r\n        [\r\n            [9, 10, 11],\r\n            [12, 0, 0]\r\n        ],\r\n        [\r\n            [13, 14, 15],\r\n            [16, 0, 0]\r\n        ]\r\n        \r\n    ]\r\n])\r\n```\r\n\r\nCalling `ak.sum(x, axis=0)` does not match (in structure) the NumPy result:\r\n```pycon\r\n>>> ak._v2.to_numpy(x).sum(axis=0).tolist()\r\n[[[10, 12, 14], [16, 0, 0]], [[18, 20, 22], [24, 0, 0]]]\r\n>>> ak._v2.sum(x, axis=0).tolist()\r\n[[[10, 12, 14], []], [[16, 0, 0, 18, 20, 22], []]]\r\n```",
  "closed_at":"2022-02-18T03:23:56Z",
  "comments":20,
  "created_at":"2022-01-29T15:31:30Z",
  "id":1118249014,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5CpyA2",
  "number":1266,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.sum` produces incorrect structure for outer dimension",
  "updated_at":"2022-03-10T09:38:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The exponent change is really nice, it also seems a bit more compact for really long asserts and if's.\n",
  "closed_at":"2022-01-31T20:14:07Z",
  "comments":2,
  "created_at":"2022-01-29T22:08:12Z",
  "draft":false,
  "id":1118338668,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4xyHFf",
  "number":1267,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-31T20:14:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"style: update to first non-pre-release black!",
  "updated_at":"2022-01-31T20:14:07Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Description of new feature\r\n\r\nDear all,\r\n\r\nThank you for the great work. I was wondering whether broadcasting string operations would be useful for everyone, e.g.,\r\n```python\r\nimport awkward as ak\r\nar=ak.Array([['a','b','c'],['b','c'],['x','y','xyz']])\r\nar + 'a' # [['aa,'ba','ca'],['ba','ca'],['xa','ya','xyza']]\r\nar - 'a' # [[','b','c'],['b','c'],['x','y','xyz']]\r\nar - 'x' # [[','b','c'],['b','c'],['','y','yz']]\r\n```\r\nCurrently, we observe the following ValueError\r\n\r\n```\r\nValueError: no overloads for custom types: add(string, string)\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.7.0/src/awkward/_connect/_numpy.py#L259)\r\n```",
  "closed_at":"2024-01-20T01:06:09Z",
  "comments":5,
  "created_at":"2022-01-31T10:19:54Z",
  "id":1119234945,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5CtiuB",
  "number":1269,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Broadcasting string operations",
  "updated_at":"2024-01-20T01:06:09Z",
  "user":"MDQ6VXNlcjEzNDA1NjY3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR adds a GitHub Action to build CUDA Wheels and uploads it as an artifact (I think this wheel will be uploaded to pypi once we have the first release of the kernels?). The build script has been updated to be built for `manylinux` systems and the wheel is not `PureLib`, without unzipping, changing things and zipping the wheel back. Although this has caused the wheel to be built for specific python version (`cp310`) instead of the earlier more general `py3`. \r\nSince Awkward's CUDA backend infrastructure relies heavily on Cupy. I have restricted `awkward_cuda_kernels` to be built for only the `CUDA` versions that `Cupy` supports. The library name is dependent on the `CUDA` version instead of the awkward version as earlier. `awkward_cuda_kernels-<cuda-version>-cp310-cp310-<platform>.whl`",
  "closed_at":"2022-02-02T18:48:55Z",
  "comments":3,
  "created_at":"2022-01-31T12:30:48Z",
  "draft":false,
  "id":1119369680,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4x1a2o",
  "number":1270,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-02T18:48:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add GHA to build CUDA Wheels and update the cuda build script",
  "updated_at":"2022-02-02T18:48:56Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@agoose77, just reordering the `parents` to be monotonic fixes the case you found, but it breaks others. I'm going to leave this open until we know what to do about it.\r\n\r\nI included @ianna in the branch name, thinking that this PR in v1 might involve a kernel equivalent to `np.argmax`, but it might not.",
  "closed_at":"2022-02-18T03:23:57Z",
  "comments":14,
  "created_at":"2022-02-01T17:56:01Z",
  "draft":false,
  "id":1121025319,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4x66rR",
  "number":1274,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-18T03:23:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixing #1266 by reordering nextparents (in v2; v1 is NOT FIXED!).",
  "updated_at":"2022-02-19T01:03:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This hides a false positive (that's now fixed in the main branch of PyLint).\n\nThen many of the `consider-*` checks are addressed. I can point them out in more detail inline in a review later. I didn't orignally realize that `x in {y, z}` and `x in (y, z)` are different - they both get simplified in bytecode, not creating the container (which is more expensive for a set), but the set version checks equality via hashes, and the tuple version checks via `==`. I think I've corrected any I mistakenly used sets on, but worth a once-over.\n\n\n- style: global-variable-not-assigned false positive\n- chore: include consider-style checks\n",
  "closed_at":"2022-02-18T03:49:38Z",
  "comments":14,
  "created_at":"2022-02-01T23:02:03Z",
  "draft":false,
  "id":1121288409,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4x7yMM",
  "number":1275,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-18T03:49:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"style: pylint 1",
  "updated_at":"2022-02-18T03:51:27Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Tasks to complete:\r\n\r\n- [x] Implement `copy_to` for all array classes\r\n- [x] Implement `to_backend` and `backend(*arrays)`\r\n- [x] Write a minimal test using `ak.num`\r\n- [x] Call a kernel whose implementation is not in CUDA and see if it's being handled correctly.\r\n~~- [ ] Don't upload artifacts during CI testing.~~",
  "closed_at":"2022-02-14T15:36:34Z",
  "comments":2,
  "created_at":"2022-02-03T12:17:08Z",
  "draft":false,
  "id":1123016583,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4yBcau",
  "number":1276,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-14T15:36:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This PR adds support to call kernels in CUDA from v2 Awkward Arrays.",
  "updated_at":"2022-02-14T15:36:35Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/shellcheck-py/shellcheck-py: v0.8.0.3 \u2192 v0.8.0.4](https://github.com/shellcheck-py/shellcheck-py/compare/v0.8.0.3...v0.8.0.4)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-02-07T22:58:57Z",
  "comments":1,
  "created_at":"2022-02-07T19:33:37Z",
  "draft":false,
  "id":1126412241,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4yMU1V",
  "number":1277,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-07T22:58:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-02-07T22:58:58Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.7.0\n\n### Description and code to reproduce\n\nHi, I noticed this difference in behaviour between ```awkward.zeros_like``` and ```numpy.zeros_like```:\r\n```python\r\nIn [26]: import numpy as np\r\n\r\nIn [27]: import awkward as ak\r\n\r\nIn [28]: np.zeros_like(1.0)\r\nOut[28]: array(0.)\r\n\r\nIn [29]: ak.zeros_like(1.0)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-29-95cb45da8df1> in <module>\r\n----> 1 ak.zeros_like(1.0)\r\n\r\n/work/gallim/anaconda3/envs/higgs-dna/lib/python3.9/site-packages/awkward/operations/structure.py in zeros_like(array, highlevel, behavior, dtype)\r\n   1062     if dtype is not None:\r\n   1063         return full_like(array, 0, highlevel=highlevel, behavior=behavior, dtype=dtype)\r\n-> 1064     return full_like(array, _ZEROS, highlevel=highlevel, behavior=behavior, dtype=dtype)\r\n   1065\r\n   1066\r\n\r\n/work/gallim/anaconda3/envs/higgs-dna/lib/python3.9/site-packages/awkward/operations/structure.py in full_like(array, fill_value, highlevel, behavior, dtype)\r\n   1160             fill_value = int(fill_value)\r\n   1161\r\n-> 1162     layout = ak.operations.convert.to_layout(\r\n   1163         array, allow_record=True, allow_other=False\r\n   1164     )\r\n\r\n/work/gallim/anaconda3/envs/higgs-dna/lib/python3.9/site-packages/awkward/operations/convert.py in to_layout(array, allow_record, allow_other, numpytype)\r\n   1936\r\n   1937     elif not allow_other:\r\n-> 1938         raise TypeError(\r\n   1939             \"{0} cannot be converted into an Awkward Array\".format(array)\r\n   1940             + ak._util.exception_suffix(__file__)\r\n\r\nTypeError: 1.0 cannot be converted into an Awkward Array\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.7.0/src/awkward/operations/convert.py#L1940)\r\n```\r\n\r\nis this difference intended?\r\n\r\nThanks,\r\n\r\nMassimiliano\r\n\r\n[Related issue in coffea](https://github.com/CoffeaTeam/coffea/issues/640)",
  "closed_at":"2022-02-08T20:55:15Z",
  "comments":3,
  "created_at":"2022-02-08T09:22:56Z",
  "id":1126991985,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5DLIhx",
  "number":1278,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"float passed to awkward.zeros_like does not behave like numpy.zeros_like",
  "updated_at":"2022-02-08T20:59:03Z",
  "user":"MDQ6VXNlcjI2MzA5NTMx"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1260 ",
  "closed_at":"2022-02-10T14:21:49Z",
  "comments":2,
  "created_at":"2022-02-08T10:06:11Z",
  "draft":false,
  "id":1127039689,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4yOWlc",
  "number":1279,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-10T14:21:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: simplify output in {Byte,Bit}MaskedArray",
  "updated_at":"2022-02-10T14:21:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.7.0\n\n### Description and code to reproduce\n\nHi, \r\n\r\nA student I am working with noticed what appears to be a memory leak when iterating over array. I've replicated the issue with the following snippet. \r\n```\r\nimport psutil\r\n\r\nA = ak.Array([[0,1],[0],[1,0]]*10000000)\r\nmy_sum = np.zeros(len(A))\r\ni = 0\r\nfor event in A:\r\n    my_sum[i] =  np.sum(event)\r\n    i += 1\r\n    if i %10000 == 0:\r\n        print('RAM memory % used:', psutil.virtual_memory()[2])\r\n```\r\nA (much faster) solution without the leak to do the sum on the awkward array directly\r\n```\r\nmy_sum = np.sum(A, axis=1) \r\n```\r\nBut I figured I should report the issue here in case it is helpful. ",
  "closed_at":"2023-03-17T11:44:30Z",
  "comments":4,
  "created_at":"2022-02-09T05:46:03Z",
  "id":1128081437,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5DPSgd",
  "number":1280,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Memory leak when iterating over array",
  "updated_at":"2023-03-17T11:44:30Z",
  "user":"MDQ6VXNlcjI2MDgwMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nSuch as setting the number of digits in floating point, maybe also a \"precision\". Both of these should follow the conventions set by [np.set_printoptions](https://numpy.org/doc/stable/reference/generated/numpy.set_printoptions.html) arguments, but without setting a global variable. It would apply only to the output of the `ak._v2.Array.show` function.",
  "closed_at":"2023-11-07T21:43:49Z",
  "comments":0,
  "created_at":"2022-02-09T17:31:56Z",
  "id":1128832293,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5DSJ0l",
  "number":1281,
  "performed_via_github_app":null,
  "reactions":{
   "+1":3,
   "total_count":3
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"v2's \"show\" method should have a \"formatter\" option for string-formatting",
  "updated_at":"2023-11-07T21:43:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\n1.7.0\r\n\r\n### Description and code to reproduce\r\n\r\nI need to work with complex algorithms on chunks of Awkward Arrays (containing nested arrays of records) and boiled down one of my main issues to a very MWE. I have the feeling that I am ~~blind~~ doing something wrong because this is fairly basic but I was not able to find answers in the docs. I tend to believe that this is kind of a bug or at least a usability-issue, so I decided to open an issue instead of a discussion.\r\n\r\nThe https://awkward-array.org/how-to-use-in-numba-features.html are still work in progress (#1064) but the API documentation mentions that records are supported in the Numba context. The `ak.numba.register()` function did not help (mentioned in https://awkward-array.readthedocs.io/en/latest/ak.numba.register.html?highlight=numba%20record).\r\n\r\nHere is the simple example:\r\n\r\n```python\r\nimport awkward as ak # v1.7.0\r\nimport numpy as np  # v1.21.5\r\nimport numba as nb  # v0.55.1\r\n\r\narr = ak.Array([{\"a\": 1}, {\"a\": 2}, {\"a\": 3}])\r\n\r\n@nb.njit\r\ndef foo(arr):\r\n    return np.sum(arr.a)\r\n\r\nfoo(arr)\r\n```\r\n\r\nwhich gives \r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypingError                               Traceback (most recent call last)\r\nInput In [100], in <module>\r\n      7 @nb.njit\r\n      8 def foo(arr):\r\n      9     return np.sum(arr.a)\r\n---> 11 foo(arr)\r\n\r\nFile ~/Dev/km3io/venv/lib/python3.9/site-packages/numba/core/dispatcher.py:468, in _DispatcherBase._compile_for_args(self, *args, **kws)\r\n    464         msg = (f\"{str(e).rstrip()} \\n\\nThis error may have been caused \"\r\n    465                f\"by the following argument(s):\\n{args_str}\\n\")\r\n    466         e.patch_message(msg)\r\n--> 468     error_rewrite(e, 'typing')\r\n    469 except errors.UnsupportedError as e:\r\n    470     # Something unsupported is present in the user code, add help info\r\n    471     error_rewrite(e, 'unsupported_error')\r\n\r\nFile ~/Dev/km3io/venv/lib/python3.9/site-packages/numba/core/dispatcher.py:409, in _DispatcherBase._compile_for_args.<locals>.error_rewrite(e, issue_type)\r\n    407     raise e\r\n    408 else:\r\n--> 409     raise e.with_traceback(None)\r\n\r\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nNo implementation of function Function(<function sum at 0x108261ca0>) found for signature:\r\n \r\n >>> sum(ak.ArrayView(ak.NumpyArrayType(array(int64, 1d, A), none, {}), None, ()))\r\n \r\nThere are 2 candidate implementations:\r\n      - Of which 2 did not match due to:\r\n      Overload in function 'Numpy_method_redirection.generic': File: numba/core/typing/npydecl.py: Line 379.\r\n        With argument(s): '(ak.ArrayView(ak.NumpyArrayType(array(int64, 1d, A), none, {}), None, ()))':\r\n       Rejected as the implementation raised a specific error:\r\n         TypeError: array does not have a field with key 'sum'\r\n       \r\n       (https://github.com/scikit-hep/awkward-1.0/blob/1.7.0/src/awkward/_connect/_numba/layout.py#L341)\r\n  raised from /Users/tamasgal/Dev/km3io/venv/lib/python3.9/site-packages/awkward/_connect/_numba/layout.py:339\r\n\r\nDuring: resolving callee type: Function(<function sum at 0x108261ca0>)\r\nDuring: typing of call at /var/folders/84/mcvklq757tq1nfrkbxvvbq8m0000gn/T/ipykernel_6479/2151303190.py (9)\r\n\r\n\r\nFile \"../../../../../var/folders/84/mcvklq757tq1nfrkbxvvbq8m0000gn/T/ipykernel_6479/2151303190.py\", line 9:\r\n<source missing, REPL/exec in use?>\r\n```\r\n\r\nIt also fails for `sum()` and I even tried `arr.to_numpy() / ak.to_numpy(arr)` inside the JITted function but those functions are not present in the Numba context.\r\n\r\nOf course, I know that one can do super efficient high-level operations outside of Numba, but I am really forced to do nested loops and AwkwardArray builders, which btw. I already do successfully combined with Numba and those work fine but so far no records were involved, so I did not encounter this issue yet.",
  "closed_at":"2022-02-10T13:19:25Z",
  "comments":4,
  "created_at":"2022-02-10T11:43:51Z",
  "id":1129906419,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5DWQDz",
  "number":1282,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Numpy operations over arrays of records-fields in the Numba context is not working",
  "updated_at":"2022-02-15T18:26:12Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\r\n\r\n1.7.0\r\n\r\n### Description and code to reproduce\r\n\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nv = ak.from_iter([[[1, 2, 3], [4, 5]], [[3, 4, 5], [6, 7]], [[5, 6, 7], [8, 9]]])\r\nM = np.asarray([[1, 1.4, -0.3], [1.4, 1, 1.2], [-0.3, 1.2, 1]])\r\nM_times_v = M[..., np.newaxis, np.newaxis] * v[np.newaxis, ...]\r\nv_times_M_times_v = v[:, np.newaxis, ...] * M_times_v\r\n\r\n# frequently (not always) segfaults with axis=0 or 1\r\nnp.sum(v_times_M_times_v, axis=0)\r\n\r\narray = ak.from_iter([[[[1], [4, 9]], [[5.6], [14, 25.2]]], [[[5.6], [14, 25.2]], [[16], [25, 36]]]])\r\n# always(?) segfaults with axis=0 or 1, also when using np.sum\r\nak.sum(array, axis=1)\r\n```\r\n\r\nThe above code causes frequent segmentation faults in the first `np.sum` call, and always (at least in ~100 attempts) segfaults for the second `ak.sum` call (same when replacing this by `np.sum`).\r\n\r\nI can reproduce this with two setups:\r\n- Python 3.9.10 on M1 macOS with `awkward` 1.7.0 and `numpy` 1.22.2\r\n- Python 3.8.10 on Intel macOS with `awkward` 1.7.0 and `numpy` 1.22.1\r\n\r\nI cannot reproduce the segmentation fault when using the following:\r\n- `python:3.9-slim` container with `awkward` 1.7.0 and `numpy` 1.22.2\r\n\r\nIn case it is useful, I rarely get the following output as well:\r\n```\r\npython(14372,0x102a64580) malloc: Heap corruption detected, free list is damaged at 0x600000358260\r\n*** Incorrect guard value: 8\r\npython(14372,0x102a64580) malloc: *** set a breakpoint in malloc_error_break to debug\r\n```\r\n\r\nIn the original setup where I came across this (uses a larger array as input) I also see the following:\r\n```\r\npython(12981,0x105568580) malloc: *** error for object 0x3d: pointer being freed was not allocated\r\npython(12981,0x105568580) malloc: *** set a breakpoint in malloc_error_break to debug\r\n```\r\nThe original setup also crashes less frequently (did not measure this very precisely though).\r\n\r\nI am not sure how to approach debugging this, but am happy to help with some pointers for what to do. I have also not tried other combinations of `numpy` and `awkward` yet or systematically investigated which kinds of arrays work and which cause crashes.",
  "closed_at":"2022-08-15T18:33:13Z",
  "comments":7,
  "created_at":"2022-02-10T13:48:15Z",
  "id":1130111365,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5DXCGF",
  "number":1283,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.sum segfault: backport v2 solution into v1",
  "updated_at":"2022-08-15T18:33:13Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.8.0rc3\n\n### Description and code to reproduce\n\nPlease consider the following:\r\n```python\r\nimport awkward as ak\r\narray = ak.Array([[5.,6.],[7.]])\r\nmasked = array.mask[[[True, True], [True]]]\r\nempty = masked[[False, False]]\r\n```\r\nNow the following works:\r\n```python\r\narray[ak.argsort(array)]\r\nmasked[ak.argsort(masked)]\r\n```\r\nBut this doesn't (giving `ValueError: only arrays of integers or booleans may be used as a slice`)\r\n```python\r\nempty[ak.argsort(empty)]\r\n```\r\n\r\nI see two inconsistencies here:\r\n- `ak.argsort(masked)` returns an array of values type int, while `ak.argsort(empty)` returns an array of values type float. In both cases it should be int.\r\n- Slicing an array that doesn't have a mask with an array of values type float works, but doing the same with a masked array raises an error. ",
  "closed_at":"2022-03-29T22:12:38Z",
  "comments":6,
  "created_at":"2022-02-15T10:00:53Z",
  "id":1138453201,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5D22rR",
  "number":1288,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ValueError when slicing with empty masked arrays ",
  "updated_at":"2022-03-29T22:12:38Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-18T00:09:06Z",
  "comments":1,
  "created_at":"2022-02-15T17:31:19Z",
  "draft":false,
  "id":1139000104,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4y38fI",
  "number":1289,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-18T00:09:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.with_parameter",
  "updated_at":"2022-02-18T00:09:07Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Stumbled upon this while working on dask-awkward. It's getting triggered from an upstream concatenate\r\n\r\n<details>\r\n<summary>traceback</summary>\r\n\r\n```python\r\nIn [40]: da[:, :, \"x\"]\r\nOut[40]: dask.awkward<getitem, npartitions=2>\r\n\r\nIn [41]: da[:, :, \"x\"].compute()\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\nInput In [41], in <module>\r\n----> 1 da[:, :, \"x\"].compute()\r\n\r\nFile ~/software/repos/dask/dask/base.py:290, in DaskMethodsMixin.compute(self, **kwargs)\r\n    266 def compute(self, **kwargs):\r\n    267     \"\"\"Compute this dask collection\r\n    268 \r\n    269     This turns a lazy Dask collection into its in-memory equivalent.\r\n   (...)\r\n    288     dask.base.compute\r\n    289     \"\"\"\r\n--> 290     (result,) = compute(self, traverse=False, **kwargs)\r\n    291     return result\r\n\r\nFile ~/software/repos/dask/dask/base.py:574, in compute(traverse, optimize_graph, scheduler, get, *args, **kwargs)\r\n    571     postcomputes.append(x.__dask_postcompute__())\r\n    573 results = schedule(dsk, keys, **kwargs)\r\n--> 574 return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])\r\n\r\nFile ~/software/repos/dask/dask/base.py:574, in <listcomp>(.0)\r\n    571     postcomputes.append(x.__dask_postcompute__())\r\n    573 results = schedule(dsk, keys, **kwargs)\r\n--> 574 return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])\r\n\r\nFile ~/software/repos/dask-awkward/src/dask_awkward/core.py:32, in _finalize_array(results)\r\n     30 def _finalize_array(results: Any) -> Any:\r\n     31     if any(isinstance(r, ak.Array) for r in results):\r\n---> 32         return ak.concatenate(results)\r\n     33     elif len(results) == 1 and isinstance(results[0], int):\r\n     34         return results[0]\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/operations/structure/ak_concatenate.py:90, in concatenate(arrays, axis, merge, mergebool, highlevel, behavior)\r\n     87         collapsed = batch[0].mergemany(batch[1:])\r\n     88         batch = [collapsed.merge_as_union(x)]\r\n---> 90 out = batch[0].mergemany(batch[1:])\r\n     91 if isinstance(out, ak._v2.contents.unionarray.UnionArray):\r\n     92     out = out.simplify_uniontype(merge=merge, mergebool=mergebool)\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/contents/listoffsetarray.py:732, in ListOffsetArray.mergemany(self, others)\r\n    728     return self\r\n    729 listarray = ak._v2.contents.listarray.ListArray(\r\n    730     self.starts, self.stops, self._content, None, self._parameters, self._nplike\r\n    731 )\r\n--> 732 return listarray.mergemany(others)\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/contents/listarray.py:941, in ListArray.mergemany(self, others)\r\n    932         raise ValueError(\r\n    933             \"cannot merge \"\r\n    934             + type(self).__name__\r\n   (...)\r\n    937             + \".\"\r\n    938         )\r\n    940 tail_contents = contents[1:]\r\n--> 941 nextcontent = contents[0].mergemany(tail_contents)\r\n    943 nextstarts = ak._v2.index.Index64.empty(total_length, self._nplike)\r\n    944 nextstops = ak._v2.index.Index64.empty(total_length, self._nplike)\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/contents/indexedarray.py:541, in IndexedArray.mergemany(self, others)\r\n    538 if len(others) == 0:\r\n    539     return self\r\n--> 541 head, tail = self._merging_strategy(others)\r\n    543 total_length = 0\r\n    544 for array in head:\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/contents/indexedarray.py:467, in IndexedArray._merging_strategy(self, others)\r\n    465 while i < len(others):\r\n    466     other = others[i]\r\n--> 467     if isinstance(other, ak._v2.content.unionarray.UnionArray):\r\n    468         break\r\n    469     else:\r\n\r\nAttributeError: module 'awkward._v2' has no attribute 'content'\r\n```\r\n</details",
  "closed_at":"2022-02-15T19:49:21Z",
  "comments":1,
  "created_at":"2022-02-15T19:19:04Z",
  "draft":false,
  "id":1139115545,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4y4S7d",
  "number":1290,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-15T19:49:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix a typo",
  "updated_at":"2022-02-15T20:09:45Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-20T07:52:03Z",
  "comments":2,
  "created_at":"2022-02-16T10:38:26Z",
  "draft":false,
  "id":1139837262,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4y6rVj",
  "number":1291,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[CUDA] This PR checks in all the generated kernels.",
  "updated_at":"2022-09-23T00:49:47Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-17T21:25:29Z",
  "comments":1,
  "created_at":"2022-02-16T22:19:07Z",
  "draft":false,
  "id":1140643858,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4y9Gy8",
  "number":1292,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-17T21:25:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.with_field",
  "updated_at":"2022-02-17T21:25:29Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-18T18:01:26Z",
  "comments":1,
  "created_at":"2022-02-17T13:31:46Z",
  "draft":false,
  "id":1141343127,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4y_Zsq",
  "number":1293,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-18T18:01:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.full_like, ak.zeros_like, ak.ones_like",
  "updated_at":"2022-02-18T18:01:27Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Following @martindurant's https://github.com/ContinuumIO/dask-awkward/pull/17 very closely, to do the fsspec and Dataset stuff right.",
  "closed_at":"2022-02-18T02:50:33Z",
  "comments":1,
  "created_at":"2022-02-17T15:45:13Z",
  "draft":false,
  "id":1141512231,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4y_9yq",
  "number":1294,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-18T02:50:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak._v2.from_arrow_schema function",
  "updated_at":"2022-02-18T02:50:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski and @miranov25 - it would be nice to move the discussion here. This PR is empty for the moment - I've just started on it, but it will be addressing the issue #588.\r\n\r\nAny thoughts, ideas, and early requests are welcome!\r\n",
  "closed_at":"2022-04-26T19:04:35Z",
  "comments":26,
  "created_at":"2022-02-17T17:21:18Z",
  "draft":true,
  "id":1141630189,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zAWpE",
  "number":1295,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Awkward to RDataFrame: to start a discussion",
  "updated_at":"2022-09-01T12:25:33Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-18T22:03:32Z",
  "comments":1,
  "created_at":"2022-02-18T14:34:24Z",
  "draft":false,
  "id":1143171958,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zFuHj",
  "number":1296,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-18T22:03:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.fields",
  "updated_at":"2022-02-18T22:03:32Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-18T22:01:53Z",
  "comments":1,
  "created_at":"2022-02-18T16:15:47Z",
  "draft":false,
  "id":1143341213,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zGT8J",
  "number":1297,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-18T22:01:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.without_parameters",
  "updated_at":"2022-02-18T22:01:53Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This will unblock https://github.com/scikit-hep/vector/pull/172, as soon is it gets into a release.\r\n\r\nRather than change Vector to get non-release candidate versions, I should try to get a release candidate for Awkward out. It's overdue.",
  "closed_at":"2022-02-18T23:21:14Z",
  "comments":1,
  "created_at":"2022-02-18T22:51:58Z",
  "draft":false,
  "id":1143893561,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zIQru",
  "number":1298,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-18T23:21:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Allow ak.nan_to_num arguments to be arrays.",
  "updated_at":"2022-02-18T23:21:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"It's just cosmetic, but it was bugging me. Doing them all in one PR like this should be very mergeable (we're usually not making changes on that line).",
  "closed_at":"2022-02-19T00:07:56Z",
  "comments":1,
  "created_at":"2022-02-18T23:38:21Z",
  "draft":false,
  "id":1143945952,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zIcrC",
  "number":1299,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-19T00:07:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove unnecessary line blank from the tops of almost all files .",
  "updated_at":"2022-02-19T00:07:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is for the Awkward \u2192 RDataFrame step in ianna/awkward-to-rdf, but it won't include any RDataFrame-specific stuff (just Cling). @ianna will be able to use this, so it's a blocker for the to-RDF step, but it's not a blocker for the from-RDF step.\r\n\r\nThings to do:\r\n\r\n  - [x] Extract the `Lookup` class and `tolookup` function(s) from the Numba implementation to use them here. There's nothing Numba-specific about them, but those functions are spread throughout all the Numba Content Types as classmethods. Probably the right way to do it is to make a suite of LookupTypes that is independent of both Numba and C++, then the Numba Content Types would be subclasses. It's relevant because the LookupTypes are, in part, defined by the `cls.STARTS`, `cls.STOPS`, `cls.CONTENT` constants that define the order of the lookup table, and we want to keep that code together as a unit.\r\n  - [x] Set up a test for development. This is all v2.\r\n  - [x] Define a superclass `ak::ArrayView` with `start`, `stop`, `which_array`, and `array_ptrs` (32 bytes). All of the Awkward data will be subclasses of this, but they will add no member data and only the subclasses would ever get instantiated. (Find out if this means there will be an unwanted vtable or not.)\r\n  - [x] Also an `ak::RecordView`, which doesn't derive from the above (sequences and scalars are distinct).\r\n  - [x] Set up the abstract `ak::List<T>`, from which concrete types will derive. If `T` is a primitive type, the concrete type will either be another `ak::List<T>` or a `ROOT::RVec<T>`, depending on a user configuation. [This question](https://stackoverflow.com/q/5478866/1623645) prescribes the set of methods expected on an immutable sequence. Include a placeholder for a `to_RVec() const` method.\r\n  - [x] Generate concrete record classes, deriving from `ak::RecordView`.\r\n  - [x] Generate examples of [std::optional<T>](https://en.cppreference.com/w/cpp/utility/optional) to get a sense of how that works. No need for an Awkward-specific class.\r\n  - [x] Generate examples of [std::variant<T>](https://en.cppreference.com/w/cpp/utility/variant) to get a sense of how that works. No need for an Awkward-specific class.\r\n  - [x] Do NumpyArray (only real, 1-D arrays, no EmptyArray, multidimensional, or non-contiguous because the conversion to Lookup handles that).\r\n  - [x] Do RegularArray.\r\n  - [x] Do ListArray (no ListOffsetArray because the conversion to Lookup makes them all ListArray).\r\n  - [x] Do IndexedArray.\r\n  - [x] Do IndexedOptionArray.\r\n  - [x] Do ByteMaskedArray.\r\n  - [x] Do BitMaskedArray.\r\n  - [x] Do UnmaskedArray.\r\n  - [x] Do RecordArray.\r\n  - [x] Do UnionArray (couldn't be done in Numba, but C++ has `std::variant`, so maybe).\r\n\r\nThat should do it. In the end, it should have a clean API for @ianna to use.",
  "closed_at":"2022-02-23T04:34:50Z",
  "comments":1,
  "created_at":"2022-02-19T00:51:47Z",
  "draft":false,
  "id":1144051282,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zI1cy",
  "number":1300,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-23T04:34:49Z"
  },
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Implement Awkward --> C++ with Cling.",
  "updated_at":"2022-02-23T04:34:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-24T18:34:03Z",
  "comments":1,
  "created_at":"2022-02-21T14:51:25Z",
  "draft":false,
  "id":1145898785,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zO9UK",
  "number":1301,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-24T18:34:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.strings_astype",
  "updated_at":"2022-02-24T18:34:03Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n2759ac81\r\n\r\n### Description and code to reproduce\r\n\r\nConsider this reproducer:\r\n```python3\r\nimport awkward as ak\r\n\r\nbuilder = ak.layout.LayoutBuilder64(\"\"\"\r\n{\r\n    \"form_key\": \"root\",\r\n    \"class\": \"RecordArray\",\r\n    \"contents\": {\r\n        \"u\": {\r\n            \"form_key\": \"u\",\r\n            \"class\": \"ListOffsetArray64\",\r\n            \"offsets\": \"i64\",\r\n            \"content\": {\r\n                \"form_key\": \"u-content\",\r\n                \"class\": \"RecordArray\",\r\n                \"contents\": {\r\n                    \"i\": {\r\n                        \"class\": \"NumpyArray\",\r\n                        \"primitive\": \"int64\",\r\n                        \"form_key\": \"u-content.i\"\r\n                    },\r\n                    \"j\": {                    \r\n                        \"class\": \"ListOffsetArray64\",\r\n                        \"offsets\": \"i64\",\r\n                        \"content\": \"int64\",\r\n                        \"form_key\": \"u-content.j\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"v\": {\r\n            \"class\": \"NumpyArray\",\r\n            \"primitive\": \"float64\",\r\n            \"form_key\": \"v\"\r\n        },\r\n        \"w\": {\r\n            \"class\": \"NumpyArray\",\r\n            \"primitive\": \"int64\",\r\n            \"form_key\": \"w\"\r\n        },\r\n        \"x\": {\r\n            \"class\": \"NumpyArray\",\r\n            \"primitive\": \"int64\",\r\n            \"form_key\": \"x\"\r\n        }\r\n    }\r\n}\r\n\"\"\")\r\n\r\nbuilder.begin_list()  # u\r\n\r\nbuilder.int64(1)  # i\r\nbuilder.begin_list()  # j\r\nbuilder.int64(2)\r\nbuilder.end_list()  # j\r\n\r\nbuilder.end_list()  # u\r\n\r\nbuilder.float64(3.0)  # v\r\nbuilder.int64(4)  # w \r\nbuilder.int64(5)  # x\r\n\r\nprint(ak.Array(builder.snapshot()))\r\n\r\n```\r\nThis example fails with an error \r\n```pytb\r\nTraceback (most recent call last):\r\n  File ..., line 36, in <module>\r\n    result.int64(2)\r\nValueError: ListOffsetArray Builder node-id4-offsets needs begin_list\r\n```\r\nThe reason that this happens is that currently the `RecordArrayBuilder` primitive operations (`int64`, `float64`) post-increment the field index. This means that when the user has `RecordArray`s _inside_ lists _inside_ `RecordArray`s, operations that the user expects to apply to the innermost `RecordArrayBuilder` are also modifying the outermost builder. This ultimately leads to obscure error messages.\r\n\r\nThe control flow is a little tricky to follow, so I'll outline what's happening below:\r\n- The root `RecordArrayBuilder` has `field_index() == 0` after the first `builder.begin_list()` on line 49.\r\n- The root `RecordArrayBuilder` has `field_index() == 1` after the first `builder.int64(1)` on line 51.\r\n\r\nThis is where the bug happens. The first call to `builder.int64` is only supposed to modify the inner `RecordArrayBuilder`, but it also modifies the root `RecordArrayBuilder`. This is because we always increment the index even when the `RecordArrayBuilder` is inside a list. It follows that the subsequent call to `builder.begin_list()` operates on field 1, which is the `NumpyArrayBuilder` \"v\", instead of the `ListOffsetArray64` \"j\".\r\n",
  "closed_at":"2022-02-22T08:54:21Z",
  "comments":0,
  "created_at":"2022-02-21T15:12:53Z",
  "id":1145924370,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ETWsS",
  "number":1302,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`RecordArrayBuilder` does not support nested lists correctly",
  "updated_at":"2022-02-22T08:54:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This would fix #1302 by holding the `field_index_` constant whilst in an `inside-list` state.",
  "closed_at":"2022-02-22T08:54:21Z",
  "comments":3,
  "created_at":"2022-02-21T15:14:47Z",
  "draft":false,
  "id":1145926687,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zPDQ-",
  "number":1303,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-22T08:54:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: do not increment field index for nested lists",
  "updated_at":"2022-02-22T08:54:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-22T14:17:15Z",
  "comments":1,
  "created_at":"2022-02-21T17:41:49Z",
  "draft":false,
  "id":1146077575,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zPjNK",
  "number":1304,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-22T14:17:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.argsort",
  "updated_at":"2022-02-22T14:17:15Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.8.0rc3\n\n### Description and code to reproduce\n\nPlease consider the following\r\n\r\n```python\r\nimport awkward as ak\r\n\r\n\r\nx = ak.Array([[5.]])\r\ny = ak.Array([True])\r\n\r\nx[y, 0]\r\nx[y.mask[[True]], 0]\r\n```\r\n\r\nThe last line will raise the following error\r\n`RuntimeError: ListOffsetArray::getitem_next(SliceAt): !advanced.is_empty_advanced()`\r\nI don't think the line should raise an error and I am unsure what the error message is telling me.",
  "closed_at":"2022-08-15T20:15:27Z",
  "comments":2,
  "created_at":"2022-02-21T17:55:22Z",
  "id":1146087205,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ET-cl",
  "number":1305,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"RuntimeError when slicing two dimensions using a masked array",
  "updated_at":"2022-08-15T20:15:27Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-22T15:12:28Z",
  "comments":1,
  "created_at":"2022-02-22T14:36:57Z",
  "draft":false,
  "id":1146992163,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zSi1u",
  "number":1306,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-22T15:12:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Awkward CUDA Kernel's version should be tied with Awkward",
  "updated_at":"2022-02-22T15:12:29Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-23T20:25:35Z",
  "comments":1,
  "created_at":"2022-02-22T14:48:09Z",
  "draft":false,
  "id":1147005263,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zSllc",
  "number":1307,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-23T20:25:35Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.argcombinations, ak.combinations",
  "updated_at":"2022-02-23T20:25:35Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This broadcasts any option types at the depth limit, and forms the RecordArray layout node below the result.\r\n\r\nEffectively, this produces `?(int64, float64)` instead of `(?int64, ?float64)`\r\n\r\nThis feature is particularly useful when rezipping `RecordArray`s with `?{...}` types. Without it, after `zip`ping the contents of a `RecordArray` back together, we would end up with `{?..., ?...}` types.\r\n\r\nP.S. I'm not sure on the naming of the argument to `ak.zip`. Feel free to suggest something clearer / shorter :)",
  "closed_at":"2022-02-23T21:03:50Z",
  "comments":20,
  "created_at":"2022-02-23T09:48:56Z",
  "draft":false,
  "id":1147870886,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zVS6E",
  "number":1308,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-23T21:03:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: add `after_option` argument to `ak.zip`",
  "updated_at":"2022-03-01T23:33:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-23T20:22:36Z",
  "comments":1,
  "created_at":"2022-02-23T12:22:54Z",
  "draft":false,
  "id":1148025221,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zVzZz",
  "number":1309,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-23T20:22:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.sort",
  "updated_at":"2022-02-23T20:22:36Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This broke Coffea. Should test Coffea again afterward. @lgray @nsmith- ",
  "closed_at":"2022-02-23T18:04:24Z",
  "comments":1,
  "created_at":"2022-02-23T17:30:27Z",
  "draft":false,
  "id":1148377355,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zW9YL",
  "number":1310,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-23T18:04:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix lost 'behavior' in 'ak.unzip'.",
  "updated_at":"2022-02-23T18:04:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.8.0rc4\n\n### Description and code to reproduce\n\nThis looks to be related to #1216 -- the typetracer length issue causing the repr to break is now raising if I try to compute the meta of an object that has had len map partitioned across it:\r\n\r\n```python\r\nx = dak.from_json(...)\r\nx.map_partitions(len)\r\n```\r\nwill fail because `map_partitions` will try to call `len(x.meta)` to compute a new meta.\r\n\r\n\r\n```python\r\nIn [95]: x\r\nOut[95]: dask.awkward<getitem, npartitions=2>\r\n\r\nIn [96]: x.meta\r\nOut[96]: <Array-typetracer type='?? * var * int64'>\r\n\r\nIn [97]: x.compute()\r\nOut[97]: <Array [[1, 2, 3], [1, 2], ..., [3, ..., 4], [1, 2, 3]] type='40 * var * int64'>\r\n\r\nIn [98]: len(x.meta)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nInput In [98], in <module>\r\n----> 1 len(x.meta)\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/highlevel.py:537, in Array.__len__(self)\r\n    527 def __len__(self):\r\n    528     \"\"\"\r\n    529     The length of this Array, only counting the outermost structure.\r\n    530 \r\n   (...)\r\n    535     is `3`, not `5`.\r\n    536     \"\"\"\r\n--> 537     return len(self._layout)\r\n\r\nTypeError: 'UnknownLengthType' object cannot be interpreted as an integer\r\n```\r\n\r\nI traced the `__len__(self)` call for `x.meta` to be rely on the `length` attr of its `layout` (which is an `awkward._v2._typetracer.UnknownLengthType`):\r\n```\r\nIn [111]: x.meta._layout.length\r\nOut[111]: UnknownLength\r\n```",
  "closed_at":"2022-03-01T23:17:37Z",
  "comments":6,
  "created_at":"2022-02-23T19:27:19Z",
  "id":1148489869,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5EdJCN",
  "number":1311,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"len of typetracer array raises TypeError (cannot be interpreted as integer)",
  "updated_at":"2022-03-01T23:17:37Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I have no idea whether this addresses #1311, @douglasdavis, but it does maximize the amount of length information available by turning concrete arrays of length `N` into typetracer arrays of length `N`, rather than `UnknownLength`. It will definitely happen that intermediate calculations will create arrays of unknown length, which could legitimately result in the final array having unknown length. This PR should just make that happen less often, in fewer circumstances.",
  "closed_at":"2022-03-01T04:15:29Z",
  "comments":5,
  "created_at":"2022-02-23T23:03:11Z",
  "draft":false,
  "id":1148670062,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zX7AQ",
  "number":1312,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-01T04:15:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Keep as much length knowledge as possible in typetracers.",
  "updated_at":"2022-03-01T04:15:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-03-01T04:16:14Z",
  "comments":1,
  "created_at":"2022-02-24T03:47:42Z",
  "draft":false,
  "id":1148826980,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zYbTk",
  "number":1313,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-01T04:16:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: avoid PyPI cuda wheel upload",
  "updated_at":"2022-03-01T04:16:15Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Currently, this leaves the \"non-Python\" install alone, and doesn't restructure this; in theory this should just slim up the wheels a bit.",
  "closed_at":"2022-03-01T04:16:27Z",
  "comments":1,
  "created_at":"2022-02-24T03:48:28Z",
  "draft":false,
  "id":1148827310,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zYbXx",
  "number":1314,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-01T04:16:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: remove extra files from the wheels",
  "updated_at":"2022-03-01T04:16:28Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"\"wheel\" is included with proper version by get_requires_for_build_wheel from PEP 517, and isn't required for making an sdist, and might not be required in the future at all (in which case setuptools will modify get_requires_for_build_wheel). It's available even in setuptools 40.8.",
  "closed_at":"2022-02-27T03:20:17Z",
  "comments":1,
  "created_at":"2022-02-24T03:52:55Z",
  "draft":false,
  "id":1148829240,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zYbw1",
  "number":1315,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: no need to specify wheel",
  "updated_at":"2022-09-23T00:49:45Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-03-01T04:15:56Z",
  "comments":1,
  "created_at":"2022-02-24T03:57:31Z",
  "draft":false,
  "id":1148831253,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zYcLk",
  "number":1316,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-01T04:15:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: bump pybind11 to 2.9.1",
  "updated_at":"2022-03-01T04:15:56Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-02-24T18:54:07Z",
  "comments":1,
  "created_at":"2022-02-24T10:50:19Z",
  "draft":false,
  "id":1149136242,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zZcEy",
  "number":1317,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-24T18:54:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.cartesian, ak.argcartesian",
  "updated_at":"2022-02-24T18:54:07Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.8.0rc6\r\n\r\n### Description and code to reproduce\r\n```pycon\r\n>>> x = y = ak.Array([0,1])\r\n>>> np.ravel_multi_index((x, y), (2, 2))\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n/tmp/ipykernel_373001/4032150548.py in <module>\r\n      1 x = y = ak.Array([0,1])\r\n      2 \r\n----> 3 np.ravel_multi_index((x, y), (2, 2))\r\n\r\n<__array_function__ internals> in ravel_multi_index(*args, **kwargs)\r\n\r\n~/.mambaforge/envs/texat/lib/python3.9/site-packages/awkward/highlevel.py in __array_function__(self, func, types, args, kwargs)\r\n   1432         See also #__array_ufunc__.\r\n   1433         \"\"\"\r\n-> 1434         return ak._connect._numpy.array_function(func, types, args, kwargs)\r\n   1435 \r\n   1436     @property\r\n\r\n~/.mambaforge/envs/texat/lib/python3.9/site-packages/awkward/_connect/_numpy.py in array_function(func, types, args, kwargs)\r\n     32     function = implemented.get(func)\r\n     33     if function is None:\r\n---> 34         args = tuple(_to_rectilinear(x) for x in args)\r\n     35         kwargs = {k: _to_rectilinear(v) for k, v in kwargs.items()}\r\n     36         out = func(*args, **kwargs)\r\n\r\n~/.mambaforge/envs/texat/lib/python3.9/site-packages/awkward/_connect/_numpy.py in <genexpr>(.0)\r\n     32     function = implemented.get(func)\r\n     33     if function is None:\r\n---> 34         args = tuple(_to_rectilinear(x) for x in args)\r\n     35         kwargs = {k: _to_rectilinear(v) for k, v in kwargs.items()}\r\n     36         out = func(*args, **kwargs)\r\n\r\n~/.mambaforge/envs/texat/lib/python3.9/site-packages/awkward/_connect/_numpy.py in _to_rectilinear(arg)\r\n     24     if isinstance(arg, Iterable):\r\n     25         nplike = ak.nplike.of(arg)\r\n---> 26         return nplike.to_rectilinear(arg, allow_missing=False)\r\n     27     else:\r\n     28         return arg\r\n\r\n~/.mambaforge/envs/texat/lib/python3.9/site-packages/awkward/nplike.py in to_rectilinear(self, array, *args, **kwargs)\r\n    447 \r\n    448         elif isinstance(array, Iterable):\r\n--> 449             return [self.to_rectilinear(x, *args, **kwargs) for x in array]\r\n    450 \r\n    451         else:\r\n\r\n~/.mambaforge/envs/texat/lib/python3.9/site-packages/awkward/nplike.py in <listcomp>(.0)\r\n    447 \r\n    448         elif isinstance(array, Iterable):\r\n--> 449             return [self.to_rectilinear(x, *args, **kwargs) for x in array]\r\n    450 \r\n    451         else:\r\n\r\n~/.mambaforge/envs/texat/lib/python3.9/site-packages/awkward/nplike.py in to_rectilinear(self, array, *args, **kwargs)\r\n    450 \r\n    451         else:\r\n--> 452             raise TypeError(\"to_rectilinear argument must be iterable\")\r\n    453 \r\n    454     def __getitem__(self, name_and_types):\r\n\r\nTypeError: to_rectilinear argument must be iterable\r\n```\r\n\r\nI don't think this is related to a6e04dd147e2993944c56255928d6f0e2e25fd49 although I didn't see this error before. I *think* this might be related to #1198.\r\n\r\nThere are some NumPy functions that receive iterable arguments of scalars, e.g `np.ravel_multi_index`. It is possible to work-around the bug in this case by passing in an `Array` instead of tuple-of-scalars, but I think that we should support this.\r\n",
  "closed_at":"2023-01-03T18:28:15Z",
  "comments":0,
  "created_at":"2022-02-24T11:38:04Z",
  "id":1149182368,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5EfyGg",
  "number":1318,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`to_rectilinear` should support scalars",
  "updated_at":"2023-01-03T18:28:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nThis\r\n\r\n```python\r\n@nb.vectorize([nb.float64(nb.float32, nb.float32, nb.float32, nb.float32)])\r\ndef fake_distance(lon1, lon2, lat1, lat2):\r\n    return np.sqrt((lon1 - lon2)**2 + (lat1 - lat2)**2)\r\n\r\nlon_ak = ak.unflatten(np.asarray(ds.longitude), np.asarray(ds.rowsize))\r\nlat_ak = ak.unflatten(np.asarray(ds.latitude), np.asarray(ds.rowsize))\r\n\r\ntt = fake_distance(\r\n    lon_ak[:, 1:], lon_ak[:, :-1],\r\n    lat_ak[:, 1:], lat_ak[:, :-1],\r\n)```\r\n\r\nis some 5 times slower than this\r\n\r\n```python\r\ndistance_traj = np.zeros(ds.dims['obs'])\r\nlon_ds = ds.longitude.values\r\nlat_ds = ds.latitude.values\r\n\r\nfor i in range(0, ds.dims['traj']):\r\n    r = np.arange(traj_idx[i], traj_idx[i+1])\r\n    distance_traj[r[:-1]] = fake_distance(\r\n                                lon_ds[r[1:]], lon_ds[r[:-1]],\r\n                                lat_ds[r[1:]], lat_ds[r[:-1]]\r\n                            )\r\n```\r\n\r\nand it's probably due to the four slices (`lon_ak[:, 1:]`, etc.). Slices in which all dimensions are sliced with a range-slice (what Python just calls \"`slice`\") could be a special code path that views, rather than copy&compacts the data. Non-tuple range-slices already view, but there's no reason why this couldn't also be implemented for a tuple of only range-slices (and also integers, though that adds complexity). Other than exhaustion, that is. `:)`\r\n\r\nAmong possible optimizations, this could be an important one, especially given how common it is to want to use full slices all the way down to some level (`:, :, :, :, ...`).",
  "closed_at":null,
  "comments":2,
  "created_at":"2022-02-24T16:06:21Z",
  "id":1149468999,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Eg4FH",
  "number":1319,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Slice of all range-slices could be a view, that's a common case that could be optimized",
  "updated_at":"2022-02-24T16:51:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\n```python\r\n>>> np.mean(np.array([[], [], []]), axis=1)\r\n/home/jpivarski/mambaforge/lib/python3.9/site-packages/numpy/core/fromnumeric.py:3440: RuntimeWarning: Mean of empty slice.\r\n  return _methods._mean(a, axis=axis, dtype=dtype,\r\n/home/jpivarski/mambaforge/lib/python3.9/site-packages/numpy/core/_methods.py:181: RuntimeWarning: invalid value encountered in true_divide\r\n  ret = um.true_divide(\r\narray([nan, nan, nan])\r\n```\r\n\r\nversus\r\n\r\n```python\r\n>>> ak.mean(ak._v2.Array([[], [], []]), axis=1)\r\n<Array [None, None, None] type='3 * ?float64'>\r\n```\r\n\r\nIdentified by @douglasdavis. We saw it in a typetracer, but the typetracer follows what the Array does.",
  "closed_at":"2022-11-10T21:51:33Z",
  "comments":0,
  "created_at":"2022-02-24T16:32:15Z",
  "id":1149498517,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Eg_SV",
  "number":1320,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"For NumPy compliance, `ak.mean` (and possibly others) should turn None into NaN",
  "updated_at":"2023-02-15T19:10:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@henryiii I'm following the example of https://github.com/scikit-hep/uproot4/pull/565 and the other Scikit-HEP packages. I think this one didn't match your `sed` string because it specifies a version.\r\n\r\nIf this is the right thing to do for Awkward as well, go ahead and merge this PR.\r\n\r\nCloses #1315.",
  "closed_at":"2022-02-27T03:20:17Z",
  "comments":4,
  "created_at":"2022-02-25T18:46:33Z",
  "draft":false,
  "id":1150747638,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zeySO",
  "number":1322,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-02-27T03:20:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: wheel not required for setuptools PEP 517 (all-repos)",
  "updated_at":"2022-02-27T03:20:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nAs discussed in https://github.com/scikit-hep/awkward-1.0/pull/1274#issuecomment-1036768311 and following, reducers with `axis=-1` (and the positive-axis equivalent) should be a separate code path that doesn't create all the `parents`, `starts`, etc. The GPU version, at least, would still have to be `parents` based, though a CPU version could skip the step of creating `parents`. (For the sake of keeping CPU and GPU the same, maybe make just this one `parents` array anyway? What's the cost on CPU only?)",
  "closed_at":null,
  "comments":0,
  "created_at":"2022-02-26T20:55:38Z",
  "id":1152288850,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ErohS",
  "number":1323,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Specialize reducers with axis=-1",
  "updated_at":"2022-02-26T20:55:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nExample of buggy behavior TBD, though I'd be surprised if we have trouble finding it again.\r\n\r\nAnyway, the `@` operator is currently implemented using Numba, and it should be implemented with kernels like everything else, so this requires revision, anyway. @lukasheinrich was asking about this on Slack at one point.",
  "closed_at":"2022-04-15T19:04:32Z",
  "comments":2,
  "created_at":"2022-02-26T21:05:12Z",
  "id":1152300325,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ErrUl",
  "number":1324,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Matrix multiplication (@ operator) is broken and needs to be ported to kernels (from Numba)",
  "updated_at":"2022-04-15T19:04:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nLike `np.nanmean`, raised by @philippemiron.",
  "closed_at":"2022-04-20T02:12:22Z",
  "comments":1,
  "created_at":"2022-02-26T21:23:56Z",
  "id":1152323466,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Erw-K",
  "number":1325,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"The \"nan\" versions of all the reducers and statistics functions",
  "updated_at":"2022-04-20T02:12:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- [x] Drop documentation of `ak.highlevel.ArrayBuilder.extend`\r\n- [x] Drop documentation of `ak.layout.ArrayBuilder.extend`\r\n- [x] Drop documentation of `ak.layout.ArrayBuilder.append`\r\n- [x] Fix typo of `ArrayBuilder`",
  "closed_at":"2022-03-01T13:11:14Z",
  "comments":3,
  "created_at":"2022-02-28T13:38:35Z",
  "draft":false,
  "id":1154105034,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zqljS",
  "number":1326,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-01T13:11:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Docs: fix typo in documentation",
  "updated_at":"2022-03-01T13:11:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@swishdiff This is setting things up so that we'll have an error state to send to the background thread that we talked about today.\r\n\r\nHere's what it looks like in this PR:\r\n\r\n```python\r\nak._v2.to_numpy(ak._v2.Array([[1, 2, 3], [], [4, 5]]))\r\n```\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/operations/convert/ak_to_numpy.py\", line 41, in to_numpy\r\n    return _impl(array, allow_missing)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/operations/convert/ak_to_numpy.py\", line 50, in _impl\r\n    return layout.to_numpy(allow_missing=allow_missing)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/content.py\", line 1276, in to_numpy\r\n    return self._to_numpy(allow_missing)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/listoffsetarray.py\", line 2182, in _to_numpy\r\n    return ak._v2.operations.convert.to_numpy(self.toRegularArray(), allow_missing)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/listoffsetarray.py\", line 159, in toRegularArray\r\n    self._handle_error(\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/content.py\", line 212, in _handle_error\r\n    raise ak._v2._util.error(ValueError(message))\r\nValueError: while calling (from <stdin>, line 1)\r\n\r\n    ak._v2.to_numpy(\r\n        array = <Array [[1, 2, 3], [], [4, 5]] type='3 * var * int64'>,\r\n        allow_missing = True\r\n    )\r\n\r\nError details: cannot convert to RegularArray because subarray lengths are not regular (in compiled code:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/1.8.0rc3/src/cpu-kernels/awkward_ListOffsetArray_toRegularArray.cpp#L22)\r\n```\r\n\r\nEven though the error occurred deep inside `_to_numpy`, `toRegularArray`, `_handle_error`, the error message knows that the Awkward operation is `ak._v2.to_numpy`, called from `<stdin>, line 1`. Operations, like `ak.this` and `ak.that`, as well as slices and NumPy ufunc calls, are special\u2014they have more granularity than other functions\u2014so we call [traceback.extract_traceback](https://docs.python.org/3/library/traceback.html#traceback.extract_stack) and hold onto that stack location for that one point (per thread\u2014we don't know if a user is running this in threads), as well as the function arguments, for the print-out. This memory doesn't leak because a non-reenterant error context is made with a context manager (Python is certain to give it up before control returns to the user).\r\n\r\nThis does imply a few things for our coding style:\r\n\r\n  1. All exceptions from Awkward code must pass their exceptions through `ak._v2._util.error` before raising them.\r\n  2. All `ak.this` and `ak.that` operations must set up a error context manager. They're all implemented in separate files, so I've made the function itself just do the context manager and call `_impl` in the same file, and `_impl` does all of the work.\r\n  3. The \"non-reenterant error context\" is non-reenterant in the sense that it only pays attention to the first level of calling (i.e. if `ak.this` calls `ak.that`, which calls `ak.this`, only the first `ak.this` is tracked for the error message). So `ak.this` functions calling `ak.that` functions is now \"bad form,\" but not broken. We should try to avoid these nested calls\u2014think of this as a flat set of functions that are all user-oriented, not dog-fooded, but it isn't terrible if it happens by accident.\r\n\r\nSince this affects coding style for everyone, let me link everyone in here: @ianna, @ioanaif, @agoose77, @henryiii.\r\n\r\nI think this PR is ready to go, but I'm going to leave it open to let everyone have a chance to comment, ask questions, or to object.",
  "closed_at":"2022-03-03T21:46:56Z",
  "comments":28,
  "created_at":"2022-03-01T02:42:35Z",
  "draft":false,
  "id":1154785206,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zs1JI",
  "number":1327,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-03T21:46:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Straighten out error handling via a thread-local (but otherwise global) context",
  "updated_at":"2022-03-04T18:12:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\r\n\r\n1.8.0rc6\r\n\r\n### Description and code to reproduce\r\n\r\nTrying to call `ak.num` with `axis=0` on a  typetracer array raises an exception\r\n\r\nMinimal reproducer (with `import awkward._v2 as ak`):\r\n\r\n```python\r\nIn [28]: x = ak.Array([[[1, 2, 3], [], [4]], [[3], []]])\r\n\r\nIn [29]: x\r\nOut[29]: <Array [[[1, 2, 3], [], [4]], [[3], []]] type='2 * var * var * int64'>\r\n\r\nIn [31]: ak.Array(x.layout.typetracer)\r\nOut[31]: <Array-typetracer type='?? * var * var * int64'>\r\n\r\nIn [32]: x_tt = ak.Array(x.layout.typetracer)\r\n\r\nIn [33]: ak.num(x_tt, axis=1)\r\nOut[33]: <Array-typetracer type='?? * int64'>\r\n\r\nIn [34]: ak.num(x_tt, axis=2)\r\nOut[34]: <Array-typetracer type='?? * var * int64'>\r\n\r\nIn [35]: ak.num(x_tt, axis=0)\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\nInput In [35], in <cell line: 1>()\r\n----> 1 ak.num(x_tt, axis=0)\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/operations/structure/ak_num.py:72, in num(array, axis, highlevel, behavior)\r\n      9 \"\"\"\r\n     10 Args:\r\n     11     array: Data containing nested lists to count.\r\n   (...)\r\n     67     <Array [[1.1, 2.2, 3.3], None, [7.7]] type='3 * option[var * float64]'>\r\n     68 \"\"\"\r\n     69 layout = ak._v2.operations.convert.to_layout(\r\n     70     array, allow_record=False, allow_other=False\r\n     71 )\r\n---> 72 out = layout.num(axis=axis)\r\n     73 if isinstance(out, (ak._v2.contents.Content, ak._v2.record.Record)):\r\n     74     return ak._v2._util.wrap(out, behavior, highlevel)\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/contents/listoffsetarray.py:589, in ListOffsetArray.num(self, axis, depth)\r\n    587 if posaxis == depth:\r\n    588     out = ak._v2.index.Index64.empty(1, self._nplike)\r\n--> 589     out[0] = self.length\r\n    590     return ak._v2.contents.numpyarray.NumpyArray(out, None, None, self._nplike)[\r\n    591         0\r\n    592     ]\r\n    593 elif posaxis == depth + 1:\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/index.py:148, in Index.__setitem__(self, where, what)\r\n    147 def __setitem__(self, where, what):\r\n--> 148     self._data[where] = what\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/_typetracer.py:281, in TypeTracerArray.__setitem__(self, where, what)\r\n    280 def __setitem__(self, where, what):\r\n--> 281     raise AssertionError(\r\n    282         \"bug in Awkward Array: attempt to set values of a TypeTracerArray\"\r\n    283     )\r\n\r\nAssertionError: bug in Awkward Array: attempt to set values of a TypeTracerArray\r\n\r\nIn [36]: ak.num(x, axis=0)\r\nOut[36]: 2\r\n```",
  "closed_at":"2022-03-03T20:09:52Z",
  "comments":0,
  "created_at":"2022-03-01T15:17:41Z",
  "id":1155465047,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5E3v9X",
  "number":1328,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.num on typetracer array raising AssertionError (attempt to set values of TypeTracerArray)",
  "updated_at":"2022-03-03T20:09:52Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@douglasdavis, this fixes #1328. I'll merge it into main after 1.8.0 is released.",
  "closed_at":"2022-03-03T20:09:52Z",
  "comments":2,
  "created_at":"2022-03-01T20:32:41Z",
  "draft":false,
  "id":1155788239,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zwIbm",
  "number":1329,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-03T20:09:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed ak.num with axis=0 in typetracer.",
  "updated_at":"2022-03-03T20:09:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@swishdiff This is based on the `ErrorContext` from #1327. Nothing has been tested yet, just trying out ideas.\r\n\r\nThis asynchronous nplike could be used with any other nplike performing the work, so I'm trying things out with `ak.nplike.Numpy.instance()` as the backend.",
  "closed_at":"2022-03-07T16:46:57Z",
  "comments":5,
  "created_at":"2022-03-02T00:51:16Z",
  "draft":true,
  "id":1156074099,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4zxHU9",
  "number":1331,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"What a delayed nplike would look like",
  "updated_at":"2022-09-23T00:49:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"In #1308 there was a conversation about the policy for accepting redundant (unsimplified) layouts. There have been at least two cases (#713, #1308 discussion) where non-simplified layouts produce strange results when passed to high level functions, and until now I've raised these as bugs.\r\n\r\nAfter the discussion with @jpivarski in #1308 I've realised that this is a policy issue, as Awkward functions themselves do/should not produce such layouts. Accepting redundant layouts is transparent in some functions (like `ak.unflatten` and `ak.packed`), but not those where the high-level function needs to match a particular layout structure. Such functions are made far simpler by the requirement of simplified layouts.\r\n\r\nThe take-away is:\r\n- Awkward should not produce non-simplified Arrays\r\n- Users of the mid-layer should check that they don't produce non-simplified Arrays\r\n\r\nTo support external users of the mid layer, I think it would be helpful to catch cases where this invariant fails; bugs in the Awkward code-base will more easily found than those in external users' code (because we will have a greater number of users overall). ",
  "closed_at":"2023-02-18T17:57:20Z",
  "comments":4,
  "created_at":"2022-03-02T09:20:59Z",
  "id":1156875770,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5E9IX6",
  "number":1333,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Rejection of invalid layouts.",
  "updated_at":"2023-02-18T17:57:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"As outlined in #1333, I think it would be useful to make it safer for users of the middle layer `ak._v2.contents` to create layouts. At present, it's possible (and not altogether hard) to create layouts that are _not_ simplified. This PR will not solve the problem of layouts with invalid offsets, but these sorts of mistakes are usually much easier to discover because things tend to fail quite noisily.\r\n\r\nThe purpose of this PR is to look at what this API might look like.",
  "closed_at":"2022-03-02T11:14:04Z",
  "comments":3,
  "created_at":"2022-03-02T09:49:22Z",
  "draft":true,
  "id":1156935255,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4z0LMW",
  "number":1334,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: validate Array simplification",
  "updated_at":"2022-07-26T08:43:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This reverts #1249 (and adds the proper impl for v2) which solved a problem that shouldn't happen with Awkward-derived arrays.\r\n\r\nAwkward should never produce arrays with nested option types, or index types, so we should not need to handle such cases when visiting layouts. This is an oversight on my part, which this PR will fix.",
  "closed_at":"2022-03-02T12:04:33Z",
  "comments":5,
  "created_at":"2022-03-02T11:51:25Z",
  "draft":false,
  "id":1157088899,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4z0sgA",
  "number":1335,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: revert #1249",
  "updated_at":"2022-07-13T11:34:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nWhen a ListArray, ListOffsetArray, or RegularArray has `parameters={\"__array__\": \"string\"}` or `\"bytestring\"`, then the following other conditions must hold:\r\n\r\n  * The `content` must be a NumpyArray.\r\n  * That NumpyArray must have dtype `uint8`.\r\n  * That NumpyArray must have`parameters={\"__array__\": \"char\"}` or `\"byte\"`, depending on the list type's parameter.\r\n\r\nIn v2, if any list type is a string, it just _skips_ tested testing:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d977b04facb196a4c8584f256b36280a4e105b14/src/awkward/_v2/contents/listarray.py#L1196-L1226\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d977b04facb196a4c8584f256b36280a4e105b14/src/awkward/_v2/contents/listoffsetarray.py#L1901-L1931\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d977b04facb196a4c8584f256b36280a4e105b14/src/awkward/_v2/contents/regulararray.py#L1004-L1013\r\n\r\nI think, in the translation from v1, they lost the equivalent of `validityerror_parameters`, which is a helper function to do ListArray, ListOffsetArray, and RegularArray in a consistent way:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d977b04facb196a4c8584f256b36280a4e105b14/src/libawkward/array/ListArray.cpp#L903-L938\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d977b04facb196a4c8584f256b36280a4e105b14/src/libawkward/array/ListOffsetArray.cpp#L914-L951\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d977b04facb196a4c8584f256b36280a4e105b14/src/libawkward/array/RegularArray.cpp#L786-L806\r\n\r\nThat helper function also ensures that non-list-type arrays don't have `\"string\"` and `\"bytestring\"` as `__array__`, and it also checks IndexedArray and IndexedOptionArray for a correct use of the `\"categorical\"` `__array__`.\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d977b04facb196a4c8584f256b36280a4e105b14/src/libawkward/Content.cpp#L1748-L1899",
  "closed_at":"2022-03-02T20:22:41Z",
  "comments":4,
  "created_at":"2022-03-02T16:29:07Z",
  "id":1157421837,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5E_NsN",
  "number":1336,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"v2 ListArray, ListOffsetArray, and RegularArray's 'validityerror' must check string conditions",
  "updated_at":"2022-03-02T21:26:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"## Simplifying Union + Option\r\n\r\nPer a conversation with @jpivarski, we require that Awkward functions produce \"simplified\" layouts as-policy. These simplification rules ultimately mean that layout visitors need less local information in order to reason about the structure.\r\n\r\nWe simplify nested `is_OptionType`s, `is_IndexedType`s, and their cross combinations, but that leaves some other candidates:\r\n1. `Option(Union(Option, ...))`\r\n2. `Indexed(Union(...))`\r\n\r\n### `Option(Union(Option ,...))`\r\nPR #1249 handles (1) for `ak.is_none`, but it might be better to solve this for _all_ functions by extending the simplification rules such that options simplify with unions. \r\n\r\n@jpivarski wrote in #1335 that we might benefit from choosing a canonical form for (1).  \r\n\r\nTo my mind, the simplest conceptual approach is to move the option into the union \u00e0 la `Union(Option(X), Option(Y), Option(Z))`. This rule would read:\r\n\r\n> If the content of an option type is a union **AND** the union has any optional contents **THEN** move the option into the union\r\n\r\nThis would be the least restrictive solution, as we could have:\r\n```\r\nOption[Byte](Union(X, Y, Option[?](Z))) \u2192 Union(Option[Byte](X), Option[Byte](Y), Option[?](Z))\r\nOption[Bit](Union(X, Y, Option[?](Z))) \u2192 Union(Option[Bit](X), Option[Bit](Y), Option[?](Z))\r\nOption[Indexed](Union(X, Y, Option[?](Z))) \u2192 Union(Option[Indexed](X), Option[Indexed](Y), Option[Indexed](Z))\r\n```\r\nIt would also, I think, be the simplest to implement.\r\n\r\n@jpivarski suggested\r\n```\r\nOption(Union(X, Y, Option(Z))) \u2192 ByteMaskedArray(UnionArray([X, Y, Z]))\r\n```\r\n\r\ni.e. lifting the option type out of the union. This would require a little more thinking in my opinion, namely:\r\n- Cases where the internal `Option(Z)` is an `IndexedOptionArray` would require additional work to preserve the length of `Option(Z)` after dropping the option (e.g. mapping to random elements where `Option(Z).index == -1`.\r\n- OR any union member with `IndexedOptionArray` would force the outer option to also be indexed.\r\n\r\nThe TL;DR for this case is that the `UnionArray` needs to map the `-1` indices of `Option(Z)` to *something* in order for the outer `ByteMaskedArray` to mask them.\r\n\r\n### `Indexed(Union(...))`\r\nThe simplification function to handle this case would be better named `simplify_indexedtype`, however we already handle other scenarios with `simplify_optiontype`, so I think it's valid.\r\n\r\nA `UnionArray` can be re-indexed by modifying its `tags` and `index` parameters. This means that the outer `Index` is redundant.",
  "closed_at":"2023-04-24T22:05:03Z",
  "comments":1,
  "created_at":"2022-03-02T22:09:27Z",
  "id":1157744376,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5FAcb4",
  "number":1337,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Simplify `Option(Union(Option, ...))`",
  "updated_at":"2023-04-24T22:05:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-03-15T18:57:59Z",
  "comments":10,
  "created_at":"2022-03-03T01:00:48Z",
  "draft":false,
  "id":1157851647,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4z3OMq",
  "number":1338,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-15T18:57:59Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"First version of ak._v2.from_parquet",
  "updated_at":"2022-03-15T18:58:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nMinimal reproducer:\r\n\r\n(I stepped through `ak._v2.flatten` until line line 101 from the traceback and `all(isinstance(x, np.ndarray) for x in out)` is evaluating to False since the elements of the `out` tuple in this case are instances of `TypeTracerArray`.)\r\n\r\n```python\r\nIn [1]: import awkward._v2 as ak\r\n\r\nIn [2]: x = [[1, 2, 3], [2]]\r\n\r\nIn [3]: ak.Array(x)\r\nOut[3]: <Array [[1, 2, 3], [2]] type='2 * var * int64'>\r\n\r\nIn [4]: x = ak.Array(x)\r\n\r\nIn [5]: x.layout.typetracer\r\nOut[5]: \r\n<ListOffsetArray len='2'>\r\n    <offsets><Index dtype='int64' len='3'>[?? ... ??]</Index></offsets>\r\n    <content><NumpyArray dtype='int64' len='4'>[?? ... ??]</NumpyArray></content>\r\n</ListOffsetArray>\r\n\r\nIn [6]: xtt = ak.Array(x.layout.typetracer)\r\n\r\nIn [7]: ak.flatten(xtt)\r\nOut[7]: <Array-typetracer type='?? * int64'>\r\n\r\nIn [8]: ak.flatten(xtt, axis=None)\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\nInput In [8], in <cell line: 1>()\r\n----> 1 ak.flatten(xtt, axis=None)\r\n\r\nFile ~/.pyenv/versions/3.10.2/envs/dask-awkward/lib/python3.10/site-packages/awkward/_v2/operations/structure/ak_flatten.py:101, in flatten(array, axis, highlevel, behavior)\r\n     99 if axis is None:\r\n    100     out = layout.completely_flatten(function_name=\"ak.flatten\")\r\n--> 101     assert isinstance(out, tuple) and all(isinstance(x, np.ndarray) for x in out)\r\n    103     out = ak._v2.contents.NumpyArray(nplike.concatenate(out))\r\n    105 elif axis == 0 or layout.axis_wrap_if_negative(axis) == 0:\r\n\r\nAssertionError: \r\n\r\nIn [9]: ak.flatten(x, axis=None)\r\nOut[9]: <Array [1, 2, 3, 2] type='4 * int64'>\r\n```\r\n\r\n",
  "closed_at":"2022-03-03T21:24:32Z",
  "comments":1,
  "created_at":"2022-03-03T14:35:56Z",
  "id":1158485678,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5FDRau",
  "number":1339,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.flatten axis=None fails on typetracer array",
  "updated_at":"2022-03-03T21:24:32Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-03-03T21:24:33Z",
  "comments":7,
  "created_at":"2022-03-03T20:07:17Z",
  "draft":false,
  "id":1158847129,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4z6fgF",
  "number":1340,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-03T21:24:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ak.flatten and ak.ravel should test for nplike.ndarray, not np.ndarray.",
  "updated_at":"2022-03-03T21:24:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\r\n\r\nThe existing Numba support for Awkward includes known size information in the type. This differs from the way that NumPy arrays are handled, where the shape information is _separate_ to the type. The consequence of this is that whenever the size of an array changes, so too does the type, and thus Numba recompiles the function for the input. \r\n\r\n```pycon\r\n>>> numba.typeof(ak.from_numpy(np.identity(3)))\r\nak.ArrayView(ak.RegularArrayType(ak.NumpyArrayType(array(float64, 1d, A), none, {}), 3, none, {}), None, ())\r\n```\r\n\r\n```pycon\r\n>>> numba.typeof(np.identity(3))\r\narray(float64, 2d, C)\r\n```\r\n\r\nTo be clear, it is the `RegularArray` size that denotes the length of the sublists that is included. ",
  "closed_at":"2022-04-15T19:02:05Z",
  "comments":2,
  "created_at":"2022-03-04T17:05:16Z",
  "id":1159858162,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5FIgfy",
  "number":1343,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Move size information out of Numba type",
  "updated_at":"2022-04-16T11:31:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This behaves identically to the `depth_limit` argument of `ak.zip`, which arrests broadcasting at a given depth. Because most of the code is directly copied from `ak.zip`, it should be a fairly safe new feature.",
  "closed_at":"2022-03-17T14:24:37Z",
  "comments":1,
  "created_at":"2022-03-07T12:42:59Z",
  "draft":false,
  "id":1161370888,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40ChFO",
  "number":1344,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: add `depth_limit` to `broadcast_arrays`",
  "updated_at":"2022-03-17T14:25:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"# Things to do:\r\n- [x] Complete the API along with debugging mode.\r\n- [x] Rename to `metadata_from_avro_file`.\r\n- [x] Create the test samples. (String, int, enum cover all the composite types and in addition to every leaf type by itself.)\r\n- [x] Modify the code for reading arrays.\r\n- [x] Write the tests for Python based reader. ",
  "closed_at":"2022-06-30T13:09:24Z",
  "comments":5,
  "created_at":"2022-03-07T13:49:05Z",
  "draft":true,
  "id":1161444497,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40Cw6W",
  "number":1345,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Adding Avro Reader for Awkward Array",
  "updated_at":"2022-06-30T13:44:26Z",
  "user":"MDQ6VXNlcjUwNTc3ODA5"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-03-07T21:17:39Z",
  "comments":1,
  "created_at":"2022-03-07T20:45:55Z",
  "draft":false,
  "id":1161905656,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40ETEz",
  "number":1346,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-07T21:17:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix PR #788: avoid materializing VirtualArrays in ak.with_name.",
  "updated_at":"2022-03-07T21:17:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-03-08T15:55:50Z",
  "comments":1,
  "created_at":"2022-03-08T09:26:59Z",
  "draft":false,
  "id":1162419545,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40F-qA",
  "number":1347,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-08T15:55:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.run_lengths",
  "updated_at":"2022-03-08T15:55:51Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Feature :sparkles: \r\nThis PR adds an implementation of `np.stack`. This can already be done by users without *too* much difficulty, using `np.concatenate` and `np.newaxis`, but I think it's a fundamental enough function to warrant inclusion.\r\n\r\n### Method :blue_book: \r\nThe approach taken for `posaxis > 0` is to build a union over the existing lists, re-index their sublists, and then add a new list layout i.e.\r\n`[A1 A2 A3 ... An]`, `[B1 B2 B3 ... Bn]` \u2192 `Union[A1 B1 A2 B2 A3 B3 ... An Bn]` \u2192`List[[A1 B1] [A2 B2] [A3 B3] ... [An Bn]]`\r\nFor `posaxis == 0 `, we merge the contents into a single `Content`, and then create a new list layout over this content. This is simpler because we do not need to re-order the sublists as we do for `posaxis>0`\r\n\r\n### Discussion :left_speech_bubble:  \r\nI have not used `RegularArray` for the `posaxis > 0` case here, despite the fact that we *know* that the layout is regular. This is because I would like some input from the rest of the team as to what *should* happen. As we've discussed previously, the `RegularArray` layouts often introduce two sometimes conflicting behaviors - maintaining length information and informing behaviour of broadcasting, indexing.\r\n\r\nMy gut feeling is that we _should_ introduce a `RegularArray` layout, because we *know* it will always have a guaranteed constant length. \r\n\r\nI'd also be interested to know whether people think I should write a kernel for generating the tags and indices. ",
  "closed_at":"2022-05-02T15:16:21Z",
  "comments":2,
  "created_at":"2022-03-08T10:16:13Z",
  "draft":true,
  "id":1162470494,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40GJZw",
  "number":1348,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: add stack implementation",
  "updated_at":"2022-07-26T08:43:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.8.0\r\n\r\n### Description and code to reproduce\r\n\r\nThe current `slot{i}` behaviour may be surprising to users who do not know how it is implemented.\r\n```pycon\r\n>>> x = ak.zip({\"1\": [1,2,], \"2\":[4,5]})\r\n>>> x\r\n<Array [{'1': 1, '2': 4}, {'1': 2, '2': 5}] type='2 * {\"1\": int64, \"2\": int64}'>\r\n>>> x.slot0\r\n<Array [1, 2] type='2 * int64'>\r\n>>> x.slot1\r\n<Array [1, 2] type='2 * int64'>\r\n>>> x.slot2\r\n<Array [4, 5] type='2 * int64'>\r\n>>>\r\n```\r\n\r\nUltimately this stems from the fact that there is overlap between legal field names and Awkward-generated slot names. I think the simplest solution here is one of:\r\n1. prevent the user from using integer keys with non-tuples (+ always treat integer keys as tuple slot positions)\r\n1. prevent the user from building records with integer keys that do not densely fill the range `[0, len(fields))`\r\n1. return the first of a named field `\"i\"` or the positional field `i` for integer keys (i.e. invert the current precedence)\r\n1. always lookup against `fields` if non-tuples, or evaluate as integer for tuples\r\n\r\nPartly, we would do well to identify whether the `slot{i}` attributes are considered \"tuple-only\". My preference is to keep support for non-tuples given that the field ordering is an explicit feature of record arrays. It can be useful to access `slot0`, especially when/if the true fields are not visible to the getitem mechanism e.g. if one is _deliberately_ forming a union over arrays with unalike fields (don't ask my why you'd do this).",
  "closed_at":"2022-03-08T12:07:32Z",
  "comments":1,
  "created_at":"2022-03-08T11:42:12Z",
  "id":1162555012,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5FSy6E",
  "number":1350,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`field_to_index` behaves improperly for integer non-tuple fields",
  "updated_at":"2022-03-08T14:13:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Feature :sparkles: \r\nThis PR \r\n- adds a `ak.is_tuple` function to test whether a layout behaves as a tuple or a record.  \r\n- adds `is_tuple`/`istuple` to all `Form` and `Content` types (C++ and Python) to handle recursion.\r\n\r\n### Method :blue_book: \r\nTo keep things simple, this just uses a recursive layout visitor. There is now a `_recursively_apply` API that supports early termination (by returning the same layout), but it doesn't support return values. The boilerplate to do this (`nonlocal` et al.) seems more indirected than a direct recursive visitor.\r\n\r\n### Discussion :left_speech_bubble: \r\nI don't think we should add an `is_tuple` property to `ak.Array`, for the same reason that most of the Awkward API is in the form of free functions. ",
  "closed_at":"2022-03-09T18:55:48Z",
  "comments":9,
  "created_at":"2022-03-08T13:59:34Z",
  "draft":false,
  "id":1162692005,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40G4f7",
  "number":1351,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-09T18:55:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: add `is_tuple` describe operation",
  "updated_at":"2022-03-09T18:55:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-03-08T15:46:54Z",
  "comments":1,
  "created_at":"2022-03-08T14:02:37Z",
  "draft":false,
  "id":1162695254,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40G5Lz",
  "number":1352,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-08T15:46:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.nan_to_num",
  "updated_at":"2022-03-08T15:46:54Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Overview :framed_picture: \r\nThis issue is not a bug :bug:, but rather focuses on some code refactoring that we might want to look at.\r\n\r\nAwkward currently has `Content` and `Form` for describing arrays. Forms delineate a convenient boundary between the content-agnostic and content-dependent information, so that (among other things) we can reason about arrays concretely without knowing their contents. Form (and now, typetracer) offer an API for making these kinds of queries.\r\n\r\nRight now, we have the ability to reason about metadata & type information, but the `Content` is really the first-class citizen; forms are generated from contents, and the code duplicated (e.g. `RecordForm.fields`). In `v2`, the `Content` class avoids code \r\n (method) duplication between `Form` and `Content` by calling `self.Form.XXX.__get__(self)` for methods that apply both to `Form` and `Content`. As such, we have an _implicit_ mixin, but without the type safety (and probably mypy introspectability) provided by formally isolating such methods & data into separate classes. \r\n\r\nThis has the following ramifications:\r\n- `Content` and `Form` need to have identically named attributes for the `Form.XXX.__get__` mechanism to work\r\n- `Content` and `Form` duplicate methods. At present, these duplicated routines should probably be replaced by `Form.XXX.__get__` on the content (e.g. `RecordArray.fields`).\r\n\r\nA short-term cleanup could involve moving these form elements into a mixin class, e.g. `ListOffsetArrayLike` which implements things like `fields`, `parameters`, etc. \r\n\r\n###  Longer Term :ringed_planet: :moon: \r\nThe mixin approach solves the problem of making the relationships between `Form` and `Content` much more explicit. However, in our case, our concrete `Form` is effectively a shell wrapper around `FormLike` with data members, which is a suggestion that we actually just want composition. Another hint is that we often will want to generate a `Form` with the same data (referential) to that of the `Content`, rather than just producing a copy. This implies that we want to share the namespace between `Form` and `Content`\r\n\r\nSo, longer term we might consider having the `Content` indirect form-like methods/attributes to a composed `Form` object:\r\n```python\r\nclass Form:\r\n    def __init__(self, ...):\r\n        self.parameters = {...}\r\n        \r\n\r\nclass Content:\r\n    def __init__(self, ..., form=None):\r\n        if form is None:\r\n            form = self._build_form(...)\r\n        self._form  = form\r\n        \r\n    @property\r\n    def form(self):\r\n        return self._form\r\n        \r\n    @property\r\n    def parameters(self):\r\n        return self._form.parameters\r\n```\r\n\r\nThe benefit of this separation is that solves two problems:\r\n- Type information + metadata should be available even when the content is not (`Form`)\r\n- Implementation should not be duplicated between content-full and content-less cases. (`Form`-`Content` duplication)\r\n- Data should be identical between between content-full and content-less cases. (`Form`-`Content` data sharing)\r\n\r\n`Form` also implements some methods for transforms, e.g. `_getitem`. With the new-work on `TypeTracer`, I wonder whether we need this any more? Could we require that a `TypeTracer` API be used to determine the `Form` resulting from an operation?\r\n\r\nIt *feels* like a hierarchical composition approach could work quite well, because the form should not communicate with the content. In practice, this might not be worth the effort to change given how constrained the scope of arrays and forms are in the context of Awkward.\r\n",
  "closed_at":"2022-10-06T16:27:29Z",
  "comments":1,
  "created_at":"2022-03-08T18:01:04Z",
  "id":1162959056,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5FUVjQ",
  "number":1353,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Move `Form` implementation into mixins",
  "updated_at":"2022-10-06T16:27:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-03-10T13:56:18Z",
  "comments":1,
  "created_at":"2022-03-09T08:46:55Z",
  "draft":false,
  "id":1163651438,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40KEMq",
  "number":1354,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-10T13:56:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.unzip",
  "updated_at":"2022-03-10T13:56:19Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- [x] Convert awkward_ListArray_num to a CuPy raw kernel\r\n- [x] Update the kernel dict to use these new Python files\r\n- [x] Define a CuPy Kernel class to call these kernels\r\n- [x] Load all kernels at the first invoke (make sure they are compiled and cached)",
  "closed_at":"2022-03-21T14:24:20Z",
  "comments":1,
  "created_at":"2022-03-09T10:48:39Z",
  "draft":false,
  "id":1163778235,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40KfKH",
  "number":1355,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-21T14:24:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This PR sets up the architecture to call CuPy Raw Kernels from Awkward.",
  "updated_at":"2022-03-21T14:24:21Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-03-09T19:59:51Z",
  "comments":1,
  "created_at":"2022-03-09T19:26:33Z",
  "draft":false,
  "id":1164346991,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40MXV0",
  "number":1356,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-09T19:59:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: fix docstring line in is_tuple (v1)",
  "updated_at":"2022-03-09T19:59:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\n1.8.0rc3\r\n\r\n### Version of numpy\r\n\r\n1.21.2\r\n\r\n### Description and code to reproduce\r\n\r\nCasting first as numpy array makes the code crash even though there is an outer cast to ak.Array in both cases\r\n\r\n```python\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\narr = ak.Array([[[1,2,3],[4,5,6],[0,0,0]],[[10,11,12],[0,0,0],[0,0,0]]])\r\nprint(\"First attempt -- works\")\r\nprint(arr[ak.num(arr[arr > 0], axis=2) > 0])\r\n\r\narr = ak.Array(np.array([[[1,2,3],[4,5,6],[0,0,0]],[[10,11,12],[0,0,0],[0,0,0]]]))\r\nprint(\"Second attempt -- crashes\")\r\nprint(arr[ak.num(arr[arr > 0], axis=2) > 0])\r\n```\r\n\r\n\r\n\r\n### Error\r\n```pytb\r\n  File \"/local/usr/lib/python3.9/site-packages/awkward/operations/structure.py\", line 256, in num\r\n    out = layout.num(axis=axis)\r\nValueError: 'axis' out of range for 'num'\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.8.0rc3/src/libawkward/array/NumpyArray.cpp#L1598)\r\n```",
  "closed_at":"2024-01-20T00:26:34Z",
  "comments":1,
  "created_at":"2022-03-09T20:41:27Z",
  "id":1164419416,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"I_kwDODBCWws5FZ6FY",
  "number":1357,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Slicing with Awkward Arrays versus slicing with NumPy arrays",
  "updated_at":"2024-01-20T00:26:34Z",
  "user":"MDQ6VXNlcjY4NDgzODQ="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nc2ddda2f67abf2d7b3112e5752c7c34c3467052d\r\n\r\n### Description and code to reproduce\r\n\r\n```pycon\r\n>>> array = ak.from_numpy(np.arange(4 * 4).reshape(4, 4))\r\n>>> array[array > 4].ndim\r\n2\r\n>>> (array > 4).layout.purelist_isregular\r\nTrue\r\n>>> array[ak.to_numpy(array > 4)].ndim\r\n1\r\n```\r\n\r\n### Cause\r\n\r\nThe NumPy-like indexing checks for `NumpyArray`, not `RegularArray`. We should use something like `maybe_toNumpyArray` beforehand to fulfil this. ",
  "closed_at":"2022-12-03T22:28:48Z",
  "comments":2,
  "created_at":"2022-03-09T22:02:28Z",
  "id":1164487427,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5FaKsD",
  "number":1358,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Regular indexing behaves like jagged index for RegularArray (v2)",
  "updated_at":"2023-02-15T19:10:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is based on the Cling standalone you gave me, @vgvassilev.",
  "closed_at":"2022-03-15T13:11:21Z",
  "comments":47,
  "created_at":"2022-03-10T00:50:52Z",
  "draft":false,
  "id":1164608807,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40NNSx",
  "number":1359,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-15T13:11:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Pure Cling demo and improvements to C++ JIT infrastructure",
  "updated_at":"2022-03-18T15:02:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-03-17T19:31:05Z",
  "comments":1,
  "created_at":"2022-03-10T09:16:11Z",
  "draft":false,
  "id":1164956980,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40OV-U",
  "number":1360,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-17T19:31:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.unflatten",
  "updated_at":"2022-03-17T19:31:06Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n2e8ce817\n\n### Description and code to reproduce\n\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\nfrom awkward._v2.tmp_for_testing import v1_to_v2, v2_to_v1\r\n\r\n# Check non branching cases\r\na = ak.layout.NumpyArray(\r\n    np.array([1, 50, 100, 200, 500, 1000])\r\n)\r\n\r\nb = ak.layout.ListOffsetArray64(\r\n    ak.layout.Index64(np.array([0, 2, 4, 6])),\r\n    a\r\n)\r\n\r\nassert (ak.to_list(a.sort(-1, False, False)) == ak.to_list(\r\n    v2_to_v1(v1_to_v2(a).sort(-1, False, False))))\r\n\r\nassert (ak.to_list(b.sort(-1, False, False)) == ak.to_list(\r\n    v2_to_v1(v1_to_v2(b).sort(-1, False, False))))\r\n\r\n# Check branching cases\r\nthis = ak.layout.RecordArray(\r\n    [a, a[::-1]],\r\n    None\r\n)\r\nassert ak.to_list(this.sort(-1, False, False)) == ak.to_list(\r\n    v2_to_v1(v1_to_v2(this).sort(-1, False, False)))\r\n\r\nthat = ak.layout.RecordArray(\r\n    [a[:3], b],\r\n    None\r\n)\r\nassert ak.to_list(that.sort(-1, False, False)) == ak.to_list(\r\n    v2_to_v1(v1_to_v2(that).sort(-1, False, False)))\r\n\r\n```",
  "closed_at":null,
  "comments":6,
  "created_at":"2022-03-10T11:41:50Z",
  "id":1165114402,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Fcjwi",
  "number":1361,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"`ak.sort` and `ak.argsort` should refuse to sort RecordArrays (raise a TypeError)",
  "updated_at":"2024-01-20T09:52:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR adds `np.cumsum` support to v2",
  "closed_at":"2022-05-02T15:15:48Z",
  "comments":3,
  "created_at":"2022-03-10T13:39:10Z",
  "draft":true,
  "id":1165240203,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40PSjk",
  "number":1362,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: add cumsum",
  "updated_at":"2022-07-26T08:43:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nVery simplistic example of a use case for this:\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak.Array([0])\r\n>>> ak.zip((array + i for i in range(3)))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/miniconda3/envs/iris-hep/lib/python3.9/site-packages/awkward/operations/structure.py\", line 630, in zip\r\n    to_record = num_scalars == len(arrays)\r\nTypeError: object of type 'generator' has no len()\r\n```\r\n\r\n`help(ak.zip)` says that `arrays` should be a \"dict or iterable of arrays\", which a generator expression that yields arrays is, so I would expect this to work.",
  "closed_at":"2022-03-10T15:30:52Z",
  "comments":1,
  "created_at":"2022-03-10T14:39:35Z",
  "id":1165311758,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5FdT8O",
  "number":1363,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.zip` does not accept generator expressions for `arrays`",
  "updated_at":"2022-03-10T15:30:52Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-03-10T15:30:52Z",
  "comments":1,
  "created_at":"2022-03-10T14:55:31Z",
  "draft":false,
  "id":1165331868,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40PmLZ",
  "number":1364,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-10T15:30:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #1363 by ensuring that arguments documented as 'iterable of X' aren't used in 'len(X)'.",
  "updated_at":"2022-03-10T15:30:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"`ListOffsetArray` and the `Indexed[Option]Array` types have a non-negligible amount of boilerplate from v1 that we can eliminate. In addition, there is a reasonable overlap between the `reduce`, `[arg]sort`, and `unique` pathways that we can move into preparatory functions.\r\n\r\nI've changed the logic here quite substantially (in the case of `IndexedOptionArray`), so it would be good to validate that the test suite is covering these changes.\r\n",
  "closed_at":"2022-03-17T20:06:12Z",
  "comments":7,
  "created_at":"2022-03-10T18:35:16Z",
  "draft":false,
  "id":1165579578,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40QZ9H",
  "number":1365,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-17T20:06:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Refactor: cleanup reducer",
  "updated_at":"2022-03-17T21:24:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"NONE",
  "body":"### Which documentation?\n\nTutorials site\n\n### What needs to be documented?\n\nJust if such issue could prioritize writing some next part of the documentation. \r\n\r\nAlways this arises every time uproot/awkward are used and every time it is a pain to find/remember\r\n\r\nhttps://awkward-array.org/how-to-examine-type.html",
  "closed_at":null,
  "comments":6,
  "created_at":"2022-03-11T02:50:46Z",
  "id":1165938547,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Ffs9z",
  "number":1366,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Examining arrays documentation",
  "updated_at":"2024-01-20T00:09:09Z",
  "user":"MDQ6VXNlcjQ3MzI1NDU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-03-15T19:58:29Z",
  "comments":1,
  "created_at":"2022-03-13T20:23:53Z",
  "draft":false,
  "id":1167683977,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40XFbx",
  "number":1367,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-15T19:58:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.copy",
  "updated_at":"2022-03-15T19:58:30Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-03-15T18:07:09Z",
  "comments":1,
  "created_at":"2022-03-13T23:13:01Z",
  "draft":false,
  "id":1167722285,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40XMeM",
  "number":1368,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-15T18:07:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.broadcast_arrays",
  "updated_at":"2022-03-15T18:07:09Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-03-15T20:07:52Z",
  "comments":1,
  "created_at":"2022-03-14T10:38:40Z",
  "draft":false,
  "id":1168187759,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40Ys11",
  "number":1369,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-15T20:07:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.to_pandas",
  "updated_at":"2022-03-15T20:07:52Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/pyupgrade: v2.31.0 \u2192 v2.31.1](https://github.com/asottile/pyupgrade/compare/v2.31.0...v2.31.1)\n- [github.com/mgedmin/check-manifest: 0.47 \u2192 0.48](https://github.com/mgedmin/check-manifest/compare/0.47...0.48)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-03-14T22:22:53Z",
  "comments":1,
  "created_at":"2022-03-14T21:33:11Z",
  "draft":false,
  "id":1168933335,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40bMZC",
  "number":1370,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-14T22:22:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-03-14T22:22:54Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nI basically expect `ak.sum` with `axis=0` to add all rows together. So behavior like this makes sense:\r\n```python\r\n>>> ak.sum([[[], [1]],\r\n...         [[], [3]]], axis=0)\r\n<Array [[], [4]] type='2 * var * int64'>\r\n```\r\n\r\nJust appending one element to each of the non-empty lists in the above example somehow changes ordering in the output:\r\n\r\n```python\r\n>>> ak.sum([[[], [1, 2]],\r\n...         [[], [3, 4]]], axis=0)\r\n<Array [[4, 6], []] type='2 * var * int64'>\r\n```\r\n\r\nI of course expected to get `[[], [4, 6]]`, so I'm not sure what's going on here.",
  "closed_at":"2022-03-22T20:26:40Z",
  "comments":1,
  "created_at":"2022-03-16T17:57:18Z",
  "id":1171359710,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5F0Yfe",
  "number":1371,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Strange and inconsistent ordering behavior with `ak.sum`",
  "updated_at":"2022-03-22T20:26:40Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-03-16T20:56:03Z",
  "comments":1,
  "created_at":"2022-03-16T20:20:31Z",
  "draft":false,
  "id":1171507540,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40jqx_",
  "number":1372,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-16T20:56:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Allow NumPy arrays in CppStatements; fix row_groups in single-file from_parquet.",
  "updated_at":"2022-03-18T01:12:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This behaves identically to the `depth_limit` argument of `ak.zip`, which arrests broadcasting at a given depth. Because most of the code is directly copied from `ak.zip`, it should be a fairly safe new feature.",
  "closed_at":"2022-03-17T20:07:35Z",
  "comments":1,
  "created_at":"2022-03-17T15:36:54Z",
  "draft":false,
  "id":1172483918,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40msC_",
  "number":1373,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-17T20:07:35Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: add `depth_limit` to `ak.broadcast_arrays`",
  "updated_at":"2022-03-17T20:07:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\nThe user side looks as follows:\r\n```python\r\n    array = ak._v2.Array(\r\n        [\r\n            [{\"x\": 1, \"y\": [1.1]}, {\"x\": 2, \"y\": [2.0, 0.2]}],\r\n            [],\r\n            [{\"x\": 3, \"y\": [3.0, 0.3, 3.3]}],\r\n        ]\r\n    )\r\n    ak_array_1 = array[\"x\"]\r\n    ak_array_2 = array[\"y\"]\r\n\r\n    # An 'awkward' namespace will be added to the column name\r\n    data_frame = ak._v2.operations.convert.to_rdataframe(\r\n        {\"x\": ak_array_1, \"y\": ak_array_2}\r\n    )\r\n\r\n    done = compiler(\r\n        \"\"\"\r\n        template <typename Array>\r\n        struct MyFunctor {\r\n            void operator()(const Array& a) {\r\n                cout << \"#6. Call user function: \" << a << endl;\r\n            }\r\n        };\r\n        \"\"\"\r\n    )\r\n    assert done is True\r\n\r\n    f = ROOT.MyFunctor[data_frame.GetColumnType(\"awkward:x\")]()\r\n    data_frame.Foreach(f, [\"awkward:x\"])\r\n```\r\nThe array passed as an \"x\" column is:\r\n```python\r\nak_array_1 = <Array [[1, 2], [], [3]] type='3 * var * int64'>\r\n```\r\nAn `AwkwardArrayColumnReader` iterates over 3 ranges to apply `Foreach` functor:\r\n```python\r\nCONSTRUCTED AwkwardArrayColumnReader_NumpyArray_int64_Nt5aOZLMgX4_x of a ROOT::VecOps::RVec<Long64_t> at 0x7fefaec0ef48\r\n#5. SetEntry\r\n#6. Call user function: { 1, 2 }\r\n#5. SetEntry\r\n#6. Call user function: {  }\r\n#5. SetEntry\r\n#6. Call user function: { 3 }\r\n#4. GetEntryRanges\r\nDESTRUCTED AwkwardArrayColumnReader_NumpyArray_int64_Nt5aOZLMgX4_x of a ROOT::VecOps::RVec<Long64_t> at 0x7fefaec0ef48\r\n```",
  "closed_at":"2022-04-27T06:22:43Z",
  "comments":5,
  "created_at":"2022-03-17T17:15:50Z",
  "draft":false,
  "id":1172616607,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40nIst",
  "number":1374,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-27T06:22:43Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"awkward to rdataframe",
  "updated_at":"2022-04-27T15:27:39Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\n@chadfreer just brought this up, but I seem to remember @lgray and/or @nsmith- asking about it a long time ago.\r\n\r\nThe issue is this: if we have records whose fields represent non-Cartesian data, they should not be naively added (or otherwise \"reduced\").\r\n\r\n```python\r\n>>> ak.sum(ak.Array([[{\"rho\": 1.1, \"phi\": -0.1}, {\"rho\": 2.2, \"phi\": 0.1}]]), axis=1)\r\n<Array [{rho: 3.3, phi: 0}] type='1 * {\"rho\": float64, \"phi\": float64}'>\r\n```\r\n\r\nKnowing that this is a generic array, we can shrug and say, \"I guess it would do that. It has no way of knowing what `rho` and `phi` mean.\" But if it were a [VectorAwkward2D](https://github.com/scikit-hep/vector/blob/8a289725a31dae1d23564e1119bd46b8c5b15169/src/vector/_backends/awkward_.py#L655), we'd really expect it to take the meaning of `rho` and `phi` into consideration when it adds them, because that's what `+` does:\r\n\r\n```python\r\n>>> import vector\r\n>>> vector.register_awkward()\r\n>>> (ak.Array([[{\"rho\": 1.1, \"phi\": -0.1}]], with_name=\"Vector2D\") +\r\n...  ak.Array([[{\"rho\": 2.2, \"phi\": 0.1}]], with_name=\"Vector2D\")\r\n<VectorArray2D [[{rho: 3.29, phi: 0.0334}]] type='1 * var * Vector2D[\"rho\": floa...'>\r\n```\r\n\r\nWhen either @lgray or @nsmith- brought this up, I said that we couldn't let third-party libraries override reducers like `ak.sum` because they are implemented (in Awkward 1.x) in C++, where it would be very difficult to apply overrides implemented in Python. But in Awkward v2, the relevant code is Python and it would be possible.\r\n\r\nBut there are two issues here:\r\n\r\n   1. The fact that Coffea and Vector override `+` and not `ak.sum` is dangerously misleading: attempts to `ak.sum` records should be prevented for exactly the same reason as `+` is prevented between non-overridden records. That is, apply the rationale behind #457 to reducers, not just ufuncs.\r\n   2. Awkward v2 should provide hooks to override chosen reducers. The syntax could be:\r\n\r\n```python\r\nak._v2.behavior[ak._v2.sum, \"VectorArray2D\"] = special_function\r\n```\r\n\r\nand the `special_function` would be invoked [somewhere in here](https://github.com/scikit-hep/awkward-1.0/blob/34094aa26e498210047428b2ecde6d0b1aa1fc7f/src/awkward/_v2/contents/listoffsetarray.py#L1859-L1921), for ListOffsetArray for example. (Although I thought so while talking with @chadfreer, this can't be implemented through #1126, since this is a behavior that might be discovered deep inside an array, not at the level where a Python object exists.)\r\n\r\nThere would have to be some rules on when `special_function` is applied. Overrides for `axis <` the depth of the matched name (e.g. `\"VectorArray2D\"`) wouldn't make a lot of sense, since they cross list/record object boundaries:\r\n\r\n```python\r\n>>> ak.sum(ak.Array([[1, 2, 3], [100, 200]]), axis=0)\r\n<Array [101, 202, 3] type='3 * int64'>\r\n```\r\n\r\nWhile thinking about expanding capabilities in v2 is fun, item (1) in the above list is the higher-priority item: we need to avoid misleading users into thinking that `ak.sum(geometric_vectors)` does what they might think it does. An error message is better than a wrong answer.\r\n\r\n(This issue is a rare bug-feature-policy!)",
  "closed_at":"2022-08-25T14:53:48Z",
  "comments":7,
  "created_at":"2022-03-17T18:13:07Z",
  "id":1172701307,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5F5gB7",
  "number":1375,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Prevent reducers like ak.sum on records (v1 and v2)",
  "updated_at":"2022-08-25T14:53:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Somehow, I forgot to check this in earlier.",
  "closed_at":"2022-03-18T01:12:45Z",
  "comments":1,
  "created_at":"2022-03-18T00:34:56Z",
  "draft":false,
  "id":1173058681,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws40oZqH",
  "number":1376,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-18T01:12:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Allow NumPy arrays in CppStatements; fix row_groups in single-file from_parquet.",
  "updated_at":"2022-03-18T01:12:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\n```python\r\n>>> np.ravel(ak.Array([\"this\", \"that\"]))\r\n<Array [116, 104, 105, 115, ... 104, 97, 116] type='8 * uint8'>\r\n```",
  "closed_at":"2022-12-05T20:30:21Z",
  "comments":7,
  "created_at":"2022-03-20T17:51:44Z",
  "id":1174629726,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5GA21e",
  "number":1377,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Ravelling a string array drops string behavior",
  "updated_at":"2023-02-15T19:10:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This error was reported in #1371, and the fix is in [the kernel](https://github.com/scikit-hep/awkward-1.0/blob/fd94fd6978e06795f2a36aefa8b1bc2a7772387e/src/cpu-kernels/awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64.cpp#L18):\r\n\r\n```diff\r\n   int64_t j = 0;\r\n   int64_t k = 0;\r\n-  int64_t maxdistinct = -1;\r\n+  int64_t maxdistinct = -2;\r\n   int64_t lasti = -1;\r\n   for (int64_t i = 0;  i < lendistincts;  i++) {\r\n     if (maxdistinct < distincts[i]) {\r\n```\r\n\r\nThe initial value of `maxdistinct` is supposed to be different from all possible values so that the first item is identified as a distinct list, but empty lists are represented in the `distincts` array as `-1`. Setting the initial value to a smaller number allows it to trigger on the first list, even if that list is empty.\r\n\r\nThis bug goes way back: in the first implementation of this kernel (Feb 15 2020)\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/b4ea752b641e1162e6e3ac9b2778ac544a52d5ff/src/cpu-kernels/reducers.cpp#L462-L466\r\n\r\nand the studies that preceded it\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/fd94fd6978e06795f2a36aefa8b1bc2a7772387e/studies/reducers.py#L1014-L1018\r\n\r\nThanks, @masonproffitt!",
  "closed_at":"2022-03-22T20:26:40Z",
  "comments":1,
  "created_at":"2022-03-22T19:49:55Z",
  "draft":false,
  "id":1177234090,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws401hr1",
  "number":1378,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-22T20:26:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes nonlocal reducers in which the first list is empty.",
  "updated_at":"2022-03-22T20:26:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nHere are two examples with a minimal awkward only reproducer,\r\n\r\nstarting with:\r\n\r\n```python\r\nIn [19]: import awkward._v2 as ak\r\n\r\nIn [20]: x = ak.from_iter([[1, 2, 3], [], [4, 6], [8]])\r\n\r\nIn [21]: x_tt = ak.Array(x.layout.typetracer)\r\n```\r\n\r\nmin/max:\r\n\r\n```python\r\nIn [22]: ak.max(x_tt)\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\nInput In [22], in <cell line: 1>()\r\n----> 1 ak.max(x_tt)\r\n\r\nFile ~/.pyenv/versions/3.9.11/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/operations/reducers/ak_max.py:63, in max(array, axis, keepdims, initial, mask_identity, flatten_records)\r\n     17 \"\"\"\r\n     18 Args:\r\n     19     array: Array-like data (anything #ak.to_layout recognizes).\r\n   (...)\r\n     50 value (None) handling in reducers.\r\n     51 \"\"\"\r\n     52 with ak._v2._util.OperationErrorContext(\r\n     53     \"ak._v2.max\",\r\n     54     dict(\r\n   (...)\r\n     61     ),\r\n     62 ):\r\n---> 63     return _impl(array, axis, keepdims, initial, mask_identity, flatten_records)\r\n\r\nFile ~/.pyenv/versions/3.9.11/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/operations/reducers/ak_max.py:84, in _impl(array, axis, keepdims, initial, mask_identity, flatten_records)\r\n     79             return layout.nplike.maximum(xs[0], reduce(xs[1:]))\r\n     81     tmp = layout.completely_flatten(\r\n     82         function_name=\"ak.max\", flatten_records=flatten_records\r\n     83     )\r\n---> 84     return reduce([layout.nplike.max(x) for x in tmp if len(x) > 0])\r\n     86 else:\r\n     87     behavior = ak._v2._util.behavior_of(array)\r\n\r\nFile ~/.pyenv/versions/3.9.11/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/operations/reducers/ak_max.py:84, in <listcomp>(.0)\r\n     79             return layout.nplike.maximum(xs[0], reduce(xs[1:]))\r\n     81     tmp = layout.completely_flatten(\r\n     82         function_name=\"ak.max\", flatten_records=flatten_records\r\n     83     )\r\n---> 84     return reduce([layout.nplike.max(x) for x in tmp if len(x) > 0])\r\n     86 else:\r\n     87     behavior = ak._v2._util.behavior_of(array)\r\n\r\nFile ~/.pyenv/versions/3.9.11/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/_typetracer.py:274, in TypeTracerArray.__len__(self)\r\n    273 def __len__(self):\r\n--> 274     raise ak._v2._util.error(\r\n    275         AssertionError(\r\n    276             \"bug in Awkward Array: attempt to get length of a TypeTracerArray\"\r\n    277         )\r\n    278     )\r\n\r\nAssertionError: bug in Awkward Array: attempt to get length of a TypeTracerArray\r\n```\r\n\r\nand mean:\r\n\r\n```python\r\nIn [37]: ak.mean(x_tt, axis=None)\r\n---------------------------------------------------------------------------\r\nNotImplementedError                       Traceback (most recent call last)\r\nInput In [37], in <cell line: 1>()\r\n----> 1 ak.mean(x_tt, axis=None)\r\n\r\nFile ~/.pyenv/versions/3.9.11/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/operations/reducers/ak_mean.py:85, in mean(x, weight, axis, keepdims, mask_identity, flatten_records)\r\n     12 \"\"\"\r\n     13 Args:\r\n     14     x: The data on which to compute the mean (anything #ak.to_layout recognizes).\r\n   (...)\r\n     72 missing values (None) in reducers.\r\n     73 \"\"\"\r\n     74 with ak._v2._util.OperationErrorContext(\r\n     75     \"ak._v2.mean\",\r\n     76     dict(\r\n   (...)\r\n     83     ),\r\n     84 ):\r\n---> 85     return _impl(x, weight, axis, keepdims, mask_identity, flatten_records)\r\n\r\nFile ~/.pyenv/versions/3.9.11/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/operations/reducers/ak_mean.py:101, in _impl(x, weight, axis, keepdims, mask_identity, flatten_records)\r\n     99 with np.errstate(invalid=\"ignore\"):\r\n    100     if weight is None:\r\n--> 101         sumw = ak._v2.operations.reducers.ak_count._impl(\r\n    102             x, axis, keepdims, mask_identity, flatten_records\r\n    103         )\r\n    104         sumwx = ak._v2.operations.reducers.ak_sum._impl(\r\n    105             x, axis, keepdims, mask_identity, flatten_records\r\n    106         )\r\n    107     else:\r\n\r\nFile ~/.pyenv/versions/3.9.11/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/operations/reducers/ak_count.py:106, in _impl(array, axis, keepdims, mask_identity, flatten_records)\r\n    102         else:\r\n    103             return layout.nplike.add(xs[0], reduce(xs[1:]))\r\n    105     return reduce(\r\n--> 106         [\r\n    107             layout.nplike.size(x)\r\n    108             for x in layout.completely_flatten(\r\n    109                 function_name=\"ak.count\", flatten_records=flatten_records\r\n    110             )\r\n    111         ]\r\n    112     )\r\n    114 else:\r\n    115     behavior = ak._v2._util.behavior_of(array)\r\n\r\nFile ~/.pyenv/versions/3.9.11/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/operations/reducers/ak_count.py:107, in <listcomp>(.0)\r\n    102         else:\r\n    103             return layout.nplike.add(xs[0], reduce(xs[1:]))\r\n    105     return reduce(\r\n    106         [\r\n--> 107             layout.nplike.size(x)\r\n    108             for x in layout.completely_flatten(\r\n    109                 function_name=\"ak.count\", flatten_records=flatten_records\r\n    110             )\r\n    111         ]\r\n    112     )\r\n    114 else:\r\n    115     behavior = ak._v2._util.behavior_of(array)\r\n\r\nFile ~/.pyenv/versions/3.9.11/envs/dask-awkward/lib/python3.9/site-packages/awkward/_v2/_typetracer.py:570, in TypeTracer.size(self, *args, **kwargs)\r\n    568 def size(self, *args, **kwargs):\r\n    569     # array\r\n--> 570     raise ak._v2._util.error(NotImplementedError)\r\n\r\nNotImplementedError:\r\n```",
  "closed_at":"2022-03-22T22:00:12Z",
  "comments":0,
  "created_at":"2022-03-22T19:57:08Z",
  "id":1177240573,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5GK0P9",
  "number":1379,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Passing `axis=None` to reducers on typetracer arrays fails",
  "updated_at":"2022-03-22T22:00:12Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-03-22T22:00:12Z",
  "comments":1,
  "created_at":"2022-03-22T21:23:28Z",
  "draft":false,
  "id":1177323838,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4011HT",
  "number":1380,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-22T22:00:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Reducers with axis=None and typetracers.",
  "updated_at":"2022-03-22T22:00:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The `cuda-kernels` were compared to the `cpu-kernels` and all kernels compile, however they are not yet tested using some `test-data`",
  "closed_at":"2022-03-24T22:39:06Z",
  "comments":2,
  "created_at":"2022-03-23T10:27:59Z",
  "draft":false,
  "id":1177919632,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws403yUp",
  "number":1381,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-24T22:39:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This PR adds the generated kernels and simplifies the template specialization generation process.",
  "updated_at":"2022-03-24T22:39:07Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nTest failures on Arch Linux x86_64, GCC 11.2.0, ROOT 6.26.00:\r\n```python\r\n# test_1300-awkward-to-cpp-converter-with-cling.py\r\n=================================== FAILURES ===================================\r\n______________________ test_IndexedOptionArray_NumpyArray ______________________\r\n\r\n    def test_IndexedOptionArray_NumpyArray():\r\n        v2a = ak._v2.contents.indexedoptionarray.IndexedOptionArray(\r\n            ak._v2.index.Index(np.array([2, 2, -1, 1, -1, 5, 4], np.int64)),\r\n            ak._v2.contents.numpyarray.NumpyArray(np.array([0.0, 1.1, 2.2, 3.3, 4.4, 5.5])),\r\n        )\r\n\r\n        layout = v2a\r\n        generator = ak._v2._connect.cling.togenerator(layout.form)\r\n        lookup = ak._v2._lookup.Lookup(layout)\r\n        generator.generate(compiler)\r\n\r\n        ROOT.gInterpreter.Declare(\r\n            f\"\"\"\r\n    void roottest_IndexedOptionArray_NumpyArray_v2a(double* out, ssize_t length, ssize_t* ptrs) {{\r\n      auto obj = {generator.entry()};\r\n      out[0] = obj.size();\r\n      out[1] = obj[0].has_value() ? obj[0].value() : 999.0;\r\n      out[2] = obj[1].has_value() ? obj[1].value() : 999.0;\r\n      out[3] = obj[2].has_value() ? obj[2].value() : 999.0;\r\n      out[4] = obj[3].has_value() ? obj[3].value() : 999.0;\r\n      out[5] = obj[4].has_value() ? obj[4].value() : 999.0;\r\n      out[6] = obj[5].has_value() ? obj[5].value() : 999.0;\r\n      out[7] = obj[6].has_value() ? obj[6].value() : 999.0;\r\n    }}\r\n    \"\"\"\r\n        )\r\n        out = np.zeros(8, dtype=np.float64)\r\n>       ROOT.roottest_IndexedOptionArray_NumpyArray_v2a(out, len(layout), lookup.arrayptrs)\r\n\r\ngenerator  = <awkward._v2._connect.cling.IndexedOptionArrayGenerator object at 0x7fd3bc350fd0>\r\nlayout     = <IndexedOptionArray len='7'>\r\n    <index><Index dtype='int64' len='7'>[ 2  2 -1  1 -1  5  4]</Index></index>\r\n    <content><NumpyArray dtype='float64' len='6'>[0.  1.1 2.2 3.3 4.4 5.5]</NumpyArray></content>\r\n</IndexedOptionArray>\r\nlookup     = <awkward._v2._lookup.Lookup object at 0x7fd3bc350cd0>\r\nout        = array([0., 0., 0., 0., 0., 0., 0., 0.])\r\nv2a        = <IndexedOptionArray len='7'>\r\n    <index><Index dtype='int64' len='7'>[ 2  2 -1  1 -1  5  4]</Index></index>\r\n    <content><NumpyArray dtype='float64' len='6'>[0.  1.1 2.2 3.3 4.4 5.5]</NumpyArray></content>\r\n</IndexedOptionArray>\r\n\r\ntests/v2/test_1300-awkward-to-cpp-converter-with-cling.py:398:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\nname = 'roottest_IndexedOptionArray_NumpyArray_v2a'\r\n\r\n    def _fallback_getattr(self, name):\r\n        # Try:\r\n        # - in the global namespace\r\n        # - in the ROOT namespace\r\n        # - in gROOT (ROOT lists such as list of files,\r\n        #   memory mapped files, functions, geometries ecc.)\r\n        # The first two attempts allow to lookup\r\n        # e.g. ROOT.ROOT.Math as ROOT.Math\r\n\r\n        if name == '__all__':\r\n            self._handle_import_all()\r\n            # Make the attributes of the facade be injected in the\r\n            # caller module\r\n            raise AttributeError()\r\n        # Note that hasattr caches the lookup for getattr\r\n        elif hasattr(gbl_namespace, name):\r\n            return getattr(gbl_namespace, name)\r\n        elif hasattr(gbl_namespace.ROOT, name):\r\n            return getattr(gbl_namespace.ROOT, name)\r\n        else:\r\n            res = gROOT.FindObject(name)\r\n            if res:\r\n                return res\r\n>       raise AttributeError(\"Failed to get attribute {} from ROOT\".format(name))\r\nE       AttributeError: Failed to get attribute roottest_IndexedOptionArray_NumpyArray_v2a from ROOT\r\n\r\nname       = 'roottest_IndexedOptionArray_NumpyArray_v2a'\r\nres        = <cppyy.gbl.TObject object at 0x(nil)>\r\nself       = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\n\r\n/usr/lib/python3.10/site-packages/ROOT/_facade.py:195: AttributeError\r\n----------------------------- Captured stderr call -----------------------------\r\ninput_line_88:7:18: error: no template named 'optional' in namespace 'std'\r\n    typedef std::optional<double> value_type;\r\n            ~~~~~^\r\ninput_line_88:25:28: error: type 'awkward::NumpyArray_float64_hzDE4rkLkhw::value_type' (aka 'double') cannot be narrowed to 'awkward::IndexedOptionArray_9nKQxf4wwdw::value_type' (aka 'int') in initializer list [-Wc++11-narrowing]\r\n        return value_type{ NumpyArray_float64_hzDE4rkLkhw(index, index + 1, ptrs_[which_ + 2], ptrs_)[0] };\r\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninput_line_88:25:28: note: insert an explicit cast to silence this issue\r\n        return value_type{ NumpyArray_float64_hzDE4rkLkhw(index, index + 1, ptrs_[which_ + 2], ptrs_)[0] };\r\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n                           static_cast<value_type>(                                                     )\r\ninput_line_88:28:21: error: no member named 'nullopt' in namespace 'std'\r\n        return std::nullopt;\r\n               ~~~~~^\r\ninput_line_89:3:23: error: no member named 'IndexedOptionArray_9nKQxf4wwdw' in namespace 'awkward'\r\n  auto obj = awkward::IndexedOptionArray_9nKQxf4wwdw(0, length, 0, ptrs);\r\n             ~~~~~~~~~^\r\n_______________________ test_ByteMaskedArray_NumpyArray ________________________\r\n\r\n    def test_ByteMaskedArray_NumpyArray():\r\n        v2a = ak._v2.contents.bytemaskedarray.ByteMaskedArray(\r\n            ak._v2.index.Index(np.array([1, 0, 1, 0, 1], np.int8)),\r\n            ak._v2.contents.numpyarray.NumpyArray(np.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6])),\r\n            valid_when=True,\r\n        )\r\n\r\n        layout = v2a\r\n        generator = ak._v2._connect.cling.togenerator(layout.form)\r\n        lookup = ak._v2._lookup.Lookup(layout)\r\n        generator.generate(compiler)\r\n\r\n        ROOT.gInterpreter.Declare(\r\n            f\"\"\"\r\n    void roottest_ByteMaskedArray_NumpyArray_v2a(double* out, ssize_t length, ssize_t* ptrs) {{\r\n      auto obj = {generator.entry()};\r\n      out[0] = obj.size();\r\n      out[1] = obj[0].has_value() ? obj[0].value() : 999.0;\r\n      out[2] = obj[1].has_value() ? obj[1].value() : 999.0;\r\n      out[3] = obj[2].has_value() ? obj[2].value() : 999.0;\r\n      out[4] = obj[3].has_value() ? obj[3].value() : 999.0;\r\n      out[5] = obj[4].has_value() ? obj[4].value() : 999.0;\r\n    }}\r\n    \"\"\"\r\n        )\r\n        out = np.zeros(6, dtype=np.float64)\r\n>       ROOT.roottest_ByteMaskedArray_NumpyArray_v2a(out, len(layout), lookup.arrayptrs)\r\n\r\ngenerator  = <awkward._v2._connect.cling.ByteMaskedArrayGenerator object at 0x7fd3bc5c2ad0>\r\nlayout     = <ByteMaskedArray valid_when='true' len='5'>\r\n    <mask><Index dtype='int8' len='5'>[1 0 1 0 1]</Index></mask>\r\n    <content><NumpyArray dtype='float64' len='6'>[1.1 2.2 3.3 4.4 5.5 6.6]</NumpyArray></content>\r\n</ByteMaskedArray>\r\nlookup     = <awkward._v2._lookup.Lookup object at 0x7fd3bc5c3cd0>\r\nout        = array([0., 0., 0., 0., 0., 0.])\r\nv2a        = <ByteMaskedArray valid_when='true' len='5'>\r\n    <mask><Index dtype='int8' len='5'>[1 0 1 0 1]</Index></mask>\r\n    <content><NumpyArray dtype='float64' len='6'>[1.1 2.2 3.3 4.4 5.5 6.6]</NumpyArray></content>\r\n</ByteMaskedArray>\r\n\r\ntests/v2/test_1300-awkward-to-cpp-converter-with-cling.py:428:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\nname = 'roottest_ByteMaskedArray_NumpyArray_v2a'\r\n\r\n    def _fallback_getattr(self, name):\r\n        # Try:\r\n        # - in the global namespace\r\n        # - in the ROOT namespace\r\n        # - in gROOT (ROOT lists such as list of files,\r\n        #   memory mapped files, functions, geometries ecc.)\r\n        # The first two attempts allow to lookup\r\n        # e.g. ROOT.ROOT.Math as ROOT.Math\r\n\r\n        if name == '__all__':\r\n            self._handle_import_all()\r\n            # Make the attributes of the facade be injected in the\r\n            # caller module\r\n            raise AttributeError()\r\n        # Note that hasattr caches the lookup for getattr\r\n        elif hasattr(gbl_namespace, name):\r\n            return getattr(gbl_namespace, name)\r\n        elif hasattr(gbl_namespace.ROOT, name):\r\n            return getattr(gbl_namespace.ROOT, name)\r\n        else:\r\n            res = gROOT.FindObject(name)\r\n            if res:\r\n                return res\r\n>       raise AttributeError(\"Failed to get attribute {} from ROOT\".format(name))\r\nE       AttributeError: Failed to get attribute roottest_ByteMaskedArray_NumpyArray_v2a from ROOT\r\n\r\nname       = 'roottest_ByteMaskedArray_NumpyArray_v2a'\r\nres        = <cppyy.gbl.TObject object at 0x(nil)>\r\nself       = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\n\r\n/usr/lib/python3.10/site-packages/ROOT/_facade.py:195: AttributeError\r\n----------------------------- Captured stderr call -----------------------------\r\ninput_line_90:7:18: error: no template named 'optional' in namespace 'std'\r\n    typedef std::optional<double> value_type;\r\n            ~~~~~^\r\ninput_line_90:25:28: error: type 'awkward::NumpyArray_float64_hzDE4rkLkhw::value_type' (aka 'double') cannot be narrowed to 'awkward::ByteMaskedArray_w1nWecjWHw::value_type' (aka 'int') in initializer list [-Wc++11-narrowing]\r\n        return value_type{ NumpyArray_float64_hzDE4rkLkhw(start_, stop_, ptrs_[which_ + 2], ptrs_)[at] };\r\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninput_line_90:25:28: note: insert an explicit cast to silence this issue\r\n        return value_type{ NumpyArray_float64_hzDE4rkLkhw(start_, stop_, ptrs_[which_ + 2], ptrs_)[at] };\r\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n                           static_cast<value_type>(                                                   )\r\ninput_line_90:28:21: error: no member named 'nullopt' in namespace 'std'\r\n        return std::nullopt;\r\n               ~~~~~^\r\ninput_line_91:3:23: error: no member named 'ByteMaskedArray_w1nWecjWHw' in namespace 'awkward'\r\n  auto obj = awkward::ByteMaskedArray_w1nWecjWHw(0, length, 0, ptrs);\r\n             ~~~~~~~~~^\r\n________________________ test_BitMaskedArray_NumpyArray ________________________\r\n\r\n    def test_BitMaskedArray_NumpyArray():\r\n        v2a = ak._v2.contents.bitmaskedarray.BitMaskedArray(\r\n            ak._v2.index.Index(\r\n                np.packbits(\r\n                    np.array(\r\n                        [\r\n                            1,\r\n                            1,\r\n                            1,\r\n                            1,\r\n                            0,\r\n                            0,\r\n                            0,\r\n                            0,\r\n                            1,\r\n                            0,\r\n                            1,\r\n                            0,\r\n                            1,\r\n                        ],\r\n                        np.uint8,\r\n                    )\r\n                )\r\n            ),\r\n            ak._v2.contents.numpyarray.NumpyArray(\r\n                np.array(\r\n                    [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6]\r\n                )\r\n            ),\r\n            valid_when=True,\r\n            length=13,\r\n            lsb_order=False,\r\n        )\r\n\r\n        layout = v2a\r\n        generator = ak._v2._connect.cling.togenerator(layout.form)\r\n        lookup = ak._v2._lookup.Lookup(layout)\r\n        generator.generate(compiler)\r\n\r\n        ROOT.gInterpreter.Declare(\r\n            f\"\"\"\r\n    void roottest_BitMaskedArray_NumpyArray_v2a(double* out, ssize_t length, ssize_t* ptrs) {{\r\n      auto obj = {generator.entry()};\r\n      out[0] = obj.size();\r\n      out[1] = obj[0].has_value() ? obj[0].value() : 999.0;\r\n      out[2] = obj[1].has_value() ? obj[1].value() : 999.0;\r\n      out[3] = obj[2].has_value() ? obj[2].value() : 999.0;\r\n      out[4] = obj[3].has_value() ? obj[3].value() : 999.0;\r\n      out[5] = obj[4].has_value() ? obj[4].value() : 999.0;\r\n      out[6] = obj[5].has_value() ? obj[5].value() : 999.0;\r\n      out[7] = obj[6].has_value() ? obj[6].value() : 999.0;\r\n      out[8] = obj[7].has_value() ? obj[7].value() : 999.0;\r\n      out[9] = obj[8].has_value() ? obj[8].value() : 999.0;\r\n      out[10] = obj[9].has_value() ? obj[9].value() : 999.0;\r\n      out[11] = obj[10].has_value() ? obj[10].value() : 999.0;\r\n      out[12] = obj[11].has_value() ? obj[11].value() : 999.0;\r\n      out[13] = obj[12].has_value() ? obj[12].value() : 999.0;\r\n    }}\r\n    \"\"\"\r\n        )\r\n        out = np.zeros(14, dtype=np.float64)\r\n>       ROOT.roottest_BitMaskedArray_NumpyArray_v2a(out, len(layout), lookup.arrayptrs)\r\n\r\ngenerator  = <awkward._v2._connect.cling.BitMaskedArrayGenerator object at 0x7fd3bc545ab0>\r\nlayout     = <BitMaskedArray valid_when='true' lsb_order='false' len='13'>\r\n    <mask><Index dtype='uint8' len='2'>[240 168]</Index>...n='14'>\r\n        [0.  1.  2.  3.  4.  5.  6.  7.  1.1 2.2 3.3 4.4 5.5 6.6]\r\n    </NumpyArray></content>\r\n</BitMaskedArray>\r\nlookup     = <awkward._v2._lookup.Lookup object at 0x7fd3bc546170>\r\nout        = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\r\nv2a        = <BitMaskedArray valid_when='true' lsb_order='false' len='13'>\r\n    <mask><Index dtype='uint8' len='2'>[240 168]</Index>...n='14'>\r\n        [0.  1.  2.  3.  4.  5.  6.  7.  1.1 2.2 3.3 4.4 5.5 6.6]\r\n    </NumpyArray></content>\r\n</BitMaskedArray>\r\n\r\ntests/v2/test_1300-awkward-to-cpp-converter-with-cling.py:521:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\nname = 'roottest_BitMaskedArray_NumpyArray_v2a'\r\n\r\n    def _fallback_getattr(self, name):\r\n        # Try:\r\n        # - in the global namespace\r\n        # - in the ROOT namespace\r\n        # - in gROOT (ROOT lists such as list of files,\r\n        #   memory mapped files, functions, geometries ecc.)\r\n        # The first two attempts allow to lookup\r\n        # e.g. ROOT.ROOT.Math as ROOT.Math\r\n\r\n        if name == '__all__':\r\n            self._handle_import_all()\r\n            # Make the attributes of the facade be injected in the\r\n            # caller module\r\n            raise AttributeError()\r\n        # Note that hasattr caches the lookup for getattr\r\n        elif hasattr(gbl_namespace, name):\r\n            return getattr(gbl_namespace, name)\r\n        elif hasattr(gbl_namespace.ROOT, name):\r\n            return getattr(gbl_namespace.ROOT, name)\r\n        else:\r\n            res = gROOT.FindObject(name)\r\n            if res:\r\n                return res\r\n>       raise AttributeError(\"Failed to get attribute {} from ROOT\".format(name))\r\nE       AttributeError: Failed to get attribute roottest_BitMaskedArray_NumpyArray_v2a from ROOT\r\n\r\nname       = 'roottest_BitMaskedArray_NumpyArray_v2a'\r\nres        = <cppyy.gbl.TObject object at 0x(nil)>\r\nself       = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\n\r\n/usr/lib/python3.10/site-packages/ROOT/_facade.py:195: AttributeError\r\n----------------------------- Captured stderr call -----------------------------\r\ninput_line_92:7:18: error: no template named 'optional' in namespace 'std'\r\n    typedef std::optional<double> value_type;\r\n            ~~~~~^\r\ninput_line_92:30:28: error: type 'awkward::NumpyArray_float64_hzDE4rkLkhw::value_type' (aka 'double') cannot be narrowed to 'awkward::BitMaskedArray_m2IqalSsoEE::value_type' (aka 'int') in initializer list [-Wc++11-narrowing]\r\n        return value_type{ NumpyArray_float64_hzDE4rkLkhw(start_, stop_, ptrs_[which_ + 3], ptrs_)[at] };\r\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninput_line_92:30:28: note: insert an explicit cast to silence this issue\r\n        return value_type{ NumpyArray_float64_hzDE4rkLkhw(start_, stop_, ptrs_[which_ + 3], ptrs_)[at] };\r\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n                           static_cast<value_type>(                                                   )\r\ninput_line_92:33:21: error: no member named 'nullopt' in namespace 'std'\r\n        return std::nullopt;\r\n               ~~~~~^\r\ninput_line_93:3:23: error: no member named 'BitMaskedArray_m2IqalSsoEE' in namespace 'awkward'\r\n  auto obj = awkward::BitMaskedArray_m2IqalSsoEE(0, length, 0, ptrs);\r\n             ~~~~~~~~~^\r\n________________________ test_UnmaskedArray_NumpyArray _________________________\r\n\r\n    def test_UnmaskedArray_NumpyArray():\r\n        v2a = ak._v2.contents.unmaskedarray.UnmaskedArray(\r\n            ak._v2.contents.numpyarray.NumpyArray(np.array([0.0, 1.1, 2.2, 3.3]))\r\n        )\r\n\r\n        layout = v2a\r\n        generator = ak._v2._connect.cling.togenerator(layout.form)\r\n        lookup = ak._v2._lookup.Lookup(layout)\r\n        generator.generate(compiler)\r\n\r\n        ROOT.gInterpreter.Declare(\r\n            f\"\"\"\r\n    void roottest_UnmaskedArray_NumpyArray_v2a(double* out, ssize_t length, ssize_t* ptrs) {{\r\n      auto obj = {generator.entry()};\r\n      out[0] = obj.size();\r\n      out[1] = obj[1].has_value() ? obj[1].value() : 999.0;\r\n      out[2] = obj[3].has_value() ? obj[3].value() : 999.0;\r\n    }}\r\n    \"\"\"\r\n        )\r\n        out = np.zeros(3, dtype=np.float64)\r\n>       ROOT.roottest_UnmaskedArray_NumpyArray_v2a(out, len(layout), lookup.arrayptrs)\r\n\r\ngenerator  = <awkward._v2._connect.cling.UnmaskedArrayGenerator object at 0x7fd3bb031180>\r\nlayout     = <UnmaskedArray len='4'>\r\n    <content><NumpyArray dtype='float64' len='4'>[0.  1.1 2.2 3.3]</NumpyArray></content>\r\n</UnmaskedArray>\r\nlookup     = <awkward._v2._lookup.Lookup object at 0x7fd3bb0305e0>\r\nout        = array([0., 0., 0.])\r\nv2a        = <UnmaskedArray len='4'>\r\n    <content><NumpyArray dtype='float64' len='4'>[0.  1.1 2.2 3.3]</NumpyArray></content>\r\n</UnmaskedArray>\r\n\r\ntests/v2/test_1300-awkward-to-cpp-converter-with-cling.py:801:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\nname = 'roottest_UnmaskedArray_NumpyArray_v2a'\r\n\r\n    def _fallback_getattr(self, name):\r\n        # Try:\r\n        # - in the global namespace\r\n        # - in the ROOT namespace\r\n        # - in gROOT (ROOT lists such as list of files,\r\n        #   memory mapped files, functions, geometries ecc.)\r\n        # The first two attempts allow to lookup\r\n        # e.g. ROOT.ROOT.Math as ROOT.Math\r\n\r\n        if name == '__all__':\r\n            self._handle_import_all()\r\n            # Make the attributes of the facade be injected in the\r\n            # caller module\r\n            raise AttributeError()\r\n        # Note that hasattr caches the lookup for getattr\r\n        elif hasattr(gbl_namespace, name):\r\n            return getattr(gbl_namespace, name)\r\n        elif hasattr(gbl_namespace.ROOT, name):\r\n            return getattr(gbl_namespace.ROOT, name)\r\n        else:\r\n            res = gROOT.FindObject(name)\r\n            if res:\r\n                return res\r\n>       raise AttributeError(\"Failed to get attribute {} from ROOT\".format(name))\r\nE       AttributeError: Failed to get attribute roottest_UnmaskedArray_NumpyArray_v2a from ROOT\r\n\r\nname       = 'roottest_UnmaskedArray_NumpyArray_v2a'\r\nres        = <cppyy.gbl.TObject object at 0x(nil)>\r\nself       = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\n\r\n/usr/lib/python3.10/site-packages/ROOT/_facade.py:195: AttributeError\r\n----------------------------- Captured stderr call -----------------------------\r\ninput_line_94:7:18: error: no template named 'optional' in namespace 'std'\r\n    typedef std::optional<double> value_type;\r\n            ~~~~~^\r\ninput_line_94:23:26: error: type 'awkward::NumpyArray_float64_hzDE4rkLkhw::value_type' (aka 'double') cannot be narrowed to 'awkward::UnmaskedArray_tgRoEa6pI4::value_type' (aka 'int') in initializer list [-Wc++11-narrowing]\r\n      return value_type{ NumpyArray_float64_hzDE4rkLkhw(start_, stop_, ptrs_[which_ + 1], ptrs_)[at] };\r\n                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninput_line_94:23:26: note: insert an explicit cast to silence this issue\r\n      return value_type{ NumpyArray_float64_hzDE4rkLkhw(start_, stop_, ptrs_[which_ + 1], ptrs_)[at] };\r\n                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n                         static_cast<value_type>(                                                   )\r\ninput_line_95:3:23: error: no member named 'UnmaskedArray_tgRoEa6pI4' in namespace 'awkward'\r\n  auto obj = awkward::UnmaskedArray_tgRoEa6pI4(0, length, 0, ptrs);\r\n             ~~~~~~~~~^\r\n__________________ test_nested_IndexedOptionArray_NumpyArray ___________________\r\n\r\n    def test_nested_IndexedOptionArray_NumpyArray():\r\n        v2a = ak._v2.contents.ListOffsetArray(\r\n            ak._v2.index.Index64(np.array([0, 1, 8], dtype=np.int64)),\r\n            ak._v2.contents.indexedoptionarray.IndexedOptionArray(\r\n                ak._v2.index.Index(np.array([999, 2, 2, -1, 1, -1, 5, 4], np.int64)),\r\n                ak._v2.contents.numpyarray.NumpyArray(\r\n                    np.array([0.0, 1.1, 2.2, 3.3, 4.4, 5.5])\r\n                ),\r\n            ),\r\n        )\r\n\r\n        layout = v2a\r\n        generator = ak._v2._connect.cling.togenerator(layout.form)\r\n        lookup = ak._v2._lookup.Lookup(layout)\r\n        generator.generate(compiler)\r\n\r\n        ROOT.gInterpreter.Declare(\r\n            f\"\"\"\r\n    void roottest_nested_IndexedOptionArray_NumpyArray_v2a(double* out, ssize_t length, ssize_t* ptrs) {{\r\n      auto obj = {generator.entry()}[1];\r\n      out[0] = obj.size();\r\n      out[1] = obj[0].has_value() ? obj[0].value() : 999.0;\r\n      out[2] = obj[1].has_value() ? obj[1].value() : 999.0;\r\n      out[3] = obj[2].has_value() ? obj[2].value() : 999.0;\r\n      out[4] = obj[3].has_value() ? obj[3].value() : 999.0;\r\n      out[5] = obj[4].has_value() ? obj[4].value() : 999.0;\r\n      out[6] = obj[5].has_value() ? obj[5].value() : 999.0;\r\n      out[7] = obj[6].has_value() ? obj[6].value() : 999.0;\r\n    }}\r\n    \"\"\"\r\n        )\r\n        out = np.zeros(8, dtype=np.float64)\r\n>       ROOT.roottest_nested_IndexedOptionArray_NumpyArray_v2a(\r\n            out, len(layout), lookup.arrayptrs\r\n        )\r\n\r\ngenerator  = <awkward._v2._connect.cling.ListArrayGenerator object at 0x7fd3bc418340>\r\nlayout     = <ListOffsetArray len='2'>\r\n    <offsets><Index dtype='int64' len='3'>[0 1 8]</Index></offsets>\r\n    <content><IndexedOpt...loat64' len='6'>[0.  1.1 2.2 3.3 4.4 5.5]</NumpyArray></content>\r\n    </IndexedOptionArray></content>\r\n</ListOffsetArray>\r\nlookup     = <awkward._v2._lookup.Lookup object at 0x7fd3bc419990>\r\nout        = array([0., 0., 0., 0., 0., 0., 0., 0.])\r\nv2a        = <ListOffsetArray len='2'>\r\n    <offsets><Index dtype='int64' len='3'>[0 1 8]</Index></offsets>\r\n    <content><IndexedOpt...loat64' len='6'>[0.  1.1 2.2 3.3 4.4 5.5]</NumpyArray></content>\r\n    </IndexedOptionArray></content>\r\n</ListOffsetArray>\r\n\r\ntests/v2/test_1300-awkward-to-cpp-converter-with-cling.py:1253:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\nname = 'roottest_nested_IndexedOptionArray_NumpyArray_v2a'\r\n\r\n    def _fallback_getattr(self, name):\r\n        # Try:\r\n        # - in the global namespace\r\n        # - in the ROOT namespace\r\n        # - in gROOT (ROOT lists such as list of files,\r\n        #   memory mapped files, functions, geometries ecc.)\r\n        # The first two attempts allow to lookup\r\n        # e.g. ROOT.ROOT.Math as ROOT.Math\r\n\r\n        if name == '__all__':\r\n            self._handle_import_all()\r\n            # Make the attributes of the facade be injected in the\r\n            # caller module\r\n            raise AttributeError()\r\n        # Note that hasattr caches the lookup for getattr\r\n        elif hasattr(gbl_namespace, name):\r\n            return getattr(gbl_namespace, name)\r\n        elif hasattr(gbl_namespace.ROOT, name):\r\n            return getattr(gbl_namespace.ROOT, name)\r\n        else:\r\n            res = gROOT.FindObject(name)\r\n            if res:\r\n                return res\r\n>       raise AttributeError(\"Failed to get attribute {} from ROOT\".format(name))\r\nE       AttributeError: Failed to get attribute roottest_nested_IndexedOptionArray_NumpyArray_v2a from ROOT\r\n\r\nname       = 'roottest_nested_IndexedOptionArray_NumpyArray_v2a'\r\nres        = <cppyy.gbl.TObject object at 0x(nil)>\r\nself       = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\n\r\n/usr/lib/python3.10/site-packages/ROOT/_facade.py:195: AttributeError\r\n----------------------------- Captured stderr call -----------------------------\r\ninput_line_143:7:13: error: unknown type name 'IndexedOptionArray_9nKQxf4wwdw'\r\n    typedef IndexedOptionArray_9nKQxf4wwdw value_type;\r\n            ^\r\ninput_line_143:25:14: error: excess elements in scalar initializer\r\n      return value_type(start, stop, ptrs_[which_ + 3], ptrs_);\r\n             ^               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninput_line_144:3:23: error: no member named 'ListArray_K2QNKBAvj9k' in namespace 'awkward'\r\n  auto obj = awkward::ListArray_K2QNKBAvj9k(0, length, 0, ptrs)[1];\r\n             ~~~~~~~~~^\r\n____________________ test_nested_ByteMaskedArray_NumpyArray ____________________\r\n\r\n    def test_nested_ByteMaskedArray_NumpyArray():\r\n        v2a = ak._v2.contents.ListOffsetArray(\r\n            ak._v2.index.Index64(np.array([0, 1, 6], dtype=np.int64)),\r\n            ak._v2.contents.bytemaskedarray.ByteMaskedArray(\r\n                ak._v2.index.Index(np.array([123, 1, 0, 1, 0, 1], np.int8)),\r\n                ak._v2.contents.numpyarray.NumpyArray(\r\n                    np.array([999, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6])\r\n                ),\r\n                valid_when=True,\r\n            ),\r\n        )\r\n\r\n        layout = v2a\r\n        generator = ak._v2._connect.cling.togenerator(layout.form)\r\n        lookup = ak._v2._lookup.Lookup(layout)\r\n        generator.generate(compiler)\r\n\r\n        ROOT.gInterpreter.Declare(\r\n            f\"\"\"\r\n    void roottest_nested_ByteMaskedArray_NumpyArray_v2a(double* out, ssize_t length, ssize_t* ptrs) {{\r\n      auto obj = {generator.entry()}[1];\r\n      out[0] = obj.size();\r\n      out[1] = obj[0].has_value() ? obj[0].value() : 999.0;\r\n      out[2] = obj[1].has_value() ? obj[1].value() : 999.0;\r\n      out[3] = obj[2].has_value() ? obj[2].value() : 999.0;\r\n      out[4] = obj[3].has_value() ? obj[3].value() : 999.0;\r\n      out[5] = obj[4].has_value() ? obj[4].value() : 999.0;\r\n    }}\r\n    \"\"\"\r\n        )\r\n        out = np.zeros(6, dtype=np.float64)\r\n>       ROOT.roottest_nested_ByteMaskedArray_NumpyArray_v2a(\r\n            out, len(layout), lookup.arrayptrs\r\n        )\r\n\r\ngenerator  = <awkward._v2._connect.cling.ListArrayGenerator object at 0x7fd3cd2ffd30>\r\nlayout     = <ListOffsetArray len='2'>\r\n    <offsets><Index dtype='int64' len='3'>[0 1 6]</Index></offsets>\r\n    <content><ByteMasked... 1.1   2.2   3.3   4.4   5.5   6.6]\r\n        </NumpyArray></content>\r\n    </ByteMaskedArray></content>\r\n</ListOffsetArray>\r\nlookup     = <awkward._v2._lookup.Lookup object at 0x7fd3bcd07f40>\r\nout        = array([0., 0., 0., 0., 0., 0.])\r\nv2a        = <ListOffsetArray len='2'>\r\n    <offsets><Index dtype='int64' len='3'>[0 1 6]</Index></offsets>\r\n    <content><ByteMasked... 1.1   2.2   3.3   4.4   5.5   6.6]\r\n        </NumpyArray></content>\r\n    </ByteMaskedArray></content>\r\n</ListOffsetArray>\r\n\r\ntests/v2/test_1300-awkward-to-cpp-converter-with-cling.py:1290:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\nname = 'roottest_nested_ByteMaskedArray_NumpyArray_v2a'\r\n\r\n    def _fallback_getattr(self, name):\r\n        # Try:\r\n        # - in the global namespace\r\n        # - in the ROOT namespace\r\n        # - in gROOT (ROOT lists such as list of files,\r\n        #   memory mapped files, functions, geometries ecc.)\r\n        # The first two attempts allow to lookup\r\n        # e.g. ROOT.ROOT.Math as ROOT.Math\r\n\r\n        if name == '__all__':\r\n            self._handle_import_all()\r\n            # Make the attributes of the facade be injected in the\r\n            # caller module\r\n            raise AttributeError()\r\n        # Note that hasattr caches the lookup for getattr\r\n        elif hasattr(gbl_namespace, name):\r\n            return getattr(gbl_namespace, name)\r\n        elif hasattr(gbl_namespace.ROOT, name):\r\n            return getattr(gbl_namespace.ROOT, name)\r\n        else:\r\n            res = gROOT.FindObject(name)\r\n            if res:\r\n                return res\r\n>       raise AttributeError(\"Failed to get attribute {} from ROOT\".format(name))\r\nE       AttributeError: Failed to get attribute roottest_nested_ByteMaskedArray_NumpyArray_v2a from ROOT\r\n\r\nname       = 'roottest_nested_ByteMaskedArray_NumpyArray_v2a'\r\nres        = <cppyy.gbl.TObject object at 0x(nil)>\r\nself       = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\n\r\n/usr/lib/python3.10/site-packages/ROOT/_facade.py:195: AttributeError\r\n----------------------------- Captured stderr call -----------------------------\r\ninput_line_145:7:13: error: unknown type name 'ByteMaskedArray_w1nWecjWHw'\r\n    typedef ByteMaskedArray_w1nWecjWHw value_type;\r\n            ^\r\ninput_line_145:25:14: error: excess elements in scalar initializer\r\n      return value_type(start, stop, ptrs_[which_ + 3], ptrs_);\r\n             ^               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninput_line_146:3:23: error: no member named 'ListArray_V0gvVn41fs' in namespace 'awkward'\r\n  auto obj = awkward::ListArray_V0gvVn41fs(0, length, 0, ptrs)[1];\r\n             ~~~~~~~~~^\r\n____________________ test_nested_BitMaskedArray_NumpyArray _____________________\r\n\r\n    def test_nested_BitMaskedArray_NumpyArray():\r\n        v2a = ak._v2.contents.ListOffsetArray(\r\n            ak._v2.index.Index64(np.array([0, 1, 14], dtype=np.int64)),\r\n            ak._v2.contents.bitmaskedarray.BitMaskedArray(\r\n                ak._v2.index.Index(\r\n                    np.packbits(\r\n                        np.array(\r\n                            [\r\n                                0,\r\n                                1,\r\n                                1,\r\n                                1,\r\n                                1,\r\n                                0,\r\n                                0,\r\n                                0,\r\n                                0,\r\n                                1,\r\n                                0,\r\n                                1,\r\n                                0,\r\n                                1,\r\n                            ],\r\n                            np.uint8,\r\n                        )\r\n                    )\r\n                ),\r\n                ak._v2.contents.numpyarray.NumpyArray(\r\n                    np.array(\r\n                        [\r\n                            999,\r\n                            0.0,\r\n                            1.0,\r\n                            2.0,\r\n                            3.0,\r\n                            4.0,\r\n                            5.0,\r\n                            6.0,\r\n                            7.0,\r\n                            1.1,\r\n                            2.2,\r\n                            3.3,\r\n                            4.4,\r\n                            5.5,\r\n                            6.6,\r\n                        ]\r\n                    )\r\n                ),\r\n                valid_when=True,\r\n                length=14,\r\n                lsb_order=False,\r\n            ),\r\n        )\r\n\r\n        layout = v2a\r\n        generator = ak._v2._connect.cling.togenerator(layout.form)\r\n        lookup = ak._v2._lookup.Lookup(layout)\r\n        generator.generate(compiler)\r\n\r\n        ROOT.gInterpreter.Declare(\r\n            f\"\"\"\r\n    void roottest_nested_BitMaskedArray_NumpyArray_v2a(double* out, ssize_t length, ssize_t* ptrs) {{\r\n      auto obj = {generator.entry()}[1];\r\n      out[0] = obj.size();\r\n      out[1] = obj[0].has_value() ? obj[0].value() : 999.0;\r\n      out[2] = obj[1].has_value() ? obj[1].value() : 999.0;\r\n      out[3] = obj[2].has_value() ? obj[2].value() : 999.0;\r\n      out[4] = obj[3].has_value() ? obj[3].value() : 999.0;\r\n      out[5] = obj[4].has_value() ? obj[4].value() : 999.0;\r\n      out[6] = obj[5].has_value() ? obj[5].value() : 999.0;\r\n      out[7] = obj[6].has_value() ? obj[6].value() : 999.0;\r\n      out[8] = obj[7].has_value() ? obj[7].value() : 999.0;\r\n      out[9] = obj[8].has_value() ? obj[8].value() : 999.0;\r\n      out[10] = obj[9].has_value() ? obj[9].value() : 999.0;\r\n      out[11] = obj[10].has_value() ? obj[10].value() : 999.0;\r\n      out[12] = obj[11].has_value() ? obj[11].value() : 999.0;\r\n      out[13] = obj[12].has_value() ? obj[12].value() : 999.0;\r\n    }}\r\n    \"\"\"\r\n        )\r\n        out = np.zeros(14, dtype=np.float64)\r\n>       ROOT.roottest_nested_BitMaskedArray_NumpyArray_v2a(\r\n            out, len(layout), lookup.arrayptrs\r\n        )\r\n\r\ngenerator  = <awkward._v2._connect.cling.ListArrayGenerator object at 0x7fd3bc7dbd90>\r\nlayout     = <ListOffsetArray len='2'>\r\n    <offsets><Index dtype='int64' len='3'>[ 0  1 14]</Index></offsets>\r\n    <content><BitMask...              3.3   4.4   5.5   6.6]\r\n        </NumpyArray></content>\r\n    </BitMaskedArray></content>\r\n</ListOffsetArray>\r\nlookup     = <awkward._v2._lookup.Lookup object at 0x7fd3bc7d80d0>\r\nout        = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\r\nv2a        = <ListOffsetArray len='2'>\r\n    <offsets><Index dtype='int64' len='3'>[ 0  1 14]</Index></offsets>\r\n    <content><BitMask...              3.3   4.4   5.5   6.6]\r\n        </NumpyArray></content>\r\n    </BitMaskedArray></content>\r\n</ListOffsetArray>\r\n\r\ntests/v2/test_1300-awkward-to-cpp-converter-with-cling.py:1412:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\nname = 'roottest_nested_BitMaskedArray_NumpyArray_v2a'\r\n\r\n    def _fallback_getattr(self, name):\r\n        # Try:\r\n        # - in the global namespace\r\n        # - in the ROOT namespace\r\n        # - in gROOT (ROOT lists such as list of files,\r\n        #   memory mapped files, functions, geometries ecc.)\r\n        # The first two attempts allow to lookup\r\n        # e.g. ROOT.ROOT.Math as ROOT.Math\r\n\r\n        if name == '__all__':\r\n            self._handle_import_all()\r\n            # Make the attributes of the facade be injected in the\r\n            # caller module\r\n            raise AttributeError()\r\n        # Note that hasattr caches the lookup for getattr\r\n        elif hasattr(gbl_namespace, name):\r\n            return getattr(gbl_namespace, name)\r\n        elif hasattr(gbl_namespace.ROOT, name):\r\n            return getattr(gbl_namespace.ROOT, name)\r\n        else:\r\n            res = gROOT.FindObject(name)\r\n            if res:\r\n                return res\r\n>       raise AttributeError(\"Failed to get attribute {} from ROOT\".format(name))\r\nE       AttributeError: Failed to get attribute roottest_nested_BitMaskedArray_NumpyArray_v2a from ROOT\r\n\r\nname       = 'roottest_nested_BitMaskedArray_NumpyArray_v2a'\r\nres        = <cppyy.gbl.TObject object at 0x(nil)>\r\nself       = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\n\r\n/usr/lib/python3.10/site-packages/ROOT/_facade.py:195: AttributeError\r\n----------------------------- Captured stderr call -----------------------------\r\ninput_line_147:7:13: error: unknown type name 'BitMaskedArray_m2IqalSsoEE'\r\n    typedef BitMaskedArray_m2IqalSsoEE value_type;\r\n            ^\r\ninput_line_147:25:14: error: excess elements in scalar initializer\r\n      return value_type(start, stop, ptrs_[which_ + 3], ptrs_);\r\n             ^               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninput_line_148:3:23: error: no member named 'ListArray_5fHu1BwL0I' in namespace 'awkward'\r\n  auto obj = awkward::ListArray_5fHu1BwL0I(0, length, 0, ptrs)[1];\r\n             ~~~~~~~~~^\r\n_____________________ test_nested_UnmaskedArray_NumpyArray _____________________\r\n\r\n    def test_nested_UnmaskedArray_NumpyArray():\r\n        v2a = ak._v2.contents.ListOffsetArray(\r\n            ak._v2.index.Index64(np.array([0, 1, 5], dtype=np.int64)),\r\n            ak._v2.contents.unmaskedarray.UnmaskedArray(\r\n                ak._v2.contents.numpyarray.NumpyArray(np.array([999, 0.0, 1.1, 2.2, 3.3]))\r\n            ),\r\n        )\r\n\r\n        layout = v2a\r\n        generator = ak._v2._connect.cling.togenerator(layout.form)\r\n        lookup = ak._v2._lookup.Lookup(layout)\r\n        generator.generate(compiler)\r\n\r\n        ROOT.gInterpreter.Declare(\r\n            f\"\"\"\r\n    void roottest_nested_UnmaskedArray_NumpyArray_v2a(double* out, ssize_t length, ssize_t* ptrs) {{\r\n      auto obj = {generator.entry()}[1];\r\n      out[0] = obj.size();\r\n      out[1] = obj[1].has_value() ? obj[1].value() : 999.0;\r\n      out[2] = obj[3].has_value() ? obj[3].value() : 999.0;\r\n    }}\r\n    \"\"\"\r\n        )\r\n        out = np.zeros(3, dtype=np.float64)\r\n>       ROOT.roottest_nested_UnmaskedArray_NumpyArray_v2a(\r\n            out, len(layout), lookup.arrayptrs\r\n        )\r\n\r\ngenerator  = <awkward._v2._connect.cling.ListArrayGenerator object at 0x7fd3bca6f2e0>\r\nlayout     = <ListOffsetArray len='2'>\r\n    <offsets><Index dtype='int64' len='3'>[0 1 5]</Index></offsets>\r\n    <content><UnmaskedAr...      [999.    0.    1.1   2.2   3.3]\r\n        </NumpyArray></content>\r\n    </UnmaskedArray></content>\r\n</ListOffsetArray>\r\nlookup     = <awkward._v2._lookup.Lookup object at 0x7fd3bca6d300>\r\nout        = array([0., 0., 0.])\r\nv2a        = <ListOffsetArray len='2'>\r\n    <offsets><Index dtype='int64' len='3'>[0 1 5]</Index></offsets>\r\n    <content><UnmaskedAr...      [999.    0.    1.1   2.2   3.3]\r\n        </NumpyArray></content>\r\n    </UnmaskedArray></content>\r\n</ListOffsetArray>\r\n\r\ntests/v2/test_1300-awkward-to-cpp-converter-with-cling.py:1763:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\nname = 'roottest_nested_UnmaskedArray_NumpyArray_v2a'\r\n\r\n    def _fallback_getattr(self, name):\r\n        # Try:\r\n        # - in the global namespace\r\n        # - in the ROOT namespace\r\n        # - in gROOT (ROOT lists such as list of files,\r\n        #   memory mapped files, functions, geometries ecc.)\r\n        # The first two attempts allow to lookup\r\n        # e.g. ROOT.ROOT.Math as ROOT.Math\r\n\r\n        if name == '__all__':\r\n            self._handle_import_all()\r\n            # Make the attributes of the facade be injected in the\r\n            # caller module\r\n            raise AttributeError()\r\n        # Note that hasattr caches the lookup for getattr\r\n        elif hasattr(gbl_namespace, name):\r\n            return getattr(gbl_namespace, name)\r\n        elif hasattr(gbl_namespace.ROOT, name):\r\n            return getattr(gbl_namespace.ROOT, name)\r\n        else:\r\n            res = gROOT.FindObject(name)\r\n            if res:\r\n                return res\r\n>       raise AttributeError(\"Failed to get attribute {} from ROOT\".format(name))\r\nE       AttributeError: Failed to get attribute roottest_nested_UnmaskedArray_NumpyArray_v2a from ROOT\r\n\r\nname       = 'roottest_nested_UnmaskedArray_NumpyArray_v2a'\r\nres        = <cppyy.gbl.TObject object at 0x(nil)>\r\nself       = <module 'ROOT' from '/usr/lib/python3.10/site-packages/ROOT/__init__.py'>\r\n\r\n/usr/lib/python3.10/site-packages/ROOT/_facade.py:195: AttributeError\r\n----------------------------- Captured stderr call -----------------------------\r\ninput_line_149:7:13: error: unknown type name 'UnmaskedArray_tgRoEa6pI4'\r\n    typedef UnmaskedArray_tgRoEa6pI4 value_type;\r\n            ^\r\ninput_line_149:25:14: error: excess elements in scalar initializer\r\n      return value_type(start, stop, ptrs_[which_ + 3], ptrs_);\r\n             ^               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninput_line_150:3:23: error: no member named 'ListArray_d2MxjWTgr6k' in namespace 'awkward'\r\n  auto obj = awkward::ListArray_d2MxjWTgr6k(0, length, 0, ptrs)[1];\r\n             ~~~~~~~~~^\r\n```",
  "closed_at":"2022-03-23T23:05:49Z",
  "comments":6,
  "created_at":"2022-03-23T21:24:17Z",
  "id":1178682423,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5GQUQ3",
  "number":1382,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Test failure with 1.8.0 (1300-awkward-to-cpp-converter-with-cling)",
  "updated_at":"2022-03-23T23:05:49Z",
  "user":"MDQ6VXNlcjMxNjQ5NTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-03-23T23:05:50Z",
  "comments":1,
  "created_at":"2022-03-23T22:31:02Z",
  "draft":false,
  "id":1178737469,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws406hlo",
  "number":1383,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-23T23:05:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Protect test 1300 from ROOT without C++17 (or, at least, without std::optional).",
  "updated_at":"2022-03-23T23:05:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Just FYI @henryiii: changing\r\n\r\n```python\r\nfor i in range(len(out)):\r\n    if i > 0:\r\n        out[i] = \" \" + out[i]\r\n    else:\r\n        out[i] = \"[\" + out[i]\r\n    if i < len(out) - 1:\r\n        out[i] = out[i] + \",\"\r\n    else:\r\n        out[i] = out[i] + \"]\"\r\n```\r\n\r\ninto a for loop with\r\n\r\n```python\r\nfor i, val in enumerate(out):\r\n```\r\n\r\nand all `out[i]` on the right-hand side of assignments converted into `val` broke this functionality. The original for loop relied on a side-effect in which `out[i]` was changed twice. Using an assigned-once name, `val`, prevented the first change from being seen in the final result.\r\n\r\nI repeatedly run into cases in which side-effect turn out to be a bad idea (there's really something to this pure functional paradigm), and this could be counted as one of them. But side-effect based programming is a part of ordinary Python use and I wanted to bring to your attention that there are corner-cases like this in which `for i in range(len(XYZ))` \u2192 `for i, val in enumerate(XYZ)` can be dangerous. Not to avoid these refactorings, but to keep an eye out for them!\r\n\r\n(Also, I haven't yet checked the history to be sure that that's how this bug crept in, I'm just guessing that because it looks like it.)",
  "closed_at":"2022-03-24T21:57:27Z",
  "comments":2,
  "created_at":"2022-03-24T14:00:54Z",
  "draft":false,
  "id":1179561548,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws409Cb7",
  "number":1384,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-24T21:57:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix _prettyprint after 'for i in range' changed to 'for i, val in enumerate'.",
  "updated_at":"2022-03-24T21:57:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"See https://github.com/psf/black/issues/2964 for details.\r\n\r\nCommitted via https://github.com/asottile/all-repos",
  "closed_at":"2022-03-29T21:45:49Z",
  "comments":1,
  "created_at":"2022-03-28T19:48:21Z",
  "draft":false,
  "id":1183908536,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41Livu",
  "number":1385,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-29T21:45:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: bump black to 22.3.0 due to click 8.1 release",
  "updated_at":"2022-03-29T21:45:50Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nak.argsort does not return an index-type in the case that the input list array is full of None values.\r\n```\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.8.0'\r\n>>> x = ak.Array([[13.2, 14], [67.8]])\r\n>>> x\r\n<Array [[13.2, 14], [67.8]] type='2 * var * float64'>\r\n>>> masked = ak.mask(x, [False, False])\r\n>>> masked\r\n<Array [None, None] type='2 * option[var * float64]'>\r\n>>> ak.argsort(masked)\r\n<Array [None, None] type='2 * option[var * float64]'>\r\n```\r\nTherefore if the resulting array is used for slicing, we get the following ValueError:\r\n```\r\n>>> masked[ak.argsort(masked)]\r\n\r\nValueError: only arrays of integers or booleans may be used as a slice\r\n```\r\nThe expected behavior is:\r\n```\r\n>>> ak.argsort(masked)\r\n<Array [None, None] type='2 * option[var * int64]'>\r\n```\r\nso that `ak.argsort(masked)` can be used for slicing.",
  "closed_at":"2022-03-29T22:12:38Z",
  "comments":6,
  "created_at":"2022-03-29T17:27:00Z",
  "id":1185187434,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5GpIZq",
  "number":1386,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"awkward.argsort does not return correct types for None lists",
  "updated_at":"2022-03-29T22:12:38Z",
  "user":"MDQ6VXNlcjM3NDIzNDA5"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-03-29T22:12:39Z",
  "comments":1,
  "created_at":"2022-03-29T21:42:00Z",
  "draft":false,
  "id":1185444345,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41QpbG",
  "number":1387,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-03-29T22:12:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"No zero-length shortcuts for ak.argsort (v1 & v2).",
  "updated_at":"2022-03-29T22:12:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-26T18:57:46Z",
  "comments":3,
  "created_at":"2022-03-29T22:11:57Z",
  "draft":false,
  "id":1185480750,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41QxlQ",
  "number":1388,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"If this test passes, #1283 is fixed.",
  "updated_at":"2022-09-23T00:49:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is a very hacky fix that just runs `std::stable_sort` on the CPU. Given that we won't (?) improve CUDA support in v1, and this is a v1-only fix, I think it's reasonable to (a) assume we're on the CPU, and (b) do this inline instead of with a CPU kernel.",
  "closed_at":"2022-09-08T16:23:26Z",
  "comments":4,
  "created_at":"2022-03-30T09:59:22Z",
  "draft":true,
  "id":1186198291,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41TNRu",
  "number":1389,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: sort v1 parents",
  "updated_at":"2022-09-23T00:49:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-04T21:30:23Z",
  "comments":1,
  "created_at":"2022-03-31T14:11:28Z",
  "draft":false,
  "id":1188147253,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41Zuvw",
  "number":1390,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-04T21:30:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This PR adds all the remaining kernels in the studies directory",
  "updated_at":"2022-04-04T21:30:24Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\n@philippemiron is converting data from NetCDF4 files into Awkward Arrays, and one of the features we lack is a place to put attributes. These can be descriptions, units, meanings of flags, etc., and a single field can have more than one of these (e.g. so that \"units\" are programmatically accessible). In general, any JSON-encodable data.\r\n\r\nThis applies at two levels: globally for a whole array, in such a way that all derived arrays pass on the attributes, and per-record field. The per-record field attributes should only be passed on if the meaning of the field is not changed, and should not be counted as part of the Content node's type. Also, these should be read and written to files as metadata wherever possible.\r\n\r\n**Why not use parameter `__doc__`?**\r\n\r\nThis would work as a per-record field attribute that is passed on whenever the meaning of the field is not changed, and doesn't count as part of the Content node's type. However, it has to be a string, since this is what goes into the Python `__doc__` property (and therefore IPython and Jupyter help). The attributes have to be general JSON-encodable metadata.\r\n\r\nAlso, this only encodes per-record field attributes, not global attributes.\r\n\r\n**Why not use a new parameter?**\r\n\r\nIt would only be accessible through idioms like `array.layout.parameters[\"attrs\"]`. This is high-level data analyst information, and they shouldn't have to go through `layout`, which is mid-level, for library developers. Also, such an idiom would fail if the layout ever gets buried in another Content node (i.e. the user has to be _aware_ of layouts and how they change, which is not a high-level view!). For example, rearranging records in a RecordArray nests the RecordArray within an IndexedArray for performance reasons; so after certain kinds of slices, `array.layout.parameters[\"attrs\"]` becomes `array.layout.content.parameters[\"attrs\"]`, probably unexpectedly.\r\n\r\n**Why not use behavior?**\r\n\r\nIt's an odd thing to do, but `behavior` is passed from an ak.Array to any new ak.Array derived from it. Any keys in `behavior` that aren't recognized are ignored. However, this would only encode global attributes, not per-record field attributes, and `behavior` (which typically contains function objects and class objects) is not serialized when writing files, or filled when reading files.\r\n\r\n**What instead?**\r\n\r\nThis is really two new features:\r\n\r\n   1. Per-record field metadata, as a parameter, that follows all the same rules as `__doc__`, but doesn't have to be a string and is exposed at high-level in a different way (one that allows non-strings). Parameters are already serializable.\r\n   2. Global metadata that follows all the same rules as `behavior`, but is serializable.\r\n\r\nThey should have names like `attrs`, following [xarray's convention](https://xarray.pydata.org/en/stable/generated/xarray.DataArray.attrs.html), but the per-record field `attrs` should be distinguishable somehow from the global `attrs`.\r\n\r\nPerhaps both of these should be dicts (JSON objects) and when we're looking at one field, the two dicts are overlaid, with the per-field keys taking precedence over the global keys? That sounds natural and would minimize the use of names, but it sounds like just the sort of thing that would break something in the future.\r\n\r\nWhat does xarray do?\r\n\r\n```python\r\n>>> import xarray as xr\r\n>>> dataarray = xr.DataArray([1, 2, 3], attrs={\"wow\": \"look!\"})\r\n>>> dataset = xr.Dataset({\"x\": dataarray}, attrs={\"wow\": \"wee!\", \"another\": \"thing\"})\r\n>>> dataset.attrs\r\n{'wow': 'wee!', 'another': 'thing'}\r\n>>> dataset.x.attrs\r\n{'wow': 'look!'}\r\n```\r\n\r\nxarray never has this issue because DataArray and Dataset are different types and can never be confused. In Awkward, an ak.Array is an ak.Array is an ak.Array, regardless of whether it's an array of lists of records, an array of just the records, or an array of one of the fields of those records. The global attrs can propagate down when extracting the array of records from the array of lists of records, but when you get to the array of one of the fields of those records, there's a conflict. They should probably be named differently, since \"per-field attributes\" and \"global attributes\" are different concepts, but which one gets the exalted name of \"`attrs`\"? And what would the other one be called?",
  "closed_at":"2023-11-08T16:23:08Z",
  "comments":6,
  "created_at":"2022-03-31T22:44:29Z",
  "id":1188953879,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5G3f8X",
  "number":1391,
  "performed_via_github_app":null,
  "reactions":{
   "eyes":2,
   "total_count":2
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"xarray-style \"attrs\", global and per-record field",
  "updated_at":"2023-11-08T16:23:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"A lot of these high-level methods and properties can be implemented now that the corresponding operations exist.",
  "closed_at":"2022-04-01T14:07:51Z",
  "comments":1,
  "created_at":"2022-04-01T13:09:31Z",
  "draft":false,
  "id":1189775410,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41fPFw",
  "number":1392,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-01T14:07:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"High-level ak._v2.Array clean-ups.",
  "updated_at":"2022-04-01T14:07:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Since operations on the GPU accumulate a list of ErrorContexts, it's important that these don't carry any references to the arrays themselves. Otherwise, it would be called a memory leak.\r\n\r\n(\"Would be called\" is appropriate phrasing, since it's a matter of opinion! But we can expect users to find it very surprising that temporary arrays, no longer needed for computation, are still in memory because we thought we would need to print them out in an error message.)\r\n\r\nFor the future: it will also be important for those GPU arrays to not print their contents, like the typetracer handling in `__repr__`.\r\n\r\nThis touches a lot of things because a few \"print-out bugs\" were discovered via testing (\"print-out bugs\" only affect the way a `__repr__` looks, not the underlying data), use of ErrorContexts were made a bit more consistent (every high-level operation should have one, and no mid-level operation should), and I refactored the ErrorContexts to contain their own `format_exception` handlers (a point raised by @agoose77).",
  "closed_at":"2022-04-01T21:26:48Z",
  "comments":1,
  "created_at":"2022-04-01T20:37:58Z",
  "draft":false,
  "id":1190249571,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41g0Kj",
  "number":1393,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-01T21:26:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ErrorContexts should only contain strings.",
  "updated_at":"2022-04-01T21:26:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.3.1 to 2.4.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.4.0</h2>\n<ul>\n<li>\u2728 cibuildwheel now supports running locally on Windows and macOS (as well as Linux). On macOS, you'll have to install the versions of Pythons that you want to use from Python.org, and cibuildwheel will use them. On Windows, cibuildwheel will install it's own versions of Python. Check out <a href=\"https://cibuildwheel.readthedocs.io/en/stable/setup/#local\">the documentation</a> for instructions. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/974\">#974</a>)</li>\n<li>\u2728 Added support for building PyPy 3.9 wheels. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1031\">#1031</a>)</li>\n<li>\u2728 Listing at the end of the build now displays the size of each wheel (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/975\">#975</a>)</li>\n<li>\ud83d\udc1b Workaround a connection timeout bug on Travis CI ppc64le runners (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/906\">#906</a>)</li>\n<li>\ud83d\udc1b Fix an encoding error when reading setup.py in the wrong encoding (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/977\">#977</a>)</li>\n<li>\ud83d\udee0 Setuptools updated to 61.3.0, including experimental support for reading config from pyproject.toml(PEP 621). This could change the behaviour of your build if you have a pyproject.toml with a <code>[project]</code> table, because that takes precedence over setup.py and setup.cfg. Check out the <a href=\"https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html\">setuptools docs</a> and the <a href=\"https://packaging.python.org/en/latest/specifications/declaring-project-metadata/\">project metadata specification</a> for more info.</li>\n<li>\ud83d\udee0 Many other dependency updates.</li>\n<li>\ud83d\udcda Minor docs improvements</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.4.0</h3>\n<p><em>2 April 2022</em></p>\n<ul>\n<li>\u2728 cibuildwheel now supports running locally on Windows and macOS (as well as Linux). On macOS, you'll have to install the versions of Pythons that you want to use from Python.org, and cibuildwheel will use them. On Windows, cibuildwheel will install it's own versions of Python. Check out <a href=\"https://cibuildwheel.readthedocs.io/en/stable/setup/#local\">the documentation</a> for instructions. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/974\">#974</a>)</li>\n<li>\u2728 Added support for building PyPy 3.9 wheels. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1031\">#1031</a>)</li>\n<li>\u2728 Listing at the end of the build now displays the size of each wheel (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/975\">#975</a>)</li>\n<li>\ud83d\udc1b Workaround a connection timeout bug on Travis CI ppc64le runners (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/906\">#906</a>)</li>\n<li>\ud83d\udc1b Fix an encoding error when reading setup.py in the wrong encoding (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/977\">#977</a>)</li>\n<li>\ud83d\udee0 Setuptools updated to 61.3.0, including experimental support for reading config from pyproject.toml(PEP 621). This could change the behaviour of your build if you have a pyproject.toml with a <code>[project]</code> table, because that takes precedence over setup.py and setup.cfg. Check out the <a href=\"https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html\">setuptools docs</a> and the <a href=\"https://packaging.python.org/en/latest/specifications/declaring-project-metadata/\">project metadata specification</a> for more info.</li>\n<li>\ud83d\udee0 Many other dependency updates.</li>\n<li>\ud83d\udcda Minor docs improvements</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/1a5fec7075255d974a4adf330e507dbe4bce6cb7\"><code>1a5fec7</code></a> Bump version: v2.4.0</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/e88a29cbe7e1b764119d7b310e3dc8597703cace\"><code>e88a29c</code></a> Update dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1070\">#1070</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/7ef593c2adef982d6755f71f73bf6a09251e78ad\"><code>7ef593c</code></a> fix: minor touchups based on stricter mypy settings (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1060\">#1060</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/dc10f1a65421e3e67428d02e876224121fd1ae49\"><code>dc10f1a</code></a> Revert &quot;chore: skip PyPy 3.7 7.3.8 updates&quot; (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1037\">#1037</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/7d097cb6185c62dd3ffab17f7a82383549c0b966\"><code>7d097cb</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1066\">#1066</a> from pypa/update-dependencies-pr</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/481f2eb623bfd3f569d450cee08273584226f63f\"><code>481f2eb</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1065\">#1065</a> from abravalheri/main</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/0ccd623e605e7527d49e9dacf7e90f6489981c70\"><code>0ccd623</code></a> [pre-commit.ci] auto fixes from pre-commit.com hooks</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/cd808df0e9ad19ed36f19c6843400a48e61d6e3b\"><code>cd808df</code></a> Apply suggestions from code review</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/9c046c26dbcc3481fdb7ab6047fa7e447c8b7e66\"><code>9c046c2</code></a> fix: issue with typer breaking pycln</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/901f07b586939f12fc4996efe73a56ce382d969c\"><code>901f07b</code></a> Redraft to respond to comments</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.3.1...v2.4.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.3.1&new-version=2.4.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-04-04T18:17:13Z",
  "comments":1,
  "created_at":"2022-04-04T17:43:05Z",
  "draft":false,
  "id":1192109505,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41mlNS",
  "number":1394,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-04T18:17:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump pypa/cibuildwheel from 2.3.1 to 2.4.0",
  "updated_at":"2022-04-04T18:17:13Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/setup-cfg-fmt: v1.20.0 \u2192 v1.20.1](https://github.com/asottile/setup-cfg-fmt/compare/v1.20.0...v1.20.1)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-04-04T20:10:43Z",
  "comments":1,
  "created_at":"2022-04-04T19:26:31Z",
  "draft":false,
  "id":1192218091,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41m8lN",
  "number":1395,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-04T20:10:43Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-04-04T20:10:44Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Quite aside from the options we talked about for various ways to handle file layout, this kind of splitting up of functionality is very helpful for reusing the code in dask. I haven't checked whether this actually works yet, I probably mistyped along the way, but I wanted to show the idea.",
  "closed_at":"2022-04-19T22:45:03Z",
  "comments":6,
  "created_at":"2022-04-04T21:13:33Z",
  "draft":false,
  "id":1192321151,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41nSze",
  "number":1397,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-19T22:45:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"split up functions",
  "updated_at":"2022-04-19T22:45:03Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-06T06:47:12Z",
  "comments":1,
  "created_at":"2022-04-06T04:20:48Z",
  "draft":false,
  "id":1194002554,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41s6yd",
  "number":1398,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-06T06:47:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ROOT doesn't recognize for-each iterators without operator==",
  "updated_at":"2022-04-06T06:47:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-12T09:07:59Z",
  "comments":1,
  "created_at":"2022-04-06T10:40:20Z",
  "draft":false,
  "id":1194420648,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41uVak",
  "number":1399,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-12T09:07:59Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This PR adds JAX as a new nplike",
  "updated_at":"2022-04-12T09:08:00Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n278dccee\n\n### Description and code to reproduce\n\n```python\r\nimport awkward._v2 as ak\r\n\r\nak.Record({'x': 10.0}, with_name=\"X\")\r\n```",
  "closed_at":"2022-04-08T16:15:31Z",
  "comments":0,
  "created_at":"2022-04-06T20:32:01Z",
  "id":1195157544,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5HPKgo",
  "number":1400,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`with_name` fails for `ak._v2.Record`",
  "updated_at":"2022-04-08T16:15:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1400\r\n\r\nAs per the discussion below, `Record.recursively_apply` is a top-level function that just forwards the `_recursively_apply` call to the content.",
  "closed_at":"2022-04-08T16:15:32Z",
  "comments":4,
  "created_at":"2022-04-06T20:34:40Z",
  "draft":false,
  "id":1195159623,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws41w2Bh",
  "number":1401,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-08T16:15:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implement `recursively_apply` for `Record`",
  "updated_at":"2022-04-08T16:15:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.8.0\r\n\r\n### Description and code to reproduce\r\n\r\nThis might be intentional (I doubt it), but I found it surprising. \r\n```pycon\r\n>>> ak.max(np.zeros(0, dtype=np.int64), mask_identity=False) # None\r\n>>> ak.max(np.zeros(0, dtype=np.int64), axis=-1, mask_identity=False)\r\n-9223372036854775808\r\n```\r\n\r\nI'm fairly confident that this is just an artefact of the special casing for `axis=None`.\r\n\r\nThere is a separate bug related to this special casing:\r\n```pycon\r\n>>> ak.max(np.zeros(1, dtype=np.int64), initial=1_000_000, mask_identity=False)\r\n0\r\n>>> ak.max(np.zeros(1, dtype=np.int64), axis=-1, initial=1_000_000, mask_identity=False)\r\n1000000\r\n```\r\nWe don't handle the `initial` case either.\r\n\r\nOne solution might be to use to the existing reduction logic for `axis=0` within the completely flattened array parts. That way, all of the important code takes the same code path, and we'd just have a top-level null-coalescing max to build the final solution.",
  "closed_at":"2022-12-23T14:14:52Z",
  "comments":9,
  "created_at":"2022-04-07T09:51:15Z",
  "id":1195802007,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5HRn2X",
  "number":1402,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Reducer `axis=None` cases should handle `initial` (pass to NumPy) and raise exceptions for empty arrays",
  "updated_at":"2022-12-23T14:14:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n314efeee9e17626f363dffc6010ccc6ab6002bea\r\n\r\n### Description and code to reproduce\r\n\r\n```pycon\r\n>>> import awkward._v2 as ak\r\n>>> import numpy as np\r\n>>> ak.from_numpy(np.array([\"this\", \"that\"]))\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\nInput In [1], in <cell line: 3>()\r\n      1 import awkward._v2 as ak\r\n      2 import numpy as np\r\n----> 3 ak.from_numpy(np.array([\"this\", \"that\"]))\r\n\r\nFile ~/Git/awkward-1.0/awkward/_v2/operations/convert/ak_from_numpy.py:53, in from_numpy(array, regulararray, recordarray, highlevel, behavior)\r\n     12 \"\"\"\r\n     13 Args:\r\n     14     array (np.ndarray): The NumPy array to convert into an Awkward Array.\r\n   (...)\r\n     41 See also #ak.to_numpy and #ak.from_cupy.\r\n     42 \"\"\"\r\n     43 with ak._v2._util.OperationErrorContext(\r\n     44     \"ak._v2.from_numpy\",\r\n     45     dict(\r\n   (...)\r\n     51     ),\r\n     52 ):\r\n---> 53     return _impl(array, regulararray, recordarray, highlevel, behavior)\r\n\r\nFile ~/Git/awkward-1.0/awkward/_v2/operations/convert/ak_from_numpy.py:142, in _impl(array, regulararray, recordarray, highlevel, behavior)\r\n    139     mask = None\r\n    141 if not recordarray or array.dtype.names is None:\r\n--> 142     layout = recurse(array, mask)\r\n    144 else:\r\n    145     contents = []\r\n\r\nFile ~/Git/awkward-1.0/awkward/_v2/operations/convert/ak_from_numpy.py:91, in _impl.<locals>.recurse(array, mask)\r\n     89 starts = numpy.arange(0, len(asbytes) * itemsize, itemsize, dtype=np.int64)\r\n     90 stops = starts + numpy.char.str_len(asbytes)\r\n---> 91 data = ak._v2.contents.ListArray64(\r\n     92     ak._v2.index.Index64(starts),\r\n     93     ak._v2.index.Index64(stops),\r\n     94     ak._v2.contents.NumpyArray(\r\n     95         asbytes.view(\"u1\"), parameters={\"__array__\": \"char\"}, nplike=numpy\r\n     96     ),\r\n     97     parameters={\"__array__\": \"string\"},\r\n     98 )\r\n     99 for i in range(len(array.shape) - 1, 0, -1):\r\n    100     data = ak._v2.contents.RegularArray(\r\n    101         data, array.shape[i], array.shape[i - 1]\r\n    102     )\r\n\r\nAttributeError: module 'awkward._v2.contents' has no attribute 'ListArray64'\r\n```",
  "closed_at":"2022-04-08T19:08:23Z",
  "comments":0,
  "created_at":"2022-04-08T11:29:22Z",
  "id":1197202662,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5HW9zm",
  "number":1403,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`from_numpy` fails for string dtypes (v2)",
  "updated_at":"2022-04-08T19:08:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1403",
  "closed_at":"2022-04-08T19:08:24Z",
  "comments":1,
  "created_at":"2022-04-08T11:37:09Z",
  "draft":false,
  "id":1197210080,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws413jdh",
  "number":1404,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-08T19:08:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: `from_numpy` references `ListArray64`",
  "updated_at":"2022-04-08T19:08:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.8.0\r\n\r\n### Description and code to reproduce\r\n\r\nThere is currently a check in `ListArray::_getitem_next_jagged` that ensures the slice and content have the same length. This is not valid whilst we support \"valid\" layouts that don't map to all sublists, e.g. a `ListOffsetArray` that doesn't create a sublist over its child's last `n` items.\r\n\r\n```python3\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\narray = ak._v2.Array(\r\n    ak._v2.contents.ListArray(\r\n        ak._v2.index.Index64(np.array([0], dtype=np.int64)),\r\n        ak._v2.index.Index64(np.array([1], dtype=np.int64)),\r\n        ak._v2.contents.ListOffsetArray(\r\n            ak._v2.index.Index64(np.array([0, 1], dtype=np.int64)),\r\n            ak._v2.contents.NumpyArray(np.array([0], dtype=np.int64)),\r\n        ),\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\nindex_bad = ak._v2.Array(\r\n    ak._v2.contents.ListArray(\r\n        ak._v2.index.Index64(np.array([0], dtype=np.int64)),\r\n        ak._v2.index.Index64(np.array([1], dtype=np.int64)),\r\n        ak._v2.contents.ListOffsetArray(\r\n            ak._v2.index.Index64(np.array([0, 1, 2], dtype=np.int64)),\r\n            ak._v2.contents.NumpyArray(np.array([0, 0], dtype=np.int64)),\r\n        ),\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\nindex_good = ak._v2.Array(\r\n    ak._v2.contents.ListArray(\r\n        ak._v2.index.Index64(np.array([0], dtype=np.int64)),\r\n        ak._v2.index.Index64(np.array([1], dtype=np.int64)),\r\n        ak._v2.contents.ListOffsetArray(\r\n            ak._v2.index.Index64(np.array([0, 1], dtype=np.int64)),\r\n            ak._v2.contents.NumpyArray(np.array([0, 0], dtype=np.int64)),\r\n        ),\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\narray[index_good]\r\narray[index_bad]\r\n```\r\n\r\nThis report has morphed as I went hunting for the root-cause. The current version only happens in v2.",
  "closed_at":"2022-09-01T00:13:15Z",
  "comments":1,
  "created_at":"2022-04-11T10:45:26Z",
  "id":1199773818,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Hgxh6",
  "number":1405,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ListArray._getitem_next_jagged` fails for lists with unmapped sublists (v2)",
  "updated_at":"2022-09-01T00:13:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.8.0\r\n\r\n### Description and code to reproduce\r\nIn particular, where the `slicecontent` is an `IndexedOptionArray` of a `ListOffsetArray`.\r\n\r\nThis code-path is near identical between v1 and v2, so it's most likely a legacy bug. In short, the indices of the **indexed** array's outermost list (`[1, 3]`) do not start at zero. This is not accounted for in the `ListArray._getitem_next_jagged` implementation. The kernels used do not have any notion of the `ListArray`'s starts or stops, so this is not a kernel bug.\r\n\r\n\r\n<details>\r\n<summary>Fails</summary>\r\n\r\n```python3\r\narray = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([1, 3], dtype=np.int64)),\r\n        ak.layout.ListOffsetArray64(\r\n            ak.layout.Index64(np.array([0, 2, 2, 3], dtype=np.int64)),\r\n            ak.layout.NumpyArray(np.array([0, 1, 2], dtype=np.int64)),\r\n        ),\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\nindex = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([0, 2], dtype=np.int64)),\r\n        ak.layout.IndexedOptionArray64(\r\n            ak.layout.Index64(np.array([0, 1], dtype=np.int64)),\r\n            ak.layout.ListOffsetArray64(\r\n                ak.layout.Index64(np.array([0, 0, 1], dtype=np.int64)),\r\n                ak.layout.NumpyArray(np.array([0], dtype=np.int64)),\r\n            ),\r\n        )\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\narray[index]\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Succeeds (remove option type in index)</summary>\r\n\r\n```python3\r\narray = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([1, 3], dtype=np.int64)),\r\n        ak.layout.ListOffsetArray64(\r\n            ak.layout.Index64(np.array([0, 2, 2, 3], dtype=np.int64)),\r\n            ak.layout.NumpyArray(np.array([0, 1, 2], dtype=np.int64)),\r\n        ),\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\nindex = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([0, 2], dtype=np.int64)),\r\n        ak.layout.ListOffsetArray64(\r\n            ak.layout.Index64(np.array([0, 0, 1], dtype=np.int64)),\r\n            ak.layout.NumpyArray(np.array([0], dtype=np.int64)),\r\n        ),\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\narray[index]\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Succeeds (start array offsets at 0)</summary>\r\n\r\n```python\r\narray = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([0, 2], dtype=np.int64)),\r\n        ak.layout.ListOffsetArray64(\r\n            ak.layout.Index64(np.array([2, 2, 3], dtype=np.int64)),\r\n            ak.layout.NumpyArray(np.array([0, 1, 2], dtype=np.int64)),\r\n        ),\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\nindex = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([0, 2], dtype=np.int64)),\r\n        ak.layout.IndexedOptionArray64(\r\n            ak.layout.Index64(np.array([0, 1], dtype=np.int64)),\r\n            ak.layout.ListOffsetArray64(\r\n                ak.layout.Index64(np.array([0, 0, 1], dtype=np.int64)),\r\n                ak.layout.NumpyArray(np.array([0], dtype=np.int64)),\r\n            ),\r\n        )\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\narray[index]\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Succeeds (replace empty lists with non-empty)</summary>\r\n\r\n```python3\r\narray = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([1, 3], dtype=np.int64)),\r\n        ak.layout.ListOffsetArray64(\r\n            ak.layout.Index64(np.array([0, 1, 2, 3], dtype=np.int64)),\r\n            ak.layout.NumpyArray(np.array([0, 1, 2], dtype=np.int64)),\r\n        ),\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\nindex = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([0, 2], dtype=np.int64)),\r\n        ak.layout.IndexedOptionArray64(\r\n            ak.layout.Index64(np.array([0, 1], dtype=np.int64)),\r\n            ak.layout.ListOffsetArray64(\r\n                ak.layout.Index64(np.array([0, 1, 2], dtype=np.int64)),\r\n                ak.layout.NumpyArray(np.array([0, 0], dtype=np.int64)),\r\n            ),\r\n        )\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\narray[index]\r\n```\r\n\r\n</details>",
  "closed_at":"2022-06-13T18:22:28Z",
  "comments":3,
  "created_at":"2022-04-11T12:33:11Z",
  "id":1199905879,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5HhRxX",
  "number":1406,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ListArray._getitem_next_jagged` fails for `slicecontent` where `starts[0] != 0` (v1 & v2)",
  "updated_at":"2022-06-13T18:22:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-11T14:56:44Z",
  "comments":5,
  "created_at":"2022-04-11T13:38:56Z",
  "draft":false,
  "id":1199991535,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42AMPb",
  "number":1407,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-11T14:56:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Windows builds stopped working; be looser about directory name.",
  "updated_at":"2022-04-11T22:09:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR fixes #1405 and revisits #1406\r\n\r\n- Add tests for #1405 \r\n- Fix test for #1406\r\n- Add v1 test for #1406\r\n- Fix `ListArray` slicing for v1 and v2 (separate cases)",
  "closed_at":"2022-09-01T00:13:14Z",
  "comments":21,
  "created_at":"2022-04-11T15:57:39Z",
  "draft":false,
  "id":1200184742,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42A059",
  "number":1408,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-01T00:13:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: jagged slicing for `ListArray`",
  "updated_at":"2022-09-01T00:13:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/pre-commit/pre-commit-hooks: v4.1.0 \u2192 v4.2.0](https://github.com/pre-commit/pre-commit-hooks/compare/v4.1.0...v4.2.0)\n- [github.com/asottile/pyupgrade: v2.31.1 \u2192 v2.32.0](https://github.com/asottile/pyupgrade/compare/v2.31.1...v2.32.0)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-04-11T20:52:34Z",
  "comments":1,
  "created_at":"2022-04-11T20:13:06Z",
  "draft":false,
  "id":1200481154,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42BxHk",
  "number":1409,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-11T20:52:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-04-11T20:52:34Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-14T21:47:27Z",
  "comments":1,
  "created_at":"2022-04-12T09:35:25Z",
  "draft":false,
  "id":1201523556,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42FbSj",
  "number":1410,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-14T21:47:27Z"
  },
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Removed bytemask() in favour of mask_as_bool()",
  "updated_at":"2022-04-14T21:47:27Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nllvmlite, which underlies Numba, has a shim layer that was used to transition away from a previous project called llvmpy. It was never documented, but Awkward's Numba implementation uses a lot of undocumented stuff, and I didn't recognize that `llvmlite.llvmpy` was a shim layer that is going away. Now it's being decremented: numba/llvmlite#826.\r\n\r\nFortunately, it will be easy: there are only two ways we depend on it.\r\n\r\n```bash\r\n% fgrep -r llvmpy src/\r\nsrc/awkward/_connect/_numba/builder.py:        ptr, llvmlite.llvmpy.core.Type.pointer(llvmlite.llvmpy.core.Type.int(8))\r\nsrc/awkward/behaviors/string.py:    import llvmlite.llvmpy.core\r\nsrc/awkward/behaviors/string.py:        llvmlite.llvmpy.core.Type.pointer(\r\nsrc/awkward/behaviors/string.py:            llvmlite.llvmpy.core.Type.int(numba.intp.bitwidth // 8)\r\nsrc/awkward/_v2/_connect/numba/builder.py:        ptr, llvmlite.llvmpy.core.Type.pointer(llvmlite.llvmpy.core.Type.int(8))\r\nsrc/awkward/_v2/behaviors/string.py:    import llvmlite.llvmpy.core\r\nsrc/awkward/_v2/behaviors/string.py:        llvmlite.llvmpy.core.Type.pointer(\r\nsrc/awkward/_v2/behaviors/string.py:            llvmlite.llvmpy.core.Type.int(numba.intp.bitwidth // 8)\r\n```\r\n\r\nAll instances of `llvmlite.llvmpy.core.Type.int` can be replaced with `llvmlite.ir.IntType` and all instances of `llvmlite.llvmpy.core.Type.pointer` can be replaced by `llvmlite.ir.PointerType`. See:\r\n\r\n```python\r\n>>> import llvmlite.llvmpy.core\r\n>>> import llvmlite.ir\r\n>>> llvmlite.ir.IntType(8) == llvmlite.llvmpy.core.Type.int(8)\r\nTrue\r\n>>> llvmlite.ir.PointerType(llvmlite.ir.IntType(8)) == llvmlite.llvmpy.core.Type.pointer(llvmlite.llvmpy.core.Type.int(8))\r\nTrue\r\n```\r\n\r\nThis will be really easy, and it can be done at any time before Numba drops `llvmlite.llvmpy` (i.e. it will work now; no reason to coordinate with Numba's release, but we do need to do it soon enough). In particular, we need to ensure that there's a (non-rc) 1.x version with this fix.",
  "closed_at":"2022-04-13T19:03:47Z",
  "comments":0,
  "created_at":"2022-04-12T15:57:38Z",
  "id":1202053655,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5HpeIX",
  "number":1411,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Use llvmlite.ir instead of llvmlite.llvmpy.core in Numba implementation",
  "updated_at":"2022-04-13T19:03:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"See https://github.com/conda-forge/awkward-feedstock/pull/81. This will also fix PyPI PyPy 3.9 users by bumping the embedded pybind11 to 2.9.2.\n\n- fix: include external pybind11\n- fix: bump pybind11 version (PyPy 3.9 support)\n",
  "closed_at":"2022-04-12T20:02:09Z",
  "comments":1,
  "created_at":"2022-04-12T19:22:46Z",
  "draft":false,
  "id":1202292117,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42IBkV",
  "number":1412,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-12T20:02:09Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: pypy 3.9",
  "updated_at":"2022-04-12T20:02:10Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"issue #1411 \r\n\r\nThis is my first PR and my first open source contribution. ",
  "closed_at":"2022-04-13T19:03:47Z",
  "comments":6,
  "created_at":"2022-04-13T02:14:08Z",
  "draft":false,
  "id":1202662374,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42JSZ9",
  "number":1413,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-13T19:03:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"replace llvmlite.ir instead of llvmlite.llvmpy.core",
  "updated_at":"2022-04-13T19:04:47Z",
  "user":"MDQ6VXNlcjMyMzQzMzY1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nOver in https://github.com/ContinuumIO/dask-awkward/issues/23 a user ran into the case where a record is treated as an iterable of strings. This might be fun in some cases, but I suspect most users would stumble upon this behaviour by accident when attempting. I propose that we add a special case to `__getitem__` to reject record indices. ",
  "closed_at":"2022-10-06T16:26:18Z",
  "comments":5,
  "created_at":"2022-04-13T14:53:04Z",
  "id":1203416351,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Huq0f",
  "number":1414,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Don't accept record as index",
  "updated_at":"2022-10-06T16:26:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-14T21:22:23Z",
  "comments":1,
  "created_at":"2022-04-13T17:34:05Z",
  "draft":false,
  "id":1203593032,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42MRUL",
  "number":1415,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-14T21:22:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Passing behaviour in ak._v2 functions",
  "updated_at":"2022-04-14T21:22:23Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Add @Ahmad-AlSubaie as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward-1.0/pull/1413#issuecomment-1098386255)",
  "closed_at":"2022-04-13T19:38:17Z",
  "comments":0,
  "created_at":"2022-04-13T19:04:43Z",
  "draft":false,
  "id":1203675820,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42Mi3T",
  "number":1416,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-13T19:38:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add Ahmad-AlSubaie as a contributor for code",
  "updated_at":"2022-04-13T19:38:18Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nAll of the following are fine because `array` has an `axis=0`, `axis=1`, `axis=2`:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak._v2.Array([[[1, 2, None], None], None])\r\n>>> ak._v2.is_none(array, axis=0).show()\r\n[False,\r\n True]\r\n>>> ak._v2.is_none(array, axis=1).show()\r\n[[False, True],\r\n None]\r\n>>> ak._v2.is_none(array, axis=2).show()\r\n[[[False, False, True], None],\r\n None]\r\n```\r\n\r\nBut this shouldn't be allowed to work:\r\n\r\n```python\r\n>>> ak._v2.is_none(array, axis=3).show()\r\n[[[1, 2, None], None],\r\n None]\r\n>>> ak._v2.is_none(array, axis=3)\r\n<Array [[[1, ...], ...], ...] type='2 * option[var * option[var * ?int64]]'>\r\n```\r\n\r\nThe output type isn't right, either: it should only ever be `bool` at the level of the `axis`.",
  "closed_at":"2022-07-08T19:19:36Z",
  "comments":0,
  "created_at":"2022-04-13T22:57:59Z",
  "id":1203864621,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5HwYQt",
  "number":1417,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak._v2.is_none should reject axis values that are too large",
  "updated_at":"2022-07-08T19:19:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-14T00:18:26Z",
  "comments":1,
  "created_at":"2022-04-13T23:48:57Z",
  "draft":false,
  "id":1203890232,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42NQuB",
  "number":1418,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-14T00:18:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix performance issue in v2 tolist.",
  "updated_at":"2022-04-14T00:18:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-14T01:42:47Z",
  "comments":1,
  "created_at":"2022-04-14T01:14:16Z",
  "draft":false,
  "id":1203930535,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42NY3p",
  "number":1419,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-14T01:42:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix iteration over NumpyArray type.",
  "updated_at":"2022-04-14T01:42:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\n```python\r\n\r\nimport numba\r\nimport awkward as ak\r\n\r\n\r\nbuilder = ak.ArrayBuilder()\r\n\r\n\r\n@numba.njit\r\ndef build():\r\n    builder.begin_list()\r\n    builder.begin_record()\r\n    for field_name in (\"x\", \"y\", \"z\"):\r\n        builder.field(field_name)\r\n        builder.integer(5)\r\n    builder.end_record()\r\n    builder.end_list()\r\n\r\n\r\nbuild()\r\nprint(builder.snapshot())\r\n```\r\n\r\nGives me the following error:\r\n\r\n```\r\nnumba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\n- Resolution failure for literal arguments:\r\nwrong number or types of arguments for ArrayBuilder.field\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.8.0/src/awkward/_connect/_numba/builder.py#L292)\r\n- Resolution failure for non-literal arguments:\r\nNone\r\n\r\nDuring: resolving callee type: BoundFunction(field for ak.ArrayBuilderType(None))\r\nDuring: typing of call at numbatest.py (15)\r\n\r\n\r\nFile \"numbatest.py\", line 15:\r\ndef build():\r\n    <source elided>\r\n    for field_name in (\"x\", \"y\", \"z\"):\r\n        builder.field(field_name)\r\n        ^\r\n```\r\n\r\nIt works if I write it like `builder.field(\"x\")` and remove the for loop, but I need the for loop because in practice I have a long list of fields I want to add.\r\n\r\nnumba version 0.54.1",
  "closed_at":null,
  "comments":9,
  "created_at":"2022-04-14T13:31:44Z",
  "id":1204535293,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Hy7_9",
  "number":1420,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Use ArrayBuilder::*_check in Numba for cases of non-literal strings",
  "updated_at":"2022-09-01T13:37:49Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-19T17:36:52Z",
  "comments":1,
  "created_at":"2022-04-14T22:06:25Z",
  "draft":false,
  "id":1205053101,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42Q7uO",
  "number":1421,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-19T17:36:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Enabled string/categorical behavior",
  "updated_at":"2022-04-19T17:36:53Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This also removes the excessive (and useless) list of functions from hidden modules in the left-bar.",
  "closed_at":"2022-04-15T16:45:56Z",
  "comments":2,
  "created_at":"2022-04-14T22:57:27Z",
  "draft":false,
  "id":1205087783,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42RCvC",
  "number":1422,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-15T16:45:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Update AwkwardForth documentation and move it from the wiki to the standard docs.",
  "updated_at":"2022-04-15T16:45:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nThis was the second half of #1375; I'm splitting it because it's really two issues.\r\n\r\nNow #1375 is just for applying the policy in v1, which will prevent bugs.\r\n\r\nThis issue is for extending the capability to what users really want\u2014allowing reducers to be overridden so that `ak.sum` on Vectors will add the Vectors (accounting for coordinate systems). It can only be done in v2.",
  "closed_at":"2023-05-19T12:11:00Z",
  "comments":1,
  "created_at":"2022-04-15T18:43:09Z",
  "id":1205790257,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5H3uYx",
  "number":1423,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Allow reducers to be overridden in v2",
  "updated_at":"2023-05-19T12:11:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Which documentation?\n\nTutorials site\n\n### What needs to be documented?\n\nhttps://awkward-array.org/how-to-convert-uproot.html#from-awkward-to-root-with-uproot-4\r\n\r\nis wrong: Uproot 4 does support writing Awkward Arrays (only certain types, but that would always be true). It needs to be updated because it's giving people the wrong impression.",
  "closed_at":"2022-10-31T20:41:35Z",
  "comments":4,
  "created_at":"2022-04-18T23:58:19Z",
  "id":1207567670,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5H-gU2",
  "number":1424,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Awkward tutorials site says that Uproot 4 does not write jagged arrays to ROOT files yet",
  "updated_at":"2022-10-31T20:56:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-19T01:30:49Z",
  "comments":1,
  "created_at":"2022-04-19T01:02:15Z",
  "draft":false,
  "id":1207596939,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42Y-P4",
  "number":1425,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-19T01:30:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix ak._v2.to_arrow for sliced ListOffsetArray.",
  "updated_at":"2022-04-19T01:30:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"(It could be, but this PR just fixes the error.)",
  "closed_at":"2022-04-19T15:40:20Z",
  "comments":0,
  "created_at":"2022-04-19T15:06:24Z",
  "draft":false,
  "id":1208499107,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42buAZ",
  "number":1426,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-19T15:40:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ListOffsetArray._reduce_next is not implemented for 32-bit.",
  "updated_at":"2022-04-19T15:40:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@ioanaif, this PR overlaps #1421, but it will probably be easy to merge. As it turns out, I needed to be able to broadcast string equality for a demo, so this just uncomments the code to do that. Your PR also has testing and the categorical behaviors.",
  "closed_at":"2022-04-19T16:39:02Z",
  "comments":0,
  "created_at":"2022-04-19T15:35:56Z",
  "draft":false,
  "id":1208534263,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42b1hY",
  "number":1427,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-19T16:39:02Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Enable broadcasting of string equality.",
  "updated_at":"2022-04-19T16:39:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-19T18:30:01Z",
  "comments":0,
  "created_at":"2022-04-19T18:00:48Z",
  "draft":false,
  "id":1208680364,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42cUgq",
  "number":1428,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-19T18:30:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implements ak.nan_to_none and all of the ak.nan* functions to override NumPy's.",
  "updated_at":"2022-04-19T18:30:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-28T15:18:45Z",
  "comments":13,
  "created_at":"2022-04-19T18:01:55Z",
  "draft":false,
  "id":1208681462,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42cUvi",
  "number":1429,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-28T15:18:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: is_unique() for IndexedArray",
  "updated_at":"2022-04-28T15:18:46Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"For example,\r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> expert_fields = ak.from_parquet(\"s3://pivarski-princeton/argo-floats-expert.parquet\", row_groups=[0])\r\n\r\n>>> print(expert_fields.type)\r\n10000 * {latitude: float64, longitude: float64, time: datetime64[us], levels: var * {pres: float32,\r\npres_adjusted: float32, pres_adjusted_error: float32, pres_adjusted_qc: string, pres_qc: string,\r\npsal: float32, psal_adjusted: float32, psal_adjusted_error: float32, psal_adjusted_qc: string,\r\npsal_qc: string, temp: float32, temp_adjusted: float32, temp_adjusted_error: float32,\r\ntemp_adjusted_qc: string, temp_qc: string}, config_mission_number: int32, cycle_number: int32,\r\ndata_centre: string, data_mode: string, data_state_indicator: string, dc_reference: string,\r\ndirection: string, firmware_version: string, float_serial_no: string, pi_name: string,\r\nplatform_number: int32, platform_type: string, positioning_system: string, position_qc: string,\r\nprofile_pres_qc: string, profile_psal_qc: string, profile_temp_qc: string, project_name: string,\r\ntime_location: datetime64[us], time_qc: string, vertical_sampling_scheme: string, wmo_inst_type: int16}\r\n\r\n>>> expert_fields.type.show()\r\n10000 * {\r\n    latitude: float64,\r\n    longitude: float64,\r\n    time: datetime64[us],\r\n    levels: var * {\r\n        pres: float32,\r\n        pres_adjusted: float32,\r\n        pres_adjusted_error: float32,\r\n        pres_adjusted_qc: string,\r\n        pres_qc: string,\r\n        psal: float32,\r\n        psal_adjusted: float32,\r\n        psal_adjusted_error: float32,\r\n        psal_adjusted_qc: string,\r\n        psal_qc: string,\r\n        temp: float32,\r\n        temp_adjusted: float32,\r\n        temp_adjusted_error: float32,\r\n        temp_adjusted_qc: string,\r\n        temp_qc: string\r\n    },\r\n    config_mission_number: int32,\r\n    cycle_number: int32,\r\n    data_centre: string,\r\n    data_mode: string,\r\n    data_state_indicator: string,\r\n    dc_reference: string,\r\n    direction: string,\r\n    firmware_version: string,\r\n    float_serial_no: string,\r\n    pi_name: string,\r\n    platform_number: int32,\r\n    platform_type: string,\r\n    positioning_system: string,\r\n    position_qc: string,\r\n    profile_pres_qc: string,\r\n    profile_psal_qc: string,\r\n    profile_temp_qc: string,\r\n    project_name: string,\r\n    time_location: datetime64[us],\r\n    time_qc: string,\r\n    vertical_sampling_scheme: string,\r\n    wmo_inst_type: int16\r\n}\r\n```",
  "closed_at":"2022-04-19T20:28:09Z",
  "comments":1,
  "created_at":"2022-04-19T19:56:27Z",
  "draft":false,
  "id":1208800014,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42cqnR",
  "number":1430,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-19T20:28:09Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Pretty-printing types",
  "updated_at":"2022-04-19T20:28:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-19T23:34:51Z",
  "comments":1,
  "created_at":"2022-04-19T22:55:47Z",
  "draft":false,
  "id":1208941667,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42dI4K",
  "number":1431,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-19T23:34:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed miscellaneous optiontype-in-Parquet bugs",
  "updated_at":"2022-04-19T23:34:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-20T00:44:07Z",
  "comments":1,
  "created_at":"2022-04-19T23:38:07Z",
  "draft":false,
  "id":1208971499,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42dPRg",
  "number":1432,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-20T00:44:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Register both v1 and v2 Arrays in Numba entry_points.",
  "updated_at":"2022-04-20T00:44:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-20T01:25:27Z",
  "comments":1,
  "created_at":"2022-04-20T00:52:44Z",
  "draft":false,
  "id":1209025530,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42dZlH",
  "number":1433,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-20T01:25:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add Array and Record.__delitem__. And fix show(type=True).",
  "updated_at":"2022-04-20T01:25:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-20T13:24:32Z",
  "comments":1,
  "created_at":"2022-04-20T10:33:18Z",
  "draft":false,
  "id":1209495399,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42e1vl",
  "number":1434,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-20T13:24:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Enable categorical behavior - testing",
  "updated_at":"2022-04-20T13:24:33Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"I noticed when using the new `from_parquet` (implemented in `awkward._v2.operations.convert`) that the top level `awkward._v2` namespace imports the parquet read/write functions twice.",
  "closed_at":"2022-04-20T18:25:18Z",
  "comments":4,
  "created_at":"2022-04-20T15:16:09Z",
  "draft":false,
  "id":1209835669,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42f9GM",
  "number":1435,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-20T18:25:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove duplicated import of to/from-parquet",
  "updated_at":"2022-04-20T18:25:18Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\n1.8.0\r\n\r\n### Description and code to reproduce\r\n\r\nI'm not 100% sure whether this is a problem with `awkward` or with `uproot`. I'm using the following example code to store a subset of TTree branches to a Parquet file, using either `.arrays()` or `uproot.lazy()` via an HTTP URL:\r\n\r\n```python\r\nimport time\r\n\r\nimport uproot\r\nimport awkward as ak\r\n\r\nurl = 'http://xrootd-local.unl.edu:1094//store/user/AGC/datasets/RunIIFall15MiniAODv2/TT_TuneCUETP8M1_13TeV-powheg-pythia8/MINIAODSIM//PU25nsData2015v1_76X_mcRun2_asymptotic_v12_ext3-v1/00000/00DF0A73-17C2-E511-B086-E41D2D08DE30.root:events'\r\nn_branches = 1\r\n\r\nstart = time.time()\r\ntree = uproot.open(url)\r\nbranches = tree.keys()[:n_branches]\r\narray = tree.arrays(branches)\r\nak.to_parquet(array, 'array.parquet')\r\nend = time.time()\r\nprint(f'arrays() with {n_branches=}: {round(end - start, 2)} s')\r\n\r\nstart = time.time()\r\nlazy_array = uproot.lazy(url)\r\nak.to_parquet(lazy_array[branches], 'lazy_array.parquet')\r\nend = time.time()\r\nprint(f'lazy() with {n_branches=}: {round(end - start, 2)} s')\r\n```\r\n\r\nWith `n_branches` set to `1`, I get roughly comparable performance between these two methods, which is what I would always expect:\r\n\r\n```\r\narrays() with n_branches=1: 3.9 s\r\nlazy() with n_branches=1: 5.66 s\r\n```\r\n\r\nIf the number of branches is increased, however, the `lazy()` path takes much longer:\r\n\r\n```\r\narrays() with n_branches=10: 4.04 s\r\nlazy() with n_branches=10: 32.09 s\r\n```\r\n\r\nThis seems to continue to scale very close to linearly with the number of branches:\r\n\r\n```\r\narrays() with n_branches=50: 5.99 s\r\nlazy() with n_branches=50: 152.94 s\r\n```\r\n\r\nNotably, I don't see this behavior with local files or `root:` URLs.",
  "closed_at":"2022-04-22T15:37:58Z",
  "comments":7,
  "created_at":"2022-04-20T15:23:38Z",
  "id":1209845563,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5IHMc7",
  "number":1436,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.to_parquet` very slow on `uproot.lazy()` output with multiple branches via HTTP",
  "updated_at":"2022-04-22T15:37:59Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-22T15:21:08Z",
  "comments":1,
  "created_at":"2022-04-21T13:01:07Z",
  "draft":false,
  "id":1211007035,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42jsGu",
  "number":1437,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-22T15:21:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Enable mixins behavior",
  "updated_at":"2022-04-22T15:21:09Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I'm astonished: it's weird that I would just forget that. But it does explain why `append` isn't overloaded to cover it. Probably the feature was added later and the ArrayBuilder-in-Numba implementation is just behind the times?\r\n\r\n```python\r\n>>> import numba as nb\r\n>>> import awkward as ak\r\n>>> @nb.njit\r\n... def add_a_string(builder, string):\r\n...     builder.string(string)\r\n...     return builder\r\n... \r\n>>> builder = add_a_string(ak.ArrayBuilder(), \"hello\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/mambaforge/lib/python3.9/site-packages/numba/core/dispatcher.py\", line 468, in _compile_for_args\r\n    error_rewrite(e, 'typing')\r\n  File \"/home/jpivarski/mambaforge/lib/python3.9/site-packages/numba/core/dispatcher.py\", line 409, in error_rewrite\r\n    raise e.with_traceback(None)\r\nnumba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nUnknown attribute 'string' of type ak.ArrayBuilderType(None)\r\n\r\nFile \"<stdin>\", line 3:\r\n<source missing, REPL/exec in use?>\r\n\r\nDuring: typing of get attribute at <stdin> (3)\r\n\r\nFile \"<stdin>\", line 3:\r\n<source missing, REPL/exec in use?>\r\n```\r\n\r\nIndeed: it's missing. Also, I don't see it in either the v1 or the v2 implementation.\r\n\r\nThis should be a separate issue: ArrayBuilder-in-Numba is missing `string` and `bytestring`, and possibly other new methods (`complex`? `datetime`?). Fortunately, we know what the interface is _supposed_ to be: it's supposed to be the same as outside of Numba, the ArrayBuilder Python interface.\r\n\r\n(BTW: ArrayBuilder-in-Numba's lack of context managers `list`, `record`, and `tuple` is known because it's waiting on context managers as a feature from Numba, but it sounds like this will be implemented soon, and Awkward Array will be a first use-case.)\r\n\r\n_Originally posted by @jpivarski in https://github.com/scikit-hep/awkward-1.0/issues/1420#issuecomment-1105476531_",
  "closed_at":"2022-10-31T20:40:10Z",
  "comments":3,
  "created_at":"2022-04-21T18:59:16Z",
  "id":1211436531,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5INQ3z",
  "number":1438,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ArrayBuilder in Numba is missing some methods, such as 'string'",
  "updated_at":"2022-10-31T20:40:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Unless explicitly overridden, ufuncs are not supposed to work on records. In v1:\r\n\r\n```python\r\n>>> array = ak.Array([{\"x\": 1.0, \"y\": 1.1}, {\"x\": 2.0, \"y\": 2.2}])\r\n>>> np.absolute(array)\r\nTraceback (most recent call last):\r\n...\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_util.py\", line 1058, in apply\r\n    raise ValueError(\r\nValueError: cannot broadcast records in this type of operation\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.9.0rc2/src/awkward/_util.py#L1060)\r\n```\r\n\r\n(that's good), but in v2:\r\n\r\n```python\r\n>>> array = ak._v2.Array([{\"x\": 1.0, \"y\": 1.1}, {\"x\": 2.0, \"y\": 2.2}])\r\n>>> np.absolute(array)\r\n<Array [{x: 1, y: 1.1}, {x: 2, ...}] type='2 * {x: float64, y: float64}'>\r\n```\r\n\r\n(that's bad).\r\n\r\nIn v1, this was issue #457 and PR #510, which added:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/779819e0405cd481dbae0976fc311f2f1d91d9b5/src/awkward/_util.py#L1057-L1061\r\n\r\nIt looks like the check was copied into v2:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/779819e0405cd481dbae0976fc311f2f1d91d9b5/src/awkward/_v2/_broadcasting.py#L653-L656\r\n\r\nbut it's not being triggered in the above example for some reason.\r\n\r\n_Originally posted by @jpivarski in https://github.com/scikit-hep/awkward-1.0/pull/1437#discussion_r856339232_\r\n",
  "closed_at":"2022-07-28T15:40:39Z",
  "comments":0,
  "created_at":"2022-04-22T15:28:26Z",
  "id":1212501563,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5IRU47",
  "number":1439,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ufuncs on records should not be allowed unless they are explicitly overridden.",
  "updated_at":"2022-07-28T15:40:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-26T20:32:58Z",
  "comments":6,
  "created_at":"2022-04-22T20:49:42Z",
  "draft":false,
  "id":1212765870,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42pUK4",
  "number":1440,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-26T20:32:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implementing ak._v2.to_parquet.",
  "updated_at":"2022-04-28T15:11:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nWhen an array contains such content that the point where the cutoff happens in the repr aligns with the end of a level of \"indentation\", the corresponding bracket does not appear and a comma appears in its place. This can make the array appear to have a different shape than it does:\r\n```python\r\n$ ipython\r\nPython 3.9.12 | packaged by conda-forge | (main, Mar 24 2022, 23:24:38)\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 8.2.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: import awkward as ak\r\n\r\nIn [2]: ak.from_iter([[0.08, -0.08], [0.01882, -0.01882]])\r\nOut[2]: <Array [[0.08, -0.08], [0.0188, -0.0188]] type='2 * var * float64'>\r\n\r\nIn [3]: ak.from_iter([[0.0808, -0.0808], [0.01882, -0.01882]])\r\nOut[3]: <Array [[0.0808, -0.0808, ... 0.0188, -0.0188]] type='2 * var * float64'>\r\n```\r\n\r\nEverything looks normal in the first example. In the second example, the bracket after `-0.0808` is replaced by a comma. The comma then to me look as if there were additional values following at the same level of indentation.\r\n\r\nI ran into this while looking at how an array changed after dividing it by some number. The repr made it seem like the shape had changed during the division. Certainly an edge case though!\r\n\r\nI am unsure whether much can be done here in general. One idea I had was to allow the repr to be longer such that all brackets that would appear next do not get cut off: ensuring that the cut-off doesn't happen when indentation levels change, but only when the next object at a given level of indentation would appear.\r\n\r\nIn my case at least, looking at arrays frequently happens in the context of reshaping operations, as a way to ensure the shape comes out correctly. This edge case might cause confusion in these scenarios. Related: https://github.com/scikit-hep/awkward-1.0/issues/1281, configurable print options can also solve this.",
  "closed_at":"2022-04-23T23:50:19Z",
  "comments":3,
  "created_at":"2022-04-23T21:14:54Z",
  "id":1213456226,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5IU99i",
  "number":1441,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Improve potentially misleading array repr cut-off for multi-dimensional arrays",
  "updated_at":"2022-04-24T00:46:43Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Cutting out some unnecessary stuff based on our conversation, as well as listing all the file handling cases we should support.",
  "closed_at":"2022-06-30T17:35:59Z",
  "comments":3,
  "created_at":"2022-04-25T20:54:14Z",
  "draft":true,
  "id":1215034062,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42wQZE",
  "number":1442,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"from_parquet: simplify and add cases as todo",
  "updated_at":"2022-06-30T17:46:37Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-28T13:21:38Z",
  "comments":1,
  "created_at":"2022-04-26T11:32:40Z",
  "draft":false,
  "id":1215819822,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42y2tj",
  "number":1443,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-28T13:21:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Enable ak.firsts ",
  "updated_at":"2022-04-28T13:21:38Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-28T13:52:46Z",
  "comments":3,
  "created_at":"2022-04-26T11:34:33Z",
  "draft":false,
  "id":1215821972,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42y3Lk",
  "number":1444,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-28T13:52:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Enable ak.singletons",
  "updated_at":"2022-04-28T13:52:47Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-04-29T15:04:14Z",
  "comments":1,
  "created_at":"2022-04-26T11:35:28Z",
  "draft":false,
  "id":1215823032,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42y3aT",
  "number":1445,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-29T15:04:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Pass on skipped v2 tests",
  "updated_at":"2022-04-29T15:04:15Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"* Add more tests and automate checks\r\n* Add a lock when generating the c++ code\r\n* Hold a reference to the associated lookups so that the data cannot go out of scope as long as the datasource survives",
  "closed_at":"2022-05-02T02:07:08Z",
  "comments":4,
  "created_at":"2022-04-27T10:36:08Z",
  "draft":false,
  "id":1217160919,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws423V-y",
  "number":1446,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-02T02:07:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"awkward rdataframe source tests",
  "updated_at":"2022-05-02T02:07:09Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-05-18T15:21:17Z",
  "comments":3,
  "created_at":"2022-04-27T13:08:35Z",
  "draft":false,
  "id":1217336407,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws42378i",
  "number":1447,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-18T15:21:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This PR attempts to add autodifferentiation support for Awkward Arrays using JAX pytrees.",
  "updated_at":"2022-09-23T00:49:22Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-05-17T14:05:12Z",
  "comments":10,
  "created_at":"2022-04-27T14:11:51Z",
  "draft":true,
  "id":1217420377,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws424OKX",
  "number":1448,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"rdataframe to awkward",
  "updated_at":"2022-09-23T00:49:26Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Reading and writing are not symmetric. `to_json` goes through Python's `json` module because Arrays/Records can have lots of overloaded behaviors and users will expect it to behave like `to_list`. (Fortunately, `to_list` has recently been optimized.) `from_json` will go through RapidJSON because it's faster and can handle streaming data, for file-like objects representing remote files. This is possible because the input is just text, not Python objects with possible behaviors.\r\n\r\nThus, reading may be much faster than writing, but there are good reasons for that. The arguments for circumventing non-JSON serializable data should match, however, and permit round-trip data, especially when a JSONSchema is provided.\r\n\r\n- [x] Consolidate `ak._v2.to_json` and `ak._v2.to_json_file` into a single function that can:\r\n   - send data to a string or a file (including `fsspec` if it has a URI scheme)\r\n   - be line-delimited or not\r\n   - handle Arrays and Records\r\n   - converts non-JSON serializable data with composable options (e.g. both complex and NaN/infinite)\r\n   - goes through the same code as `ak._v2.to_list` (so more maintainable)\r\n- [ ] Add `ak._v2.to_json_schema` to make a JSONSchema from a type or an array's type. (Completely new function.)\r\n- [ ] Temporarily turn off `ak._v2.from_json` and `ak._v2.from_json_file`.\r\n- [ ] (Re)-implement a reader from RapidJSON that can:\r\n   - take a string or a Python object with a `read(num_bytes)` method\r\n   - be line-delimited or not\r\n   - handle Arrays and Records\r\n   - applies the non-JSON deserialization options in a way that mirrors the above (i.e. allows composable round-trips) as a post-processing step (so that the same transformation can be applied to data read with a JSONSchema)\r\n- [ ] Update the JSONSchema-enabled reader to be usable in the same way, namely\r\n   - take a string or a Python object with a `read(num_bytes)` method\r\n   - be line-delimited or not\r\n   - handle Arrays and Records\r\n- [ ] Reenable `ak._v2.from_json` as a single function that\r\n   - takes `data` as a string, `pathlib.Path` filename, passes URIs through `fsspec`, or a file-like object\r\n   - has the same `line_delimited` option as `ak._v2.to_json`\r\n   - has a `schema` option, which is passed through `json.loads` if it's a string\r\n   - and all the non-JSON deserialization workaround arguments",
  "closed_at":"2022-05-03T16:57:58Z",
  "comments":7,
  "created_at":"2022-04-27T18:41:10Z",
  "draft":false,
  "id":1217744991,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws425SaE",
  "number":1449,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-03T16:57:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Revamping the to_json/from_json interface.",
  "updated_at":"2022-05-03T16:57:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The variable named `row_group_number` is not strictly right because the writer might write more than one row group in a call. It should be named `iteration_number`.\r\n\r\n_Originally posted by @jpivarski in https://github.com/scikit-hep/awkward-1.0/issues/1440#issuecomment-1112329220_",
  "closed_at":"2022-08-15T18:29:55Z",
  "comments":1,
  "created_at":"2022-04-28T15:11:43Z",
  "id":1218881090,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5IpqZC",
  "number":1450,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak._v2.to_parquet: `row_group_number` is not strictly right",
  "updated_at":"2022-08-15T18:29:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Description of new feature\n\nThis came up while working on behavior compatibility with `dask-awkward`.\r\n\r\n**TLDR**: It would be useful to have some registry of methods originating from behaviors that are available to an array _collection_ (likely through its typetracer array).\r\n\r\n---\r\n\r\nMore explanation:\r\n\r\nI'll use the muons dataset as an example. This will be reproducible with the following (with the latest version of `awkward` installed:\r\n```\r\n$ pip install git+https://github.com/ContinuumIO/dask-awkward@main\r\n$ pip install fsspec s3fs\r\n```\r\n\r\n```python\r\n>>> import numpy as np\r\n>>> import awkward._v2 as ak\r\n>>> import dask_awkward as dak\r\n>>> ds = dak.from_json(\"s3://ddavistemp/compressed_json/higgs.00*\", storage_options={\"anon\": True})\r\n>>> ds\r\ndask.awkward<from-json, npartitions=10>\r\n```\r\nWe have a dataset (`ds`) with 10 partitions (from 10 files). Let's make a `muons` array which gives us pairs of muons, and then make some muon record arrays:\r\n```python\r\n>>> muons = ds.muons[dak.num(ds.muons, axis=1) == 2]\r\n>>> mu1 = muons[:, 0]\r\n>>> mu2 = muons[:, 1]\r\n>>> mu1._meta\r\n<Array-typetracer type='?? * {pt: float64, eta: float64, phi: float64, mass...'>\r\n```\r\n\r\n let's define some behaviors:\r\n\r\n```python\r\n>>> class Muon(ak.Record):\r\n...     pass\r\n... \r\n>>> class MuonArray(ak.Array):\r\n...     def mass_with(self, mu2):\r\n...         return np.sqrt(\r\n...             self.pt\r\n...             * mu2.pt\r\n...             * 2\r\n...             * (np.cosh(self.eta - mu2.eta) - np.cos(self.phi - mu2.phi))\r\n...         )\r\n...\r\n>>> ak.behavior[\"muon\"] = Muon\r\n>>> ak.behavior[\"*\", \"muon\"] = MuonArray\r\n```\r\n\r\nFirst, the good stuff. As expected, everything works with the typetracer:\r\n```python\r\n>>> ak.Array(mu1._meta, with_name=\"muon\")\r\n<MuonArray-typetracer type='?? * muon[pt: float64, eta: float64, phi: float...'>\r\n```\r\nwe can use our `mass_with` method:\r\n```python\r\n>>> ak.Array(mu1._meta, with_name=\"muon\").mass_with(mu2._meta)\r\n<Array-typetracer type='?? * float64'>\r\n```\r\nLet's try to give the behavior to the actual collection, we can use map partitions with a lambda:\r\n```python\r\n>>> muons_withbehavior = dak.map_partitions(\r\n...    lambda x, name: ak.Array(x, with_name=name),\r\n...    muons,\r\n...    \"muon\",\r\n.... )\r\n```\r\nIf we check the typetracer of this new collection we'll get (as expected) a `MuonArray` typetracer:\r\n```python\r\n>>> muons_withbehavior._meta\r\n<MuonArray-typetracer type='?? * var * muon[pt: float64, eta: float64, phi:...'>\r\n```\r\nSame thing if we grab the individual muons again:\r\n```python\r\n>>> mu1_wb = muons_withbehavior[:, 0]\r\n>>> mu2_wb = muons_withbehavior[:, 1]\r\n>>> mu1_wb._meta\r\n<MuonArray-typetracer type='?? * muon[pt: float64, eta: float64, phi: float...'>\r\n```\r\nThe method can be used with the typetracer:\r\n```python\r\n>>> mu1_wb._meta.mass_with(mu2._meta)\r\n<Array-typetracer type='?? * float64'>\r\n```\r\nAnd finally, if we compute this new collection we'll get (as expected) a `MuonArray`:\r\n```python\r\n>>> muons_withbehavior.compute()\r\n<MuonArray [...] type='18333 * var * muon[pt: float64, eta: float64, phi: f...'>\r\n```\r\nThe (expected) problem surfaces if we try to use the method on the collection. The collection doesn't know about `mass_with()`:\r\n```python\r\n>>> mu1_wb.mass_with(mu2_wb)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/ddavis/software/repos/dask-awkward/src/dask_awkward/core.py\", line 744, in __getattr__\r\n    raise AttributeError(f\"{attr} not in fields.\")\r\nAttributeError: mass_with not in fields.\r\n```\r\n\r\nA kind of brute force solution (we'll use the shorthand `tt` as an array's typetracer):\r\n\r\n\r\n\r\n```python\r\n>>> tt = mu1_wb._meta\r\n>>> possible_methods = set(dir(tt)) - set(tt.fields) - set(dir(ak.Array))\r\n>>> possible_methods\r\n{'__self_class__', '_layout', 'mass_with', '__self__', '_behavior', '__thisclass__', '_numbaview', '__get__'}\r\n\r\n```\r\nUpon calling `dak.Array.__getattr__` we can do the above check and then filter this `possible_methods` set logic such that we move anything with a leading underscore, then we can do a `map_partitions` which calls the known \"good\" method on each node. example:\r\n```python\r\n>>> getattrarg = \"mass_with\"\r\n>>> possible_methods = list(filter(lambda x: not x.startswith(\"_\"), possible_methods))\r\n>>> if getattrarg in possible_methods:\r\n...     f = lambda mu1, mu2, a: getattr(mu1, a)(mu2)\r\n...     m = dak.map_partitions(f, mu1_wb, mu2_wb, getattrarg)\r\n... \r\n>>> m\r\ndask.awkward<lambda, npartitions=10>\r\n>>> m.compute()\r\n<Array [36.9, 22.9, 70.1, 59.8, ..., 83.3, 62.3, 90.9] type='18333 * float64'>\r\n\r\n```\r\nAnd it works (but only because in the collection we've added a step to the task graph which \"behaviorized\" on a node before this last map partitions call, we'll likely want a way to automate this step).\r\n\r\nAnyway, in conclusion this whole story led @martindurant and I to think it would nice to have direct access to known methods provided by a behavior class, and go straight to the map partitions without the logic to figure out if the method _may_ exist.\r\n\r\nAnother thing we thought a little bit about was syncing behaviors (or passing) to workers in a distributed cluster, but I'll leave that for another issue/discussion \ud83d\ude04 ",
  "closed_at":"2022-11-10T22:37:37Z",
  "comments":10,
  "created_at":"2022-04-28T21:19:13Z",
  "id":1219309807,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5IrTDv",
  "number":1452,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Registry of methods attached to an Array due to its behavior",
  "updated_at":"2023-02-15T19:10:29Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nThis is an issue we technically already know about, at least off-hand. However, I wanted to track it here so that we don't forget it.\r\n\r\nLike #1414, we should either error on `to_buffers`, or handle this case. I believe we don't implement a form for a singular record, so the logical conclusion is to raise a `TypeError` here.\r\n\r\nIn the long run, I feel like it might be useful to be able to support singular records, but adding a new form is a bit more work than raising an Exception for now.",
  "closed_at":"2022-04-29T21:02:19Z",
  "comments":2,
  "created_at":"2022-04-29T07:41:58Z",
  "id":1220126962,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Iuajy",
  "number":1453,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`to_layout` lets record cases slip through to the handler for generic iterators when `allow_records=False` (v1 and v2)",
  "updated_at":"2022-04-29T21:02:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.4.0 to 2.5.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>2.5.0</h2>\n<ul>\n<li>\u2728 Added support for building ABI3 wheels. cibuildwheel will now recognise when an ABI3 wheel was produced, and skip subsequent build steps where the previously built wheel is compatible. Tests still will run on all selected versions of Python, using the ABI3 wheel. Check <a href=\"https://cibuildwheel.readthedocs.io/en/stable/faq/#abi3\">this entry</a> in the docs for more info. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1091\">#1091</a>)</li>\n<li>\u2728 You can now build wheels directly from sdist archives, in addition to source directories. Just call cibuildwheel with an sdist argument on the command line, like <code>cibuildwheel mypackage-1.0.0.tar.gz</code>. For more details, check the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#command-line\"><code>--help</code> output</a> (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1096\">#1096</a>)</li>\n<li>\ud83d\udc1b Fix a bug where cibuildwheel would crash when no builds are selected and <code>--allow-empty</code> is passed (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1086\">#1086</a>)</li>\n<li>\ud83d\udc1b Workaround a permissions issue on Linux relating to newer versions of git and setuptools_scm (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1095\">#1095</a>)</li>\n<li>\ud83d\udcda Minor docs improvements</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.5.0</h3>\n<p><em>29 April 2022</em></p>\n<ul>\n<li>\u2728 Added support for building ABI3 wheels. cibuildwheel will now recognise when an ABI3 wheel was produced, and skip subsequent build steps where the previously built wheel is compatible. Tests still will run on all selected versions of Python, using the ABI3 wheel. Check <a href=\"https://cibuildwheel.readthedocs.io/en/stable/faq/#abi3\">this entry</a> in the docs for more info. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1091\">#1091</a>)</li>\n<li>\u2728 You can now build wheels directly from sdist archives, in addition to source directories. Just call cibuildwheel with an sdist argument on the command line, like <code>cibuildwheel mypackage-1.0.0.tar.gz</code>. For more details, check the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#command-line\"><code>--help</code> output</a> (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1096\">#1096</a>)</li>\n<li>\ud83d\udc1b Fix a bug where cibuildwheel would crash when no builds are selected and <code>--allow-empty</code> is passed (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1086\">#1086</a>)</li>\n<li>\ud83d\udc1b Workaround a permissions issue on Linux relating to newer versions of git and setuptools_scm (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1095\">#1095</a>)</li>\n<li>\ud83d\udcda Minor docs improvements</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/0b6307072a15a35debbb73215c012cf29c672908\"><code>0b63070</code></a> Bump version: v2.5.0</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/61bcac854ef478a0b0b8b8fe4628546b5a5ed74f\"><code>61bcac8</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1091\">#1091</a> from mayeut/abi3</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/75998410e05a2e00ff2d842ed2590830fc600b99\"><code>7599841</code></a> Add tips+tricks entry for ABI3 building</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/46702f581da2dde13ea3d2a49dfa55df226db9f8\"><code>46702f5</code></a> Space out the log statements a little</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/acc079675bc26aa15d7f5269be745d75ebaa2c24\"><code>acc0796</code></a> Merge remote-tracking branch 'origin/main' into abi3</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/f324c9ad6106ac8d3c11f5eb64d2a39a300e3fe7\"><code>f324c9a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1096\">#1096</a> from henryiii/henryiii/feat/sdist</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/de44c88c753da5f13a7806c0812834b20d7e6ce2\"><code>de44c88</code></a> docs: add some projects (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1097\">#1097</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/35054666bb542eae0525c59941562ab785989cfc\"><code>3505466</code></a> refactor: review comments</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/b1e8549bb1a7d32a21f98c2ae9167a5d4b72ee83\"><code>b1e8549</code></a> fix: minor cleanup</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/958a7c32c1da6cc8adf50613e56eab75b1cb2e88\"><code>958a7c3</code></a> refactor: use single entry for SDist builds</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.4.0...2.5.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.4.0&new-version=2.5.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-04-29T18:33:48Z",
  "comments":1,
  "created_at":"2022-04-29T17:36:03Z",
  "draft":false,
  "id":1221333737,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43FzcH",
  "number":1455,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-29T18:33:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump pypa/cibuildwheel from 2.4.0 to 2.5.0",
  "updated_at":"2022-04-29T18:33:49Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-04-29T21:02:20Z",
  "comments":1,
  "created_at":"2022-04-29T20:18:54Z",
  "draft":false,
  "id":1221481972,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43GS1y",
  "number":1456,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-04-29T21:02:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes `to_layout` with `allow_records=False` and allows single-record writing to Arrow and Parquet",
  "updated_at":"2022-04-29T21:02:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-05-02T22:00:26Z",
  "comments":1,
  "created_at":"2022-05-02T21:29:34Z",
  "draft":false,
  "id":1223383174,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43MXpj",
  "number":1457,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-02T22:00:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix RDataFrame GetColumnNames order in test.",
  "updated_at":"2022-05-02T22:00:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-05-02T22:41:29Z",
  "comments":1,
  "created_at":"2022-05-02T22:02:09Z",
  "draft":false,
  "id":1223406118,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43Mcds",
  "number":1458,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-02T22:41:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Streamline recursively_apply for small slices of big arrays.",
  "updated_at":"2022-05-02T22:41:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nHej Jim, thanks for the nice package. \r\n\r\nI encountered a strange behavior when making a histogram of a masked Awkward Array. I am not sure if the issue arises from awkward or numpys masked arrays (or maybe even both). When converting the awkward.array into a numpy.masked array the entries for the masked fields change. In addition when making the histogram of the masked array it looks like that the masked values are not removed before making the histogram (while they are removed when using other numpy functions like `np.sum`).\r\n\r\nI made a short video to illustrate the issue. \r\n\r\nhttps://user-images.githubusercontent.com/43881800/166879012-6057a1af-c379-4ac2-9889-7b2e142f401b.mp4\r\n\r\nBelow you can find the code used in the video:\r\n\r\n```\r\nimport numpy as np\r\nimport awkward as ak\r\nimport pickle\r\nimport sys\r\nprint(sys.version, ak.__version__, np.__version__)\r\n\r\n# Load and prepare data:\r\nwith open(\"test_data_awkward_numpy_bug\", \"rb\") as fp:   # Unpickling\r\n    list_root = pickle.load(fp)\r\n\r\ntest_data = ak.Array(list_root)\r\nfirst_photon = ak.min(test_data['pmthitTime'], axis=1)\r\nfirst_photon = first_photon * 10**9\r\ntest_mask = (test_data['nNVpmthits'] >= 300 ) & (test_data['nNVpmthits'] < 700)\r\ntest_mask = test_mask & (first_photon < 20)\r\n\r\n# Bug observed in awkward arrays using numpy.ma.core.MaskedArray \r\n# No sure if the bug is in awkward or numpy.\r\nt = ak.to_numpy(test_data['nNVpmthits'][test_mask])\r\nprint(t[:20])\r\nprint(t.data[:20])\r\na, _ = np.histogram(t, bins=100, range=(0, 1500))\r\nb, _ = np.histogram(t.data[~t.mask], bins=100, range=(0, 1500))\r\nprint(a)\r\nprint(b)\r\n```\r\n\r\nI also made a pickle file of the used data:\r\n\r\n[test_data_awkward_numpy_bug.zip](https://github.com/scikit-hep/awkward-1.0/files/8629433/test_data_awkward_numpy_bug.zip)\r\n\r\n",
  "closed_at":"2022-05-05T11:03:27Z",
  "comments":8,
  "created_at":"2022-05-05T07:40:16Z",
  "id":1226304346,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5JF-ta",
  "number":1459,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Masking and binning awkward.highlevel.Array leads to wrong results",
  "updated_at":"2022-05-05T15:17:20Z",
  "user":"MDQ6VXNlcjQzODgxODAw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\n## The bug :bug:\r\nIn #1459 I noticed that `ak.ravel(masked_array)` does not match `np.ravel(masked_array)` for a NumPy `masked_array`. \r\n\r\nAn example:\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\n\r\narray = np.ma.array(\r\n    np.random.random(size=(10, 3)),\r\n   mask=np.random.randint(0, 2, size=(10, 3)).astype(np.bool_)\r\n)\r\n\r\nassert np.ravel(array).tolist() == ak.ravel(array).tolist()\r\n```\r\n\r\n## Why is this a bug? :question: \r\nI think this is a problem, because we try to make NumPy functions on `NumpyArray`s behave as they do in regular NumPy. Given that we explicitly handle the `masked_array` type in our codebase (converting it to a `ByteMaskedArray`), I assert that we should also expect the same to happen for masked arrays.\r\n\r\n## What should we do here? :mag_right: \r\nWhilst I think we do want to drop `None` values that are non-leaf (this level of structure is erased anyway, so keeping `None` values seems pointless), I don't think we necessarily want to lose those at the leaves unless we want to break NumPy compatibility. \r\n\r\nThe existing behaviour in `ak.ravel` _is_ useful, though, particularly when using histograms. So, I think we might want this to be an option to `ak.ravel`, e.g. `ak.ravel(drop_nones=True)`. \r\n\r\nI'd be interested in hearing other people's thoughts here.\r\n",
  "closed_at":"2022-10-25T20:19:56Z",
  "comments":3,
  "created_at":"2022-05-05T09:44:33Z",
  "id":1226444335,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5JGg4v",
  "number":1460,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.ravel` doesn't mirror `np.ravel` for `None` leaf values",
  "updated_at":"2022-10-25T20:19:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nPrompted by Dask needs (discussion with @martindurant and @douglasdavis), but probably a good idea overall. Losing behaviors is a common type of error and users should get more direct messaging about what (likely) happened.",
  "closed_at":null,
  "comments":3,
  "created_at":"2022-05-05T14:22:26Z",
  "id":1226743634,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5JHp9S",
  "number":1461,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"We need a custom exception type for all errors related to missing behaviors",
  "updated_at":"2023-07-04T09:13:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 1.2.0 to 2.0.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/docker/setup-qemu-action/releases\">docker/setup-qemu-action's releases</a>.</em></p>\n<blockquote>\n<h2>v2.0.0</h2>\n<ul>\n<li>Node 16 as default runtime by <a href=\"https://github.com/crazy-max\"><code>@\u200bcrazy-max</code></a> (<a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/48\">#48</a>)\n<ul>\n<li>This requires a minimum <a href=\"https://github.com/actions/runner/releases/tag/v2.285.0\">Actions Runner</a> version of v2.285.0, which is by default available in GHES 3.4 or later.</li>\n</ul>\n</li>\n<li>chore: update dev dependencies and workflow by <a href=\"https://github.com/crazy-max\"><code>@\u200bcrazy-max</code></a> (<a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/43\">#43</a> <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/47\">#47</a>)</li>\n<li>Bump <code>@\u200bactions/core</code> from 1.3.0 to 1.6.0 (<a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/37\">#37</a> <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/39\">#39</a> <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/41\">#41</a>)</li>\n<li>Bump <code>@\u200bactions/exec</code> from 1.0.4 to 1.1.1 (<a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/38\">#38</a> <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/46\">#46</a>)</li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/docker/setup-qemu-action/compare/v1.2.0...v2.0.0\">https://github.com/docker/setup-qemu-action/compare/v1.2.0...v2.0.0</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/8b122486cedac8393e77aa9734c3528886e4a1a8\"><code>8b12248</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/48\">#48</a> from crazy-max/node-16</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/466d53193ca9a892b43bd0f7fcacd4537854009f\"><code>466d531</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/50\">#50</a> from crazy-max/update-readme</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/607c1922b58acc78ad41e470aa7f061af7ef1f85\"><code>607c192</code></a> simplify usage example</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/d7849ecb9c834e9164bac38b409bad6b31f9fd1f\"><code>d7849ec</code></a> Node 16 as default runtime</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/2d4bfe71c9c7c6adb935665efb1a651cc8e799ba\"><code>2d4bfe7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/47\">#47</a> from crazy-max/update-dev</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/224b802eb3ef627939fa7cc83532f673a8bec346\"><code>224b802</code></a> chore: update dev dependencies and workflow</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/95bd86577812b34f1db6d5e57b728cb63b9aa388\"><code>95bd865</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/46\">#46</a> from docker/dependabot/npm_and_yarn/actions/exec-1.1.1</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/cfd091faa1bc4166b21275c814f26cfe27f6cb43\"><code>cfd091f</code></a> Bump <code>@\u200bactions/exec</code> from 1.1.0 to 1.1.1</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/d2a60302b87194ce3bff607f8a9af18fe5ec1cdc\"><code>d2a6030</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/45\">#45</a> from docker/dependabot/github_actions/actions/checkout-3</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/97dc484a91e07bd7fe42cfff1919c2ea5ff6df50\"><code>97dc484</code></a> Bump actions/checkout from 2 to 3</li>\n<li>Additional commits viewable in <a href=\"https://github.com/docker/setup-qemu-action/compare/v1.2.0...v2.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=docker/setup-qemu-action&package-manager=github_actions&previous-version=1.2.0&new-version=2.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-05-07T18:01:55Z",
  "comments":3,
  "created_at":"2022-05-05T17:30:42Z",
  "draft":false,
  "id":1226977685,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43Xqco",
  "number":1462,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-07T18:01:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump docker/setup-qemu-action from 1.2.0 to 2.0.0",
  "updated_at":"2022-05-07T18:01:55Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-05-07T07:10:48Z",
  "comments":1,
  "created_at":"2022-05-07T06:41:42Z",
  "draft":false,
  "id":1228545960,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43cgyp",
  "number":1464,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-07T07:10:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Ignore a NumPy 1.22 warning in Numba and fix the flake8-print T001 --> T201 change.",
  "updated_at":"2022-05-07T07:10:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/pyupgrade: v2.32.0 \u2192 v2.32.1](https://github.com/asottile/pyupgrade/compare/v2.32.0...v2.32.1)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-05-09T21:56:54Z",
  "comments":1,
  "created_at":"2022-05-09T19:52:11Z",
  "draft":false,
  "id":1230176694,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43hst5",
  "number":1465,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-09T21:56:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-05-09T21:56:55Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nTensorFlow's RaggedTensor has been around for a while and PyTorch's NestedTensor is new, but they should be conversion targets for Awkward Arrays. And then a tutorial should be written in the spirit of this one:\r\n\r\nhttps://www.tensorflow.org/text/tutorials/text_generation\r\n\r\nbut using Awkward strings \u2194 RaggedTensors instead of making `np.array([\"...\", \"...\", ...], dtype=object)`. It's a great example of why that interface would be useful, particularly when paired with `ak.str.*` functions. (We can demonstrate the difference with a scaling test on some enormous dataset. What's an enormous text dataset? I wonder...)\r\n\r\nI believe that this is an equivalent for PyTorch's NestedTensor:\r\n\r\nhttps://pytorch.org/tutorials/intermediate/char_rnn_generation_tutorial.html\r\n\r\nI don't know if JAX has a ragged array interface, but if it does, let's get that, too. All of these converters are relatively easy, but we'd have to get TensorFlow, PyTorch, and JAX into at least one of the CI tests. TensorFlow and JAX can be hard to install.",
  "closed_at":null,
  "comments":1,
  "created_at":"2022-05-12T22:58:17Z",
  "id":1234556680,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5JldcI",
  "number":1466,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"New to/from_raggedtensor and to/from_nestedtensor functions",
  "updated_at":"2024-02-01T16:52:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Now, instead of fully-qualified names being like `ak._v2.operations.convert.to_list`, they're like `ak._v2.operations.to_list`. The directories\r\n\r\n   * convert\r\n   * describe\r\n   * reducers\r\n   * structure\r\n\r\nhave been eliminated in v2. However, v1 was untouched.\r\n\r\nAlthough this PR touches a lot of files and will be hard to merge with other PRs, the changes are straightforward and should be easy to work around: the above four submodule names are simply removed.\r\n\r\nThis PR will be auto-merged right away. You'll likely want to `git merge main` after it's in `main`.",
  "closed_at":"2022-05-13T17:59:25Z",
  "comments":1,
  "created_at":"2022-05-13T17:23:24Z",
  "draft":false,
  "id":1235498013,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43zInN",
  "number":1467,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-13T17:59:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Flatten directory structure under src/awkward/_v2/operations.",
  "updated_at":"2022-05-13T17:59:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"There were fewer of these than I thought there was going to be.\r\n\r\n  * localindex \u2192 local_index\r\n  * validityerror \u2192 validity_error\r\n  * rpad \u2192 pad_none\r\n  * withparameter \u2192 with_parameter\r\n\r\nI changed mid-level names (i.e. on the layouts) because that's a public interface for downstream developers. I didn't change any kernel function names because those are totally internal and can be changed at any time. Also, those wouldn't be across-the-board changes that affect mergeability. Also, also, the kernel names aren't very good as they are, but they're defined in terms of their function (the Python snippets in kernel-signatures.yml), rather than a meaningful name.",
  "closed_at":"2022-05-13T19:35:32Z",
  "comments":2,
  "created_at":"2022-05-13T18:38:50Z",
  "draft":false,
  "id":1235566110,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43zWvr",
  "number":1468,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-13T19:35:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Rename low-level methods to match high-level function names.",
  "updated_at":"2022-05-13T19:35:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-05-13T21:08:19Z",
  "comments":1,
  "created_at":"2022-05-13T20:38:01Z",
  "draft":false,
  "id":1235692144,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43zt2N",
  "number":1469,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-13T21:08:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"_getitem_* functions must consistently set the slicer in handle_error.",
  "updated_at":"2022-05-13T21:08:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I missed this one before.",
  "closed_at":"2022-05-13T21:35:35Z",
  "comments":1,
  "created_at":"2022-05-13T20:43:39Z",
  "draft":false,
  "id":1235695794,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43zuoh",
  "number":1470,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-13T21:35:35Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Rename fillna -> fill_none.",
  "updated_at":"2022-05-13T21:35:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nMaster branch\n\n### Description and code to reproduce\n\nI downloaded Awkward array for developers and when I tried to build it I faced this issue:\r\n```\r\n\r\n $ python localbuild.py --pytest tests                                                                                                       \r\nRequirement already satisfied: PyYAML in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (6.0)                                                                       \r\nRequirement already satisfied: numpy>=1.13.1 in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from -r requirements.txt (line 1)) (1.22.3)                         \r\nRequirement already satisfied: setuptools in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from -r requirements.txt (line 2)) (57.4.0)                            \r\nRequirement already satisfied: pytest>=6 in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from -r requirements-test.txt (line 1)) (7.1.2)                         \r\nRequirement already satisfied: pytest-cov in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from -r requirements-test.txt (line 2)) (3.0.0)                        \r\nRequirement already satisfied: tomli>=1.0.0 in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pytest>=6->-r requirements-test.txt (line 1)) (2.0.1)           \r\nRequirement already satisfied: py>=1.8.2 in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pytest>=6->-r requirements-test.txt (line 1)) (1.11.0)             \r\nRequirement already satisfied: attrs>=19.2.0 in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pytest>=6->-r requirements-test.txt (line 1)) (21.4.0)         \r\nRequirement already satisfied: iniconfig in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pytest>=6->-r requirements-test.txt (line 1)) (1.1.1)              \r\nRequirement already satisfied: atomicwrites>=1.0 in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pytest>=6->-r requirements-test.txt (line 1)) (1.4.0)      \r\nRequirement already satisfied: colorama in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pytest>=6->-r requirements-test.txt (line 1)) (0.4.4)               \r\nRequirement already satisfied: pluggy<2.0,>=0.12 in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pytest>=6->-r requirements-test.txt (line 1)) (1.0.0)      \r\nRequirement already satisfied: packaging in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pytest>=6->-r requirements-test.txt (line 1)) (21.3)               \r\nRequirement already satisfied: coverage[toml]>=5.2.1 in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pytest-cov->-r requirements-test.txt (line 2)) (6.3.3) \r\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in c:\\users\\mgman\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from packaging->pytest>=6->-r requirements-test.txt (line\r\n1)) (3.0.8)                                                                                                                                                                                   \r\nGenerating include/awkward/kernels.h...                                                                                                                                                       \r\nDone with  include/awkward/kernels.h.                                                                                                                                                         \r\nGenerating src/awkward/_kernel_signatures.py...                                                                                                                                               \r\nDone with  src/awkward/_kernel_signatures.py...                                                                                                                                               \r\nGenerating src/awkward/_connect/cuda/_kernel_signatures.py...                                                                                                                                 \r\nDone with  src/awkward/_kernel_signatures_cuda.py...                                                                                                                                          \r\n-- Building for: Visual Studio 16 2019                                                                                                                                                        \r\n-- Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.19043.                                                                                                                   \r\n-- The CXX compiler identification is MSVC 19.29.30145.0                                                                                                                                      \r\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe                                             \r\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe - works                                     \r\n-- Detecting CXX compiler ABI info                                                                                                                                                            \r\n-- Detecting CXX compiler ABI info - done                                                                                                                                                     \r\n-- Detecting CXX compile features                                                                                                                                                             \r\n-- Detecting CXX compile features - done                                                                                                                                                      \r\n-- CMake version 3.17.2                                                                                                                                                                       \r\n-- CMAKE_BUILD_TYPE = Debug                                                                                                                                                                   \r\n-- pybind11 v2.9.2                                                                                                                                                                            \r\n-- Found PythonInterp: C:/Users/mgman/AppData/Local/Programs/Python/Python310/python.exe (found version \"3.10\")                                                                               \r\n-- Found PythonLibs: C:/Users/mgman/AppData/Local/Programs/Python/Python310/libs/python310.lib                                                                                                \r\n-- Performing Test HAS_MSVC_GL_LTCG                                                                                                                                                           \r\n-- Performing Test HAS_MSVC_GL_LTCG - Success                                                                                                                                                 \r\n-- Configuring done                                                                                                                                                                           \r\n-- Generating done                                                                                                                                                                            \r\n-- Build files have been written to: C:/Users/mgman/Downloads/IRIS HEP/awkward-1.0/localbuild                                                                                                 \r\nMicrosoft (R) Build Engine version 16.11.2+f32259642 for .NET Framework                                                                                                                       \r\nCopyright (C) Microsoft Corporation. All rights reserved.                                                                                                                                     \r\n                                                                                                                                                                                              \r\nMSBUILD : error MSB1001: Unknown switch.                                                                                                                                                      \r\nSwitch: -j8                                                                                                                                                                                   \r\n                                                                                                                                                                                              \r\nFor switch syntax, type \"MSBuild -help\"                                                                                                                                                       \r\npip install -r requirements.txt -r requirements-test.txt PyYAML                                                                                                                               \r\nC:\\Users\\mgman\\AppData\\Local\\Programs\\Python\\Python310\\python.exe dev\\generate-kernel-signatures.py                                                                                           \r\ncmake -S . -Blocalbuild -DCMAKE_BUILD_TYPE=Debug -DPYTHON_EXECUTABLE=C:\\Users\\mgman\\AppData\\Local\\Programs\\Python\\Python310\\python.exe -DPYBUILD=ON                                           \r\ncmake --build localbuild -- -j8                                                                                                                                                               \r\nTraceback (most recent call last):                                                                                                                                                            \r\n  File \"C:\\Users\\mgman\\Downloads\\IRIS HEP\\awkward-1.0\\localbuild.py\", line 116, in <module>                                                                                                   \r\n    check_call([\"cmake\", \"--build\", \"localbuild\", \"--\", \"-j\" + args.j])                                                                                                                       \r\n  File \"C:\\Users\\mgman\\Downloads\\IRIS HEP\\awkward-1.0\\localbuild.py\", line 62, in check_call                                                                                                  \r\n    return subprocess.check_call(args, env=env)                                                                                                                                               \r\n  File \"C:\\Users\\mgman\\AppData\\Local\\Programs\\Python\\Python310\\lib\\subprocess.py\", line 369, in check_call                                                                                    \r\n    raise CalledProcessError(retcode, cmd)                                                                                                                                                    \r\nsubprocess.CalledProcessError: Command '['cmake', '--build', 'localbuild', '--', '-j8']' returned non-zero exit status 1.      \r\n```\r\n\r\nI am using Windows 10.        \r\n```   \r\n$ cl --version\r\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.29.30145 for ARM64\r\nCopyright (C) Microsoft Corporation.  All rights reserved.       \r\n```                                               ",
  "closed_at":"2022-08-15T19:47:03Z",
  "comments":6,
  "created_at":"2022-05-14T12:43:30Z",
  "id":1235965025,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Jq1Rh",
  "number":1471,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Problem compiling on Windows",
  "updated_at":"2022-08-15T19:47:16Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-06-30T13:04:46Z",
  "comments":3,
  "created_at":"2022-05-14T13:41:44Z",
  "draft":true,
  "id":1235977049,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws430mrq",
  "number":1472,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"start working on growable buffer",
  "updated_at":"2022-06-30T13:05:01Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"move PR #1448 to a clean branch",
  "closed_at":"2022-06-16T19:01:56Z",
  "comments":3,
  "created_at":"2022-05-17T14:03:39Z",
  "draft":false,
  "id":1238694879,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws439ew_",
  "number":1474,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-16T19:01:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"rdataframe to awkward",
  "updated_at":"2022-06-16T19:01:57Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - just wanted to update the instructions for developers, but it looks like all other links work fine with switching from `awkward-1.0` to `awkward`.\r\n\r\n\r\n",
  "closed_at":"2022-05-18T16:09:31Z",
  "comments":1,
  "created_at":"2022-05-17T16:02:16Z",
  "draft":false,
  "id":1238860655,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws43-Ctj",
  "number":1475,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-18T16:09:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"update README: from awkward-1.0 to awkward",
  "updated_at":"2022-05-18T17:52:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"cc @douglasdavis ",
  "closed_at":"2022-07-19T17:21:41Z",
  "comments":4,
  "created_at":"2022-05-18T17:40:59Z",
  "draft":false,
  "id":1240300315,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws44Cy86",
  "number":1476,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-19T17:21:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"parquet redux",
  "updated_at":"2022-07-19T17:21:41Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmaster branch\n\n### Description and code to reproduce\n\n```python\r\ndef debug_compiler(code):\r\n    print(code)\r\n    ROOT.gInterpreter.Declare(code)\r\n\r\n\r\ndef test_to_from_data_frame_large():\r\n    n = 30\r\n    assert 2 * (n // 2) == n\r\n    rows = 3 ** (n // 2)\r\n    cols = n\r\n\r\n    arr = np.zeros((rows, cols), dtype=int)\r\n    shape = (rows,)\r\n\r\n    source = np.array([-1, 0, 1], dtype=np.int64)[:, None]\r\n\r\n    for col in range(n // 2):\r\n        shape = (\r\n            -1,\r\n            3,\r\n            shape[-1] // 3,\r\n        )\r\n        col_view = arr[:, col]\r\n        col_view.shape = shape\r\n        col_view[:] = source\r\n\r\n    ak_array_in = ak._v2.from_numpy(arr, regulararray=True)\r\n    print(ak_array_in)\r\n    print(ak_array_in.layout)\r\n\r\n    layout = ak_array_in.layout\r\n    generator = ak._v2._connect.cling.togenerator(layout.form, flatlist_as_rvec=True)\r\n    lookup = ak._v2._lookup.Lookup(layout)\r\n    generator.generate(debug_compiler)\r\n    entry_type = generator.entry_type()\r\n    print(entry_type)\r\n\r\n```\r\nwhen `flatlist_as_rvec=True` the generator correctly generates the following C++ code:\r\n```cpp\r\n#include <sys/types.h>\r\n#include <vector>\r\n#include <string>\r\n#include <optional>  // C++17\r\n#include <variant>  // C++17\r\n#include <complex>\r\n#include <chrono>\r\n\r\nextern \"C\" int printf(const char*, ...);\r\nnamespace awkward {\r\n  template <typename ARRAY, typename VALUE>\r\n  class Iterator {\r\n  public:\r\n    Iterator(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : start_(start), stop_(stop), which_(which), ptrs_(ptrs) { }\r\n\r\n    VALUE operator*() const noexcept {\r\n      return ARRAY(start_, stop_, which_, ptrs_)[0];\r\n    }\r\n\r\n    void operator++() noexcept {\r\n      start_++;\r\n    }\r\n\r\n    bool operator==(Iterator<ARRAY, VALUE> other) const noexcept {\r\n      return start_ == other.start_   &&\r\n             stop_ == other.stop_   &&\r\n             which_ == other.which_   &&\r\n             ptrs_ == other.ptrs_;\r\n    }\r\n\r\n    bool operator!=(Iterator<ARRAY, VALUE> other) const noexcept {\r\n      return start_ != other.start_   ||\r\n             stop_ != other.stop_   ||\r\n             which_ != other.which_   ||\r\n             ptrs_ != other.ptrs_;\r\n    }\r\n\r\n  private:\r\n    ssize_t start_;\r\n    ssize_t stop_;\r\n    ssize_t which_;\r\n    ssize_t* ptrs_;\r\n  };\r\n\r\n  template <typename ARRAY, typename VALUE>\r\n  class RIterator {\r\n  public:\r\n    RIterator(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : start_(start), stop_(stop), which_(which), ptrs_(ptrs) { }\r\n\r\n    VALUE operator*() const noexcept {\r\n      return ARRAY(start_, stop_, which_, ptrs_)[0];\r\n    }\r\n\r\n    void operator++() noexcept {\r\n      start_--;\r\n    }\r\n\r\n    bool operator==(RIterator<ARRAY, VALUE> other) const noexcept {\r\n      return start_ == other.start_   &&\r\n             stop_ == other.stop_   &&\r\n             which_ == other.which_   &&\r\n             ptrs_ == other.ptrs_;\r\n    }\r\n\r\n    bool operator!=(RIterator<ARRAY, VALUE> other) const noexcept {\r\n      return start_ != other.start_   ||\r\n             stop_ != other.stop_   ||\r\n             which_ != other.which_   ||\r\n             ptrs_ != other.ptrs_;\r\n    }\r\n\r\n  private:\r\n    ssize_t start_;\r\n    ssize_t stop_;\r\n    ssize_t which_;\r\n    ssize_t* ptrs_;\r\n  };\r\n\r\n  class ArrayView {\r\n  public:\r\n    ArrayView(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : start_(start), stop_(stop), which_(which), ptrs_(ptrs) { }\r\n\r\n    size_t size() const noexcept {\r\n      return stop_ - start_;\r\n    }\r\n\r\n    bool empty() const noexcept {\r\n      return start_ == stop_;\r\n    }\r\n\r\n  protected:\r\n    ssize_t start_;\r\n    ssize_t stop_;\r\n    ssize_t which_;\r\n    ssize_t* ptrs_;\r\n  };\r\n}\r\nnamespace awkward {\r\n  class RegularArray_Qhd3rcCYoek: public ArrayView {\r\n  public:\r\n    RegularArray_Qhd3rcCYoek(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n    RegularArray_Qhd3rcCYoek() : ArrayView(0, 0, 0, 0) { }\r\n\r\n    typedef ROOT::VecOps::RVec<int64_t> value_type;\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    bool operator==(RegularArray_Qhd3rcCYoek other) const noexcept {\r\n      return start_ == other.start_  &&\r\n             stop_ == other.stop_  &&\r\n             which_ == other.which_  &&\r\n             ptrs_ == other.ptrs_;\r\n    }\r\n\r\n    bool operator!=(RegularArray_Qhd3rcCYoek other) const noexcept {\r\n      return start_ != other.start_  ||\r\n             stop_ != other.stop_  ||\r\n             which_ != other.which_  ||\r\n             ptrs_ != other.ptrs_;\r\n    }\r\n\r\n    Iterator<RegularArray_Qhd3rcCYoek, value_type> begin() const noexcept {\r\n      return Iterator<RegularArray_Qhd3rcCYoek, value_type>(start_, stop_, which_, ptrs_);\r\n    }\r\n\r\n    Iterator<RegularArray_Qhd3rcCYoek, value_type> end() const noexcept {\r\n      return Iterator<RegularArray_Qhd3rcCYoek, value_type>(stop_, stop_, which_, ptrs_);\r\n    }\r\n\r\n    RIterator<RegularArray_Qhd3rcCYoek, value_type> rbegin() const noexcept {\r\n      return RIterator<RegularArray_Qhd3rcCYoek, value_type>(stop_ - 1, stop_, which_, ptrs_);\r\n    }\r\n\r\n    RIterator<RegularArray_Qhd3rcCYoek, value_type> rend() const noexcept {\r\n      return RIterator<RegularArray_Qhd3rcCYoek, value_type>(start_ - 1, stop_, which_, ptrs_);\r\n    }\r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      ssize_t start = (start_ + at) * 30;\r\n      ssize_t stop = start + 30;\r\n      ssize_t which = ptrs_[which_ + 2];\r\n      int64_t* content = reinterpret_cast<int64_t*>(ptrs_[which + 1]) + start;\r\n      return value_type(content, stop - start);\r\n    }\r\n  };\r\n}\r\n```\r\nbut the `generator.entry_type()` returned type looks like the `flatlist_as_rvec` flag is ignored, as if it is still set to `flatlist_as_rvec=False`:\r\n```\r\n`NumpyArray_int64_jNG8dtlgd6c`\r\n```",
  "closed_at":"2022-05-31T19:26:09Z",
  "comments":5,
  "created_at":"2022-05-19T16:23:42Z",
  "id":1242023750,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5KB8dG",
  "number":1477,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"generator entry_type does not match `ROOT::VecOps::RVec` when `flatlist_as_rvec=True`",
  "updated_at":"2022-05-31T19:26:10Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- generate `RVec`s when requested that fixes issue #1477\r\n- `RVec` namespace correction\r\n- add tests\r\n",
  "closed_at":"2022-05-31T06:06:51Z",
  "comments":4,
  "created_at":"2022-05-20T13:41:34Z",
  "draft":false,
  "id":1243167877,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws44MRiz",
  "number":1478,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-05-31T06:06:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"`to_rdataframe` extensive tests and bug fixes",
  "updated_at":"2022-05-31T06:06:51Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Modified the implementation of GrowableBuffer to use multiple Panels. I have made changes to the following files -\r\n- include/awkward/builder/GrowableBuffer.h\r\n- src/libawkward/builder/GrowableBuffer.cpp",
  "closed_at":"2022-06-30T13:02:15Z",
  "comments":4,
  "created_at":"2022-05-25T15:08:33Z",
  "draft":true,
  "id":1248244691,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws44dBBK",
  "number":1479,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"modified the implementation of GrowableBuffer to use multiple Panels",
  "updated_at":"2022-06-30T13:02:31Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.5.0 to 2.6.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>2.6.0</h2>\n<ul>\n<li>\ud83c\udf1f Added the ability to test building wheels on CPython 3.11! Because CPython 3.11 is in beta, these wheels should not be distributed, because they might not be compatible with the final release, but it's available to build for testing purposes. Use the flag <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#prerelease-pythons\"><code>--prerelease-pythons</code> or <code>CIBW_PRERELEASE_PYTHONS</code></a> to test. This version of cibuildwheel includes CPython 3.11.0b1. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1109\">#1109</a>)</li>\n<li>\ud83d\udcda Added an interactive diagram showing how cibuildwheel works to the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/#how-it-works\">docs</a> (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1100\">#1100</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.6.0</h3>\n<p><em>25 May 2022</em></p>\n<ul>\n<li>\ud83c\udf1f Added the ability to test building wheels on CPython 3.11! Because CPython 3.11 is in beta, these wheels should not be distributed, because they might not be compatible with the final release, but it's available to build for testing purposes. Use the flag <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#prerelease-pythons\"><code>--prerelease-pythons</code> or <code>CIBW_PRERELEASE_PYTHONS</code></a> to test. This version of cibuildwheel includes CPython 3.11.0b1. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1109\">#1109</a>)</li>\n<li>\ud83d\udcda Added an interactive diagram showing how cibuildwheel works to the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/#how-it-works\">docs</a> (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1100\">#1100</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/4bbbee7949a4878926f3adeb32de3f60d63523b4\"><code>4bbbee7</code></a> Bump version: v2.6.0</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/d73f1ea2a4e94cacb475e8ead1b206ed4ee08a3c\"><code>d73f1ea</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1109\">#1109</a> from mayeut/python-3.11</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a08a952b4b8f257f4acb516d115d0731d3e8a797\"><code>a08a952</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1100\">#1100</a> from pypa/docs-diagram</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/29f102bdfede6a6dda416062581d28c3e2ead889\"><code>29f102b</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1116\">#1116</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/2edd5270c3abb23412d19f3ad497f249c861794f\"><code>2edd527</code></a> mark CPython 3.11 as pre-release</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/b8abcb128c98431e6a9752949ce9038b989459d4\"><code>b8abcb1</code></a> feature: add CPython 3.11 support</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/79bfea0817a3a08d0e80526a6eeb12580e8dbf5b\"><code>79bfea0</code></a> [Bot] Update dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1115\">#1115</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/0b1b47d7ecd0950354c32aafdb06120e2a5ec9fc\"><code>0b1b47d</code></a> Update dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1111\">#1111</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a2a54b9833a31e1c44db99159ae59c8280b9e2cb\"><code>a2a54b9</code></a> chore(deps): bump excitedleigh/setup-nox from 2.0.0 to 2.1.0 (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1110\">#1110</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/e33c037e6ad2cb43ea915670a82aa643f2ed1584\"><code>e33c037</code></a> chore(deps): bump docker/setup-qemu-action from 1 to 2 (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1106\">#1106</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/2.5.0...2.6.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.5.0&new-version=2.6.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-06-07T18:06:00Z",
  "comments":2,
  "created_at":"2022-05-26T17:28:52Z",
  "draft":false,
  "id":1249848824,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws44iR-3",
  "number":1480,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump pypa/cibuildwheel from 2.5.0 to 2.6.0",
  "updated_at":"2022-06-07T18:06:01Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.9.0rc4\n\n### Description and code to reproduce\n\n```\r\nimport awkward._v2 as ak\r\n\r\narray = ak.Array([\r\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\r\n    [],\r\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\r\n])\r\n\r\nak.copy(array)\r\n```\r\n\r\nExpect a copy of the array, but I get this:\r\n\r\n```\r\nFile ~/miniconda3/envs/research/lib/python3.9/site-packages/awkward/_v2/operations/ak_copy.py:57, in copy(array)\r\n     10 \"\"\"\r\n     11 Returns a deep copy of the array (no memory shared with original).\r\n     12 \r\n   (...)\r\n     51 a mutable third-party library, so this function allows you to make a true copy.\r\n     52 \"\"\"\r\n     53 with ak._v2._util.OperationErrorContext(\r\n     54     \"ak._v2.fill_none\",\r\n     55     dict(array=array),\r\n     56 ):\r\n---> 57     return _impl(array)\r\n...\r\n...\r\n...\r\nTypeError: cannot pickle 'module' object\r\n```",
  "closed_at":"2022-07-08T07:16:26Z",
  "comments":4,
  "created_at":"2022-05-27T16:51:47Z",
  "id":1250983291,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5KkH17",
  "number":1482,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Error when using ak.copy in v2",
  "updated_at":"2022-07-08T07:16:26Z",
  "user":"MDQ6VXNlcjM4NzYyNA=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\r\n\r\nThis issue was originally very long, but the fundamental motivation is quite simple. Right now, behaviour classes cannot perform validation at construction time; the only opportunity for validating the current layout is whenever a user-defined method is called, e.g.:\r\n```python3\r\nclass OnlyFloats(Array):\r\n    def validate(self):\r\n        dtypes = []\r\n        def get_dtype(layout, **kwargs):\r\n            if isinstance(layout, ak._v2.contents.NumpyArray):\r\n                assert np.issubdtype(layout.dtype, np.floating)\r\n        self.layout.recursively_apply(get_dtype)\r\n\r\nak.behavior[\"only_floats\"] = OnlyFloats\r\n```\r\n```pycon\r\n>>> x = ak.with_parameter(Array([1,2,3]), \"__array__\",  \"only_floats\")\r\n>>> x.validate()\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n/tmp/ipykernel_362562/672691759.py in <cell line: 1>()\r\n----> 1 validate(ak._v2.Array(l))\r\n...\r\n\r\n/tmp/ipykernel_362562/3059306649.py in get_dtype(layout, **kwargs)\r\n      3     def get_dtype(layout, **kwargs):\r\n      4         if isinstance(layout, ak._v2.contents.NumpyArray):\r\n----> 5             assert np.issubdtype(layout.dtype, np.floating)\r\n      6     self.layout.recursively_apply(get_dtype)\r\n\r\nAssertionError:\r\n```\r\n\r\n This means that a user could associate a behaviour with a poorly structured array, and only discover their error at a later point in the program when the validation method is called. \r\n\r\nI wonder if we should consider adding a hook that allows behaviours to run user-defined code at the time of array wrapping, e.g. to validate the array:\r\n\r\n```python3\r\nclass Array(...):\r\n    def __init__(self, ...):\r\n        self._on_layout_added()\r\n\r\n    def _on_layout_added(self):\r\n        pass\r\n\r\n\r\nclass OnlyFloats(Array):\r\n    def _on_layout_added(self):\r\n        dtypes = []\r\n        def get_dtype(layout, **kwargs):\r\n            if isinstance(layout, ak._v2.contents.NumpyArray):\r\n                assert np.issubdtype(layout.dtype, np.floating)\r\n        self.layout.recursively_apply(get_dtype)\r\n\r\nak.behavior[\"only_floats\"] = OnlyFloats\r\n\r\n\r\nx = ak.with_parameter(Array([1,2,3]), \"__array__\",  \"only_floats\")\r\n```\r\n\r\nThis would mean that we don't have to come up with some Awkward-specific validation tool: this can be left up to the library authors.\r\n\r\nThe caveat here is that I don't think we want this validation step to do anything too magical - ideally the mental model of behaviours as a mechanism to attach methods to classes holds.",
  "closed_at":null,
  "comments":2,
  "created_at":"2022-05-30T14:21:25Z",
  "id":1252809788,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5KrFw8",
  "number":1483,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Array class validation",
  "updated_at":"2022-09-24T14:44:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-07-01T12:53:51Z",
  "comments":2,
  "created_at":"2022-05-31T20:34:07Z",
  "draft":false,
  "id":1254389475,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws44xKCQ",
  "number":1484,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-01T12:53:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"LayoutBuilder migration to v2",
  "updated_at":"2022-07-01T12:53:51Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is for @ianna and @ManasviGoyal. (It's what I showed in our meeting.)",
  "closed_at":"2022-06-16T19:03:28Z",
  "comments":7,
  "created_at":"2022-06-01T16:26:09Z",
  "draft":false,
  "id":1256430356,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws444XzE",
  "number":1485,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-16T19:03:28Z"
  },
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "state":"closed",
  "state_reason":null,
  "title":"Add the beginning of an example of templated LayoutBuilder.",
  "updated_at":"2022-06-16T19:03:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-06-02T02:15:05Z",
  "comments":1,
  "created_at":"2022-06-02T01:41:55Z",
  "draft":false,
  "id":1257481204,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws448LlV",
  "number":1486,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-02T02:15:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix selecting columns from Parquet.",
  "updated_at":"2022-06-02T02:15:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-06-10T17:27:27Z",
  "comments":1,
  "created_at":"2022-06-02T21:02:32Z",
  "draft":false,
  "id":1258718787,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45AQYw",
  "number":1487,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-10T17:27:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Adding repr overriden behavior",
  "updated_at":"2022-06-10T17:27:27Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nOne thing that's a little annoying right now is getting data from Awkward Arrays into plots. A lot of my tutorials include stanzas like\r\n\r\n```python\r\nhist.Hist.new.Reg(100, 0, 5).Double().fill(ak.flatten(\r\n\r\n    awkward_array_goes_here,\r\n\r\naxis=None)).plot()\r\n```\r\n\r\nbut in the heat of interactive data analysis, you have some intermediate array result that you want to quickly plot to see what's happening. I find myself saying that the value of array-oriented interfaces is the quick interleaving of single-operation-multiple-data and feedback about that step, so that you catch mathematical errors early. (For instance, an unexpected spike at zero, a surprisingly long tail, or smeared trigger thresholds, missing mass peaks, etc.) However, the above is not easy to quickly plot.\r\n\r\nWe generally try to minimize method names in the ak.Array namespace, but suppose we add one more named `hist`, which flattens data and fills a histogram from the hist library? With the exception of selecting fields from the Awkward record array (if any), most of the arguments would be passed directly to hist for hist to take care of (and ModuleNotFoundError if hist can't be imported).\r\n\r\nSome features that would be nice to have:\r\n\r\n   * The ak.Array must either have no nested RecordArrays or must take a string/tuple of strings for which fields to put in the histogram. After applying those fields, the resulting columns must be non-RecordArrays. If the string conforms to `[A-Za-z_][A-Za-z_0-9]*`, we should use `__getattr__` instead of `__getitem__` so that Vector properties like `\"pt\"` can be used on an array of Cartesian vectors. Maybe that field selector can be a dict if one needs to map Awkward field names to hist axis names that aren't exactly the same.\r\n   * After ensuring that the selected fields (if any) broadcast to one another, they should each be flattened to one-dimensional NumPy arrays before passing to hist's `fill`. Nones and NaNs are removed (unless hist automatically ignores NaNs). Yes, I like to insist that flattening isn't always the right thing to do, and so it shouldn't be done automatically, but it's so often the right thing to do that it ought to be a default. (Auto-flattening in a method named `hist` is a different proposition from auto-flattening every time `__array__` is called; that would be too much/dangerous.)\r\n   * A pre-existing histogram can be specified as an argument: `hist=h`, in analogy with Matplotlib's `ax=ax`. In this case, the existing histogram is filled.\r\n   * If no `hist` is given, the method should create a new histogram, but what syntax should it use to do so? `hist.numpy.histogram`? The hist constructor? Would that require users to `import hist` so they can say things like `hist.new.Reg`?\r\n   * The return value should always be a histogram object, not a plot. The chain `array.hist(*args).plot()` is not unwieldy. Or maybe, should it be a proxy that must be continued with a `hist.Hist.new`-like chain, excepting that it does the `fill` implicitly?\r\n   * What about scatter plots? Should we just say that we always do 2-dimensional histograms instead of scatter plots, so that we don't run into problems with lots of marker objects from large arrays? (Maybe Matplotlib handles that gracefully when the input type is NumPy?) At least, we don't want the `hist` return value to sometimes be \"a thing that can be plotted\" and sometimes be \"a plot.\" It should always be one or the other.\r\n\r\nOh, and this would only be for v2. It might even be listed in a \"reasons to switch\" that we'll be publicizing next year.\r\n\r\n@henryiii and @amangoel185 may have opinions about how this hist integration/ergonomics should go.",
  "closed_at":"2023-01-12T16:40:01Z",
  "comments":4,
  "created_at":"2022-06-03T15:16:14Z",
  "id":1260035282,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"I_kwDODBCWws5LGpzS",
  "number":1488,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Convenience methods for plotting and histogramming",
  "updated_at":"2023-01-12T16:40:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nCurrently, I can't find a reproducer besides the runtime state of my open interpreter.\r\n\r\n`NumpyArray.deep_copy` is not correctly copying a particular array that I have. The array that is being copied is:\r\n- contiguous (`x.contiguous().ptr == x.ptr`)\r\n- bool with 327 entries\r\n\r\nThe resulting copy has periodic contents, though the pattern itself seems random.\r\n\r\nI'm filing this issue to keep tabs on this, in case anyone else runs into it.",
  "closed_at":"2022-08-15T20:01:50Z",
  "comments":3,
  "created_at":"2022-06-05T14:59:47Z",
  "id":1261069920,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5LKmZg",
  "number":1489,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`NumpyArray.deep_copy` produces different array (v1)",
  "updated_at":"2022-08-15T20:01:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-06-08T19:07:12Z",
  "comments":6,
  "created_at":"2022-06-06T08:09:20Z",
  "draft":false,
  "id":1261500785,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45JhRX",
  "number":1490,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-08T19:07:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Refactoring to include index_nplike and reducers",
  "updated_at":"2022-09-23T00:49:21Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-06-10T14:09:33Z",
  "comments":4,
  "created_at":"2022-06-06T18:04:12Z",
  "draft":false,
  "id":1262174653,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45Lzg-",
  "number":1491,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-10T14:09:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Adding a Forth Based Avro Reader",
  "updated_at":"2022-06-10T14:09:34Z",
  "user":"MDQ6VXNlcjUwNTc3ODA5"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-06-06T20:01:50Z",
  "comments":1,
  "created_at":"2022-06-06T19:28:42Z",
  "draft":false,
  "id":1262291895,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45MNu3",
  "number":1492,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-06T20:01:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix categorical equality handling (bad copy-paste from v1).",
  "updated_at":"2022-06-06T20:01:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.5.0 to 2.6.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>2.6.1</h2>\n<ul>\n<li>\ud83d\udee0 Update the prerelease CPython 3.11 to 3.11.0b3</li>\n</ul>\n<h2>2.6.0</h2>\n<ul>\n<li>\ud83c\udf1f Added the ability to test building wheels on CPython 3.11! Because CPython 3.11 is in beta, these wheels should not be distributed, because they might not be compatible with the final release, but it's available to build for testing purposes. Use the flag <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#prerelease-pythons\"><code>--prerelease-pythons</code> or <code>CIBW_PRERELEASE_PYTHONS</code></a> to test. This version of cibuildwheel includes CPython 3.11.0b1. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1109\">#1109</a>)</li>\n<li>\ud83d\udcda Added an interactive diagram showing how cibuildwheel works to the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/#how-it-works\">docs</a> (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1100\">#1100</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.6.1</h3>\n<p><em>7 June 2022</em></p>\n<ul>\n<li>\ud83d\udee0 Update the prerelease CPython 3.11 to 3.11.0b3</li>\n</ul>\n<h3>v2.6.0</h3>\n<p><em>25 May 2022</em></p>\n<ul>\n<li>\ud83c\udf1f Added the ability to test building wheels on CPython 3.11! Because CPython 3.11 is in beta, these wheels should not be distributed, because they might not be compatible with the final release, but it's available to build for testing purposes. Use the flag <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#prerelease-pythons\"><code>--prerelease-pythons</code> or <code>CIBW_PRERELEASE_PYTHONS</code></a> to test. This version of cibuildwheel includes CPython 3.11.0b1. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1109\">#1109</a>)</li>\n<li>\ud83d\udcda Added an interactive diagram showing how cibuildwheel works to the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/#how-it-works\">docs</a> (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1100\">#1100</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/aa753429b2fdc380e9665c4f031c7d9998718d7c\"><code>aa75342</code></a> Bump version: v2.6.1</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/45227e53e7fa0d279ec01e7030c1f0b0b580cead\"><code>45227e5</code></a> chore(deps): bump pre-commit/action from 2.0.3 to 3.0.0 (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1127\">#1127</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/0be10361af0006aabeb2c483d4bd3acc4f404c9b\"><code>0be1036</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1120\">#1120</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a440ab3655a642eee3b041023c97958b124452ec\"><code>a440ab3</code></a> [Bot] Update dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1119\">#1119</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/c5c1766614a684afab48e68e7669826e068d25aa\"><code>c5c1766</code></a> ci: disable travis-ci output timeout (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1123\">#1123</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/4bbbee7949a4878926f3adeb32de3f60d63523b4\"><code>4bbbee7</code></a> Bump version: v2.6.0</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/d73f1ea2a4e94cacb475e8ead1b206ed4ee08a3c\"><code>d73f1ea</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1109\">#1109</a> from mayeut/python-3.11</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a08a952b4b8f257f4acb516d115d0731d3e8a797\"><code>a08a952</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1100\">#1100</a> from pypa/docs-diagram</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/29f102bdfede6a6dda416062581d28c3e2ead889\"><code>29f102b</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1116\">#1116</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/2edd5270c3abb23412d19f3ad497f249c861794f\"><code>2edd527</code></a> mark CPython 3.11 as pre-release</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/2.5.0...2.6.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.5.0&new-version=2.6.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-06-07T18:38:16Z",
  "comments":0,
  "created_at":"2022-06-07T18:05:57Z",
  "draft":false,
  "id":1263680177,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45Q5V6",
  "number":1493,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-07T18:38:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump pypa/cibuildwheel from 2.5.0 to 2.6.1",
  "updated_at":"2022-06-07T18:38:17Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"To develop a templated GrowableBuffer<PRIMITIVE> and the Layout builders that use this buffer. There will be two headers: GrowableBuffer.h and LayoutBuilder.h. This will allow using them in an external project without linking to the awkward libraries.\r\n\r\n- [x] Numpy\r\n- [x] ListOffset\r\n- [x] EmptyRecord\r\n- [x] Record\r\n- [x] Tuple\r\n- [x] List\r\n- [x] Indexed\r\n- [x] IndexedOption\r\n- [x] Empty\r\n- [x] Unmasked\r\n- [x] Regular\r\n- [x] BitMasked\r\n- [x] ByteMasked\r\n- [x] Union\r\n- [x] Unit Tests for all Layout Builders\r\n\r\nThis can be a separate PR:\r\nDocumentation of LayoutBuilder.h",
  "closed_at":"2022-07-25T22:10:16Z",
  "comments":21,
  "created_at":"2022-06-08T10:13:31Z",
  "draft":false,
  "id":1264513853,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45Tq1u",
  "number":1494,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-25T22:10:16Z"
  },
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Templated LayoutBuilder",
  "updated_at":"2022-08-08T20:47:40Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nThis is how things are supposed to work (and do, in v1):\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]])\r\n>>> array[[True, False, True]]\r\n<Array [[1.1, 2.2, 3.3], [4.4, 5.5]] type='2 * var * float64'>\r\n>>> array[[True, False, True], 1]\r\n<Array [2.2, 5.5] type='2 * float64'>\r\n```\r\n\r\nbut in v2,\r\n\r\n```python\r\n>>> array = ak._v2.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]])\r\n>>> array[[True, False, True]]\r\n<Array [[1.1, 2.2, 3.3], [4.4, 5.5]] type='2 * var * float64'>\r\n>>> array[[True, False, True], 1]\r\n<Array [] type='0 * float64'>\r\n```\r\n\r\nFound by @swishdiff. Maybe @ioanaif is in the best position to address it?",
  "closed_at":"2022-06-10T12:33:40Z",
  "comments":1,
  "created_at":"2022-06-09T13:07:09Z",
  "id":1266104808,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Ldzno",
  "number":1495,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Boolean array slice followed by integer slice in v2",
  "updated_at":"2022-06-10T12:33:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-06-10T09:11:12Z",
  "comments":1,
  "created_at":"2022-06-10T08:37:36Z",
  "draft":false,
  "id":1267240633,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45c2KQ",
  "number":1496,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-10T09:11:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"_to_numpy method should return a numpy array",
  "updated_at":"2022-06-10T09:11:13Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"#1495 ",
  "closed_at":"2022-06-10T12:33:40Z",
  "comments":1,
  "created_at":"2022-06-10T10:14:35Z",
  "draft":false,
  "id":1267347562,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45dM2M",
  "number":1497,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-10T12:33:40Z"
  },
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Fix/Fixed slicing shape for array of booleans",
  "updated_at":"2022-06-10T12:33:41Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-06-11T19:11:40Z",
  "comments":1,
  "created_at":"2022-06-11T18:40:20Z",
  "draft":false,
  "id":1268347152,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45gfQ_",
  "number":1498,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-11T19:11:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed typo in unmaskedarray.py.",
  "updated_at":"2022-06-11T19:11:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-06-12T16:35:32Z",
  "comments":1,
  "created_at":"2022-06-12T15:49:03Z",
  "draft":false,
  "id":1268624206,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45hTwN",
  "number":1499,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-12T16:35:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix slicing for UnmaskedArrays (which come from Arrow).",
  "updated_at":"2022-06-12T16:35:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nWhen I ran the tests with `localbuild.py`, `tests/v2/test_1477-generator-entry-type-as-rvec.py::test_BitMaskedArray_NumpyArray` attempted to compile `AwkwardArrayDataSource_8748206908428` a second time. The test failed because Cling complained at `awkward/_v2/_connect/rdataframe/to_rdataframe.py:288: AssertionError`.\r\n\r\n<details>\r\n    <summary>Full test output</summary>\r\n\r\n```\r\n________________________ test_BitMaskedArray_NumpyArray ________________________\r\n\r\n    def test_BitMaskedArray_NumpyArray():\r\n        ak_array_one = ak._v2.contents.bitmaskedarray.BitMaskedArray(\r\n            ak._v2.index.Index(\r\n                np.packbits(\r\n                    np.array(\r\n                        [\r\n                            1,\r\n                            1,\r\n                            1,\r\n                            1,\r\n                            0,\r\n                            0,\r\n                            0,\r\n                            0,\r\n                            1,\r\n                            0,\r\n                            1,\r\n                            0,\r\n                            1,\r\n                        ],\r\n                        np.uint8,\r\n                    )\r\n                )\r\n            ),\r\n            ak._v2.contents.numpyarray.NumpyArray(\r\n                np.array(\r\n                    [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6]\r\n                )\r\n            ),\r\n            valid_when=True,\r\n            length=13,\r\n            lsb_order=False,\r\n        )\r\n>       data_frame_one = ak._v2.to_rdataframe({\"one\": ak_array_one})\r\n\r\nak_array_one = <BitMaskedArray valid_when='true' lsb_order='false' len='13'>\r\n    <mask><Index dtype='uint8' len='2'>[240 168]</Index></mask>\r\n    <content><NumpyArray dtype='float64' len='14'>\r\n        [0.  1.  2.  3.  4.  5.  6.  7.  1.1 2.2 3.3 4.4 5.5 6.6]\r\n    </NumpyArray></content>\r\n</BitMaskedArray>\r\n\r\ntests/v2/test_1477-generator-entry-type-as-rvec.py:171: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nawkward/_v2/operations/ak_to_rdataframe.py:44: in to_rdataframe\r\n    return _impl(\r\n        arrays     = {'one': <BitMaskedArray valid_when='true' lsb_order='false' len='13'>\r\n    <mask><Index dtype='uint8' len='2'>[240 168]</Index></mask>\r\n    <content><NumpyArray dtype='float64' len='14'>\r\n        [0.  1.  2.  3.  4.  5.  6.  7.  1.1 2.2 3.3 4.4 5.5 6.6]\r\n    </NumpyArray></content>\r\n</BitMaskedArray>}\r\n        flatlist_as_rvec = True\r\nawkward/_v2/operations/ak_to_rdataframe.py:82: in _impl\r\n    return ak._v2._connect.rdataframe.to_rdataframe.to_rdataframe(\r\n        array      = <BitMaskedArray valid_when='true' lsb_order='false' len='13'>\r\n    <mask><Index dtype='uint8' len='2'>[240 168]</Index></mask>\r\n    <content><NumpyArray dtype='float64' len='14'>\r\n        [0.  1.  2.  3.  4.  5.  6.  7.  1.1 2.2 3.3 4.4 5.5 6.6]\r\n    </NumpyArray></content>\r\n</BitMaskedArray>\r\n        arrays     = {'one': <BitMaskedArray valid_when='true' lsb_order='false' len='13'>\r\n    <mask><Index dtype='uint8' len='2'>[240 168]</Index></mask>\r\n    <content><NumpyArray dtype='float64' len='14'>\r\n        [0.  1.  2.  3.  4.  5.  6.  7.  1.1 2.2 3.3 4.4 5.5 6.6]\r\n    </NumpyArray></content>\r\n</BitMaskedArray>}\r\n        awkward    = <module 'awkward' from '/home/jpivarski/irishep/awkward/awkward/__init__.py'>\r\n        flatlist_as_rvec = True\r\n        layouts    = {'one': <BitMaskedArray valid_when='true' lsb_order='false' len='13'>\r\n    <mask><Index dtype='uint8' len='2'>[240 168]</Index></mask>\r\n    <content><NumpyArray dtype='float64' len='14'>\r\n        [0.  1.  2.  3.  4.  5.  6.  7.  1.1 2.2 3.3 4.4 5.5 6.6]\r\n    </NumpyArray></content>\r\n</BitMaskedArray>}\r\n        length     = 13\r\n        name       = 'one'\r\nawkward/_v2/_connect/rdataframe/to_rdataframe.py:26: in to_rdataframe\r\n    return DataSourceGenerator(length, flatlist_as_rvec=flatlist_as_rvec).data_frame(\r\n        flatlist_as_rvec = True\r\n        layouts    = {'one': <BitMaskedArray valid_when='true' lsb_order='false' len='13'>\r\n    <mask><Index dtype='uint8' len='2'>[240 168]</Index></mask>\r\n    <content><NumpyArray dtype='float64' len='14'>\r\n        [0.  1.  2.  3.  4.  5.  6.  7.  1.1 2.2 3.3 4.4 5.5 6.6]\r\n    </NumpyArray></content>\r\n</BitMaskedArray>}\r\n        length     = 13\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <awkward._v2._connect.rdataframe.to_rdataframe.DataSourceGenerator object at 0x7f4d9cde6ca0>\r\nlayouts = {'one': <BitMaskedArray valid_when='true' lsb_order='false' len='13'>\r\n    <mask><Index dtype='uint8' len='2'>[240 168]...='14'>\r\n        [0.  1.  2.  3.  4.  5.  6.  7.  1.1 2.2 3.3 4.4 5.5 6.6]\r\n    </NumpyArray></content>\r\n</BitMaskedArray>}\r\n\r\n        def data_frame(self, layouts):\r\n            cpp_code_declare_slots = \"\"\r\n            cpp_code_define_readers = \"\"\r\n            cpp_code_column_names = \"\"\r\n            cpp_code_column_type_names = \"\"\r\n            cpp_code_column_types_map = \"\"\r\n            cpp_code_init_slots = \"\"\r\n            cpp_code_resize_slots = \"\"\r\n            cpp_code_entries = \"\"\r\n    \r\n            k = 0\r\n    \r\n            for key in layouts:\r\n                self.generators[key] = ak._v2._connect.cling.togenerator(\r\n                    layouts[key].form, flatlist_as_rvec=self.flatlist_as_rvec\r\n                )\r\n                self.lookups[key] = ak._v2._lookup.Lookup(layouts[key])\r\n                self.generators[key].generate(ROOT.gInterpreter.Declare)\r\n    \r\n                self.entry_types[key] = self.generators[key].entry_type()\r\n                if isinstance(\r\n                    self.generators[key], ak._v2._connect.cling.NumpyArrayGenerator\r\n                ):\r\n                    pass\r\n                elif isinstance(\r\n                    self.generators[key], ak._v2._connect.cling.ListArrayGenerator\r\n                ) and (\r\n                    self.generators[key].is_string\r\n                    or (\r\n                        self.generators[key].flatlist_as_rvec\r\n                        and self.generators[key].is_flatlist\r\n                    )\r\n                ):\r\n                    pass\r\n                elif isinstance(\r\n                    self.generators[key], ak._v2._connect.cling.RegularArrayGenerator\r\n                ) and (\r\n                    self.generators[key].flatlist_as_rvec\r\n                    and self.generators[key].is_flatlist\r\n                ):\r\n                    pass\r\n                elif isinstance(\r\n                    self.generators[key], ak._v2._connect.cling.IndexedOptionArrayGenerator\r\n                ):\r\n                    pass\r\n                elif isinstance(\r\n                    self.generators[key], ak._v2._connect.cling.IndexedArrayGenerator\r\n                ):\r\n                    pass\r\n                elif isinstance(\r\n                    self.generators[key], ak._v2._connect.cling.ByteMaskedArrayGenerator\r\n                ):\r\n                    pass\r\n                elif isinstance(\r\n                    self.generators[key], ak._v2._connect.cling.BitMaskedArrayGenerator\r\n                ):\r\n                    pass\r\n                elif isinstance(\r\n                    self.generators[key], ak._v2._connect.cling.UnmaskedArrayGenerator\r\n                ):\r\n                    pass\r\n                else:\r\n                    self.entry_types[key] = \"awkward::\" + self.entry_types[key]\r\n    \r\n                self.data_ptrs_list.append(self.lookups[key].arrayptrs.ctypes.data)\r\n    \r\n                cpp_code_declare_slots = (\r\n                    cpp_code_declare_slots\r\n                    + f\"\"\"\r\n            ULong64_t fPtrs_{key} = 0;\r\n            std::vector<{self.entry_types[key]}>  slots_{key};\r\n            std::vector<{self.entry_types[key]}*> addrs_{key};\r\n        \"\"\"\r\n                )\r\n    \r\n                cpp_code_define_readers = (\r\n                    cpp_code_define_readers\r\n                    + f\"\"\"\r\n            if (name == \"{key}\") {{\r\n                for (auto i : ROOT::TSeqU(fNSlots)) {{\r\n                    addrs_{key}[i] = &slots_{key}[i];\r\n                    reader.emplace_back((void *)(&addrs_{key}[i]));\r\n                }}\r\n            }}\r\n        \"\"\"\r\n                )\r\n                cpp_code_define_readers = cpp_code_define_readers + \"else \"\r\n    \r\n                cpp_code_column_names = (\r\n                    cpp_code_column_names\r\n                    + f\"\"\"\r\n            \"{key}\"\r\n        \"\"\".strip()\r\n                )\r\n    \r\n                cpp_code_column_type_names = (\r\n                    cpp_code_column_type_names\r\n                    + f\"\"\"\r\n            \"{self.entry_types[key]}\"\r\n        \"\"\".strip()\r\n                )\r\n    \r\n                cpp_code_column_types_map = (\r\n                    cpp_code_column_types_map\r\n                    + f\"\"\"\r\n            {{ \"{key}\", \"{self.entry_types[key]}\" }}\r\n        \"\"\".strip()\r\n                )\r\n    \r\n                cpp_code_init_slots = (\r\n                    cpp_code_init_slots\r\n                    + f\"\"\"\r\n            fPtrs_{key} = fPtrs[{k}];\r\n        \"\"\"\r\n                )\r\n    \r\n                cpp_code_resize_slots = (\r\n                    cpp_code_resize_slots\r\n                    + f\"\"\"\r\n            slots_{key}.resize(fNSlots);\r\n            addrs_{key}.resize(fNSlots);\r\n        \"\"\"\r\n                )\r\n    \r\n                cpp_code_entries = (\r\n                    cpp_code_entries\r\n                    + f\"\"\"\r\n            slots_{key}[slot] = awkward::{self.generators[key].class_type()}(0, fSize, 0, reinterpret_cast<ssize_t*>(fPtrs_{key}))[entry];\r\n        \"\"\"\r\n                )\r\n    \r\n                k = k + 1\r\n                if k < len(layouts):\r\n                    cpp_code_column_names = cpp_code_column_names + \", \"\r\n                    cpp_code_column_type_names = cpp_code_column_type_names + \", \"\r\n                    cpp_code_column_types_map = cpp_code_column_types_map + \", \"\r\n    \r\n            array_data_source = self.class_type()\r\n    \r\n            if not hasattr(ROOT, array_data_source):\r\n                cpp_code = f\"\"\"\r\n    namespace awkward {{\r\n    \r\n        class {array_data_source} final\r\n          : public ROOT::RDF::RDataSource {{\r\n        private:\r\n            ULong64_t fSize = 0ULL;\r\n            std::vector<ULong64_t> fPtrs;\r\n            unsigned int fNSlots{{0U}};\r\n            const std::vector<std::string> fColNames;\r\n            const std::vector<std::string> fColTypeNames;\r\n            const std::map<std::string, std::string> fColTypesMap;\r\n            std::vector<std::pair<ULong64_t, ULong64_t>> fEntryRanges{{ }};\r\n    \r\n            {cpp_code_declare_slots}\r\n    \r\n            PyObject* fPyLookup;\r\n    \r\n            Record_t\r\n            GetColumnReadersImpl(std::string_view name, const std::type_info &id) {{\r\n                Record_t reader;\r\n    \r\n                {cpp_code_define_readers}\r\n                {{\r\n                    for (auto i : ROOT::TSeqU(fNSlots)) {{\r\n                        reader.emplace_back(nullptr);\r\n                    }}\r\n                }}\r\n                return reader;\r\n            }}\r\n    \r\n        public:\r\n            {array_data_source}(PyObject* lookup, ULong64_t size, std::initializer_list<ULong64_t> ptrs_list)\r\n              : fSize(size),\r\n                fPtrs({{ptrs_list}}),\r\n                fColNames({{{cpp_code_column_names}}}),\r\n                fColTypeNames({{{cpp_code_column_type_names}}}),\r\n                fColTypesMap({{{cpp_code_column_types_map}}}),\r\n                fPyLookup(lookup)\r\n                {{\r\n                    Py_INCREF(fPyLookup);\r\n                    {cpp_code_init_slots}\r\n                }}\r\n    \r\n                ~{array_data_source}() {{\r\n                    Py_DECREF(fPyLookup);\r\n                }}\r\n    \r\n                void SetNSlots(unsigned int nSlots) {{\r\n                    fNSlots = nSlots; // FIXME: always 1 slot for now\r\n    \r\n                    {cpp_code_resize_slots}\r\n                }}\r\n    \r\n            void Initialise() {{\r\n                // initialize fEntryRanges\r\n                const auto chunkSize = fSize / fNSlots;\r\n                auto start = 0UL;\r\n                auto end = 0UL;\r\n                for (auto i : ROOT::TSeqUL(fNSlots)) {{\r\n                    start = end;\r\n                    end += chunkSize;\r\n                    fEntryRanges.emplace_back(start, end);\r\n                    (void)i;\r\n                 }}\r\n                 fEntryRanges.back().second += fSize % fNSlots;\r\n            }}\r\n    \r\n            const std::vector<std::string> &GetColumnNames() const {{\r\n                return fColNames;\r\n            }}\r\n    \r\n            bool\r\n            HasColumn(std::string_view colName) const {{\r\n                const auto key = std::string(colName);\r\n                const auto endIt = fColTypesMap.end();\r\n                return endIt != fColTypesMap.find(key);\r\n            }}\r\n    \r\n            std::string\r\n            GetTypeName(std::string_view colName) const {{\r\n                const auto key = std::string(colName);\r\n                return fColTypesMap.at(key);\r\n            }}\r\n    \r\n            std::vector<std::pair<ULong64_t, ULong64_t>> GetEntryRanges() {{\r\n                auto entryRanges(std::move(fEntryRanges)); // empty fEntryRanges\r\n                return entryRanges;\r\n            }}\r\n    \r\n            bool SetEntry(unsigned int slot, ULong64_t entry) {{\r\n                {cpp_code_entries}\r\n                return true;\r\n            }}\r\n        }};\r\n    \r\n        ROOT::RDataFrame* MakeAwkwardArrayDS_{array_data_source}(PyObject* lookup, ULong64_t size, std::initializer_list<ULong64_t> ptrs_list) {{\r\n            return new ROOT::RDataFrame(std::make_unique<{array_data_source}>(std::forward<PyObject*>(lookup), size, ptrs_list));\r\n        }}\r\n    \r\n    }}\r\n                \"\"\"\r\n    \r\n                done = compile(cpp_code)\r\n>               assert done is True\r\nE               AssertionError\r\n\r\narray_data_source = 'AwkwardArrayDataSource_8748206908428'\r\ncpp_code   = ('\\n'\r\n 'namespace awkward {\\n'\r\n '\\n'\r\n '    class AwkwardArrayDataSource_8748206908428 final\\n'\r\n '      : public ROOT::RDF::RDataSource {\\n'\r\n '    private:\\n'\r\n '        ULong64_t fSize = 0ULL;\\n'\r\n '        std::vector<ULong64_t> fPtrs;\\n'\r\n '        unsigned int fNSlots{0U};\\n'\r\n '        const std::vector<std::string> fColNames;\\n'\r\n '        const std::vector<std::string> fColTypeNames;\\n'\r\n '        const std::map<std::string, std::string> fColTypesMap;\\n'\r\n '        std::vector<std::pair<ULong64_t, ULong64_t>> fEntryRanges{ };\\n'\r\n '\\n'\r\n '        \\n'\r\n '        ULong64_t fPtrs_one = 0;\\n'\r\n '        std::vector<std::optional<double>>  slots_one;\\n'\r\n '        std::vector<std::optional<double>*> addrs_one;\\n'\r\n '    \\n'\r\n '\\n'\r\n '        PyObject* fPyLookup;\\n'\r\n '\\n'\r\n '        Record_t\\n'\r\n '        GetColumnReadersImpl(std::string_view name, const std::type_info '\r\n '&id) {\\n'\r\n '            Record_t reader;\\n'\r\n '\\n'\r\n '            \\n'\r\n '        if (name == \"one\") {\\n'\r\n '            for (auto i : ROOT::TSeqU(fNSlots)) {\\n'\r\n '                addrs_one[i] = &slots_one[i];\\n'\r\n '                reader.emplace_back((void *)(&addrs_one[i]));\\n'\r\n '            }\\n'\r\n '        }\\n'\r\n '    else \\n'\r\n '            {\\n'\r\n '                for (auto i : ROOT::TSeqU(fNSlots)) {\\n'\r\n '                    reader.emplace_back(nullptr);\\n'\r\n '                }\\n'\r\n '            }\\n'\r\n '            return reader;\\n'\r\n '        }\\n'\r\n '\\n'\r\n '    public:\\n'\r\n '        AwkwardArrayDataSource_8748206908428(PyObject* lookup, ULong64_t '\r\n 'size, std::initializer_list<ULong64_t> ptrs_list)\\n'\r\n '          : fSize(size),\\n'\r\n '            fPtrs({ptrs_list}),\\n'\r\n '            fColNames({\"one\"}),\\n'\r\n '            fColTypeNames({\"std::optional<double>\"}),\\n'\r\n '            fColTypesMap({{ \"one\", \"std::optional<double>\" }}),\\n'\r\n '            fPyLookup(lookup)\\n'\r\n '            {\\n'\r\n '                Py_INCREF(fPyLookup);\\n'\r\n '                \\n'\r\n '        fPtrs_one = fPtrs[0];\\n'\r\n '    \\n'\r\n '            }\\n'\r\n '\\n'\r\n '            ~AwkwardArrayDataSource_8748206908428() {\\n'\r\n '                Py_DECREF(fPyLookup);\\n'\r\n '            }\\n'\r\n '\\n'\r\n '            void SetNSlots(unsigned int nSlots) {\\n'\r\n '                fNSlots = nSlots; // FIXME: always 1 slot for now\\n'\r\n '\\n'\r\n '                \\n'\r\n '        slots_one.resize(fNSlots);\\n'\r\n '        addrs_one.resize(fNSlots);\\n'\r\n '    \\n'\r\n '            }\\n'\r\n '\\n'\r\n '        void Initialise() {\\n'\r\n '            // initialize fEntryRanges\\n'\r\n '            const auto chunkSize = fSize / fNSlots;\\n'\r\n '            auto start = 0UL;\\n'\r\n '            auto end = 0UL;\\n'\r\n '            for (auto i : ROOT::TSeqUL(fNSlots)) {\\n'\r\n '                start = end;\\n'\r\n '                end += chunkSize;\\n'\r\n '                fEntryRanges.emplace_back(start, end);\\n'\r\n '                (void)i;\\n'\r\n '             }\\n'\r\n '             fEntryRanges.back().second += fSize % fNSlots;\\n'\r\n '        }\\n'\r\n '\\n'\r\n '        const std::vector<std::string> &GetColumnNames() const {\\n'\r\n '            return fColNames;\\n'\r\n '        }\\n'\r\n '\\n'\r\n '        bool\\n'\r\n '        HasColumn(std::string_view colName) const {\\n'\r\n '            const auto key = std::string(colName);\\n'\r\n '            const auto endIt = fColTypesMap.end();\\n'\r\n '            return endIt != fColTypesMap.find(key);\\n'\r\n '        }\\n'\r\n '\\n'\r\n '        std::string\\n'\r\n '        GetTypeName(std::string_view colName) const {\\n'\r\n '            const auto key = std::string(colName);\\n'\r\n '            return fColTypesMap.at(key);\\n'\r\n '        }\\n'\r\n '\\n'\r\n '        std::vector<std::pair<ULong64_t, ULong64_t>> GetEntryRanges() {\\n'\r\n '            auto entryRanges(std::move(fEntryRanges)); // empty '\r\n 'fEntryRanges\\n'\r\n '            return entryRanges;\\n'\r\n '        }\\n'\r\n '\\n'\r\n '        bool SetEntry(unsigned int slot, ULong64_t entry) {\\n'\r\n '            \\n'\r\n '        slots_one[slot] = awkward::BitMaskedArray_RdvW8Ep8HwU(0, fSize, 0, '\r\n 'reinterpret_cast<ssize_t*>(fPtrs_one))[entry];\\n'\r\n '    \\n'\r\n '            return true;\\n'\r\n '        }\\n'\r\n '    };\\n'\r\n '\\n'\r\n '    ROOT::RDataFrame* '\r\n 'MakeAwkwardArrayDS_AwkwardArrayDataSource_8748206908428(PyObject* lookup, '\r\n 'ULong64_t size, std::initializer_list<ULong64_t> ptrs_list) {\\n'\r\n '        return new '\r\n 'ROOT::RDataFrame(std::make_unique<AwkwardArrayDataSource_8748206908428>(std::forward<PyObject*>(lookup), '\r\n 'size, ptrs_list));\\n'\r\n '    }\\n'\r\n '\\n'\r\n '}\\n'\r\n '            ')\r\ncpp_code_column_names = '\"one\"'\r\ncpp_code_column_type_names = '\"std::optional<double>\"'\r\ncpp_code_column_types_map = '{ \"one\", \"std::optional<double>\" }'\r\ncpp_code_declare_slots = ('\\n'\r\n '        ULong64_t fPtrs_one = 0;\\n'\r\n '        std::vector<std::optional<double>>  slots_one;\\n'\r\n '        std::vector<std::optional<double>*> addrs_one;\\n'\r\n '    ')\r\ncpp_code_define_readers = ('\\n'\r\n '        if (name == \"one\") {\\n'\r\n '            for (auto i : ROOT::TSeqU(fNSlots)) {\\n'\r\n '                addrs_one[i] = &slots_one[i];\\n'\r\n '                reader.emplace_back((void *)(&addrs_one[i]));\\n'\r\n '            }\\n'\r\n '        }\\n'\r\n '    else ')\r\ncpp_code_entries = ('\\n'\r\n '        slots_one[slot] = awkward::BitMaskedArray_RdvW8Ep8HwU(0, fSize, 0, '\r\n 'reinterpret_cast<ssize_t*>(fPtrs_one))[entry];\\n'\r\n '    ')\r\ncpp_code_init_slots = '\\n        fPtrs_one = fPtrs[0];\\n    '\r\ncpp_code_resize_slots = '\\n        slots_one.resize(fNSlots);\\n        addrs_one.resize(fNSlots);\\n    '\r\ndone       = False\r\nk          = 1\r\nkey        = 'one'\r\nlayouts    = {'one': <BitMaskedArray valid_when='true' lsb_order='false' len='13'>\r\n    <mask><Index dtype='uint8' len='2'>[240 168]</Index></mask>\r\n    <content><NumpyArray dtype='float64' len='14'>\r\n        [0.  1.  2.  3.  4.  5.  6.  7.  1.1 2.2 3.3 4.4 5.5 6.6]\r\n    </NumpyArray></content>\r\n</BitMaskedArray>}\r\nself       = <awkward._v2._connect.rdataframe.to_rdataframe.DataSourceGenerator object at 0x7f4d9cde6ca0>\r\n\r\nawkward/_v2/_connect/rdataframe/to_rdataframe.py:288: AssertionError\r\n----------------------------- Captured stderr call -----------------------------\r\ninput_line_310:4:11: error: redefinition of 'AwkwardArrayDataSource_8748206908428'\r\n    class AwkwardArrayDataSource_8748206908428 final\r\n          ^\r\ninput_line_298:4:11: note: previous definition is here\r\n    class AwkwardArrayDataSource_8748206908428 final\r\n          ^\r\ninput_line_310:115:23: error: redefinition of 'MakeAwkwardArrayDS_AwkwardArrayDataSource_8748206908428'\r\n    ROOT::RDataFrame* MakeAwkwardArrayDS_AwkwardArrayDataSource_8748206908428(PyObject* lookup, ULong64_t size, std::initializer_list<ULong64_t> ptrs_list) {\r\n                      ^\r\ninput_line_298:115:23: note: previous definition is here\r\n    ROOT::RDataFrame* MakeAwkwardArrayDS_AwkwardArrayDataSource_8748206908428(PyObject* lookup, ULong64_t size, std::initializer_list<ULong64_t> ptrs_list) {\r\n                      ^\r\n```\r\n\r\n</details>\r\n\r\n@ianna, do you have any idea how a class might accidentally get redefined? I'm a little stumped as to why it happened on my machine and not on yours (MacOS vs Linux?) and not in the tests (pip install vs `localbuild.py`?). I [manually ran the tests](https://dev.azure.com/jpivarski/Scikit-HEP/_build/results?buildId=10419&view=results), just to check it.\r\n\r\nCould it be that the `hash` is missing some value that it should depend on? Like, is the `hash` calculation for `AwkwardArrayDataSource` going recursively through all the things it depends on, or is it only checking the top level? If so, then just putting a check before `compile` to avoid recompiling a previously existing `AwkwardArrayDataSource` would be the wrong thing to do because that would prevent different data sources from having different code, and the result would be confusing (probably segfaults, as they try to cast the data to the wrong types). If, on the other hand, the second class declaration really is the same code, then it should be prevented from being recompiled.\r\n\r\nActually, I'm no longer stumped: it's an intermittent problem: running several times, I haven't reproduced it. I do not believe that this was a hash collision (that I happened to get with probability `5.421010862427522e-20`). Also, it's a rather low number to be a 64-bit hash: `8748206908428 << 18446744073709551615`. Are the hashes being calculated correctly?\r\n\r\nSince this is not a reproducible bug, the only thing you can do is scan the code carefully, looking for any state that the AwkwardArrayDataSource depends on that might be missing from the hash calculation. If you don't see any potential issues, then you can close this bug report, at least until we see it again.",
  "closed_at":"2022-06-16T19:01:56Z",
  "comments":2,
  "created_at":"2022-06-13T16:45:14Z",
  "id":1269699187,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5LrhJz",
  "number":1501,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Same AwkwardArrayDataSouce is (attempted to be) compiled twice",
  "updated_at":"2022-06-16T19:01:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"#1406 ",
  "closed_at":"2022-06-13T18:22:28Z",
  "comments":2,
  "created_at":"2022-06-13T17:48:26Z",
  "draft":false,
  "id":1269760884,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45lEGU",
  "number":1502,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-13T18:22:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix for issue 1406",
  "updated_at":"2022-06-13T18:39:28Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/pre-commit/pre-commit-hooks: v4.2.0 \u2192 v4.3.0](https://github.com/pre-commit/pre-commit-hooks/compare/v4.2.0...v4.3.0)\n- [github.com/asottile/pyupgrade: v2.32.1 \u2192 v2.34.0](https://github.com/asottile/pyupgrade/compare/v2.32.1...v2.34.0)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-06-16T19:03:58Z",
  "comments":1,
  "created_at":"2022-06-13T20:54:04Z",
  "draft":false,
  "id":1269944005,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45lr2P",
  "number":1503,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-16T19:03:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-06-16T19:03:59Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Description of new feature\r\n\r\nRunning list of (discovered by trying in dask-awkward) missing functions:\r\n- [ ] `ones_like`\r\n- [ ] `zeros_like`\r\n- [ ] `firsts`\r\n\r\nExample failure:\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> ak.ones_like(ak.Array(ak.Array([1, 2, 3]).layout.typetracer))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/ddavis/.pyenv/versions/dask-dev/lib/python3.10/site-packages/awkward/_v2/operations/ak_ones_like.py\", line 30, in ones_like\r\n    return _impl(array, highlevel, behavior, dtype)\r\n  File \"/Users/ddavis/.pyenv/versions/dask-dev/lib/python3.10/site-packages/awkward/_v2/operations/ak_ones_like.py\", line 34, in _impl\r\n    return ak._v2.operations.ak_full_like._impl(array, 1, highlevel, behavior, dtype)\r\n  File \"/Users/ddavis/.pyenv/versions/dask-dev/lib/python3.10/site-packages/awkward/_v2/operations/ak_full_like.py\", line 177, in _impl\r\n    out = layout.recursively_apply(action)\r\n  File \"/Users/ddavis/.pyenv/versions/dask-dev/lib/python3.10/site-packages/awkward/_v2/contents/content.py\", line 1326, in recursively_apply\r\n    return self._recursively_apply(\r\n  File \"/Users/ddavis/.pyenv/versions/dask-dev/lib/python3.10/site-packages/awkward/_v2/contents/numpyarray.py\", line 1296, in _recursively_apply\r\n    result = action(\r\n  File \"/Users/ddavis/.pyenv/versions/dask-dev/lib/python3.10/site-packages/awkward/_v2/operations/ak_full_like.py\", line 164, in action\r\n    nplike.ones_like(original),\r\n  File \"/Users/ddavis/.pyenv/versions/dask-dev/lib/python3.10/site-packages/awkward/_v2/_typetracer.py\", line 531, in ones_like\r\n    raise ak._v2._util.error(NotImplementedError)\r\nNotImplementedError:\r\n```",
  "closed_at":"2022-06-16T19:42:39Z",
  "comments":2,
  "created_at":"2022-06-14T14:36:47Z",
  "id":1270910770,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5LwI8y",
  "number":1504,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.* support for typetracer arrays",
  "updated_at":"2022-06-16T19:42:39Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR just implements some of the missing `TypeTracer` methods to fix #1504\r\n\r\nChanges:\r\n- [x] Remove `unset` from `TypeTracer` signatures - we should support explicit `None`\r\n- [x] Extend `from_array` to handle literal sequence of primitives\r\n- [x] Add `_like` methods",
  "closed_at":"2022-06-16T19:42:40Z",
  "comments":6,
  "created_at":"2022-06-15T11:44:31Z",
  "draft":false,
  "id":1272111257,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45s4p2",
  "number":1505,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-16T19:42:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: add missing `_like` methods to `TypeTracer`",
  "updated_at":"2022-06-16T20:38:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-06-21T19:22:16Z",
  "comments":2,
  "created_at":"2022-06-16T14:08:57Z",
  "draft":false,
  "id":1273617714,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws45x3wN",
  "number":1508,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-21T19:22:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"from rdataframe for awkward arrays",
  "updated_at":"2022-06-21T19:22:17Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.6.1 to 2.7.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>2.7.0</h2>\n<ul>\n<li>\ud83c\udf1f Added support for the new <code>manylinux_2_28</code> images. These new images are based on AlmaLinux, the community-driven successor to CentOS, unlike <code>manylinux_2_24</code>, which was based on Debian. To build on these images, set your <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#linux-image\"><code>CIBW_MANYLINUX_*_IMAGE</code></a> option to <code>manylinux_2_28</code>. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1026\">#1026</a>)</li>\n<li>\ud83d\udc1b Fix a bug where tests were not being run on CPython 3.11 (when CIBW_PRERELEASE_PYTHONS was set) (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1138\">#1138</a>)</li>\n<li>\u2728 You can now build Linux wheels on Windows, as long as you have Docker installed and set to 'Linux containers' (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1117\">#1117</a>)</li>\n<li>\ud83d\udc1b Fix a bug on macOS that caused cibuildwheel to crash trying to overwrite a previously-built wheel of the same name (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1129\">#1129</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.7.0</h3>\n<p><em>17 June 2022</em></p>\n<ul>\n<li>\ud83c\udf1f Added support for the new <code>manylinux_2_28</code> images. These new images are based on AlmaLinux, the community-driven successor to CentOS, unlike manylinux_2_24, which was based on Debian. To build on these images, set your <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#linux-image\"><code>CIBW_MANYLINUX_*_IMAGE</code></a> option to <code>manylinux_2_28</code>. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1026\">#1026</a>)</li>\n<li>\ud83d\udc1b Fix a bug where tests were not being run on CPython 3.11 (when CIBW_PRERELEASE_PYTHONS was set) (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1138\">#1138</a>)</li>\n<li>\u2728 You can now build Linux wheels on Windows, as long as you have Docker installed and set to 'Linux containers' (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1117\">#1117</a>)</li>\n<li>\ud83d\udc1b Fix a bug on macOS that caused cibuildwheel to crash trying to overwrite a previously-built wheel of the same name. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1129\">#1129</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/cc56a140d2e514e2a46bdf6640b035917ee53b77\"><code>cc56a14</code></a> Bump version: v2.7.0</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/133197e81bced0c55b556245efdbf674dfadaad5\"><code>133197e</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1026\">#1026</a> from mayeut/manylinux_2_28</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/2bc52972e3a08cb9ed90901c52d90d4c5d6dc718\"><code>2bc5297</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1117\">#1117</a> from Darandos/linux-on-windows</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/c022fa33c0f1bcc855f3863fa18b3266f97574df\"><code>c022fa3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1129\">#1129</a> from dlech/patch-1</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/6458604c994f5dd2cb3f9a16565001414e504152\"><code>6458604</code></a> feature: add manylinux_2_28 support</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/9f4303ba2ccaf3f6ae7ed7593b5067b491f113af\"><code>9f4303b</code></a> use FileNotFoundError instead of OSError</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/e6513a9b281fbdb12c0c2b82b263f47c135af66e\"><code>e6513a9</code></a> use Path.unlink() instead of os.unlink()</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/f1c2d6c4f9d3310313907ebcf83ca0836eb6a02f\"><code>f1c2d6c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1133\">#1133</a> from pypa/update-dependencies-pr</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/cd7ea913e6275034ab813c9f73af6c572522d914\"><code>cd7ea91</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1138\">#1138</a> from nitzmahone/prerelease_python_test_fix</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/de0a9b33e7e58f35471404014295b57fb4b23812\"><code>de0a9b3</code></a> Update dependencies</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/2.6.1...2.7.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.6.1&new-version=2.7.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-06-20T20:27:13Z",
  "comments":1,
  "created_at":"2022-06-20T17:37:19Z",
  "draft":false,
  "id":1277222409,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws459v6u",
  "number":1510,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-20T20:27:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump pypa/cibuildwheel from 2.6.1 to 2.7.0",
  "updated_at":"2022-06-20T20:27:14Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Description of new feature\n\nTake the following rather surprising but currently correct behavior:\r\n```\r\n>>> import awkward as ak\r\n>>> a = ak.zip({\"x\": ak.Array([[1], [2, 3], [4, 5, 6]]), \"y\": ak.Array([[10], [20, 30], [40, 50, 60]])})\r\n>>> a.x = a.x *3\r\n>>> a.x\r\n<Array [[3], [6, 9], [12, 15, 18]] type='3 * var * int64'>\r\n>>> a[\"x\"]\r\n<Array [[1], [2, 3], [4, 5, 6]] type='3 * var * int64'>\r\n```\r\nIt is surprising to users that `a.x` and `a[\"x\"]` are different, but expected because the array set by `setattr` ends up masking the underlying array already in the layout of `a`. The recommended way to assign arrays to existing records is to use `setitem` as shown:\r\n```\r\n>>> a[\"y\"] = a.y *3\r\n>>> a.y\r\n<Array [[30], [60, 90], [120, 150, 180]] type='3 * var * int64'>\r\n>>> a[\"y\"]\r\n<Array [[30], [60, 90], [120, 150, 180]] type='3 * var * int64'>\r\n```\r\nthen the `getattr` and `getitem` methods behave the same.\r\n\r\nI don't see a lot of legitimate use cases for using `setattr` with array arguments. In these cases I think we should raise a warning or error.",
  "closed_at":"2022-08-09T23:54:12Z",
  "comments":5,
  "created_at":"2022-06-21T15:55:24Z",
  "id":1278657940,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5MNsWU",
  "number":1511,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Raise warning on setattr for assigning arrays to records",
  "updated_at":"2022-08-09T23:54:12Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-06-22T14:11:24Z",
  "comments":1,
  "created_at":"2022-06-22T13:34:21Z",
  "draft":false,
  "id":1280153463,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46HweU",
  "number":1513,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-22T14:11:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add typeparser to v2.",
  "updated_at":"2022-06-22T14:11:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"A more proper fix than #1513. (See continuing issues in scikit-hep/uproot5/pull/620.)",
  "closed_at":"2022-06-23T22:34:58Z",
  "comments":2,
  "created_at":"2022-06-22T22:44:58Z",
  "draft":false,
  "id":1281143832,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46LKfI",
  "number":1514,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-23T22:34:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Update type-parser for v2",
  "updated_at":"2022-06-23T22:34:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Inspired by https://github.com/scikit-hep/awkward/pull/1514#issuecomment-1164544981.",
  "closed_at":"2022-06-23T19:48:36Z",
  "comments":1,
  "created_at":"2022-06-23T19:16:34Z",
  "draft":false,
  "id":1282834326,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46RBsN",
  "number":1515,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-23T19:48:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Swap 'merged dtype same as NumPy' test of v1 for test of v2.",
  "updated_at":"2022-06-23T21:43:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"We can write any number of patterns here. I chose `recursive-include src/awkward/_v2/cpp-headers *.h` because it's explicit and simple.\r\n\r\nWe could just include any headers found in the source like we do for `cpp` files. Right now, I'm tempted to keep it very narrow, as I imagine we'll modify this build tooling in the near future once `scikit-build` gets Hatch(?) support?",
  "closed_at":"2022-06-23T21:56:58Z",
  "comments":2,
  "created_at":"2022-06-23T21:11:08Z",
  "draft":false,
  "id":1282944759,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46RZUQ",
  "number":1516,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-23T21:56:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Package: fix MANIFEST to include cpp-headers",
  "updated_at":"2022-06-23T22:13:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-10-28T20:39:41Z",
  "comments":4,
  "created_at":"2022-06-24T16:48:33Z",
  "draft":true,
  "id":1283964837,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46UxY7",
  "number":1517,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Growable Buffer for ForthMachine",
  "updated_at":"2022-10-28T20:39:44Z",
  "user":"MDQ6VXNlcjUwNTc3ODA5"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"These aren't needed anymore, `v2` will no longer update to `v3.0.0`, but only to `v3`, etc. ",
  "closed_at":"2022-06-29T12:14:44Z",
  "comments":2,
  "created_at":"2022-06-29T05:02:49Z",
  "draft":false,
  "id":1288175462,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46ieq2",
  "number":1518,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-29T12:14:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: remove unneeded lines",
  "updated_at":"2022-06-29T12:14:45Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 2 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/upload-artifact/releases\">actions/upload-artifact's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Update default runtime to node16 (<a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/293\">#293</a>)</li>\n<li>Update package-lock.json file version to 2 (<a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/302\">#302</a>)</li>\n</ul>\n<h3>Breaking Changes</h3>\n<p>With the update to Node 16, all scripts will now be run with Node 16 rather than Node 12.</p>\n<h2>v2.3.1</h2>\n<p>Fix for empty fails on Windows failing on upload <a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/281\">#281</a></p>\n<h2>v2.3.0 Upload Artifact</h2>\n<ul>\n<li>Optimizations for faster uploads of larger files that are already compressed</li>\n<li>Significantly improved logging when there are chunked uploads</li>\n<li>Clarifications in logs around the upload size and prohibited characters that aren't allowed in the artifact name or any uploaded files</li>\n<li>Various other small bugfixes &amp; optimizations</li>\n</ul>\n<h2>v2.2.4</h2>\n<ul>\n<li>Retry on HTTP 500 responses from the service</li>\n</ul>\n<h2>v2.2.3</h2>\n<ul>\n<li>Fixes for proxy related issues</li>\n</ul>\n<h2>v2.2.2</h2>\n<ul>\n<li>Improved retryability and error handling</li>\n</ul>\n<h2>v2.2.1</h2>\n<ul>\n<li>Update used actions/core package to the latest version</li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li>Support for artifact retention</li>\n</ul>\n<h2>v2.1.4</h2>\n<ul>\n<li>Add Third Party License Information</li>\n</ul>\n<h2>v2.1.3</h2>\n<ul>\n<li>Use updated version of the <code>@action/artifact</code> NPM package</li>\n</ul>\n<h2>v2.1.2</h2>\n<ul>\n<li>Increase upload chunk size from 4MB to 8MB</li>\n<li>Detect case insensitive file uploads</li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Fix for certain symlinks not correctly being identified as directories before starting uploads</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li>Support for uploading artifacts with multiple paths</li>\n<li>Support for using exclude paths</li>\n<li>Updates to dependencies</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/3cea5372237819ed00197afe530f5a7ea3e805c8\"><code>3cea537</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/327\">#327</a> from actions/robherley/artifact-1.1.0</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/849aa7758a428ee22be38de371b49c8bd57c4b9d\"><code>849aa77</code></a> nvm use 12 &amp; npm run release</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/4d3986961d0423ba9a593efb490a2960eb65f43b\"><code>4d39869</code></a> recompile with correct ncc version</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/2e0d362ec5cf81e334dda822c49c96dcd4b7df2c\"><code>2e0d362</code></a> bump <code>@\u200bactions/artifact</code> to 1.1.0</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/09a5d6a283da3e7c9f3253a5d4cdab2347712a66\"><code>09a5d6a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/320\">#320</a> from actions/dependabot/npm_and_yarn/ansi-regex-4.1.1</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/189315d9106f43a2a8eb60836608bb96b1f69d77\"><code>189315d</code></a> Bump ansi-regex from 4.1.0 to 4.1.1</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/d159c2d80bf32e77611286e4d71bfe6d15208d88\"><code>d159c2d</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/297\">#297</a> from actions/dependabot/npm_and_yarn/ajv-6.12.6</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/c26a7ba4b5dbaecea906fec3b7d2c0c86f1ccaba\"><code>c26a7ba</code></a> Bump ajv from 6.11.0 to 6.12.6</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/6ed6c729229a623bcb1fdd75903dc6e436b3d0a7\"><code>6ed6c72</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/303\">#303</a> from actions/dependabot/npm_and_yarn/yargs-parser-13.1.2</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/2aeee267b2cb1f938c861a763b9770ee6e921dc3\"><code>2aeee26</code></a> Bump yargs-parser from 13.1.1 to 13.1.2</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/upload-artifact/compare/v2...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/upload-artifact&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-06-29T12:53:47Z",
  "comments":1,
  "created_at":"2022-06-29T12:15:04Z",
  "draft":false,
  "id":1288634986,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46kA48",
  "number":1519,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-29T12:53:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump actions/upload-artifact from 2 to 3",
  "updated_at":"2022-06-29T12:53:48Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [actions/checkout](https://github.com/actions/checkout) from 2 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<ul>\n<li>Updated to the node16 runtime by default\n<ul>\n<li>This requires a minimum <a href=\"https://github.com/actions/runner/releases/tag/v2.285.0\">Actions Runner</a> version of v2.285.0 to run, which is by default available in GHES 3.4 or later.</li>\n</ul>\n</li>\n</ul>\n<h2>v2.4.2</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Add set-safe-directory input to allow customers to take control. (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/770\">#770</a>) by <a href=\"https://github.com/TingluoHuang\"><code>@\u200bTingluoHuang</code></a> in <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/776\">actions/checkout#776</a></li>\n<li>Prepare changelog for v2.4.2. by <a href=\"https://github.com/TingluoHuang\"><code>@\u200bTingluoHuang</code></a> in <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/778\">actions/checkout#778</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v2...v2.4.2\">https://github.com/actions/checkout/compare/v2...v2.4.2</a></p>\n<h2>v2.4.1</h2>\n<ul>\n<li>Fixed an issue where checkout failed to run in container jobs due to the new git setting <code>safe.directory</code></li>\n</ul>\n<h2>v2.4.0</h2>\n<ul>\n<li>Convert SSH URLs like <code>org-&lt;ORG_ID&gt;@github.com:</code> to <code>https://github.com/</code> - <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/621\">pr</a></li>\n</ul>\n<h2>v2.3.5</h2>\n<p>Update dependencies</p>\n<h2>v2.3.4</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/379\">Add missing <code>await</code>s</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/360\">Swap to Environment Files</a></li>\n</ul>\n<h2>v2.3.3</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/345\">Remove Unneeded commit information from build logs</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/326\">Add Licensed to verify third party dependencies</a></li>\n</ul>\n<h2>v2.3.2</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/320\">Add Third Party License Information to Dist Files</a></p>\n<h2>v2.3.1</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></p>\n<h2>v2.3.0</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></p>\n<h2>v2.2.0</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></p>\n<h2>v2.1.1</h2>\n<p>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</p>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v3.0.2</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/770\">Add input <code>set-safe-directory</code></a></li>\n</ul>\n<h2>v3.0.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/762\">Fixed an issue where checkout failed to run in container jobs due to the new git setting <code>safe.directory</code></a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/744\">Bumped various npm package versions</a></li>\n</ul>\n<h2>v3.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/689\">Update to node 16</a></li>\n</ul>\n<h2>v2.3.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></li>\n</ul>\n<h2>v2.3.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n<h2>v2.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/108\">Do not pass cred on command line</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/107\">Add input persist-credentials</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/104\">Fallback to REST API to download repo</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/2541b1294d2704b0964813337f33b291d3f8596b\"><code>2541b12</code></a> Prepare changelog for v3.0.2. (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/777\">#777</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/0ffe6f9c5599e73776da5b7f113e994bc0a76ede\"><code>0ffe6f9</code></a> Add set-safe-directory input to allow customers to take control. (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/770\">#770</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/dcd71f646680f2efd8db4afa5ad64fdcba30e748\"><code>dcd71f6</code></a> Enforce safe directory (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/762\">#762</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/add3486cc3b55d4a5e11c8045058cef96538edc7\"><code>add3486</code></a> Patch to fix the dependbot alert. (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/744\">#744</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/5126516654c75f76bca1de45dd82a3006d8890f9\"><code>5126516</code></a> Bump minimist from 1.2.5 to 1.2.6 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/741\">#741</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/d50f8ea76748df49594d9b109b614f3b4db63c71\"><code>d50f8ea</code></a> Add v3.0 release information to changelog (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/740\">#740</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/2d1c1198e79c30cca5c3957b1e3b65ce95b5356e\"><code>2d1c119</code></a> update test workflows to checkout v3 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/709\">#709</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/a12a3943b4bdde767164f792f33f40b04645d846\"><code>a12a394</code></a> update readme for v3 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/708\">#708</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8f9e05e482293f862823fcca12d9eddfb3723131\"><code>8f9e05e</code></a> Update to node 16 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/689\">#689</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v2...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-06-29T16:35:26Z",
  "comments":2,
  "created_at":"2022-06-29T12:15:07Z",
  "draft":false,
  "id":1288635070,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46kA6M",
  "number":1520,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-29T16:35:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump actions/checkout from 2 to 3",
  "updated_at":"2022-06-29T16:35:27Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [actions/download-artifact](https://github.com/actions/download-artifact) from 2 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/download-artifact/releases\">actions/download-artifact's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Update default runtime to node16 (<a href=\"https://github-redirect.dependabot.com/actions/download-artifact/pull/134\">actions/download-artifact#134</a>)</li>\n<li>Update package-lock.json file version to 2 (<a href=\"https://github-redirect.dependabot.com/actions/download-artifact/pull/136\">actions/download-artifact#136</a>)</li>\n</ul>\n<h3>Breaking Changes</h3>\n<p>With the update to Node 16, all scripts will now be run with Node 16 rather than Node 12.</p>\n<h2>v2.1.0 Download Artifact</h2>\n<ul>\n<li>Improved output &amp; logging</li>\n<li>Fixed issue where downloading all artifacts could cause display percentages to be over 100%</li>\n<li>Various small bug fixes &amp; improvements</li>\n</ul>\n<h2>v2.0.10</h2>\n<ul>\n<li>Retry on HTTP 500 responses from the service</li>\n</ul>\n<h2>v2.0.9</h2>\n<ul>\n<li>Fixes to proxy related issues</li>\n</ul>\n<h2>v2.0.8</h2>\n<ul>\n<li>Improvements to retryability if an error is encountered during artifact download</li>\n</ul>\n<h2>v2.0.7 download-artifact</h2>\n<ul>\n<li>Improved download retry-ability if a partial download is encountered</li>\n</ul>\n<h2>v2.0.6</h2>\n<p>Update actions/core NPM package that is used internally</p>\n<h2>v2.0.5</h2>\n<ul>\n<li>Add Third Party License Information</li>\n</ul>\n<h2>v2.0.4</h2>\n<ul>\n<li>Use the latest version of the <code>@actions/artifact</code> NPM package</li>\n</ul>\n<h2>v2.0.3</h2>\n<ul>\n<li>Misc improvements</li>\n</ul>\n<h2>v2.0.2</h2>\n<ul>\n<li>Support for tilde expansion</li>\n</ul>\n<h2>v2.0.1</h2>\n<ul>\n<li>Download path output</li>\n<li>Improved logging</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/download-artifact/commit/fb598a63ae348fa914e94cd0ff38f362e927b741\"><code>fb598a6</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/download-artifact/issues/136\">#136</a> from actions/jtamsut/update-lockfile-version</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/a4a09c5d7eb5932e0e6c4e77a434738189a24f1b\"><code>a4a09c5</code></a> regenerate index.js</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/9acf51df7946118a04918663acc5d955f49de177\"><code>9acf51d</code></a> regenerate package lock</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/882107232564f8bc8c5083706e009246f11aa871\"><code>8821072</code></a> upgrade artifact version</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/b8bbd3b64f298f12cfabf7d85ee4e716714eae3b\"><code>b8bbd3b</code></a> regenerate lockfile</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/6ee3d963e5a7ed7dac02925e126c37e459c36aa6\"><code>6ee3d96</code></a> revert artifact version</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/d4793f4e27ec52069836c96d310f815ffa48176c\"><code>d4793f4</code></a> update docs for v3</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/2d338d2145c33c497f1f4f574ca1eb88e1061a8e\"><code>2d338d2</code></a> upgrade package to v3</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/360d0830b5796c983178d8073e39063e8d32bc46\"><code>360d083</code></a> update dependency on artifact lib</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/d9b73cccacd09ac21cc34b82578e6cbb1b4e2539\"><code>d9b73cc</code></a> update lock file</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/download-artifact/compare/v2...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/download-artifact&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-06-29T16:37:40Z",
  "comments":3,
  "created_at":"2022-06-29T12:15:09Z",
  "draft":false,
  "id":1288635144,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46kA7S",
  "number":1521,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-06-29T16:37:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump actions/download-artifact from 2 to 3",
  "updated_at":"2022-06-29T19:06:06Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"as discussed with @jpivarski this restores a config.py, but it defines only header part as follows (no libraries):\r\n\r\n```\r\n% python -m awkward._v2.config\r\n% python -m awkward._v2.config --cflags\r\n-std=c++17 -I/Users/yana/Projects/PR1522/awkward/awkward/src/_v2/cpp-headers\r\n% python -m awkward._v2.config --cflags-only-I\r\n-I/Users/yana/Projects/PR1522/awkward/awkward/src/_v2/cpp-headers\r\n% python -m awkward._v2.config --incdir       \r\n/Users/yana/Projects/PR1522/awkward/awkward/src/_v2/cpp-headers\r\n```",
  "closed_at":"2022-07-01T07:40:05Z",
  "comments":2,
  "created_at":"2022-06-30T15:15:32Z",
  "draft":false,
  "id":1290285160,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46pkHc",
  "number":1523,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-01T07:40:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"add C++ headers-only distribution configuration",
  "updated_at":"2022-07-01T07:40:06Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"extract common code to a separate header file",
  "closed_at":"2022-07-01T12:56:13Z",
  "comments":3,
  "created_at":"2022-07-01T09:59:44Z",
  "draft":false,
  "id":1291190563,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46smcu",
  "number":1524,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-01T12:56:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"restructure cpp headers",
  "updated_at":"2022-07-01T12:56:14Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nWhen an Awkward Array with missing values in it is converted to NumPy with [ak.to_numpy](https://awkward-array.readthedocs.io/en/latest/_auto/ak.to_numpy.html) and `allow_missing=True`, the return type is `np.ma.MaskedArray` with `mask[i] = True` for entries `i` corresponding to missing values. The `data[i]` for those `i` are uninitialized or otherwise undefined. That would be fine if MaskedArray were an iron-clad thing that never let you see the `data[i]` for which `mask[i]` is `True`, but it's quite easy to look at these things, and even\r\n\r\n```python\r\n>>> np.asarray(np.ma.MaskedArray([0, 1, 2, 3], [False, False, True, True]))\r\narray([0, 1, 2, 3])\r\n```\r\n\r\nSo MaskedArrays are [very leaky](https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/).\r\n\r\nInstead of leaving `data[i]` for these `i` uninitialized/undefined, we should ensure that they correspond to a common value. My preferred solution is:\r\n\r\n   * These `data[i]` are `np.nan` for floating-point types, `np.iinfo(dtype).max` for integer types, datetimes, and timedeltas, empty strings for strings, and I guess `False` for boolean.\r\n\r\nAll of these values except `np.nan` could be considered \"good data\"\u2014they're in-band sentinels\u2014but they were _supposed to be_ behind a mask anyway. Even with `np.nan`, there's a distinction in Awkward Array between `np.nan` and `None` that gets lost when the mask is taken away by somebody else. Hey, we did everything we could.\r\n\r\nAnother solution is:\r\n\r\n   * Set `data.dtype=object`, so that we can put `None` values in `data[i]` at each `i` for which `mask[i] = True`.\r\n\r\nThis solution boxes all of the numbers, a big performance hit, just in case someone disregards the `mask` that we put in place to say that these `i` aren't valid. I don't think that's the right thing to do.",
  "closed_at":"2022-07-07T13:59:17Z",
  "comments":1,
  "created_at":"2022-07-01T19:37:47Z",
  "id":1291768634,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5M_tM6",
  "number":1525,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"When ak.to_numpy makes a np.ma.MaskedArray, the values behind the mask must be initialized",
  "updated_at":"2022-07-07T13:59:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-07-29T14:48:08Z",
  "comments":1,
  "created_at":"2022-07-04T15:07:04Z",
  "draft":true,
  "id":1293293210,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws46zgY9",
  "number":1526,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"multiple columns from_rdataframe",
  "updated_at":"2022-09-01T12:33:11Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/psf/black: 22.3.0 \u2192 22.6.0](https://github.com/psf/black/compare/22.3.0...22.6.0)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-07-09T12:28:48Z",
  "comments":1,
  "created_at":"2022-07-04T20:46:51Z",
  "draft":false,
  "id":1293557547,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws460YI7",
  "number":1527,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-09T12:28:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-07-09T12:28:49Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-07-14T14:18:33Z",
  "comments":3,
  "created_at":"2022-07-05T09:54:42Z",
  "draft":true,
  "id":1294067933,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws461-_y",
  "number":1528,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"configure cpp header-only tests",
  "updated_at":"2022-09-01T12:32:37Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"thorough testing of a `GrowableBuffer` from [#1494](https://github.com/scikit-hep/awkward/pull/1535)",
  "closed_at":"2022-07-11T14:23:19Z",
  "comments":4,
  "created_at":"2022-07-05T15:36:22Z",
  "draft":true,
  "id":1294462798,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws463T_F",
  "number":1529,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"array builder with new growable buffer",
  "updated_at":"2022-09-01T12:33:27Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nIn scikit-hep/uproot5#620, a test named `test_gohep_output_file` is failing in `tolist`:\r\n\r\n```\r\n    with uproot.open(skhep_testdata.data_path(\"uproot-issue413.root\"))[\r\n        \"mytree\"\r\n    ] as tree:\r\n        assert tree[\"Str\"].array().tolist()\r\n\r\n                                   ^^^^^^^^\r\n```\r\n\r\nIt looks like an Awkward bug, to be fixed here. (Uproot has a work-around, so we won't see it again unless we actively look for it. Hence this bug report.)",
  "closed_at":"2022-08-11T15:08:32Z",
  "comments":0,
  "created_at":"2022-07-05T21:16:20Z",
  "id":1294779258,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5NLMN6",
  "number":1530,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`tolist` bug revealed by Uproot 5 testing",
  "updated_at":"2022-08-11T15:08:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR aims to fix #1525 ",
  "closed_at":"2022-07-07T13:59:17Z",
  "comments":1,
  "created_at":"2022-07-06T11:32:51Z",
  "draft":false,
  "id":1295698384,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws467g-S",
  "number":1531,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-07T13:59:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: Initialize values behind the mask in ak.to_numpy",
  "updated_at":"2022-07-07T13:59:18Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR aims to fix #1482 ",
  "closed_at":"2022-07-08T07:16:26Z",
  "comments":1,
  "created_at":"2022-07-06T12:49:18Z",
  "draft":false,
  "id":1295794781,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4672Ng",
  "number":1532,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-08T07:16:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: Error when using ak.copy in v2",
  "updated_at":"2022-07-08T07:16:27Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-07-06T17:31:11Z",
  "comments":1,
  "created_at":"2022-07-06T15:16:38Z",
  "draft":false,
  "id":1295991693,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws468ghu",
  "number":1533,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-06T17:31:11Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: numba pre-commit issues",
  "updated_at":"2022-07-06T17:31:12Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"https://github.com/scikit-hep/awkward/projects/7",
  "closed_at":"2022-07-27T19:13:15Z",
  "comments":0,
  "created_at":"2022-07-06T15:34:54Z",
  "id":1296014981,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5NP56F",
  "number":1534,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Move JupyterBook to Sphinx & integrate with existing RTD",
  "updated_at":"2022-07-27T19:13:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"New header-only implementation of Growable Buffer using panels. Contains the following :-\r\n\r\n- [x]  GrowableBuffer.h\r\n- [x]  Unit Tests for GrowableBuffer\r\n- [x]  Documentation of GrowableBuffer.h",
  "closed_at":"2022-07-07T10:07:44Z",
  "comments":5,
  "created_at":"2022-07-06T16:39:16Z",
  "draft":false,
  "id":1296109992,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4686ol",
  "number":1535,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-07T10:07:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Growable Buffer header",
  "updated_at":"2022-07-09T03:06:47Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.7.0 to 2.8.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.8.0</h2>\n<ul>\n<li>\n<p>\u2728 You can now run cibuildwheel on Podman, as an alternate container engine to Docker (which remains the default). This is useful in environments where a Docker daemon isn't available, for example, it can be run inside a Docker container, or without root access. To use Podman, set the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#container-engine\"><code>CIBW_CONTAINER_ENGINE</code></a> option. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/966\">#966</a>)</p>\n</li>\n<li>\n<p>\u2728 Adds support for building <code>py3-none-{platform}</code> wheels. This works the same as ABI3 - wheels won't be rebuilt, but tests will still be run across all selected versions of Python.</p>\n<blockquote>\n<p>These wheels contain native extension code, but don't use the Python APIs. Typically, they're bridged to Python using a FFI module like <a href=\"https://docs.python.org/3/library/ctypes.html\">ctypes</a> or <a href=\"https://cffi.readthedocs.io/en/latest/\">cffi</a>. Because they don't use Python ABI, the wheels are more compatible - they work across many Python versions.</p>\n</blockquote>\n<p>Check out this <a href=\"https://github.com/joerick/python-ctypes-package-sample\">example ctypes project</a> to see an example of how it works. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1151\">#1151</a>)</p>\n</li>\n<li>\n<p>\ud83d\udee0 cibuildwheel will now error if multiple builds in a single run produce the same wheel filename, as this indicates a misconfiguration. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1152\">#1152</a>)</p>\n</li>\n<li>\n<p>\ud83d\udcda A few docs improvements and updates to keep things up-to-date.</p>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.8.0</h3>\n<p><em>5 July 2022</em></p>\n<ul>\n<li>\n<p>\u2728 You can now run cibuildwheel on Podman, as an alternate container engine to Docker (which remains the default). This is useful in environments where a Docker daemon isn't available, for example, it can be run inside a Docker container, or without root access. To use Podman, set the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#container-engine\"><code>CIBW_CONTAINER_ENGINE</code></a> option. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/966\">#966</a>)</p>\n</li>\n<li>\n<p>\u2728 Adds support for building <code>py3-none-{platform}</code> wheels. This works the same as ABI3 - wheels won't be rebuilt, but tests will still be run across all selected versions of Python.</p>\n<blockquote>\n<p>These wheels contain native extension code, but don't use the Python APIs. Typically, they're bridged to Python using a FFI module like <a href=\"https://docs.python.org/3/library/ctypes.html\">ctypes</a> or <a href=\"https://cffi.readthedocs.io/en/latest/\">cffi</a>. Because they don't use Python ABI, the wheels are more compatible - they work across many Python versions.</p>\n</blockquote>\n<p>Check out this <a href=\"https://github.com/joerick/python-ctypes-package-sample\">example ctypes project</a> to see an example of how it works. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1151\">#1151</a>)</p>\n</li>\n<li>\n<p>\ud83d\udee0 cibuildwheel will now error if multiple builds in a single run produce the same wheel filename, as this indicates a misconfiguration. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1152\">#1152</a>)</p>\n</li>\n<li>\n<p>\ud83d\udcda A few docs improvements and updates to keep things up-to-date.</p>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/5ef488ba307a34c0e4bf4e55384ff8dbe470226a\"><code>5ef488b</code></a> Bump version: v2.8.0</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/e035e3a2890fb46b6ca1c77a11226dc25d3bfa6e\"><code>e035e3a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1152\">#1152</a> from mayeut/already-built</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/6fe0354c26134204450f1493fbb6c8754496d815\"><code>6fe0354</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/966\">#966</a> from Erotemic/new_podman_support</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/227125cdf8633b7935ef468b760cf5ce2dfb07a6\"><code>227125c</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1167\">#1167</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/c4f1c31ccc68bd3311a0e84e861993c771641bba\"><code>c4f1c31</code></a> chore(deps): bump actions/setup-python from 3 to 4 (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1134\">#1134</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/5e2d02d80923b5c78df6cb8fb9a82d5c331a423d\"><code>5e2d02d</code></a> Merge branch 'main' into new_podman_support</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/9ed9e6b9605e85a65ceba09f62d44cc2303debac\"><code>9ed9e6b</code></a> Merge branch 'main' into already-built</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/d02366f547da8b363d9bd2cf3bdefc7f17090cc8\"><code>d02366f</code></a> fix: multiple version tags per release bug in release tooling (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1166\">#1166</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/9a537512c141c050e89f7b6e251f6dfb9b0898a7\"><code>9a53751</code></a> feat: add support for <code>py3-none-{platform}</code> wheels (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1151\">#1151</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a3616700f5246548220fab6afc19b44535520bdb\"><code>a361670</code></a> Pass cwd to first two calls</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/2.7.0...v2.8.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.7.0&new-version=2.8.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-07-06T18:11:29Z",
  "comments":1,
  "created_at":"2022-07-06T17:30:52Z",
  "draft":false,
  "id":1296162068,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws469F22",
  "number":1536,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-06T18:11:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump pypa/cibuildwheel from 2.7.0 to 2.8.0",
  "updated_at":"2022-07-06T18:11:30Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-07-07T15:31:29Z",
  "comments":1,
  "created_at":"2022-07-07T14:55:01Z",
  "draft":false,
  "id":1297588435,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47B-Ku",
  "number":1537,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-07T15:31:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed RecordArray.__repr__ (last vestige of 'override' misunderstanding).",
  "updated_at":"2022-07-07T15:31:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-07-09T03:02:22Z",
  "comments":4,
  "created_at":"2022-07-07T22:17:27Z",
  "draft":false,
  "id":1298169327,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47D-r-",
  "number":1538,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-09T03:02:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Solving the endian bug on MacOS",
  "updated_at":"2022-07-09T03:12:18Z",
  "user":"MDQ6VXNlcjUwNTc3ODA5"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"#1417 ",
  "closed_at":"2022-07-08T19:19:37Z",
  "comments":1,
  "created_at":"2022-07-08T09:33:56Z",
  "draft":false,
  "id":1298758928,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47GAhb",
  "number":1539,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-08T19:19:36Z"
  },
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Fix: ak._v2.is_none check for axis value ",
  "updated_at":"2022-07-08T19:19:38Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Add @ManasviGoyal as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward/pull/1535#issuecomment-1179467544)",
  "closed_at":"2022-07-09T03:07:05Z",
  "comments":0,
  "created_at":"2022-07-09T03:06:44Z",
  "draft":false,
  "id":1299556069,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47IsjH",
  "number":1540,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-09T03:07:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add ManasviGoyal as a contributor for code",
  "updated_at":"2022-07-09T03:07:05Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Add @aryan26roy as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward/pull/1538#issuecomment-1179468287)",
  "closed_at":"2022-07-09T03:12:31Z",
  "comments":0,
  "created_at":"2022-07-09T03:12:15Z",
  "draft":false,
  "id":1299556867,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47IstQ",
  "number":1541,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-09T03:12:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add aryan26roy as a contributor for code",
  "updated_at":"2022-07-09T03:12:31Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"replaces #1529 \r\n\r\n- GrowableBuffer has been modified to remove the dependencies on the `std` containers and utilities.\r\n- GrowableBuffer has been moved to an` awkward` subdirectory. The cmake `INTERFACE` has been updated to allow the following include:\r\n\r\n```c++\r\n#include \"awkward/GrowableBuffer.h\"\r\n``` \r\n\r\n- C++ tests have been added, and their cmake build configuration.\r\n- `ArrayBuilder` has been updated to use the new `GrowableBuffer`.",
  "closed_at":"2022-07-15T05:55:41Z",
  "comments":6,
  "created_at":"2022-07-11T14:22:44Z",
  "draft":false,
  "id":1300786604,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47MplP",
  "number":1542,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-15T05:55:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"migrate ArrayBuilder to new GrowableBuffer",
  "updated_at":"2022-07-15T05:55:42Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/pyupgrade: v2.34.0 \u2192 v2.37.1](https://github.com/asottile/pyupgrade/compare/v2.34.0...v2.37.1)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-07-18T15:25:08Z",
  "comments":1,
  "created_at":"2022-07-11T20:26:38Z",
  "draft":false,
  "id":1301186015,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47N_cC",
  "number":1543,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-18T15:25:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-07-18T15:25:08Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"```python\n>>> ak.to_list(arr)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/akako/Documents/github/dotFiles/homedir/.julia/conda/3/lib/python3.9/site-packages/awkward/operations/convert.py\", line 1002, in to_list\n    raise TypeError(\"use ak._v2.operations.convert.to_list for v2 arrays (for now)\")\nTypeError: use ak._v2.operations.convert.to_list for v2 arrays (for now)\n>>> ak._v2.operations.convert.to_list(arr)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: module 'awkward._v2.operations' has no attribute 'convert'\n>>> ak._v2.operations.to_list(arr)\n[{'one_integers': 3, 'two_v_floats': [1.2000000476837158], \n```\n",
  "closed_at":"2022-07-18T15:43:22Z",
  "comments":3,
  "created_at":"2022-07-11T21:17:21Z",
  "draft":false,
  "id":1301238130,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47OKsw",
  "number":1544,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-18T15:43:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix ak2 convert class name msg",
  "updated_at":"2024-01-18T17:31:26Z",
  "user":"MDQ6VXNlcjUzMDYyMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Closes #1534",
  "closed_at":"2022-07-19T10:49:14Z",
  "comments":2,
  "created_at":"2022-07-12T10:50:27Z",
  "draft":true,
  "id":1301884351,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47QT3H",
  "number":1545,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Docs: merge JB and RTD",
  "updated_at":"2022-07-26T08:42:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"And the [new Awkward-Pandas wrapper](https://github.com/scikit-hep/awkward/wiki#pandas-integration) would be accessed with `ak.to_series` and `ak.from_series`. Either an Awkward Array is exploded into a whole DataFrame (or multiple DataFrames, if there are multiple jagged structures) or it is wrapped as a Series.\r\n\r\nMaybe `ak.to_pandas` would continue to exist as a synonym for `ak.to_dataframe`, but at first, let's see if we can do without that synonym.",
  "closed_at":"2022-08-18T22:24:59Z",
  "comments":0,
  "created_at":"2022-07-12T21:15:36Z",
  "id":1302630614,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5NpJDW",
  "number":1546,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"In Awkward v2, rename ak.to_pandas \u2192 ak.to_dataframe",
  "updated_at":"2022-08-18T22:24:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Link to page: https://awkward-array.org/how-to-restructure-add-fields.html\r\n\r\nI need some further documentation so that I can understand how to add a new \"branch\" to an awkward array that comes from an opened TTree using uproot. It seems that TTrees opened in uproot follow a similar structure to this example:\r\n\r\n```\r\narray1 = ak.zip({\"x\": [1, 2, 3, 4, 5], \"y\": [1.1, 2.2, 3.3, 4.4, 5.5]})\r\n```\r\nHow would I go about adding a new field to this array such that it is properly indexed/formatted with the original array. If we try:\r\n```\r\narray1 = ak.zip({\"x\": [1, 2, 3, 4, 5], \"y\": [1.1, 2.2, 3.3, 4.4, 5.5]})\r\narray2 = ak.zip({\"z\" : [6,7,8,9,10]})\r\nprint(repr(array1))\r\nprint(repr(array2))\r\n**Output:**\r\n<Array [{x: 1, y: 1.1}, ... {x: 5, y: 5.5}] type='5 * {\"x\": int64, \"y\": float64}'>\r\n<Array [{z: 6}, {z: 7}, ... {z: 9}, {z: 10}] type='5 * {\"z\": int64}'>\r\n```\r\nNow if we try combine array1 and array2 together.\r\n```\r\nnew_array = ak.zip([array1, array2])\r\nprint(repr(new_array))\r\n```\r\nWe get this output\r\n`<Array [({x: 1, y: 1.1}, ... {z: 10})] type='5 * ({\"x\": int64, \"y\": float64}, {\"...'>`\r\nInstead of something like:\r\n`<Array [{x: 1, y: 1.1,z:6}, . . ., {x:5, y:5.5, z:10} ] type='5 * ({\"x\": int64, \"y\": float6...'>`\r\nHow can we add the field \"z\" and get the desired format?\r\n",
  "closed_at":"2022-07-14T17:49:44Z",
  "comments":1,
  "created_at":"2022-07-14T14:59:51Z",
  "id":1304912804,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Nx2Ok",
  "number":1547,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"How to restructure arrays by adding fields",
  "updated_at":"2022-07-14T17:49:44Z",
  "user":"MDQ6VXNlcjg0NTMzOTQ5"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Long thread here: https://github.com/python/cpython/issues/91308",
  "closed_at":"2022-07-14T21:51:39Z",
  "comments":2,
  "created_at":"2022-07-14T16:02:11Z",
  "draft":false,
  "id":1304988254,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47atBC",
  "number":1548,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"DeprecationWarning fix; sre_{constants,parse} API made private in 3.11",
  "updated_at":"2022-07-14T21:51:39Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR moves the buildtest CI to GitHub Actions, and drops the doctest workflow.\r\n\r\nMy motivation for tackling this is that I am also moving the docs to GHA in a separate PR.\r\n\r\nI've not used Azure before, and so this might not 100% match on the trigger logic. The exclusion logic looks as though it should never run, but clearly it does in `main`, so I must be missing something.\r\n\r\nThis PR sets the action to run on PR, like the tests.",
  "closed_at":"2022-08-20T16:01:20Z",
  "comments":14,
  "created_at":"2022-07-16T20:43:21Z",
  "draft":false,
  "id":1306898627,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47g9Ur",
  "number":1550,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-20T16:01:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: use GHA instead of Azure :hammer: ",
  "updated_at":"2022-08-20T16:01:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nOtherwise, any method that takes an `axis` fails like this:\r\n\r\n```\r\nAttributeError: 'Record' object has no attribute 'axis_wrap_if_negative'\r\n```\r\n\r\nThis affects both v1 and v2. It's a bug, so it should be fixed in both, but v2 is higher priority if there's only time to fix one of them. The fix in v2 can be in Python; the fix in v1 has to be C++ code.\r\n\r\nFields of a record don't count as an `axis`, so the implementation would be to just pass it to `self._array.axis_wrap_if_negative`.\r\n\r\nHowever, if the `axis` that this function returns is equal to `0`, that should be an error. The user is trying to compute something on a top-level array, but the top-level is a scalar, not an array. We don't want to pass that through `self._array.axis_wrap_if_negative` and have, for instance, `ak.to_regular(record, axis=0)` return an _array_, especially if that ignores the Record's `_at` attribute and returns an output containing what had been hidden data.",
  "closed_at":"2022-07-28T15:41:21Z",
  "comments":2,
  "created_at":"2022-07-18T14:38:04Z",
  "id":1308061653,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5N92_V",
  "number":1551,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Layout Record should have an 'axis_wrap_if_negative' method",
  "updated_at":"2022-07-28T15:41:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is the first step in merging these two sites. As such, the PR is quite small - later work will add content and further restructuring\r\n\r\nFlowchart of PRs in this project:\r\n```mermaid\r\ngraph LR;\r\nintegrate[Integrate JB & Sphinx]\r\nimprove[Improve UX of integration]\r\ncontent[Expand user-guide content]\r\nintegrate --> improve --> content\r\nstyle integrate stroke:#f66,stroke-width:2px\r\nclick integrate \"https://github.com/scikit-hep/awkward/pull/1552\" \"This PR\"\r\nclick improve \"https://github.com/scikit-hep/awkward/pull/1563\" \"Improvement PR\"\r\nclick content \"https://github.com/scikit-hep/awkward/pull/1575\" \"Content PR\"\r\n```\r\n\r\n## Meaningful changes\r\n- [x] Remove references to awkward-array.org\r\n- [x] Move `docs-src` under `user-guide` section of `docs-sphinx`\r\n- [x] Use `pydata` Sphinx theme\r\n- [x] Deploy using GHA (remove Azure) \r\n- [x] Update PAT on RTD to extend lifetime & make note in future to renew.\r\n- [x] Deploy branch rather than PR\r\n- [ ] Remove existing RTD webhook\r\n\r\n```mermaid\r\ngraph LR;\r\n\r\nbuild[\"Build on GHA\"]\r\nupload[\"Upload .jupyter_cache to artefacts\"]\r\nwebhook[\"Trigger RTD via webhook\"]\r\npull[\"Pull artefact from GHA\"]\r\n\r\nbuild --> upload --> webhook\r\nwebhook --> pull\r\n```\r\n\r\nhttps://awkward-array.readthedocs.io/en/feat-merge-docs/",
  "closed_at":"2022-07-27T09:16:53Z",
  "comments":14,
  "created_at":"2022-07-19T10:47:59Z",
  "draft":false,
  "id":1309334857,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47pDUl",
  "number":1552,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-27T09:16:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Docs: merge JB and Sphinx documentation",
  "updated_at":"2022-08-01T20:00:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nv1 implements `ak.size` but we have not ported it over to v2.",
  "closed_at":"2022-07-19T15:27:38Z",
  "comments":3,
  "created_at":"2022-07-19T12:48:00Z",
  "id":1309471983,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ODPTv",
  "number":1553,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak._v2` missing `size`",
  "updated_at":"2022-07-19T15:28:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-07-22T14:55:44Z",
  "comments":3,
  "created_at":"2022-07-19T15:53:25Z",
  "draft":true,
  "id":1309727543,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47qXHt",
  "number":1554,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"layout builder python bindings",
  "updated_at":"2022-09-23T00:49:07Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-07-19T17:49:48Z",
  "comments":1,
  "created_at":"2022-07-19T16:24:21Z",
  "draft":false,
  "id":1309769678,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47qgSW",
  "number":1555,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-19T17:49:47Z"
  },
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "state":"closed",
  "state_reason":null,
  "title":"GrowableBuffer.h's missing <cstring> import broke localbuild.py; fixing it.",
  "updated_at":"2022-07-19T17:49:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.8.0 to 2.8.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.8.1</h2>\n<ul>\n<li>\ud83d\udc1b Fix a bug when building CPython 3.8 wheels on an Apple Silicon machine where testing would always fail. cibuildwheel will no longer attempt to test the arm64 part of CPython 3.8 wheels because we use the x86_64 installer of CPython 3.8 due to its macOS system version backward-compatibility. See <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/pull/1169\">#1169</a> for more details. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1171\">#1171</a>)</li>\n<li>\ud83d\udee0 Update the prerelease CPython 3.11 to 3.11.0b4. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1180\">#1180</a>)</li>\n<li>\ud83d\udee0 The GitHub Action will ensure a compatible version of Python is installed on the runner (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1114\">#1114</a>)</li>\n<li>\ud83d\udcda A few docs improvements</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.8.1</h3>\n<p><em>18 July 2022</em></p>\n<ul>\n<li>\ud83d\udc1b Fix a bug when building CPython 3.8 wheels on an Apple Silicon machine where testing would always fail. cibuildwheel will no longer attempt to test the arm64 part of CPython 3.8 wheels because we use the x86_64 installer of CPython 3.8 due to its macOS system version backward-compatibility. See <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/pull/1169\">#1169</a> for more details. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1171\">#1171</a>)</li>\n<li>\ud83d\udee0 Update the prerelease CPython 3.11 to 3.11.0b4. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1180\">#1180</a>)</li>\n<li>\ud83d\udee0 The GitHub Action will ensure a compatible version of Python is installed on the runner (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1114\">#1114</a>)</li>\n<li>\ud83d\udcda A few docs improvements</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/afb4329fe32181c15d34ef94bf64dad7715b44ba\"><code>afb4329</code></a> Bump version: v2.8.1</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/5d73e913d8eb744b6bb496494a019253c9d59c06\"><code>5d73e91</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1185\">#1185</a> from pypa/pre-commit-ci-update-config</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/444c40f5902c27de880cae93612f6293ff93e7dc\"><code>444c40f</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1180\">#1180</a> from pypa/update-dependencies-pr</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/98f5bc52f017890d91ba9fc961624aba7842e970\"><code>98f5bc5</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1182\">#1182</a> from larsoner/bump-macos</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/8bf28fb1ac731f1b9c1ed4ee29220a7e525e4adb\"><code>8bf28fb</code></a> [pre-commit.ci] pre-commit autoupdate</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/39176acc4b83710c5fe9539d82b262dcd747a6a3\"><code>39176ac</code></a> Update dependencies</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/61821a8473d0fe92f3ded1d4690a7aec4a0efcb9\"><code>61821a8</code></a> fix(docs): pin things due to the mkdocs pin (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1181\">#1181</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a7b7d146b9af37d81c008b27cfc3db7a36aff2c9\"><code>a7b7d14</code></a> FIX: Name</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/0e1878bcdbf78bc8651303c56e871d79946efd01\"><code>0e1878b</code></a> DOC: Bump to non-deprecated image</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/7c922f99d493cc98af0bead5c46ffad1ccfdc509\"><code>7c922f9</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1147\">#1147</a> from abitrolly/patch-2</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.8.0...v2.8.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.8.0&new-version=2.8.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-07-22T14:50:14Z",
  "comments":1,
  "created_at":"2022-07-19T17:25:07Z",
  "draft":false,
  "id":1309832415,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47qtuF",
  "number":1556,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-22T14:50:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump pypa/cibuildwheel from 2.8.0 to 2.8.1",
  "updated_at":"2022-07-22T14:50:15Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nAt least for v2 and variable-length arrays, we get the right zero-slicing edge case:\r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> ak.Array([[1, 2, 3], [4, 5]])[:, []]\r\n<Array [[], []] type='2 * var * int64'>\r\n```\r\n\r\nbut v2 regular arrays have a zero-length error:\r\n\r\n```python\r\n>>> ak.to_regular(ak.Array([[1, 2, 3], [4, 5, 6]]), axis=1)[:, []]\r\n<Array [] type='0 * 3 * int64'>\r\n```\r\n\r\nWhat we want to have happen is for this slice to build a RegularArray with an explicit `zeros_length` argument, which is the only way to make a RegularArray with non-zero length yet contain lists of zero length:\r\n\r\n```python\r\n>>> ak.Array(\r\n...     ak.contents.RegularArray(\r\n...         ak.contents.NumpyArray(np.arange(1, 7)),\r\n...         size=0,\r\n...         zeros_length=2,\r\n...     )\r\n... )\r\n<Array [[], []] type='2 * 0 * int64'>\r\n```\r\n\r\nPointed out by @grst.\r\n\r\nv1 arrays are also incorrect, but this is an edge-case bug that only really needs to get fixed in v2. (v1 has only 4 more months left...)",
  "closed_at":"2022-08-15T14:34:03Z",
  "comments":5,
  "created_at":"2022-07-19T19:38:12Z",
  "id":1309960823,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5OFGp3",
  "number":1557,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Lengths of empty regular slices (in v2)",
  "updated_at":"2022-08-15T14:34:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Description of new feature\n\nI believe it would be useful to define the `__enter__` / `__exit__` methods so we could do:\r\n\r\n```\r\nwith ak.from_parquet('test.parquet') as ds:\r\n    print(ds.fields)\r\n```\r\nand it would take care of closing (or deleting) the dataset.",
  "closed_at":"2022-07-20T21:18:29Z",
  "comments":1,
  "created_at":"2022-07-20T05:10:13Z",
  "id":1310446049,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5OG9Hh",
  "number":1558,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"__enter__",
  "updated_at":"2022-07-20T21:18:29Z",
  "user":"MDQ6VXNlcjM4NzYyNA=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"#1439 ",
  "closed_at":"2022-07-28T15:37:24Z",
  "comments":3,
  "created_at":"2022-07-21T21:25:48Z",
  "draft":false,
  "id":1313822889,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws474omE",
  "number":1559,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-28T15:37:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: ufuncs on records should not be allowed unless overridden",
  "updated_at":"2022-07-28T15:37:24Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"`ArrayBuilder`, `LayoutBuilder`, and `GrowableBuffer` are using `BuildOptions` now. There two options defined at the moment - an `initial` which is `int64_t` and a `resize` factor which is `double`. The `Options` is a tuple and can accept other parameters. A test is added.\r\n\r\nThis PR also drops requirements on C++ version for `LayoutBuilder` from C++17 to C++14. Both `GrowableBuffer` and `BuildOptions` can be used with C++11. \r\n\r\n`BitMasked` mask is fixed.",
  "closed_at":"2022-07-28T17:14:45Z",
  "comments":4,
  "created_at":"2022-07-22T15:48:26Z",
  "draft":false,
  "id":1315168584,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws479WOu",
  "number":1560,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-28T17:14:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"builder options and layout builder updates",
  "updated_at":"2022-07-28T17:14:46Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-07-22T20:40:42Z",
  "comments":1,
  "created_at":"2022-07-22T19:46:23Z",
  "draft":false,
  "id":1315361617,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws479_rI",
  "number":1561,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-22T20:40:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove std::cout from ArrayBuilder code.",
  "updated_at":"2022-07-22T20:40:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":null,
  "closed_at":"2022-09-08T17:49:05Z",
  "comments":16,
  "created_at":"2022-07-24T19:00:18Z",
  "draft":false,
  "id":1315983172,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws47_5Hb",
  "number":1562,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-08T17:49:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: reduce runtime dependency from setuptools to just packaging",
  "updated_at":"2022-09-08T17:49:05Z",
  "user":"MDQ6VXNlcjI0NTU3Mw=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR builds upon #1552 to make the docs more discoverable and provide helpful answers to \"what is an awkward array\", etc. It addresses some of the tasks in https://github.com/scikit-hep/awkward/projects/7#card-84465881\r\n\r\nFlowchart of PRs in this project:\r\n```mermaid\r\ngraph LR;\r\nintegrate[Integrate JB & Sphinx]\r\nimprove[Improve UX of integration]\r\ncontent[Expand user-guide content]\r\nintegrate --> improve --> content\r\nstyle improve stroke:#f66,stroke-width:2px\r\nclick integrate \"https://github.com/scikit-hep/awkward/pull/1552\" \"Improvement PR\"\r\nclick improve \"https://github.com/scikit-hep/awkward/pull/1563\" \"This PR\"\r\nclick content \"https://github.com/scikit-hep/awkward/pull/1575\" \"Content PR\"\r\n```\r\n\r\nThe scope for this PR is small:\r\n- Make better use of PyData theme\r\n- Rework existing pages to better reflect their new locations e.g. API-reference, remove duplicate icons\r\n- Preliminary work on beginner guides and contribution guides\r\n\r\nNotably, this adds a panel-based front page:\r\n![image](https://user-images.githubusercontent.com/1248413/180668569-8f1ed52a-adc1-4f06-94da-5542117baddb.png)\r\n![image](https://user-images.githubusercontent.com/1248413/180756514-9a669e41-40ea-4c15-8baa-5d73109f93bb.png)\r\n\r\nhttps://awkward-array.readthedocs.io/en/docs-phase-2/\r\n",
  "closed_at":"2022-08-15T11:57:52Z",
  "comments":40,
  "created_at":"2022-07-24T22:32:45Z",
  "draft":false,
  "id":1316025887,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48ABU4",
  "number":1563,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-15T11:57:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Docs: rework content for usability + UX",
  "updated_at":"2022-08-15T11:57:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/gh-action-pypi-publish](https://github.com/pypa/gh-action-pypi-publish) from 1.5.0 to 1.5.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/gh-action-pypi-publish/releases\">pypa/gh-action-pypi-publish's releases</a>.</em></p>\n<blockquote>\n<h2>v1.5.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fixed printing out the dist hashes when <code>packages_dir</code> is a wildcard value. \u2014 by <a href=\"https://github.com/meowmeowmeowcat\"><code>@\u200bmeowmeowmeowcat</code></a> in <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/pull/91\">pypa/gh-action-pypi-publish#91</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.0...v1.5.1\">https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.0...v1.5.1</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/37f50c210e3d2f9450da2cd423303d6a14a6e29f\"><code>37f50c2</code></a> Merge PR <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/issues/91\">#91</a></li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/9f0421c6c63e6834c88c90d39708f1e317f4dc82\"><code>9f0421c</code></a> Add #StandWithUkraine banner to README</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/c3fbd68c153b595e98c34c15ebfd0db1e144863d\"><code>c3fbd68</code></a> Remove quotes</li>\n<li>See full diff in <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.0...v1.5.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/gh-action-pypi-publish&package-manager=github_actions&previous-version=1.5.0&new-version=1.5.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-08-10T00:16:37Z",
  "comments":1,
  "created_at":"2022-07-25T17:33:23Z",
  "draft":false,
  "id":1317151852,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48Dn6n",
  "number":1564,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-10T00:16:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump pypa/gh-action-pypi-publish from 1.5.0 to 1.5.1",
  "updated_at":"2022-08-10T00:16:37Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"#1551 ",
  "closed_at":"2022-07-28T13:44:43Z",
  "comments":1,
  "created_at":"2022-07-25T19:43:07Z",
  "draft":false,
  "id":1317285135,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48EDyE",
  "number":1565,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-28T13:44:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: Missing `axis_wrap_if_negative`  Record method in both v1 and v2",
  "updated_at":"2022-07-28T13:44:43Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/setup-cfg-fmt: v1.20.1 \u2192 v1.20.2](https://github.com/asottile/setup-cfg-fmt/compare/v1.20.1...v1.20.2)\n- [github.com/asottile/pyupgrade: v2.37.1 \u2192 v2.37.2](https://github.com/asottile/pyupgrade/compare/v2.37.1...v2.37.2)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-07-25T21:15:16Z",
  "comments":0,
  "created_at":"2022-07-25T20:40:13Z",
  "draft":false,
  "id":1317343669,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48EQJ-",
  "number":1566,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-25T21:15:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-07-25T21:15:17Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"#1530 ",
  "closed_at":"2022-08-11T15:08:31Z",
  "comments":2,
  "created_at":"2022-07-26T18:58:55Z",
  "draft":false,
  "id":1318638366,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48IhDM",
  "number":1567,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-11T15:08:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: tolist() bug from Uproot (longlong type for Index) ",
  "updated_at":"2022-08-11T15:08:32Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"#1557 ",
  "closed_at":"2022-08-15T14:34:02Z",
  "comments":2,
  "created_at":"2022-07-26T19:20:11Z",
  "draft":false,
  "id":1318657362,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48IlCq",
  "number":1568,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-15T14:34:02Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: Lengths of empty regular slices",
  "updated_at":"2022-08-15T14:34:03Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-07-29T14:47:47Z",
  "comments":1,
  "created_at":"2022-07-27T11:31:01Z",
  "draft":true,
  "id":1319424124,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48LGj8",
  "number":1569,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"start migration of rdataframe code to use layout builder",
  "updated_at":"2022-09-23T00:52:08Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Description of new feature\n\nIt may well be that this is already done, but we are not aware how.\r\n\r\nWe would like to be able to do the following operations on an awkward array, so to support its use as a pandas extension type. These could be done in the context of the existing `to_pandas`, although they need not concern pandas, actually, we can handle that in the awkward-pandas package.\r\n- where every row of the input becomes nested python structures, an object type array; this is already done via tolist()\r\n- in which every simple field (leaf, numpy-like) is extracted as simple array (numpy/series), but the \"rest\" of the data structure, the original minus those fields, is returned as awkward\r\n- the same as above, but the \"rest\" becomes python objects (I suppose this can be done in two steps combining the previous two bullets)\r\n- the same again, but with the option that top-level string fields become arrow string arrays\r\n\r\n@douglasdavis , am I missing anything?",
  "closed_at":"2022-11-10T23:06:55Z",
  "comments":8,
  "created_at":"2022-07-29T01:20:52Z",
  "id":1321651052,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Oxsts",
  "number":1570,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"to_pandas options",
  "updated_at":"2023-02-15T19:10:29Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fix: BuilderOptions.h's missing <cstdint> import broke localbuild.py in Windows.\r\n\r\nAlso, fixed the builder names in test_ListOffset_ListOffset() of Layout Builder to make them uniform throughout all the tests.",
  "closed_at":"2022-07-29T13:40:57Z",
  "comments":1,
  "created_at":"2022-07-29T11:16:55Z",
  "draft":false,
  "id":1322120177,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48T9_r",
  "number":1571,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: missing <cstdint> in BuilderOptions.h",
  "updated_at":"2022-07-31T01:00:51Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-07-29T15:05:07Z",
  "comments":6,
  "created_at":"2022-07-29T11:18:33Z",
  "draft":false,
  "id":1322121684,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48T-UZ",
  "number":1572,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-07-29T15:05:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"add int64_t definition for Windows",
  "updated_at":"2022-07-29T15:05:09Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1511 \r\n\r\nAs discussed in the issue, the new behaviour is:\r\n- existing public _class_ attributes can be assigned to (though the attribute itself may not be writable, e.g. with a read-only data descriptor)\r\n- private attributes can be assigned to, and will never attempt to set a field\r\n- fields can never be set\r\n\r\nWe might have some hidden issues if users employ underscore-prefixed fields. Right now, setting these attributes will write to the `ak.Array` object. However, this shadowing is already accepted when we read from an attribute - class attributes take precedence over fields, just as they do in this PR for writing. Are we happy with this? ",
  "closed_at":"2022-08-09T23:54:11Z",
  "comments":3,
  "created_at":"2022-07-29T12:09:08Z",
  "draft":false,
  "id":1322169187,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48UIkj",
  "number":1573,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-09T23:54:11Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: raise `AttributeError` for public Array attributes",
  "updated_at":"2022-08-10T15:37:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Working on the user guide of Layout Builder",
  "closed_at":"2022-08-24T19:47:37Z",
  "comments":6,
  "created_at":"2022-07-31T04:15:27Z",
  "draft":true,
  "id":1323357303,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48YE1a",
  "number":1574,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"User Guide of LayoutBuilder",
  "updated_at":"2022-08-24T19:48:09Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR builds upon #1563 to augment the empty user-guide chapters. It addresses some of the tasks in https://github.com/scikit-hep/awkward/projects/7#card-84465881\r\n\r\nFlowchart of PRs in this project:\r\n```mermaid\r\ngraph LR;\r\nintegrate[Integrate JB & Sphinx]\r\nimprove[Improve UX of integration]\r\ncontent[Expand user-guide content]\r\nintegrate --> improve --> content\r\nstyle content stroke:#f66,stroke-width:2px\r\nclick integrate \"https://github.com/scikit-hep/awkward/pull/1552\" \"Integration PR\"\r\nclick improve \"https://github.com/scikit-hep/awkward/pull/1563\" \"Improvement PR\"\r\nclick content \"https://github.com/scikit-hep/awkward/pull/1575\" \"This PR\"\r\n```\r\n\r\nhttps://awkward-array.readthedocs.io/en/agoose77/docs-expand-content\r\n\r\n- [x] how-to-restructure-zip-project.md\r\n- [x] how-to-restructure-add-fields.md\r\n- [ ] how-to-restructure-rename-records.md\r\n- [ ] how-to-restructure-concatenate.md\r\n- [ ] how-to-restructure-sort.md\r\n- [x] how-to-examine-list-fields.md\r\n- [ ] how-to-math-numpy.md\r\n- [ ] how-to-use-in-numba-features.md: would close #1064\r\n- [ ] how-to-create-unflatten-group.md\r\n- [ ] how-to-combinatorics-cartesian-combinations.md\r\n- [ ] how-to-math-reducing.md\r\n- [ ] how-to-examine-simple-slicing.md\r\n- [ ] how-to-combinatorics-best-match.md\r\n- [ ] how-to-filter-num.md\r\n- [ ] how-to-math-gpu.md: would close #753 and #1139 (only `ak.num` and ufuncs work right now)\r\n- [ ] how-to-filter-masked.md\r\n- [ ] how-to-math-argminmax.md\r\n- [ ] how-to-create-lazy.md\r\n- [ ] how-to-examine-checking-validity.md\r\n- [ ] how-to-math-broadcasting.md\r\n- [ ] how-to-filter-jagged.md\r\n- [ ] how-to-use-in-numba-arraybuilder.md: would close #528\r\n- [ ] how-to-examine-type.md: would close #1366\r\n- [ ] how-to-math-statistics.md\r\n- [ ] how-to-filter-cut-mask.md\r\n- [ ] how-to-examine-single-item.md\r\n- [ ] how-to-specialize-subclass.md\r\n- [ ] how-to-specialize-in-numba.md\r\n- [ ] how-to-specialize-override-numpy.md\r\n- [ ] how-to-specialize-lorentz.md\r\n\r\nThe text for how-to-convert-uproot.md says that Uproot 4 doesn't write Awkward Arrays yet, which is wrong: #1424, but if it has any Uproot 3 material, that can now be deleted and the text shouldn't say much of anything about the Uproot version.\r\n\r\nAll of the above would also close #1144, though I couldn't add it to the Development tab for some reason.\r\n",
  "closed_at":"2022-12-15T11:22:58Z",
  "comments":3,
  "created_at":"2022-08-01T19:52:44Z",
  "draft":true,
  "id":1324896902,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48dKQm",
  "number":1575,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: fill out missing sections",
  "updated_at":"2023-03-16T13:32:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/setup-cfg-fmt: v1.20.2 \u2192 v2.0.0](https://github.com/asottile/setup-cfg-fmt/compare/v1.20.2...v2.0.0)\n- [github.com/asottile/pyupgrade: v2.37.2 \u2192 v2.37.3](https://github.com/asottile/pyupgrade/compare/v2.37.2...v2.37.3)\n- [github.com/PyCQA/flake8: 4.0.1 \u2192 5.0.4](https://github.com/PyCQA/flake8/compare/4.0.1...5.0.4)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-08-09T22:45:16Z",
  "comments":1,
  "created_at":"2022-08-01T21:24:52Z",
  "draft":false,
  "id":1324999381,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws48dgNT",
  "number":1576,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-09T22:45:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2022-08-09T22:45:17Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"## Background\r\nI'd like to introduce a tool like https://github.com/executablebooks/github-activity to automate our release note generation. We already have a tool that does this, but we don't do anything special with respect to categorizing the PRs that are merged during the release cycle.\r\n\r\nThe benefit of using another tool like github-activity is twofold:\r\n- other people are using & developing it, so we won't have to maintain our own implementation\r\n- richer release notes - e.g. easier to find bugfixes vs features\r\n\r\nFor example, here's a generated changelog entry for 1.8.0:\r\n<details><summary>New changelog for 1.8.0</summary>\r\n\r\n## 1.8.0\r\n\r\n([full changelog](https://github.com/scikit-hep/awkward/compare/952981a6...d977b04f))\r\n\r\n### New features added\r\n\r\n- Feat: add `after_option` argument to `ak.zip` [#1308](https://github.com/scikit-hep/awkward/pull/1308) ([@agoose77](https://github.com/agoose77))\r\n- feat: bump cibuildwheel, add Python 3.10 [#1186](https://github.com/scikit-hep/awkward/pull/1186) ([@henryiii](https://github.com/henryiii))\r\n\r\n### Bugs fixed\r\n\r\n- Fix: do not increment field index for nested lists [#1303](https://github.com/scikit-hep/awkward/pull/1303) ([@agoose77](https://github.com/agoose77))\r\n- Fix: simplify output in {Byte,Bit}MaskedArray [#1279](https://github.com/scikit-hep/awkward/pull/1279) ([@agoose77](https://github.com/agoose77))\r\n- Fix: fix `ByteMaskedArray.simplify_optiontype()` [#1259](https://github.com/scikit-hep/awkward/pull/1259) ([@agoose77](https://github.com/agoose77))\r\n- fix: building twice was broken [#1254](https://github.com/scikit-hep/awkward/pull/1254) ([@henryiii](https://github.com/henryiii))\r\n- Fix: support nested option types in `ak.is_none` [#1249](https://github.com/scikit-hep/awkward/pull/1249) ([@agoose77](https://github.com/agoose77))\r\n- Fix: support mixed array types in `NumpyLike.to_rectilinear` [#1248](https://github.com/scikit-hep/awkward/pull/1248) ([@agoose77](https://github.com/agoose77))\r\n- Fix: drop parameters for flattened RecordArray [#1214](https://github.com/scikit-hep/awkward/pull/1214) ([@agoose77](https://github.com/agoose77))\r\n- Fix: _pack_layout should also pack projected index arrays [#1195](https://github.com/scikit-hep/awkward/pull/1195) ([@agoose77](https://github.com/agoose77))\r\n\r\n### Maintenance and upkeep improvements\r\n\r\n- chore: wheel not required for setuptools PEP 517 (all-repos) [#1322](https://github.com/scikit-hep/awkward/pull/1322) ([@jpivarski](https://github.com/jpivarski))\r\n- chore: bump pybind11 to 2.9.1 [#1316](https://github.com/scikit-hep/awkward/pull/1316) ([@henryiii](https://github.com/henryiii))\r\n- chore: remove extra files from the wheels [#1314](https://github.com/scikit-hep/awkward/pull/1314) ([@henryiii](https://github.com/henryiii))\r\n- ci: avoid PyPI cuda wheel upload [#1313](https://github.com/scikit-hep/awkward/pull/1313) ([@henryiii](https://github.com/henryiii))\r\n- chore: add dependabot for actions [#1263](https://github.com/scikit-hep/awkward/pull/1263) ([@henryiii](https://github.com/henryiii))\r\n- chore: initial nox and pylint support [#1262](https://github.com/scikit-hep/awkward/pull/1262) ([@henryiii](https://github.com/henryiii))\r\n- chore: update pytest config, 6.0+ [#1255](https://github.com/scikit-hep/awkward/pull/1255) ([@henryiii](https://github.com/henryiii))\r\n- chore: bump to pybind11 2.9.0 [#1199](https://github.com/scikit-hep/awkward/pull/1199) ([@henryiii](https://github.com/henryiii))\r\n- ci: try Numba RC on 3.10 [#1188](https://github.com/scikit-hep/awkward/pull/1188) ([@henryiii](https://github.com/henryiii))\r\n- chore: bump pybind11 to 2.8.0 [#1011](https://github.com/scikit-hep/awkward/pull/1011) ([@henryiii](https://github.com/henryiii))\r\n\r\n### Documentation improvements\r\n\r\n- Docs: fix typo in documentation [#1326](https://github.com/scikit-hep/awkward/pull/1326) ([@agoose77](https://github.com/agoose77))\r\n- docs: add BioGeek as a contributor for doc [#1210](https://github.com/scikit-hep/awkward/pull/1210) ([@allcontributors](https://github.com/allcontributors))\r\n\r\n### API and Breaking Changes\r\n\r\n- C++ refactoring: ak.cartesian, ak.argcartesian [#1317](https://github.com/scikit-hep/awkward/pull/1317) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.sort [#1309](https://github.com/scikit-hep/awkward/pull/1309) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.argcombinations, ak.combinations [#1307](https://github.com/scikit-hep/awkward/pull/1307) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.argsort [#1304](https://github.com/scikit-hep/awkward/pull/1304) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.strings_astype [#1301](https://github.com/scikit-hep/awkward/pull/1301) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.without_parameters [#1297](https://github.com/scikit-hep/awkward/pull/1297) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.fields [#1296](https://github.com/scikit-hep/awkward/pull/1296) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak._v2.from_arrow_schema function [#1294](https://github.com/scikit-hep/awkward/pull/1294) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: ak.full_like, ak.zeros_like, ak.ones_like [#1293](https://github.com/scikit-hep/awkward/pull/1293) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.with_field [#1292](https://github.com/scikit-hep/awkward/pull/1292) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.with_parameter [#1289](https://github.com/scikit-hep/awkward/pull/1289) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: layout.completely_flatten should not concatenate (performance issue). [#1245](https://github.com/scikit-hep/awkward/pull/1245) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: ak.parameters [#1242](https://github.com/scikit-hep/awkward/pull/1242) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: getting Numba to work for v2 arrays [#1240](https://github.com/scikit-hep/awkward/pull/1240) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: ak.type and ak.values_astype [#1234](https://github.com/scikit-hep/awkward/pull/1234) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.with_name [#1233](https://github.com/scikit-hep/awkward/pull/1233) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.pad_none [#1229](https://github.com/scikit-hep/awkward/pull/1229) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: Redo PR #1227: fixing 'emptyArray' typo. [#1228](https://github.com/scikit-hep/awkward/pull/1228) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: ak.num [#1226](https://github.com/scikit-hep/awkward/pull/1226) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.zip [#1225](https://github.com/scikit-hep/awkward/pull/1225) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.ravel [#1222](https://github.com/scikit-hep/awkward/pull/1222) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.local_index [#1221](https://github.com/scikit-hep/awkward/pull/1221) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.where [#1220](https://github.com/scikit-hep/awkward/pull/1220) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: ak.mask [#1219](https://github.com/scikit-hep/awkward/pull/1219) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: Make highlevel __repr__ safe for typetracers. [#1218](https://github.com/scikit-hep/awkward/pull/1218) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: ak.flatten [#1217](https://github.com/scikit-hep/awkward/pull/1217) ([@ioanaif](https://github.com/ioanaif))\r\n- C++ refactoring: Fixed handling of list-nested boolean slices. [#1215](https://github.com/scikit-hep/awkward/pull/1215) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: Removed v1_to_v2 from all v2 tests [#1211](https://github.com/scikit-hep/awkward/pull/1211) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: ak._v2 namespace is now filled with the right symbols. [#1208](https://github.com/scikit-hep/awkward/pull/1208) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: Highlevel non-reducers and improved testing/fixes for reducers. [#1206](https://github.com/scikit-hep/awkward/pull/1206) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: ak._v2.operations.convert.to_numpy is done. [#1204](https://github.com/scikit-hep/awkward/pull/1204) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: Don't let ak.to_list act on v2 arrays (finishing #1201). [#1203](https://github.com/scikit-hep/awkward/pull/1203) ([@jpivarski](https://github.com/jpivarski))\r\n- C++ refactoring: Implemented v2 ak.to_list and switched all v2 tests to use it. [#1201](https://github.com/scikit-hep/awkward/pull/1201) ([@jpivarski](https://github.com/jpivarski))\r\n\r\n### Other merged PRs\r\n\r\n- Keep as much length knowledge as possible in typetracers. [#1312](https://github.com/scikit-hep/awkward/pull/1312) ([@jpivarski](https://github.com/jpivarski))\r\n- Fix lost 'behavior' in 'ak.unzip'. [#1310](https://github.com/scikit-hep/awkward/pull/1310) ([@jpivarski](https://github.com/jpivarski))\r\n- Awkward CUDA Kernel's version should be tied with Awkward [#1306](https://github.com/scikit-hep/awkward/pull/1306) ([@swishdiff](https://github.com/swishdiff))\r\n- Implement Awkward --> C++ with Cling. [#1300](https://github.com/scikit-hep/awkward/pull/1300) ([@jpivarski](https://github.com/jpivarski))\r\n- Remove unnecessary line blank from the tops of almost all files . [#1299](https://github.com/scikit-hep/awkward/pull/1299) ([@jpivarski](https://github.com/jpivarski))\r\n- Allow ak.nan_to_num arguments to be arrays. [#1298](https://github.com/scikit-hep/awkward/pull/1298) ([@jpivarski](https://github.com/jpivarski))\r\n- Fix a typo [#1290](https://github.com/scikit-hep/awkward/pull/1290) ([@douglasdavis](https://github.com/douglasdavis))\r\n- [pre-commit.ci] pre-commit autoupdate [#1277](https://github.com/scikit-hep/awkward/pull/1277) ([@pre-commit-ci](https://github.com/pre-commit-ci))\r\n- This PR adds support to call kernels in CUDA from v2 Awkward Arrays. [#1276](https://github.com/scikit-hep/awkward/pull/1276) ([@swishdiff](https://github.com/swishdiff))\r\n- style: pylint 1 [#1275](https://github.com/scikit-hep/awkward/pull/1275) ([@henryiii](https://github.com/henryiii))\r\n- Fixing #1266 by reordering nextparents (in v2; v1 is NOT FIXED!). [#1274](https://github.com/scikit-hep/awkward/pull/1274) ([@jpivarski](https://github.com/jpivarski))\r\n- Add GHA to build CUDA Wheels and update the cuda build script [#1270](https://github.com/scikit-hep/awkward/pull/1270) ([@swishdiff](https://github.com/swishdiff))\r\n- style: update to first non-pre-release black! [#1267](https://github.com/scikit-hep/awkward/pull/1267) ([@henryiii](https://github.com/henryiii))\r\n- Bump pypa/gh-action-pypi-publish from 1.4.2 to 1.5.0 [#1265](https://github.com/scikit-hep/awkward/pull/1265) ([@dependabot](https://github.com/dependabot))\r\n- Bump pypa/cibuildwheel from 1.12.0 to 2.3.1 [#1264](https://github.com/scikit-hep/awkward/pull/1264) ([@dependabot](https://github.com/dependabot))\r\n- Remove distutils reference in test (now an error). [#1258](https://github.com/scikit-hep/awkward/pull/1258) ([@jpivarski](https://github.com/jpivarski))\r\n- Add a CITATION.cff file to specify a set of authors. [#1257](https://github.com/scikit-hep/awkward/pull/1257) ([@jpivarski](https://github.com/jpivarski))\r\n- style: further cleanup for Python 3.6+ [#1246](https://github.com/scikit-hep/awkward/pull/1246) ([@henryiii](https://github.com/henryiii))\r\n- style: pyupgrade to 3.6 [#1244](https://github.com/scikit-hep/awkward/pull/1244) ([@henryiii](https://github.com/henryiii))\r\n- style: add shellcheck [#1243](https://github.com/scikit-hep/awkward/pull/1243) ([@henryiii](https://github.com/henryiii))\r\n- Revert \"Build wheels for ppc64le\" [#1239](https://github.com/scikit-hep/awkward/pull/1239) ([@jpivarski](https://github.com/jpivarski))\r\n- Remove Windows 32-bit from the Python 3.10 build. [#1237](https://github.com/scikit-hep/awkward/pull/1237) ([@jpivarski](https://github.com/jpivarski))\r\n- macos segfault bugfix [#1232](https://github.com/scikit-hep/awkward/pull/1232) ([@ianna](https://github.com/ianna))\r\n- Updated the generate-cuda script. Works for py >= 3.8 [#1231](https://github.com/scikit-hep/awkward/pull/1231) ([@swishdiff](https://github.com/swishdiff))\r\n- Build wheels for ppc64le [#1224](https://github.com/scikit-hep/awkward/pull/1224) ([@chrisburr](https://github.com/chrisburr))\r\n- Restore pybind11 2.9.0. [#1223](https://github.com/scikit-hep/awkward/pull/1223) ([@jpivarski](https://github.com/jpivarski))\r\n- [pre-commit.ci] pre-commit autoupdate [#1213](https://github.com/scikit-hep/awkward/pull/1213) ([@pre-commit-ci](https://github.com/pre-commit-ci))\r\n- Drop Win32 Py3.10 test and musllinux in deployment. [#1212](https://github.com/scikit-hep/awkward/pull/1212) ([@jpivarski](https://github.com/jpivarski))\r\n- json de-/serialisation from/to string or file [#1207](https://github.com/scikit-hep/awkward/pull/1207) ([@ianna](https://github.com/ianna))\r\n- Better error message for Content::axis_wrap_if_negative. [#1202](https://github.com/scikit-hep/awkward/pull/1202) ([@jpivarski](https://github.com/jpivarski))\r\n- Allow non-array iterables in __array_function__. [#1198](https://github.com/scikit-hep/awkward/pull/1198) ([@jpivarski](https://github.com/jpivarski))\r\n- Fix ak.singletons for non-optional data. [#1197](https://github.com/scikit-hep/awkward/pull/1197) ([@jpivarski](https://github.com/jpivarski))\r\n- Remove distutils dependence. [#1196](https://github.com/scikit-hep/awkward/pull/1196) ([@jpivarski](https://github.com/jpivarski))\r\n- [pre-commit.ci] pre-commit autoupdate [#1194](https://github.com/scikit-hep/awkward/pull/1194) ([@pre-commit-ci](https://github.com/pre-commit-ci))\r\n- Remove duplicated text [#1187](https://github.com/scikit-hep/awkward/pull/1187) ([@BioGeek](https://github.com/BioGeek))\r\n- Drop all length information from TypeTracer, get all tests working again. [#1184](https://github.com/scikit-hep/awkward/pull/1184) ([@jpivarski](https://github.com/jpivarski))\r\n- Bugs found by the Dask project: broaden type-tracers' applicability [#1183](https://github.com/scikit-hep/awkward/pull/1183) ([@jpivarski](https://github.com/jpivarski))\r\n- Remove Python 2.7 and 3.5 support. [#1182](https://github.com/scikit-hep/awkward/pull/1182) ([@jpivarski](https://github.com/jpivarski))\r\n- Fixed zeros in RegularArray shape. [#1181](https://github.com/scikit-hep/awkward/pull/1181) ([@jpivarski](https://github.com/jpivarski))\r\n- ak.to_numpy with RegularArray of size zero and non-zero length. [#1180](https://github.com/scikit-hep/awkward/pull/1180) ([@jpivarski](https://github.com/jpivarski))\r\n- Raise ValueError for incompatible union types in ak.unzip. [#1179](https://github.com/scikit-hep/awkward/pull/1179) ([@jpivarski](https://github.com/jpivarski))\r\n- Fix leading zeros in ak.unflatten. [#1178](https://github.com/scikit-hep/awkward/pull/1178) ([@jpivarski](https://github.com/jpivarski))\r\n- NumpyArray::numbers_to_type must use flattened_length, not length. [#1175](https://github.com/scikit-hep/awkward/pull/1175) ([@jpivarski](https://github.com/jpivarski))\r\n- [pre-commit.ci] pre-commit autoupdate [#1174](https://github.com/scikit-hep/awkward/pull/1174) ([@pre-commit-ci](https://github.com/pre-commit-ci))\r\n- Bugs found by the Dask project [#1172](https://github.com/scikit-hep/awkward/pull/1172) ([@jpivarski](https://github.com/jpivarski))\r\n- Parquet files with zero record batches. [#1170](https://github.com/scikit-hep/awkward/pull/1170) ([@jpivarski](https://github.com/jpivarski))\r\n- ArrayBuilder: replace shared with unique [#1155](https://github.com/scikit-hep/awkward/pull/1155) ([@ianna](https://github.com/ianna))\r\n- pictures for a tutorial [#948](https://github.com/scikit-hep/awkward/pull/948) ([@ianna](https://github.com/ianna))\r\n\r\n### Contributors to this release\r\n\r\n([GitHub contributors page for this release](https://github.com/scikit-hep/awkward/graphs/contributors?from=2021-12-02&to=2022-03-01&type=c))\r\n\r\n[@agoose77](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Aagoose77+updated%3A2021-12-02..2022-03-01&type=Issues) | [@allcontributors](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Aallcontributors+updated%3A2021-12-02..2022-03-01&type=Issues) | [@BioGeek](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3ABioGeek+updated%3A2021-12-02..2022-03-01&type=Issues) | [@chrisburr](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Achrisburr+updated%3A2021-12-02..2022-03-01&type=Issues) | [@codecov](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Acodecov+updated%3A2021-12-02..2022-03-01&type=Issues) | [@dependabot](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Adependabot+updated%3A2021-12-02..2022-03-01&type=Issues) | [@douglasdavis](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Adouglasdavis+updated%3A2021-12-02..2022-03-01&type=Issues) | [@henryiii](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Ahenryiii+updated%3A2021-12-02..2022-03-01&type=Issues) | [@ianna](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Aianna+updated%3A2021-12-02..2022-03-01&type=Issues) | [@ioanaif](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Aioanaif+updated%3A2021-12-02..2022-03-01&type=Issues) | [@jpivarski](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Ajpivarski+updated%3A2021-12-02..2022-03-01&type=Issues) | [@martindurant](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Amartindurant+updated%3A2021-12-02..2022-03-01&type=Issues) | [@miranov25](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Amiranov25+updated%3A2021-12-02..2022-03-01&type=Issues) | [@pre-commit-ci](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Apre-commit-ci+updated%3A2021-12-02..2022-03-01&type=Issues) | [@swishdiff](https://github.com/search?q=repo%3Ascikit-hep%2Fawkward+involves%3Aswishdiff+updated%3A2021-12-02..2022-03-01&type=Issues)\r\n\r\n\r\n</details>\r\n\r\n<details><summary> Existing changelog for 1.8.0</summary>\r\n\r\n\r\n<div class=\"section\" id=\"release-1-8-0\">\r\n<h2>Release <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0\">1.8.0</a><a class=\"headerlink\" href=\"#release-1-8-0\" title=\"Permalink to this heading\">\u00b6</a></h2>\r\n<blockquote>\r\n<div><p>(<a class=\"reference external\" href=\"https://pypi.org/project/awkward/1.8.0/\">pip</a>)</p>\r\n</div></blockquote>\r\n<p><em>(no pull requests)</em></p>\r\n</div>\r\n<div class=\"section\" id=\"release-1-8-0rc7\">\r\n<h2>Release <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0rc7\">1.8.0rc7</a><a class=\"headerlink\" href=\"#release-1-8-0rc7\" title=\"Permalink to this heading\">\u00b6</a></h2>\r\n<blockquote>\r\n<div><p>(<a class=\"reference external\" href=\"https://pypi.org/project/awkward/1.8.0rc7/\">pip</a>)</p>\r\n</div></blockquote>\r\n<ul class=\"simple\">\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1326\">#1326</a>: Docs: fix typo in documentation.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1314\">#1314</a>: chore: remove extra files from the wheels.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1313\">#1313</a>: ci: avoid PyPI cuda wheel upload.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1316\">#1316</a>: chore: bump pybind11 to 2.9.1.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1312\">#1312</a>: Keep as much length knowledge as possible in typetracers.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1322\">#1322</a>: chore: wheel not required for setuptools PEP 517 (all-repos)</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1317\">#1317</a>: C++ refactoring: ak.cartesian, ak.argcartesian.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1301\">#1301</a>: C++ refactoring: ak.strings_astype.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1308\">#1308</a>: Feat: add <code class=\"docutils literal notranslate\"><span class=\"pre\">optiontype_outside_record</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">ak.zip</span></code></p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1307\">#1307</a>: C++ refactoring: ak.argcombinations, ak.combinations.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1309\">#1309</a>: C++ refactoring: ak.sort.</p></li>\r\n</ul>\r\n</div>\r\n<div class=\"section\" id=\"release-1-8-0rc6\">\r\n<h2>Release <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0rc6\">1.8.0rc6</a><a class=\"headerlink\" href=\"#release-1-8-0rc6\" title=\"Permalink to this heading\">\u00b6</a></h2>\r\n<blockquote>\r\n<div><p>(<a class=\"reference external\" href=\"https://pypi.org/project/awkward/1.8.0rc6/\">pip</a>)</p>\r\n</div></blockquote>\r\n<ul class=\"simple\">\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1310\">#1310</a>: Fix lost \u2018behavior\u2019 in \u2018ak.unzip\u2019.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1300\">#1300</a>: Implement Awkward \u2013&gt; C++ with Cling.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1306\">#1306</a>: Version of awkward_cuda should be tied with awkward.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1304\">#1304</a>: C++ refactoring: ak.argsort.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1303\">#1303</a>: Fix: do not increment field index for nested lists.</p></li>\r\n</ul>\r\n</div>\r\n<div class=\"section\" id=\"release-1-8-0rc5\">\r\n<h2>Release <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0rc5\">1.8.0rc5</a><a class=\"headerlink\" href=\"#release-1-8-0rc5\" title=\"Permalink to this heading\">\u00b6</a></h2>\r\n<blockquote>\r\n<div><p>(<a class=\"reference external\" href=\"https://pypi.org/project/awkward/1.8.0rc5/\">pip</a>)</p>\r\n</div></blockquote>\r\n<p><em>(no pull requests)</em></p>\r\n</div>\r\n<div class=\"section\" id=\"release-1-8-0rc4\">\r\n<h2>Release <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0rc4\">1.8.0rc4</a><a class=\"headerlink\" href=\"#release-1-8-0rc4\" title=\"Permalink to this heading\">\u00b6</a></h2>\r\n<blockquote>\r\n<div><p>(<a class=\"reference external\" href=\"https://pypi.org/project/awkward/1.8.0rc4/\">pip</a>)</p>\r\n</div></blockquote>\r\n<ul class=\"simple\">\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1299\">#1299</a>: Remove unnecessary line blank from the tops of almost all files .</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1298\">#1298</a>: Allow ak.nan_to_num arguments to be arrays.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1296\">#1296</a>: ak.fields.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1297\">#1297</a>: ak.without_parameters.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1293\">#1293</a>: C++ refactoring: ak.full_like, ak.zeros_like, ak.ones_like.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1275\">#1275</a>: style: pylint 1.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1274\">#1274</a>: Fixing <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/issues/1266\">#1266</a> (in v1 and v2), possibly by reordering nextparents.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1294\">#1294</a>: C++ refactoring: ak._v2.from_arrow_schema function.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1289\">#1289</a>: C++ refactoring: ak.with_parameter.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1292\">#1292</a>: C++ refactoring: ak.with_field.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1290\">#1290</a>: typo.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1276\">#1276</a>: This PR adds support to call kernels in CUDA from v2 Awkward Arrays.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1249\">#1249</a>: Fix: support nested option types in <code class=\"docutils literal notranslate\"><span class=\"pre\">ak.is_none</span></code> (<strong>also:</strong> <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/issues/1193\">#1193</a>, <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/issues/1193\">#1193</a>)</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1279\">#1279</a>: Fix: simplify output in {Byte,Bit}MaskedArray.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1277\">#1277</a>: [pre-commit.ci] pre-commit autoupdate.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1240\">#1240</a>: Getting Numba to work for v2 arrays.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1207\">#1207</a>: json de-/serialisation from/to string or file.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1270\">#1270</a>: Add GHA to build CUDA Wheels and update the cuda build script.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1262\">#1262</a>: chore: initial nox and pylint support.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1267\">#1267</a>: style: update to first non-pre-release black!</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1265\">#1265</a>: Bump pypa/gh-action-pypi-publish from 1.4.2 to 1.5.0.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1257\">#1257</a>: Add a .zenodo.json file to specify a set of authors.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1264\">#1264</a>: Bump pypa/cibuildwheel from 1.12.0 to 2.3.1.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1263\">#1263</a>: chore: add dependabot for actions.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1259\">#1259</a>: Fix: fix <code class=\"docutils literal notranslate\"><span class=\"pre\">ByteMaskedArray.simplify_optiontype()</span></code></p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1258\">#1258</a>: Remove distutils reference in test (now an error).</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1255\">#1255</a>: chore: update pytest config, 6.0+</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1242\">#1242</a>: C++ refactoring: ak.parameters.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1243\">#1243</a>: style: add shellcheck.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1254\">#1254</a>: fix: building twice was broken.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1248\">#1248</a>: Fix: support mixed array types in <code class=\"docutils literal notranslate\"><span class=\"pre\">NumpyLike.to_rectilinear</span></code></p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1246\">#1246</a>: style: further cleanup for Python 3.6+</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1244\">#1244</a>: style: pyupgrade to 3.6.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1245\">#1245</a>: layout.completely_flatten should not concatenate (performance issue).</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1234\">#1234</a>: C++ refactoring: ak.type and ak.values_astype.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1214\">#1214</a>: Fix: drop parameters for flattened RecordArray.</p></li>\r\n</ul>\r\n</div>\r\n<div class=\"section\" id=\"release-1-8-0rc3\">\r\n<h2>Release <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0rc3\">1.8.0rc3</a><a class=\"headerlink\" href=\"#release-1-8-0rc3\" title=\"Permalink to this heading\">\u00b6</a></h2>\r\n<blockquote>\r\n<div><p>(<a class=\"reference external\" href=\"https://pypi.org/project/awkward/1.8.0rc3/\">pip</a>)</p>\r\n</div></blockquote>\r\n<ul class=\"simple\">\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1239\">#1239</a>: Revert \u201cBuild wheels for ppc64le (<a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/issues/1224\">#1224</a>)\u201d</p></li>\r\n</ul>\r\n</div>\r\n<div class=\"section\" id=\"release-1-8-0rc2\">\r\n<h2>Release <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0rc2\">1.8.0rc2</a><a class=\"headerlink\" href=\"#release-1-8-0rc2\" title=\"Permalink to this heading\">\u00b6</a></h2>\r\n<ul class=\"simple\">\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1233\">#1233</a>: C++ refactoring: ak.with_name.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1231\">#1231</a>: Updated the generate-cuda script. Works for py &gt;= 3.8.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1224\">#1224</a>: Build wheels for ppc64le.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1237\">#1237</a>: Remove Windows 32-bit from the Python 3.10 build.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1229\">#1229</a>: C++ refactoring: ak.pad_none.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1232\">#1232</a>: macos segfault bugfix.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1225\">#1225</a>: C++ refactoring: ak.zip.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1228\">#1228</a>: Redo PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/issues/1227\">#1227</a>: fixing \u2018emptyArray\u2019 typo.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1226\">#1226</a>: C++ refactoring: ak.num.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1217\">#1217</a>: C++ refactoring: ak.flatten.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1220\">#1220</a>: C++ refactoring: ak.where.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1223\">#1223</a>: Restore pybind11 2.9.0.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1218\">#1218</a>: Make highlevel __repr__ safe for typetracers.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1219\">#1219</a>: C++ refactoring: ak.mask.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1221\">#1221</a>: C++ refactoring: ak.local_index.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1222\">#1222</a>: C++ refactoring: ak.ravel.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1211\">#1211</a>: Removed v1_to_v2 from all v2 tests. (<strong>also:</strong> <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/issues/962\">#962</a>)</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1215\">#1215</a>: Fixed handling of list-nested boolean slices.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1212\">#1212</a>: Drop Win32 Py3.10 test and musllinux in deployment.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1213\">#1213</a>: [pre-commit.ci] pre-commit autoupdate.</p></li>\r\n</ul>\r\n</div>\r\n<div class=\"section\" id=\"release-1-8-0rc1\">\r\n<h2>Release <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0rc1\">1.8.0rc1</a><a class=\"headerlink\" href=\"#release-1-8-0rc1\" title=\"Permalink to this heading\">\u00b6</a></h2>\r\n<ul class=\"simple\">\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1188\">#1188</a>: ci: try Numba RC on 3.10.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1199\">#1199</a>: chore: bump to pybind11 2.9.0.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1210\">#1210</a>: docs: add BioGeek as a contributor for doc.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1208\">#1208</a>: ak._v2 namespace is now filled with the right symbols.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1206\">#1206</a>: Highlevel non-reducers and improved testing/fixes for reducers.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1204\">#1204</a>: ak._v2.operations.convert.to_numpy is done.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1203\">#1203</a>: Don\u2019t let ak.to_list act on v2 arrays (finishing <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/issues/1201\">#1201</a>).</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1202\">#1202</a>: Better error message for Content::axis_wrap_if_negative.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1201\">#1201</a>: Implemented v2 ak.to_list and switched all v2 tests to use it.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1198\">#1198</a>: Allow non-array iterables in __array_function__.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1197\">#1197</a>: Fix ak.singletons for non-optional data.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1196\">#1196</a>: Remove distutils dependence.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1195\">#1195</a>: Fix: _pack_layout should also pack projected index arrays.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1194\">#1194</a>: [pre-commit.ci] pre-commit autoupdate.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/948\">#948</a>: pictures for a tutorial.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1155\">#1155</a>: ArrayBuilder: replace shared with unique.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1011\">#1011</a>: chore: bump pybind11 to 2.8.0.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1186\">#1186</a>: feat: bump cibuildwheel, add Python 3.10.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1187\">#1187</a>: Remove duplicated text.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1184\">#1184</a>: Drop all length information from TypeTracer, get all tests working again.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1183\">#1183</a>: Bugs found by the Dask project: broaden type-tracers\u2019 applicability.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1172\">#1172</a>: First bug found by @martindurant.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1182\">#1182</a>: Remove Python 2.7 and 3.5 support.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1181\">#1181</a>: Fixed zeros in RegularArray shape.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1175\">#1175</a>: NumpyArray::numbers_to_type must use flattened_length, not length.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1180\">#1180</a>: ak.to_numpy with RegularArray of size zero and non-zero length.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1179\">#1179</a>: Raise ValueError for incompatible union types in ak.unzip.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1178\">#1178</a>: Fix leading zeros in ak.unflatten.</p></li>\r\n<li><p>PR <a class=\"reference external\" href=\"https://github.com/scikit-hep/awkward-1.0/pull/1174\">#1174</a>: [pre-commit.ci] pre-commit autoupdate.</p></li>\r\n</ul>\r\n</div>\r\n</div>\r\n\r\n</details>\r\n\r\n## Discussion\r\nIn order to produce richer release notes, we would benefit from using a standard set of prefixes for our PR titles. Really, we could do this for commits too, but as we squash and merge, it's really an aside for the purposes of this discussion. Some examples of these standards:\r\n\r\n- https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional \r\n- https://github-activity.readthedocs.io/en/latest/#id1\r\n\r\nIt really doesn't matter what we choose here, so long as we are all following some kind of convention. We don't even need to use the same convention (although this is really recommended).\r\n\r\nI could write a small action to validate the PR title before merge if that would be helpful to enforce this. I hope that, given we only need to do this at merge time, it should minimally impact us during development.\r\n\r\nThoughts?",
  "closed_at":"2022-08-23T11:10:11Z",
  "comments":7,
  "created_at":"2022-08-03T10:38:08Z",
  "id":1327017028,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5PGKxE",
  "number":1577,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Development: use standardised PR title prefixes?",
  "updated_at":"2022-08-23T11:10:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\n```python\r\n>>>  import awkward as ak\r\n>>> ak.to_arrow([{},{},{}])\r\nValueError                                Traceback (most recent call last)\r\nInput In [12], in <cell line: 1>()\r\n----> 1 ak.to_arrow([{},{},{}])\r\n\r\nFile ~/miniconda/envs/mongo-arrow_env/lib/python3.9/site-packages/awkward/operations/convert.py:2507, in to_arrow(array, list_to32, string_to32, bytestring_to32, allow_tensor)\r\n   2501     else:\r\n   2502         raise TypeError(\r\n   2503             f\"unrecognized array type: {layout!r}\"\r\n   2504             + ak._util.exception_suffix(__file__)\r\n   2505         )\r\n-> 2507 return recurse(layout, None, False)\r\n\r\nFile ~/miniconda/envs/mongo-arrow_env/lib/python3.9/site-packages/awkward/operations/convert.py:2247, in to_arrow.<locals>.recurse(layout, mask, is_option)\r\n   2242 elif isinstance(layout, ak.layout.RecordArray):\r\n   2243     values = [\r\n   2244         recurse(x[: len(layout)], mask, is_option) for x in layout.contents\r\n   2245     ]\r\n-> 2247     min_list_len = min(map(len, values))\r\n   2249     types = pyarrow.struct(\r\n   2250         [\r\n   2251             pyarrow.field(layout.key(i), values[i].type).with_nullable(\r\n   (...)\r\n   2255         ]\r\n   2256     )\r\n   2258     if mask is not None:\r\n\r\nValueError: min() arg is an empty sequence\r\n```\r\n\r\nIt works properly with `pyarrow`:\r\n\r\n```python\r\n>>> import pyarrow as pa\r\n>>> pa.array([{},{},{}]).tolist()\r\n[{}, {}, {}]\r\n```",
  "closed_at":"2022-08-11T12:33:53Z",
  "comments":2,
  "created_at":"2022-08-08T14:49:56Z",
  "id":1331987680,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5PZITg",
  "number":1578,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"List of Empty Objects is not supported",
  "updated_at":"2022-08-11T12:33:53Z",
  "user":"MDQ6VXNlcjIwOTY2Mjg="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR contains the doxygen documentation of -\r\n- [x] GrowableBuffer\r\n- [x] LayoutBuilder\r\n- [x] utils.h\r\n\r\nThere are also some minor fixes in the code of LayoutBuilder and its tests.",
  "closed_at":"2022-08-09T21:34:08Z",
  "comments":6,
  "created_at":"2022-08-08T22:18:30Z",
  "draft":false,
  "id":1332462456,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws482HRT",
  "number":1579,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-09T21:34:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Doxygen Documentation of GrowableBuffer and LayoutBuilder.",
  "updated_at":"2022-08-09T21:34:09Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This will help us to automate release notes in future. \r\n\r\nCloses #1577",
  "closed_at":"2022-08-15T10:29:57Z",
  "comments":1,
  "created_at":"2022-08-10T10:26:31Z",
  "draft":false,
  "id":1334410243,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws488ml7",
  "number":1580,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[WIP] CI: add validation for PR titles",
  "updated_at":"2022-08-15T10:29:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1578 ",
  "closed_at":"2022-08-11T12:33:51Z",
  "comments":2,
  "created_at":"2022-08-10T10:57:02Z",
  "draft":false,
  "id":1334445596,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws488uLv",
  "number":1581,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-11T12:33:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: allow empty `RecordArray`s in `ak.to_layout`",
  "updated_at":"2022-08-11T12:33:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Currently, `ak.Record.__iter__` returns an iterator over its _field names_, which may be what a user expects if a Record were a [Mapping/MutableMapping](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping) like a dict, but it's not. It's probably for the best that it's not, because we don't want `keys`, `values`, `items` methods, particularly since we're trying to consolidate the nomenclature of field names as \"fields\", rather than \"keys\". And we especially don't want the non-vectorized `__eq__` and `__ne__` that Mapping has.\r\n\r\nTo throw a little more confusion in, `ak.Record.__len__` always returns 1 and not the number of fields (the length of what it iterates over). That's a weird enough choice to be considered a bug.\r\n\r\nSince v2 is coming up and we can make little backward-incompatible changes like this, perhaps we should just ensure that v2 `ak.Record` has no `__iter__` and `__len__` methods. If they're really needed for something, we can be driven by the use-case as to whether `ak.Record` iteration should be over field names, field-value pairs, or something else. At the very least, `__len__` should return the length of the `__iter__` iterable.\r\n\r\nRelated to this is how `ak.Record` is treated by `ak.from_iter`: it naively iterates, which means it gets the field names:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak._v2.from_iter(ak._v2.Record({\"a\": 1, \"b\": 2}))\r\n<Array ['a', 'b'] type='2 * string'>\r\n>>> ak._v2.from_iter([ak._v2.Record({\"a\": 1, \"b\": 2})])\r\n<Array [['a', 'b']] type='1 * var * string'>\r\n```\r\n\r\nAlthough iteration is a slow way to build an array and coming from a collection of `ak.Record` is suggestive that it's being used when a faster way is possible, the above is almost certainly not what the user had in mind. Changing v2 `ak.from_iter` to recognize `ak.Record` and build an equivalent thing is an improvement that would be independent of fixing the `ak.Record.__iter__` and `__len__` behavior, but both should be done.\r\n\r\n**Edit:** also check `ArrayBuilder.append`; make sure it's consistent with `ak.from_iter` (it might be how `ak.from_iter` is implemented...)",
  "closed_at":"2022-09-24T21:12:22Z",
  "comments":6,
  "created_at":"2022-08-10T15:31:10Z",
  "id":1334807210,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Pj4qq",
  "number":1582,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Iterating over Records and `ak.from_iter`",
  "updated_at":"2022-09-28T11:33:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.8.1 to 2.9.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.9.0</h2>\n<ul>\n<li>\ud83c\udf1f CPython 3.11 wheels are now built by default - without the CIBW_PRERELEASE_PYTHONS flag. It's time to build and upload these wheels to PyPI! This release includes CPython 3.11.0rc1, which is guaranteed to be ABI compatible with the final release. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1226\">#1226</a>)</li>\n<li>\u26a0\ufe0f Removed support for running cibuildwheel in Python 3.6. Python 3.6 is EOL. However, cibuildwheel continues to build CPython 3.6 wheels for the moment. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1175\">#1175</a>)</li>\n<li>\u2728 Improved error messages when misspelling TOML options, suggesting close matches (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1205\">#1205</a>)</li>\n<li>\ud83d\udee0 When running on Apple Silicon (so far, an unsupported mode of operation), cibuildwheel no longer builds universal2 wheels by default - just arm64. See <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1204\">#1204</a> for discussion. We hope to release official support for native builds on Apple Silicon soon! (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1217\">#1217</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.9.0</h3>\n<p><em>11 August 2022</em></p>\n<ul>\n<li>\ud83c\udf1f CPython 3.11 wheels are now built by default - without the CIBW_PRERELEASE_PYTHONS flag. It's time to build and upload these wheels to PyPI! This release includes CPython 3.11.0rc1, which is guaranteed to be ABI compatible with the final release. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1226\">#1226</a>)</li>\n<li>\u26a0\ufe0f Removed support for running cibuildwheel in Python 3.6. Python 3.6 is EOL. However, cibuildwheel continues to build CPython 3.6 wheels for the moment. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1175\">#1175</a>)</li>\n<li>\u2728 Improved error messages when misspelling TOML options, suggesting close matches (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1205\">#1205</a>)</li>\n<li>\ud83d\udee0 When running on Apple Silicon (so far, an unsupported mode of operation), cibuildwheel no longer builds universal2 wheels by default - just arm64. See <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1204\">#1204</a> for discussion. We hope to release official support for native builds on Apple Silicon soon! (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1217\">#1217</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/0abd6c205d5baf3066155b5bf85219147d770c61\"><code>0abd6c2</code></a> Bump version: v2.9.0</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/71cebdaca4706e16ba3c44f1325acd6e98b51897\"><code>71cebda</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1219\">#1219</a> from pypa/disable-pytest-azurepipelines-plugin</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/5b0d8e7d485738a82e054f8ee888f9038b5919f8\"><code>5b0d8e7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1220\">#1220</a> from pypa/henryiii/ci/noxaction</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/bed97dbe5f730ad9e7cd47d371842f27569c5ff9\"><code>bed97db</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1224\">#1224</a> from kemingy/add_example_proj</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/72e1fec0a4cfd88efee77efc56f27990ca719d62\"><code>72e1fec</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1226\">#1226</a> from minrk/unprerelease-311</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/046df7d44eb7e897420d87292b306180526b40b4\"><code>046df7d</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1223\">#1223</a> from pypa/update-dependencies-pr</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/2d155c01b574ce6903a7d76d22e8f2b0fd24ec22\"><code>2d155c0</code></a> Build cp311 without setting prerelease_pythons</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/30bfc7b2b2253ed668afb3bc77e7820e7588c27f\"><code>30bfc7b</code></a> chore: add two ML example projects</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/e2c0d6831d53fffca56770a0f7db9fa9480f8448\"><code>e2c0d68</code></a> Update dependencies</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/6549a90991c8d1fe135402fede048bc9d9572e54\"><code>6549a90</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1217\">#1217</a> from mayeut/no-universal2</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.8.1...v2.9.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.8.1&new-version=2.9.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-08-18T19:59:49Z",
  "comments":3,
  "created_at":"2022-08-12T17:24:12Z",
  "draft":false,
  "id":1337510939,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49G4Tn",
  "number":1583,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump pypa/cibuildwheel from 2.8.1 to 2.9.0",
  "updated_at":"2022-08-18T20:00:00Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.9.0rc10\n\n### Description and code to reproduce\n\nWhen concatenating two regular arrays, I would expect the output array to be regular, too. \r\n\r\nThis works in this case\r\n```python\r\nimport awkward._v2 as ak\r\nimport numpy as np\r\n\r\nnp1 = ak.Array(np.array([[53,274],[39,388]]))\r\nnp1\r\n# <Array [[53, 274], [39, 388]] type='2 * 2 * int64'>\r\nnp2 = ak.Array(np.array([[53,274],[39,388]]))\r\nnp2\r\n# <Array [[53, 274], [39, 388]] type='2 * 2 * int64'>\r\n\r\nak.concatenate([np1, np2])\r\n# <Array [[53, 274], [39, 388], [53, ...], [39, 388]] type='4 * 2 * int64'>\r\n```\r\n\r\nHowever, when using the same arrays, but generated from json, the second dimension is variable after concatenation\r\n\r\n```python\r\na1 = ak.from_json('[[53,274],[39,388]]')\r\na2 = ak.from_json('[[53,274],[39,388]]')\r\na1 = ak.to_regular(a1, 1)\r\na2 = ak.to_regular(a2, 1)\r\na1\r\n# <Array [[53, 274], [39, 388]] type='2 * 2 * int64'>\r\na2 \r\n# <Array [[53, 274], [39, 388]] type='2 * 2 * int64'>\r\n\r\nak.concatenate([a1, a2])\r\n# <Array [[53, 274], [39, 388], [53, ...], [39, 388]] type='4 * var * int64'>\r\n```\r\n\r\n### Context: \r\nDiscovered while working on https://github.com/scverse/anndata/pull/647#issuecomment-1061847089. The unittest for anndata concatenation doesn't work because of this. I can work around this by manually making the array regular again after concatenation, but wanted to check if this is something that's going to be fixed on the awkward array side first. \r\n",
  "closed_at":"2022-08-18T23:32:09Z",
  "comments":5,
  "created_at":"2022-08-12T19:46:49Z",
  "id":1337645500,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Putm8",
  "number":1586,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Inconsistency in ak.concatenate",
  "updated_at":"2022-08-19T19:42:40Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"[replite](https://github.com/jtpio/replite) is a standalone code console, powered by jupyterlite, that runs in the webbrowser. \r\n\r\nThis PR builds Awkward as an out-of-tree pyodide module and exposes it to end-users of the documentation within a replite console. This should permit users to test-drive Awkward without needing to pip install it, and could (in future) be extended to permit interactive examples (via `thebe` integration) in our user guide.\r\n\r\nNamely, this PR:\r\n- Builds Awkward Array as an WASM wheel via pyodide (emscripten). \r\n- Adds a \"Try Awkward Array in the browser\" example page with an embedded replite code-console (via `jupyterlite-sphinx`)\r\n\r\n![image](https://user-images.githubusercontent.com/1248413/184512866-4d85c9db-62d1-4be5-bc79-ac918b99374e.png)\r\n\r\nWe can drop the `await piplite.install(...)` if we build in-tree, but that's a lot slower and heavier.\r\n\r\nThere are a couple of pain points that I'd like to resolve first before merging:\r\n- Support for latest pyodide (https://github.com/jupyterlite/jupyterlite/pull/756)\r\n   - Pyodide 0.21.0 makes it a lot easier to compile a shared library like Awkward's C++ component, but jupyterlite is yet to support it (see PR)\r\n   - Currently we therefore build jupyterlite from GIT, but once there's an RC/pre-release we can easily just `pip install` on both our CI and RTD.\r\n- Move WASM building into separate job, and use ccache.",
  "closed_at":"2022-08-15T12:06:26Z",
  "comments":2,
  "created_at":"2022-08-13T22:10:26Z",
  "draft":true,
  "id":1338067100,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49In6b",
  "number":1587,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Docs: add replite support",
  "updated_at":"2022-08-15T12:08:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"After a few hours of reading the docs, I came up with a few simple scenarios where I struggle to achieve performance improvements with `awkward` `1.8.0` with ragged data, and for the most part see slow downs compared to simple iteration and application of NumPy ufuncs, even when I increase the number of records and degree of \"jaggedness\" in the data.\r\n\r\nI'll place a reproducer below, and I think my question is:\r\n- are there prospects for improvement here?\r\n- if not, maybe this is something to document re: appropriate use cases?\r\n\r\n```python\r\nfrom time import perf_counter\r\n\r\nimport numpy as np\r\nfrom numpy.testing import assert_allclose\r\nimport awkward as ak\r\n\r\n\r\ndef setup_nested_list(num_records):\r\n    # as you increase num_records, you get both\r\n    # more records and more jagged data\r\n    nested_list = []\r\n    for size in range(3, num_records):\r\n        nested_list.append(np.ones(shape=(size, 3)))\r\n    return nested_list\r\n\r\n\r\ndef avg_no_awk(nested_list):\r\n    result_arr = np.empty((len(nested_list), 3),\r\n                          dtype=np.float64)\r\n    for position, subarray in enumerate(nested_list):\r\n        result_arr[position] = np.average(subarray, axis=0)\r\n    return result_arr\r\n\r\n\r\ndef avg_with_awk(nested_list):\r\n    awk_arr = ak.Array(nested_list)\r\n    result_arr = ak.mean(awk_arr, axis=1)\r\n    return ak.to_numpy(result_arr)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    for num_records in [500,\r\n                        5000,\r\n                        7000]:\r\n        print(\"num jagged records:\", num_records)\r\n        nested_list = setup_nested_list(num_records)\r\n        start = perf_counter()\r\n        result_no_awk = avg_no_awk(nested_list=nested_list)\r\n        end = perf_counter()\r\n        without_awkard = end - start\r\n        print(\"without awkward (s):\", without_awkard)\r\n        start = perf_counter()\r\n        result_with_awk = avg_with_awk(nested_list=nested_list)\r\n        end = perf_counter()\r\n        with_awkward = end - start\r\n        print(\"with awkward (s):\", with_awkward)\r\n        if with_awkward < without_awkard:\r\n            print(\"speedup factor with awkward:\", without_awkard / with_awkward)\r\n        else:\r\n            print(\"slowdown factor with awkward:\", with_awkward / without_awkard)\r\n        assert_allclose(result_with_awk, result_no_awk)\r\n\r\n```\r\n\r\n```\r\nnum jagged records: 500\r\nwithout awkward (s): 0.00580483900012041\r\nwith awkward (s): 0.3663976220013865\r\nslowdown factor with awkward: 63.119342671482585\r\nnum jagged records: 5000\r\nwithout awkward (s): 0.2445533330010221\r\nwith awkward (s): 36.80084666699986\r\nslowdown factor with awkward: 150.48188554782874\r\nnum jagged records: 7000\r\nwithout awkward (s): 0.45862196600137395\r\nwith awkward (s): 72.65730339400034\r\nslowdown factor with awkward: 158.42525823061573\r\n\r\n```\r\n\r\nThis is a simplified version of an attempt to achieve performance improvements downstream (https://github.com/MDAnalysis/mdanalysis/issues/3776). Those cases were smaller, and `ak.Array` creation dominated, but increasing the record counts here doesn't seem too helpful in switching the balance--in fact, it is the opposite?",
  "closed_at":"2022-08-22T13:19:54Z",
  "comments":3,
  "created_at":"2022-08-14T17:54:35Z",
  "id":1338311951,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5PxQUP",
  "number":1588,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Remove pybind11 bottleneck in `ak.from_iter` (v1 and v2)",
  "updated_at":"2022-08-22T13:19:54Z",
  "user":"MDQ6VXNlcjc5MDMwNzg="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-08-15T14:34:31Z",
  "comments":3,
  "created_at":"2022-08-15T09:31:10Z",
  "draft":false,
  "id":1338755730,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49KyyC",
  "number":1589,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-15T14:34:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: RegularArray: maybe_toNumpy()",
  "updated_at":"2022-08-15T14:34:32Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"[replite](https://github.com/jtpio/replite) is a standalone code console, powered by jupyterlite, that runs in the webbrowser. \r\n\r\nThis PR builds Awkward as an out-of-tree pyodide module and exposes it to end-users of the documentation within a replite console. This should permit users to test-drive Awkward without needing to pip install it, and could (in future) be extended to permit interactive examples (via `thebe` integration) in our user guide.\r\n\r\nNamely, this PR:\r\n- Builds Awkward Array as an WASM wheel via pyodide (emscripten). \r\n- Adds a \"Try Awkward Array in the browser\" example page with an embedded replite code-console (via `jupyterlite-sphinx`)\r\n\r\n![image](https://user-images.githubusercontent.com/1248413/184512866-4d85c9db-62d1-4be5-bc79-ac918b99374e.png)\r\n\r\nWe can drop the `await piplite.install(...)` if we build in-tree, but that's a lot slower and heavier.\r\n\r\nThere are a couple of pain points that I'd like to resolve first before merging:\r\n- [x] Support for latest pyodide (https://github.com/jupyterlite/jupyterlite/pull/756)\r\n   - Pyodide 0.21.0 makes it a lot easier to compile a shared library like Awkward's C++ component, but jupyterlite is yet to support it (see PR)\r\n   - Currently we therefore build jupyterlite from GIT, but once there's an RC/pre-release we can easily just `pip install` on both our CI and RTD.\r\n- [x] Move WASM building into separate job\r\n- [ ] Use ccache for WASM build",
  "closed_at":"2022-08-19T21:23:00Z",
  "comments":2,
  "created_at":"2022-08-15T12:08:46Z",
  "draft":false,
  "id":1338921779,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49LXO9",
  "number":1590,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-19T21:23:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add replite code-console",
  "updated_at":"2022-08-19T21:23:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-08-15T14:13:44Z",
  "comments":1,
  "created_at":"2022-08-15T13:37:23Z",
  "draft":false,
  "id":1339016988,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49LrzR",
  "number":1591,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-15T14:13:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Docs: only build on CI",
  "updated_at":"2022-08-15T14:13:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This will make things slightly easier whilst I'm building out the CI-RTD integration.\r\n\r\nThis PR also removes a generated file from the VCS.",
  "closed_at":"2022-08-15T14:29:01Z",
  "comments":0,
  "created_at":"2022-08-15T14:22:30Z",
  "draft":false,
  "id":1339068738,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49L2w3",
  "number":1592,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-15T14:29:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"CI: docs build for any PR",
  "updated_at":"2022-08-15T14:29:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nHere's a good slice:\r\n\r\n```python\r\n>>> ak._v2.Array([[[1, 2, 3], [4, 5, 6]]])[:, []]\r\n<Array [[[], []]] type='1 * var * var * int64'>\r\n```\r\n\r\nThere's no record, no field being picked out, and it says, \"all of the first dimension, none of the second.\" The result is correct.\r\n\r\nHere's another good slice:\r\n\r\n```python\r\n>>> ak._v2.Array([{\"x\": [[1, 2, 3], [4, 5, 6]]}])[:, [0]]\r\n<Array [{x: [[1, 2, 3]]}] type='1 * {x: 1 * var * int64}'>\r\n```\r\n\r\nThere's a record array, but a field is not picked out, and it says, \"all of the first dimension, one item from the second.\" The result is correct.\r\n\r\nBut here's a bad slice:\r\n\r\n```python\r\n>>> ak._v2.Array([{\"x\": [[1, 2, 3], [4, 5, 6]]}])[:, []]\r\n<Array [{}] type='1 * {}'>\r\n```\r\n\r\nThere's a record array, but a field is not picked out, and it says, \"all of the first dimension, none of the second.\" The result is a record array with no fields: that's wrong\u2014there should still be an _x_ field, even though it will be empty.\r\n\r\nSomewhere, an `ak._v2.contents.RecordArray` is not being populated correctly.",
  "closed_at":"2022-08-26T21:29:25Z",
  "comments":0,
  "created_at":"2022-08-15T14:30:31Z",
  "id":1339078252,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5P0LZs",
  "number":1593,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"RecordArray loses its field in a slice that doesn't select fields (v2)",
  "updated_at":"2022-08-26T21:29:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"And some misc other fixes - trying to determine why the CI fails but locally it does not.",
  "closed_at":"2022-08-19T08:31:41Z",
  "comments":1,
  "created_at":"2022-08-15T14:38:15Z",
  "draft":false,
  "id":1339087442,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49L6zI",
  "number":1594,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-19T08:31:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: preserve release/ directory",
  "updated_at":"2022-08-19T08:31:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nAfter #1568, this works:\r\n\r\n```python\r\n>>> array = ak._v2.from_numpy(np.array([[[1, 2, 3], [4, 5, 6]]]), regulararray=True)\r\n>>> array[:, :, []]\r\n<Array [[[], []]] type='1 * 2 * 0 * int64'>\r\n```\r\n\r\nHowever, if the RegularArrays are inside of something else, such as an IndexedOptionArray (which doesn't change the dimensionality and it's not as complicated as a RecordArray or UnionArray), then it doesn't work.\r\n\r\n```python\r\n>>> array = ak._v2.Array(\r\n...     ak._v2.contents.IndexedOptionArray(\r\n...         ak._v2.index.Index64([0, -1]),\r\n...         ak._v2.from_numpy(np.array([[[1, 2, 3], [4, 5, 6]]]), regulararray=True, highlevel=False),\r\n...     )\r\n... )\r\n>>> array[:, :, []]\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/highlevel.py\", line 1175, in __repr__\r\n    return self._repr(80)\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/highlevel.py\", line 1199, in _repr\r\n    valuestr = \" \" + awkward._v2._prettyprint.valuestr(self, 1, strwidth)\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/_prettyprint.py\", line 211, in valuestr\r\n    _, strs = valuestr_horiz(data, limit_cols)\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/_prettyprint.py\", line 87, in valuestr_horiz\r\n    current = get_at(data, index)\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/_prettyprint.py\", line 42, in get_at\r\n    out = data._layout._getitem_at(index)\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/contents/indexedoptionarray.py\", line 160, in _getitem_at\r\n    return self._content._getitem_at(self._index[where])\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/contents/regulararray.py\", line 177, in _getitem_at\r\n    raise ak._v2._util.indexerror(self, where)\r\nIndexError: cannot slice RegularArray with 0\r\n```\r\n\r\nThis was the case before #1568; that PR didn't introduce it.\r\n\r\nAlternatively, we could turn the outermost regular-sized lists into variable-sized lists with `ak.from_regular`, perform the same slice, and expect the same result, namely `[[[], []]]`. But instead we get a different result:\r\n\r\n```python\r\n>>> array = ak._v2.from_regular(\r\n...     ak._v2.from_numpy(np.array([[[1, 2, 3], [4, 5, 6]]]), regulararray=True),\r\n...     axis=1,\r\n... )\r\n>>> array[:, :, []]\r\n<Array [[]] type='1 * var * 3 * int64'>\r\n```",
  "closed_at":"2022-09-06T19:41:43Z",
  "comments":1,
  "created_at":"2022-08-15T14:43:04Z",
  "id":1339092966,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5P0O_m",
  "number":1595,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Slicing RegularArrays inside of something else, such as IndexedOptionArray (v2)",
  "updated_at":"2022-09-06T19:41:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-09-08T16:21:45Z",
  "comments":2,
  "created_at":"2022-08-15T14:46:46Z",
  "draft":true,
  "id":1339096960,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49L81R",
  "number":1596,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix:  in RegularArray `getitem_next` should have an option when `maybe_toNumpy` is not None",
  "updated_at":"2022-09-23T00:48:59Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR fixes #1593, and closes #1601, in the following ways:\r\n- Normalises the `[]` index into an integer array, so that it passes through the correct indexing logic\r\n- Ensures the zero-length is set for advanced slices\r\n- Prevents [NumPy advanced-basic mixed indexing](https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#combining-advanced-and-basic-indexing) (case 1)\r\n- Hardens the `_getitem` logic against non-sized iterables.\r\n   - Normally this is best to let fail with the `len()` check, but in this case we are effectively implementing a `match` and it's much more elegant to ask for permission.\r\n\r\nThe existing test suite has been modified with this PR. Only one test has a modified expected output:\r\nhttps://github.com/scikit-hep/awkward/blob/456bae3de7d0edf82c34a2e948b76a7a786cd2ac/tests/v2/test_0024-use-regular-array.py#L23\r\n\r\nSome tests now raise intentional errors, so these are required using `pytest.raises`.",
  "closed_at":"2022-08-26T21:29:24Z",
  "comments":15,
  "created_at":"2022-08-15T18:32:04Z",
  "draft":false,
  "id":1339331942,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49Ms4a",
  "number":1597,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-26T21:29:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: empty slice lists of record arrays (#1593)",
  "updated_at":"2022-08-26T21:29:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-08-15T20:15:27Z",
  "comments":1,
  "created_at":"2022-08-15T19:23:07Z",
  "draft":false,
  "id":1339390786,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49M5VT",
  "number":1598,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-15T20:15:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Raises an exception on mixed Awkward/NumPy slices.",
  "updated_at":"2022-08-15T20:15:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Although it has been convenient to incrementally build Awkward Array's C++ part, there won't be much C++ code left after the 2.0 release, and most of the actual development (in which you need quick turn-around times) is in Python now.\r\n\r\nOnce `pip install -e .` works (probably easier after the v1 code is removed), we should remove localbuild.py. This includes documentation and CONTRIBUTING.md.\r\n\r\nIt's already a liability: it doesn't work on Windows (#1471) and although that's probably an easy fix, it can only easily be fixed by a developer on Windows who is familiar with how localbuild.py works. This error went uncaught for a long time because we don't test localbuild.py in CI. (In CI, we build the module _properly_, using `pip install .`.)\r\n\r\nSo localbuild.py's days are numbered. When it's gone, we can remove this issue, and I'm going to remove #1471 now as a wont-fix.",
  "closed_at":"2022-11-18T01:35:59Z",
  "comments":6,
  "created_at":"2022-08-15T19:46:19Z",
  "id":1339412247,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5P1c8X",
  "number":1599,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Get `pip install -e .` working and deprecate localbuild.py",
  "updated_at":"2023-02-15T19:10:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nIf you set a behavior in v2, then `to_list()` no longer returns a simple list, but instead returns Records. This is breaking https://github.com/scikit-hep/vector/pull/226.\r\n\r\nMWE:\r\n\r\n```python\r\nimport awkward\r\n\r\nfor ak in (awkward, awkward._v2):\r\n\r\n    class Point(ak.Record):\r\n        def distance(self, other):\r\n            return np.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)\r\n\r\n    ak.behavior[\"point\"] = Point\r\n\r\n    print(\r\n        ak.Array(\r\n            [[{\"rho\": 1, \"phi\": 1.0}], [], [{\"rho\": 2, \"phi\": 2.0}]], with_name=\"point\"\r\n        ).to_list()\r\n    )\r\n```\r\n\r\nThis prints:\r\n\r\n```output\r\n[[{'rho': 1, 'phi': 1.0}], [], [{'rho': 2, 'phi': 2.0}]]\r\n[[<Point {rho: 1, phi: 1} type='point[rho: int64, phi: float64]'>], [], [<Point {rho: 2, phi: 2} type='point[rho: int64, phi: float64]'>]]\r\n```",
  "closed_at":"2022-09-01T15:48:51Z",
  "comments":13,
  "created_at":"2022-08-16T17:59:01Z",
  "id":1340696077,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5P6WYN",
  "number":1600,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Consistency between __getitem__ and to_list when a Record is the top-level",
  "updated_at":"2022-09-01T15:48:51Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nHEAD\r\n\r\n### Description and code to reproduce\r\n\r\nIn fixing #1593, I realised that my understanding of NumPy's advanced slicing was missing some important context concerning separated advanced indices:\r\nhttps://numpy.org/doc/stable/user/basics.indexing.html#basics-indexing:~:text=In%20the%20first,just%20like%20slicing).\r\n\r\nNamely, \r\n> Two cases of index combination need to be distinguished:\r\n> - The advanced indices are separated by a slice, [Ellipsis](https://docs.python.org/3/library/constants.html#Ellipsis) or [newaxis](https://numpy.org/doc/stable/reference/constants.html#numpy.newaxis). For example `x[arr1, :, arr2]`.\r\n> - The advanced indices are all next to each other. For example `x[..., arr1, arr2, :]` but not `x[arr1, :, 1]` since 1 is an advanced index in this regard.\r\n>\r\n> In the first case, the dimensions resulting from the advanced indexing operation come first in the result array, and the subspace dimensions after that. In the second case, the dimensions from the advanced indexing operations are inserted into the result array at the same spot as they were in the initial array (the latter logic is what makes simple advanced indexing behave just like slicing).\r\n\r\nIt turns out that we don't handle this either. Our current solution in `main` only produces valid solutions in the case where the array can be converted to a regular array, and the advanced slices are passed as empty lists (e.g. `[]`) (thanks to #1568). \r\n```python\r\n>>> d = np.arange(5 * 7 * 11 * 13 * 14).reshape(5, 7, 11, 13, 14)      \r\n>>> e = ak._v2.contents.NumpyArray(d)\r\n>>> f = ak._v2.operations.to_regular(e, axis=1)\r\n>>> d[:, [], :, []].shape\r\n(0, 5, 11, 14)\r\n>>> f[:, [], :, []].type.show()\r\n0 * 5 * 11 * 14 * int64\r\n```\r\n\r\nHowever, we don't handle the jagged / non-empty case properly:\r\n```python\r\n>>> d[:, [0], :, [0]].shape\r\n(1, 5, 11, 14)\r\n>>> f[:, [0], :, [0]].type.show()\r\n5 * 1 * 11 * 14 * int64\r\n```\r\n\r\nI haven't yet thought of what we need to do here. I would assume that we need to visit the index tuple and determine ahead of time whether we will be advanced indexing. It might be that we need another pathway for this.",
  "closed_at":"2022-08-26T21:29:25Z",
  "comments":1,
  "created_at":"2022-08-17T15:27:39Z",
  "id":1341944328,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5P_HII",
  "number":1601,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Advanced indexing doesn't follow NumPy behaviour",
  "updated_at":"2022-08-26T21:29:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Testing this out now that NumPy supports Python 3.11 with binary wheels.\n",
  "closed_at":"2022-08-24T19:09:45Z",
  "comments":5,
  "created_at":"2022-08-18T15:41:59Z",
  "draft":false,
  "id":1343289838,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49ZwhM",
  "number":1602,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-24T19:09:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: include Python 3.11",
  "updated_at":"2022-08-24T20:12:21Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-08-18T22:24:58Z",
  "comments":1,
  "created_at":"2022-08-18T21:53:03Z",
  "draft":false,
  "id":1343686621,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49bFzK",
  "number":1603,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-18T22:24:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Renamed ak.to_pandas -> ak.to_dataframe.",
  "updated_at":"2022-08-18T22:24:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-08-18T23:32:08Z",
  "comments":1,
  "created_at":"2022-08-18T23:01:32Z",
  "draft":false,
  "id":1343734779,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49bP-O",
  "number":1604,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-18T23:32:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ak.concatenate (mergemany) should preserve regular-type.",
  "updated_at":"2022-08-18T23:32:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@douglasdavis, this should help with concatenating arrays in dask-awkward: if the Forms of all items being passed to `ak.concatenate` are the same, then the concatenated array will also have that Form. It's a new constraint on `ak.concatenate`.\r\n\r\nYou were seeing this as unconcatenated ListOffsetArrays turning into a concatenated ListArray, but that was only one of the ways it could have had surprising results. The others are in the various forms of option-type.\r\n\r\n(I was touching the `ak.concatenate` logic for #1604, anyway.)",
  "closed_at":"2022-08-19T02:19:29Z",
  "comments":1,
  "created_at":"2022-08-19T01:47:28Z",
  "draft":false,
  "id":1343827687,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49bisN",
  "number":1605,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-19T02:19:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ak.concatenate of identical Forms preserves the Form",
  "updated_at":"2022-08-19T02:19:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nHEAD\r\n\r\n### Description and code to reproduce\r\n\r\n```python\r\n>>> taxi = ak.from_parquet(\r\n    \"https://pivarski-princeton.s3.amazonaws.com/chicago-taxi.parquet\",\r\n    columns=[\"trip.km\"],\r\n)\r\n>>> taxi.type.show()\r\n7728 * {\r\n    \r\n}\r\n\r\n```",
  "closed_at":"2022-08-26T12:09:41Z",
  "comments":4,
  "created_at":"2022-08-19T13:32:46Z",
  "id":1344452062,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5QIrXe",
  "number":1606,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.from_parquet` returns empty array when columns are specified",
  "updated_at":"2022-08-26T12:09:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR addresses issue #1375: \r\n\r\nIf we have records whose fields represent non-Cartesian data, they should not be naively added (or otherwise \"reduced\")\r\n\r\n```python\r\n>>> ak.sum(ak.Array([[{\"rho\": 1.1, \"phi\": -0.1}, {\"rho\": 2.2, \"phi\": 0.1}]]), axis=1)\r\n<Array [{rho: 3.3, phi: 0}] type='1 * {\"rho\": float64, \"phi\": float64}'>\r\n```\r\n\r\nIn V2, this will now throw a TypeError \r\n`Error details: no ak.sum overloads for custom types: rho, phi`",
  "closed_at":"2022-08-25T14:53:48Z",
  "comments":1,
  "created_at":"2022-08-19T14:51:04Z",
  "draft":false,
  "id":1344548058,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49d8jv",
  "number":1607,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-25T14:53:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: prevent reducers like ak.sum on records (v2)",
  "updated_at":"2022-08-25T14:53:48Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.9.0rc10\r\n\r\n### Description and code to reproduce\r\n\r\nI will open a PR on Monday. This is to keep track of the bug so that I would not forget.\r\n```python\r\nimport pytest  # noqa: F401\r\nimport numpy as np  # noqa: F401\r\nimport awkward as ak  # noqa: F401\r\nimport sys\r\n\r\nimport awkward._v2._lookup  # noqa: E402\r\nimport awkward._v2._connect.cling  # noqa: E402\r\n\r\nROOT = pytest.importorskip(\"ROOT\")\r\n\r\n\r\ncompiler = ROOT.gInterpreter.Declare\r\n\r\n\r\ndef test_RecordArray_NumpyArray():\r\n    array = ak._v2.contents.recordarray.RecordArray(\r\n        [\r\n            ak._v2.contents.numpyarray.NumpyArray(np.array([0, 1, 2, 3, 4], np.int64)),\r\n            ak._v2.contents.numpyarray.NumpyArray(\r\n                np.array([0.0, 1.1, 2.2, 3.3, 4.4, 5.5])\r\n            ),\r\n        ],\r\n        [\"x\", \"y\"],\r\n        parameters={\"__record__\": \"Something\"},\r\n    )\r\n    layout = array\r\n    generator = ak._v2._connect.cling.togenerator(layout.form, flatlist_as_rvec=False)\r\n    lookup = ak._v2._lookup.Lookup(layout)\r\n    generator.generate(compiler)\r\n```\r\n\r\n- [x] Missing `lookup` in RecordView:\r\n```diff\r\ndiff --git a/src/awkward/_v2/_connect/cling.py b/src/awkward/_v2/_connect/cling.py\r\nindex 5cf94092..e8e2f9ca 100644\r\n--- a/src/awkward/_v2/_connect/cling.py\r\n+++ b/src/awkward/_v2/_connect/cling.py\r\n@@ -177,6 +177,11 @@ namespace awkward {\r\n     RecordView(ssize_t at, ssize_t which, ssize_t* ptrs, PyObject* lookup)\r\n       : at_(at), which_(which), ptrs_(ptrs), lookup_(lookup) { }\r\n \r\n+    PyObject* lookup() {\r\n+        Py_INCREF(lookup_);\r\n+        return lookup_;\r\n+    }\r\n+\r\n   protected:\r\n     ssize_t at_;\r\n     ssize_t which_;\r\n```\r\n\r\n- [x] AttributeError: 'RecordArrayGenerator' object has no attribute 'fieldindex'\r\n- [x] AttributeError: 'RecordArrayGenerator' object has no attribute 'contenttypes'\r\n- [x] AttributeError: 'IndexedOptionArrayGenerator' object has no attribute 'indextype'\r\n",
  "closed_at":"2022-08-23T07:15:20Z",
  "comments":1,
  "created_at":"2022-08-19T15:01:46Z",
  "id":1344559857,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5QJFrx",
  "number":1608,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"'generator.tolayout' fails for record and indexoption",
  "updated_at":"2022-08-23T07:15:20Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-08-19T16:45:49Z",
  "comments":1,
  "created_at":"2022-08-19T15:51:41Z",
  "draft":false,
  "id":1344615108,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49eK9-",
  "number":1609,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-19T16:45:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ak.concatenate should preserve regular-type for axis>0, too.",
  "updated_at":"2022-08-19T16:45:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Fixes #516.",
  "closed_at":"2022-08-19T21:59:42Z",
  "comments":2,
  "created_at":"2022-08-19T21:23:57Z",
  "draft":false,
  "id":1344907834,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49fJtq",
  "number":1610,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-19T21:59:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Public interface for layout.recursively_apply and broadcast_and_apply.",
  "updated_at":"2022-08-19T21:59:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-08-20T16:25:39Z",
  "comments":1,
  "created_at":"2022-08-20T16:16:20Z",
  "draft":false,
  "id":1345213393,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49gGPl",
  "number":1611,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Trivial commit to trigger GitHub Actions.",
  "updated_at":"2022-09-23T00:48:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\n1.9.0rc10\n\n### Description and code to reproduce\n\nPerforming a sum over an awkward array by calling `np.sum` fails with the `awkward` v2 API. It works in v1. A similar function (at least I expected it would behave similarly), `np.mean`, works fine with v2 as well. I am using `numpy` version 1.23.2.\r\n \r\n```python\r\nimport awkward._v2 as ak\r\nimport numpy as np\r\n\r\narr = ak.Array([1, 2, 3])\r\nprint(ak.sum(arr))  # this works\r\nprint(np.sum(arr))  # TypeError\r\n\r\nprint(np.mean(arr))  # this works\r\n```\r\noutput:\r\n```pytb\r\n6\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 6, in <module>\r\n    print(np.sum(arr))  # TypeError\r\n  File \"<__array_function__ internals>\", line 180, in sum\r\n  File \"[...]/lib/python3.9/site-packages/numpy/core/fromnumeric.py\", line 2298, in sum\r\n    return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims,\r\n  File \"[...]/lib/python3.9/site-packages/numpy/core/fromnumeric.py\", line 86, in _wrapreduction\r\n    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\r\nTypeError: operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'add'>, 'reduce', <Array [1, 2, 3] type='3 * int64'>, axis=None, dtype=None): 'Array'\r\n```",
  "closed_at":"2022-09-24T14:27:40Z",
  "comments":4,
  "created_at":"2022-08-21T10:25:27Z",
  "id":1345447041,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5QMeSB",
  "number":1612,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"np.sum fails with awkward arrays in v2",
  "updated_at":"2022-09-24T14:27:40Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes issue https://github.com/scikit-hep/awkward/issues/1608\r\n\r\n- [x] use the same generator attribute names in cling as in Numba to satisfy `_layout.py` functions (Numba code is not affected)\r\n- [x] refactor `IndexOf` of a `ContentLookup` super-class\r\n- [x] `tolayout` tests added for all of the generator types ",
  "closed_at":"2022-08-22T18:18:26Z",
  "comments":2,
  "created_at":"2022-08-22T10:20:36Z",
  "draft":false,
  "id":1346166658,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49jIIU",
  "number":1613,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-22T18:18:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: generator tolayout in cling",
  "updated_at":"2022-08-22T18:18:26Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1588",
  "closed_at":"2022-08-22T13:19:53Z",
  "comments":2,
  "created_at":"2022-08-22T10:35:02Z",
  "draft":false,
  "id":1346184480,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49jMFB",
  "number":1614,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-22T13:19:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: improve `ak.from_iter` performance for long (axis=0) arrays",
  "updated_at":"2022-08-29T17:32:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR introduces a new workflow that runs on PRs:\r\nhttps://github.com/amannn/action-semantic-pull-request\r\n\r\nBy default, this uses the [commitizen (angular derivative) convention](https://github.com/commitizen/conventional-commit-types):\r\n\r\nNote that some/all of the commits in this PR use a sentence-cased variant, because that was what I was used to. The new standard is lowercase prefixes.",
  "closed_at":"2022-08-22T14:42:19Z",
  "comments":4,
  "created_at":"2022-08-22T10:40:57Z",
  "draft":false,
  "id":1346191433,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49jNnK",
  "number":1615,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-22T14:42:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: lint PR titles according to conventional commits",
  "updated_at":"2022-08-22T14:42:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This doesn't actually change the whole file, just the\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/c045715fd4fe62fdb100960506c76fd63aa9038e/.github/workflows/build-test.yml#L154\r\n\r\nline. What changes the whole file is the DOS \u2192 Unix line endings.\r\n\r\nAddresses [scheduled brown-outs](https://github.blog/changelog/2022-08-09-github-actions-the-ubuntu-18-04-actions-runner-image-is-being-deprecated-and-will-be-removed-by-12-1-22/) of Ubuntu 18.04:",
  "closed_at":"2022-08-22T14:24:02Z",
  "comments":1,
  "created_at":"2022-08-22T13:32:54Z",
  "draft":false,
  "id":1346434415,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49kC9V",
  "number":1616,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-22T14:24:02Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: Upgrade Linux 18.04 -> 20.04 and DOS line endings.",
  "updated_at":"2022-08-22T14:24:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Unifying `ak.from_json` (in-memory), `ak.from_json_file`, and `ak.from_json_schema`.\r\n\r\n- [x] verify that `ak.to_json` is up-to-date\r\n- [x] verify that `ak_from_json_new` was actually finished way back in May\r\n- [x] update tests\r\n- [x] integrate the with-schema case into this function\r\n\r\nAll of the `from_json` cases go to RapidJSON for the parsing and are incremental in the JSON parsed (doesn't load a big string into memory, though it may result in a big ak.Array). For line-delimited JSON, a `line_delimited=True` argument is now necessary. Passing a file name now requires a `pathlib.Path`, rather than a bare `str` (which could be JSON text). All file/non-file cases are wrapped as a Python file-like object for reading in RapidJSON, which releases the GIL at all times except when reading from that file-like object.\r\n\r\nTechnically, the \"refactor\" commit type might not be correct because this PR is changing the API, but it's more than just adding a \"feature\" and it's not a \"fix\".\r\n\r\nThe new implementations were mostly copied from the following files, now deleted:\r\n\r\n- [include/awkward/forth/SpecializedJSON.h](https://github.com/scikit-hep/awkward/blob/e50a2ed5fba578f3916d15da07b678f1b2a17b65/include/awkward/forth/SpecializedJSON.h)\r\n- [src/libawkward/forth/SpecializedJSON.cpp](https://github.com/scikit-hep/awkward/blob/e50a2ed5fba578f3916d15da07b678f1b2a17b65/src/libawkward/forth/SpecializedJSON.cpp)\r\n- [src/awkward/_v2/operations/ak_from_json_schema.py](https://github.com/scikit-hep/awkward/blob/bd897775de14878258a18d99f03db9ddcae9ca40/src/awkward/_v2/operations/ak_from_json_schema.py)\r\n\r\nThe last file, in turn, was developed before it as moved; the original location was:\r\n\r\n- [src/awkward/_v2/operations/convert/ak_from_json_schema.py](https://github.com/scikit-hep/awkward/blob/6ff41fb299167333d2715cae7c0904d8cd5dba7e/src/awkward/_v2/operations/convert/ak_from_json_schema.py)",
  "closed_at":"2022-08-23T03:41:25Z",
  "comments":3,
  "created_at":"2022-08-22T18:27:19Z",
  "draft":false,
  "id":1346819172,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49lWC5",
  "number":1617,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-23T03:41:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: replace 3 ak.from_json* functions with one",
  "updated_at":"2022-08-23T03:41:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/codespell-project/codespell: v2.1.0 \u2192 v2.2.1](https://github.com/codespell-project/codespell/compare/v2.1.0...v2.2.1)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-08-24T20:17:49Z",
  "comments":2,
  "created_at":"2022-08-22T20:48:30Z",
  "draft":false,
  "id":1346967066,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49l1t6",
  "number":1618,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-24T20:17:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-08-24T21:27:12Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Whilst we strip redundant empty record-structures from the metadata in `ak.from_parquet`, we later use the raw table to pull out the columns. This means that we currently generate the wrong column names for such a table, and the corresponding result of `ak.from_parquet` with specified columns is an empty record array.\r\n\r\nThis should fix #1606.\r\n\r\n@jpivarski / @martindurant your input would you appreciated here just to validate my understanding is correct - I'm not entirely sure _why_ some parquet files have these root empty records. Is it something that _we_ were doing when generating parquet files in the past, and now we're reading them back? \r\n\r\nPS - apologies for the push to main everyone; I switched branches in my IDE to check something, and didn't realise when I pushed & committed from the CLI.",
  "closed_at":"2022-08-26T12:09:40Z",
  "comments":11,
  "created_at":"2022-08-23T10:30:47Z",
  "draft":false,
  "id":1347706212,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49oSi2",
  "number":1619,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-26T12:09:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: support root empty field in Parquet file",
  "updated_at":"2022-08-26T12:09:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- [x] Extend `LayoutBuilder` API to support user-allocated `char` buffers\r\n- [x] Replace `static_cast` with `reinterpret_cast` in `GrowableBuffer` and `LayoutBuilder`s\r\n- [x] Cleanup some warnings\r\n- [x] Replace `from_rdataframe` data accumulation to `std::vectors` with `LayoutBuilder`s\r\n- [x] Add tests",
  "closed_at":"2022-08-24T09:58:16Z",
  "comments":3,
  "created_at":"2022-08-23T15:56:41Z",
  "draft":false,
  "id":1348178238,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49p3nw",
  "number":1620,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-24T09:58:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: from_rdataframe to use LayoutBuilder",
  "updated_at":"2022-08-24T09:58:17Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-08-23T19:03:08Z",
  "comments":5,
  "created_at":"2022-08-23T18:19:13Z",
  "draft":false,
  "id":1348367222,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49qf9P",
  "number":1621,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-23T19:03:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: Documented ak.from_json and completed it.",
  "updated_at":"2022-08-23T22:00:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nHEAD\r\n\r\n### Description and code to reproduce\r\n\r\nIn `NumpyArray.py` we deliberately return the original array in `numbers_to_type` [when the array is a character/byte array](https://github.com/scikit-hep/awkward/blob/9c33c2aa7d55766c99245a8ff21d416b9be4518f/src/awkward/_v2/contents/numpyarray.py#L651-L652).\r\n\r\nBecause of this, `ak._v2.values_astype` silently returns the same array with an unchanged dtype.\r\n\r\nI can see an argument for not wanting to silently break strings, but I equally think that users might want to interpret strings as codepoints. Either we:\r\n- Raise a noisy error here\r\n- Drop the `__array__` parameter for these arrays (see https://github.com/scikit-hep/awkward/pull/1623)\r\n\r\nI'm in favour of (2), because it gives users more agency.",
  "closed_at":"2022-08-24T13:32:02Z",
  "comments":4,
  "created_at":"2022-08-23T20:30:22Z",
  "id":1348510849,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5QYKSB",
  "number":1622,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak._v2.values_astype` is idempotent for character arrays",
  "updated_at":"2022-08-24T13:32:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1622 by removing the `__array__` parameter for char arrays. \r\n\r\nThis PR needs tests, and also changes the existing behaviour: string/bytestring `__array__` parameters are no longer pertinent to this logic.",
  "closed_at":"2022-08-25T12:37:07Z",
  "comments":0,
  "created_at":"2022-08-23T20:35:04Z",
  "draft":true,
  "id":1348515176,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49q_oQ",
  "number":1623,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: allow char arrays to change dtype",
  "updated_at":"2022-09-23T00:39:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1466",
  "closed_at":"2022-09-28T10:55:02Z",
  "comments":6,
  "created_at":"2022-08-23T20:42:53Z",
  "draft":true,
  "id":1348522308,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49rBLB",
  "number":1624,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{
   "heart":2,
   "total_count":2
  },
  "state":"closed",
  "state_reason":null,
  "title":"feat: add `to_raggedtensor` and `from_raggedtensor`",
  "updated_at":"2022-10-01T13:57:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Currently `from_rdataframe` function converts a selected column to a native Awkward Array. This function pulls one column at a time: this simplifies the interface and Awkward Arrays can be inexpensively joined with awkward `zip`.\r\nThis PR is extending this API as the users requested not to trigger RDF event loop multiple times.\r\n\r\n- [x] Proposed change to `ak.from_rdataframe`:\r\nfrom:\r\n```python\r\nout = ak.from_rdataframe(\r\n    rdf,\r\n    column=\"x\",\r\n)\r\n```\r\nto:\r\n```python\r\nout = ak.from_rdataframe(\r\n    rdf,\r\n    columns=(\"x\", \"y\",),\r\n)\r\n```\r\n- [x] Implement handling multiple columns in `jagged_builders`, generalise for any depth using a recursive function\r\n- [x] Add tests",
  "closed_at":"2022-08-31T17:21:53Z",
  "comments":2,
  "created_at":"2022-08-24T10:36:11Z",
  "draft":false,
  "id":1349225973,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49tTvi",
  "number":1625,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-31T17:21:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: retrieve multiple columns from RDataFrame in a single event loop",
  "updated_at":"2022-08-31T17:21:53Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Timeline:\r\n\r\n   * [x] Make a final rc release of 1.9.0rcX with support for Python 3.6.\r\n   * [x] Release 1.9.0.\r\n   * [x] Drop Python 3.6 using #1661.\r\n   * [x] Release 1.10.0 _without_ support for Python 3.6, maybe with an rc1 release just to make sure it's going to work.\r\n   * [x] Split git into `main` (v2 series) and `main-v1` (v1 backports).\r\n   * [x] Set VERSION_INFO to \"2.0.0rc1\" in `main`.\r\n   * [x] Start dismantling v1 from `main`.\r\n\r\nI'm hoping that `main-v1`/1.10.x won't need much maintenance. The existence of a git branch is just to make that less painful than it would otherwise be. Note that 1.10.x will always support Pythons 3.7 through 3.11 (only!) because that's what's set up in the `main-v1` CI. Hopefully, we won't have to make bug-fixes at a time in the future when Python 3.7 is hard to deploy.\r\n\r\n**Note:** I edited the above to reflect the modifications @henryiii suggested.",
  "closed_at":"2022-09-24T21:39:05Z",
  "comments":2,
  "created_at":"2022-08-24T19:03:34Z",
  "id":1349897392,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Qdcyw",
  "number":1626,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Drop support for Python 3.6 and split git into `main` and `main-v1`",
  "updated_at":"2022-09-24T21:39:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Missed when line 62 was updated.",
  "closed_at":"2022-08-24T21:59:07Z",
  "comments":2,
  "created_at":"2022-08-24T21:03:56Z",
  "draft":false,
  "id":1350018671,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49v-f4",
  "number":1627,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-24T21:59:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: aarch64 should also use cibuildwheel v2.9.0",
  "updated_at":"2022-08-24T21:59:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-10-26T09:16:27Z",
  "comments":12,
  "created_at":"2022-08-25T06:53:54Z",
  "draft":true,
  "id":1350412739,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49xSHS",
  "number":1628,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add user-guide for header-only layout builder",
  "updated_at":"2024-02-01T19:38:34Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-08-25T19:43:06Z",
  "comments":8,
  "created_at":"2022-08-25T09:07:11Z",
  "draft":false,
  "id":1350579573,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49x1tF",
  "number":1629,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-25T19:43:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: add Linux ROOT build to run ROOT-based tests",
  "updated_at":"2022-08-25T20:11:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-08-25T10:06:48Z",
  "comments":0,
  "created_at":"2022-08-25T10:06:36Z",
  "draft":false,
  "id":1350655307,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49yGIS",
  "number":1630,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-25T10:06:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: build docs on RTD and GHA (partially revert #1591)",
  "updated_at":"2022-08-25T10:06:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\r\n\r\nHEAD\r\n\r\n### Description and code to reproduce\r\n\r\nProbably this: arguments passed to the user-written behavior are `ak.Array`s (i.e. high-level), and it doesn't matter whether they return layouts (low-level) or `ak.Array`s.\r\n\r\nThis includes `ak.transform`.\r\n\r\nProbably does not include Numba overloads.",
  "closed_at":"2022-12-05T23:47:28Z",
  "comments":0,
  "created_at":"2022-08-25T13:43:32Z",
  "id":1350925289,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5QhXvp",
  "number":1631,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Make all user-written behavior overloads consistent in what arguments they accept and what they are expected to return",
  "updated_at":"2023-02-15T19:10:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The semantic-pr-title workflow does not currently run in a concurrency group. This means that subsequent pushes do not cancel in-progress actions. The following PR fixes this.",
  "closed_at":"2022-08-25T16:48:24Z",
  "comments":1,
  "created_at":"2022-08-25T14:51:06Z",
  "draft":false,
  "id":1351027291,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49zXIu",
  "number":1632,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-25T16:48:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: run semantic-pr-title in concurrency group",
  "updated_at":"2022-08-25T16:48:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"This diff fixes #1606 with the chicago taxi dataset, but perhaps this is not a general fix. cc @jpivarski @agoose77 @martindurant ",
  "closed_at":"2022-08-28T09:31:36Z",
  "comments":5,
  "created_at":"2022-08-25T19:34:50Z",
  "draft":true,
  "id":1351364243,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws490gar",
  "number":1634,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"[DO NOT MERGE] Diff that fixes ak.from_parquet column selection",
  "updated_at":"2022-08-28T09:31:36Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nagoose77/fix-pyarrow-empty-field (branch)\n\n### Description and code to reproduce\n\nIn #1619, @agoose77 saw the following segfault:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak._v2.Array(\r\n...         [\r\n...             {\"\": {\"x\": 1, \"y\": 1.1}},\r\n...             {\"\": {\"x\": 2, \"y\": 2.2}},\r\n...             {\"\": {\"x\": 3, \"y\": 3.3}},\r\n...             {\"\": {\"x\": 4, \"y\": 4.4}},\r\n...             {\"\": {\"x\": 5, \"y\": 5.5}},\r\n...             {\"\": {\"x\": 6, \"y\": 6.6}},\r\n...             {\"\": {\"x\": 7, \"y\": 7.7}},\r\n...             {\"\": {\"x\": 8, \"y\": 8.8}},\r\n...             {\"\": {\"x\": 9, \"y\": 9.9}},\r\n...         ]\r\n...     )\r\n>>> ak._v2.to_parquet(array, \"tmp.parquet\")   # note: to_parquet should return None, not FileMetaData\r\n<pyarrow._parquet.FileMetaData object at 0x7f8239f93b80>\r\n  created_by: parquet-cpp-arrow version 9.0.0\r\n  num_columns: 2\r\n  num_rows: 9\r\n  num_row_groups: 1\r\n  format_version: 1.0\r\n  serialized_size: 0\r\n\r\n>>> ak._v2.from_parquet(\"tmp.parquet\")   # read all columns: okay\r\n<Array [{x: 1, y: 1.1}, ..., {x: 9, ...}] type='9 * {x: int64, y: float64}'>\r\n\r\n>>> ak._v2.from_parquet(\"tmp.parquet\", columns=[\"x\"])   # read one column: bad\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nMoreover, this segfault does not occur with nested records:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak._v2.Array(\r\n...         [\r\n...             {\"x\": 1, \"y\": 1.1},\r\n...             {\"x\": 2, \"y\": 2.2},\r\n...             {\"x\": 3, \"y\": 3.3},\r\n...             {\"x\": 4, \"y\": 4.4},\r\n...             {\"x\": 5, \"y\": 5.5},\r\n...             {\"x\": 6, \"y\": 6.6},\r\n...             {\"x\": 7, \"y\": 7.7},\r\n...             {\"x\": 8, \"y\": 8.8},\r\n...             {\"x\": 9, \"y\": 9.9},\r\n...         ]\r\n...     )\r\n>>> ak._v2.to_parquet(array, \"tmp.parquet\")\r\n<pyarrow._parquet.FileMetaData object at 0x7f7e10ddfd10>\r\n  created_by: parquet-cpp-arrow version 9.0.0\r\n  num_columns: 2\r\n  num_rows: 9\r\n  num_row_groups: 1\r\n  format_version: 1.0\r\n  serialized_size: 0\r\n\r\n>>> ak._v2.from_parquet(\"tmp.parquet\")\r\n<Array [{x: 1, y: 1.1}, ..., {x: 9, ...}] type='9 * {x: int64, y: float64}'>\r\n\r\n>>> ak._v2.from_parquet(\"tmp.parquet\", columns=[\"x\"])\r\n<Array [{x: 1}, {x: 2}, {...}, ..., {x: 8}, {x: 9}] type='9 * {x: int64}'>\r\n```\r\n\r\nIt's the nested records, not the empty-string field name, that's the source of trouble:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak._v2.Array(\r\n...         [\r\n...             {\"z\": {\"x\": 1, \"y\": 1.1}},\r\n...             {\"z\": {\"x\": 2, \"y\": 2.2}},\r\n...             {\"z\": {\"x\": 3, \"y\": 3.3}},\r\n...             {\"z\": {\"x\": 4, \"y\": 4.4}},\r\n...             {\"z\": {\"x\": 5, \"y\": 5.5}},\r\n...             {\"z\": {\"x\": 6, \"y\": 6.6}},\r\n...             {\"z\": {\"x\": 7, \"y\": 7.7}},\r\n...             {\"z\": {\"x\": 8, \"y\": 8.8}},\r\n...             {\"z\": {\"x\": 9, \"y\": 9.9}},\r\n...         ]\r\n...     )\r\n>>> ak._v2.to_parquet(array, \"tmp.parquet\")\r\n<pyarrow._parquet.FileMetaData object at 0x7fe1f831e9f0>\r\n  created_by: parquet-cpp-arrow version 9.0.0\r\n  num_columns: 2\r\n  num_rows: 9\r\n  num_row_groups: 1\r\n  format_version: 1.0\r\n  serialized_size: 0\r\n\r\n>>> ak._v2.from_parquet(\"tmp.parquet\")\r\n<Array [{z: {x: 1, y: 1.1}}, {...}, ..., {...}] type='9 * {z: {x: int64, y:...'>\r\n\r\n>>> ak._v2.from_parquet(\"tmp.parquet\", columns=[\"x\"])\r\n<Array [{}, {}, {}, {}, {}, {}, {}, {}, {}] type='9 * {}'>\r\n\r\n>>> ak._v2.from_parquet(\"tmp.parquet\", columns=[\"z.x\"])\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nThe first step in `to_parquet` is `to_arrow_table` (specifically a `pyarrow.Table` to go to Parquet). However, something's already wrong at this stage:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak._v2.Array(\r\n...         [\r\n...             {\"z\": {\"x\": 1, \"y\": 1.1}},\r\n...             {\"z\": {\"x\": 2, \"y\": 2.2}},\r\n...             {\"z\": {\"x\": 3, \"y\": 3.3}},\r\n...             {\"z\": {\"x\": 4, \"y\": 4.4}},\r\n...             {\"z\": {\"x\": 5, \"y\": 5.5}},\r\n...             {\"z\": {\"x\": 6, \"y\": 6.6}},\r\n...             {\"z\": {\"x\": 7, \"y\": 7.7}},\r\n...             {\"z\": {\"x\": 8, \"y\": 8.8}},\r\n...             {\"z\": {\"x\": 9, \"y\": 9.9}},\r\n...         ]\r\n...     )\r\n\r\n>>> ak.to_arrow_table(array)\r\npyarrow.Table\r\n: large_list<item: string not null> not null\r\n  child 0, item: string not null\r\n----\r\n: [[[\"z\"],[\"z\"],...,[\"z\"],[\"z\"]]]\r\n\r\n>>> ak.to_arrow_table(array).to_pylist()\r\n[{'': ['z']},\r\n {'': ['z']},\r\n {'': ['z']},\r\n {'': ['z']},\r\n {'': ['z']},\r\n {'': ['z']},\r\n {'': ['z']},\r\n {'': ['z']},\r\n {'': ['z']}]\r\n```\r\n\r\nIf I build this construction using only pyarrow, it would be\r\n\r\n```python\r\n>>> import pyarrow as pa\r\n>>> array = pa.array(\r\n...         [\r\n...             {\"z\": {\"x\": 1, \"y\": 1.1}},\r\n...             {\"z\": {\"x\": 2, \"y\": 2.2}},\r\n...             {\"z\": {\"x\": 3, \"y\": 3.3}},\r\n...             {\"z\": {\"x\": 4, \"y\": 4.4}},\r\n...             {\"z\": {\"x\": 5, \"y\": 5.5}},\r\n...             {\"z\": {\"x\": 6, \"y\": 6.6}},\r\n...             {\"z\": {\"x\": 7, \"y\": 7.7}},\r\n...             {\"z\": {\"x\": 8, \"y\": 8.8}},\r\n...             {\"z\": {\"x\": 9, \"y\": 9.9}},\r\n...         ]\r\n...     )\r\n>>> array.to_pylist()\r\n[{'z': {'x': 1, 'y': 1.1}},\r\n {'z': {'x': 2, 'y': 2.2}},\r\n {'z': {'x': 3, 'y': 3.3}},\r\n {'z': {'x': 4, 'y': 4.4}},\r\n {'z': {'x': 5, 'y': 5.5}},\r\n {'z': {'x': 6, 'y': 6.6}},\r\n {'z': {'x': 7, 'y': 7.7}},\r\n {'z': {'x': 8, 'y': 8.8}},\r\n {'z': {'x': 9, 'y': 9.9}}]\r\n>>> pa.Table.from_arrays([array], names=[\"\"])\r\npyarrow.Table\r\n: struct<z: struct<x: int64, y: double>>\r\n  child 0, z: struct<x: int64, y: double>\r\n      child 0, x: int64\r\n      child 1, y: double\r\n----\r\n: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: struct<x: int64, y: double>\r\n    -- is_valid: all not null\r\n    -- child 0 type: int64\r\n[1,2,3,4,5,6,7,8,9]\r\n    -- child 1 type: double\r\n[1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9]]\r\n>>> pa.Table.from_arrays([array], names=[\"\"]).to_pylist()\r\n[{'': {'z': {'x': 1, 'y': 1.1}}},\r\n {'': {'z': {'x': 2, 'y': 2.2}}},\r\n {'': {'z': {'x': 3, 'y': 3.3}}},\r\n {'': {'z': {'x': 4, 'y': 4.4}}},\r\n {'': {'z': {'x': 5, 'y': 5.5}}},\r\n {'': {'z': {'x': 6, 'y': 6.6}}},\r\n {'': {'z': {'x': 7, 'y': 7.7}}},\r\n {'': {'z': {'x': 8, 'y': 8.8}}},\r\n {'': {'z': {'x': 9, 'y': 9.9}}}]\r\n```\r\n\r\nSo evidently, _we're_ building it wrong. This is the first step toward enlightenment.",
  "closed_at":"2022-10-31T20:37:03Z",
  "comments":13,
  "created_at":"2022-08-25T22:34:20Z",
  "id":1351513082,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5QjnP6",
  "number":1635,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Segfault in pyarrow observed in #1619",
  "updated_at":"2022-10-31T20:37:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-08-25T23:23:34Z",
  "comments":1,
  "created_at":"2022-08-25T22:38:58Z",
  "draft":false,
  "id":1351515750,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws491BU7",
  "number":1636,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-25T23:23:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: Use dtype=np.int64, not int, for platform independence (Windows).",
  "updated_at":"2022-08-25T23:23:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nThere are four c++ tests in `tests-cpp` that are built, but not run. They require C++17.\n```[tasklist]\n### Tasks\n- [ ] https://github.com/scikit-hep/awkward/pull/2978\n- [ ] https://github.com/scikit-hep/awkward/pull/2976\n- [ ] https://github.com/scikit-hep/awkward/pull/2977\n```\n",
  "closed_at":"2024-01-22T19:36:00Z",
  "comments":3,
  "created_at":"2022-08-26T08:51:23Z",
  "id":1351964203,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5QlVYr",
  "number":1637,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ci: run c++ tests in an integration build",
  "updated_at":"2024-01-22T19:36:00Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.9.0rc12\r\n\r\n### Description and code to reproduce\r\n\r\nMWE\r\n```py\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\narr = ak.Array([[1,2,3],[1,2]])\r\nnp.nan_to_num(arr)\r\n\r\narr = ak._v2.Array([[1,2,3],[1,2]])\r\nnp.nan_to_num(arr)\r\n```\r\n\r\nRelevant output -\r\n```pytb\r\nValueError                                Traceback (most recent call last)\r\nInput In [2], in <cell line: 4>()\r\n      2 np.nan_to_num(arr)\r\n      3 arr = ak._v2.Array([[1,2,3],[1,2]])\r\n----> 4 np.nan_to_num(arr)\r\n\r\nFile <__array_function__ internals>:180, in nan_to_num(*args, **kwargs)\r\n\r\nFile ~\\Saransh_softwares\\Python_3.9\\lib\\site-packages\\numpy\\lib\\type_check.py:498, in nan_to_num(x, copy, nan, posinf, neginf)\r\n    404 @array_function_dispatch(_nan_to_num_dispatcher)\r\n    405 def nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None):\r\n    406     \"\"\"\r\n    407     Replace NaN with zero and infinity with large finite numbers (default\r\n    408     behaviour) or with the numbers defined by the user using the `nan`,\r\n   (...)\r\n    496     array([222222.+111111.j, 111111.     +0.j, 111111.+222222.j])\r\n    497     \"\"\"\r\n--> 498     x = _nx.array(x, subok=True, copy=copy)\r\n    499     xtype = x.dtype.type\r\n    501     isscalar = (x.ndim == 0)\r\n\r\nFile ~\\Saransh_softwares\\Python_3.9\\lib\\site-packages\\awkward\\_v2\\highlevel.py:1237, in Array.__array__(self, *args, **kwargs)\r\n   1235 arguments.update(kwargs)\r\n   1236 with ak._v2._util.OperationErrorContext(\"numpy.asarray\", arguments):\r\n-> 1237     return ak._v2._connect.numpy.convert_to_array(self._layout, args, kwargs)\r\n\r\nFile ~\\Saransh_softwares\\Python_3.9\\lib\\site-packages\\awkward\\_v2\\_connect\\numpy.py:17, in convert_to_array(layout, args, kwargs)\r\n     16 def convert_to_array(layout, args, kwargs):\r\n---> 17     out = ak._v2.operations.to_numpy(layout, allow_missing=False)\r\n     18     if args == () and kwargs == {}:\r\n     19         return out\r\n\r\nFile ~\\Saransh_softwares\\Python_3.9\\lib\\site-packages\\awkward\\_v2\\operations\\ak_to_numpy.py:39, in to_numpy(array, allow_missing)\r\n      9 \"\"\"\r\n     10 Converts `array` (many types supported, including all Awkward Arrays and\r\n     11 Records) into a NumPy array, if possible.\r\n   (...)\r\n     33 See also #ak.from_numpy and #ak.to_cupy.\r\n     34 \"\"\"\r\n     35 with ak._v2._util.OperationErrorContext(\r\n     36     \"ak._v2.to_numpy\",\r\n     37     dict(array=array, allow_missing=allow_missing),\r\n     38 ):\r\n---> 39     return ak._v2._util.to_arraylib(numpy, array, allow_missing)\r\n\r\nFile ~\\Saransh_softwares\\Python_3.9\\lib\\site-packages\\awkward\\_v2\\_util.py:1180, in to_arraylib(module, array, allow_missing)\r\n   1177 layout = ak._v2.operations.to_layout(array, allow_record=True, allow_other=True)\r\n   1179 if isinstance(layout, (ak._v2.contents.Content, ak._v2.record.Record)):\r\n-> 1180     return layout.to_numpy(allow_missing=allow_missing)\r\n   1181 else:\r\n   1182     return module.asarray(array)\r\n\r\nFile ~\\Saransh_softwares\\Python_3.9\\lib\\site-packages\\awkward\\_v2\\contents\\content.py:1305, in Content.to_numpy(self, allow_missing)\r\n   1304 def to_numpy(self, allow_missing):\r\n-> 1305     return self._to_numpy(allow_missing)\r\n\r\nFile ~\\Saransh_softwares\\Python_3.9\\lib\\site-packages\\awkward\\_v2\\contents\\listoffsetarray.py:2017, in ListOffsetArray._to_numpy(self, allow_missing)\r\n   2014 if array_param in {\"bytestring\", \"string\"}:\r\n   2015     return self._nplike.array(self.to_list())\r\n-> 2017 return ak._v2.operations.to_numpy(self.toRegularArray(), allow_missing)\r\n\r\nFile ~\\Saransh_softwares\\Python_3.9\\lib\\site-packages\\awkward\\_v2\\contents\\listoffsetarray.py:168, in ListOffsetArray.toRegularArray(self)\r\n    166 size = ak._v2.index.Index64.empty(1, self._nplike)\r\n    167 assert size.nplike is self._nplike and self._offsets.nplike is self._nplike\r\n--> 168 self._handle_error(\r\n    169     self._nplike[\r\n    170         \"awkward_ListOffsetArray_toRegularArray\",\r\n    171         size.dtype.type,\r\n    172         self._offsets.dtype.type,\r\n    173     ](\r\n    174         size.data,\r\n    175         self._offsets.data,\r\n    176         self._offsets.length,\r\n    177     )\r\n    178 )\r\n    180 return ak._v2.contents.RegularArray(\r\n    181     content,\r\n    182     size[0],\r\n   (...)\r\n    186     self._nplike,\r\n    187 )\r\n\r\nFile ~\\Saransh_softwares\\Python_3.9\\lib\\site-packages\\awkward\\_v2\\contents\\content.py:220, in Content._handle_error(self, error, slicer)\r\n    217 message += filename\r\n    219 if slicer is None:\r\n--> 220     raise ak._v2._util.error(ValueError(message))\r\n    221 else:\r\n    222     raise ak._v2._util.indexerror(self, slicer, message)\r\n\r\nValueError: while calling (from C:\\Users\\Saransh\\Saransh_softwares\\Python_3.9\\lib\\site-packages\\numpy\\lib\\type_check.py, line 498)\r\n\r\n    numpy.asarray(\r\n        <Array [[1, 2, 3], [1, 2]] type='2 * var * int64'>\r\n    )\r\n\r\nError details: cannot convert to RegularArray because subarray lengths are not regular (in compiled code: https://github.com/scikit-hep/awkward-1.0/blob/1.9.0rc9/src/cpu-kernels/awkward_ListOffsetArray_toRegularArray.cpp#L22)\r\n```\r\n\r\nRelevant failing test in `vector` - https://github.com/scikit-hep/vector/blob/579685407ffdf3a9d1f209ea6bac58e306a3785a/tests/backends/test_awkward.py#L102-L122",
  "closed_at":"2022-10-27T11:15:02Z",
  "comments":3,
  "created_at":"2022-08-26T18:12:08Z",
  "id":1352588532,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Qntz0",
  "number":1638,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"V2: `np.nan_to_num` does not call the `awkward` implementation",
  "updated_at":"2022-10-27T11:15:02Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-08-29T08:57:25Z",
  "comments":2,
  "created_at":"2022-08-28T20:18:07Z",
  "draft":false,
  "id":1353458521,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws497Taa",
  "number":1640,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-29T08:57:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: correct link for Vector Design Prototype",
  "updated_at":"2022-08-29T09:43:16Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR does the following:\r\n- move `is_XXX_buffer` to `awkward.nplike`\r\n- add case for Jax arrays to `to_layout`\r\n- allow caller to specify fallback `NumpyLike` if `ak.nplike.of` does not find an array\r\n\r\nDuring the development of this PR, I noticed that we seem to allow records to be passed to `ak.concatenate`. Is this intentional? It doesn't seem right to me, but I've not looked at this code in a while.\r\n\r\nWe can't test that this is faster than `ak.concatenate(list(array))`, but that seems reasonable.\r\n\r\nI might add logic to check for array dimension correctness in `ak.concatenate` rather than delegating this to `ak.flatten`. Additionally, in its present form, I chose to treat this as a fast-path rather than an exclusive case, so I'm using an early return rather than `if: else:`.\r\n\r\nFixes #1049",
  "closed_at":"2022-08-31T23:41:14Z",
  "comments":2,
  "created_at":"2022-08-29T16:01:11Z",
  "draft":false,
  "id":1354533430,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49-6uC",
  "number":1641,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-31T23:41:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"perf: `ak.concatenate` should flatten for first axis, single-array",
  "updated_at":"2022-08-31T23:41:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This was accidentally the behavior before #1614, and some libraries assumed it. Now the policy is as described in test_1642-from_iter-of-tuples (both v1 and v2).",
  "closed_at":"2022-08-29T18:23:18Z",
  "comments":2,
  "created_at":"2022-08-29T17:28:39Z",
  "draft":false,
  "id":1354635706,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49_Q3m",
  "number":1642,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-29T18:23:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: ak.from_iter should interpret top-level tuples as ak.Array (v1 and v2).",
  "updated_at":"2022-08-29T19:34:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-08-29T19:50:57Z",
  "comments":0,
  "created_at":"2022-08-29T19:50:31Z",
  "draft":false,
  "id":1354796996,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws49_y6v",
  "number":1643,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: change `ak.from_iter` docstring to reflect tuple changes",
  "updated_at":"2022-08-29T19:51:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\nmain@8c9bf49\r\n\r\n### Description and code to reproduce\r\n\r\nSorry, it's me again with another edge case...\r\n\r\n```python\r\nimport awkward._v2 as ak\r\nimport numpy as np\r\n\r\na0 = ak.to_regular(ak.Array(np.empty((5, 0))), 1)\r\na1 = ak.to_regular(ak.Array(np.empty((8, 0))), 1)\r\n\r\na0.type\r\n# ArrayType(RegularType(NumpyType('float64'), 0), 5)\r\n\r\na1.type\r\n# ArrayType(RegularType(NumpyType('float64'), 0), 8)\r\n\r\nak.concatenate([a0, a1]).type\r\n# ArrayType(RegularType(NumpyType('float64'), 0), 8)\r\n```\r\n\r\nI'd expect this to return an array of shape `(13, 0`) instead of `(8, 0)`. \r\n",
  "closed_at":"2022-08-31T23:19:36Z",
  "comments":0,
  "created_at":"2022-08-30T07:26:01Z",
  "id":1355294717,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5QyCf9",
  "number":1644,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Inconsistency in ak.concatenate when dim length is zero",
  "updated_at":"2022-08-31T23:19:36Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1644 ",
  "closed_at":"2022-08-31T23:19:35Z",
  "comments":2,
  "created_at":"2022-08-30T07:35:15Z",
  "draft":false,
  "id":1355306841,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-Bftt",
  "number":1645,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-31T23:19:35Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: include `self._length` in `RegularArray.mergemany`",
  "updated_at":"2022-08-31T23:19:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nAn unnecessary `UnionType` is created when the arrays have different layouts (but the same type). Especially with `merge=True`, I'd expect `ak.concatenate` to resolve these arrays to a single `RegularType`. \r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> import numpy as np \r\n>>> a0 = ak.from_numpy(np.empty((5, 0)), regulararray=True)\r\n>>> a1 = ak.from_numpy(np.empty((8, 0)), regulararray=False)\r\n>>> ak.concatenate([a0, a1]).type\r\nArrayType(UnionType([RegularType(NumpyType('float64'), 0), RegularType(NumpyType('float64'), 0)]), 13)\r\n```\r\n\r\nSubmitted on behalf of @grst\r\n",
  "closed_at":"2022-09-07T00:24:32Z",
  "comments":1,
  "created_at":"2022-08-30T07:51:00Z",
  "id":1355324884,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5QyJ3U",
  "number":1646,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Concatenating `RegularArray` and 2D `NumpyArray` yields a union.",
  "updated_at":"2022-09-07T00:24:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Okay, so I hadn't noticed that Awkward v2's fields are passed by reference, which exposes them to the danger that someone might modify them downstream:\r\n\r\nv1:\r\n\r\n```python\r\n>>> array = awkward.Array([{\"x\": 1, \"y\": 1.1}])\r\n>>> fields = awkward.fields(array)\r\n>>> array\r\n<Array [{x: 1, y: 1.1}] type='1 * {\"x\": int64, \"y\": float64}'>\r\n>>> fields\r\n['x', 'y']\r\n>>> fields[0] = \"XXX\"\r\n>>> fields\r\n['XXX', 'y']\r\n>>> array\r\n<Array [{x: 1, y: 1.1}] type='1 * {\"x\": int64, \"y\": float64}'>\r\n```\r\n\r\nv2:\r\n\r\n```python\r\n>>> array = awkward._v2.Array([{\"x\": 1, \"y\": 1.1}])\r\n>>> fields = awkward._v2.fields(array)\r\n>>> array\r\n<Array [{x: 1, y: 1.1}] type='1 * {x: int64, y: float64}'>\r\n>>> fields\r\n['x', 'y']\r\n>>> fields[0] = \"XXX\"\r\n>>> fields\r\n['XXX', 'y']\r\n>>> array\r\n<Array [{XXX: 1, y: 1.1}] type='1 * {XXX: int64, y: float64}'>\r\n```\r\n\r\nIt could be fixed [here, in Awkward](https://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/contents/recordarray.py#L162), or maybe [here](https://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/operations/ak_fields.py#L30) (to only suffer the list-copy when handing it off to a user, so that internal uses can still be by reference).\r\n\r\nI'll use this comment to open an issue in Awkward. Once `awkward.fields` is guarded, your `.copy()` can be removed, but it can also not be removed with no consequences but a little performance.\r\n\r\n_Originally posted by @jpivarski in https://github.com/scikit-hep/vector/pull/226#discussion_r958660705_",
  "closed_at":"2022-08-31T18:14:06Z",
  "comments":6,
  "created_at":"2022-08-30T15:54:26Z",
  "id":1355982616,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Q0qcY",
  "number":1648,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.fields (v2) passes a RecordArray's internal fields by reference",
  "updated_at":"2022-08-31T18:14:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"While looking at `to_list`, I had some questions for myself about the `to_json` code right beside it, which seemed to not raise errors on bad JSON. The mistake was in my test: v1 has been silently generating bad JSON, not v2! But anyway, here are explicit tests for `to_json` error-checking so that this doesn't come up again (for v2 users).",
  "closed_at":"2022-08-30T18:31:05Z",
  "comments":1,
  "created_at":"2022-08-30T17:38:04Z",
  "draft":false,
  "id":1356096763,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-EKms",
  "number":1649,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-30T18:31:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: Ensure that ak._v2.to_json raises errors when appropriate.",
  "updated_at":"2022-08-30T18:31:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1648 \r\n\r\nThe tests pass locally by running -\r\n```\r\n\u2514\u2500$ python3 -m pytest -vv -rs tests/v2/\r\n```",
  "closed_at":"2022-08-31T18:14:06Z",
  "comments":5,
  "created_at":"2022-08-30T18:32:26Z",
  "draft":false,
  "id":1356151434,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-EWaG",
  "number":1650,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-31T18:14:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: pass a copy of `RecordArray`'s internal fields in HL API",
  "updated_at":"2022-08-31T18:18:56Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This feature had only one test in v1 and was untested in v2. It was also implemented incorrectly (`layout.parameter(\"__record__\")` where `layout` is a list wouldn't see the record's parameter; you'd need a variant of `purelist_parameter` that only goes one level deep).\r\n\r\nBut it seems like this is unwanted: I've never heard of anybody using this feature, not Vector and not Coffea, which are the two heaviest users of behavioral overrides. (Early on, I was thinking of regular expressions: `.` for a single character and `*` for a sequence. However, we now have a lot more experience with how these things are used in the wild.)\r\n\r\nI'm making this its own pull request so that it will be highly visible, and we can consider reverting it, though we'd have to do more than that: we'd have to make it not-broken.\r\n\r\nOne thing that should go with this: references to\r\n\r\n```python\r\nak.behavior[\".\", \"Name\"] = Class\r\n```\r\n\r\nneed to be removed from any forward-looking (v2) documentation.",
  "closed_at":"2022-08-30T22:07:30Z",
  "comments":5,
  "created_at":"2022-08-30T18:57:30Z",
  "draft":false,
  "id":1356176325,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-Eb1d",
  "number":1651,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-30T22:07:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: Drop `ak.behavior['.', 'Name'] = cls`, which isn't working/isn't tested.",
  "updated_at":"2022-08-30T22:07:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The `to_list` implementation has to behave like a recursive iteration through an ak.Array/ak.Record, replacing all lists with Python `list`, all records with Python `dict`, and all missing values with `None`. Iteration means calling `__getitem__` for each index, so if `__getitem__` is overloaded (though `ak.behavior`), we should see the consequence of that in the `to_list` output.\r\n\r\nThe v1 `to_list` was implemented this way, but with the un-overloaded `__getitem__`, that results in a lot of indirection and type-checking that can be avoided, because we know the type of our array. A vectorized implementation, optimized for un-overloaded `__getitem__`, was first implemented in ee0c2cb6b38669597fd6f90d9d351219ed186f05, which acted in vectorized strides over each node in the layout tree. Then #1418 fixed the case of small slices of a large array (don't vectorize over the whole thing, just the part you see).\r\n\r\nThe explicit check for `cls.__getitem__ is ak._v2.highlevel.Array.__getitem__` is correct: that part of the code wants to know if we are in the optimized, un-overloaded case, or something else. If something else, we do what would be the straightforward implementation of `to_list`: calling `__getitem__` on every item. This allows the overloaded `__getitem__` to do whatever it wants, returning any type that it wants, and `to_list` behaves as it should.\r\n\r\nWhat was missing in #1600 was (a) an equivalent implementation for `Record`, and (b) continuing to recurse `to_list` over the output of `__getitem__`. This PR fixes those two things, with special care in `ak._v2.record.Record` to prevent infinite recursion.",
  "closed_at":"2022-09-01T15:48:48Z",
  "comments":5,
  "created_at":"2022-08-30T19:58:23Z",
  "draft":false,
  "id":1356235996,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-Eorz",
  "number":1652,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-01T15:48:48Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"fix: to_list must follow __getitem__ implementations, even in Records",
  "updated_at":"2022-09-01T15:48:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Add @Saransh-cpp as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward/pull/1650#issuecomment-1232240621)",
  "closed_at":"2022-08-31T16:30:48Z",
  "comments":0,
  "created_at":"2022-08-30T22:36:43Z",
  "draft":false,
  "id":1356401985,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-FNiB",
  "number":1653,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-08-31T16:30:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add Saransh-cpp as a contributor for code",
  "updated_at":"2022-08-31T16:30:49Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Which documentation?\n\nOther (please explain)?\n\n### What needs to be documented?\n\nThis could be comments or actual type-annotations, but since the types of the arguments of Content methods with \"getitem\" in their names are fixed (having been ported over from C++), they should be expressed in the codebase. @agoose77 spent a lot of time wandering in that dungeon, and it needs a map.\r\n\r\nThe conversation in #1597 is primarily about pre-processing the slice types that are going to be passed around the getitem system. They are normalized to a specific set of types, listed in https://github.com/scikit-hep/awkward/pull/1597#issuecomment-1227754769 and duplicated here:\r\n\r\n   * `int` (really a Python `int`, not a NumPy scalar or anything) for integer-slicing\r\n   * `slice` for range-slicing\r\n   * `str` for single field-slicing\r\n   * `list` for multiple field-slicing; if we ever see a bare Python `list` after normalization, we _assume_ it's a list of strings\r\n   * `np.newaxis`/`None` for newaxis-slicing\r\n   * `Ellipsis` for ellipsis-slicing\r\n   * `Index64` (not any other integer-width) for rectilinear array-slicing: so not an actual NumPy array (or CuPy, etc.); note that a single integer gets broadcasted to this when used in the same slice as a rectilinear array\r\n   * `ListOffsetArray` (and not `ListArray`) for ragged array-slicing\r\n   * `IndexedOptionArray` (and not any other option-type) for missing value-slicing\r\n\r\nthough this happens in a round-about way. The `prepare_advanced_indexing` function is the last step that puts them into this final form.\r\n\r\nThen all the Content methods listed in https://github.com/scikit-hep/awkward/pull/1408#issuecomment-1232286520 (not duplicated here; it's very long) have known argument types; they just haven't been listed. Having them written in some form would greatly help the next developer.\r\n\r\nAlso in that long list, there are a few items labeled \"!?!\" that seem to be wrong: they're not in agreement with the normalized types in the bullet-points above. Presumably, this means that there aren't any tests for them, so the first step would be to design some tests that would cover them.",
  "closed_at":"2023-07-02T17:58:53Z",
  "comments":1,
  "created_at":"2022-08-31T22:50:49Z",
  "id":1357992900,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Q8VPE",
  "number":1655,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"The getitem system needs to be annotated with expected types",
  "updated_at":"2023-07-02T17:58:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-09-01T15:48:38Z",
  "comments":2,
  "created_at":"2022-09-01T07:01:46Z",
  "draft":true,
  "id":1358352630,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-L23x",
  "number":1656,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: start on rdataframe user guide",
  "updated_at":"2022-09-23T00:38:51Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR is the first step in a series of PRs to add type information to Awkward.\r\n\r\nI'm not yet clear on the best strategy for this, but here are some initial thoughts:\r\n- Deferred annotations mean we can have minimal import-time overheads\r\n   - No need to define `typing_extensions` as package dependency (not sure about how this works with distributing though)\r\n   - Can specify mypy Python version to use latest typing syntax (not sure about ergonomics of this)\r\n- Python 3.6 doesn't support deferred annotations (`from future import __annotations__`)\r\n  - Wait until we drop 3.6\r\n  - Use type stubs\r\n  - Use eager annotations\r\n",
  "closed_at":"2022-09-26T20:21:26Z",
  "comments":2,
  "created_at":"2022-09-01T11:08:06Z",
  "draft":true,
  "id":1358666367,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-M5-R",
  "number":1657,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: start typing `Content` classes",
  "updated_at":"2022-09-26T20:21:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"[Way back in 2020](https://numba.discourse.group/t/making-awkward-arrays-work-in-the-cuda-target/63/3), @gmarkall said that it should be possible to add custom types to Numbafied functions in the CUDA context, and then [at an Nvidia meeting in 2022](https://www.google.com/url?q=https://reg.rainfocus.com/flow/nvidia/gtcspring2022/aplive/page/ap/session/16339878397050012ADx&sa=D&source=calendar&usd=2&usg=AOvVaw2Ug6x1pTlyvhWuiozDnaNJ), demonstrated that it is possible.\r\n\r\nDoes this work for us out of the box? What would it take to get it to work? It is definitely a goal to have Awkward Arrays work in Numba's CUDA target (and a little embarrassing that it's been on the back burner this long).",
  "closed_at":"2023-02-20T17:32:48Z",
  "comments":5,
  "created_at":"2022-09-01T13:05:21Z",
  "id":1358817863,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Q_epH",
  "number":1658,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"What is the state of Awkward Arrays in Numba's CUDA target?",
  "updated_at":"2023-02-20T17:32:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nTo be fully performant, LayoutBuilder in Numba needs to be a reimplementation, using Numba's lowering language. Starting with GrowableBuffer, which has been requested on its own [ref]. (In fact, the GrowableBuffer would be a good way to learn how to lower things in Numba.)\r\n\r\nNow that the LayoutBuilder API has stabilized, it would be a good time to reimplement exactly that API in Numba.",
  "closed_at":"2023-06-29T20:53:06Z",
  "comments":0,
  "created_at":"2022-09-01T13:33:22Z",
  "id":1358860330,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Q_pAq",
  "number":1659,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Implement LayoutBuilder in Numba",
  "updated_at":"2023-06-29T20:53:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- Replace text references to 3.6 with 3.7 where appropriate\r\n- Remove CI 3.6 special-cases\r\n- Replace manylinux1 with manylinux2014",
  "closed_at":"2022-09-03T18:22:24Z",
  "comments":8,
  "created_at":"2022-09-01T16:15:10Z",
  "draft":false,
  "id":1359097498,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-OYBR",
  "number":1661,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-03T18:22:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: drop 3.6 support",
  "updated_at":"2022-09-03T18:22:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\nmain@c751d4eb\n\n### Description and code to reproduce\n\nWhen I assign an array to a nested record (`a[\"a\"][\"a2\"] = np.array(...)`) nothing happens. \r\nI'd expect this to either actually change the value or raise an Error. \r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> a = ak.Array(\r\n        [\r\n            {\r\n                \"a\": {\r\n                    \"a2\": [1, 2, 3],\r\n                },\r\n                \"b\": [2, 3, 4],\r\n            }\r\n        ]\r\n    )\r\n>>> ak.to_json(a)\r\n'[{\"a\":{\"a2\":[1,2,3]},\"b\":[2,3,4]}]'\r\n\r\n# Let's assign a different array to `a2`\r\n>>> a[\"a\"][\"a2\"] = np.array([42, 42, 42])]\r\n# What does the array look like now? Oh, it's still the same...\r\n>>> ak.to_json(a)\r\n'[{\"a\":{\"a2\":[1,2,3]},\"b\":[2,3,4]}]'\r\n```\r\n\r\nCC @ivirshup",
  "closed_at":"2022-09-02T11:18:33Z",
  "comments":4,
  "created_at":"2022-09-02T10:36:58Z",
  "id":1360012905,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RECZp",
  "number":1662,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Assigning array to nested record doesn't change value",
  "updated_at":"2022-09-02T16:13:43Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR adds to the documentation for `ak.with_name` to clarify that, if `name` is set to `None`, then the existing name of the record is removed.",
  "closed_at":"2022-09-29T12:19:07Z",
  "comments":3,
  "created_at":"2022-09-05T07:59:00Z",
  "draft":false,
  "id":1361551718,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-WT2K",
  "number":1665,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-29T12:19:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: update docstring of `ak.with_name` to reflect `None` interpretation",
  "updated_at":"2022-09-29T12:19:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This adds isort, which sorts the includes, removing that as a variable and enabling things like injecting `__future__` imports later.\n\nIf there are any \"this needs to be imported before that\" rules, we can add those as isort rules.\n",
  "closed_at":"2022-09-24T21:07:38Z",
  "comments":8,
  "created_at":"2022-09-05T13:27:14Z",
  "draft":false,
  "id":1361971245,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-Xt1M",
  "number":1666,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-24T21:07:38Z"
  },
  "reactions":{
   "+1":1,
   "hooray":1,
   "total_count":2
  },
  "state":"closed",
  "state_reason":null,
  "title":"chore: add isort",
  "updated_at":"2022-09-24T21:07:39Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Found via `codespell -L fo,ue,nwo,subjet,unio **/*.{md,py,rst,ipynb}`",
  "closed_at":"2022-09-05T15:59:24Z",
  "comments":5,
  "created_at":"2022-09-05T15:04:25Z",
  "draft":false,
  "id":1362143525,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-YUW3",
  "number":1667,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: fix typos",
  "updated_at":"2022-09-06T14:14:31Z",
  "user":"MDQ6VXNlcjEzNDUxOA=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Description of new feature\n\n## The request\r\n\r\nI would like to do recursive iteration over multiple arrays without having to have aligned regular dimensions (especially the first).\r\n\r\n## An example\r\n\r\nI would like to take multiple arrays, and subset their records to a common set of keys. Here's a quick example of how I would expect to do this:\r\n\r\n```python\r\nfrom operator import and_\r\nfrom functools import reduce\r\n\r\nimport awkward._v2 as ak\r\n\r\ndef intersect(layouts: list[ak.contents.Content], **kwargs):\r\n    if all(l.is_RecordType for l in layouts):\r\n        common_keys = list(reduce(and_, (set(l.fields) for l in layouts)))\r\n        return [l[common_keys] for l in layouts]\r\n```\r\n\r\nThis works since the arrays are of similar length:\r\n\r\n```python\r\nawk_a = ak.Array([\r\n    {\"a\": [1, 2, 3], \"b\": [1, 2]},\r\n    {\"a\": [4, 5], \"b\": [3, 4]},\r\n    {\"a\": [6], \"b\": [5]},\r\n])\r\n\r\nawk_b = ak.Array([\r\n    {\"a\": [1, 2, 3]}, \r\n    {\"a\": [4, 5]},\r\n    {\"a\": [6]},\r\n])\r\n\r\n# works with these arrays\r\nak.transform(intersect, awk_a, awk_b)\r\n# (<Array [{a: [1, 2, 3]}, {...}, {a: [6]}] type='3 * {a: var * int64}'>,\r\n#  <Array [{a: [1, 2, 3]}, {...}, {a: [6]}] type='3 * {a: var * int64}'>)\r\n```\r\n\r\nThis does not work if the first dimension for the arrays is not the same size.\r\n\r\n```python\r\nawk_c = ak.Array([\r\n    {\"a\": [1, 2, 3], \"b\": [1, 2]},\r\n    {\"a\": [4, 5], \"b\": [3, 4]},\r\n    {\"a\": [6], \"b\": [5]},\r\n])\r\n\r\nawk_d = ak.Array([\r\n    {\"a\": [4, 5]},\r\n    {\"a\": [6]},\r\n])\r\n\r\nak.transform(intersect, awk_c, awk_d)\r\n```\r\n\r\n```pytb\r\nValueError: while calling (from /var/folders/bd/43q20k0n6z15tdfzxvd22r7c0000gn/T/ipykernel_76685/4019137656.py, line 13)\r\n...\r\nError details: cannot broadcast RegularArray of size 2 with RegularArray of size 3 in ak._v2.transform\r\n```",
  "closed_at":"2023-05-05T15:48:05Z",
  "comments":11,
  "created_at":"2022-09-05T16:56:40Z",
  "id":1362292126,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RMu2e",
  "number":1668,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"transform, but not caring about broadcasting regular dimensions",
  "updated_at":"2023-05-05T15:48:05Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Just trying this out now, and running into an issue. I can get the expected result from:\r\n\r\n```python\r\nawk_a = ak.Array([\r\n    {\"a\": [1, 2, 3], \"b\": [1, 2]},\r\n    {\"a\": [4, 5], \"b\": [3, 4]},\r\n    {\"a\": [6], \"b\": [5]},\r\n])\r\n\r\n\r\nawk_b = ak.Array([\r\n    {\"a\": [1, 2, 3]},\r\n    {\"a\": [4, 5]},\r\n    {\"a\": [6]},\r\n])\r\n\r\nak.concatenate([awk_a, ak.with_field(awk_b, None, \"b\")]).type.show()\r\n```\r\n\r\n```\r\n6 * {\r\n    a: var * int64,\r\n    b: option[var * int64]\r\n}\r\n```\r\n\r\nHowever, I get a `union` from:\r\n\r\n```python\r\nawk_c = ak.Array([\r\n    [{\"a\": 1, \"b\": \"foo\"}],\r\n    [{\"a\": 2, \"b\": \"bar\"}, {\"a\": 3, \"b\": \"baz\"}]\r\n])\r\n\r\nawk_d = ak.Array([\r\n    [{\"a\": 4}, {\"a\": 5}],\r\n    [{\"a\": 6}],\r\n    [{\"a\": 7}],\r\n])\r\n\r\nak.concatenate([awk_c, ak.with_field(awk_d, None, \"b\")]).type.show()\r\n```\r\n\r\n```\r\n5 * union[\r\n    var * {\r\n        a: int64,\r\n        b: string\r\n    },\r\n    var * {\r\n        a: int64,\r\n        b: ?unknown\r\n    }\r\n]\r\n```\r\n\r\nIs this expected?\r\n\r\n_Originally posted by @ivirshup in https://github.com/scikit-hep/awkward/discussions/1647#discussioncomment-3561037_\r\n\r\nI think you found a bug: we want \"string\" and \"option[unknown]\" to unify to \"option[string]\", and it's not recognizing that. It should first notice that one of the two is \"option\" and make the result type \"option\", then unify \"string\" (or \"X\") with \"unknown\" to get \"string\" (\"X\"), since \"unknown\" is an identity in type-unification. I _think_ this is supposed to happen somewhere in [simplify_uniontype](https://github.com/scikit-hep/awkward/blob/1bcfd70629aec4c1ef26bbf929d9183c28dbe491/src/awkward/_v2/contents/unionarray.py#L471-L661). It's interesting that it got it right when \"X\" is a primitive type, int64, but not when it's a list type. This is something we should promote into an issue.",
  "closed_at":"2022-09-07T00:24:32Z",
  "comments":3,
  "created_at":"2022-09-05T17:31:42Z",
  "id":1362323333,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RM2eF",
  "number":1669,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Type-unification of \"string\" and \"option[unknown]\" should return \"option[string]\", not a union.",
  "updated_at":"2022-09-07T00:24:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nMentioned in https://github.com/scverse/anndata/pull/647#discussion_r963085500.\r\n\r\nWe need `ak._v2.to_categorical` and `ak._v2.from_categorical` to point to the two functions in `awkward.behaviors.categorical`. The `behaviors` and `operations` submodules are parallel. Follow the example of `src/awkward/_v2/operations.__init__.py`.",
  "closed_at":"2022-09-06T10:03:42Z",
  "comments":0,
  "created_at":"2022-09-05T19:00:44Z",
  "id":1362389299,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RNGkz",
  "number":1670,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Expose `to_categorical` and `from_categorical` functions at top-level",
  "updated_at":"2022-09-06T10:03:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1669, fixes #1646\r\n\r\n## Changes\r\n- Refactor `Content.mergeable` into `Content.mergeable` and `Content._mergeable`\r\n- Add `Form.is_identity_like` to determine whether a layout should behave like an identity. \r\n   - If the content is an `EmptyArray`, return `True`.\r\n   - If the content is an `IndexedOptionArray`, return `self._content.is_identity_like`.\r\n- Add cases to convert >1D `NumpyArray`s to `RegularArray` during merging",
  "closed_at":"2022-09-07T00:24:31Z",
  "comments":14,
  "created_at":"2022-09-05T19:48:44Z",
  "draft":false,
  "id":1362420837,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-ZRtg",
  "number":1671,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-07T00:24:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: allow string arrays to merge without unions",
  "updated_at":"2022-09-07T00:24:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.9.0\n\n### Description and code to reproduce\n\nCalling `ak.transform` on a single array containing strings will maintain the string type, but if multiple arrays are passed the strings are converted to lists of characters.\r\n\r\n```python\r\nIn [1]: import awkward._v2 as ak\r\n\r\nIn [2]: a = ak.Array([\"foo\", \"foo\", \"bar\"])\r\n   ...: a\r\nOut[2]: <Array ['foo', 'foo', 'bar'] type='3 * string'>\r\n\r\nIn [3]: ak.transform(lambda *args, **kwargs: None, a)\r\nOut[3]: <Array ['foo', 'foo', 'bar'] type='3 * string'>\r\n\r\nIn [4]: ak.transform(lambda *args, **kwargs: None, a, a)\r\nOut[4]: \r\n(<Array ['foo', 'foo', 'bar'] type='3 * var * char'>,\r\n <Array ['foo', 'foo', 'bar'] type='3 * var * char'>)\r\n```",
  "closed_at":"2022-09-07T18:00:34Z",
  "comments":8,
  "created_at":"2022-09-05T20:11:47Z",
  "id":1362435359,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RNR0f",
  "number":1672,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.transform converts string to list of bytes if multiple arrays are passed",
  "updated_at":"2022-09-07T18:00:34Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/psf/black: 22.6.0 \u2192 22.8.0](https://github.com/psf/black/compare/22.6.0...22.8.0)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-09-08T16:59:22Z",
  "comments":2,
  "created_at":"2022-09-05T21:33:42Z",
  "draft":false,
  "id":1362484271,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-ZfXe",
  "number":1673,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-08T16:59:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-09-08T16:59:22Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1670\r\n\r\nI opted to just move these functions. Is this too much of a breaking change in your view @jpivarski? I'm not firm on what API guarantees we've made w.r.t imports.",
  "closed_at":"2022-09-06T10:03:41Z",
  "comments":2,
  "created_at":"2022-09-05T22:13:51Z",
  "draft":false,
  "id":1362507676,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-Zkfh",
  "number":1674,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-06T10:03:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: move categorical functions to operations",
  "updated_at":"2022-09-06T10:03:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-09-06T10:03:01Z",
  "comments":1,
  "created_at":"2022-09-06T10:02:24Z",
  "draft":false,
  "id":1363033009,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-bTTi",
  "number":1675,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-06T10:03:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: remove `dev/build-awkward.sh`",
  "updated_at":"2022-09-06T10:03:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR introduces snake_case methods for `toRegularArray` et al. This means in future we can introduce a PR to deprecate these.",
  "closed_at":"2022-09-28T10:55:28Z",
  "comments":9,
  "created_at":"2022-09-06T10:28:03Z",
  "draft":true,
  "id":1363064964,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-baGe",
  "number":1676,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: prepare to deprecate camelCase `toRegularArray` et al.",
  "updated_at":"2022-10-01T13:57:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Address Issue #1438: ArrayBuilder in Numba is missing some methods, such as 'string' \r\n\r\n1. ArrayBuilder in Numba following methods have been added:\r\n\r\n- string\r\n- complex\r\n- datetime\r\n- timedelta\r\n\r\n2. Test all ArrayBuilder in Numba methods\r\n\r\n- [x] Restore CI configuration to default\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/ianna-numba-array-builder/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-22T10:59:45Z",
  "comments":6,
  "created_at":"2022-09-06T11:34:45Z",
  "draft":false,
  "id":1363144828,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-brPD",
  "number":1677,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-22T10:59:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: Array Builder in Numba - add missing methods",
  "updated_at":"2022-10-22T10:59:45Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\n#1671 fixes merging of `NumpyArray` and `RegularArray`, but does so by promoting `NumpyArray`s to `RegularArray` twice; once in `_mergeable,` and another time in `mergemany`. This is something we should avoid. \r\n\r\nPerhaps the merge implementation can replace `mergeable(self, other: Content) -> bool` with `as_mergeable(self, other: Content) -> tuple[Content, Content] | None` that allows the layout to return the type that it would be converted to if it were to be merged.\r\n",
  "closed_at":"2024-01-20T20:59:13Z",
  "comments":2,
  "created_at":"2022-09-07T07:33:32Z",
  "id":1364224664,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RUGqY",
  "number":1678,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`RegularArray._mergeable` / `RegularArray.mergemany` (and `NumpyArray`) promote `NumpyArray`s twice",
  "updated_at":"2024-01-20T22:46:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1672 \r\n\r\n@jpivarski and I discussed the ramifications of this on Zoom. We have always been setting the parameters to None in \r\n\r\nThis PR introduces a new `broadcast_parameters_rule` enumeration that selects from the following rules:\r\n- `\"intersect\"`\r\n   Take the intersection of the broadcasted input parameters.\r\n- `\"all_or_nothing\"`\r\n   Take the first content's parameters if they are equal to all of the other content's parameters, otherwise `None`.\r\n- `\"one_to_one\"`\r\n   Assert that the broadcast output matches the broadcast inputs, and if so, take the corresponding parameters (by position).\r\n- `\"none\"`\r\n   Always set parameters to `None` (previous behaviour)\r\n   \r\n  ",
  "closed_at":"2022-09-07T18:00:34Z",
  "comments":2,
  "created_at":"2022-09-07T11:19:31Z",
  "draft":false,
  "id":1364510807,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-gMwX",
  "number":1679,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-07T18:00:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: carry parameters through broadcasting",
  "updated_at":"2022-09-07T18:00:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.10.0.rc1\n\n### Description and code to reproduce\n\nCategorical values are not shown to be categorial in the datashape type string.\r\n\r\n```python\r\nimport awkward._v2 as ak\r\n\r\na = ak.Array([\"foo\", \"foo\", \"bar\"])\r\na_cat = ak.behaviors.categorical.to_categorical(a)\r\n\r\nassert a.typestr == a_cat.typestr\r\na_cat.typestr  # '3 * string'\r\n```\r\n\r\nAccording to a comment form @jpivarski (https://github.com/scverse/anndata/pull/647#discussion_r963133794), the data shape representation should show these values are categorical:\r\n\r\n> Categorical strings have a different type than non-categorical strings. We're just following Datashape, in which [categorical](https://datashape.readthedocs.io/en/latest/types.html#categorical) is represented by a different type string, so we're calling it distinct.",
  "closed_at":"2022-09-07T14:48:52Z",
  "comments":1,
  "created_at":"2022-09-07T13:55:57Z",
  "id":1364706876,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RV8Y8",
  "number":1680,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Categoricals are not correctly represented in datashape string",
  "updated_at":"2022-09-07T14:48:52Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nRight now, these create confusion (as evidenced in https://github.com/scikit-hep/awkward/discussions/1654#discussioncomment-3527347), and we could choose a better name. `is_list_like` might be a better variant of `is_ListType`.",
  "closed_at":"2022-11-12T15:48:42Z",
  "comments":2,
  "created_at":"2022-09-07T16:01:51Z",
  "id":1364886527,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RWoP_",
  "number":1681,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Rename the `is_XXXType` flags in `Content` et al.",
  "updated_at":"2023-02-15T19:10:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nThe internals of Awkward have some hard-coded logic for handling strings (and categoricals). We ought to extend our behaviour system so that it is not necessary to special-case these types.\r\n\r\nExamples:\r\nhttps://github.com/scikit-hep/awkward/blob/1ebf1dbe732b6b634fab95c8406498a59b71695f/src/awkward/_v2/contents/listoffsetarray.py#L830-L840\r\nhttps://github.com/scikit-hep/awkward/blob/1ebf1dbe732b6b634fab95c8406498a59b71695f/src/awkward/_v2/contents/listoffsetarray.py#L1203-L1247\r\n\r\netc.",
  "closed_at":"2023-06-30T12:26:23Z",
  "comments":4,
  "created_at":"2022-09-07T16:04:11Z",
  "id":1364889406,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RWo8-",
  "number":1682,
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Remove special-casing for strings",
  "updated_at":"2023-06-30T12:26:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nAs Jim and I discussed today, string broadcasting is currently not producing reliable results for string-string, or even string-non string cases. In particular many broadcasts violate the appearance that strings are atoms:\r\n\r\n```python3\r\n>>> import awkward as ak\r\n>>> x = ak._v2.Array([[\"one\", \"two\"], [\"three\", \"four\"]])\r\n>>> ak._v2.broadcast_arrays(x[1:], x[:-1])\r\nValueError: while calling (from <ipython-input-42-6e4db831c1ff>, line 1)\r\n    ak._v2.broadcast_arrays(\r\n        arrays = (<Array [['one', 'two']] type='1 * var * string'>, <Array [[...\r\n        kwargs = {}\r\n    )\r\nError details: cannot broadcast nested list (in compiled code: https://github.com/scikit-hep/awkward-1.0/blob/1.10.0rc1/src/cpu-kernels/awkward_ListArray_broadcast_tooffsets.cpp#L27)\r\n```\r\n\r\nIn this case, broadcasting an Array of strings against an Array of integers produces arrays that have the same structure as though the outer `__array__ = \"string\"` were missing (i.e. broadcasting happens against the underlying characters array):\r\n```python3\r\n>>> import awkward as ak\r\n>>> x = ak._v2.Array([[\"one\", \"two\"], [\"three\", \"four\"]])\r\n>>> y = ak._v2.Array([[1,2],[3, 4]])\r\n>>> ak._v2.broadcast_arrays(x, y)\r\n[<Array [['one', 'two'], ['three', 'four']] type='2 * var * string'>,\r\n <Array [[[1, 1, 1], [2, 2, 2]], [[...], ...]] type='2 * var * var * int64'>]\r\n```",
  "closed_at":"2023-04-18T19:20:17Z",
  "comments":0,
  "created_at":"2022-09-07T16:11:24Z",
  "id":1364898226,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RWrGy",
  "number":1683,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"String broadcasting is not producing sensible results",
  "updated_at":"2023-04-18T19:20:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nSee https://github.com/scikit-hep/awkward/blob/31f3afb6bd31949bb2014d3be4b86194a63a573c/src/awkward/_v2/contents/indexedarray.py#L296-L351\r\n\r\n```python\r\nimport awkward as ak\r\n\r\nnumpy = ak.nplike.Numpy.instance()\r\n\r\nlayout = ak._v2.contents.IndexedArray(\r\n    ak._v2.index.Index64(numpy.array([0, 1, 2, 3])),\r\n    ak._v2.contents.NumpyArray(\r\n        numpy.arange(10),\r\n        parameters={\"this\": \"that\"}\r\n    ),\r\n    parameters={\"some\": \"other\"}\r\n)\r\n\r\nassert layout.project().parameter(\"some\") is not None\r\n```",
  "closed_at":"2022-12-05T20:17:05Z",
  "comments":1,
  "created_at":"2022-09-07T18:30:00Z",
  "id":1365041123,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RXN_j",
  "number":1685,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`IndexedArray.project()` does not preserve parameters",
  "updated_at":"2023-02-15T19:10:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n```python\r\nimport awkward as ak\r\n\r\nnumpy = ak.nplike.Numpy.instance()\r\n\r\nleft = ak._v2.contents.NumpyArray(numpy.arange(10), parameters={\"left\": \"other\"})\r\nright = ak._v2.contents.NumpyArray(numpy.arange(10), parameters={\"right\": \"other\"})\r\n\r\narray = ak._v2.contents.UnionArray(\r\n    ak._v2.index.Index8(numpy.array([0, 0, 0, 0, 1, 1, 1, 1], dtype=\"int8\")),\r\n    ak._v2.index.Index32(numpy.array([0, 1, 2, 3, 0, 1, 2, 3], dtype=\"int32\")),\r\n    [left, right],\r\n    parameters={\"some\": \"other\"},\r\n)\r\n\r\nassert array.simplify_uniontype().parameter(\"some\") is not None\r\n```",
  "closed_at":"2022-12-05T22:06:59Z",
  "comments":1,
  "created_at":"2022-09-07T18:38:39Z",
  "id":1365052156,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RXQr8",
  "number":1686,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`UnionArray.simplify_uniontype()` loses parameters",
  "updated_at":"2023-02-15T19:10:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nI think nearly all of this is due to the use of `ak.behavior` instead of a local behavior context. We can try changing this and see if random orders still pass.\r\n\r\nThen, we can add custom markers e.g. `slow` to order slow tests last.",
  "closed_at":"2022-09-26T20:59:34Z",
  "comments":0,
  "created_at":"2022-09-08T10:29:32Z",
  "id":1366001304,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Ra4aY",
  "number":1687,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Test suite is order-dependent",
  "updated_at":"2022-09-26T20:59:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\n1.10.0.rc2\r\n\r\n### Description and code to reproduce\r\n\r\n`ak.packed` seems to get rid of categoricals\r\n\r\n```python\r\nimport awkward._v2 as ak\r\n\r\na = ak.Array([\"foo\", \"foo\", \"bar\"])\r\na_cat = ak.to_categorical(a)\r\n\r\nassert a_cat.typestr == ak.packed(a_cat).typestr, f\"'{a_cat.typestr}' != '{ak.packed(a_cat).typestr}'\"\r\n```\r\n\r\n```pytb\r\n      3 a = ak.Array([\"foo\", \"foo\", \"bar\"])\r\n      4 a_cat = ak.to_categorical(a)\r\n----> 6 assert a_cat.typestr == ak.packed(a_cat).typestr, f\"'{a_cat.typestr}' != '{ak.packed(a_cat).typestr}'\"\r\n\r\nAssertionError: '3 * categorical[type=string]' != '3 * string'\r\n```\r\n\r\nThis makes sense in that the indexed array is projected, but I did not expect `ak.packed` to change the type of an array.\r\n\r\nThe docstring also says this:\r\n\r\n> Returns an array with the same type and values as the input, but with packed inner structures",
  "closed_at":"2022-09-08T16:36:58Z",
  "comments":9,
  "created_at":"2022-09-08T11:58:14Z",
  "id":1366166614,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5RbgxW",
  "number":1688,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.packed` casts categorical to value type",
  "updated_at":"2022-09-08T16:36:58Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1688 by only packing the `Indexed[Option]Array`'s contents if it is a categorical type.\r\n\r\nIn the long run, it would be nice if we could mark a layout node as non-transient so that we can implement support for this without hard-coding a test for `__array__ == \"categorical\"`",
  "closed_at":"2022-09-08T16:36:57Z",
  "comments":3,
  "created_at":"2022-09-08T15:57:37Z",
  "draft":false,
  "id":1366608685,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-nWre",
  "number":1689,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-08T16:36:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: don't project `categorical` in `ak._v2.packed`",
  "updated_at":"2022-09-23T09:45:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is just me playing around with removing v1. Should you want to do this yourself, no problem!\r\n\r\n- [x] Replace v1 tests with v2.\r\n- [x] Fix up setup.cfg linting rules.\r\n- [x] Move to `malloc` and `free` instead of Awkward allocators.\r\n- [x] Remove preliminary set of unused kernels. Any unused specialisations are not yet removed. \r\n- [x] Replace use of contents in Forth with NumPy arrays or import v2 objects\r\n- [x] Remove kernel dispatch, replace `kernel::malloc` with `malloc` or `new`\r\n- [x] Support `datetime.datetime` in `from_iter`\r\n- [x] Move `array_deleter` to `include/awkward/util.h`\r\n- [ ] Replace `pyobject_deleter` with the appropriate pybind11 feature.\r\n- [x] Move `LayoutBuilder` / `ArrayBuilder` to `_ext`\r\nFixes #1701",
  "closed_at":"2022-09-24T12:48:50Z",
  "comments":56,
  "created_at":"2022-09-09T13:45:31Z",
  "draft":false,
  "id":1367852928,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-riQW",
  "number":1690,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"reference: feat: replace v1 with v2",
  "updated_at":"2022-10-01T13:57:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"My new Mac's NumPy has a `np.float16` but no `np.float128`. For whatever reason. Anyway, the old logic skipped the whole test \"`if windows`\", and that's not granular enough.",
  "closed_at":"2022-09-13T23:10:15Z",
  "comments":2,
  "created_at":"2022-09-10T20:49:22Z",
  "draft":false,
  "id":1368727507,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-uUOx",
  "number":1691,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-13T23:10:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"test: skip individual np.float16/128 tests because different systems have different combinations.",
  "updated_at":"2022-09-13T23:10:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.9.0 to 2.10.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.10.0</h2>\n<ul>\n<li>\ud83c\udf1f Adds support for <a href=\"https://cibuildwheel.readthedocs.io/en/stable/setup/#cirrus-ci\">building wheels on Cirrus CI</a>. This is exciting for us, as it's the first public CI platform that natively supports macOS Apple Silicon (aka. M1, <code>arm64</code>) runners. As such, it's the first platform that you can natively build <em>and test</em> macOS <code>arm64</code> wheels. It also has native Linux ARM (aarch64) runners, for fast, native builds there. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1191\">#1191</a>)</li>\n<li>\ud83c\udf1f Adds support for running cibuildwheel on Apple Silicon machines. For a while, we've supported cross-compilation of Apple Silicon wheels on <code>x86_64</code>, but now that we have Cirrus CI we can run our test suite and officially support running cibuildwheel on <code>arm64</code>. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1191\">#1191</a>)</li>\n<li>\u2728 Adds the <code>--only</code> <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#command-line\">command line option</a>, to specify a single build to run. Previously, it could be cumbersome to set all the build selection options to target a specific build - for example, you might have to run something like <code>CIBW_BUILD=cp39-manylinux_x86_64 cibuildwheel --platform linux --archs x86_64</code>. The new <code>--only</code> option overrides all the build selection options to simplify running a single build, which now looks like <code>cibuildwheel --only cp39-manylinux_x86_64</code>. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1098\">#1098</a>)</li>\n<li>\u2728 Adds the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#config-settings\"><code>CIBW_CONFIG_SETTINGS</code></a> option, so you can pass arguments to your package's build backend (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1244\">#1244</a>)</li>\n<li>\ud83d\udee0 Updates the CPython 3.11 version to the latest release candidate - v3.11.0rc2. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1265\">#1265</a>)</li>\n<li>\ud83d\udc1b Fix a bug that can cause a RecursionError on Windows when building from an sdist. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1253\">#1253</a>)</li>\n<li>\ud83d\udee0 Add support for the s390x architecture on manylinux_2_28 (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1255\">#1255</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.10.0</h3>\n<p><em>13 September 2022</em></p>\n<ul>\n<li>\ud83c\udf1f Adds support for <a href=\"https://cibuildwheel.readthedocs.io/en/stable/setup/#cirrus-ci\">building wheels on Cirrus CI</a>. This is exciting for us, as it's the first public CI platform that natively supports macOS Apple Silicon (aka. M1, <code>arm64</code>) runners. As such, it's the first platform that you can natively build <em>and test</em> macOS <code>arm64</code> wheels. It also has native Linux ARM (aarch64) runners, for fast, native builds there. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1191\">#1191</a>)</li>\n<li>\ud83c\udf1f Adds support for running cibuildwheel on Apple Silicon machines. For a while, we've supported cross-compilation of Apple Silicon wheels on <code>x86_64</code>, but now that we have Cirrus CI we can run our test suite and officially support running cibuildwheel on <code>arm64</code>. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1191\">#1191</a>)</li>\n<li>\u2728 Adds the <code>--only</code> <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#command-line\">command line option</a>, to specify a single build to run. Previously, it could be cumbersome to set all the build selection options to target a specific build - for example, you might have to run something like <code>CIBW_BUILD=cp39-manylinux_x86_64 cibuildwheel --platform linux --archs x86_64</code>. The new <code>--only</code> option overrides all the build selection options to simplify running a single build, which now looks like <code>cibuildwheel --only cp39-manylinux_x86_64</code>. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1098\">#1098</a>)</li>\n<li>\u2728 Adds the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#config-settings\"><code>CIBW_CONFIG_SETTINGS</code></a> option, so you can pass arguments to your package's build backend (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1244\">#1244</a>)</li>\n<li>\ud83d\udee0 Updates the CPython 3.11 version to the latest release candidate - v3.11.0rc2. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1265\">#1265</a>)</li>\n<li>\ud83d\udc1b Fix a bug that can cause a RecursionError on Windows when building from an sdist. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1253\">#1253</a>)</li>\n<li>\ud83d\udee0 Add support for the s390x architecture on manylinux_2_28 (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1255\">#1255</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/67a7175578d31df091005d66d55bd8daa4e18665\"><code>67a7175</code></a> Bump version: v2.10.0</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/53aa7f7a4f77425f5af5a58b844b63097bd48709\"><code>53aa7f7</code></a> [Bot] Update dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1265\">#1265</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/01504b889c32d12395f2537033cf9b4b10179257\"><code>01504b8</code></a> docs: only macOS platforms support macOS ARM (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1264\">#1264</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/eb39da0b10a9f48015e84973545691981949b13d\"><code>eb39da0</code></a> feat: add --only (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1098\">#1098</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/3a46bde3fbcdffa4b61a4cc0b7f8a4b403408fd0\"><code>3a46bde</code></a> [Bot] Update dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1256\">#1256</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/3597095948bea4aea71616b558a7c19546ede4a8\"><code>3597095</code></a> feat: support config-settings (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1244\">#1244</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/6a9b39af497a1b6e71b22a7933cf207b5367edde\"><code>6a9b39a</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1257\">#1257</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/3ebce17339ee23db908a7d9c0236693f70a46234\"><code>3ebce17</code></a> feat: manylinux_2_28_s390x support (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1255\">#1255</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/6f17a09d06fa603fc56e50e4bf0c87b0e63f784e\"><code>6f17a09</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1249\">#1249</a> from pypa/update-dependencies-pr</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/2dfeb940266b8129af4374c5b440ab13aa1d4b2d\"><code>2dfeb94</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1253\">#1253</a> from maxbachmann/main</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.9.0...v2.10.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.9.0&new-version=2.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-09-14T14:15:08Z",
  "comments":1,
  "created_at":"2022-09-13T17:56:13Z",
  "draft":false,
  "id":1371814181,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-4kTL",
  "number":1692,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-14T14:15:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: Build(deps): bump pypa/cibuildwheel from 2.9.0 to 2.10.0",
  "updated_at":"2022-09-14T14:15:09Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nRelated to #1686 and #1685.\r\n\r\n#1685 explores the idea that `IndexedArray` layouts should merge parameters when projecting. If this rule were applied to `main`, it would break e.g. categorical arrays, which are strongly coupled with their underlying layout representation.\r\n\r\nEven if we do not need a general solution for other behaviours (i.e. if `categorical` is a niche case), we should find a standard mechanism for handling it (related to #1682). Perhaps we need something like\r\n```python\r\nak.behavior[\"__transient__\", \"categorical\"] = False\r\n```\r\n\r\nThe _transient_ vs _tied to layout_ distinction is an implementation detail.",
  "closed_at":"2023-07-02T17:49:32Z",
  "comments":1,
  "created_at":"2022-09-13T21:37:47Z",
  "id":1372033968,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Rx5Ow",
  "number":1693,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Allow behaviours to declare themselves as non-transient",
  "updated_at":"2023-07-02T17:49:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.10.0rc3\n\n### Description and code to reproduce\n\nDuring the PR adding awkward array support into AnnData, I noticed the test suite was taking much longer than usual. Trying to track down the culprit, I found the line where we make shallow copies of an awkward array. Under this largely seemed to be code related to making `repr` strings.\r\n\r\nChecking if this is just us:\r\n\r\nMaking a minimal reproducible example:\r\n\r\n```python\r\nimport awkward._v2 as ak\r\nimport numpy as np\r\nfrom copy import copy, deepcopy\r\n\r\ncounts = np.random.randint(1, 1000, size=(10000))\r\ndata = np.random.randint(0, 100, size=counts.sum())\r\nawk = ak.unflatten(data, counts)\r\n\r\n\r\n%%prun -s cumtime\r\nfor _ in range(1000):\r\n    copy(awk)\r\n```\r\n\r\n\r\n```\r\n         3544003 function calls (3382003 primitive calls) in 3.619 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    3.619    3.619 {built-in method builtins.exec}\r\n        1    0.002    0.002    3.619    3.619 <string>:1(<module>)\r\n     1000    0.003    0.000    3.617    0.004 copy.py:66(copy)\r\n     5000    0.041    0.000    3.264    0.001 _util.py:210(__init__)\r\n     1000    0.002    0.000    3.078    0.003 {method '__reduce_ex__' of 'object' objects}\r\n     1000    0.003    0.000    3.076    0.003 highlevel.py:1377(__getstate__)\r\n28000/24000    0.056    0.000    2.881    0.000 _util.py:138(format_argument)\r\n     4000    0.044    0.000    2.026    0.001 highlevel.py:1177(_repr)\r\n     4000    0.005    0.000    1.699    0.000 _prettyprint.py:209(valuestr)\r\n78000/26000    0.186    0.000    1.697    0.000 highlevel.py:1113(__setattr__)\r\n40000/4000    0.182    0.000    1.692    0.000 _prettyprint.py:69(valuestr_horiz)\r\n    12000    0.028    0.000    1.595    0.000 highlevel.py:187(__init__)\r\n     1000    0.004    0.000    1.548    0.002 ak_to_buffers.py:9(to_buffers)\r\n     1000    0.004    0.000    1.525    0.002 ak_packed.py:8(packed)\r\n     2000    0.007    0.000    1.493    0.001 ak_to_layout.py:11(to_layout)\r\n    78000    1.398    0.000    1.398    0.000 {built-in method builtins.dir}\r\n    36000    0.051    0.000    1.318    0.000 _prettyprint.py:41(get_at)\r\n    10000    0.017    0.000    1.070    0.000 _util.py:770(wrap)\r\n```\r\n\r\nI would expect making a shallow copy of an awkward array to be quite fast. I also wouldn't expect pretty printing methods to be called.",
  "closed_at":"2022-09-14T12:32:41Z",
  "comments":9,
  "created_at":"2022-09-13T22:02:34Z",
  "id":1372052180,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Rx9rU",
  "number":1694,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Shallow copy is slow, seems to spend a lot of time in repr",
  "updated_at":"2022-09-14T13:27:52Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2022-09-14T12:32:40Z",
  "comments":4,
  "created_at":"2022-09-13T23:02:39Z",
  "draft":false,
  "id":1372096780,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-5g30",
  "number":1695,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-14T12:32:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: ensure that `__copy__` and `__deepcopy__` are enabled.",
  "updated_at":"2022-09-14T12:49:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n[8a338cb](https://github.com/scikit-hep/awkward/commit/8a338cbefba831a45671c8b28a3ee44b2b2af885)\r\n\r\n### Description and code to reproduce\r\n\r\nIn exploring #1695, I noticed that `RegularArray` doesn't round-trip through `ak._v2.from_buffers(*ak._v2.to_buffers(array))`if its length is set by `zeros_length`. It seems to me that we want the `zeros_length` of this layout node to be a part of its form. Unlike the other list-types, which do not need this parameter (as they do not use the content's length to determine their own length), we need this information to be able to faithfully reconstruct a `RegularArray`.\r\n\r\nThere are some ramifications of this; we need to be particularly careful about when to set `zeros_length=self._zeros_length` (for form-idempotent operations like `array.copy()`), and when to set `zeros_length=new_length` (where we want to ensure that e.g. a slice operation has the right length). On the one hand, this feels like a footgun - now we have *another* parameter to worry about setting incorrectly. However, if we agree that this bug (#1696) is a problem, then we either must store `zeros_length` or `length`. The latter isn't appropriate for the form, which should be agnostic with respect to the contents of the buffers that accompany it. Making concrete length information part of the form leads to a dependency of the form on the particular buffer lengths.\r\n\r\nAre there any serious ramifications to adding `zeros_length` as part of the `RegularArray` form?",
  "closed_at":"2022-09-14T09:30:22Z",
  "comments":3,
  "created_at":"2022-09-14T09:07:27Z",
  "id":1372627876,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5R0KOk",
  "number":1696,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"not_planned",
  "title":"`RegularArray.zeros_length` should be part of its form? (no!)",
  "updated_at":"2022-09-14T14:03:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-09-14T12:49:50Z",
  "comments":3,
  "created_at":"2022-09-14T12:11:36Z",
  "draft":true,
  "id":1372879062,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-8IXQ",
  "number":1697,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: add copy helpers ",
  "updated_at":"2022-09-14T13:10:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski whoops, somehow I missed this on your PR.",
  "closed_at":"2022-09-14T13:55:41Z",
  "comments":4,
  "created_at":"2022-09-14T13:01:53Z",
  "draft":false,
  "id":1372951374,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-8YQ1",
  "number":1698,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-14T13:55:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: pass memo to deepcopy",
  "updated_at":"2022-09-14T13:55:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-09-14T14:20:21Z",
  "comments":1,
  "created_at":"2022-09-14T13:38:24Z",
  "draft":false,
  "id":1373005791,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-8kDZ",
  "number":1699,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-14T14:20:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: raise Error for Record.__setattr__",
  "updated_at":"2022-09-14T14:20:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- [x] follow up #1699 here",
  "closed_at":"2022-09-14T15:58:21Z",
  "comments":7,
  "created_at":"2022-09-14T13:38:28Z",
  "draft":false,
  "id":1373005903,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4-8kE8",
  "number":1700,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-14T15:58:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"perf: improve Array initialisation performance",
  "updated_at":"2022-09-14T15:58:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nhttps://github.com/scikit-hep/awkward/blob/77b06b3575737ec3cebc4c9b76ddceaf584d57c3/src/python/content.cpp#L952-L957\r\n\r\nand\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/77b06b3575737ec3cebc4c9b76ddceaf584d57c3/src/python/content.cpp#L846-L886\r\n\r\nhandle NumPy datetime objects, but Python datetime objects are not explicitly recognized. (What happens? Does it raise a \"cannot convert...\" ValueError?)\r\n\r\nGiven a `datetime.datetime`, one can call `.timestamp()` to get a number of seconds since 1970 as a floating point number. To fill the `ArrayBuilder::datetime` or `ArrayBuilder::timedelta`, we have to provide a 64-bit integer and a type string. We could _choose_ that type string to be `\"s\"` and cast the floating point number as an integer as-is, or _choose_ the type string to be `\"ms\"` and multiply the number by 1000, etc.\r\n\r\nEither we hard-code a choice or pass it down as an argument (but that means passing it down through C++, like the options in `from_json`). Note:\r\n\r\n   * `\"ns\"` (nanosecond) resolution gives us a range from 1677 through 2262\r\n   * `\"us\"` (microsecond) resolution gives us a range from 290307 B.C.E through 294247 C.E., though if we were _constructing_ Python `datetime` objects, these years are already out of range.\r\n   * there's no point in going to less granular units (`\"ms\"`, `\"s\"`) if Python `datetime` can't even represent them.\r\n\r\nSo the only units that make any sense to assume are microseconds and nanoseconds. Microseconds covers the entire range that Python `datetime` is capable of (and more), and nanosecond resolution sounds rather special-purpose. (Users can make NumPy datetimes if they need that.) So I would vote to hard-code it as microseconds.",
  "closed_at":"2022-09-24T12:49:51Z",
  "comments":3,
  "created_at":"2022-09-14T14:52:40Z",
  "id":1373134219,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5R2F2L",
  "number":1701,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak._v2.from_iter should recognize Python datetimes/timedeltas",
  "updated_at":"2022-09-24T12:49:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nboost-histogram clones hist's master, and checks that it works against boost-histogram. We could do this to ensure that we don't break people e.g. `anndata` (if they have a test suite).\r\n\r\n- vector \r\n- anndata\r\n\r\n@henryiii mentioned `mypy_primer` as the inspiration for this.\r\n\r\nIf we pin, then we can treat these as workflow tests (non-required).",
  "closed_at":"2024-01-20T00:25:15Z",
  "comments":1,
  "created_at":"2022-09-15T13:49:11Z",
  "id":1374562388,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5R7ihU",
  "number":1702,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add CI workflow to test third party packages against master",
  "updated_at":"2024-01-20T00:25:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.10.0rc4\n\n### Description and code to reproduce\n\n```python\r\n>>> import awkward._v2 as ak\r\n>>> x = ak.Array([1, 2, None])\r\n>>> ak.fill_none(x, 0)\r\n<Array [1, 2, 0] type='3 * int64'>\r\n>>> tt = ak.Array(x.layout.typetracer.forget_length())\r\n>>> tt\r\n<Array-typetracer type='?? * ?int64'>\r\n>>> ak.fill_none(tt, 0)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/ddavis/software/repos/awkward/awkward/_v2/operations/ak_fill_none.py\", line 59, in fill_none\r\n    return _impl(array, value, axis, highlevel, behavior)\r\n  File \"/Users/ddavis/software/repos/awkward/awkward/_v2/operations/ak_fill_none.py\", line 82, in _impl\r\n    nplike.asarray(value), allow_record=False, allow_other=False\r\n  File \"/Users/ddavis/software/repos/awkward/awkward/_v2/_typetracer.py\", line 524, in asarray\r\n    dtype = array.dtype\r\nAttributeError: 'int' object has no attribute 'dtype'\r\n```\r\nLooks like `fill_none` tries to call `asarray` on the `value` argument (in the code block I'm using `0` as the value), `TypeTracer.asarray(arg)` assumes that `arg` has a `dtype` attribute.",
  "closed_at":"2022-10-06T19:07:30Z",
  "comments":0,
  "created_at":"2022-09-16T17:34:57Z",
  "id":1376226120,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5SB4tI",
  "number":1703,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.fill_none` fails with typetracer Array",
  "updated_at":"2022-10-06T19:07:30Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.10.0 to 2.10.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.10.1</h2>\n<ul>\n<li>\ud83d\udc1b Fix a bug that stopped environment variables specified in TOML from being expanded. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1273\">#1273</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.10.1</h3>\n<p><em>18 September 2022</em></p>\n<ul>\n<li>\ud83d\udc1b Fix a bug that stopped environment variables specified in TOML from being expanded. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1273\">#1273</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/225387a9d55a3df0ca48efc17acf4964b8ef4f10\"><code>225387a</code></a> Bump version: v2.10.1</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/ad172699f1df844f553efb17e5b9204c304a8bae\"><code>ad17269</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1273\">#1273</a> from pypa/toml-environment-quoting</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/5dcb3636795db2e46a1bd8f6089471e0a565e155\"><code>5dcb363</code></a> Fix typing-extensions requirement</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/13fc768552153a9a740e16156b056d44728227ca\"><code>13fc768</code></a> Revert to the previous quoting behaviour for environment option</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/7b43ed453f18dc563cf3712e4917882eaaf077be\"><code>7b43ed4</code></a> Add failing test</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/00b2600cca381be796f3755f9c38065dfbf8c3b1\"><code>00b2600</code></a> chore: cleanup types (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1263\">#1263</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/6181943e3229ebf6439bfcd3a8a91ff5020ec4f5\"><code>6181943</code></a> Increase Cirrus CI timeout (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1267\">#1267</a>)</li>\n<li>See full diff in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.10.0...v2.10.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.10.0&new-version=2.10.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-09-27T17:28:06Z",
  "comments":2,
  "created_at":"2022-09-19T17:31:47Z",
  "draft":false,
  "id":1378294152,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_N45U",
  "number":1705,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: bump pypa/cibuildwheel from 2.10.0 to 2.10.1",
  "updated_at":"2022-09-27T17:28:08Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/pyupgrade: v2.37.3 \u2192 v2.38.0](https://github.com/asottile/pyupgrade/compare/v2.37.3...v2.38.0)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-09-21T19:03:31Z",
  "comments":1,
  "created_at":"2022-09-19T21:38:24Z",
  "draft":false,
  "id":1378553176,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_Owq9",
  "number":1706,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-21T19:03:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-09-21T19:03:32Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\n1.10.0\n\n### Description and code to reproduce\n\nPR #1679 added parameter-carrying to broadcasting, but if the parameter values are dicts, rather something hashable, like strings, the implementation fails.\r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> array = ak.with_parameter(ak.Array([[1, 2], [], [3]]), \"attrs\", \"hashable\")\r\n>>> array\r\n<Array [[1, 2], [], [3]] type='3 * [var * int64, parameters={\"attrs\": \"hash...'>\r\n>>> array + array\r\n<Array [[2, 4], [], [6]] type='3 * [var * int64, parameters={\"attrs\": \"hash...'>\r\n```\r\n\r\nversus\r\n\r\n```python\r\n>>> array = ak.with_parameter(ak.Array([[1, 2], [], [3]]), \"attrs\", {\"not\": \"hashable\"})\r\n>>> array\r\n<Array [[1, 2], [], [3]] type='3 * [var * int64, parameters={\"attrs\": {\"not...'>\r\n>>> array + array\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/jpivarski/mambaforge/lib/python3.10/site-packages/numpy/lib/mixins.py\", line 21, in func\r\n    return ufunc(self, other)\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/highlevel.py\", line 1339, in __array_ufunc__\r\n    return ak._v2._connect.numpy.array_ufunc(ufunc, method, inputs, kwargs)\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/_connect/numpy.py\", line 278, in array_ufunc\r\n    out = ak._v2._broadcasting.broadcast_and_apply(\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/_broadcasting.py\", line 1019, in broadcast_and_apply\r\n    out = apply_step(\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/_broadcasting.py\", line 998, in apply_step\r\n    return continuation()\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/_broadcasting.py\", line 720, in continuation\r\n    outcontent = apply_step(\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/_broadcasting.py\", line 409, in apply_step\r\n    parameters_factory = parameters_factory_impl(inputs)\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/_broadcasting.py\", line 277, in _intersection_parameters_factory\r\n    functools.reduce(operator.and_, list(parameters_to_intersect))\r\nTypeError: unhashable type: 'dict'\r\n```\r\n\r\nIt fails in the `functools.reduce` of\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/ca1b9d7835570af8a11fe7af61a7c53d095a80e2/src/awkward/_v2/_broadcasting.py#L262-L276\r\n\r\nin the hashable case, the `parameters_to_intersect` is\r\n\r\n```python\r\n[dict_items([('attrs', 'hashable')]), dict_items([('attrs', 'hashable')])]\r\n```\r\n\r\nand in the non-hashable case, it's\r\n\r\n```python\r\n[dict_items([('attrs', {'not': 'hashable'})]), dict_items([('attrs', {'not': 'hashable'})])]\r\n```\r\n\r\nThe `operator.and_` is a bitwise `&` operator\u2014I doubt that's what you want there. I think this can be done more simply in a for loop.\r\n\r\nAlso, possibly related, we're losing parameters in simple arrays:\r\n\r\n```python\r\n>>> array = ak.with_parameter(ak.Array([1, 2, 3]), \"attrs\", {\"not\": \"hashable\"})\r\n>>> array\r\n<Array [1, 2, 3] type='3 * int64[parameters={\"attrs\": {\"not\": \"hashable\"}}]'>\r\n>>> array + array\r\n<Array [2, 4, 6] type='3 * int64'>\r\n```\r\n\r\nIn this case, it reaches the `break` and therefore skips the `reduce`. (Why would `_parameters_is_empty` be true for this array that clearly has parameters? I think the first step in broadcasting creates a RegularArray around this NumpyArray\u2014it doesn't collapse the RegularArray + NumpyArray into a multidimensional NumpyArray, and lose the parameter, does it?)\r\n\r\nDiscovered by @philippemiron.",
  "closed_at":"2022-09-21T18:51:25Z",
  "comments":2,
  "created_at":"2022-09-20T16:19:39Z",
  "id":1379678093,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5SPDeN",
  "number":1707,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Intersecting parameters introduced \"unhashable type\" bug.",
  "updated_at":"2022-09-21T18:51:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1707\r\n\r\nIn #1707 we were using the nice set-like feature of Python dict views (keys, items, values) to determine the intersection of parameters dictionaries. However, given that it is possible for users to store JSON serialisable content in `parameters`, including dictionaries and lists, we cannot assume that the values of `parameters` are hashable. \r\n\r\nThis PR replaces the set-intersection reduction with a dictionary-equality reduction.",
  "closed_at":"2022-09-21T18:51:24Z",
  "comments":7,
  "created_at":"2022-09-20T18:01:30Z",
  "draft":false,
  "id":1379797141,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_S3qM",
  "number":1708,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-21T18:51:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: support non-hashable parameter values in broadcasting",
  "updated_at":"2022-09-23T08:02:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.10.0\n\n### Description and code to reproduce\n\nSee title!",
  "closed_at":"2022-09-24T21:04:39Z",
  "comments":0,
  "created_at":"2022-09-21T13:39:45Z",
  "id":1380953624,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ST64Y",
  "number":1709,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.Array` does not copy the behaviour of a wrapped array",
  "updated_at":"2022-09-24T21:04:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nThis is part 2 of issue #1707, since PR #1708 fixes part 1.\r\n\r\n```python\r\n>>> array = ak.with_parameter(ak.Array([1, 2, 3]), \"attrs\", {\"not\": \"hashable\"})\r\n>>> array\r\n<Array [1, 2, 3] type='3 * int64[parameters={\"attrs\": {\"not\": \"hashable\"}}]'>\r\n>>> array + array\r\n<Array [2, 4, 6] type='3 * int64'>\r\n```\r\n\r\nAs @agoose77 discovered in our Zoom call, it's because\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/ca1b9d7835570af8a11fe7af61a7c53d095a80e2/src/awkward/_v2/_connect/numpy.py#L215\r\n\r\ndoes not pass on parameters. (That is, it's another source of parameter loss, outside of _broadcasting.py.)",
  "closed_at":"2022-09-21T19:01:09Z",
  "comments":1,
  "created_at":"2022-09-21T18:29:37Z",
  "id":1381329815,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5SVWuX",
  "number":1710,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Parameters of NumpyArray are lost in ufunc computations (#1679 is incomplete).",
  "updated_at":"2022-09-21T19:01:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This follows #1708 to extend the test suite.",
  "closed_at":"2022-09-24T21:30:38Z",
  "comments":2,
  "created_at":"2022-09-21T19:12:42Z",
  "draft":false,
  "id":1381380490,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_X-Un",
  "number":1712,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-24T21:30:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"test: ensure that parameters are kept for `NumpyArray`s under ufunc operations",
  "updated_at":"2022-09-24T21:30:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski are you happy with this?\r\n",
  "closed_at":"2022-09-27T12:45:42Z",
  "comments":1,
  "created_at":"2022-09-21T19:47:15Z",
  "id":1381415331,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5SVrmj",
  "number":1713,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add Manasvi (and any others?) to CITATION.cff / Zenodo",
  "updated_at":"2022-09-27T12:45:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1709 ",
  "closed_at":"2022-09-24T21:04:38Z",
  "comments":3,
  "created_at":"2022-09-22T14:08:50Z",
  "draft":false,
  "id":1382520002,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_btyI",
  "number":1715,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-24T21:04:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: ensure `behavior` is taken from wrapped array in `ak.Array`",
  "updated_at":"2022-09-24T21:04:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1687 (at least, should help!)",
  "closed_at":"2022-09-26T20:59:33Z",
  "comments":4,
  "created_at":"2022-09-22T14:09:42Z",
  "draft":false,
  "id":1382521797,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_buKr",
  "number":1716,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-26T20:59:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"test: remove `ak.behavior` usage in tests",
  "updated_at":"2022-09-27T06:39:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1713",
  "closed_at":"2022-09-23T00:56:24Z",
  "comments":7,
  "created_at":"2022-09-22T14:16:12Z",
  "draft":false,
  "id":1382532263,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_bwWF",
  "number":1717,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-23T00:56:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update CITATION.cff",
  "updated_at":"2022-09-24T13:24:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n...",
  "closed_at":"2022-09-22T16:40:46Z",
  "comments":4,
  "created_at":"2022-09-22T16:15:32Z",
  "id":1382700500,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5SalXU",
  "number":1719,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Change `numba_type` objects to match `type` object interface?",
  "updated_at":"2022-09-22T17:41:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nWe already overload the `np.equal` and `np.not_equal` ufuncs on strings, but we don't intrinsically prevent other ufuncs from being used. This means that the folllowing suceeds:\r\n\r\n```python\r\nimport awkward as ak\r\n\r\nak.Array([\"this\", \"that\"]) + np.array([[1,1,1,1],[1,1,1,1]])\r\n```\r\n\r\nSee #1708 for context.",
  "closed_at":"2023-07-05T13:48:39Z",
  "comments":1,
  "created_at":"2022-09-23T08:04:04Z",
  "id":1383438385,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5SdZgx",
  "number":1720,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add `ufunc` overload to limit string operations to `==` and `!=`",
  "updated_at":"2023-07-05T13:48:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@ianna and @jpivarski, I didn't want to squash and merge #1690 into main, as it would destroy all of the v2 history. Whilst that's less catastrophic than in the case of v1, which has been around for much longer, I would rather keep it. That way, future bugs that are just porting errors will be easier to spot, as the history will inform us of this.\r\n\r\nI've just refactored the commits in #1690 so that move operations are preserved. You can confirm that this PR does not change the result with\r\n```bash\r\ngit diff 0c075e1f0d3f35a703d8a36ede0541b297dadae6 6e696b1f91030ffa6871b638d844fbcd76a9b914\r\n```\r\n\r\nIf you're both happy with my changes in line with your reviews, then feel free to merge (via rebase and merge, or merge commit (NOT squash!))",
  "closed_at":"2022-09-24T12:48:20Z",
  "comments":4,
  "created_at":"2022-09-23T08:40:34Z",
  "draft":false,
  "id":1383477379,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_e1Mx",
  "number":1721,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-24T12:48:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: replace v1 with v2 (preserve-history)",
  "updated_at":"2022-09-24T12:48:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is the preferred means of uploading Codecov reports over the bash mechanism.",
  "closed_at":"2022-09-24T20:39:43Z",
  "comments":2,
  "created_at":"2022-09-24T13:47:51Z",
  "draft":false,
  "id":1384680003,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_isBg",
  "number":1722,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-24T20:39:43Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: use codecov action",
  "updated_at":"2022-09-24T20:39:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'm going to merge this without waiting for review, as it's a tiny change, and you've listed it in a todo list. Let me know if that's too presumptive!",
  "closed_at":"2022-09-24T21:08:39Z",
  "comments":0,
  "created_at":"2022-09-24T14:15:59Z",
  "draft":false,
  "id":1384689961,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_itnM",
  "number":1723,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-24T21:08:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: set `VERSION_INFO` contents to `2.0.0rc1`",
  "updated_at":"2022-09-24T21:08:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n```python\r\nimport awkward as ak\r\n\r\nak.ravel([[\"this\", \"that\"]])\r\n```",
  "closed_at":"2022-12-19T12:48:28Z",
  "comments":2,
  "created_at":"2022-09-24T14:36:28Z",
  "id":1384697607,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5SiM8H",
  "number":1724,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.flatten` / `ak.ravel` does not support arrays of strings",
  "updated_at":"2022-12-19T12:48:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1582 by making `ak.highlevel.Record` non-iterable. Nothing else is changed, as the v2 `builder_from_iter` supports anything that implements a `to_list` or `tolist` method, such as `ak.Record` and `ak.record.Record`",
  "closed_at":"2022-09-24T21:12:21Z",
  "comments":5,
  "created_at":"2022-09-24T15:01:39Z",
  "draft":false,
  "id":1384706159,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_iwWo",
  "number":1725,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-24T21:12:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor!: disable iteration of records",
  "updated_at":"2022-09-26T09:28:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes CI in main, which was broken when an out-of-phase commit was merged",
  "closed_at":"2022-09-24T21:38:21Z",
  "comments":1,
  "created_at":"2022-09-24T21:21:48Z",
  "draft":false,
  "id":1384816268,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_jDQD",
  "number":1726,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"style: run isort on tests",
  "updated_at":"2022-09-24T21:59:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-09-26T08:19:43Z",
  "comments":2,
  "created_at":"2022-09-26T06:44:25Z",
  "draft":false,
  "id":1385515315,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_lBsi",
  "number":1727,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: test PyPy 3.10 in CI",
  "updated_at":"2022-09-26T09:35:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nThis is *not* a priority right now, as we long-term have plans to work on the build backend, but this issue should serve as a note:\r\n\r\n`python3 -m build --target wheel` fails on my machine, with \r\n\r\n<details>\r\n\r\n```\r\n* Creating venv isolated environment...\r\n* Installing packages in isolated environment... (PyYAML, cmake>=3.13, setuptools>=42.0)\r\n* Getting dependencies for wheel...\r\n/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.\r\n  warnings.warn(msg, warning_class)\r\nrunning egg_info\r\nwriting src/awkward.egg-info/PKG-INFO\r\nwriting dependency_links to src/awkward.egg-info/dependency_links.txt\r\nwriting entry points to src/awkward.egg-info/entry_points.txt\r\nwriting requirements to src/awkward.egg-info/requires.txt\r\nwriting top-level names to src/awkward.egg-info/top_level.txt\r\nreading manifest file 'src/awkward.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwarning: no files found matching '*.cpp' under directory 'tests'\r\nwarning: no files found matching '*.py' under directory 'tests-cpu-kernels'\r\nwarning: no files found matching '*.py' under directory 'tests-cuda-kernels'\r\nwarning: no files found matching '*.py' under directory 'tests-spec'\r\nwarning: no files found matching '*.c' under directory 'dlpack'\r\nwarning: no files found matching '*.cc' under directory 'dlpack'\r\nwarning: no files found matching '*.h' under directory 'dlpack'\r\nwarning: no files found matching '*.in' under directory 'dlpack'\r\nwarning: no files found matching 'dlpack/LICENSE'\r\nwarning: no files found matching 'dlpack/CMakeLists.txt'\r\nwarning: no files found matching 'pybind11/README.md'\r\nwarning: no files found matching 'pybind11/CONTRIBUTING.md'\r\nadding license file 'LICENSE'\r\nwriting manifest file 'src/awkward.egg-info/SOURCES.txt'\r\n* Installing packages in isolated environment... (wheel)\r\n* Building wheel...\r\n/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.\r\n  warnings.warn(msg, warning_class)\r\nrunning bdist_wheel\r\nrunning build\r\nrunning build_py\r\nGenerating include/awkward/kernels.h...\r\nDone with  include/awkward/kernels.h.\r\nGenerating src/awkward/_kernel_signatures.py...\r\nDone with  src/awkward/_kernel_signatures.py...\r\nGenerating src/awkward/_connect/cuda/_kernel_signatures.py...\r\nDone with  src/awkward/_kernel_signatures_cuda.py...\r\ncopying src/awkward/_broadcasting.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/_slicing.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/_libawkward.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/nplike.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/_util.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/_prettyprint.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/_lookup.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/record.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/_typetracer.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/forth.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/_kernel_signatures.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/numba.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/index.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/_cpu_kernels.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/identifier.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/highlevel.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/_reducers.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/config.py -> build/lib.linux-x86_64-cpython-310/awkward\r\ncopying src/awkward/operations/ak_unflatten.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_without_parameters.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_count.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_transform.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_unzip.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_cupy.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_num.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_jax.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_nan_to_num.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_covar.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_argcartesian.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_linear_fit.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_values_astype.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_parquet.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_zeros_like.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_broadcast_arrays.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_run_lengths.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_full_like.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_strings_astype.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_var.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_avro_file.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_local_index.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_firsts.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_parameters.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_max.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_prod.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_categories.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_softmax.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_concatenate.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_mask.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_fields.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_argcombinations.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_regular.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_cartesian.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_categorical.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_rdataframe.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_combinations.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_fill_none.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_json.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_any.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_is_tuple.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_json.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_nan_to_none.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_mean.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_singletons.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_pad_none.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_argsort.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_backend.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_backend.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_arrow_table.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_flatten.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_min.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_zip.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_is_none.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_list.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_ones_like.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_argmin.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_validity_error.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_where.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_packed.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_regular.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_layout.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_sort.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_categorical.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_buffers.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_all.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_parquet.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_with_parameter.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_arrow.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_with_field.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_numpy.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_jax.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_ptp.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_sum.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_dataframe.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_buffers.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_corr.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_argmax.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_with_name.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_std.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_is_valid.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_cupy.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_ravel.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_arrow_schema.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_count_nonzero.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_metadata_from_parquet.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_from_iter.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_isclose.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_type.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_moment.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_arrow.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_copy.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_is_categorical.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_numpy.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/operations/ak_to_rdataframe.py -> build/lib.linux-x86_64-cpython-310/awkward/operations\r\ncopying src/awkward/forms/unmaskedform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/form.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/bytemaskedform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/indexedform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/regularform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/recordform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/bitmaskedform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/listform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/indexedoptionform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/listoffsetform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/numpyform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/emptyform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/forms/unionform.py -> build/lib.linux-x86_64-cpython-310/awkward/forms\r\ncopying src/awkward/behaviors/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward/behaviors\r\ncopying src/awkward/behaviors/mixins.py -> build/lib.linux-x86_64-cpython-310/awkward/behaviors\r\ncopying src/awkward/behaviors/categorical.py -> build/lib.linux-x86_64-cpython-310/awkward/behaviors\r\ncopying src/awkward/behaviors/string.py -> build/lib.linux-x86_64-cpython-310/awkward/behaviors\r\ncopying src/awkward/contents/regulararray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/listarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/indexedarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/recordarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/listoffsetarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/unmaskedarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/emptyarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/unionarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/numpyarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/bitmaskedarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/content.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/indexedoptionarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/contents/bytemaskedarray.py -> build/lib.linux-x86_64-cpython-310/awkward/contents\r\ncopying src/awkward/types/numpytype.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/types/unknowntype.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/types/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/types/recordtype.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/types/listtype.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/types/uniontype.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/types/regulartype.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/types/optiontype.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/types/_awkward_datashape_parser.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/types/arraytype.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/types/type.py -> build/lib.linux-x86_64-cpython-310/awkward/types\r\ncopying src/awkward/_connect/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect\r\ncopying src/awkward/_connect/cling.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect\r\ncopying src/awkward/_connect/numexpr.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect\r\ncopying src/awkward/_connect/pyarrow.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect\r\ncopying src/awkward/_connect/avro.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect\r\ncopying src/awkward/_connect/numpy.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect\r\ncopying src/awkward/_connect/numba/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/numba\r\ncopying src/awkward/_connect/numba/arrayview.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/numba\r\ncopying src/awkward/_connect/numba/layout.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/numba\r\ncopying src/awkward/_connect/numba/builder.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/numba\r\ncopying src/awkward/_connect/rdataframe/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/rdataframe\r\ncopying src/awkward/_connect/rdataframe/to_rdataframe.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/rdataframe\r\ncopying src/awkward/_connect/rdataframe/from_rdataframe.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/rdataframe\r\ncopying src/awkward/_connect/jax/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/jax\r\ncopying src/awkward/_connect/jax/_reducers.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/jax\r\ncopying src/awkward/_connect/cuda/__init__.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda\r\ncopying src/awkward/_connect/cuda/_kernel_signatures.py -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda\r\nrunning egg_info\r\nwriting src/awkward.egg-info/PKG-INFO\r\nwriting dependency_links to src/awkward.egg-info/dependency_links.txt\r\nwriting entry points to src/awkward.egg-info/entry_points.txt\r\nwriting requirements to src/awkward.egg-info/requires.txt\r\nwriting top-level names to src/awkward.egg-info/top_level.txt\r\nreading manifest file 'src/awkward.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwarning: no files found matching '*.cpp' under directory 'tests'\r\nwarning: no files found matching '*.py' under directory 'tests-cpu-kernels'\r\nwarning: no files found matching '*.py' under directory 'tests-cuda-kernels'\r\nwarning: no files found matching '*.py' under directory 'tests-spec'\r\nwarning: no files found matching '*.c' under directory 'dlpack'\r\nwarning: no files found matching '*.cc' under directory 'dlpack'\r\nwarning: no files found matching '*.h' under directory 'dlpack'\r\nwarning: no files found matching '*.in' under directory 'dlpack'\r\nwarning: no files found matching 'dlpack/LICENSE'\r\nwarning: no files found matching 'dlpack/CMakeLists.txt'\r\nwarning: no files found matching 'pybind11/README.md'\r\nwarning: no files found matching 'pybind11/CONTRIBUTING.md'\r\nadding license file 'LICENSE'\r\nwriting manifest file 'src/awkward.egg-info/SOURCES.txt'\r\n/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/command/build_py.py:202: SetuptoolsDeprecationWarning:     Installing 'awkward._connect.cuda.cuda_kernels' as data is deprecated, please list it in `packages`.\r\n    !!\r\n\r\n\r\n    ############################\r\n    # Package would be ignored #\r\n    ############################\r\n    Python recognizes 'awkward._connect.cuda.cuda_kernels' as an importable package,\r\n    but it is not listed in the `packages` configuration of setuptools.\r\n\r\n    'awkward._connect.cuda.cuda_kernels' has been automatically added to the distribution only\r\n    because it may contain data files, but this behavior is likely to change\r\n    in future versions of setuptools (and therefore is considered deprecated).\r\n\r\n    Please make sure that 'awkward._connect.cuda.cuda_kernels' is included as a package by using\r\n    the `packages` configuration field or the proper discovery methods\r\n    (for example by using `find_namespace_packages(...)`/`find_namespace:`\r\n    instead of `find_packages(...)`/`find:`).\r\n\r\n    You can read more about \"package discovery\" and \"data files\" on setuptools\r\n    documentation page.\r\n\r\n\r\n!!\r\n\r\n  check.warn(importable)\r\ncopying src/awkward/cpp-headers/awkward/BuilderOptions.h -> build/lib.linux-x86_64-cpython-310/awkward/cpp-headers/awkward\r\ncopying src/awkward/cpp-headers/awkward/GrowableBuffer.h -> build/lib.linux-x86_64-cpython-310/awkward/cpp-headers/awkward\r\ncopying src/awkward/cpp-headers/awkward/LayoutBuilder.h -> build/lib.linux-x86_64-cpython-310/awkward/cpp-headers/awkward\r\ncopying src/awkward/cpp-headers/awkward/utils.h -> build/lib.linux-x86_64-cpython-310/awkward/cpp-headers/awkward\r\ncopying src/awkward/cpp-headers/rdataframe/jagged_builders.h -> build/lib.linux-x86_64-cpython-310/awkward/cpp-headers/rdataframe\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_BitMaskedArray_to_ByteMaskedArray.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_BitMaskedArray_to_IndexedOptionArray.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ByteMaskedArray_getitem_carry.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ByteMaskedArray_getitem_nextcarry.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ByteMaskedArray_getitem_nextcarry_outindex.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ByteMaskedArray_mask.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ByteMaskedArray_overlay_mask.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ByteMaskedArray_reduce_next_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ByteMaskedArray_reduce_next_nonlocal_nextshifts_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ByteMaskedArray_toIndexedOptionArray.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_Content_getitem_next_missing_jagged_getmaskstartstop.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_Identities32_to_Identities64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_Identities_getitem_carry.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_Index_to_Index64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_fill_count.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_flatten_nextcarry.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_getitem_nextcarry.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_getitem_nextcarry_outindex.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_getitem_nextcarry_outindex_mask.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_mask.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_overlay_mask.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_reduce_next_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_reduce_next_fix_offsets_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_reduce_next_nonlocal_nextshifts_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_reduce_next_nonlocal_nextshifts_fromshifts_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_simplify.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedArray_validity.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_IndexedOptionArray_rpad_and_clip_mask_axis1.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ListArray_compact_offsets.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ListArray_getitem_jagged_expand.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ListArray_getitem_next_array.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ListArray_num.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ListArray_validity.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ListOffsetArray_compact_offsets.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ListOffsetArray_flatten_offsets.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ListOffsetArray_reduce_global_startstop_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ListOffsetArray_rpad_and_clip_axis1.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_ListOffsetArray_rpad_axis1.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_MaskedArray_getitem_next_jagged_project.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_contiguous_init.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_contiguous_next.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_fill_tobool.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_getitem_boolean_nonzero.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_getitem_next_array.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_getitem_next_array_advanced.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_getitem_next_at.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_getitem_next_range.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_getitem_next_range_advanced.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_reduce_adjust_starts_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_reduce_adjust_starts_shifts_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_NumpyArray_reduce_mask_ByteMaskedArray_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_broadcast_tooffsets.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_compact_offsets.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_getitem_carry.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_getitem_jagged_expand.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_getitem_next_array.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_getitem_next_array_advanced.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_getitem_next_at.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_getitem_next_range.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_getitem_next_range_spreadadvanced.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_localindex.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_RegularArray_num.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_UnionArray_fillna.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_UnionArray_project.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_UnionArray_validity.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_carry_arange.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_combinations.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_content_reduce_zeroparents_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_index_carry.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_index_carry_nocheck.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_index_rpad_and_clip_axis1.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_localindex.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_missing_repeat.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_new_Identities.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_argmax.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_argmax_bool_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_argmin.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_argmin_bool_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_count_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_countnonzero.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_max.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_min.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_prod_bool.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_sum.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_sum_bool.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_sum_int32_bool_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_reduce_sum_int64_bool_64.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_regularize_arrayslice.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/awkward_zero_mask.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\ncopying src/awkward/_connect/cuda/cuda_kernels/cuda_common.cu -> build/lib.linux-x86_64-cpython-310/awkward/_connect/cuda/cuda_kernels\r\nrunning build_ext\r\n-- CMake version 3.24.1\r\n-- CMAKE_BUILD_TYPE = Release\r\n-- pybind11 v2.10.0\r\n-- Found PythonInterp: /tmp/build-env-1op1zxh2/bin/python (found suitable version \"3.10.4\", minimum required is \"3.6\")\r\n-- Found PythonLibs: /usr/lib/x86_64-linux-gnu/libpython3.10.so\r\n-- Configuring done\r\nYou have changed variables that require your cache to be deleted.\r\nConfigure will be re-run and you may have to reset some variables.\r\nThe following variables have changed:\r\nCMAKE_CXX_COMPILER= /home/angus/.mambaforge/envs/awkward/bin/x86_64-conda-linux-gnu-c++\r\nCMAKE_CXX_COMPILER= /home/angus/.mambaforge/envs/awkward/bin/x86_64-conda-linux-gnu-c++\r\n\r\n-- The CXX compiler identification is GNU 9.4.0\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Check for working CXX compiler: /home/angus/.mambaforge/envs/awkward/bin/x86_64-conda-linux-gnu-c++ - skipped\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- CMake version 3.24.1\r\n-- CMAKE_BUILD_TYPE =\r\n-- Configuring done\r\n-- Generating done\r\nCMake Warning:\r\n  Manually-specified variables were not used by the project:\r\n\r\n    CMAKE_C_COMPILER_AR\r\n    CMAKE_C_COMPILER_RANLIB\r\n    EXAMPLE_VERSION_INFO\r\n\r\n\r\n-- Build files have been written to: /home/angus/Git/awkward/build/temp.linux-x86_64-cpython-310\r\n[  1%] Building CXX object CMakeFiles/test_1560-builder-options.dir/tests-cpp/test_1560-builder-options.cpp.o\r\n...\r\n[100%] Built target test_1542-array-builder\r\n-- Installing: /usr/local/lib/libawkward-static.a\r\nCMake Error at build/temp.linux-x86_64-cpython-310/cmake_install.cmake:56 (file):\r\n  file INSTALL cannot copy file\r\n  \"/home/angus/Git/awkward/build/temp.linux-x86_64-cpython-310/libawkward-static.a\"\r\n  to \"/usr/local/lib/libawkward-static.a\": Permission denied.\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/angus/.mambaforge/envs/awkward/lib/python3.10/site-packages/pep517/in_process/_in_process.py\", line 351, in <module>\r\n    main()\r\n  File \"/home/angus/.mambaforge/envs/awkward/lib/python3.10/site-packages/pep517/in_process/_in_process.py\", line 333, in main\r\n    json_out['return_val'] = hook(**hook_input['kwargs'])\r\n  File \"/home/angus/.mambaforge/envs/awkward/lib/python3.10/site-packages/pep517/in_process/_in_process.py\", line 249, in build_wheel\r\n    return _build_backend().build_wheel(wheel_directory, config_settings,\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/build_meta.py\", line 412, in build_wheel\r\n    return self._build_with_temp_dir(['bdist_wheel'], '.whl',\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/build_meta.py\", line 397, in _build_with_temp_dir\r\n    self.run_setup()\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/build_meta.py\", line 335, in run_setup\r\n    exec(code, locals())\r\n  File \"<string>\", line 289, in <module>\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/__init__.py\", line 87, in setup\r\n    return distutils.core.setup(**attrs)\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/core.py\", line 185, in setup\r\n    return run_commands(dist)\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/core.py\", line 201, in run_commands\r\n    dist.run_commands()\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/dist.py\", line 968, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/dist.py\", line 1217, in run_command\r\n    super().run_command(command)\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/dist.py\", line 987, in run_command\r\n    cmd_obj.run()\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/wheel/bdist_wheel.py\", line 299, in run\r\n    self.run_command('build')\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/cmd.py\", line 319, in run_command\r\n    self.distribution.run_command(command)\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/dist.py\", line 1217, in run_command\r\n    super().run_command(command)\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/dist.py\", line 987, in run_command\r\n    cmd_obj.run()\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/command/build.py\", line 132, in run\r\n    self.run_command(cmd_name)\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/cmd.py\", line 319, in run_command\r\n    self.distribution.run_command(command)\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/dist.py\", line 1217, in run_command\r\n    super().run_command(command)\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/dist.py\", line 987, in run_command\r\n    cmd_obj.run()\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/command/build_ext.py\", line 84, in run\r\n    _build_ext.run(self)\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/command/build_ext.py\", line 346, in run\r\n    self.build_extensions()\r\n  File \"<string>\", line 73, in build_extensions\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/command/build_ext.py\", line 466, in build_extensions\r\n    self._build_extensions_serial()\r\n  File \"/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/setuptools/_distutils/command/build_ext.py\", line 492, in _build_extensions_serial\r\n    self.build_extension(ext)\r\n  File \"<string>\", line 155, in build_extension\r\n  File \"/home/angus/.mambaforge/envs/awkward/lib/python3.10/subprocess.py\", line 369, in check_call\r\n    raise CalledProcessError(retcode, cmd)\r\nsubprocess.CalledProcessError: Command '['/tmp/build-env-1op1zxh2/lib/python3.10/site-packages/cmake/data/bin/cmake', '--install', 'build/temp.linux-x86_64-cpython-310', '--config', 'Release']' returned non-zero exit status 1.\r\n\r\nERROR Backend subproccess exited when trying to invoke build_wheel\r\n```\r\n\r\n</details>\r\n\r\nGiven that this doesn't fail if I disable build isolation, I suspect we're assuming something that the build isolation breaks. This probably won't be a hard fix.",
  "closed_at":"2024-01-20T09:51:17Z",
  "comments":2,
  "created_at":"2022-09-26T14:11:03Z",
  "id":1386154526,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Snwoe",
  "number":1728,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Building with `pyproject-build` tries to install into root directory",
  "updated_at":"2024-01-20T09:51:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nFor months, early adopters of v2 have been accessing it by\r\n\r\n```python\r\nimport awkward._v2 as ak\r\n```\r\n\r\nand now it has been merged into the main module with #1721, so\r\n\r\n```python\r\nimport awkward as ak\r\n```\r\n\r\nReferences to `awkward._v2` will now break, including those in Uproot, and it can be tricky to try to coordinate releases. Although the non-existence of `awkward._v2` is a good test of being 2.0.0 release-ready, coordinating breaking changes across packages is annoying.\r\n\r\nIt should be possible to add a submodule named `awkward._v2` that contains 100% of the symbols in the `awkward` module (object graphs are not trees), and doing so would provide backward compatibility for early adopters. In principle, it could stay there forever, or for a year or two, and as an underscored name, it's not guaranteed public API. We can tell users that they _should_ drop the \"`_v2`\" as soon as their build matrix only has new-enough versions of Awkward that it will work.\r\n\r\nBefore #1721, not all of the symbols that are now in `awkward` were in `awkward._v2`, such as `awkward.nplike` and `awkward._ext`, but having too many symbols wouldn't hurt backward compatibility, just too few.",
  "closed_at":"2022-09-26T16:02:26Z",
  "comments":3,
  "created_at":"2022-09-26T14:13:44Z",
  "id":1386158811,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Snxrb",
  "number":1729,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add a thin `awkward._v2` \u2192 `awkward` alias",
  "updated_at":"2022-09-28T16:26:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski how do you feel about adding a warning in the future that this is deprecated?",
  "closed_at":"2022-09-26T16:01:30Z",
  "comments":2,
  "created_at":"2022-09-26T14:25:16Z",
  "draft":false,
  "id":1386177818,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_nKiE",
  "number":1730,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-26T16:01:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: add _v2 proxy module",
  "updated_at":"2022-09-26T16:01:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is a tiny refactor to replace a custom `Behavior` type with a stdlib `ChainMap`, courtesy of a helper function.",
  "closed_at":"2022-09-26T19:03:00Z",
  "comments":1,
  "created_at":"2022-09-26T17:01:35Z",
  "draft":false,
  "id":1386425846,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_oAdQ",
  "number":1731,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-26T19:03:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: replace Behavior with collections.ChainMap",
  "updated_at":"2022-09-26T19:03:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"A small PR to add partial type-hints to `awkward.contents.content`. This isn't expected to be perfect or even comprehensive; there are some types that I've left ambiguous because it's not immediately clear what they should be. The idea would be that we start tightening these hints once enough of the internals are typed that we can use `pyright` or `mypy`.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-refactor-add-type-hints/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-28T23:24:27Z",
  "comments":18,
  "created_at":"2022-09-26T20:26:30Z",
  "draft":false,
  "id":1386676877,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_o3AG",
  "number":1732,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-28T23:24:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: add type hints",
  "updated_at":"2022-10-28T23:25:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/pyupgrade: v2.38.0 \u2192 v2.38.2](https://github.com/asottile/pyupgrade/compare/v2.38.0...v2.38.2)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-10-03T16:31:28Z",
  "comments":1,
  "created_at":"2022-09-26T21:45:44Z",
  "draft":false,
  "id":1386765144,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_pKfb",
  "number":1733,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-03T16:31:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-10-03T16:31:29Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR updates the new docs to work in v2-only main:\r\n- [x] Replace Markdown links to API-reference with Sphinx directives\r\n- [x] Replace v1 code with v2\r\n   - [x] Normalise `tolist` vs `to_list`\r\n- [x] Fix download of WASM wheel on RTD  \r\n- [x] Removes irrelevant v1 docs\r\n- [x] Add PyPI icon\r\n- [x] Change copyright to \"Awkward Array development team\"\r\n- [x] Use GH releases for release notes\r\n- [x] Make contributing guide point to CONTRIBUTING.md\r\n- [x] Cleanup front-page cards\r\n- [ ] Restore API reference ordering\r\n   - [ ] Remove duplication on index by having subcategories in ToC?\r\n- [ ] Mention records and unions in \"what is an Awkward Array\"\r\n- [ ] Move \"Differentiation with JAX\" to specialised group?\r\n- [ ] Add Conda (Forge) icon\r\n- [ ] Address https://github.com/scikit-hep/awkward/pull/1734#issuecomment-1273813025\r\n\r\nCloses #1424 ",
  "closed_at":"2022-10-10T20:45:49Z",
  "comments":10,
  "created_at":"2022-09-27T09:41:30Z",
  "draft":false,
  "id":1387447606,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_rcGl",
  "number":1734,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-10T20:45:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: update for v2",
  "updated_at":"2022-10-10T21:02:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n## V2\r\n```python\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> np_array = np.ma.MaskedArray([[1, 2, 3], [4, 5, 6]], mask=[[False, True, False], [True, True, False]])\r\n>>> ak_array = ak.from_numpy(np_array)\r\n>>> ak.to_numpy(ak_array, allow_missing=False)\r\narray([[1, 2, 3],\r\n       [4, 5, 6]])\r\n```\r\n\r\n## V1\r\n```python\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> np_array = np.ma.MaskedArray([[1, 2, 3], [4, 5, 6]], mask=[[False, True, False], [True, True, False]])\r\n>>> ak_array = ak.from_numpy(np_array)\r\n>>> ak.to_numpy(ak_array, allow_missing=False)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In [1], line 5\r\n      3 np_array = np.ma.MaskedArray([[1, 2, 3], [4, 5, 6]], mask=[[False, True, False], [True, True, False]])\r\n      4 ak_array = ak.from_numpy(np_array)\r\n----> 5 ak.to_numpy(ak_array, allow_missing=False)\r\n\r\nFile /tmp/tmp.FBCxvkBC4Y/.direnv/python-3.10.4/lib/python3.10/site-packages/awkward/operations/convert.py:196, in to_numpy(array, allow_missing)\r\n    193     return array\r\n    195 elif isinstance(array, ak.highlevel.Array):\r\n--> 196     return to_numpy(array.layout, allow_missing=allow_missing)\r\n    198 elif isinstance(array, ak.highlevel.Record):\r\n    199     out = array.layout\r\n\r\nFile /tmp/tmp.FBCxvkBC4Y/.direnv/python-3.10.4/lib/python3.10/site-packages/awkward/operations/convert.py:315, in to_numpy(array, allow_missing)\r\n    312             return content\r\n    314 elif isinstance(array, ak.layout.RegularArray):\r\n--> 315     out = to_numpy(array.content, allow_missing=allow_missing)\r\n    316     head, tail = out.shape[0], out.shape[1:]\r\n    317     if array.size == 0:\r\n\r\nFile /tmp/tmp.FBCxvkBC4Y/.direnv/python-3.10.4/lib/python3.10/site-packages/awkward/operations/convert.py:302, in to_numpy(array, allow_missing)\r\n    300         return numpy.ma.MaskedArray(data, mask)\r\n    301     else:\r\n--> 302         raise ValueError(\r\n    303             \"ak.to_numpy cannot convert 'None' values to \"\r\n    304             \"np.ma.MaskedArray unless the \"\r\n    305             \"'allow_missing' parameter is set to True\"\r\n    306             + ak._util.exception_suffix(__file__)\r\n    307         )\r\n    308 else:\r\n    309     if allow_missing:\r\n\r\nValueError: ak.to_numpy cannot convert 'None' values to np.ma.MaskedArray unless the 'allow_missing' parameter is set to True\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.10.1/src/awkward/operations/convert.py#L306)\r\n```",
  "closed_at":"2022-10-10T15:51:26Z",
  "comments":0,
  "created_at":"2022-09-27T10:30:38Z",
  "id":1387516255,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Ss9Ff",
  "number":1735,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.from_numpy()` doesn't handle masked arrays",
  "updated_at":"2022-10-10T15:51:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Within the awkward codebase, we have a few places where we're using the global `ak.` module instead of importing the name / module directly with `import`. This has some ramifications for import ordering (harder to visualise), and couples our internal API usage to our public (of sorts) API. \r\n\r\nThis issue tracks the work to remove the small (<100) number of `ak.` usages in the core codebase.",
  "closed_at":null,
  "comments":0,
  "created_at":"2022-09-27T12:42:42Z",
  "id":1387697718,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5StpY2",
  "number":1736,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":"reopened",
  "title":"Make internal imports explicit",
  "updated_at":"2023-07-02T18:04:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nThe `Form` class and `Content` class are highly related. Currently, the `Content` classes effectively use the `Form` class as a mixin, albeit via an indirect lookup:\r\n\r\n```python\r\nclass Content:\r\n    ...\r\n    \r\n    @property\r\n    def purelist_isregular(self) -> bool:\r\n        return self.Form.purelist_isregular.__get__(self)\r\n```\r\n\r\nThe `Form` and `Content` classes look very similar; they share a common set of attributes, in addition to similarly-named attributes that have different types.\r\n\r\nIt would be better (and slightly faster, although this is not a performance argument) if we implemented this as a true mixin class, e.g `FormLike` or `FormMixin`. Not only do we get rid of a set of indirect calls via `@property` decorators, we also decouple the forms from the contents through a third class.\r\n\r\nAlthough composition is an option here - i.e. introducing a `Metadata` class that is owned by both `Form` and `Content`, it would probably complicate things more than help, as all three classes would need to set-up a tree structure. With mixins, we only need two classes to do this (`Form`, `Content`).",
  "closed_at":"2023-11-20T22:28:12Z",
  "comments":3,
  "created_at":"2022-09-27T13:58:59Z",
  "id":1387819383,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5SuHF3",
  "number":1738,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Refactor form-content overlap",
  "updated_at":"2023-11-20T22:28:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is popped up during CUDA testing: `ak.contents.Record` is in `ak.record.Record`",
  "closed_at":"2022-09-27T18:12:23Z",
  "comments":5,
  "created_at":"2022-09-27T16:06:55Z",
  "draft":false,
  "id":1388011043,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_tUO2",
  "number":1739,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-27T18:12:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: Record is not in contents, but in record",
  "updated_at":"2022-09-27T19:45:22Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.10.0 to 2.10.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.10.2</h2>\n<ul>\n<li>\ud83d\udc1b Fix a bug that caused <code>win32</code> identifiers to fail when used with <code>--only</code>. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1282\">#1282</a>)</li>\n<li>\ud83d\udc1b Fix computation of <code>auto</code>/<code>auto64</code>/<code>auto32</code> archs when targeting a different platform to the one that you're running cibuildwheel on. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1266\">#1266</a>)</li>\n<li>\ud83d\udcda Fix an mistake in the 'how it works' diagram. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1274\">#1274</a>)</li>\n</ul>\n<h2>v2.10.1</h2>\n<ul>\n<li>\ud83d\udc1b Fix a bug that stopped environment variables specified in TOML from being expanded. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1273\">#1273</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.10.2</h3>\n<p><em>25 September 2022</em></p>\n<ul>\n<li>\ud83d\udc1b Fix a bug that caused <code>win32</code> identifiers to fail when used with <code>--only</code>. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1282\">#1282</a>)</li>\n<li>\ud83d\udc1b Fix computation of <code>auto</code>/<code>auto64</code>/<code>auto32</code> archs when targeting a different platform to the one that you're running cibuildwheel on. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1266\">#1266</a>)</li>\n<li>\ud83d\udcda Fix an mistake in the 'how it works' diagram. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1274\">#1274</a>)</li>\n</ul>\n<h3>v2.10.1</h3>\n<p><em>18 September 2022</em></p>\n<ul>\n<li>\ud83d\udc1b Fix a bug that stopped environment variables specified in TOML from being expanded. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1273\">#1273</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/7c45799919d2dcd7ac59433924d763dd24d97483\"><code>7c45799</code></a> Bump version: v2.10.2</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/f7669045f52f7ffc85ff6a3534b61ea90c00ad1b\"><code>f766904</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1258\">#1258</a> from henryiii/henryiii/chore/dev</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/73a435b9f62a6d00938e8974df4a4848a76b5b28\"><code>73a435b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1266\">#1266</a> from henryiii/henryiii/fix/crossplatform</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/8b0aa9b9e5f4ae4c907ddb4ba6d9d28013859a67\"><code>8b0aa9b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1282\">#1282</a> from pypa/fix-1281</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/6b0e1bc2c497fa59751a1f7067781c3dec4e9daa\"><code>6b0e1bc</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1274\">#1274</a> from pypa/diagram-fix</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/5e5fdd1b9af009f947cc59b3323b6d202cc6c7ca\"><code>5e5fdd1</code></a> Fix win32 identifiers with --only</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/1e3f3fdce78dcc22ea6dd7a7438ce18b4b68e02c\"><code>1e3f3fd</code></a> Add failing test</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/faa3ab4c2a51e2cee9c4cd2112e0ddb8fe4707ec\"><code>faa3ab4</code></a> Refactor a little to minimise changes and clarify naming</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/7969f7c79478a9700bfd462e71e9e0b1fd61a892\"><code>7969f7c</code></a> [Bot] Update dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1275\">#1275</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/44476182345821540d46a1bdf299c5f420ee3dc8\"><code>4447618</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1276\">#1276</a> from pypa/pre-commit-ci-update-config</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.10.0...v2.10.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.10.0&new-version=2.10.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-09-27T19:09:09Z",
  "comments":1,
  "created_at":"2022-09-27T17:28:03Z",
  "draft":false,
  "id":1388115521,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_tqhG",
  "number":1740,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-27T19:09:09Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: bump pypa/cibuildwheel from 2.10.0 to 2.10.2",
  "updated_at":"2022-09-27T19:09:10Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":">> I'd say really `awkward.nplike` should be `awkward.nplikes`, as it contains many (just as we have `awkward.contents`).\r\n>\r\n>That's a good argument, and I wouldn't mind if `awkward.nplike` became `awkward.nplikes`, in line with `awkward.contents`, `awkward.forms`, and `awkward.types` (which were all plural for the purpose of consistency).\r\n\r\n_Originally posted by @jpivarski in https://github.com/scikit-hep/awkward/issues/1732#issuecomment-1259979433_\r\n      ",
  "closed_at":"2022-09-28T19:34:42Z",
  "comments":0,
  "created_at":"2022-09-27T20:31:12Z",
  "id":1388340239,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5SwGQP",
  "number":1741,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Rename `ak.nplike` into `ak.nplikes`",
  "updated_at":"2022-09-28T19:34:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n'2.0.0rc1'\n\n### Description and code to reproduce\n\nTo reproduce:\r\n`python localbuild.py --pytest tests-cuda`\r\n\r\nThere are 5 failing tests:\r\n```python\r\n_________________________________________________________ test_cupy_interop __________________________________________________________\r\n\r\n    def test_cupy_interop():\r\n        c = cp.arange(10)\r\n        n = np.arange(10)\r\n>       cupy_index_arr = ak.index.Index64(c)\r\n\r\nc          = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\nn          = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n\r\ntests-cuda/test_1276-cupy-interop.py:13: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nawkward/index.py:28: in __init__\r\n    self._data = self._nplike.index_nplike.asarray(\r\n        data       = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n        metadata   = None\r\n        nplike     = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n        self       = <[AttributeError(\"'Index64' object has no attribute '_data'\") raised in repr()] Index64 object at 0x7f9c345d4970>\r\nawkward/nplike.py:98: in asarray\r\n    return self._module.asarray(*args, **kwargs)\r\n        args       = (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),)\r\n        kwargs     = {'dtype': dtype('int64'), 'order': 'C'}\r\n        self       = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   TypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\r\n\r\n\r\ncupy/_core/core.pyx:1473: TypeError\r\n___________________________________________________________ test_from_cupy ___________________________________________________________\r\n\r\n    def test_from_cupy():\r\n        cupy_array_1d = cp.arange(10)\r\n        cupy_array_2d = cp.array([[1.1, 2.2], [3.3, 4.4], [5.5, 6.6], [7.7, 8.8]])\r\n    \r\n>       ak_cupy_array_1d = ak.from_cupy(cupy_array_1d)\r\n\r\ncupy_array_1d = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\ncupy_array_2d = array([[1.1, 2.2],\r\n       [3.3, 4.4],\r\n       [5.5, 6.6],\r\n       [7.7, 8.8]])\r\n\r\ntests-cuda/test_1276-from-cupy.py:14: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nawkward/operations/ak_from_cupy.py:39: in from_cupy\r\n    return ak._util.from_arraylib(array, regulararray, False, highlevel, behavior)\r\n        array      = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n        behavior   = None\r\n        highlevel  = True\r\n        regulararray = False\r\nawkward/_util.py:1014: in from_arraylib\r\n    layout = recurse(array, mask)\r\n        array      = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n        behavior   = None\r\n        highlevel  = True\r\n        mask       = None\r\n        np         = <awkward.nplike.NumpyMetadata object at 0x7f9c34b11900>\r\n        numpy      = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n        recordarray = False\r\n        recurse    = <function from_arraylib.<locals>.recurse at 0x7f9c2c936200>\r\n        regulararray = False\r\nawkward/_util.py:975: in recurse\r\n    data = ak.contents.NumpyArray(array)\r\n        array      = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n        mask       = None\r\n        np         = <awkward.nplike.NumpyMetadata object at 0x7f9c34b11900>\r\n        numpy      = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n        recurse    = <function from_arraylib.<locals>.recurse at 0x7f9c2c936200>\r\n        regulararray = False\r\nawkward/contents/numpyarray.py:46: in __init__\r\n    self._data = nplike.asarray(data)\r\n        data       = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n        identifier = None\r\n        nplike     = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n        parameters = None\r\n        self       = <[AttributeError(\"'NumpyArray' object has no attribute '_data'\") raised in repr()] NumpyArray object at 0x7f9c347cc220>\r\nawkward/nplike.py:98: in asarray\r\n    return self._module.asarray(*args, **kwargs)\r\n        args       = (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),)\r\n        kwargs     = {}\r\n        self       = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   TypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\r\n\r\n\r\ncupy/_core/core.pyx:1473: TypeError\r\n_______________________________________________________ test_from_cupy_tolist ________________________________________________________\r\n\r\n    def test_from_cupy_tolist():\r\n        cupy_array_1d = cp.array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\r\n    \r\n>       ak_cupy_array_1d = ak.from_cupy(cupy_array_1d)\r\n\r\ncupy_array_1d = array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\r\n\r\ntests-cuda/test_1276-from-cupy.py:28: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nawkward/operations/ak_from_cupy.py:39: in from_cupy\r\n    return ak._util.from_arraylib(array, regulararray, False, highlevel, behavior)\r\n        array      = array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\r\n        behavior   = None\r\n        highlevel  = True\r\n        regulararray = False\r\nawkward/_util.py:1014: in from_arraylib\r\n    layout = recurse(array, mask)\r\n        array      = array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\r\n        behavior   = None\r\n        highlevel  = True\r\n        mask       = None\r\n        np         = <awkward.nplike.NumpyMetadata object at 0x7f9c34b11900>\r\n        numpy      = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n        recordarray = False\r\n        recurse    = <function from_arraylib.<locals>.recurse at 0x7f9c2c937520>\r\n        regulararray = False\r\nawkward/_util.py:975: in recurse\r\n    data = ak.contents.NumpyArray(array)\r\n        array      = array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\r\n        mask       = None\r\n        np         = <awkward.nplike.NumpyMetadata object at 0x7f9c34b11900>\r\n        numpy      = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n        recurse    = <function from_arraylib.<locals>.recurse at 0x7f9c2c937520>\r\n        regulararray = False\r\nawkward/contents/numpyarray.py:46: in __init__\r\n    self._data = nplike.asarray(data)\r\n        data       = array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\r\n        identifier = None\r\n        nplike     = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n        parameters = None\r\n        self       = <[AttributeError(\"'NumpyArray' object has no attribute '_data'\") raised in repr()] NumpyArray object at 0x7f9c347cd7b0>\r\nawkward/nplike.py:98: in asarray\r\n    return self._module.asarray(*args, **kwargs)\r\n        args       = (array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]),)\r\n        kwargs     = {}\r\n        self       = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   TypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\r\n\r\n\r\ncupy/_core/core.pyx:1473: TypeError\r\n____________________________________________________ test_NumpyArray_constructor _____________________________________________________\r\n\r\n    def test_NumpyArray_constructor():\r\n        assert ak.backend(ak.contents.NumpyArray(np.array([1, 2, 3]))) == \"cpu\"\r\n>       assert ak.backend(ak.contents.NumpyArray(cp.array([1, 2, 3]))) == \"cuda\"\r\n\r\n\r\ntests-cuda/test_1276-from-cupy.py:35: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nawkward/contents/numpyarray.py:46: in __init__\r\n    self._data = nplike.asarray(data)\r\n        data       = array([1, 2, 3])\r\n        identifier = None\r\n        nplike     = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n        parameters = None\r\n        self       = <[AttributeError(\"'NumpyArray' object has no attribute '_data'\") raised in repr()] NumpyArray object at 0x7f9c347ce290>\r\nawkward/nplike.py:98: in asarray\r\n    return self._module.asarray(*args, **kwargs)\r\n        args       = (array([1, 2, 3]),)\r\n        kwargs     = {}\r\n        self       = <awkward.nplike.Numpy object at 0x7f9c3479dba0>\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   TypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\r\n\r\n\r\ncupy/_core/core.pyx:1473: TypeError\r\n_____________________________________________________________ test_add_2 _____________________________________________________________\r\n\r\n    def test_add_2():\r\n        one = ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]], backend=\"cuda\")\r\n        two = 100\r\n>       assert ak.backend(one) == \"cuda\"\r\n\r\none        = <[TypeError('slice indices must be integers or None or have an __index__ method') raised in repr()] Array object at 0x7f9c345f5180>\r\ntwo        = 100\r\n\r\ntests-cuda/test_1276-from-cupy.py:54: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nawkward/operations/ak_backend.py:35: in backend\r\n    with ak._util.OperationErrorContext(\r\n        arrays     = <[TypeError('slice indices must be integers or None or have an __index__ method') raised in repr()] tuple object at 0x7f9c347b2770>\r\nawkward/_util.py:224: in __init__\r\n    string_arguments[key] = self.format_argument(width, value)\r\n        __class__  = <class 'awkward._util.OperationErrorContext'>\r\n        arguments  = <[TypeError('slice indices must be integers or None or have an __index__ method') raised in repr()] dict object at 0x7f9c345e8640>\r\n        key        = '*arrays'\r\n        name       = 'ak.backend'\r\n        self       = <awkward._util.OperationErrorContext object at 0x7f9c345f4e80>\r\n        string_arguments = {}\r\n        value      = <[TypeError('slice indices must be integers or None or have an __index__ method') raised in repr()] tuple object at 0x7f9c347b2770>\r\n        width      = 62\r\nawkward/_util.py:205: in format_argument\r\n    valuestr = repr(value)\r\n        self       = <awkward._util.OperationErrorContext object at 0x7f9c345f4e80>\r\n        value      = <[TypeError('slice indices must be integers or None or have an __index__ method') raised in repr()] tuple object at 0x7f9c347b2770>\r\n        valuestr   = None\r\n        width      = 62\r\nawkward/highlevel.py:1166: in __repr__\r\n    return self._repr(80)\r\n        self       = <[TypeError('slice indices must be integers or None or have an __index__ method') raised in repr()] Array object at 0x7f9c345f5180>\r\nawkward/highlevel.py:1190: in _repr\r\n    valuestr = \" \" + awkward._prettyprint.valuestr(self, 1, strwidth)\r\n        __class__  = <class 'awkward.highlevel.Array'>\r\n        awkward    = <module 'awkward' from '/eos/home-y/yana/Projects/Numba.20.09.2022/numba/Awkward/awkward/awkward/__init__.py'>\r\n        limit_cols = 80\r\n        pytype     = 'Array'\r\n        self       = <[TypeError('slice indices must be integers or None or have an __index__ method') raised in repr()] Array object at 0x7f9c345f5180>\r\n        strwidth   = 47\r\n        typestr    = '3 * var * float64'\r\nawkward/_prettyprint.py:209: in valuestr\r\n    _, strs = valuestr_horiz(data, limit_cols)\r\n        data       = <[TypeError('slice indices must be integers or None or have an __index__ method') raised in repr()] Array object at 0x7f9c345f5180>\r\n        limit_cols = 47\r\n        limit_rows = 1\r\nawkward/_prettyprint.py:87: in valuestr_horiz\r\n    current = get_at(data, index)\r\n        back       = [']']\r\n        data       = <[TypeError('slice indices must be integers or None or have an __index__ method') raised in repr()] Array object at 0x7f9c345f5180>\r\n        forward    = True\r\n        front      = ['[']\r\n        index      = 0\r\n        limit_cols = 40\r\n        original_limit_cols = 47\r\n        which      = 0\r\nawkward/_prettyprint.py:42: in get_at\r\n    out = data._layout._getitem_at(index)\r\n        data       = <[TypeError('slice indices must be integers or None or have an __index__ method') raised in repr()] Array object at 0x7f9c345f5180>\r\n        index      = 0\r\nawkward/contents/listoffsetarray.py:227: in _getitem_at\r\n    return self._content._getitem_range(slice(start, stop))\r\n        self       = <ListOffsetArray len='3'>\r\n    <offsets><Index dtype='int64' len='4'>\r\n        [0 3 3 5]\r\n    </Index></offsets>\r\n    <content><NumpyArray dtype='float64' len='5'>[1.1 2.2 3.3 4.4 5.5]</NumpyArray></content>\r\n</ListOffsetArray>\r\n        start      = array(0)\r\n        stop       = array(3)\r\n        where      = 0\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <NumpyArray dtype='float64' len='5'>[1.1 2.2 3.3 4.4 5.5]</NumpyArray>, where = slice(array(0), array(3), None)\r\n\r\n    def _getitem_range(self, where):\r\n        if not self._nplike.known_shape:\r\n            return self\r\n    \r\n>       start, stop, step = where.indices(self.length)\r\nE       TypeError: slice indices must be integers or None or have an __index__ method\r\n\r\nself       = <NumpyArray dtype='float64' len='5'>[1.1 2.2 3.3 4.4 5.5]</NumpyArray>\r\nwhere      = slice(array(0), array(3), None)\r\n\r\nawkward/contents/numpyarray.py:233: TypeError\r\n\r\n```\r\n",
  "closed_at":"2022-09-28T20:55:33Z",
  "comments":5,
  "created_at":"2022-09-28T09:27:13Z",
  "id":1389031338,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Syu-q",
  "number":1742,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"CUDA backend broken",
  "updated_at":"2022-09-28T20:55:34Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"`ak.nplike.of` was not correctly identifying CuPy arrays, because it was testing `cls.__module__.startswith(\"cupy.\")` instead of `cls.__module__.startswith(\"cupy\")`. I've made this logic more robust by first partitioning the string by the first `.`.\r\n\r\nFixes #1742 ",
  "closed_at":"2022-09-28T20:55:33Z",
  "comments":4,
  "created_at":"2022-09-28T10:02:54Z",
  "draft":false,
  "id":1389083033,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_w5o6",
  "number":1743,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-28T20:55:33Z"
  },
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"fix: don't assume trailing `.` for module name in `is_XXX_buffer`",
  "updated_at":"2022-09-28T20:55:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"## Changes\r\n1. Rename `ak.nplike` to `ak.nplikes`\r\n2. Rename `ak.nplikes.of` to `ak.nplikes.nplike_of`\r\n\r\n## Motivation\r\nIn type-hinting situations, it would give us more flexability to be able to import `ak.nplikes` as `nplikes`. Currently, the `nplike` module name would clash with local-scoped `nplike` variables. This is easy to work around - just use `from awkward import nplike as nplikes`, however we'll be doing that a lot, so let's just clean this up now.\r\n\r\nFurthermore, should we wish to import `nplike.of` as a free-standing function, the same applies. `nplike_for` is a more descriptive name than `nplike.of`, even though the latter is pretty snazzy.\r\n\r\nCloses #1741",
  "closed_at":"2022-09-28T19:34:41Z",
  "comments":1,
  "created_at":"2022-09-28T10:19:23Z",
  "draft":false,
  "id":1389106188,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_w-qi",
  "number":1744,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-28T19:34:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: rename `ak.nplike` \u2192 `ak.nplikes` & `nplikes.of` \u2192`nplikes.nplike_of`",
  "updated_at":"2022-09-29T08:17:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nI've been noticing recently that Codecov estimates in changed coverage do not correspond to what's actually happening in the PR; namely, PRs that add no tests (e.g. those which add documentation or rename variables) still increase test coverage. \r\n\r\nIt turns out, Codecov uses the commit history to find the base with uploaded coverage metadata. Because we use \"squash and merge\", and don't run any Codecov jobs in `main`, Codecov always finds an old commit (e.g. e6929460415d240f2e3aa5d3188a6bb02908094e) to use as the base. Our `build-test` workflow has a schedule, so Codecov is only ever at-most 1 month out of date. In the below figure, you can see that each new branch never finds a codecov commit until the first commit which has the `codecov` tag \r\n\r\n```mermaid\r\ngitGraph\r\n       commit tag: \"codecov\"\r\n       commit\r\n       branch feat-add-x\r\n       checkout feat-add-x\r\n       commit\r\n       commit\r\n       commit tag: \"codecov\"\r\n       checkout main\r\n       merge feat-add-x  tag: \"no-codecov\"\r\n       branch feat-add-y\r\n       checkout feat-add-y\r\n       commit\r\n       commit\r\n       commit tag: \"codecov\"\r\n       checkout main\r\n       merge feat-add-y  tag: \"no-codecov\"\r\n```\r\n\r\nThe simplest solution here is to run a special CI job upon the closure of a PR that uploads the codecov metadata: https://community.codecov.com/t/unable-to-determine-a-parent-commit-to-compare-against-in-base-branch-after-squash-and-merge/2480/20\r\nHowever, my initial concern is that unless we also _require_ PRs to be up-to-date before merging, the merge would happen _after_ the CI had run Codecov, which could lead to out-of-sync coverage estimates.\r\n\r\nA better solution might just be to run the build-test workflow for commits to main. \r\n",
  "closed_at":"2022-10-03T16:30:06Z",
  "comments":3,
  "created_at":"2022-09-28T10:56:00Z",
  "id":1389154036,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5SzM70",
  "number":1745,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Codecov isn't finding the correct `base` with \"squash and merge\"",
  "updated_at":"2022-10-03T16:30:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Backport of #1743 for main-v1",
  "closed_at":"2022-09-28T21:02:15Z",
  "comments":1,
  "created_at":"2022-09-28T11:28:40Z",
  "draft":false,
  "id":1389194291,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_xR1t",
  "number":1746,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-28T21:02:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: don't assume trailing `.` for module name in `is_XXX_buffer` (backport)",
  "updated_at":"2022-09-28T21:02:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.10.0\n\n### Description and code to reproduce\n\nUsing data from http://s3.amazonaws.com/datashader-data/nyc_buildings.parq.zip and the following code\r\n```python\r\nimport awkward._v2 as ak\r\nak.from_parquet(\"/home/data/hv/nyc_buildings.parq\")\r\n```\r\nworks fine with awkward 1.9.0 but not 1.10.0 onwards, giving this error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/iant/.venv/awk/lib/python3.10/site-packages/awkward/_v2/operations/ak_from_parquet.py\", line 74, in from_parquet\r\n    return _load(\r\n  File \"/home/iant/.venv/awk/lib/python3.10/site-packages/awkward/_v2/operations/ak_from_parquet.py\", line 250, in _load\r\n    return ak._v2.operations.ak_concatenate._impl(\r\n  File \"/home/iant/.venv/awk/lib/python3.10/site-packages/awkward/_v2/operations/ak_concatenate.py\", line 121, in _impl\r\n    out = batch[0].mergemany(batch[1:])\r\n  File \"/home/iant/.venv/awk/lib/python3.10/site-packages/awkward/_v2/contents/recordarray.py\", line 668, in mergemany\r\n    merged = forfield[0].mergemany(forfield[1:])\r\n  File \"/home/iant/.venv/awk/lib/python3.10/site-packages/awkward/_v2/contents/bytemaskedarray.py\", line 669, in mergemany\r\n    return ByteMaskedArray(\r\n  File \"/home/iant/.venv/awk/lib/python3.10/site-packages/awkward/_v2/contents/bytemaskedarray.py\", line 80, in __init__\r\n    raise ak._v2._util.error(\r\nValueError: while calling (from <stdin>, line 1)\r\n\r\n    ak._v2.from_parquet(\r\n        path = '/home/data/hv/nyc_buildings.parq'\r\n        columns = None\r\n        row_groups = None\r\n        storage_options = None\r\n        max_gap = 64000\r\n        max_block = 256000000\r\n        footer_sample_size = 1000000\r\n        generate_bitmasks = False\r\n        highlevel = True\r\n        behavior = None\r\n    )\r\n\r\nError details: ByteMaskedArray len(mask) (1157859) must be <= len(content) (1007927)\r\n```\r\nData file was created using `spatialpandas` and `pyarrow` quite a long time ago.\r\n\r\nInstalled packages:\r\n```\r\n$ pip list\r\nPackage    Version\r\n---------- --------\r\nawkward    1.10.0\r\nfsspec     2022.8.2\r\nnumpy      1.23.3\r\npackaging  21.3\r\npip        22.0.2\r\npyarrow    9.0.0\r\npyparsing  3.0.9\r\nsetuptools 59.6.0\r\n```\r\nIf I then\r\n```\r\n$ pip uninstall awkward\r\n$ pip install awkward==1.9.0\r\n```\r\nit works fine.",
  "closed_at":"2022-09-28T20:00:15Z",
  "comments":8,
  "created_at":"2022-09-28T14:32:56Z",
  "id":1389474314,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5S0bIK",
  "number":1747,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Regression: reading parquet file leads to ByteMaskedArray length error",
  "updated_at":"2022-09-29T13:52:48Z",
  "user":"MDQ6VXNlcjU4MDMyNg=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is a preparatory PR to clean-up `ak.forms.Form`. It does two things:\r\n\r\n- Remove dead code.\r\n- Rename  `tolist`, `from_iter` to `to_dict`, `from_dict`\r\n\r\n@jpivarski we still need `simplify_optiontype` as it is used in the Arrow deserialisation.",
  "closed_at":"2022-09-29T16:42:53Z",
  "comments":4,
  "created_at":"2022-09-28T15:10:57Z",
  "draft":false,
  "id":1389534605,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_ybrB",
  "number":1748,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-29T16:42:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: drop unused code from Form, rename serialisation methods",
  "updated_at":"2022-09-29T16:42:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1747",
  "closed_at":"2022-09-28T20:00:14Z",
  "comments":1,
  "created_at":"2022-09-28T19:16:51Z",
  "draft":false,
  "id":1389834877,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_zbhG",
  "number":1749,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-28T20:00:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: use proper lengths in `ByteMaskedArray.mergemany`",
  "updated_at":"2022-09-28T20:00:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1747 for v1-main",
  "closed_at":"2022-09-29T13:48:56Z",
  "comments":1,
  "created_at":"2022-09-28T20:01:49Z",
  "draft":false,
  "id":1389883046,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_zlyM",
  "number":1750,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-29T13:48:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: use proper lengths in `ByteMaskedArray.mergemany` (backport)",
  "updated_at":"2022-09-29T13:48:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR enables `build-test.yml` and `tests.yml` for each commit to main. This addresses two problems:\r\n1. main is currently only tested every ~30 days\r\n2. Codecov doesn't find coverage data newer than every ~30 days\r\n\r\nThis is the \"obvious\" way to tackle both of these problems, but it is not necessarily the nicest for the environment.\r\n\r\nSo, there are other ways of tackling this:\r\n- Run a special `codecov` workflow for each commit to main. Only run `build-test.yml` and `tests.yml` at a reduced frequency, e.g once every couple of days.\r\n- Run a special `codecov` workflow for each commit to main. Also, run `tests.yml` for each commit to main.\r\n- etc.\r\n\r\n@jpivarski do you have a preference here?\r\n\r\nFixes #1745 ",
  "closed_at":"2022-10-03T16:30:05Z",
  "comments":3,
  "created_at":"2022-09-29T06:09:35Z",
  "draft":false,
  "id":1390308709,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_0_c8",
  "number":1751,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-03T16:30:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: run Codecov for commits to main",
  "updated_at":"2022-10-03T16:30:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"`ak._util` has become something of a catch-all module. Besides making `_util` quite large, this also means that `_util` depends on many Awkward modules, which in turn depend upon `_util`. Currently, we resolve this by using the module object, which can break import cycles. However, this can be improved.\r\n\r\nThis PR splits out the error-handling code into an `_errors` private module. \r\n\r\nThere is more work that can be done here, but to keep this PR small and mergeable, we can do that in another PR.",
  "closed_at":"2022-09-29T14:38:50Z",
  "comments":2,
  "created_at":"2022-09-29T08:08:25Z",
  "draft":false,
  "id":1390440723,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_1bEK",
  "number":1752,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-29T14:38:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: split error-handling code from `_util`",
  "updated_at":"2022-09-29T14:55:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nWe should be asking for `\"awkward_IndexedArray_fill_count\"` instead of `\"awkward_IndexedArray_fill_to64_count\"`.\r\n",
  "closed_at":"2022-09-29T12:20:32Z",
  "comments":0,
  "created_at":"2022-09-29T10:19:06Z",
  "id":1390623630,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5S4zuO",
  "number":1753,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`IndexedArray` looks for kernel with wrong name",
  "updated_at":"2022-09-29T12:20:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1753\r\n\r\n- Corrects kernel name\r\n- Corrects index handling logic\r\n",
  "closed_at":"2022-09-29T12:20:31Z",
  "comments":1,
  "created_at":"2022-09-29T10:44:19Z",
  "draft":false,
  "id":1390655121,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_2H2V",
  "number":1754,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-29T12:20:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: kernel name in `IndexedArray`",
  "updated_at":"2022-09-29T12:20:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR goes towards fixing #1041, but requires some policy decisions about parameters. Originally, it added `dimension_parameters`; a tree-visiting mechanism for merging parameter dictionaries between layouts of the same dimension. @jpivarski then pointed out that we really care more about the _type_ in most cases, as that is the user-visible aspect of layouts.\r\n\r\nThis PR should do the following:\r\n- [ ] Add a mechanism for retrieiving attribute(s) that coalesces the intra-dimension parameter(s) according to a policy \r\n- [ ] Change `Content.mergeable`, `Content.layout_equal`, `arrayclass()` etc. to use this API instead of inspecting single-layout parameter dictionaries, or special cased `purelist_XXX`\r\n- [ ] Document the policy types so that we can refer to them in future.\r\n\r\n## Policies\r\n| Node Type | Pure List                 | Same Type                 |\r\n|-----------|---------------------------|---------------------------|\r\n| Option    | Merge with content        | Only ours                 |\r\n| Indexed   | Merge with content        | Merge with content        |\r\n| List      | Merge with content        | Only ours                 |\r\n| Union     | Merge contents*, and ours | Merge contents*, and ours |\r\n| Record    | Only ours                 | Only ours                 |\r\n| Leaf      | Only ours                 | Only ours                 |\r\n\r\nPractically speaking, we'll likely implement this as members of the `Form` types. Therefore, the word \"policy\" could mean a family of methods `_parameters_same_type, _parameters_pure_list`, or an enum that is switched upon. In fact, it could also be both, e.g a high-level enum that dispatches the correct family of methods. This is an aside for now.\r\n\r\nRelated issues:\r\n- https://github.com/scikit-hep/awkward/issues/1685\r\n- https://github.com/scikit-hep/awkward/issues/1686\r\n",
  "closed_at":"2023-07-03T11:11:40Z",
  "comments":5,
  "created_at":"2022-09-29T11:19:36Z",
  "draft":true,
  "id":1390700021,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_2RXF",
  "number":1755,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: extend parameter coalescence to ignore transparent layouts",
  "updated_at":"2024-02-01T19:26:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Now that v1 has been dropped, all of the compiler warnings are v2 warnings and need to be addressed. MacOS (or probably Cling) shows a lot more warnings than Linux (gcc) does, and I am running with a Mac now and therefore see them. I can work through these, cleaning up the C++ code.",
  "closed_at":null,
  "comments":4,
  "created_at":"2022-09-29T14:46:54Z",
  "id":1391003759,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5S6Qhv",
  "number":1756,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Eliminate compiler/linker warnings",
  "updated_at":"2024-01-20T21:16:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Specifically,\r\n\r\n```bash\r\nfind src/awkward -type f -name '*.py' -exec sed -i.bak 's/ak.contents.[a-z]*array.\\([A-Za-z]*Array\\)/ak.contents.\\1/g' {} \\;\r\nrm -f **/*.py.bak\r\nblack src/awkward\r\n```\r\n\r\n```bash\r\nfind src/awkward -type f -name '*.py' -exec sed -i.bak 's/ak.forms.[a-z]*form.\\([A-Za-z]*Form\\)/ak.forms.\\1/g' {} \\;\r\nrm -f **/*.py.bak\r\nblack src/awkward\r\n```\r\n\r\nand\r\n\r\n```bash\r\nfind src/awkward -type f -name '*.py' -exec sed -i.bak 's/ak.types.[a-z]*type.\\([A-Za-z]*Type\\)/ak.types.\\1/g' {} \\;\r\nrm -f **/*.py.bak\r\nblack src/awkward\r\n```\r\n\r\nWhen pip-installed, `ak.types` doesn't seem to have `listtype`, etc., but it does have `ListType`. Wait\u2014could it be because MacOS is case-sensitive? No, if that's it, then this would have failed before.\r\n\r\nRegardless of whether this fixes the issue I see in using Uproot with Awkward's `main`, it's a name change we've been wanting to do.",
  "closed_at":"2022-09-29T18:55:37Z",
  "comments":7,
  "created_at":"2022-09-29T17:47:38Z",
  "draft":false,
  "id":1391256534,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_4Gl-",
  "number":1757,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-29T18:55:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: reduce qualified names of Content, Form, Type subclasses",
  "updated_at":"2022-09-29T20:09:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Instead of making `awkward._v2` be referentially the same as `awkward`, inserted into `sys.modules` by hand (which does strange things to the `__package__` names of all submodules, described here: https://github.com/scikit-hep/awkward/pull/1757#issuecomment-1262759917), I made a file named src/awkward/_v2.py and filled it with what the old _v2 had.\r\n\r\nNow `awkward._v2` is a plain old boring submodule, referentially distinct from `awkward`, and submodule `__package__` names are not changed. It also has exactly the contents that the old `awkward._v2` had (not a superset of them), and it gives us a place where we could add a deprecation warning, if we ever want to. The direct imports can be replaced with a module-level `__getitem__` that warns before it returns what was requested, like the module-level `__getitem__` in Uproot ([here](https://github.com/scikit-hep/uproot5/blob/main/src/uproot/dynamic.py)).",
  "closed_at":"2022-09-30T20:16:28Z",
  "comments":5,
  "created_at":"2022-09-30T16:58:09Z",
  "draft":false,
  "id":1392714056,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_8-95",
  "number":1758,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-30T20:16:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: make _v2 facade a static module.",
  "updated_at":"2022-09-30T20:16:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Lark will be making this change as well: https://github.com/lark-parser/lark/commit/1b62465068fe95436d1e83839b522b18f84124f5.\r\n\r\nWhen that gets into a stable release, we should _re-generate_ this file (and we should, from time to time, because it's decoupled from the original library and doesn't see updates). But in the meantime, it won't cause warnings in Python 3.11, which deprecates `sre_parse`.",
  "closed_at":"2022-09-30T19:37:30Z",
  "comments":1,
  "created_at":"2022-09-30T18:51:39Z",
  "draft":false,
  "id":1392835984,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_9ZjZ",
  "number":1759,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-30T19:37:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: remove sre_parse dependency from Lark-generated parser.",
  "updated_at":"2022-09-30T19:37:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR fixes two unrelated bugs:\r\n- Use `raise` with `ak._errors.wrap_error` - a couple of lines were never raising exceptions\r\n- Remove uses of `exception_suffix` in `ak._errors` - the v1 \u2192 v2 transition removed this",
  "closed_at":"2022-09-30T21:20:44Z",
  "comments":1,
  "created_at":"2022-09-30T20:38:10Z",
  "draft":false,
  "id":1392999229,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_9-2_",
  "number":1760,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-30T21:20:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: use raise with `ak._errors.wrap_error`",
  "updated_at":"2022-09-30T21:20:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Now that we have four `NumpyLike` implementations, I think it's reasonable to move the external `is_XXX_buffer` functions into their respective NumpyLike classes.\r\n\r\nThis PR adds an `is_own_buffer` classmethod to each `NumpyLike`, including `TypeTracer`",
  "closed_at":"2022-09-30T21:29:04Z",
  "comments":1,
  "created_at":"2022-09-30T21:03:07Z",
  "draft":false,
  "id":1393021980,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_-DzC",
  "number":1761,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-09-30T21:29:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: move `is_XXX_buffer` into respective nplikes",
  "updated_at":"2022-09-30T21:29:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The _motivation_ for this PR is that we need an `ak.jax` public interface to our Jax integration, namely explicit registration.\r\n\r\nDuring the process of implementing this feature, I found other parts of `_connect` that I felt could benefit from some reworking as Awkward v2 has matured. Not all of these changes are necessary, so if people don't like them, we can revert them. Hopefully I can make a good case for the changes that I did make.\r\n\r\n## New Features\r\n- [x] expose a (new) `ak.jax` module (which we had in v1) to provide public access to register Jax\r\n- [x] add `ak.jax.assert_registered` to ensure Jax is registered\r\n- [x] implement support for restoring behaviours \r\n- [x] add `ak.jax.register_behavior_class` to register behavior classes with Jax\r\n- [x] add `__subclass_hook__` to highlevel types in order to automatically invoke `ak.jax.register_behavior_class()`\r\n\r\n## Refactoring\r\n- [x] make `_connect.numexpr.import_numexpr` private\r\n- [x] change `ak.jax.import_jax()` to assert that it is registered, instead of registering it\r\n- [x] move the `_jax_flatten` Array/Record classmethods to high-level functions in `ak._connect.jax`\r\n - We don't need these to be classmethods on the Array, so let's keep the namespace empty\r\n- [x] refactor `ak._connect.jax` to separate `_connect.jax.trees`\r\n- [x] ensure Jax reducers inherits from `Reducer`\r\n- [x] add `ak._connect.jax.get_jax_reducer` to find the Jax reducer for a given NumPy reducer\r\n\r\n## Breaking Changes\r\n- `ak.jax.register` needs to be called by external code before using Jax with Awkward. \r\n\r\nI think that this is a _good_ change, because this was already partly true; previously, calling `jax.XXX` functions on Awkward Arrays would only succeed if the registration step had been performed manually, or `to_jax()` had been invoked. \r\n\r\nThis change makes it harder to forget to register Jax integration, because now the Jax integration in either direction won't work until it is enabled. Internal modules call `assert_registered()`, which encourages users to call `register_and_check()`. There is also `jax.import_jax()` which imports Jax after ensuring that it is registered.\r\n\r\nAlthough this is _slightly_ less convenient; it ensures that users don't have to think about whether to call `ak.jax.register_and_check()` - one always must. It takes a stateful API `ak.to_jax` and makes it stateless.\r\n\r\n## High Level Changes\r\nI think our `_connect` modules should assume that the importer knows what they're doing, and _wants_ these modules because they are known to be available on the host system. This makes it easier to reason about state, and lets us avoid silently invoking the `register()` functions by accident.  \r\n\r\nSo, for our main connect modules:\r\n- `jax` - needs to be registered, as it uses global state for integration. Internal APIs can directly use the Jax APIs, but must ensure that `assert_registered` is called. i.e. we should explicitly call `ak.jax.import_jax()`, `ak.jax.register_and_check()`, or `ak.jax.ensure_registered()` when we need these guarantees at the high-level, e.g. `ak.to_jax()`. Import checks can be done at registration, and internal functions therefore just need to check that things are currently registered.\r\n- `numba` - see Jax[^numba] \r\n- `cupy` - does not need to be registered, so internal functions need to / can perform import-checks dynamically.\r\n- `numexpr` - see CuPy\r\nInstead of registering Jax when needed, we should explicitly call `ak.jax.import_jax()`, `ak.jax.register_and_check()`, or `jax.ensure_registered()` when we need these guarantees at the high-level, e.g. `ak.to_jax()`.\r\n\r\n[^numba]: Perhaps not in the case of numba: it should always be registered due to the entry point. Checking this anyway would be more robust, however.`",
  "closed_at":"2022-10-01T21:40:11Z",
  "comments":8,
  "created_at":"2022-09-30T21:43:04Z",
  "draft":false,
  "id":1393051398,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4_-KEw",
  "number":1762,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: clean up `_connect`",
  "updated_at":"2022-10-03T15:47:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR is a re-write of #1762, so I'll copy the information here:\r\n\r\nThe _motivation_ for this PR is that we need an `ak.jax` public interface to our Jax integration, namely explicit registration.\r\n\r\nDuring the process of implementing this feature, I found other parts of `_connect` that I felt could benefit from some reworking as Awkward v2 has matured. Not all of these changes are necessary, so if people don't like them, we can revert them. Hopefully I can make a good case for the changes that I did make.\r\n\r\n## New Features\r\n- [x] expose a (new) `ak.jax` module (which we had in v1) to provide public access to register Jax\r\n- [x] add `ak.jax.assert_registered` to ensure Jax is registered\r\n- [x] implement support for restoring behaviours \r\n- [x] add `ak.jax.register_behavior_class` to register behavior classes with Jax\r\n- [x] add `__subclass_hook__` to highlevel types in order to automatically invoke `ak.jax.register_behavior_class()`\r\n\r\n## Refactoring\r\n- [x] make `_connect.numexpr.import_numexpr` private\r\n- [x] change `ak.jax.import_jax()` to assert that it is registered, instead of registering it\r\n- [x] move the `_jax_flatten` Array/Record classmethods to high-level functions in `ak._connect.jax`\r\n - We don't need these to be classmethods on the Array, so let's keep the namespace empty\r\n- [x] refactor `ak._connect.jax` to separate `_connect.jax.trees`\r\n- [x] ensure Jax reducers inherits from `Reducer`\r\n- [x] add `ak._connect.jax.get_jax_reducer` to find the Jax reducer for a given NumPy reducer\r\n- [x] use `NumpyLike` mechanism in `from_backend`.\r\n\r\n## Bug Fixes\r\n- [x] fixed tracer leaks in Jax flattening\r\n- [x] use `nplike` parameter in `ak.to_buffers`\r\n\r\n## Breaking Changes\r\n- `ak.jax.register_and_check()` needs to be called by external code before using Jax with Awkward. \r\n\r\nI think that this is a _good_ change, because this was already partly true; previously, calling `jax.XXX` functions on Awkward Arrays would only succeed if the registration step had been performed manually, or `to_jax()` had been invoked. \r\n\r\nThis change makes it harder to forget to register Jax integration, because now the Jax integration in either direction won't work until it is enabled. Internal modules call `assert_registered()`, which encourages users to call `register_and_check()`. There is also `jax.import_jax()` which imports Jax after ensuring that it is registered.\r\n\r\nAlthough this is _slightly_ less convenient; it ensures that users don't have to think about whether to call `ak.jax.register_and_check()` - one always must. It takes a stateful API `ak.to_jax()` and makes it stateless.\r\n\r\n## High Level Changes\r\nI think our `_connect` modules should assume that the importer knows what they're doing, and _wants_ these modules because they are known to be available on the host system. This makes it easier to reason about state, and lets us avoid silently invoking the `register()` functions by accident.  \r\n\r\nSo, for our main connect modules:\r\n- `jax` - needs to be registered, as it uses global state for integration. Internal APIs can directly use the Jax APIs, but must ensure that `assert_registered` is called. i.e. we should explicitly call `ak.jax.import_jax()`, `ak.jax.register_and_check()`, or `ak.jax.assert_registered()` when we need these guarantees at the high-level, e.g. `ak.to_jax()`. Import checks can be done at registration, and internal functions therefore just need to check that things are currently registered.\r\n- `numba` - see Jax[^numba] \r\n- `cupy` - does not need to be registered, so internal functions need to / can perform import-checks dynamically.\r\n- `numexpr` - see CuPy\r\nInstead of registering Jax when needed, we should explicitly call `ak.jax.import_jax()`, `ak.jax.register_and_check()`, or `jax.ensure_registered()` when we need these guarantees at the high-level, e.g. `ak.to_jax()`.\r\n\r\n[^numba]: Perhaps not in the case of numba: it should always be registered due to the entry point. Checking this anyway would be more robust, however.`",
  "closed_at":"2022-10-04T17:12:26Z",
  "comments":15,
  "created_at":"2022-10-01T21:55:23Z",
  "draft":false,
  "id":1393564483,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4__xyG",
  "number":1763,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-04T17:12:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: cleanup `_connect` submodule",
  "updated_at":"2022-10-04T17:12:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nWe need to handle these. The JAX docs aren't very clear unfortunately :/ As per usual, I only discovered this after writing the new Jax docs (after merging #1763)",
  "closed_at":"2022-10-05T20:16:54Z",
  "comments":0,
  "created_at":"2022-10-04T19:36:04Z",
  "id":1396752486,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5TQMBm",
  "number":1764,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"JAX sometimes gives us `None`s and `object`s",
  "updated_at":"2022-10-05T20:16:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nLost in translation (and evidence that we need more tests).\r\n\r\nv2 `to_arraylib`:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/3401e2bf53b2c53b877c9d29a5eb0b36e7e01582/src/awkward/_util.py#L753-L806\r\n\r\nv1 `to_numpy`:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/f2092ee90e78c9ce00c54b3f5d9612bd218336ee/src/awkward/operations/convert.py#L208-L370\r\n\r\nThe libraries other than NumPy won't be able to use some of those other layout node types, but they general implementation should have them anyway. At least, when this is used by `to_numpy`, they need to be there.",
  "closed_at":"2022-11-22T17:59:05Z",
  "comments":2,
  "created_at":"2022-10-04T20:04:30Z",
  "id":1396780849,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5TQS8x",
  "number":1765,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"v2 implementation of `to_arraylib` is missing cases from the original v1 `to_numpy`",
  "updated_at":"2023-02-15T19:10:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\nJSON does not define the object key ordering. We should modify the form for `RecordArray` to make it preserve the order, by defining a new `\"recordlookup\"` or `\"fields\"` field that stores the ordered field names. When this field is found, the `\"contents\"` field should be a JSON array, rather than an object.",
  "closed_at":"2022-10-06T18:22:04Z",
  "comments":0,
  "created_at":"2022-10-04T21:52:53Z",
  "id":1396885737,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5TQsjp",
  "number":1766,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`Form` is not guaranteed to preserve record field ordering under serialisation",
  "updated_at":"2022-10-06T18:22:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n...",
  "closed_at":"2022-10-04T22:15:56Z",
  "comments":0,
  "created_at":"2022-10-04T21:53:27Z",
  "id":1396886190,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5TQsqu",
  "number":1767,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Pickling of `Array`s should use `Form`'s dict representation",
  "updated_at":"2022-10-04T22:15:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1767",
  "closed_at":"2022-10-04T22:15:55Z",
  "comments":1,
  "created_at":"2022-10-04T21:57:12Z",
  "draft":false,
  "id":1396889241,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AKt0f",
  "number":1768,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-04T22:15:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: use dict representation of Form in pickling",
  "updated_at":"2022-10-04T22:15:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"#1763 made some good strides in refactoring the JAX support, but there were some outstanding bugs with respect to parameter handling.\r\n\r\nThis PR just ensures that we have the same `nplike` throughout the layout (apart from `AuxData` layouts, which have `Numpy` at the leaves). It also introduces a test for later support of Jacobians. \r\n\r\nFinally, we also ignore non-buffers. This is probably the wrong thing to do in the general sense, but it's a start towards Jacobian support.",
  "closed_at":"2022-10-05T20:16:53Z",
  "comments":0,
  "created_at":"2022-10-04T22:00:43Z",
  "draft":false,
  "id":1396892075,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AKuas",
  "number":1769,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-05T20:16:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: ignore unknown JAX \"buffer\" types & fix nplike mixing",
  "updated_at":"2022-10-05T21:27:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Requested by @martindurant on Slack.\r\n\r\n> Quick question: if you provide a schema to ak.from_json which omits some fields in the input data, are they skipped at parse time? So, is this like a columns= opportunity to improve memory use and maybe parse speed?\r\n\r\nThe parser now needs to have additional mutable state, but it's quite minor: a single integer will do it. Every JSON node queries this integer (and possibly returns early, depending on its value), but surely the computation time of checking an integer is minimal compared to parsing tokens of JSON text. I didn't even do a performance test; adding this will be fine.",
  "closed_at":"2022-10-05T12:48:25Z",
  "comments":4,
  "created_at":"2022-10-04T23:21:20Z",
  "draft":false,
  "id":1396953424,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AK7Yp",
  "number":1770,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-05T12:48:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: make ak.from_json with schema ignore unspecified fields (instead of error).",
  "updated_at":"2022-10-05T13:30:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\r\n\r\n2.0.0rc1\r\n\r\n### Description and code to reproduce\r\n\r\nIn dask-awkward we have some imports that break after installing from the `main` branch (but _not_ removing the `_v2` imports). For example: https://github.com/ContinuumIO/dask-awkward/blob/7a0cceeade6aa8f64f5f3c29fb59c75a807230f7/src/dask_awkward/lib/io/io.py#L9\r\nThis is because `awkward._v2.types` used to be package and now it's just a module with the updated repo structure.\r\n\r\nNote that dask-awkward is fine if we transition to _not_ importing `_v2` things (https://github.com/ContinuumIO/dask-awkward/pull/86)",
  "closed_at":"2022-11-03T15:34:31Z",
  "comments":8,
  "created_at":"2022-10-05T19:20:29Z",
  "id":1398256682,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5TV7Qq",
  "number":1771,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`awkward._v2` imports broken with subpackages",
  "updated_at":"2023-02-15T19:10:35Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjc0MDU1MTAy",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nAlthough we aren't planning on further work here for a while, unless we find an easy path to do this, this issue tracks the problem of supporting JAX's Jacobian computation.\r\n\r\nA few things to consider:\r\n\r\n- JAX passes objects in addition to buffers to unflatten. We need to be able to pass these back to JAX, I believe. Doing this would probably require either a parameter flag, if we can return any-old-object, or a weak registry if not.\r\n- The implementation of `jax.jacrev` explains how JAX actually calculates the Jacobian in pytree space. JAX understands the Jacobian as a 2D array, so if we re-interpret this 2D buffer for out layouts, we need to store sufficient metadata to be able to return it back to JAX for subsequent calculations, as it seems JAX goes to/from pytrees multiple times.\r\n- See https://github.com/google/jax/discussions/12664 for a general discussion following this.",
  "closed_at":null,
  "comments":2,
  "created_at":"2022-10-05T21:18:22Z",
  "id":1398393406,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5TWco-",
  "number":1772,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Add Jacobian support to JAX",
  "updated_at":"2024-01-20T11:24:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR fixes #1766 by introducing a new `RecordForm` key: `fields`:\r\n- If present, the `fields` key indicates that Awkward should read the `RecordForm` as a new-style (non-legacy) `Form`.\r\n- If users mix form styles, Awkward will raise a `ValueError`.",
  "closed_at":"2022-10-06T18:22:03Z",
  "comments":10,
  "created_at":"2022-10-06T08:51:55Z",
  "draft":false,
  "id":1399132813,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5ASSny",
  "number":1773,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-06T18:22:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: add new `\"fields\"` key to `RecordForm`",
  "updated_at":"2022-10-06T19:08:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1703\r\n\r\nThis PR:\r\n- adds support for JAX arrays in `ak.Array`\r\n- adds support for `TypeTracerArray` in `ak.to_layout`\r\n- tightens `isinstance` to `ak._util.is_sized_iterable` in `ak.fill_none`\r\n- removes iterator support from `TypeTracerArray.from_array` and refactors its usage",
  "closed_at":"2022-10-06T19:07:27Z",
  "comments":1,
  "created_at":"2022-10-06T15:37:04Z",
  "draft":false,
  "id":1399883785,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AU6TI",
  "number":1774,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-06T19:07:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: support scalars in `TypeTracer` operations",
  "updated_at":"2022-10-06T19:07:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Spotted some outdated CI/CD badges and links while going through the docs. I am not sure which branch should I compare this with - `docs`, `agoose77/docs-update-for-v2`, `agoose77/docs-expand-content`, or `main` (also probably `main-v1`) \ud83d\ude2c ",
  "closed_at":"2022-10-07T09:08:24Z",
  "comments":5,
  "created_at":"2022-10-06T20:30:11Z",
  "draft":false,
  "id":1400262617,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AWNRO",
  "number":1775,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-07T09:08:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: point all references of CI/CD to GH Actions",
  "updated_at":"2022-10-07T09:32:02Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR merges the new docs (#1552, #1563, #1590, #1591, #1592, #1594, #1630, #1734) into `main`.\r\n\r\nAs discussed elsewhere, these aren't finished v2 docs. But, they lay the groundwork for us to start iterating. #1575 will eventually target `main`, and fill out missing sections, in addition to the comments raised by @jpivarski in #1734 \r\n\r\nBy merging into `main`, however, we can avoid needing to keep these two branches in sync!\r\n- [ ] Fix cache of WASM build\r\n- [x] Add Conda (Forge) icon\r\n- [x] Restore API reference ordering\r\n   - [x] Remove duplication on index by having subcategories in ToC?\r\n- [x] Mention records and unions in \"what is an Awkward Array\"\r\n- [x] Move \"Differentiation with JAX\" to specialised group?\r\n- [x] Address https://github.com/scikit-hep/awkward/pull/1734#issuecomment-1273813025",
  "closed_at":"2022-10-17T20:44:31Z",
  "comments":28,
  "created_at":"2022-10-08T22:01:20Z",
  "draft":false,
  "id":1402073769,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AcH01",
  "number":1776,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-17T20:44:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: merge new docs into main",
  "updated_at":"2022-10-18T19:54:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1735 ",
  "closed_at":"2022-10-10T15:51:25Z",
  "comments":1,
  "created_at":"2022-10-09T12:57:29Z",
  "draft":false,
  "id":1402266687,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AcsPJ",
  "number":1777,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-10T15:51:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: propagate mask through `from_numpy`",
  "updated_at":"2022-10-10T15:51:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR closes #503, fixes #1599\r\n\r\n## High Level\r\nThis PR makes the boundary between the C++ portion of Awkward Array and the Python-only portion much sharper. This has benefits for the ease of caching in the CI, but also helps us make quicker, more lightweight releases; and perform editable installs.\r\n\r\nStructurally, data that is shared by `awkward` and `awkward-cpp` is placed at the Git root. This makes it easy to see the relations between the packages. Dev scripts prepare both packages for sdist generation using `nox -s prepare`. We do not include the dev scripts or kernel-specification into the sdists, therefore they should not be used during wheel building. Only the generated files (tests, headers) are included in the sdists and hence wheels.\r\n\r\n## Tasks\r\n- [x] Split awkward and awkward-core packages\r\n- [x] Use `awkward-cpp` name\r\n- [x] Use strict equality version constraint\r\n- [x] Update CI \r\n   - [x] Only run build for changes to `awkward-core`\r\n   - [x] Use cached awkward-core wheels using hash of awkward-core\r\n- [x] Remove `localbuild.py`\r\n- [x] Move `./awkward-cpp/cpp-headers` to `./header-only`, included as implementation details into two package sdists (and pure-python wheel too).\r\n- [x] Move `./src/awkward/cpp-headers/rdataframe/` to `./src/awkward/_connect/rdataframe/include` (approx)\r\n- [x] Clean-up MANIFEST.in\r\n- [x] Update LayoutBuilder user-guide to reflect best practices for locating headers\r\n- [x] Update `contributing.md`\r\n- [x] Move doxygen docs to `awkward-cpp/docs`, and include in sdist\r\n- [x] Rename `docs-sphinx` to `docs`\r\n- [x] Add helpful sessions to `nox` for code generation\r\n- [x] Check for out-of-sync awkward and awkward-cpp versions/requirements ON RELEASE\r\n- [x] Check for modifications to released awkward-cpp versions ON RELEASE\r\n- [x] Move version source to `pyproject.toml`\r\n- [x] Move contributing info to details\r\n- [x] Tie public C++ headers to Python package version\r\n- [x] Ensure that sdists can be built into functional wheels\r\n- [ ] Embed C++ header artefact as a GH release asset\r\n- [x] Optimise kernel test generation\r\n- [ ] Use https://github.com/softprops/action-gh-release to create releases _from_ workflows\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-chore/split-awkward-package/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-18T01:22:39Z",
  "comments":58,
  "created_at":"2022-10-10T16:49:27Z",
  "draft":false,
  "id":1403459100,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AgmJZ",
  "number":1778,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: split `awkward` into two packages",
  "updated_at":"2023-02-15T19:10:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/pyupgrade: v2.38.2 \u2192 v3.0.0](https://github.com/asottile/pyupgrade/compare/v2.38.2...v3.0.0)\n- [github.com/psf/black: 22.8.0 \u2192 22.10.0](https://github.com/psf/black/compare/22.8.0...22.10.0)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-10-17T18:29:46Z",
  "comments":1,
  "created_at":"2022-10-10T22:24:16Z",
  "draft":false,
  "id":1403770025,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AhpF5",
  "number":1779,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-17T18:29:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-10-17T18:29:46Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [amannn/action-semantic-pull-request](https://github.com/amannn/action-semantic-pull-request) from 4 to 5.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/amannn/action-semantic-pull-request/releases\">amannn/action-semantic-pull-request's releases</a>.</em></p>\n<blockquote>\n<h2>v5.0.0</h2>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.6.0...v5.0.0\">5.0.0</a> (2022-10-11)</h2>\n<h3>\u26a0 BREAKING CHANGES</h3>\n<ul>\n<li>Enum options need to be newline delimited (to allow whitespace within them) (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/205\">#205</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>Enum options need to be newline delimited (to allow whitespace within them) (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/205\">#205</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/c906fe1e5a4bcc61624931ca94da9672107bd448\">c906fe1</a>)</li>\n</ul>\n<h2>v4.6.0</h2>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.5.0...v4.6.0\">4.6.0</a> (2022-09-26)</h2>\n<h3>Features</h3>\n<ul>\n<li>Provide error messages as <code>outputs.error_message</code> (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/194\">#194</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/880a3c061c0dea01e977cefe26fb0e0d06b3d1a9\">880a3c0</a>)</li>\n</ul>\n<h2>v4.5.0</h2>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.4.0...v4.5.0\">4.5.0</a> (2022-05-04)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add <code>disallowScopes</code> option (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/179\">#179</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/6a7ed2d5046cf8a40c60494c83c962343061874a\">6a7ed2d</a>)</li>\n</ul>\n<h2>v4.4.0</h2>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.3.0...v4.4.0\">4.4.0</a> (2022-04-22)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add options to pass custom regex to conventional-commits-parser (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/177\">#177</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/956659ae00eaa0b00fe5a58dfdf3a3db1efd1d63\">956659a</a>)</li>\n</ul>\n<h2>v4.3.0</h2>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.2.0...v4.3.0\">4.3.0</a> (2022-04-13)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add <code>ignoreLabels</code> option to opt-out of validation for certain PRs (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/174\">#174</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/277c2303f965680aed7613eb512365c58aa92b6b\">277c230</a>)</li>\n</ul>\n<h2>v4.2.0</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/amannn/action-semantic-pull-request/blob/main/CHANGELOG.md\">amannn/action-semantic-pull-request's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.4.0...v4.5.0\">4.5.0</a> (2022-05-04)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add <code>disallowScopes</code> option (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/179\">#179</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/6a7ed2d5046cf8a40c60494c83c962343061874a\">6a7ed2d</a>)</li>\n</ul>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.3.0...v4.4.0\">4.4.0</a> (2022-04-22)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add options to pass custom regex to conventional-commits-parser (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/177\">#177</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/956659ae00eaa0b00fe5a58dfdf3a3db1efd1d63\">956659a</a>)</li>\n</ul>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.2.0...v4.3.0\">4.3.0</a> (2022-04-13)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add <code>ignoreLabels</code> option to opt-out of validation for certain PRs (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/174\">#174</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/277c2303f965680aed7613eb512365c58aa92b6b\">277c230</a>)</li>\n</ul>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.1.0...v4.2.0\">4.2.0</a> (2022-02-08)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add opt-in validation that PR titles match a single commit (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/160\">#160</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/c05e3587cb7878ec080300180d31d61ba1cf01ea\">c05e358</a>)</li>\n</ul>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.0.1...v4.1.0\">4.1.0</a> (2022-02-04)</h2>\n<h3>Features</h3>\n<ul>\n<li>Check if the PR title matches the commit title when single commits are validated to avoid surprises (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/158\">#158</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/f1216e9607ae4b476a6584a899c39bbb4f62da6d\">f1216e9</a>)</li>\n</ul>\n<h3><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.0.0...v4.0.1\">4.0.1</a> (2022-02-03)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Upgrade dependencies (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/156\">#156</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/16c6cc670bd7e91dbcfd9c39de6e6436d2c0fe1b\">16c6cc6</a>)</li>\n</ul>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v3.7.0...v4.0.0\">4.0.0</a> (2022-02-02)</h2>\n<h3>\u26a0 BREAKING CHANGES</h3>\n<ul>\n<li>dropped support for node &lt;=15</li>\n</ul>\n<h3>Features</h3>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/5369185dc9812f174fa58b03b13b79920b68f8e1\"><code>5369185</code></a> chore: Release 5.0.0 [skip ci]</li>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/c906fe1e5a4bcc61624931ca94da9672107bd448\"><code>c906fe1</code></a> feat!: Enum options need to be newline delimited (to allow whitespace within ...</li>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/b314c1bec341c714425c0aa43e142b35c12759a0\"><code>b314c1b</code></a> docs: Improve example for composing outputs (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/206\">#206</a>)</li>\n<li>See full diff in <a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4...v5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=amannn/action-semantic-pull-request&package-manager=github_actions&previous-version=4&new-version=5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-10-14T17:22:54Z",
  "comments":2,
  "created_at":"2022-10-11T17:33:35Z",
  "draft":false,
  "id":1404997104,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AluyZ",
  "number":1780,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump amannn/action-semantic-pull-request from 4 to 5",
  "updated_at":"2022-10-14T17:22:56Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Using the flag for non-persistence of the PyObject lookup pointers prevents the crash.",
  "closed_at":"2022-10-12T18:25:24Z",
  "comments":2,
  "created_at":"2022-10-11T23:18:32Z",
  "draft":false,
  "id":1405341343,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Am3wM",
  "number":1781,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-12T18:25:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: use the flag for non-persistence",
  "updated_at":"2022-10-18T15:57:30Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2024-01-03T16:06:21Z",
  "comments":1,
  "created_at":"2022-10-12T13:03:18Z",
  "draft":true,
  "id":1406181803,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Apq3e",
  "number":1782,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: add study for JAX vmap integration",
  "updated_at":"2024-02-01T19:26:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 2.0.0 to 2.1.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/docker/setup-qemu-action/releases\">docker/setup-qemu-action's releases</a>.</em></p>\n<blockquote>\n<h2>v2.1.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Use context for inputs by <a href=\"https://github.com/crazy-max\"><code>@\u200bcrazy-max</code></a> (<a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/62\">#62</a>)</li>\n<li>Use built-in <code>getExecOutput</code> by <a href=\"https://github.com/crazy-max\"><code>@\u200bcrazy-max</code></a> (<a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/61\">#61</a>)</li>\n<li>Remove workaround for <code>setOutput</code> by <a href=\"https://github.com/crazy-max\"><code>@\u200bcrazy-max</code></a> (<a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/63\">#63</a>)</li>\n<li>Bump <code>@\u200bactions/core</code> from 1.6.0 to 1.10.0 (<a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/54\">#54</a> <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/58\">#58</a> <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/59\">#59</a>)</li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/docker/setup-qemu-action/compare/v2.0.0...v2.1.0\">https://github.com/docker/setup-qemu-action/compare/v2.0.0...v2.1.0</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/e81a89b1732b9c48d79cd809d8d81d79c4647a18\"><code>e81a89b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/63\">#63</a> from crazy-max/setOutput</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/2d3efc7878a1bd93029455bc42576a0b26f89db1\"><code>2d3efc7</code></a> Remove workaround for setOutput</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/bfc44eaf578d784ed662146106efd48fa303bec3\"><code>bfc44ea</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/62\">#62</a> from crazy-max/context</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/25725d8d2ed579d4cb7dff6d7fa8fb3be4e9e986\"><code>25725d8</code></a> Use context for inputs</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/8c1e35a8c606f07f502ae2046ae1cd9e8f6f617c\"><code>8c1e35a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/61\">#61</a> from crazy-max/exec-output</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/f3c51a3313effd65d8757ad2f0652d3be79a1a16\"><code>f3c51a3</code></a> update README</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/c47ad32952473df18be42176c7a47c4ecb759856\"><code>c47ad32</code></a> Use built-in getExecOutput</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/aa087459ac75b4d924672b1b13a6225c903b6db0\"><code>aa08745</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/docker/setup-qemu-action/issues/59\">#59</a> from docker/dependabot/npm_and_yarn/actions/core-1.10.0</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/9443994984273d8178a5bd8585c5b0484616c71c\"><code>9443994</code></a> Update generated content</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/81a47e15eb17e6b19574bcd12f792f8da4c8ec92\"><code>81a47e1</code></a> Bump <code>@\u200bactions/core</code> from 1.9.1 to 1.10.0</li>\n<li>Additional commits viewable in <a href=\"https://github.com/docker/setup-qemu-action/compare/v2.0.0...v2.1.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=docker/setup-qemu-action&package-manager=github_actions&previous-version=2.0.0&new-version=2.1.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-10-17T18:29:34Z",
  "comments":1,
  "created_at":"2022-10-12T17:29:21Z",
  "draft":false,
  "id":1406565724,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Aq9uY",
  "number":1783,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-17T18:29:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"build(deps): bump docker/setup-qemu-action from 2.0.0 to 2.1.0",
  "updated_at":"2022-10-17T18:29:35Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.9.0 and 1.10.0\n\n### Description and code to reproduce\n\nUsed as part of coffea package: \r\n\r\n```python\r\nfrom coffea.nanoevents import NanoEventsFactory\r\nfrom coffea.nanoevents.schemas import TreeMakerSchema\r\nimport awkward as ak\r\n\r\nevents = NanoEventsFactory.from_root(\r\n    \"root://cmseos.fnal.gov//store/user/lpcsusyhad/ExoEMJAnalysis2020/Run2ProductionV20Skimmed/Summer20UL16/GJets_DR-0p4_HT-100To200_TuneCP5_13TeV-madgraphMLM-pythia8/0_RA2AnalysisTree.root\",\r\n    schemaclass=TreeMakerSchema,\r\n    treepath=\"TreeMaker2/PreSelection\",\r\n    entry_start=10000,\r\n    entry_stop=20000).events()\r\n\r\njets = events.Jets[events.Jets.pt > 100]\r\ntracks = events.Tracks[events.Tracks.pt > 1.0]\r\n\r\n_, tracks = ak.unzip(ak.cartesian([jets.eta, tracks], nested=True))\r\ntracks['deltaR'] = jets.delta_r(tracks)\r\n\r\nt_index = ak.argmin(tracks.deltaR, axis=-2)\r\nj_index = ak.local_index(jets.pt, axis=-1)\r\n_, t_index = ak.unzip(ak.cartesian([j_index, t_index], nested=True))\r\ntracks = tracks[j_index == t_index]\r\n\r\ntracks = tracks[tracks.deltaR < 0.4]\r\n```\r\n\r\nThe above segmentation faults at different point for different input files. Usually around the `ak.cartesian` calls, but also when adding variables to the array. Segmentation fault was observed for both awkward 1.9.0 and awkward 1.10.0, but never occurred for awkward 1.8.0\r\n",
  "closed_at":"2022-10-17T22:54:08Z",
  "comments":12,
  "created_at":"2022-10-12T22:19:03Z",
  "id":1406870522,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5T2yP6",
  "number":1784,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Segmentation fault with nested pair-wise comparison",
  "updated_at":"2022-10-17T22:54:08Z",
  "user":"MDQ6VXNlcjExNzAzNjQ0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The mechanisms by which list-types compute reductions, unique values, and sorting, are all very similar (and involve many of the same kernels). This PR identifies a \"transformer\" class to complement reducers as operations that leave the array structure intact; the result can be trivially broadcast against the original array.\r\nIn doing so, it paves the way for the addition of `nancumsum`, `cumsum`, `nancumprod`, and `cumprod` functions. \r\n\r\nUnfortunately, whilst `np.unique` _looks_ like a transformer, the fact that it changes the shape of the result (keeping only unique values) means that it requires some additional code to implement. It seems cleaner therefore to treat `unique` as a separate case. In general, it's not clear how to reconstruct `None` values in the event that the transformation changes the length of the array. \r\n\r\nThe string special-casing is now even more obviously distinct from the normal transformer handling.\r\n\r\n- [x] Refactor to use transformers\r\n- [ ] Add `cumsum`\r\n- [ ] Add `nancumsum`\r\n- [ ] Add `cumprod`\r\n- [ ] Add `nancumprod`\r\n- [ ] Closes #1855 ",
  "closed_at":"2022-12-02T11:15:37Z",
  "comments":3,
  "created_at":"2022-10-13T16:27:05Z",
  "draft":true,
  "id":1408102646,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AwIIJ",
  "number":1786,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: add `cumsum` and `cumprod`",
  "updated_at":"2024-02-01T19:26:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.10.2 to 2.11.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.11.1</h2>\n<ul>\n<li>\ud83d\udee0 Updates to the latest manylinux images, and updates CPython 3.10 to 3.10.8.</li>\n</ul>\n<h2>v2.11.0</h2>\n<ul>\n<li>\ud83c\udf1f Adds support for cross-compiling Windows ARM64 wheels. To use this feature, add <code>ARM64</code> to the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#archs\">CIBW_ARCHS</a> option on a Windows Intel runner. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1144\">#1144</a>)</li>\n<li>\u2728 Adds support for building Linux aarch64 wheels on Circle CI. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1307\">#1307</a>)</li>\n<li>\u2728 Adds support for building Windows wheels on Gitlab CI. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1295\">#1295</a>)</li>\n<li>\u2728 Adds support for building Linux aarch64 wheels under emulation on Gitlab CI. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1295\">#1295</a>)</li>\n<li>\u2728 Adds the ability to test <code>cp38-macosx_arm64</code> wheels on a native arm64 runner. To do this, you'll need to preinstall the (experimental) <a href=\"https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg\">universal2 version of CPython 3.8</a> on your arm64 runner before invoking cibuildwheel. Note: it is not recommended to build x86_64 wheels with this setup, your wheels will have limited compatibility wrt macOS versions. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1283\">#1283</a>)</li>\n<li>\ud83d\udee0 Improved error messages when using custom Docker images and Python cannot be found at the correct path. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1298\">#1298</a>)</li>\n<li>\ud83d\udcda Sample configs for Azure Pipelines and Travis CI updated (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1296\">#1296</a>)</li>\n<li>\ud83d\udcda Other docs improvements - including more information about using Homebrew for build dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1290\">#1290</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.11.1</h3>\n<p><em>13 October 2022</em></p>\n<ul>\n<li>\ud83d\udee0 Updates to the latest manylinux images, and updates CPython 3.10 to 3.10.8.</li>\n</ul>\n<h3>v2.11.0</h3>\n<p><em>13 October 2022</em></p>\n<ul>\n<li>\ud83c\udf1f Adds support for cross-compiling Windows ARM64 wheels. To use this feature, add <code>ARM64</code> to the <a href=\"https://cibuildwheel.readthedocs.io/en/stable/options/#archs\">CIBW_ARCHS</a> option on a Windows Intel runner. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1144\">#1144</a>)</li>\n<li>\u2728 Adds support for building Linux aarch64 wheels on Circle CI. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1307\">#1307</a>)</li>\n<li>\u2728 Adds support for building Windows wheels on Gitlab CI. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1295\">#1295</a>)</li>\n<li>\u2728 Adds support for building Linux aarch64 wheels under emulation on Gitlab CI. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1295\">#1295</a>)</li>\n<li>\u2728 Adds the ability to test <code>cp38-macosx_arm64</code> wheels on a native arm64 runner. To do this, you'll need to preinstall the (experimental) <a href=\"https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg\">universal2 version of CPython 3.8</a> on your arm64 runner before invoking cibuildwheel. Note: it is not recommended to build x86_64 wheels with this setup, your wheels will have limited compatibility wrt macOS versions. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1283\">#1283</a>)</li>\n<li>\ud83d\udee0 Improved error messages when using custom Docker images and Python cannot be found at the correct path. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1298\">#1298</a>)</li>\n<li>\ud83d\udcda Sample configs for Azure Pipelines and Travis CI updated (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1296\">#1296</a>)</li>\n<li>\ud83d\udcda Other docs improvements - including more information about using Homebrew for build dependencies (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1290\">#1290</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/190455139953dd8820b39f9eaf4390ed11320d90\"><code>1904551</code></a> Bump version: v2.11.1</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/eb50dffe41bfbb4b3d83cd9b906d5c7661bb819a\"><code>eb50dff</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1309\">#1309</a> from pypa/update-dependencies-pr</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a560b0e86efb574a85bcbd149718d21e13696696\"><code>a560b0e</code></a> Fix mistake in Gitlab CI config</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/80a2e1ab43419bcf44c02cb017970d21d0e9b1cc\"><code>80a2e1a</code></a> Update dependencies</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a9ad61c87f58b884fde0dc701650f9e8f02de1c5\"><code>a9ad61c</code></a> Bump version: v2.11.0</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/563b1c159bc333a1349b709d85e05e9bba7ad879\"><code>563b1c1</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1296\">#1296</a> from pypa/example-configs</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/bea8df945ac6a9a1c812f82210ea468d929c3448\"><code>bea8df9</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1307\">#1307</a> from minrk/circle-aarch64</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/4c3062199e891c26727046c283a09d4d31ef0b9e\"><code>4c30621</code></a> add linux-aarch64 to circleci tests</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/76b3bfcf956063f1ea29218a3dc6ba61083537b8\"><code>76b3bfc</code></a> Merge branch 'main' into circle-aarch64</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/d7f615add6552001f3f922f9e6fa55258141bb10\"><code>d7f615a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1295\">#1295</a> from wbarnha/extend-gitlab-qemu</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.10.2...v2.11.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.10.2&new-version=2.11.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-10-17T18:44:16Z",
  "comments":1,
  "created_at":"2022-10-13T17:33:19Z",
  "draft":false,
  "id":1408182713,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5AwZc5",
  "number":1787,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-17T18:44:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"build(deps): bump pypa/cibuildwheel from 2.10.2 to 2.11.1",
  "updated_at":"2022-10-17T18:44:17Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [amannn/action-semantic-pull-request](https://github.com/amannn/action-semantic-pull-request) from 4 to 5.0.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/amannn/action-semantic-pull-request/releases\">amannn/action-semantic-pull-request's releases</a>.</em></p>\n<blockquote>\n<h2>v5.0.1</h2>\n<h3><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v5.0.0...v5.0.1\">5.0.1</a> (2022-10-14)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Upgrade GitHub Action to use Node v16 (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/207\">#207</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/6282ee339b067cb8eab05026f91153f873ad37fb\">6282ee3</a>)</li>\n</ul>\n<h2>v5.0.0</h2>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.6.0...v5.0.0\">5.0.0</a> (2022-10-11)</h2>\n<h3>\u26a0 BREAKING CHANGES</h3>\n<ul>\n<li>Enum options need to be newline delimited (to allow whitespace within them) (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/205\">#205</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>Enum options need to be newline delimited (to allow whitespace within them) (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/205\">#205</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/c906fe1e5a4bcc61624931ca94da9672107bd448\">c906fe1</a>)</li>\n</ul>\n<h2>v4.6.0</h2>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.5.0...v4.6.0\">4.6.0</a> (2022-09-26)</h2>\n<h3>Features</h3>\n<ul>\n<li>Provide error messages as <code>outputs.error_message</code> (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/194\">#194</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/880a3c061c0dea01e977cefe26fb0e0d06b3d1a9\">880a3c0</a>)</li>\n</ul>\n<h2>v4.5.0</h2>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.4.0...v4.5.0\">4.5.0</a> (2022-05-04)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add <code>disallowScopes</code> option (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/179\">#179</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/6a7ed2d5046cf8a40c60494c83c962343061874a\">6a7ed2d</a>)</li>\n</ul>\n<h2>v4.4.0</h2>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.3.0...v4.4.0\">4.4.0</a> (2022-04-22)</h2>\n<h3>Features</h3>\n<ul>\n<li>Add options to pass custom regex to conventional-commits-parser (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/177\">#177</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/956659ae00eaa0b00fe5a58dfdf3a3db1efd1d63\">956659a</a>)</li>\n</ul>\n<h2>v4.3.0</h2>\n<h2><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4.2.0...v4.3.0\">4.3.0</a> (2022-04-13)</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/amannn/action-semantic-pull-request/blob/main/CHANGELOG.md\">amannn/action-semantic-pull-request's changelog</a>.</em></p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/570204e54c9030a6cb7ef781c492e76c1798d1c0\"><code>570204e</code></a> chore: Release 5.0.1 [skip ci]</li>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/6282ee339b067cb8eab05026f91153f873ad37fb\"><code>6282ee3</code></a> fix: Upgrade GitHub Action to use Node v16 (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/207\">#207</a>)</li>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/7c194c28652f0faf98ad437c6cf291406d387b43\"><code>7c194c2</code></a> docs: Use latest major [skip ci]</li>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/5369185dc9812f174fa58b03b13b79920b68f8e1\"><code>5369185</code></a> chore: Release 5.0.0 [skip ci]</li>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/c906fe1e5a4bcc61624931ca94da9672107bd448\"><code>c906fe1</code></a> feat!: Enum options need to be newline delimited (to allow whitespace within ...</li>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/b314c1bec341c714425c0aa43e142b35c12759a0\"><code>b314c1b</code></a> docs: Improve example for composing outputs (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/206\">#206</a>)</li>\n<li>See full diff in <a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v4...v5.0.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=amannn/action-semantic-pull-request&package-manager=github_actions&previous-version=4&new-version=5.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-10-15T18:46:45Z",
  "comments":2,
  "created_at":"2022-10-14T17:22:50Z",
  "draft":false,
  "id":1409642487,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A1Rio",
  "number":1788,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-15T18:46:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"build(deps): bump amannn/action-semantic-pull-request from 4 to 5.0.1",
  "updated_at":"2022-10-15T18:46:46Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nThis is the flattening code-path. `EmptyArray` has no length, so we must be assuming otherwise here.",
  "closed_at":"2022-12-22T20:38:52Z",
  "comments":0,
  "created_at":"2022-10-15T09:14:42Z",
  "id":1410104451,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UDHyD",
  "number":1789,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.sum([])` raises `IndexError`",
  "updated_at":"2022-12-22T20:38:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nWhilst playing around with reducers / transformers, I noticed that we currently can't reduce a ragged dimension over a regular dimension, if the ragged dimension is nested in the layout:\r\n\r\n```python3\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\narray = ak.Array(\r\n    ak.contents.ListOffsetArray(\r\n        ak.index.Index64(\r\n            np.array(\r\n                [0, 2, 4, 4],\r\n                dtype=np.int_,\r\n            )\r\n        ),\r\n        ak.contents.RegularArray(ak.contents.NumpyArray(np.arange(4 * 2)), size=2),\r\n    )\r\n)\r\n# [\r\n#     [\r\n#         [0, 1],\r\n#         [2, 3],\r\n#     ],\r\n#     [\r\n#         [4, 5],\r\n#         [6, 7],\r\n#     ],\r\n#     [\r\n#\r\n#     ],\r\n# ]\r\n\r\nak.sum(array, axis=1)\r\n```\r\n\r\nThis is not a new bug; it affects v1 too. ",
  "closed_at":"2022-10-20T19:55:27Z",
  "comments":1,
  "created_at":"2022-10-15T20:36:11Z",
  "id":1410284112,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UDzpQ",
  "number":1790,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Unable to reduce regular dimension in mixed layout",
  "updated_at":"2022-10-20T19:55:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nThis *might* not be a bug, depending upon what we define the behavior of `ListArray` to be w.r.t `starts[i] == stops[i]`. The following reproducer produces a result layout with `starts[1] == stops[1] == 3`. The leaf `NumpyArray` has a length of 1, so unless we define out-of-bounds starts to be valid iff. they are equal to stops, then we're not doing the right thing here.\r\n\r\n\r\n```python\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\narray = ak.Array(\r\n    ak.contents.ListOffsetArray(\r\n        ak.index.Index64(\r\n            np.array(\r\n                [0, 1, 1],\r\n                dtype=np.int64,\r\n            )\r\n        ),\r\n        ak.contents.ListOffsetArray(\r\n            ak.index.Index64(\r\n                np.array(\r\n                    [0, 1],\r\n                    dtype=np.int64,\r\n                )\r\n            ),\r\n            ak.contents.NumpyArray(np.arange(1)),\r\n        )\r\n    )\r\n)\r\n# [\r\n#     [\r\n#         [0],\r\n#     ],\r\n#     [],\r\n# ]\r\n\r\nprint(ak.sum(array, axis=1).layout)\r\n\r\n```",
  "closed_at":"2022-10-17T22:54:08Z",
  "comments":2,
  "created_at":"2022-10-15T22:27:58Z",
  "id":1410307177,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UD5Rp",
  "number":1791,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Reduction of inner dimension in ragged array produces incorrect offsets",
  "updated_at":"2022-10-17T22:54:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This appears to fix #1791, and follows from what I'd expect the kernel to be doing. The fact that this wasn't right beforehand _seems_ to me like a human error rather than an oversight, so it gives me more confidence that this simple fix is correct.\r\n\r\n- [ ] Add test for v1 (though the v2 test should catch it, as we only change the kernel)",
  "closed_at":"2022-10-17T15:12:53Z",
  "comments":2,
  "created_at":"2022-10-15T23:31:57Z",
  "draft":false,
  "id":1410318386,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A3aYs",
  "number":1792,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: produce valid offsets for reducing with empty trailing lists",
  "updated_at":"2022-10-20T07:25:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR:\r\n- [x] Fixes #1789 \r\n- [x] Fixes `UnionArray` index handling (this needs another pass, I just did a quick `sed`)\r\n- [x] Renames the general `_reduce` method to enshrine it as the entrypoint for reducers\r\n- [x] Removes the layout reducer shims e.g. `layout.all()`\r\n- [x] Adds a `reduce_flattened` method that performs a two-stage reduction where possible (i.e. for non-positional reducers)\r\n- [ ] Make `Count` use an integer as its preferred dtype.\r\n\r\nThere may be some glaring oversights here; I just cooked this up quickly whilst thinking about the problem.\r\n\r\n## Description\r\n\r\nOur existing high-level reduction functions all duplicate the same boilerplate to handle two-stage reduction and the existence of typetracer. Additionally, there are a couple of bugs e.g. with `ak.sum([])` raising an `Exception`, or `ak.argmin()` returning per-sublist indices. Overall, it would be good (and safer) to move this into a common implementation.\r\n\r\nIt also occurs to me that for the mild convenience of having `layout.all()` etc., we have a large number of shims that are also defined in `ak.operations`. This isn't a \"bad\" thing, but I think the proper interface here is the reducer API, and we should expose that so that users can (should they be crazy enough / have need) implement their own reducers and pass them in. (Yes, nothings every truly private in Python, but I think we should be confident in exposing our reducers).\r\n\r\nThis PR handles the thorny problem of two-stage reduction by allowing non-positional reducers to pass in _two_ reducers; one to reduce the partitions, and another to reduce the final result. For positional reducers, we would need to special case this. Hence, this PR introduces a contentious change; merge the flattened array parts into a single buffer for positional reducers like `argmin`. \r\n\r\nAs of writing, the test suite still needs updating to reflect the removal of `layout.all()` etc.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-reduce-none/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-22T14:39:41Z",
  "comments":3,
  "created_at":"2022-10-16T11:09:45Z",
  "draft":true,
  "id":1410454623,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A30Hs",
  "number":1793,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: simplify reducer API",
  "updated_at":"2023-03-16T13:32:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nThis also exists in v1.\r\n\r\nThe following code raises an `Exception`:\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\n\r\nlayout = ak.contents.ListOffsetArray(\r\n    ak.index.Index(np.array([0, 2, 4, 4], dtype=np.int64)),\r\n    ak.contents.NumpyArray(\r\n        np.arange(4)\r\n    )\r\n)\r\nak.run_lengths(layout)\r\n```\r\n\r\nAlso, we should use `regularize_numpyarray` to handle `NumpyArray`, which currently just raises an Exception.",
  "closed_at":"2022-10-20T00:43:02Z",
  "comments":0,
  "created_at":"2022-10-16T12:39:22Z",
  "id":1410476567,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UEioX",
  "number":1794,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.run_lengths` does not handle leading/trailing empty sublists",
  "updated_at":"2022-10-20T00:43:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This fixes #1794. We could do this more optimally with a kernel rather than multiple `nplike` operations, but it's clearly still linear in the number of indices.\r\n\r\n@jpivarski let me know if you'd prefer that I don't introduce ASCII diagrams into the source. I find it's clearer than the equivalent wording, but it does add to the line lengths (indirectly harming readability).",
  "closed_at":"2022-10-20T00:43:01Z",
  "comments":1,
  "created_at":"2022-10-16T12:44:55Z",
  "draft":false,
  "id":1410477947,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A34eB",
  "number":1795,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-20T00:43:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: allow empty sublists in ak.run_lengths",
  "updated_at":"2022-10-20T00:43:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- [x] fixes #1784\r\n- [x] fixeds #1791\r\n- [x] removes unused kernel\r\n- [x] adds test\r\n\r\nThis PR fixes #1784 by rewriting the `awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64` kernel. The actual fix for #1784 is just to wrap the entire kernel body in the `if (distincts[i] != -1)` guard. However, I took the opportunity to simplify and explain the kernel. This means that we can drop the `gaps` kernel, and we don't need to perform any float divisions. So, I'd hope that this is also a slight performance boost (but this did not motivate the rewrite).\r\n\r\nI *hope* that I haven't overlooked any design invariants or corner-cases :crossed_fingers:; I've attempted to understand the purpose and function of the kernel in depth before writing this PR.\r\n\r\n:warning: I did change the expected outcomes of the test suite - some of the kernel tests check the offset values. We don't care about the actual values of `starts` and `stops` as long as they're in-bounds and equal. ",
  "closed_at":"2022-10-17T22:54:06Z",
  "comments":2,
  "created_at":"2022-10-17T14:57:11Z",
  "draft":false,
  "id":1411734717,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A8D9s",
  "number":1796,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-17T22:54:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: simplify `ListOffsetArray_reduce_nonlocal_outstartsstops`",
  "updated_at":"2022-10-17T22:54:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"See #1796 ",
  "closed_at":"2022-10-18T11:32:28Z",
  "comments":2,
  "created_at":"2022-10-17T17:19:30Z",
  "draft":false,
  "id":1411933665,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A8u2C",
  "number":1797,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-18T11:32:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: simplify `ListOffsetArray_reduce_nonlocal_outstartsstops` (backport)",
  "updated_at":"2022-10-18T11:32:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [amannn/action-semantic-pull-request](https://github.com/amannn/action-semantic-pull-request) from 5.0.1 to 5.0.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/amannn/action-semantic-pull-request/releases\">amannn/action-semantic-pull-request's releases</a>.</em></p>\n<blockquote>\n<h2>v5.0.2</h2>\n<h3><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v5.0.1...v5.0.2\">5.0.2</a> (2022-10-17)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Upgrade <code>@actions/core</code> to avoid deprecation warnings (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/208\">#208</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/91f4126c9e8625b9cadd64b02a03018fa22fc498\">91f4126</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/amannn/action-semantic-pull-request/blob/main/CHANGELOG.md\">amannn/action-semantic-pull-request's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v5.0.1...v5.0.2\">5.0.2</a> (2022-10-17)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Upgrade <code>@actions/core</code> to avoid deprecation warnings (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/208\">#208</a>) (<a href=\"https://github.com/amannn/action-semantic-pull-request/commit/91f4126c9e8625b9cadd64b02a03018fa22fc498\">91f4126</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/01d5fd8a8ebb9aafe902c40c53f0f4744f7381eb\"><code>01d5fd8</code></a> chore: Release 5.0.2 [skip ci]</li>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/91f4126c9e8625b9cadd64b02a03018fa22fc498\"><code>91f4126</code></a> fix: Upgrade <code>@actions/core</code> to avoid deprecation warnings (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/208\">#208</a>)</li>\n<li><a href=\"https://github.com/amannn/action-semantic-pull-request/commit/0a457e272673a33e52c9ade9318b3c115e566f60\"><code>0a457e2</code></a> ci: Fix branch name in dist check (<a href=\"https://github-redirect.dependabot.com/amannn/action-semantic-pull-request/issues/209\">#209</a>)</li>\n<li>See full diff in <a href=\"https://github.com/amannn/action-semantic-pull-request/compare/v5.0.1...v5.0.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=amannn/action-semantic-pull-request&package-manager=github_actions&previous-version=5.0.1&new-version=5.0.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-10-17T18:29:56Z",
  "comments":1,
  "created_at":"2022-10-17T17:38:25Z",
  "draft":false,
  "id":1411960116,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A80pY",
  "number":1798,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-17T18:29:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"build(deps): bump amannn/action-semantic-pull-request from 5.0.1 to 5.0.2",
  "updated_at":"2022-10-17T18:29:57Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Which documentation?\r\n\r\nTutorials site\r\n\r\n### What needs to be documented?\r\n\r\nThis is a follow-up of https://github.com/scikit-hep/awkward/pull/1776#pullrequestreview-1144743439, which is an approval of merging the `docs` branch into `main` as-is, but with some to-do items to be picked up later. This issue copies those into a bulleted list.\r\n\r\n  - [ ] Vertical margin around the badges/buttons on the front page so that they are still distinct when the window is narrow or someone is looking at it on their phone.\r\n  - [ ] Helpful messages on the \"Try it in your browser\" page (see below).\r\n  - [ ] Better sizing of Retrolite on small screens\r\n  - [x] All of the sections containing `ak.*` functions (everything defined in `src/awkward/operations/`) should be contiguous, before the section on \"Low-level layouts\". This is so that someone searching for an operation they can't quite remember the name of is less likely to miss it. The \"Converting between backends\", \"Indexing and grouping\", and \"Copying and packing arrays\" belong to this category.\r\n  - [x] Remove the \"Additional documentation\" section (which is unnecessary and out of date, including the diagram).\r\n  - [x] The kernel specification should be generated and included.\r\n  - [x] The AwkwardForth sub-sections may be suppressed on `reference/index.html` and the kernel specification sub-sections _have to_ be suppressed. They would flood that page.\r\n\r\nThat's it!",
  "closed_at":"2022-10-25T17:26:03Z",
  "comments":5,
  "created_at":"2022-10-17T20:19:35Z",
  "id":1412169985,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ULAEB",
  "number":1799,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Requests from review of #1776 (merging docs into main).",
  "updated_at":"2022-10-25T17:26:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR addresses one of the issues in #1799; fixing the kernel docs.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-touchups/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-20T21:16:32Z",
  "comments":4,
  "created_at":"2022-10-17T21:07:41Z",
  "draft":false,
  "id":1412227271,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A9uNh",
  "number":1800,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-20T21:16:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: fix kernel generation",
  "updated_at":"2022-10-20T21:16:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/setup-cfg-fmt: v2.0.0 \u2192 v2.1.0](https://github.com/asottile/setup-cfg-fmt/compare/v2.0.0...v2.1.0)\n- [github.com/asottile/pyupgrade: v3.0.0 \u2192 v3.1.0](https://github.com/asottile/pyupgrade/compare/v3.0.0...v3.1.0)\n- [github.com/codespell-project/codespell: v2.2.1 \u2192 v2.2.2](https://github.com/codespell-project/codespell/compare/v2.2.1...v2.2.2)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-10-25T19:44:50Z",
  "comments":1,
  "created_at":"2022-10-17T21:51:49Z",
  "draft":false,
  "id":1412274962,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A94up",
  "number":1801,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-25T19:44:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-10-25T19:44:51Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"See https://github.com/scikit-hep/awkward/commit/b315e6519eb78c8083e088e3ca065cfdb3af5d31#r87085384, quoted below. It's a follow-up on #1781.\r\n\r\nThese (lines [30](https://github.com/scikit-hep/awkward/blob/580f3fad01327a6b1d8c2e1edbaf324f35fb7796/tests/test_1781-rdataframe-snapshot.py#L30) and [47](https://github.com/scikit-hep/awkward/blob/580f3fad01327a6b1d8c2e1edbaf324f35fb7796/tests/test_1781-rdataframe-snapshot.py#L47)) need to use the `tmp_path` fixture, like\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/580f3fad01327a6b1d8c2e1edbaf324f35fb7796/tests/test_1619-from-parquet-empty-field.py#L13-L29\r\n\r\nso that it doesn't leave `test-integers.root` and `test-listarray.root` files in the main directory after running.\r\n\r\nThanks!",
  "closed_at":"2022-10-18T20:54:33Z",
  "comments":1,
  "created_at":"2022-10-17T22:56:05Z",
  "id":1412339706,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ULpf6",
  "number":1802,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Write output files into a temporary directory during tests.",
  "updated_at":"2022-10-18T20:54:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"`vector_design_prototype` no longer exists in vector - https://github.com/scikit-hep/vector/pull/272. I have commented out the reference as there are plans to bring it back - https://github.com/scikit-hep/vector/issues/273 - in the future.",
  "closed_at":"2022-10-18T17:43:22Z",
  "comments":3,
  "created_at":"2022-10-18T07:59:36Z",
  "draft":false,
  "id":1412752101,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A_eRa",
  "number":1803,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-18T17:43:22Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"docs: remove `vector_design_prototype`'s reference",
  "updated_at":"2022-10-18T18:06:42Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"fixes https://github.com/scikit-hep/awkward/issues/1802",
  "closed_at":"2022-10-18T20:54:32Z",
  "comments":2,
  "created_at":"2022-10-18T09:07:58Z",
  "draft":false,
  "id":1412849279,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5A_ywx",
  "number":1804,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-18T20:54:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"test: use a temp dir for writting out the test files",
  "updated_at":"2022-10-18T20:54:33Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nThe API does not allow one to create an empty ak.Array with a given type. It is missing the equivalent of a dtype argument.\r\n\r\n```\r\na = Array([[1.2], []])  # succeeds, type inferred\r\nb = Array([])  # succeeds, but type '0 * unknown'\r\n```\r\n\r\nPlease allow the user to pass a `type` keyword, so that they can create empty arrays with an appropriate type.",
  "closed_at":"2023-05-05T15:31:50Z",
  "comments":8,
  "created_at":"2022-10-18T12:12:39Z",
  "id":1413111596,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UOl8s",
  "number":1805,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Allow specifying type for empty Array",
  "updated_at":"2023-05-05T15:31:50Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\n1.10.1\n\n### Description and code to reproduce\n\nI tried to run `ak.zip` on Arrays of Jagged type, where some have the leaf type float32, and some have leaf type int32. This produces an error:\r\n```\r\nValueError                                Traceback (most recent call last)\r\nCell In [57], line 27\r\n     25 if len(px) > chunk:\r\n     26     data = {\r\n---> 27         \"\": ak.zip({\r\n     28             \"px\": ak.Array(px),\r\n     29             \"py\": ak.Array(py),\r\n     30             \"pz\": ak.Array(pz),\r\n     31             \"m\": ak.Array(m),\r\n     32             \"vx\": ak.Array(vx),\r\n     33             \"vy\": ak.Array(vy),\r\n     34             \"vz\": ak.Array(vz),\r\n     35             \"status\": ak.Array(status),\r\n     36             # \"parents\": ak.Array(parents)\r\n     37         })\r\n     38     }\r\n     39     if \"tree\" in f:\r\n     40         f[\"tree\"].extend(data)\r\n\r\nFile ~/Extern/impy/venv/lib/python3.10/site-packages/awkward/operations/structure.py:665, in zip(arrays, depth_limit, parameters, with_name, highlevel, behavior, right_broadcast, optiontype_outside_record)\r\n    662     else:\r\n    663         return None\r\n--> 665 out = ak._util.broadcast_and_apply(\r\n    666     layouts,\r\n    667     getfunction,\r\n    668     behavior,\r\n    669     right_broadcast=right_broadcast,\r\n    670     pass_depth=True,\r\n    671 )\r\n    672 assert isinstance(out, tuple) and len(out) == 1\r\n    673 out = out[0]\r\n\r\nFile ~/Extern/impy/venv/lib/python3.10/site-packages/awkward/_util.py:1172, in broadcast_and_apply(inputs, getfunction, behavior, allow_records, pass_depth, pass_user, user, left_broadcast, right_broadcast, numpy_to_regular, regular_to_jagged)\r\n   1170 else:\r\n   1171     isscalar = []\r\n-> 1172     out = apply(broadcast_pack(inputs, isscalar), 0, user)\r\n   1173     assert isinstance(out, tuple)\r\n   1174     return tuple(broadcast_unpack(x, isscalar) for x in out)\r\n\r\nFile ~/Extern/impy/venv/lib/python3.10/site-packages/awkward/_util.py:915, in broadcast_and_apply.<locals>.apply(inputs, depth, user)\r\n    913         nextinputs.append(x.content[: len(x) * x.size])\r\n    914     else:\r\n--> 915         raise ValueError(\r\n    916             \"cannot broadcast RegularArray of size \"\r\n    917             \"{} with RegularArray of size {}\".format(\r\n    918                 x.size, maxsize\r\n    919             )\r\n    920             + exception_suffix(__file__)\r\n    921         )\r\n    922 else:\r\n    923     nextinputs.append(x)\r\n\r\nValueError: cannot broadcast RegularArray of size 101 with RegularArray of size 202\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.10.1/src/awkward/_util.py#L920)\r\n```",
  "closed_at":"2022-10-18T12:56:41Z",
  "comments":1,
  "created_at":"2022-10-18T12:47:24Z",
  "id":1413168930,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UOz8i",
  "number":1806,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.zip fails for arrays with mixed leave type",
  "updated_at":"2022-10-18T12:56:47Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\r\n\r\n1.10.1\r\n\r\n### Description and code to reproduce\r\n\r\n```py\r\na = np.array([1, 2, 3], dtype=np.int32)\r\nak.Array(a)  # <Array [1, 2, 3] type='3 * int32'> OK\r\nak.Array([a])   # <Array [[1, 2, 3]] type='1 * var * int64'> BAD\r\n```\r\nAs you can see, in the varlength context, Array deduces int64 although the underlying type is int32. It is important that Array deduces the exact type, since the array in 64 bit wastes memory and CPU cycles.\r\n\r\nThis is also important when these arrays are written to ROOT files. Using types that are too large wastes disk space.",
  "closed_at":null,
  "comments":18,
  "created_at":"2022-10-18T14:56:34Z",
  "id":1413378618,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UPnI6",
  "number":1807,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"ak.Array wrongly deduces input type",
  "updated_at":"2022-10-19T23:31:57Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Which documentation?\n\nTutorials site\n\n### What needs to be documented?\n\nhttps://github.com/scikit-hep/uproot5/issues/760 points out a dead link in the Uproot docs:\r\n\r\nhttps://awkward-array.readthedocs.io/en/latest/ak.types.Type.html\r\n\r\nThat's an indication that this link used to work and it has probably been shared beyond just the Uproot docs. It doesn't have the `_auto` in the URL because it was one of the hand-written reST files, not one made by `prepare_docstrings.py`.\r\n\r\nLooking in the `docs` branch by swapping `latest` with `docs`, it still doesn't exist, but\r\n\r\nhttps://awkward-array.readthedocs.io/en/docs/reference/generated/ak.types.Type.html\r\n\r\ndoes exist, and it's where this URL is supposed to go. So we'll need a redirect.\r\n\r\nAlso, the layout URLs that are now\r\n\r\nhttps://awkward-array.readthedocs.io/en/docs/reference/generated/ak.contents.Content.html\r\n\r\n(unfortunately!) need a redirect from \"`ak.layout.`\" to \"`ak.contents.`\" (all the Content classes). Similarly for \"`ak.layout.Record`\" (only one Record) \u2192 \"`ak.record.Record`\" and \"`ak.layout.Index`\" \u2192 \"`ak.index.Index`\" (all the Index classes). Unless we want those links to fail as an indicator to users that the name no longer exists? Maybe better, a page briefly describing the name change (rather than an automated redirect)?",
  "closed_at":"2022-10-20T20:44:22Z",
  "comments":1,
  "created_at":"2022-10-18T17:51:53Z",
  "id":1413621033,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UQiUp",
  "number":1808,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"URL mapping in new docs",
  "updated_at":"2022-10-20T20:44:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes https://github.com/scikit-hep/awkward/issues/1658",
  "closed_at":"2023-02-20T17:32:46Z",
  "comments":18,
  "created_at":"2022-10-18T18:45:05Z",
  "draft":false,
  "id":1413685053,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BCmWU",
  "number":1809,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2023-02-20T17:32:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: Awkward Arrays in Numba's CUDA target",
  "updated_at":"2023-02-20T22:17:08Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1808 ",
  "closed_at":"2022-10-20T07:23:49Z",
  "comments":2,
  "created_at":"2022-10-18T19:39:57Z",
  "draft":false,
  "id":1413749001,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BC0Fl",
  "number":1810,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: fix redirects",
  "updated_at":"2022-10-20T07:24:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Our current reduction through a `RegularArray` is done by casting to and from a `ListOffsetArray`. As described in #1790, [this has two consequences](https://github.com/scikit-hep/awkward/issues/1790#issuecomment-1279831724):\r\n- We lose regular dimensions quite easily\r\n- We lose information in the case of zero-length dimensions\r\n\r\nThe first point can be fixed (this code excerpt from `RegularArray` + the changes to `ListOffsetArray` in this PR):\r\n\r\n<details>\r\n<summary>Fix for <code>RegularArray._reduce_next</code> </summary>\r\n\r\n```python3\r\n\r\n        branch, depth = self.branch_depth\r\n\r\n        if depth == negaxis:\r\n            if keepdims:\r\n                return ak.contents.RegularArray(\r\n                    out.content.toRegularArray(),\r\n                    1,\r\n                    self.length,\r\n                    None,\r\n                    None,\r\n                    self._nplike,\r\n                )\r\n            else:\r\n                return out.toRegularArray()\r\n\r\n        if keepdims and depth == negaxis + 1:\r\n            outcontent = out.content\r\n            assert isinstance(\r\n                outcontent, (ak.contents.ListOffsetArray, ak.contents.RegularArray)\r\n            )\r\n            # Determined by self._content._reduce_next(..., len(self), ...)\r\n            outcontent = ak.contents.RegularArray(\r\n                outcontent.content,\r\n                size=1,\r\n                zeros_length=len(self),\r\n            )\r\n            out = ak.contents.ListOffsetArray(\r\n                out.offsets,\r\n                outcontent,\r\n                out.identifier,\r\n                out.parameters,\r\n                out.nplike\r\n            )\r\n        elif depth > negaxis + 1:\r\n            outcontent = out.content\r\n            assert isinstance(\r\n                outcontent, (ak.contents.ListOffsetArray, ak.contents.RegularArray)\r\n            )\r\n            # Determined by self._content._reduce_next(..., len(self), ...)\r\n            outcontent = ak.contents.RegularArray(\r\n                outcontent.content,\r\n                size=self._size,\r\n                zeros_length=len(self),\r\n            )\r\n            out = ak.contents.ListOffsetArray(\r\n                out.offsets,\r\n                outcontent,\r\n                out.identifier,\r\n                out.parameters,\r\n                out.nplike\r\n            )\r\n```\r\n\r\n</details>\r\n\r\n\r\nThis second point means that just calling `toRegularArray()` on the `ListOffsetArray._reduce_next` reduction result is not sufficient; in the process of reducing the regular child of a ragged array with empty lists, we _lose_ information about these empty lists, which then need care in order to be reconstructed. In addition to this bug, the whole process of going to-from `ListOffsetArray64` here lossy, and involves multiple kernels, which reduces performance. \r\n\r\nThe actual kernels required to implement `RegularArray._reduce_next` _seem_ fairly trivial. So, I wrote this PR to implement them (only for reduction). \r\n\r\nThis kind of code is really hard to reason about, though, so any extra pairs of eyes on the assumptions that I've made here would be very helpful. I might have got this horribly wrong; it's easy to get the wrong mental model, I've found.\r\n\r\nSpecifically, this PR:\r\n- [x] Changes `ListOffsetArray` to return a `RegularArray` instead of `ListOffsetArray` when `keepdims=True`. This seems wrong at first, but the return result of `_reduce_next` is actually the _parent_ layout. It's the parent's responsibility to coerce this to the correct type. `RegularArray` is lower overhead than a ragged type.\r\n- [x] Fixes cases where regular types were lost in reduction.\r\n- [x] Assumes that parent ordering _does not matter_ now that we have removed the `findgaps` kernel (we still assume that parents need to be locally contiguous, i.e. `1 1 3 3 2 2` vs `1 3 1 3 2 2`). I think this is reasonable, as there _are_ good reasons for requiring local contiguity, but fewer for global.\r\n- [x] Fix the tests that assume we lose regularity.\r\n- [x] Make `keepdims` always insert a length=1 axis to ensure broadcastability\r\n- [x] Closes #1790 \r\n \r\nThis PR does not:\r\n- Do the same for `RegularArray._sort_next` etc. These should be done at some point (or at least, the ragged/regular type preservation improved), but there's future work on unifying `sort` and `argsort` that will make this slightly easier.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-proper-regulararray/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-20T19:55:26Z",
  "comments":8,
  "created_at":"2022-10-19T11:06:31Z",
  "draft":false,
  "id":1414767245,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BGQ65",
  "number":1811,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-20T19:55:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: add `RegularArray._reduce_next` implementation",
  "updated_at":"2022-10-20T19:55:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Now we explicitly enable a version on RTD, and then build it. A separate workflow edits the PR description to show a link to the rendered docs.",
  "closed_at":"2022-10-20T06:38:18Z",
  "comments":2,
  "created_at":"2022-10-19T17:28:14Z",
  "draft":false,
  "id":1415344417,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BINFb",
  "number":1812,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-20T06:38:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: enable versions for built docs",
  "updated_at":"2022-10-20T06:38:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Backport of #1811 \r\n\r\n- [ ] updated tests",
  "closed_at":"2022-10-20T20:49:24Z",
  "comments":7,
  "created_at":"2022-10-19T21:58:39Z",
  "draft":false,
  "id":1415630195,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BJKaf",
  "number":1813,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-20T20:49:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: add `RegularArray._reduce_next` implementation (backport)",
  "updated_at":"2022-10-20T20:49:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- readthedocs-preview awkward-array start -->\r\n----\n:books: Documentation preview :books:: https://awkward-array--1814.org.readthedocs.build/en/1814/\n\r\n<!-- readthedocs-preview awkward-array end -->",
  "closed_at":"2022-10-20T07:24:27Z",
  "comments":0,
  "created_at":"2022-10-20T07:24:17Z",
  "draft":false,
  "id":1416107582,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BKxcW",
  "number":1814,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: fix redirects",
  "updated_at":"2022-10-20T07:24:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR fixes the redirects that map old v1 URLs onto v2.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-fix-url-redirects/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-20T20:44:21Z",
  "comments":8,
  "created_at":"2022-10-20T07:26:17Z",
  "draft":false,
  "id":1416109986,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BKx8g",
  "number":1815,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-20T20:44:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: fix redirects",
  "updated_at":"2022-10-20T20:44:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"I tried to use the RTD action in #1812, but it transpires that this leverages the RTD GitHub integration that we aren't using. We couldn't see this until it made it into a base branch, so I only discovered it after the merge.\r\n\r\nSo, this PR \r\n- Roll our own PR message editing machinery.\r\n- Replace Python with bash (avoid Python step in job).\r\n- Bundle new JS to edit commit message.\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-disable-pr-link/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-20T18:00:41Z",
  "comments":1,
  "created_at":"2022-10-20T08:51:03Z",
  "draft":false,
  "id":1416223152,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BLJtX",
  "number":1816,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-20T18:00:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: use custom PR message action",
  "updated_at":"2022-10-20T18:00:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nCurrently the WASM build is quite slow, because no caching takes place.",
  "closed_at":"2023-07-02T18:03:03Z",
  "comments":3,
  "created_at":"2022-10-20T16:32:47Z",
  "id":1416931122,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UdKcy",
  "number":1817,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Building the WASM wheel ignores `ccache`",
  "updated_at":"2023-07-02T18:03:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nSee title!",
  "closed_at":"2022-10-25T12:10:19Z",
  "comments":1,
  "created_at":"2022-10-20T20:36:23Z",
  "id":1417242583,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UeWfX",
  "number":1818,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.flatten` and `ak.unflatten` should implement support for `axis=None`",
  "updated_at":"2022-10-25T12:10:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Which documentation?\n\nTutorials site\n\n### What needs to be documented?\n\nStefan gave us a `data-domain` for Plausible; we should add this text\r\n\r\n```html\r\n<script defer data-domain=\"awkward-array.org\" src=\"https://views.scientific-python.org/js/plausible.js\"></script>\r\n```\r\n\r\nto every HTML page. The HTML is generated by Sphinx, so it has to go into a template somewhere. I think we don't actually have the default HTML templates; I think that all of the HTML in [docs-sphinx/_templates](https://github.com/scikit-hep/awkward/tree/main/docs-sphinx/_templates) is an override. For instance, the [breadcrumbs.html](https://github.com/scikit-hep/awkward/blob/main/docs-sphinx/_templates/breadcrumbs.html) is just to eliminate something that would be on the default page (the \"fork me on GitHub\" ribbon?).\r\n\r\n@agoose77, you've recently added [funding.html](https://github.com/scikit-hep/awkward/blob/main/docs-sphinx/_templates/funding.html), which appears at the bottom of every page. (I just checked.) If the `<script>` is added there, I think it would reach every page.\r\n\r\nExcept redirects. The [redirect.html](https://github.com/scikit-hep/awkward/blob/main/docs-sphinx/_templates/redirect.html) describes an entire page. It's debatable whether we'd want to count redirects. It would tell us how many people are using old URLs versus new URLs, but I don't see how useful that information is, and it would have to be disaggregated from the totals, since redirected links shouldn't be counted twice if we're interested in how many people went to a given _topic_ (not _page_). I vote for no statistics on redirects, and I'm not even sure if the script will work if the redirect happens through the meta mechanism (because such an access has `<noscript>`.\r\n\r\nArguably, a `<script>` element ought to go in the HTML `<head>`, rather than the `<body>` (`footer.html`). That's where I usually see them. Actually, I stand corrected: they're legal anywhere, and there are reasons to put them in the `<body>`. [This StackOverflow post](https://stackoverflow.com/a/24070373/1623645) presents the pros and cons: page rendering will pause while a script is being downloaded an executed, and that's no good. We could follow that page's \"antiquated recommendation\" by putting the `<script>` at the end of the page (`footer.html`); the reason against it doesn't apply: we don't need the statistics-counter script to run to render the page\u2014that can happen late. The \"modern approach\" is to use `async` or `defer`, which I just noticed is in our snippet, so there are no constraints on when this snippet can be placed. (And it could be `async`, rather than `defer`, because we don't care whether it runs before or after other scripts on the page.)\r\n\r\nThe only argument I can see for putting it in the `<head>`, then, is that if the statistics-counter starts too late, we could undercount our bounce rate: users click the back button before rendering gets to the `<script>` and the page view gets counted. There will always be some cut-off in the bounce rate, much like $p_T$ in a tracking distribution, since very small values are hard to measure. Having a lower implicit cut on bounce rate, rather than a higher implicit cut, doesn't sound very important to me.\r\n\r\nTrying to get it into the `<head>` would mean overloading more templates, and I don't like to overload Sphinx templates because it means we no longer get version updates for that part of the page, and who knows if the template designer intends some relationship between two parts of a page, starting with a particular version number? So I'm in favor of adding the `<script>` to `footer.html`, and `defer` may be replaced by `async` just to loosen an unnecessary constraint for the browser.\r\n\r\nSorry for the long-winded write-up; just thinking through the issues while I type!\r\n\r\nOh, one last thing: let's add the statistics-counter to the new documentation _only_. In other words, _not_ the one with the `latest` tag. The v1 documentation (`latest`) is split between two sites, I don't want to add it to the Netlify site, and the statistics will be easier to interpret if we have it on only one site: we'll know what page is meant by a given URL. We should also see the turn-on curve when the new documentation goes public. If we include the old documentation, we might not be able to filter it out of the statistics, since some of the URLs are the same.",
  "closed_at":"2022-10-24T17:42:13Z",
  "comments":0,
  "created_at":"2022-10-21T13:56:19Z",
  "id":1418383863,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UitH3",
  "number":1819,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Add statistics tracker to the new website",
  "updated_at":"2022-10-24T17:42:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nIt's just a reminder to implement `bytestring` See https://github.com/scikit-hep/awkward/issues/1438",
  "closed_at":null,
  "comments":0,
  "created_at":"2022-10-21T15:14:18Z",
  "id":1418495094,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UjIR2",
  "number":1820,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"ArrayBuilder-in-Numba is missing `bytestring`",
  "updated_at":"2022-10-21T15:20:50Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nOriginally posted by @jpivarski in https://github.com/scikit-hep/awkward/issues/1438: \"ArrayBuilder-in-Numba's lack of context managers `list`, `record`, and `tuple` is known because it's waiting on context managers as a feature from Numba, but it sounds like this will be implemented soon, and Awkward Array will be a first use-case.\"",
  "closed_at":null,
  "comments":1,
  "created_at":"2022-10-21T15:19:58Z",
  "id":1418501998,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UjJ9u",
  "number":1821,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"ArrayBuilder-in-Numba context managers",
  "updated_at":"2024-01-20T00:44:16Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1819 \r\n\r\nThis was particularly straightforward because the PyData Sphinx Theme already supports Plausible.js, and our redirect system uses pre-rendered HTML (and therefore is not injected with the analytics JS).\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-add-analytics/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-24T17:42:12Z",
  "comments":0,
  "created_at":"2022-10-22T13:37:01Z",
  "draft":false,
  "id":1419302281,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BVjG_",
  "number":1822,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-24T17:42:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: enable plausible.js analytics",
  "updated_at":"2022-10-24T17:42:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nThe `apply` function for this case does not return (or recurse)",
  "closed_at":"2022-10-25T18:54:05Z",
  "comments":0,
  "created_at":"2022-10-23T12:22:07Z",
  "id":1419777030,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5UoBQG",
  "number":1823,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.fill_none(axis=None)` does nothing",
  "updated_at":"2022-10-25T18:54:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Awkward kernels need to be executed asynchronously, and therefore their error messages might be raised at a time when the stack trace does not point to when they were called, and therefore we need to keep a queue of potential error message substrings. This was all discussed in #1321.\r\n\r\nIf that queue of potential error messages holds references to arrays (arguments to the asynchronous functions), the memory used by those arrays could be too much. It would be called a memory leak because \"maybe you _might_ need to raise an error\" is not a good enough reason to keep all of that data in memory, especially since the error message only shows a human-readable part of it. So array arguments for these potential error messages are stringified early. That is PR #1393.\r\n\r\nBUT! Now the early stringification is too expensive; it's using lots of CPU time to make strings for error messages that might not happen. There's always a speed-memory tradeoff, but in the usual case of CPU-based, non-asynchronous execution, there's no reason for this. So as an exception to the exception, the eager nplikes (all of them except for `CuPy`) do not stringify early. This is accomplished by passing an unevaluated function as the potential error message string, which is evaluated only if necessary. That unevaluated function carries a reference to the whole array, so it would be a memory leak if there was a long queue of them, but eager evaluation means that there will never be more than one of them.\r\n\r\nIn this test:\r\n\r\n```python\r\nimport awkward as ak, numpy as np\r\nimport cProfile\r\narray = ak.Array(np.arange(1000))\r\ncProfile.run(\"tmp = [ak.count(array) for _ in range(10000)]\", sort=\"cumtime\")\r\n```\r\n\r\nThe result in `main` is:\r\n\r\n<details>\r\n  <summary>cProfile output</summary>\r\n\r\n```\r\n         9430113 function calls (9190093 primitive calls) in 2.706 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    2.706    2.706 {built-in method builtins.exec}\r\n        1    0.000    0.000    2.706    2.706 <string>:1(<module>)\r\n        1    0.005    0.005    2.706    2.706 <string>:1(<listcomp>)\r\n    10000    0.020    0.000    2.701    0.000 ak_count.py:8(count)\r\n    20000    0.092    0.000    2.527    0.000 _errors.py:116(__init__)\r\n    90000    0.121    0.000    1.970    0.000 _errors.py:39(format_argument)\r\n    20000    0.098    0.000    1.647    0.000 highlevel.py:1175(_repr)\r\n    10000    0.023    0.000    1.394    0.000 ak_count.py:95(_impl)\r\n    10000    0.017    0.000    1.314    0.000 ak_to_layout.py:12(to_layout)\r\n    20000    0.012    0.000    0.988    0.000 _prettyprint.py:207(valuestr)\r\n180000/20000    0.406    0.000    0.972    0.000 _prettyprint.py:69(valuestr_horiz)\r\n    20000    0.024    0.000    0.462    0.000 highlevel.py:448(type)\r\n    20000    0.029    0.000    0.434    0.000 traceback.py:200(extract_stack)\r\n    20000    0.125    0.000    0.398    0.000 traceback.py:321(extract)\r\n  2420000    0.206    0.000    0.347    0.000 {built-in method builtins.isinstance}\r\n    20000    0.012    0.000    0.244    0.000 form.py:394(type_from_behavior)\r\n   160000    0.095    0.000    0.212    0.000 _prettyprint.py:41(get_at)\r\n    20000    0.105    0.000    0.169    0.000 _util.py:266(typestrs)\r\n1370000/1290000    0.101    0.000    0.154    0.000 {built-in method builtins.len}\r\n    20000    0.009    0.000    0.147    0.000 content.py:81(form)\r\n   490000    0.065    0.000    0.141    0.000 abc.py:117(__instancecheck__)\r\n    20000    0.010    0.000    0.139    0.000 content.py:85(form_with_key)\r\n    20000    0.031    0.000    0.129    0.000 numpyarray.py:101(_form_with_key)\r\n    60000    0.037    0.000    0.118    0.000 linecache.py:52(checkcache)\r\n   160000    0.071    0.000    0.094    0.000 numpyarray.py:215(_getitem_at)\r\n    60000    0.031    0.000    0.090    0.000 traceback.py:285(line)\r\n   180000    0.058    0.000    0.088    0.000 _prettyprint.py:16(alternate)\r\n    90000    0.057    0.000    0.087    0.000 <frozen importlib._bootstrap>:1033(_handle_fromlist)\r\n    20000    0.025    0.000    0.080    0.000 numpyform.py:39(__init__)\r\n    20000    0.010    0.000    0.079    0.000 arraytype.py:38(__str__)\r\n    50000    0.078    0.000    0.078    0.000 {built-in method posix.stat}\r\n   490000    0.069    0.000    0.076    0.000 {built-in method _abc._abc_instancecheck}\r\n    20000    0.012    0.000    0.067    0.000 arraytype.py:44(_str)\r\n    20000    0.020    0.000    0.063    0.000 numpyform.py:102(_type)\r\n    80000    0.014    0.000    0.057    0.000 highlevel.py:476(__len__)\r\n    20000    0.031    0.000    0.055    0.000 numpytype.py:124(_str)\r\n    60000    0.023    0.000    0.053    0.000 linecache.py:26(getline)\r\n   250000    0.032    0.000    0.043    0.000 _util.py:83(isstr)\r\n    20000    0.011    0.000    0.041    0.000 numpytype.py:96(__init__)\r\n    40000    0.022    0.000    0.040    0.000 numpytype.py:22(primitive_to_dtype)\r\n    60000    0.028    0.000    0.039    0.000 numpytype.py:41(dtype_to_primitive)\r\n   100000    0.021    0.000    0.038    0.000 content.py:178(__len__)\r\n    20000    0.014    0.000    0.030    0.000 arraytype.py:10(__init__)\r\n   430000    0.030    0.000    0.030    0.000 {built-in method builtins.hasattr}\r\n    60000    0.017    0.000    0.027    0.000 linecache.py:36(getlines)\r\n    20000    0.013    0.000    0.027    0.000 _errors.py:27(__enter__)\r\n    10000    0.006    0.000    0.027    0.000 content.py:1336(completely_flatten)\r\n    90000    0.027    0.000    0.027    0.000 {built-in method builtins.repr}\r\n    10000    0.003    0.000    0.026    0.000 ak_count.py:119(<listcomp>)\r\n    60000    0.018    0.000    0.025    0.000 linecache.py:147(lazycache)\r\n    10000    0.005    0.000    0.022    0.000 ak_count.py:109(map)\r\n    10000    0.005    0.000    0.021    0.000 numpyarray.py:1262(_completely_flatten)\r\n    40000    0.014    0.000    0.018    0.000 _errors.py:20(primary)\r\n   100000    0.017    0.000    0.017    0.000 numpyarray.py:125(length)\r\n    20000    0.008    0.000    0.017    0.000 _errors.py:34(__exit__)\r\n    10000    0.005    0.000    0.017    0.000 nplikes.py:159(size)\r\n    60000    0.016    0.000    0.016    0.000 traceback.py:243(__init__)\r\n    80000    0.016    0.000    0.016    0.000 traceback.py:292(walk_stack)\r\n    80006    0.015    0.000    0.015    0.000 {method 'match' of 're.Pattern' objects}\r\n    20000    0.010    0.000    0.015    0.000 _util.py:71(isint)\r\n    10000    0.009    0.000    0.014    0.000 ak_to_layout.py:48(_impl)\r\n   160000    0.014    0.000    0.014    0.000 {built-in method builtins.next}\r\n   140002    0.013    0.000    0.013    0.000 {method 'get' of 'dict' objects}\r\n    20000    0.008    0.000    0.012    0.000 _prettyprint.py:12(half)\r\n    10000    0.005    0.000    0.012    0.000 <__array_function__ internals>:177(size)\r\n   140000    0.012    0.000    0.012    0.000 {method 'append' of 'list' objects}\r\n    10000    0.006    0.000    0.011    0.000 numpyarray.py:96(raw)\r\n   100000    0.009    0.000    0.009    0.000 type.py:19(parameter)\r\n    20000    0.007    0.000    0.008    0.000 form.py:278(_init)\r\n    80000    0.008    0.000    0.008    0.000 content.py:77(nplike)\r\n    80000    0.008    0.000    0.008    0.000 {method 'extend' of 'list' objects}\r\n    10002    0.004    0.000    0.007    0.000 linecache.py:80(updatecache)\r\n10015/10005    0.002    0.000    0.007    0.000 abc.py:121(__subclasscheck__)\r\n    20000    0.005    0.000    0.007    0.000 type.py:49(_str_parameters)\r\n    60000    0.007    0.000    0.007    0.000 {method 'insert' of 'list' objects}\r\n    40000    0.007    0.000    0.007    0.000 {method 'join' of 'str' objects}\r\n    20000    0.005    0.000    0.006    0.000 type.py:37(_str_categorical_begin)\r\n    10000    0.004    0.000    0.006    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\r\n    60000    0.006    0.000    0.006    0.000 {method 'strip' of 'str' objects}\r\n    60000    0.006    0.000    0.006    0.000 {method 'upper' of 'str' objects}\r\n10015/10005    0.004    0.000    0.005    0.000 {built-in method _abc._abc_subclasscheck}\r\n    20000    0.004    0.000    0.005    0.000 type.py:43(_str_categorical_end)\r\n    60000    0.005    0.000    0.005    0.000 {method 'add' of 'set' objects}\r\n    10000    0.005    0.000    0.005    0.000 {method 'reshape' of 'numpy.ndarray' objects}\r\n    20000    0.004    0.000    0.004    0.000 _errors.py:24(__init__)\r\n    40000    0.004    0.000    0.004    0.000 {built-in method builtins.iter}\r\n    20000    0.004    0.000    0.004    0.000 {built-in method builtins.max}\r\n    40000    0.004    0.000    0.004    0.000 {method 'items' of 'dict' objects}\r\n    20000    0.004    0.000    0.004    0.000 {built-in method math.ceil}\r\n    20002    0.003    0.000    0.003    0.000 {method 'endswith' of 'str' objects}\r\n    10000    0.003    0.000    0.003    0.000 ak_count.py:112(reduce)\r\n    20000    0.003    0.000    0.003    0.000 _util.py:140(overlay_behavior)\r\n    20004    0.003    0.000    0.003    0.000 {method 'startswith' of 'str' objects}\r\n    20000    0.003    0.000    0.003    0.000 {built-in method sys._getframe}\r\n    10000    0.002    0.000    0.003    0.000 nplikes.py:512(raw)\r\n    10000    0.003    0.000    0.003    0.000 fromnumeric.py:3163(size)\r\n    20000    0.002    0.000    0.002    0.000 _util.py:281(gettypestr)\r\n    20000    0.002    0.000    0.002    0.000 {method 'reverse' of 'list' objects}\r\n    20000    0.002    0.000    0.002    0.000 {method 'clear' of 'dict' objects}\r\n    10000    0.002    0.000    0.002    0.000 {method 'update' of 'dict' objects}\r\n    20000    0.002    0.000    0.002    0.000 content.py:90(getkey)\r\n    10000    0.002    0.000    0.002    0.000 highlevel.py:263(layout)\r\n    10000    0.001    0.000    0.001    0.000 _collections_abc.py:315(__subclasshook__)\r\n    10000    0.001    0.000    0.001    0.000 numpyarray.py:61(data)\r\n    10000    0.001    0.000    0.001    0.000 fromnumeric.py:3159(_size_dispatcher)\r\n```\r\n\r\n</details>\r\n\r\nIf we just remove the `traceback` from these calls (expensive and _cannot_ be relocated to a delayed function without changing its meaning), we get:\r\n\r\n<details>\r\n  <summary>cProfile output</summary>\r\n\r\n```\r\n         8820049 function calls (8580029 primitive calls) in 2.281 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    2.281    2.281 {built-in method builtins.exec}\r\n        1    0.000    0.000    2.281    2.281 <string>:1(<module>)\r\n        1    0.005    0.005    2.281    2.281 <string>:1(<listcomp>)\r\n    10000    0.018    0.000    2.276    0.000 ak_count.py:8(count)\r\n    20000    0.029    0.000    2.118    0.000 _errors.py:128(__init__)\r\n    20000    0.060    0.000    1.961    0.000 _errors.py:115(_string_arguments)\r\n    90000    0.112    0.000    1.876    0.000 _errors.py:36(format_argument)\r\n    20000    0.087    0.000    1.566    0.000 highlevel.py:1175(_repr)\r\n    10000    0.020    0.000    1.172    0.000 ak_count.py:95(_impl)\r\n    10000    0.015    0.000    1.097    0.000 ak_to_layout.py:12(to_layout)\r\n    20000    0.011    0.000    0.946    0.000 _prettyprint.py:207(valuestr)\r\n180000/20000    0.387    0.000    0.931    0.000 _prettyprint.py:69(valuestr_horiz)\r\n    20000    0.023    0.000    0.441    0.000 highlevel.py:448(type)\r\n  2460000    0.201    0.000    0.337    0.000 {built-in method builtins.isinstance}\r\n    20000    0.011    0.000    0.238    0.000 form.py:394(type_from_behavior)\r\n   160000    0.094    0.000    0.206    0.000 _prettyprint.py:41(get_at)\r\n    20000    0.103    0.000    0.166    0.000 _util.py:266(typestrs)\r\n    20000    0.008    0.000    0.137    0.000 content.py:81(form)\r\n1160000/1080000    0.087    0.000    0.137    0.000 {built-in method builtins.len}\r\n   490000    0.063    0.000    0.135    0.000 abc.py:117(__instancecheck__)\r\n    20000    0.009    0.000    0.129    0.000 content.py:85(form_with_key)\r\n    20000    0.004    0.000    0.122    0.000 {built-in method builtins.all}\r\n    20000    0.029    0.000    0.120    0.000 numpyarray.py:101(_form_with_key)\r\n    40000    0.012    0.000    0.120    0.000 _errors.py:129(<genexpr>)\r\n    20000    0.044    0.000    0.107    0.000 nplikes.py:930(nplike_of)\r\n   160000    0.067    0.000    0.089    0.000 numpyarray.py:215(_getitem_at)\r\n    90000    0.057    0.000    0.086    0.000 <frozen importlib._bootstrap>:1033(_handle_fromlist)\r\n   180000    0.055    0.000    0.082    0.000 _prettyprint.py:16(alternate)\r\n    20000    0.022    0.000    0.073    0.000 numpyform.py:39(__init__)\r\n    20000    0.009    0.000    0.073    0.000 arraytype.py:38(__str__)\r\n   490000    0.066    0.000    0.073    0.000 {built-in method _abc._abc_instancecheck}\r\n    20000    0.019    0.000    0.061    0.000 numpyform.py:102(_type)\r\n    20000    0.011    0.000    0.061    0.000 arraytype.py:44(_str)\r\n    80000    0.014    0.000    0.054    0.000 highlevel.py:476(__len__)\r\n    20000    0.027    0.000    0.050    0.000 numpytype.py:124(_str)\r\n   250000    0.031    0.000    0.042    0.000 _util.py:83(isstr)\r\n    20000    0.011    0.000    0.040    0.000 numpytype.py:96(__init__)\r\n    40000    0.021    0.000    0.039    0.000 numpytype.py:22(primitive_to_dtype)\r\n    60000    0.027    0.000    0.038    0.000 numpytype.py:41(dtype_to_primitive)\r\n   100000    0.020    0.000    0.035    0.000 content.py:178(__len__)\r\n   430000    0.029    0.000    0.029    0.000 {built-in method builtins.hasattr}\r\n    20000    0.010    0.000    0.029    0.000 nplikes.py:890(is_own_array)\r\n    20000    0.013    0.000    0.028    0.000 arraytype.py:10(__init__)\r\n    10000    0.003    0.000    0.025    0.000 ak_count.py:119(<listcomp>)\r\n    10000    0.006    0.000    0.025    0.000 content.py:1336(completely_flatten)\r\n    90000    0.024    0.000    0.024    0.000 {built-in method builtins.repr}\r\n    20000    0.012    0.000    0.024    0.000 _errors.py:24(__enter__)\r\n    10000    0.005    0.000    0.022    0.000 ak_count.py:109(map)\r\n    10000    0.005    0.000    0.019    0.000 numpyarray.py:1262(_completely_flatten)\r\n    10000    0.005    0.000    0.016    0.000 nplikes.py:160(size)\r\n    20000    0.008    0.000    0.016    0.000 _errors.py:31(__exit__)\r\n    40000    0.012    0.000    0.015    0.000 _errors.py:17(primary)\r\n   100000    0.015    0.000    0.015    0.000 numpyarray.py:125(length)\r\n    80000    0.015    0.000    0.015    0.000 {method 'match' of 're.Pattern' objects}\r\n   160000    0.013    0.000    0.013    0.000 {built-in method builtins.next}\r\n   140000    0.013    0.000    0.013    0.000 {method 'get' of 'dict' objects}\r\n    20000    0.010    0.000    0.013    0.000 _util.py:71(isint)\r\n    20000    0.011    0.000    0.013    0.000 nplikes.py:901(is_array)\r\n    10000    0.007    0.000    0.011    0.000 ak_to_layout.py:48(_impl)\r\n    10000    0.004    0.000    0.011    0.000 <__array_function__ internals>:177(size)\r\n    20000    0.008    0.000    0.011    0.000 nplikes.py:741(is_own_array)\r\n    10000    0.006    0.000    0.011    0.000 numpyarray.py:96(raw)\r\n    20000    0.008    0.000    0.010    0.000 _prettyprint.py:12(half)\r\n   100000    0.009    0.000    0.009    0.000 type.py:19(parameter)\r\n    80000    0.008    0.000    0.008    0.000 content.py:77(nplike)\r\n    20000    0.007    0.000    0.008    0.000 form.py:278(_init)\r\n    20000    0.005    0.000    0.008    0.000 {built-in method builtins.any}\r\n10015/10005    0.002    0.000    0.007    0.000 abc.py:121(__subclasscheck__)\r\n    80000    0.007    0.000    0.007    0.000 {method 'append' of 'list' objects}\r\n    80000    0.007    0.000    0.007    0.000 {method 'extend' of 'list' objects}\r\n    20000    0.005    0.000    0.007    0.000 nplikes.py:529(is_own_array)\r\n    20000    0.005    0.000    0.007    0.000 type.py:49(_str_parameters)\r\n    40000    0.006    0.000    0.006    0.000 {method 'join' of 'str' objects}\r\n    20000    0.005    0.000    0.006    0.000 type.py:37(_str_categorical_begin)\r\n    60000    0.006    0.000    0.006    0.000 {method 'insert' of 'list' objects}\r\n    20000    0.005    0.000    0.006    0.000 nplikes.py:913(is_tracer)\r\n    10000    0.003    0.000    0.006    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\r\n10015/10005    0.004    0.000    0.006    0.000 {built-in method _abc._abc_subclasscheck}\r\n    60000    0.006    0.000    0.006    0.000 {method 'partition' of 'str' objects}\r\n    60000    0.005    0.000    0.005    0.000 {method 'upper' of 'str' objects}\r\n    20000    0.003    0.000    0.005    0.000 _typetracer.py:898(is_own_array)\r\n    20000    0.003    0.000    0.005    0.000 type.py:43(_str_categorical_end)\r\n    10000    0.004    0.000    0.004    0.000 {method 'reshape' of 'numpy.ndarray' objects}\r\n    20000    0.004    0.000    0.004    0.000 _errors.py:21(__init__)\r\n    40000    0.004    0.000    0.004    0.000 {built-in method builtins.iter}\r\n    40000    0.004    0.000    0.004    0.000 {method 'items' of 'dict' objects}\r\n    10000    0.003    0.000    0.004    0.000 ak_count.py:112(reduce)\r\n    20000    0.003    0.000    0.003    0.000 {built-in method builtins.max}\r\n    20000    0.003    0.000    0.003    0.000 _util.py:140(overlay_behavior)\r\n    20000    0.003    0.000    0.003    0.000 nplikes.py:16(instance)\r\n    10000    0.002    0.000    0.003    0.000 nplikes.py:513(raw)\r\n    20000    0.002    0.000    0.002    0.000 nplikes.py:953(<genexpr>)\r\n    20000    0.002    0.000    0.002    0.000 _util.py:281(gettypestr)\r\n    20000    0.002    0.000    0.002    0.000 {built-in method math.ceil}\r\n    10000    0.002    0.000    0.002    0.000 fromnumeric.py:3163(size)\r\n    20000    0.002    0.000    0.002    0.000 {method 'clear' of 'dict' objects}\r\n    20000    0.002    0.000    0.002    0.000 {built-in method builtins.getattr}\r\n    20000    0.002    0.000    0.002    0.000 content.py:90(getkey)\r\n    10000    0.002    0.000    0.002    0.000 {method 'update' of 'dict' objects}\r\n    10000    0.001    0.000    0.001    0.000 highlevel.py:263(layout)\r\n    10000    0.001    0.000    0.001    0.000 _collections_abc.py:315(__subclasshook__)\r\n    10000    0.001    0.000    0.001    0.000 fromnumeric.py:3159(_size_dispatcher)\r\n    10000    0.001    0.000    0.001    0.000 numpyarray.py:61(data)\r\n```\r\n\r\n</details>\r\n\r\nAnd if we apply this whole PR, we get:\r\n\r\n<details>\r\n  <summary>cProfile output</summary>\r\n\r\n```\r\n         2040004 function calls in 0.493 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    0.493    0.493 {built-in method builtins.exec}\r\n        1    0.000    0.000    0.493    0.493 <string>:1(<module>)\r\n        1    0.003    0.003    0.493    0.493 <string>:1(<listcomp>)\r\n    10000    0.012    0.000    0.490    0.000 ak_count.py:8(count)\r\n    20000    0.014    0.000    0.368    0.000 _errors.py:128(__init__)\r\n    20000    0.011    0.000    0.351    0.000 {built-in method builtins.all}\r\n   110000    0.028    0.000    0.340    0.000 _errors.py:129(<genexpr>)\r\n    90000    0.125    0.000    0.311    0.000 nplikes.py:930(nplike_of)\r\n    10000    0.015    0.000    0.249    0.000 ak_count.py:95(_impl)\r\n    10000    0.010    0.000    0.190    0.000 ak_to_layout.py:12(to_layout)\r\n    90000    0.030    0.000    0.077    0.000 nplikes.py:890(is_own_array)\r\n    90000    0.030    0.000    0.037    0.000 nplikes.py:741(is_own_array)\r\n    90000    0.019    0.000    0.024    0.000 nplikes.py:901(is_array)\r\n    90000    0.018    0.000    0.023    0.000 nplikes.py:913(is_tracer)\r\n    90000    0.014    0.000    0.021    0.000 {built-in method builtins.any}\r\n    90000    0.014    0.000    0.020    0.000 nplikes.py:529(is_own_array)\r\n    10000    0.003    0.000    0.019    0.000 ak_count.py:119(<listcomp>)\r\n    10000    0.004    0.000    0.019    0.000 content.py:1336(completely_flatten)\r\n    20000    0.009    0.000    0.018    0.000 _errors.py:24(__enter__)\r\n   270000    0.017    0.000    0.017    0.000 {method 'partition' of 'str' objects}\r\n    90000    0.012    0.000    0.017    0.000 _typetracer.py:898(is_own_array)\r\n    10000    0.004    0.000    0.017    0.000 ak_count.py:109(map)\r\n    10000    0.004    0.000    0.015    0.000 numpyarray.py:1262(_completely_flatten)\r\n   220000    0.014    0.000    0.014    0.000 {built-in method builtins.isinstance}\r\n    20000    0.007    0.000    0.013    0.000 _errors.py:31(__exit__)\r\n    40000    0.009    0.000    0.013    0.000 _errors.py:17(primary)\r\n    10000    0.003    0.000    0.012    0.000 nplikes.py:160(size)\r\n    10000    0.007    0.000    0.010    0.000 ak_to_layout.py:48(_impl)\r\n    10000    0.005    0.000    0.009    0.000 numpyarray.py:96(raw)\r\n    10000    0.004    0.000    0.009    0.000 <__array_function__ internals>:177(size)\r\n    90000    0.008    0.000    0.008    0.000 nplikes.py:16(instance)\r\n    90000    0.007    0.000    0.007    0.000 nplikes.py:953(<genexpr>)\r\n    90000    0.005    0.000    0.005    0.000 {built-in method builtins.getattr}\r\n    10000    0.003    0.000    0.004    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\r\n    40000    0.003    0.000    0.003    0.000 content.py:77(nplike)\r\n    40000    0.003    0.000    0.003    0.000 {method 'get' of 'dict' objects}\r\n    10000    0.002    0.000    0.003    0.000 ak_count.py:112(reduce)\r\n    20000    0.003    0.000    0.003    0.000 _errors.py:21(__init__)\r\n    10000    0.003    0.000    0.003    0.000 {method 'reshape' of 'numpy.ndarray' objects}\r\n    10000    0.002    0.000    0.002    0.000 nplikes.py:513(raw)\r\n    10000    0.002    0.000    0.002    0.000 {method 'update' of 'dict' objects}\r\n    10000    0.001    0.000    0.001    0.000 fromnumeric.py:3163(size)\r\n    20000    0.001    0.000    0.001    0.000 {method 'clear' of 'dict' objects}\r\n    10000    0.001    0.000    0.001    0.000 highlevel.py:263(layout)\r\n    10000    0.001    0.000    0.001    0.000 numpyarray.py:61(data)\r\n    10000    0.001    0.000    0.001    0.000 fromnumeric.py:3159(_size_dispatcher)\r\n    10000    0.001    0.000    0.001    0.000 {built-in method builtins.len}\r\n```\r\n\r\n</details>\r\n\r\nOne permanent loss is that the error message no longer reports the filename and line number where the `ak.*` or slice was called. That information exists in the traceback for all but the CUDA (delayed) backend, and I guess we'll have to live without it.\r\n\r\n@martindurant was interested in this because he recently encountered it.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-only-stringify-function-arguments-if-nplike-is-delayed/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-25T20:10:50Z",
  "comments":12,
  "created_at":"2022-10-24T19:47:00Z",
  "draft":false,
  "id":1421345852,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BcRPL",
  "number":1825,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-25T20:10:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"perf: only stringify function arguments if nplike is delayed.",
  "updated_at":"2022-10-25T20:10:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR:\r\n- Distinguishes `ak.ravel(array)` from `ak.flatten(array, axis=None)`\r\n   - The latter drops `None` values (and the option-type)\r\n- Removes `x in Array` support. \r\n   - This was discussed offline with @jpivarski - our implementation doesn't support anything more complex than scalar values, which is probably more harmful than helpful.]\r\n- Adds `completely_flatten` support to `ak.record.Record`\r\n- Adds preliminary docs to explain `ak.ravel` vs `ak.flatten`.\r\n\r\nCloses #1460\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-ravel-preserve-none/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-25T20:19:55Z",
  "comments":2,
  "created_at":"2022-10-24T20:10:17Z",
  "draft":false,
  "id":1421375219,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BcXtf",
  "number":1826,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-25T20:19:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: preserve `None` in `np.ravel()`",
  "updated_at":"2022-10-25T20:19:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Discussed on Slack with @agoose77; we came to the same conclusion at the same time.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-fix-boolean-prod-reducer-bug/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-25T18:29:32Z",
  "comments":1,
  "created_at":"2022-10-24T21:19:08Z",
  "draft":false,
  "id":1421464446,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BcrRp",
  "number":1827,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-25T18:29:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: `ak.prod` for booleans had been incorrectly casting output",
  "updated_at":"2022-10-25T19:36:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Since this is not going into `main`, I believe that I can merge it right away.\r\n\r\nI just want to see that it fixes the tests in #1825.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-fix-boolean-prod-reducer-bug/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-24T23:00:53Z",
  "comments":0,
  "created_at":"2022-10-24T23:00:40Z",
  "draft":false,
  "id":1421582669,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BdFCJ",
  "number":1828,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-24T23:00:53Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Merge reducer correction from #1827 into #1825 so that the latter can be tested.",
  "updated_at":"2022-10-24T23:18:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/ianna-rdataframe-bool/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-25T18:55:02Z",
  "comments":1,
  "created_at":"2022-10-25T08:19:38Z",
  "draft":false,
  "id":1422059454,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BepP4",
  "number":1829,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-25T18:55:02Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: to/from RDataFrame support for bool type arrays",
  "updated_at":"2022-10-25T18:55:03Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1823 \r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-fill-none-axis-none/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-25T18:54:04Z",
  "comments":1,
  "created_at":"2022-10-25T10:29:46Z",
  "draft":false,
  "id":1422241006,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BfQNi",
  "number":1830,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-25T18:54:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: visit all layout nodes with `ak.fill_none(..., axis=None)`",
  "updated_at":"2022-10-25T18:54:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"In my view, `ak.ArrayBuilder` serves many purposes:\r\n- Construction of Awkward Arrays whose sizes are unknown (dynamic lengths)\r\n- Construction of Awkward Arrays whose types are unknown (dynamic types)\r\n\r\n`ak.LayoutBuilder()` also serves the former point (dynamic lengths), but we are removing the Python API in v2. Therefore, I think it worth improving the docs for `ak.ArrayBuilder()` (the next best thing) to handle the cases that `ak.LayoutBuilder()` previously handled.This small PR adds notes to the user guide on `ak.ArrayBuilder()` that explain how to stabilise the output type. \r\n\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-arraybuilder-schema/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-25T19:44:25Z",
  "comments":1,
  "created_at":"2022-10-25T12:08:27Z",
  "draft":false,
  "id":1422358442,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Bfpgf",
  "number":1831,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-25T19:44:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add notes on \"declaring `ArrayBuilder` type\"",
  "updated_at":"2022-10-25T19:44:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Closes #1799\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-badges-margin/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-25T17:26:02Z",
  "comments":3,
  "created_at":"2022-10-25T12:45:54Z",
  "draft":false,
  "id":1422407299,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Bf0EI",
  "number":1832,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-25T17:26:02Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add vertical margin between badges",
  "updated_at":"2022-10-25T17:26:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\r\n\r\n2.0.0rc1\r\n\r\n### Description and code to reproduce\r\n\r\nCoffea tests with awkwardv2 fail with: `E   AttributeError: module 'awkward.behaviors' has no attribute 'mixin_class'`\r\n\r\n`awkward.mixin_class` has moved to `awkward.behaviors.mixins.mixin_class`, along with all other mixin decorators.",
  "closed_at":"2022-10-26T13:42:40Z",
  "comments":1,
  "created_at":"2022-10-25T22:22:57Z",
  "id":1423184662,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5U1BMW",
  "number":1834,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Awkward v2 mixins not propagated upwards",
  "updated_at":"2022-10-26T13:42:40Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1834 \r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-mixins-top-level-names/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-26T13:42:39Z",
  "comments":1,
  "created_at":"2022-10-26T08:25:15Z",
  "draft":false,
  "id":1423629889,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Bj5MZ",
  "number":1835,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-26T13:42:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: expose `ak.behaviors.mixins` names at top level",
  "updated_at":"2022-10-26T13:42:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/ianna-rdataframe-user-guide-v1/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-31T15:32:50Z",
  "comments":3,
  "created_at":"2022-10-26T08:47:04Z",
  "draft":false,
  "id":1423659026,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Bj_Q5",
  "number":1836,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-31T15:32:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add rdataframe user guide",
  "updated_at":"2022-10-31T15:32:51Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR:\r\n- [x] Merges @ManasviGoyal's `LayoutBuilder` documentation\r\n- [x] Switches to Python provisioning using Mamba on GHA (uses https://pypi.org/project/cogapp/) to template the `environment.yml.cog`\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-add-layout-builder-guide/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-28T22:50:13Z",
  "comments":3,
  "created_at":"2022-10-26T09:34:25Z",
  "draft":false,
  "id":1423725924,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BkNU5",
  "number":1837,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-28T22:50:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add Manasvi's `LayoutBuilder` documentation",
  "updated_at":"2022-10-28T22:50:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Committed via https://github.com/asottile/all-repos\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/all-repos-autofix_all-repos-sed/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-26T18:54:04Z",
  "comments":3,
  "created_at":"2022-10-26T14:46:41Z",
  "draft":false,
  "id":1424179702,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Blvmn",
  "number":1838,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-26T18:54:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: move to `3.11` from `3.11-dev`",
  "updated_at":"2022-10-26T18:54:05Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nRight now we have a lot of boilerplate to implement a high-level function. I think a simple internal decorator could streamline\r\n```python3\r\ndef zip(\r\n    arrays,\r\n    depth_limit=None,\r\n    parameters=None,\r\n    with_name=None,\r\n    highlevel=True,\r\n    behavior=None,\r\n    right_broadcast=False,\r\n    optiontype_outside_record=False,\r\n):\r\n    with ak._errors.OperationErrorContext(\r\n        \"ak.zip\",\r\n        dict(\r\n            arrays=arrays,\r\n            depth_limit=depth_limit,\r\n            parameters=parameters,\r\n            with_name=with_name,\r\n            highlevel=highlevel,\r\n            behavior=behavior,\r\n            right_broadcast=right_broadcast,\r\n            optiontype_outside_record=optiontype_outside_record,\r\n        ),\r\n    ):\r\n        return _impl(\r\n            arrays,\r\n            depth_limit,\r\n            parameters,\r\n            with_name,\r\n            highlevel,\r\n            behavior,\r\n            right_broadcast,\r\n            optiontype_outside_record,\r\n        )\r\n\r\n\r\ndef _impl(\r\n    arrays,\r\n    depth_limit,\r\n    parameters,\r\n    with_name,\r\n    highlevel,\r\n    behavior,\r\n    right_broadcast,\r\n    optiontype_outside_record,\r\n):\r\n    ...\r\n```\r\n\r\ninto\r\n\r\n\r\nRight now we have a lot of boilerplate to implement a high-level function. I think a simple internal decorator could streamline\r\n```python3\r\n@ak._errors.with_operation_context(\"ak.zip\")\r\ndef zip(\r\n    arrays,\r\n    depth_limit=None,\r\n    parameters=None,\r\n    with_name=None,\r\n    highlevel=True,\r\n    behavior=None,\r\n    right_broadcast=False,\r\n    optiontype_outside_record=False,\r\n):\r\n    ...\r\n```",
  "closed_at":"2023-06-16T11:27:23Z",
  "comments":0,
  "created_at":"2022-10-26T15:00:24Z",
  "id":1424209708,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5U47cs",
  "number":1839,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Replace `with OperationErrorContext` with a function decorator",
  "updated_at":"2023-06-16T11:27:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n2.0.0rc1\n\n### Description and code to reproduce\n\nnumpy = 1.23.4\r\n\r\n```python3\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> x = np.random.normal(size=100)\r\n>>> ak.type(x)\r\n```\r\nresults in:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/awkward/operations/ak_type.py\", line 99, in _impl\r\n    out = ak.types.numpytype._dtype_to_primitive_dict[array.dtype.type]\r\nKeyError: <class 'numpy.float64'>\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/awkward/operations/ak_type.py\", line 60, in type\r\n    return _impl(array)\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/awkward/operations/ak_type.py\", line 101, in _impl\r\n    raise ak._errors.wrap_error(\r\nTypeError: while calling\r\n\r\n    ak.type(\r\n        array = numpy.ndarray([ 0.27824033 -1.483569   -0.61108357 ...\r\n    )\r\n\r\nError details: numpy array type is unrecognized by awkward: <class 'numpy.float64'>\r\n```\r\n\r\n`np.float64` (or `np.<type>` in general) is a fairly common way for folks to denote typing, we should probably support it.",
  "closed_at":"2022-10-27T20:39:51Z",
  "comments":3,
  "created_at":"2022-10-26T20:15:57Z",
  "id":1424641389,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5U6k1t",
  "number":1840,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.type does not understand `numpy.<type>` style dtypes",
  "updated_at":"2022-10-27T20:39:51Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Fixes #1840 \r\n\r\nOriginal input to square brackets would never work?",
  "closed_at":"2022-10-27T20:39:50Z",
  "comments":9,
  "created_at":"2022-10-26T22:30:03Z",
  "draft":false,
  "id":1424772761,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5BnxAV",
  "number":1841,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-27T20:39:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: array.dtype.type will never be in ak.types.numpytype._dtype_to_primitive_dict",
  "updated_at":"2022-10-27T20:39:51Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"(Almost) exactly following https://github.com/scikit-hep/fastjet/pull/125.\r\n\r\nThe first time we do this will be a big diff in the C++ files, but being in pre-commit will prevent trivial differences in C++ which might make our awkward-core testing infrastructure mandate a new release.\r\n\r\nThis is a low priority; nice to have before the 2.0.0 release (so that 2.0.0 onward has minimal C++ diffs), and it should be after the awkward/awkward-core split: PR #1778.",
  "closed_at":null,
  "comments":2,
  "created_at":"2022-10-27T16:53:22Z",
  "id":1425958416,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5U_mYQ",
  "number":1842,
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "state":"open",
  "state_reason":null,
  "title":"Introduce clang-format in pre-commit",
  "updated_at":"2024-01-20T00:47:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"It no longer makes sense to keep this \"foot in the door\" for a feature that we evidently never needed.\r\n\r\nI'll do a sweep and remove it; it's important for this to happen before 2.0.0.",
  "closed_at":"2022-10-28T22:47:25Z",
  "comments":0,
  "created_at":"2022-10-27T17:28:38Z",
  "id":1426017597,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5U_009",
  "number":1843,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Remove Identifiers/identifier/has_identifiers from the codebase",
  "updated_at":"2022-10-28T22:47:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.11.1 to 2.11.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.11.2</h2>\n<ul>\n<li>\ud83d\udee0 Updates CPython 3.11 to 3.11.0 - final release (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1327\">#1327</a>)</li>\n<li>\ud83d\udee0 Simplify the default macOS repair command (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1322\">#1322</a>)</li>\n<li>\ud83d\udee0 Fix the default <code>MACOSX_DEPLOYMENT_TARGET</code> on arm64 (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1312\">#1312</a>)</li>\n<li>\ud83d\udee0 Hide irrelevant pip warnings on linux (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1311\">#1311</a>)</li>\n<li>\ud83d\udc1b Fix a bug that caused the stdout and stderr of commands in containers to be in the wrong order Previously, stdout could appear after stderr. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1324\">#1324</a>)</li>\n<li>\ud83d\udcda Added <a href=\"https://cibuildwheel.readthedocs.io/en/stable/faq/#macos-building-cpython-38-wheels-on-arm64\">a FAQ entry</a> describing how to perform native builds of CPython 3.8 wheels on Apple Silicon. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1323\">#1323</a>)</li>\n<li>\ud83d\udcda Other docs improvements</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.11.2</h3>\n<p><em>26 October 2022</em></p>\n<ul>\n<li>\ud83d\udee0 Updates CPython 3.11 to 3.11.0 - final release (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1327\">#1327</a>)</li>\n<li>\ud83d\udee0 Simplify the default macOS repair command (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1322\">#1322</a>)</li>\n<li>\ud83d\udee0 Fix the default <code>MACOSX_DEPLOYMENT_TARGET</code> on arm64 (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1312\">#1312</a>)</li>\n<li>\ud83d\udee0 Hide irrelevant pip warnings on linux (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1311\">#1311</a>)</li>\n<li>\ud83d\udc1b Fix a bug that caused the stdout and stderr of commands in containers to be in the wrong order Previously, stdout could appear after stderr. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1324\">#1324</a>)</li>\n<li>\ud83d\udcda Added <a href=\"https://cibuildwheel.readthedocs.io/en/stable/faq/#macos-building-cpython-38-wheels-on-arm64\">a FAQ entry</a> describing how to perform native builds of CPython 3.8 wheels on Apple Silicon. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1323\">#1323</a>)</li>\n<li>\ud83d\udcda Other docs improvements</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a6732b126f28affc0bef10118c6480ff722aa9ff\"><code>a6732b1</code></a> Bump version: v2.11.2</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/36a61012f3e29c12d482ad0f7e2a8171a4ffba67\"><code>36a6101</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1311\">#1311</a> from henryiii/henryiii/fix/rootpip2</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/8672fee21c47f6f7317a8f404c2280b99ab61d99\"><code>8672fee</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1300\">#1300</a> from mayeut/gha-3.11</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/b1b8ab500c9a11f0206d43c005d2a5ccc127bd72\"><code>b1b8ab5</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1322\">#1322</a> from ankith26/update-delocate-default</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/89a8cac2aa68cd6eb10ef8d54a1fb0a3a918fdff\"><code>89a8cac</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1324\">#1324</a> from pypa/stderr-interleaving</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/db1208430e15277e7c850be89a9724431137c8da\"><code>db12084</code></a> tests: include check for upgrade notice too</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/dfb3e627bcd7379e59eb6e383f3dd5d907b0bd3e\"><code>dfb3e62</code></a> tests: use 3.11 final</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/f259bfd4d67e94b579ef6afd2477bb682f60652c\"><code>f259bfd</code></a> tests: add a check in tests for the pip warning</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/f25227416da47dc8d9e586d9e8d442d2475e499f\"><code>f252274</code></a> fix: hide root pip warning on Linux again</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/1aa841bedaa6998f8a3104eae6f9bfa242cceea4\"><code>1aa841b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1323\">#1323</a> from pypa/docs-38</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.11.1...v2.11.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.11.1&new-version=2.11.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-10-28T20:42:46Z",
  "comments":2,
  "created_at":"2022-10-27T17:29:28Z",
  "draft":false,
  "id":1426019098,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Br8jm",
  "number":1844,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-28T20:42:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"build(deps): bump pypa/cibuildwheel from 2.11.1 to 2.11.2",
  "updated_at":"2022-10-28T20:42:47Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Identifiers were motivated by [PartiQL](https://github.com/jpivarski/PartiQL), an experimental combinatorics language that uses set-like referential identity to track particles through a calculation. It would require our data to track a [surrogate index](https://en.wikipedia.org/wiki/Surrogate_key) through all of its operations, like a Pandas `Index`.\r\n\r\nThe `Identities` (Awkward v1) and `Identifier` (Awkward v2) were a \"foot in the door\" implementation to add such a feature. Originally, it was supposed to be implemented before the Awkward 1.0.0 release, but other features were more pressing. I left them in on the theory that it's easier to take them out than add them later, but it's been 3 years now and 2.0.0 is almost ready to ship\u2014it's not going to happen. Moreover, 2.0.0 is almost ready to ship\u2014removing them would mean changing the public API (albeit for the low-level layer, intended for downstream dependencies, rather than data analysts). So it must be done now.\r\n\r\nHopefully, this won't be too hard to merge with the other PRs. The most likely complication is that all Content subclasses and Form subclasses have 1 fewer argument: instead of \"`identifier, parameters`\", it's just \"`parameters`\". \"`None`\" is a likely value to be passed as `identifier`, and it's a likely value to be passed to `parameters`, so it shows up as \"`None, parameters`\" or \"`None, None`\".\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-remove-identifiers-aka-identities/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-28T22:47:24Z",
  "comments":9,
  "created_at":"2022-10-28T20:34:47Z",
  "draft":false,
  "id":1427799743,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Bx1J2",
  "number":1845,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-28T22:47:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: remove Identifier (once known as Identities) from codebase.",
  "updated_at":"2022-10-28T22:47:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"To take advantage of @ManasviGoyal's new \"panels\" implementation.\r\n\r\n#1517 was a first attempt at this, but things have moved around. The PR should be refreshed.\r\n\r\nIt does not need to be done before the 2.0.0 release, since it doesn't change any API.",
  "closed_at":null,
  "comments":0,
  "created_at":"2022-10-28T20:39:02Z",
  "id":1427803619,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5VGo3j",
  "number":1846,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"ForthOutputBuffer should be based on GrowableBuffer",
  "updated_at":"2022-10-28T20:39:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n```python\r\n>>> array = ak.from_numpy(np.arange(24)[::3])\r\n>>> ak.sum(array, axis=-1)\r\nTraceback (most recent call last):\r\n  File \"/home/angus/.mambaforge/envs/awkward-1.0/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3398, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-26-8650b4044dc1>\", line 1, in <cell line: 1>\r\n    ak.sum(array)\r\n  File \"/home/angus/Git/awkward-1.0/awkward/operations/ak_sum.py\", line 208, in sum\r\n    return _impl(\r\n  File \"/home/angus/Git/awkward-1.0/awkward/operations/ak_sum.py\", line 279, in _impl\r\n    out = layout.reduce(\r\n  File \"/home/angus/Git/awkward-1.0/awkward/contents/content.py\", line 855, in reduce\r\n    return self._reduce_axis_none(\r\n  File \"/home/angus/Git/awkward-1.0/awkward/contents/content.py\", line 830, in _reduce_axis_none\r\n    layout = reducer.apply_many(parts, mask)\r\n  File \"/home/angus/Git/awkward-1.0/awkward/reducers.py\", line 460, in apply_many\r\n    name = \"prod\"\r\n  File \"/home/angus/Git/awkward-1.0/awkward/reducers.py\", line 58, in _apply_many_trivial\r\n    partial_reductions = [\r\n  File \"/home/angus/Git/awkward-1.0/awkward/reducers.py\", line 59, in <listcomp>\r\n    x.reduce(\r\n  File \"/home/angus/Git/awkward-1.0/awkward/contents/content.py\", line 894, in reduce\r\n    next = self._reduce_next(\r\n  File \"/home/angus/Git/awkward-1.0/awkward/contents/numpyarray.py\", line 1090, in _reduce_next\r\n    return self.toRegularArray()._reduce_next(\r\n  File \"/home/angus/Git/awkward-1.0/awkward/contents/numpyarray.py\", line 1090, in _reduce_next\r\n    return self.toRegularArray()._reduce_next(\r\n  File \"/home/angus/Git/awkward-1.0/awkward/contents/numpyarray.py\", line 1090, in _reduce_next\r\n    return self.toRegularArray()._reduce_next(\r\n  [Previous line repeated 2970 more times]\r\n  File \"/home/angus/Git/awkward-1.0/awkward/contents/numpyarray.py\", line 188, in toRegularArray\r\n    out = NumpyArray(self._data.reshape(-1), None, None, self._nplike)\r\n  File \"/home/angus/Git/awkward-1.0/awkward/contents/numpyarray.py\", line 46, in __init__\r\n    self._data = nplike.asarray(data)\r\n  File \"/home/angus/Git/awkward-1.0/awkward/nplikes.py\", line 100, in asarray\r\n    return self._module.asarray(*args, **kwargs)\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n```",
  "closed_at":"2022-11-01T16:28:45Z",
  "comments":0,
  "created_at":"2022-10-30T19:51:07Z",
  "id":1428996835,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5VLMLj",
  "number":1847,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Non-contiguous `NumpyArray` calls `toRegularArray()`",
  "updated_at":"2023-02-15T19:10:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is a small PR to refactor `ak._util`. Visibly,\r\n\r\n- remove `ak._util.isstr`\r\n- rename `ak._util.isint` with `ak._util.is_integer`\r\n\r\nThis is refactoring work that was motivated by other PRs.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-refactor-ak-util/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-31T13:46:03Z",
  "comments":0,
  "created_at":"2022-10-31T10:43:20Z",
  "draft":false,
  "id":1429633486,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5B33Xg",
  "number":1848,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-31T13:46:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: `ak._util`",
  "updated_at":"2022-10-31T13:46:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Awkward's `nplike` mechanism currently exposes implementation details w.r.t the underlying array libraries used. This poses a problem when these implementations differ, or when we need to replicate them for typetracer, which has no backing array module. \r\n\r\nTo improve this, we should more strongly define the `NumpyLike` API, and move away from value-based behaviour that applies to a subset of operations. This will make it easier to ensure that our `nplike`s are well behaved and consistent, at a cost of writing more code than the simple shims that we currently define.\r\n\r\n## Primary Goals\r\n- Typed signatures for `NumpyLike`\r\n- Value-less result types \r\n\r\n## Secondary Goals\r\nThe secondary goal of this PR is to make the `UnknownScalar` object complain if it is used in a concrete context. This will break existing usages, but I think this change will make it harder to write code that has implicitly wrong behavior when a typetracer array is passed through. I.e., this change will require more `if nplike.known_data` in our content classes. I think this is a good change, though; the `NumpyLike` mechanism can't anticipate *how* users of the `nplike` will interpret the data, so we should surface this logic explicitly where it matters.\r\n\r\n## Implementation\r\nThe `NumpyLike` mechanism serves two purposes:\r\n1. Standardise the NumPy API across different array libraries\r\n2. Implement Awkward-specific array-handling utility functions in a cross-library manner\r\n\r\n(1) will ultimately be handled by the Array API that NumPy et al. are implementing. This stricter subset of the NumPy API provides guarantees about output types, and is designed for cross-compatibility between array libraries. It is not ready, however, for use across all NumPy versions, and does not yet cover the full suite of types and operations (?) that we need.  The [latest draft](https://data-apis.org/array-api/draft/) adds support for complex datatypes, but datetime objects remain missing. There are several reasons why we cannot simply adopt the Array API outright:\r\n- Lack of support in old versions (NumPy is too new, NEP 47 requires v1.22)\r\n- Lack of support for `datetime64` / `complexXXX?`\r\n- Lack of support for ordering (Fortran, C)\r\n\r\nTherefore, the `NumpyLike` API will deviate from the Array API standard in order to support this information. In general, it will be preferable to add special NumpyLike methods `e.g. as_contiguous()` over new parameters to the `NumpyLike` API. In addition to new parameters, there are also parameters in the Array API specification that may not be appropriate for `nplike`. It would be preferrable to define unused arguments anyway, so that we can later replace `NumpyLike` methods with thin shims over the respective Array API object, i.e.\r\n```python\r\nclass Numpy(NumpyLike):\r\n    reshape = numpy.array_api.reshape\r\n```\r\nWe could implement an Array API namespace for typetracer, such that the `TypeTracerArray` can be operated upon by third-party code that supports the Array API. There is no strong motivation for this; `NumpyLike` should remain an internal detail, and no users should ever see e.g. `TypeTracerArray` in their interactions with Awkard. Because of this, there is little argument to be made for directly using the Array API in code that currently consumes the `NumpyLike` in future given that we still have to consider (2).\r\n\r\n(2) will remain an important motivation for NumpyLikes. We have small additions like `is_eager` and `is_own_array` that abstract library-specific features. We could remove `is_own_array` as `array.__array_namespace__() is array_api_obj`, but these other features remain important. Furthermore, we want to flavour a layout by its nplike, so we need to keep the \"expected\" array API information in the layout somewhere. We don't want to have to implement the entire Array API for e.g. TypeTracer, so it's best that we go through the `NumpyLike` mechanism in order to explicitly define the available functions.\r\n\r\n## Tasks\r\n- [x] Make `UnknownScalar` a non-concrete object\r\n-    ~Make `TypeTracer.add` etc. complain for non-predictable dtypes~\r\n- [x] Ensure `ListArray._pad_none` always adds option\r\n- [ ] Add `finfo` and `iinfo` to `NumpyLike`\r\n- [ ] Implement timelike promotion rules\r\n- [ ] Replace `nplike.ndarray` usage with `nplike.is_own_array`\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-refactor-typetracer/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2023-01-11T13:08:32Z",
  "comments":20,
  "created_at":"2022-10-31T11:56:48Z",
  "draft":true,
  "id":1429724942,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5B4LOy",
  "number":1849,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: harden typetracer operations",
  "updated_at":"2023-04-11T21:34:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nSee title!",
  "closed_at":"2022-10-31T16:43:53Z",
  "comments":0,
  "created_at":"2022-10-31T15:34:17Z",
  "id":1430049548,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5VPNMM",
  "number":1850,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ByteMaskedArray.toByteMaskedArray()` refers to `ak.Index8`",
  "updated_at":"2022-10-31T16:43:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- Fixes #1850\r\n- Smuggles some changes to pass in `dtype` to the `logical_XXX` functions in `TypeTracer` (though unused in this PR)\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-bytemasked-to-bytemasked/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-31T16:43:52Z",
  "comments":1,
  "created_at":"2022-10-31T16:21:14Z",
  "draft":false,
  "id":1430119803,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5B5gGF",
  "number":1851,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-31T16:43:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: correctly turn `ByteMaskedArray` into `ByteMaskedArray`",
  "updated_at":"2022-10-31T16:43:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"I noticed that #1836 didn't trigger an RTD build for pushes to `main`, so I've updated `docs.yml`\r\n\r\nI find the expression `NOT (X AND NOT Y)` clearer than `(NOT X) OR Y` because in this case `X` and `Y` are related. We only avoid deploying the docs if the event was a PR event, and the PR does not originate from `scikit-hep/awkward`\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-ci-docs-deploy-on-main/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-31T19:51:29Z",
  "comments":3,
  "created_at":"2022-10-31T17:05:25Z",
  "draft":false,
  "id":1430182039,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5B5tWh",
  "number":1852,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-31T19:51:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: allow pushes to main to deploy",
  "updated_at":"2022-10-31T19:58:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-ci-fix-deploy-main/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-10-31T20:35:14Z",
  "comments":3,
  "created_at":"2022-10-31T20:12:23Z",
  "draft":false,
  "id":1430432897,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5B6joI",
  "number":1853,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-10-31T20:35:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: don't run PR job on `main`",
  "updated_at":"2022-10-31T20:52:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/setup-cfg-fmt: v2.1.0 \u2192 v2.2.0](https://github.com/asottile/setup-cfg-fmt/compare/v2.1.0...v2.2.0)\n- [github.com/asottile/pyupgrade: v3.1.0 \u2192 v3.2.0](https://github.com/asottile/pyupgrade/compare/v3.1.0...v3.2.0)\n<!--pre-commit.ci end-->\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/pre-commit-ci-update-config/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-01T17:40:38Z",
  "comments":1,
  "created_at":"2022-10-31T22:04:11Z",
  "draft":false,
  "id":1430554838,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5B6-G9",
  "number":1854,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-01T17:40:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-11-01T17:40:39Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nCurrently we don't support this argument value.",
  "closed_at":null,
  "comments":2,
  "created_at":"2022-11-01T10:37:47Z",
  "id":1431218901,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5VTqrV",
  "number":1855,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Support `axis=None` in `argsort` etc",
  "updated_at":"2022-11-01T15:54:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"~Reshaping an ND NumPy with `np.reshape(-1)` will produce a contiguous array as a byproduct.~ However, for 1D arrays, this does not ensure that the result is contiguous. This PR therefore separates these two tests. Additionally, I *think* there was something awry with our contiguity test. I've just add an `nplike` function for this, as it seems like the proper solution anyway.\r\n\r\nThis PR *doesn't* tackle `unique`, which will need further changes.\r\n\r\nFixes #1847\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-numpy-array-non-contiguous/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-01T16:28:44Z",
  "comments":3,
  "created_at":"2022-11-01T10:42:58Z",
  "draft":false,
  "id":1431224955,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5B9MNk",
  "number":1856,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-01T16:28:43Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: separate contiguity from dimension test in `NumpyArray._reduce_next`",
  "updated_at":"2022-11-01T17:05:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is a follow-up of https://github.com/scikit-hep/awkward/issues/1771#issuecomment-1298880407.\r\n\r\nIf you think this can be handled better, let me know here. Otherwise, this is how we'll retire the use of `awkward._v2`.\r\n\r\nCc: @agoose77, @douglasdavis, @martindurant, @alexander-held, @henryiii\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-v2-ModuleNotFoundError-message/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-03T15:34:30Z",
  "comments":3,
  "created_at":"2022-11-01T17:57:18Z",
  "draft":false,
  "id":1431841455,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5B_RJu",
  "number":1857,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-03T15:34:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: import awkward._v2 now raises an explanatory error message.",
  "updated_at":"2022-11-03T15:34:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I haven't done anything about the linker warnings (the whole build process is changing in #1778), and I wasn't sure what to do about warnings against aliasing arrays in the ForthMachine. That's kinda how the whole thing works...\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-squash-compiler-warnings/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-02T15:18:13Z",
  "comments":7,
  "created_at":"2022-11-01T22:02:12Z",
  "draft":false,
  "id":1432156444,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5CAWMW",
  "number":1858,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-02T15:18:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: eliminate many of the compiler warnings.",
  "updated_at":"2022-11-02T15:18:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is a follow-up on #1845, which removed Identifers (known as Identities in v1). The `Lookup` arrays used by Awkward's Numba and RDataFrame integration had a placeholder for pointers to (lowered) Identifiers, which this PR removes.\r\n\r\nIt's a potentially delicate operation, since a misplaced item in a `Lookup` array would lead to a segfault or worse. That's why this is a separate PR, so that it's a clear step in the global history. However, this PR and the 22 files of tests that depend on it:\r\n\r\n- tests/test_0118-numba-cpointers.py\r\n- tests/test_0124-strings-in-numba.py\r\n- tests/test_0127b-tomask-operation-numba.py\r\n- tests/test_0290-bug-fixes-for-hats.py\r\n- tests/test_0395-fix-numba-indexedarray.py\r\n- tests/test_0397-arrays-as-constants-in-numba.py\r\n- tests/test_0549-numba-array-asarray.py\r\n- tests/test_0559-fix-booleans-in-numba.py\r\n- tests/test_0572-numba-array-ndim.py\r\n- tests/test_0903-ArrayView-expects-contiguous-NumpyArrays.py\r\n- tests/test_1240-v2-implementation-of-numba-1.py\r\n- tests/test_1300-awkward-to-cpp-converter-with-cling.py\r\n- tests/test_1300b-same-for-numba.py\r\n- tests/test_1374-to-rdataframe.py\r\n- tests/test_1473-from-rdataframe.py\r\n- tests/test_1477-generator-entry-type-as-rvec.py\r\n- tests/test_1508-awkward-from-rdataframe.py\r\n- tests/test_1613-generator-tolayout-records.py\r\n- tests/test_1620-layout-builders.py\r\n- tests/test_1625-multiple-columns-from-rdataframe.py\r\n- tests/test_1781-rdataframe-snapshot.py\r\n- tests/test_1829-to-from-rdataframe-bool.py\r\n\r\nDon't seem to have any issues. The tests run both in series and in parallel, all tests and just these. (Toggling things like that change the memory layout.) I know that the tests check exact expected values from compiled Numba and Cling code, so it's pretty secure.\r\n\r\nI'll ask @ianna to review this one because it affects code she's working on (both Numba _and_ RDataFrame).\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-removed-identifier-placeholder-from-lookups/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-03T14:49:06Z",
  "comments":9,
  "created_at":"2022-11-02T17:08:42Z",
  "draft":false,
  "id":1433499102,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5CE3Mw",
  "number":1859,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-03T14:49:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: removed placeholder (-1) intended for Identifier from Lookup.",
  "updated_at":"2022-11-03T17:04:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/ianna-copy_int_as_complex/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-07T15:18:51Z",
  "comments":2,
  "created_at":"2022-11-03T17:05:00Z",
  "draft":false,
  "id":1434998153,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5CJ5VC",
  "number":1860,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-07T15:18:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: try to fix long long to double",
  "updated_at":"2022-11-07T15:18:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This bothered me when I saw it, and just as I was scanning through issues to fix something, I remembered it.\r\n\r\nAn Awkward Array in Vector looks like this:\r\n\r\n```python\r\n>>> import awkward as ak, vector\r\n>>> vector.awk({\"x\": [1, 2, 3], \"y\": [1.1, 2.2, 3.3]})\r\n<VectorArray2D [<VectorRecord2D {x: 1, y: 1.1} type='Vector2D[x: int64, y: float64]'>, ..., <VectorRecord2D {x: 3, y: 3.3} type='Vector2D[x: int64, y: float64]'>] type='...'>\r\n```\r\n\r\nand that's way too verbose; the nested `<VectorRecord2D ...>` certainly wasn't intended.\r\n\r\nAn `ak.Array`'s `__repr__` doesn't loop over all the data in an array, calling the `__repr__` of each item, because we expect that an array is going to be large. Unlike NumPy, which nominally only contains numbers (disregarding `dtype=\"O\"`), Awkward Arrays contain data that might be overridden as subclasses, and those subclasses might have a custom `__repr__` or `__str__`. If a subclass (in `ak.behaviors`) applies to some data in an array and that subclass has an overloaded string representation, we should print that string, rather than the ellipsis-collapsed thing we would ordinarily print.\r\n\r\nVectors and arrays of Vectors are overloaded subclasses, but they don't have any `__repr__` or `__str__` defined. So why do we see `<VectorRecord2D ...>` in the above?\r\n\r\n**First mistake:** the code that checks for this case says\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/edc0d67f6fa51831299c7e7d10893003d8956bfa/src/awkward/_prettyprint.py#L92-L97\r\n\r\ninstead of\r\n\r\n```python\r\n    if (\r\n        ak.highlevel.Record in current.__class__.__bases__\r\n        and not type(current).__repr__ is ak.highlevel.Record.__repr__\r\n    ) or (\r\n        ak.highlevel.Array in current.__class__.__bases__\r\n        and not type(current).__repr__ is ak.highlevel.Array.__repr__\r\n    ):\r\n        strs = type(current).__repr__(current)\r\n```\r\n\r\nThe Vector is an `ak.Record`, so it always passes this check and its `strs` gets replaced with whatever `repr(current)` would be.\r\n\r\n**Second mistake:** we should probably favor the `str`, rather than the `repr`, for strings that are going to be included inside of an array print-out. If someone does overload the `__repr__`, they'll likely want to overload it to look like an `ak.Array`/`ak.Record`'s `__repr__`, which is verbose, with type information, and that would get repeated for each item in the array. The `ak.Array`/`ak.Record`'s `__str__` is more concise, and if a developer overloads it similarly, the final result will look right. So I'll make it first check for an overloaded `__str__`, and failing that, then an overloaded `__repr__`.\r\n\r\nIn the end, an array of Vectors now looks like this:\r\n\r\n```python\r\n>>> import awkward as ak, vector\r\n>>> vector.awk({\"x\": [1, 2, 3], \"y\": [1.1, 2.2, 3.3]})\r\n<VectorArray2D [{x: 1, y: 1.1}, ..., {x: 3, ...}] type='3 * Vector2D[x: int...'>\r\n```\r\n\r\nSince the motivating case is Vector and @henryiii has criticized the use of \"`if type(current).__repr__ is ak.highlevel.Record.__repr__`\" in the past, I'll ask him to review this one. (Hence the detailed justification for why we need that idiom in the first place, not just the fix that leaves the idiom as-is.)\r\n\r\nOh, there's one more thing I think I can do:\r\n\r\n* `type(current).__repr__(current)` \u2192 `repr(current)`.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-more-concise-prettyprint/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-17T16:38:40Z",
  "comments":1,
  "created_at":"2022-11-03T19:48:04Z",
  "draft":false,
  "id":1435180324,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5CKgjH",
  "number":1861,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-17T16:38:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: more concise pretty-print.",
  "updated_at":"2022-11-17T16:38:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.10.1\n\n### Description and code to reproduce\n\nTrying to build the package for opensuse, running the tests in i586 produces a crash. The problem should be in the `test_numpy_complex_form` because ignoring it makes it run correctly.\r\n\r\nHere's the test running and the output:\r\n\r\n```\r\npytest-3.10 -vvl --ignore tests-cuda -k test_numpy_complex_form\r\n==================================================================================== test session starts =====================================================================================\r\nplatform linux -- Python 3.10.8, pytest-7.1.2, pluggy-1.0.0 -- /usr/bin/python3.10\r\ncachedir: .pytest_cache\r\nrootdir: /home/abuild/rpmbuild/BUILD/awkward-1.10.1, configfile: pyproject.toml\r\ncollected 2200 items / 2199 deselected / 57 skipped / 1 selected                                                                                                                             \r\n\r\ntests/v2/test_0924-layout-builder.py::test_numpy_complex_form PASSED                                                                                                                   [100%]realloc(): invalid next size\r\nFatal Python error: Aborted\r\n\r\nCurrent thread 0xf7f88700 (most recent call first):\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/logging.py\", line 346 in reset\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/logging.py\", line 697 in _runtest_for\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/logging.py\", line 725 in pytest_runtest_teardown\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_callers.py\", line 34 in _multicall\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/runner.py\", line 259 in <lambda>\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/runner.py\", line 338 in from_call\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/runner.py\", line 258 in call_runtest_hook\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/runner.py\", line 219 in call_and_report\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/runner.py\", line 131 in runtestprotocol\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/runner.py\", line 111 in pytest_runtest_protocol\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/main.py\", line 347 in pytest_runtestloop\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/main.py\", line 322 in _main\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/main.py\", line 268 in wrap_session\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/main.py\", line 315 in pytest_cmdline_main\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n  File \"/usr/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 164 in main\r\n  File \"/usr/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 187 in console_main\r\n  File \"/usr/bin/pytest-3.10\", line 33 in <module>\r\n\r\nExtension modules: numpy.core._multiarray_umath, numpy.core._multiarray_tests, numpy.linalg._umath_linalg, numpy.fft._pocketfft_internal, numpy.random._common, numpy.random.bit_generator, numpy.random._bounded_integers, numpy.random._mt19937, numpy.random.mtrand, numpy.random._philox, numpy.random._pcg64, numpy.random._sfc64, numpy.random._generator, yaml._yaml, numba.core.typeconv._typeconv, numba._helperlib, numba._dynfunc, numba._dispatcher, numba.core.runtime._nrt_python, numba.np.ufunc._internal, numba.experimental.jitclass._box, pandas._libs.tslibs.np_datetime, pandas._libs.tslibs.dtypes, pandas._libs.tslibs.base, pandas._libs.tslibs.nattype, pandas._libs.tslibs.timezones, pandas._libs.tslibs.tzconversion, pandas._libs.tslibs.ccalendar, pandas._libs.tslibs.fields, pandas._libs.tslibs.timedeltas, pandas._libs.tslibs.timestamps, pandas._libs.properties, pandas._libs.tslibs.offsets, pandas._libs.tslibs.parsing, pandas._libs.tslibs.conversion, pandas._libs.tslibs.period, pandas._libs.tslibs.vectorized, pandas._libs.ops_dispatch, pandas._libs.missing, pandas._libs.hashtable, pandas._libs.algos, pandas._libs.interval, pandas._libs.tslib, pandas._libs.lib, pandas._libs.hashing, pandas._libs.ops, pandas._libs.arrays, pandas._libs.index, pandas._libs.join, pandas._libs.sparse, pandas._libs.reduction, pandas._libs.indexing, pandas._libs.internals, pandas._libs.writers, pandas._libs.window.aggregations, pandas._libs.window.indexers, pandas._libs.reshape, pandas._libs.tslibs.strptime, pandas._libs.groupby, pandas._libs.testing, pandas._libs.parsers, pandas._libs.json (total: 62)\r\nAborted (core dumped)\r\n```",
  "closed_at":"2022-11-07T17:52:53Z",
  "comments":9,
  "created_at":"2022-11-04T09:08:34Z",
  "id":1435765234,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5VlAny",
  "number":1862,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"crash when running test_numpy_complex_form in x86 arch",
  "updated_at":"2022-11-08T17:28:34Z",
  "user":"MDQ6VXNlcjUwMzUw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"It was already removed from `main` (the 2.0.0(rcX) releases) because LayoutBuilder is intended for performance, and a Python highlevel interface can't be used in a fast loop to get that performance. Also, this links to the original Forth-based implementation (our way of doing JIT without a JIT compiler), which has been superseded by #1494 (C++ templates, which requires a C++ JIT compiler).\r\n\r\nIn principle, any of the v2 code can be removed from `main-v1`/the legacy 1.x branch. If users want to get Awkward v2, they _must_ install from 2.0.0(rcX) or later, since it is evolving in interface-changing ways (until 2.0.0). Actual 2.x releases are already the only supported ways to get Awkward v2.\r\n\r\nHowever, this PR only removes the Python highlevel LayoutBuilder from `awkward._v2`, not all of `awkward._v2`. The v1 LayoutBuilder (based on Forth) is still included because a legacy v1 branch should have v1 stuff.",
  "closed_at":"2022-11-04T17:30:36Z",
  "comments":2,
  "created_at":"2022-11-04T15:11:18Z",
  "draft":false,
  "id":1436232899,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5COAEN",
  "number":1863,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-04T17:30:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: remove v2 Python highlevel LayoutBuilder from main-v1.",
  "updated_at":"2022-11-04T17:30:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n2.0.0rc2\n\n### Description and code to reproduce\n\nLooks like `is_none` isn't supported by type tracer arrays\r\n```python\r\n>>> import awkward as ak\r\n>>> a = ak.from_iter([[None, 1], None, [1, 2]])\r\n>>> ak.is_none(a, axis=0)\r\n<Array [False, True, False] type='3 * bool'>\r\n>>> ak.is_none(a, axis=1)\r\n<Array [[True, False], None, [False, False]] type='3 * option[var * bool]'>\r\n>>> tt = ak.Array(a.layout.typetracer.forget_length())\r\n>>> ak.is_none(tt, axis=0)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/operations/ak_is_none.py\", line 28, in is_none\r\n    return _impl(array, axis, highlevel, behavior)\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/operations/ak_is_none.py\", line 82, in _impl\r\n    out = layout.recursively_apply(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/content.py\", line 1588, in recursively_apply\r\n    return self._recursively_apply(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/indexedoptionarray.py\", line 1626, in _recursively_apply\r\n    result = action(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/operations/ak_is_none.py\", line 72, in getfunction_outer\r\n    return layout.recursively_apply(getfunction_inner, behavior)\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/content.py\", line 1588, in recursively_apply\r\n    return self._recursively_apply(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/indexedoptionarray.py\", line 1626, in _recursively_apply\r\n    result = action(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/operations/ak_is_none.py\", line 47, in getfunction_inner\r\n    index = nplike.index_nplike.where(tag, 0, nplike.asarray(layout.index))\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/_typetracer.py\", line 789, in where\r\n    raise ak._errors.wrap_error(NotImplementedError)\r\nNotImplementedError: \r\n\r\nSee if this has been reported at https://github.com/scikit-hep/awkward-1.0/issues\r\n>>> ak.is_none(tt, axis=1)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/operations/ak_is_none.py\", line 28, in is_none\r\n    return _impl(array, axis, highlevel, behavior)\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/operations/ak_is_none.py\", line 82, in _impl\r\n    out = layout.recursively_apply(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/content.py\", line 1588, in recursively_apply\r\n    return self._recursively_apply(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/indexedoptionarray.py\", line 1640, in _recursively_apply\r\n    return continuation()\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/indexedoptionarray.py\", line 1602, in continuation\r\n    content._recursively_apply(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/listoffsetarray.py\", line 2033, in _recursively_apply\r\n    return continuation()\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/listoffsetarray.py\", line 1995, in continuation\r\n    content._recursively_apply(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/indexedoptionarray.py\", line 1626, in _recursively_apply\r\n    result = action(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/operations/ak_is_none.py\", line 72, in getfunction_outer\r\n    return layout.recursively_apply(getfunction_inner, behavior)\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/content.py\", line 1588, in recursively_apply\r\n    return self._recursively_apply(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/contents/indexedoptionarray.py\", line 1626, in _recursively_apply\r\n    result = action(\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/operations/ak_is_none.py\", line 47, in getfunction_inner\r\n    index = nplike.index_nplike.where(tag, 0, nplike.asarray(layout.index))\r\n  File \"/Users/ddavis/.pyenv/versions/dev/lib/python3.10/site-packages/awkward/_typetracer.py\", line 789, in where\r\n    raise ak._errors.wrap_error(NotImplementedError)\r\nNotImplementedError: \r\n\r\nSee if this has been reported at https://github.com/scikit-hep/awkward-1.0/issues\r\n```",
  "closed_at":"2023-01-13T00:17:39Z",
  "comments":3,
  "created_at":"2022-11-04T16:47:36Z",
  "id":1436362192,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5VnSXQ",
  "number":1864,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.is_none raising on typetracer array input",
  "updated_at":"2023-01-13T00:17:39Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski suggested to look at a  fastjet/boost-histogram `.clang-format`. Here is a test for discussion. Perhaps we'd like to tune some things?\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/ianna-clang-format-config-test/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-18T19:13:48Z",
  "comments":4,
  "created_at":"2022-11-04T16:54:47Z",
  "draft":true,
  "id":1436373021,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5COd28",
  "number":1865,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"test: fastjet clang-format configuration [DO NOT MERGE]",
  "updated_at":"2024-02-01T22:01:09Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\r\n\r\n2.0.0rc2\r\n\r\n### Description and code to reproduce\r\n\r\nNanoEvents objects lose their behavior when run through combinations.\r\n\r\n\r\nreproducer:\r\n```\r\n$ git clone https://github.com/CoffeaTeam/coffea.git -b awkward2_dev\r\n$ cd coffea\r\n$ pip install -e '.[dev]'\r\n$ python\r\n>>> from coffea.nanoevents import NanoEventsFactory\r\n>>> factory = NanoEventsFactory.from_root(\"tests/samples/nano_dy.root\")\r\n>>> events = factory.events()\r\n>>> events.Muon[4][0] + events.Muon[4][1] # to show it works in the first place\r\n>>> combos = ak.combinations(events.Muon, 2)\r\n>>> dimuons = combos[\"0\"] + combos[\"1\"]\r\n```\r\n\r\nFails to add pairs of muon objects together.\r\n\r\nYou can add print outs for the behaviors of the objects and you will find that they are `None` while `events.Muon` is not.",
  "closed_at":"2022-11-05T17:00:54Z",
  "comments":3,
  "created_at":"2022-11-04T22:02:52Z",
  "id":1436684967,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5VohKn",
  "number":1866,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.combinations drops types when accessing components",
  "updated_at":"2022-11-05T17:00:54Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"This fixes relevant tests in coffea.\r\n\r\nThis is a possible fix to #1866, and indeed makes the repro there work, but I'm sure a more correct implementation (that also covers other similar operations) is possible.",
  "closed_at":"2022-11-05T17:00:52Z",
  "comments":4,
  "created_at":"2022-11-05T15:43:51Z",
  "draft":false,
  "id":1437075995,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5CQx4D",
  "number":1867,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-05T17:00:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: propagate local behaviors in ak.combinations",
  "updated_at":"2022-11-05T17:00:53Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-11-21T14:34:28Z",
  "comments":2,
  "created_at":"2022-11-07T11:05:29Z",
  "draft":true,
  "id":1438173349,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5CUQKE",
  "number":1868,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"test: cuda status tests",
  "updated_at":"2022-11-21T14:34:28Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"#1866 wasn't the first time we've seen a regression in behavior preservation, so I've gone through and checked all of our other operations. This PR hopefully catches some missed cases, and ensures that we test both explicit `behavior=some_dict` and `behavior=None` argument behaviour.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-propagate-behavior/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-07T14:59:55Z",
  "comments":2,
  "created_at":"2022-11-07T11:27:18Z",
  "draft":false,
  "id":1438203310,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5CUWr0",
  "number":1869,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-07T14:59:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: ensure that behaviors are propagated through `ak.XXX` operations",
  "updated_at":"2022-11-07T16:20:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nIf you attempt to load a parquet file containing decimal columns, you get a ValueError, which is expected, but the message is:\r\n```\r\n\"Arrow arrays containing pickled Python objects can't be converted into Awkward Arrays\"\r\n```\r\nwhich looks like it's been copied from somewhere else.\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/main/src/awkward/_connect/pyarrow.py#L476",
  "closed_at":"2022-11-09T19:32:32Z",
  "comments":1,
  "created_at":"2022-11-09T02:27:56Z",
  "id":1441244561,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5V56WR",
  "number":1870,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Bad error message for decimal type",
  "updated_at":"2022-11-09T19:32:32Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1870 \r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-from-arrow-error/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-09T19:32:31Z",
  "comments":1,
  "created_at":"2022-11-09T09:30:26Z",
  "draft":false,
  "id":1441740175,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5CgXdH",
  "number":1871,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-09T19:32:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: set appropriate error message for decimal types in arrow",
  "updated_at":"2022-11-09T19:32:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nThis is a reminder to sweep through and label the obviously keyword-only arguments as such. The codebase doesn't have any keyword-only arguments because it once supported Python 2, but that rationale is long gone. This change is backward-incompatible (in a small way, easy to work around), so it should be done before the release.",
  "closed_at":"2022-11-28T15:47:02Z",
  "comments":0,
  "created_at":"2022-11-10T19:14:20Z",
  "id":1444430186,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5WGEFq",
  "number":1872,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Some arguments should be keyword-only.",
  "updated_at":"2023-02-15T19:10:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Motivated by a difference with respect to NumPy: #1320.\r\n\r\nThe new defaults have been more carefully thought through.\r\n\r\n  * monoidal reducers like \"sum\" (which have identities) have `mask_identity=False`\r\n  * semigroup reducers like \"argmax\" (no identity) have `mask_identity=True`\r\n  * functions defined in terms of reducers with \"count\" in the denominator have `mask_identity=False` so that the `np.nan` appears for empty lists (just as it does for NumPy)\r\n  * functions defined in terms of reducers, but are on the whole map-like, rather than reducer-like: `mask_identity=False`\r\n  * functions defined in terms of reducers, computed from \"min\" and \"max\": `mask_identity=True`\r\n\r\nI also ensured that we're using `np.errstate` consistently. We want to ignore `np.nan` operations and divisions by zero.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-mask_identity-defaults/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-10T21:51:32Z",
  "comments":1,
  "created_at":"2022-11-10T20:09:54Z",
  "draft":false,
  "id":1444497103,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Cpwqk",
  "number":1873,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-10T21:51:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: better mask_identity defaults for reducer-like functions.",
  "updated_at":"2022-11-10T21:51:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"        This is harder than we thought and should be deferred beyond the next release.\r\n\r\n`np.matmul` on Awkward Arrays should raise `NotImplementedError` for now.\r\n\r\n_Originally posted by @jpivarski in https://github.com/scikit-hep/awkward/issues/1261#issuecomment-1310986350_\r\n      ",
  "closed_at":"2022-11-14T17:50:29Z",
  "comments":0,
  "created_at":"2022-11-10T22:32:59Z",
  "id":1444654667,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5WG65L",
  "number":1874,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`np.matmul` should raise `NotImplementedError` until it gets implemented.",
  "updated_at":"2023-02-15T19:10:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.8.0\n\n### Description and code to reproduce\n\nI'm looking to implement a lookup by index needed to process `TRefArray`s.\r\n\r\nFor example, if we have two arrays:\r\n```python\r\nobj = ak.Array([[46, 77], [], [123], []])\r\ntref = ak.Array([[77], [], [123], []])\r\n```\r\nAnd need to look up the indices of `tref` values in `obj`, one can check the matching pairs:\r\n```python\r\nc = ak.cartesian([obj, tref], axis=1)\r\nc.slot0 == c.slot1\r\n```\r\n```output\r\n<Array [[False, True], [], [True], []] type='4 * var * bool'>\r\n```\r\nThen `argcartesian` can be used to get the indices and perform a lookup:\r\n```python\r\nac = ak.argcartesian([obj, tref], axis=1)\r\nobj[ac[c.slot0 == c.slot1].slot0]\r\n```\r\n```output\r\n<Array [[77], [], [123], []] type='4 * var * int64'>\r\n```\r\nHowever this only works if obj and tref have the same level of juggedness (specified by `axis=1`). It would help to use `axis=-1`, but `ak.argcartesian` doesn't support this: https://github.com/scikit-hep/awkward/blob/v1.10.2/src/awkward/operations/structure.py#L3640-L3644\r\n",
  "closed_at":"2022-11-12T14:59:33Z",
  "comments":8,
  "created_at":"2022-11-11T06:06:20Z",
  "id":1444978424,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5WIJ74",
  "number":1875,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.argcartesian` doesn't support negative values of `axis`",
  "updated_at":"2022-11-12T14:59:33Z",
  "user":"MDQ6VXNlcjI0NTU3Mw=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1681 \r\n\r\nThis was done with `sed`.\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-chore-rename-is-XXX-type/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-12T15:48:41Z",
  "comments":1,
  "created_at":"2022-11-12T13:32:14Z",
  "draft":false,
  "id":1446453578,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5CwVXD",
  "number":1876,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-12T15:48:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: rename is_XXXType to is_XXX (lowercase)",
  "updated_at":"2022-11-12T15:48:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Given that the matrix multiplication (@ operator) is broken (as discussed in #1261), this PR sets `matmul` to raise `NotImplementedError` until a correct implementation for `matmul` is developed. \r\n\r\n\r\nThis fixes #1874 \r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/ioanaif-matmul-notimplemented/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-14T17:50:28Z",
  "comments":2,
  "created_at":"2022-11-14T08:42:34Z",
  "draft":false,
  "id":1447627911,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5C0MvO",
  "number":1877,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-14T17:50:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: np.matmul should raise NotImplementedError until it gets implemented",
  "updated_at":"2022-11-14T17:50:29Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/pyupgrade: v3.2.0 \u2192 v3.2.2](https://github.com/asottile/pyupgrade/compare/v3.2.0...v3.2.2)\n<!--pre-commit.ci end-->\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/pre-commit-ci-update-config/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-17T16:27:18Z",
  "comments":1,
  "created_at":"2022-11-14T22:11:01Z",
  "draft":false,
  "id":1448839492,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5C4UVU",
  "number":1878,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-17T16:27:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-11-17T16:27:19Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nJust as we have a check for base `raise`s in the codebase, we should add a flake8 check for imports of NumPy. The ideal result would be that we are protected from accidentally importing and using NumPy instead of our array abstraction layer.",
  "closed_at":"2023-02-01T18:30:45Z",
  "comments":1,
  "created_at":"2022-11-17T13:36:35Z",
  "id":1453363865,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5WoJKZ",
  "number":1879,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add check for `import numpy` using flake8",
  "updated_at":"2023-02-01T18:30:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Found a typo in the docs. In the example it should be \"data\" not \"index\"",
  "closed_at":"2022-11-17T17:44:45Z",
  "comments":4,
  "created_at":"2022-11-17T16:09:54Z",
  "draft":false,
  "id":1453605910,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DIOb-",
  "number":1880,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-17T17:44:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: Fixed typo in ak.argsort page",
  "updated_at":"2022-11-17T17:45:41Z",
  "user":"MDQ6VXNlcjMwNzI0OTIw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @Laurits7 as a contributor for doc.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward/pull/1880#issuecomment-1318989825)\n\n[skip ci]",
  "closed_at":"2022-11-17T17:46:22Z",
  "comments":0,
  "created_at":"2022-11-17T17:45:37Z",
  "draft":false,
  "id":1453739452,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DIraa",
  "number":1881,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-17T17:46:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add Laurits7 as a contributor for doc",
  "updated_at":"2022-11-17T17:46:23Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Inspired by #983 and https://github.com/CoffeaTeam/coffea/issues/750, we need to take another look at `ak.firsts` and `ak.singletons` to make sure that they behave sensibly for all array types (e.g. that high-coverage suite of layouts copy-pasted from one v2 test to another) and add an `axis` parameter if it does not exist.\r\n\r\nWhat `firsts` is supposed to do is: turn an array of `var * X` into an array of `option[X]` (of the same length) by returning the first item of each non-empty list and `None` for empty lists. `ak.firsts(array)` is like `array[:, 0]` except that it does not raise an exception if there are any empty lists. This has a natural extension to any `axis` and should work for lists buried within anything.\r\n\r\nWhat `singletons` is supposed to do is: turn an array of `option[X]` into an array of `var * X` where each `None` maps to `[]` and each instance `x` of `X` maps to `[x]`. This can also be done at any `axis`.\r\n\r\nThe two functions are inverses of each other, exact inverses if `firsts` acts on lists of lengths 0 and 1 exclusively. These are the two ways of representing missing data: with a missingness token (`None`, which Awkward Array favors in all operations except this one) and with lists of length 0 and 1. (Option type is a monoid; I think only functional languages take this seriously.)\r\n\r\nThese two functions are pretty high in the count of number of uses across GitHub:\r\n\r\n```\r\n233 awkward.firsts(#)            <------\r\n244 awkward.prod(#, axis=)\r\n251 awkward.fromiter(#)\r\n255 awkward.zip(#, with_name=)\r\n255 awkward.singletons(#)        <------\r\n264 awkward.all(#, axis=)\r\n283 awkward.concatenate(#, axis=)\r\n334 awkward.unflatten(#, #)\r\n349 awkward.any(#, axis=)\r\n368 awkward.fill_none(#, #)\r\n388 awkward.sum(#)\r\n422 awkward.count_nonzero(#)\r\n446 awkward.Array(#)\r\n473 awkward.where(#, #, #)\r\n560 awkward.from_iter(#)\r\n747 awkward.sum(#, axis=)\r\n952 awkward.to_numpy(#)\r\n1526 awkward.flatten(#)\r\n1561 awkward.num(#)\r\n```\r\n\r\nand in the count of number of repos in which they were seen across GitHub:\r\n\r\n```\r\n13 awkward.singletons(#)        <------\r\n13 awkward.local_index(#)\r\n13 awkward.max(#)\r\n13 awkward.count(#)\r\n14 awkward.zip(#, depth_limit=)\r\n14 awkward.from_parquet(#)\r\n14 awkward.argsort(#, ascending=)\r\n15 awkward.prod(#, axis=)\r\n15 awkward.firsts(#)            <------\r\n16 awkward.to_list(#)\r\n17 awkward.max(#, axis=)\r\n18 awkward.ones_like(#)\r\n21 awkward.min(#, axis=)\r\n22 awkward.combinations(#, #)\r\n24 awkward.unzip(#)\r\n24 awkward.all(#, axis=)\r\n24 awkward.zeros_like(#)\r\n24 awkward.all(#)\r\n25 awkward.values_astype(#, #)\r\n25 awkward.to_pandas(#)\r\n25 awkward.broadcast_arrays(#, #)\r\n26 awkward.count(#, axis=)\r\n26 awkward.flatten(#, axis=)\r\n28 awkward.concatenate(#)\r\n28 awkward.behavior.update(#)\r\n28 awkward.num(#, axis=)\r\n34 awkward.concatenate(#, axis=)\r\n35 awkward.zip(#, with_name=)\r\n36 awkward.zip(#)\r\n37 awkward.any(#, axis=)\r\n38 awkward.unflatten(#, #)\r\n38 awkward.sum(#)\r\n38 awkward.where(#, #, #)\r\n44 awkward.fill_none(#, #)\r\n55 awkward.sum(#, axis=)\r\n59 awkward.to_numpy(#)\r\n63 awkward.num(#)\r\n70 awkward.Array(#)\r\n70 awkward.flatten(#)\r\n```",
  "closed_at":"2022-12-07T23:00:18Z",
  "comments":1,
  "created_at":"2022-11-17T19:57:26Z",
  "id":1453905343,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5WqNW_",
  "number":1882,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Check ak.firsts/ak.singletons semantics before the 2.0.0 release",
  "updated_at":"2023-02-15T19:10:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Rebases #1778 to preserve history without the suffering of the commit logs!\r\n\r\nThis PR closes #503, fixes #1599\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-refactor-split-packages/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-18T01:19:05Z",
  "comments":1,
  "created_at":"2022-11-18T00:56:37Z",
  "draft":false,
  "id":1454250243,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DKbaq",
  "number":1883,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-18T01:19:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: split C++ and Python packages",
  "updated_at":"2022-11-18T01:35:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This file is no longer used\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/chore-remove-version_info/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-18T10:20:56Z",
  "comments":1,
  "created_at":"2022-11-18T01:21:20Z",
  "draft":false,
  "id":1454276171,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DKhJM",
  "number":1884,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-18T10:20:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: remove VERSION_INFO ",
  "updated_at":"2022-11-18T10:20:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The codecov workflow had drifted from build-test. This ensures that we first install the needed `build` dependency.\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-coverage-workflow/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-18T01:55:01Z",
  "comments":1,
  "created_at":"2022-11-18T01:33:01Z",
  "draft":false,
  "id":1454287882,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DKjuZ",
  "number":1885,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-18T01:55:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: install missing PyPI dependency",
  "updated_at":"2022-11-18T10:13:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nDocs version slugs need to be lower case. It might be worth using Python at this stage, rather than bash.",
  "closed_at":"2022-11-18T10:24:23Z",
  "comments":1,
  "created_at":"2022-11-18T01:45:41Z",
  "id":1454300330,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Wrtyq",
  "number":1886,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Fix version slug generation",
  "updated_at":"2022-11-18T10:24:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The codecov workflow should use the same Python environment as the build-test coverage run, so that our baseline reporting is accurate. See #1888 for more information.",
  "closed_at":"2022-11-18T09:51:49Z",
  "comments":1,
  "created_at":"2022-11-18T09:44:11Z",
  "draft":false,
  "id":1454791527,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DMRRo",
  "number":1887,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-18T09:51:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: use env var for Python version",
  "updated_at":"2022-11-18T10:14:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nCurrently, we have two workflows running codecov. They are identical apart from the fact that only codecov runs on main.\r\nIt would be nice if we could re-use the workflows so that we know our codecov configuration is the same. \r\n\r\nThe easiest solution is just to run the `codecov` workflow for PRs too, and disable the existing codecov reporting from `build-test`. This would equate to an additional linux build matrix job. \r\n\r\nA more involved solution would be to add flags to `build-test` to disable most of the matrix elements for non-PR runs.\r\n\r\nUnrelated, but I wanted to note it down somewhere:\r\nhttps://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/",
  "closed_at":null,
  "comments":1,
  "created_at":"2022-11-18T10:03:38Z",
  "id":1454818084,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5WtsMk",
  "number":1888,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Rethink codecov workflow",
  "updated_at":"2024-01-20T00:02:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-11-18T10:25:16Z",
  "comments":0,
  "created_at":"2022-11-18T10:24:52Z",
  "draft":false,
  "id":1454848373,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DMdn7",
  "number":1889,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-18T10:25:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: rename deploy-cpp workflow [skip ci]",
  "updated_at":"2022-11-18T10:25:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-11-18T10:40:40Z",
  "comments":0,
  "created_at":"2022-11-18T10:40:25Z",
  "draft":false,
  "id":1454868846,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DMiCY",
  "number":1890,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-18T10:40:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: rename deploy-cpp workflow",
  "updated_at":"2022-11-18T10:40:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-ci-fix-deploy-workflow/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-18T15:07:20Z",
  "comments":2,
  "created_at":"2022-11-18T10:51:22Z",
  "draft":false,
  "id":1454883826,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DMlSw",
  "number":1891,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-18T15:07:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"wip: run deploy for PR",
  "updated_at":"2022-11-18T15:07:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-11-18T15:10:52Z",
  "comments":0,
  "created_at":"2022-11-18T15:10:20Z",
  "draft":false,
  "id":1455301911,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DOBgt",
  "number":1892,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-18T15:10:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: use Python consistently",
  "updated_at":"2022-11-18T15:10:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Which documentation?\n\nPython docstrings\n\n### What needs to be documented?\n\nOn the new site: https://awkward-array.readthedocs.io/en/main/reference/generated/ak.to_parquet.html\r\n\r\nOn the old site: https://awkward-array.readthedocs.io/en/latest/_auto/ak.to_parquet.html\r\n\r\nIt's missing in the code itself; this is all that the docstring has:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/d9dbab6a52896165568844a28d7eee4f05b2133a/src/awkward/operations/ak_to_parquet.py#L37-L68\r\n\r\nIt's probably the only one, because of all the work that the Parquet functions have been getting recently. But someone should do a quick scan through all of the operations to see if there are any more missing docstrings.",
  "closed_at":"2022-12-05T20:33:11Z",
  "comments":0,
  "created_at":"2022-11-18T16:38:33Z",
  "id":1455441381,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5WwEXl",
  "number":1893,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.to_parquet has lost its docstring documentation",
  "updated_at":"2023-02-15T19:10:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR adds an input form to enable publishing the C++ distributions to PyPI, and sets the API token.\r\n",
  "closed_at":"2022-11-18T18:38:23Z",
  "comments":0,
  "created_at":"2022-11-18T18:33:28Z",
  "draft":false,
  "id":1455612608,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DPESC",
  "number":1894,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-18T18:38:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: set tokens & disable release for C++ [skip ci]",
  "updated_at":"2022-11-18T18:38:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This definitely fixes the wheel (locally), but I also added tests to ensure that we check the metadata of the wheels before upload. This just ensures that if we do practice runs, we'll catch metadata issues a bit earlier.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-chore-fix-cpp-readme/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-18T22:40:11Z",
  "comments":2,
  "created_at":"2022-11-18T22:03:22Z",
  "draft":false,
  "id":1455880700,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DP_Hl",
  "number":1895,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-18T22:40:11Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: add README.md to awkward-cpp",
  "updated_at":"2022-11-18T22:40:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The release workflow failed in https://github.com/scikit-hep/awkward/actions/runs/3501131090, https://github.com/scikit-hep/awkward/actions/runs/3501173113, because the endpoint URL that is used to look up the PyPI package was not properly formed; when the relative package URL was joined with the endpoint, the `pypi` component was lost. \r\n\r\nThis PR fixes the default URL, and adds a check to make this impossible in future. It also simplifies the SOURCE_DATE_EPOCH computation.",
  "closed_at":"2022-11-19T12:03:25Z",
  "comments":1,
  "created_at":"2022-11-19T11:59:56Z",
  "draft":false,
  "id":1456426471,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DR0k0",
  "number":1897,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-19T12:03:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: simplify hash computation [skip ci]",
  "updated_at":"2022-11-19T12:03:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR enables manual re-releasing of failed workflows onto PyPI. This addresses problems such as intermittent CI, but we should have a policy when it comes to failures that require repository changes. In this particular instance, only the CI was modified between the GH release and the valid PyPI release (to come), so I think this is acceptable.",
  "closed_at":"2022-11-19T12:19:03Z",
  "comments":0,
  "created_at":"2022-11-19T12:16:23Z",
  "draft":false,
  "id":1456436105,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DR2sP",
  "number":1898,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-19T12:19:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: add option to manually release awkward on PyPI",
  "updated_at":"2022-11-19T12:19:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-11-19T14:10:47Z",
  "comments":0,
  "created_at":"2022-11-19T13:15:30Z",
  "draft":true,
  "id":1456467301,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DR9g4",
  "number":1899,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"wip: add debug log",
  "updated_at":"2022-11-19T14:10:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The CI currently tries to figure out the last modification time of the source code for reproducibility. We use this value in the following ways:\r\n- setting a timestamp for the generated test files\r\n- setting the PAX headers for the built sdist\r\n\r\nWe really need this figure to be exact; when we check whether awkward-cpp has been released, we do this as safely as possible by building an sdist and comparing the SHA256. Of course, if any generated timestamps are different, the checksums will not agree. \r\n\r\nThere is no single notion of what the \"last modified\" time of the source should be; really, the generated C++ tests should use the modification time of the kernel specification/data, whereas the awkward-cpp package should use the last commit of anything inside the subdirectory. Needless to say, to properly support all of this, we would \r\n1. need to add a new env var / config option for the test generation and download more comprehensive git history in the CI workflows.\r\n2. exclusively use `SOURCE_DATE_EPOCH`, and set it to a constant value. \r\n\r\nThis PR started with option (2) to make `SOURCE_DATE_EPOCH` constant in every workflow. However, (1) is feasible, and the fix is to just download the entire repository history in a single job. We do not need to do this for the `build-test` workflow, which doesn't need an accurate value for `SOURCE_DATE_EPOCH`; the build cache just needs a stable timestamp.\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-ci-simplify-source-date-epoch/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-19T18:19:56Z",
  "comments":1,
  "created_at":"2022-11-19T14:28:22Z",
  "draft":false,
  "id":1456509378,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DSGtW",
  "number":1900,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-19T18:19:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: set constant `$SOURCE_DATE_EPOCH`",
  "updated_at":"2022-11-19T18:19:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR adds the `drop_none` functionality.  Requested in #832 \r\n\r\n`ak.drop_none(array, axis)` - removes missing values (None) from a given array.\r\n\r\nFor example, in the following array,\r\n\r\n`a = ak.Array([[[0]], [[None]], [[1], None], [[2, None]]])`\r\n\r\nThe None values will be removed, resulting in\r\n\r\n```\r\n>>> ak.drop_none(a)\r\n<Array [[[0]], [[]], [[1]], [[2]]] type='4 * var * var * int64'>\r\n```\r\n\r\nThe default axis is None. However, an axis can be specified:\r\n\r\n```\r\n>>> ak.drop_none(a,axis=1)\r\n<Array [[[0]], [[None]], [[1]], [[2, None]]] type='4 * var * var * ?int64'>\r\n```",
  "closed_at":"2022-12-16T16:30:46Z",
  "comments":4,
  "created_at":"2022-11-21T14:37:52Z",
  "draft":false,
  "id":1458055005,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DXL7_",
  "number":1904,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-16T16:30:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: add ak.drop_none()",
  "updated_at":"2022-12-16T16:30:47Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Also, the functions that are defined in terms of reducers (`ak.ptp`, `ak.moment`, `ak.mean`, `ak.var`, `ak.std`, `ak.covar`, `ak.corr`, `ak.linear_fit`, `ak.softmax`) now pass behavior consistently. (Previously, only `ak.std` made a half-hearted attempt.)\r\n\r\n`ak.to_categorical` had a `behavior` argument added (somehow overlooked before).\r\n\r\nThe `ak.*_like` functions had their arguments reordered so that `dtype` is earlier than `highlevel` or `behavior` (which is the freedom to fix things that this PR is intended to make permanent).\r\n\r\nIn general, any `ak.*` function arguments that are \"very optional\"\u2014configuring unusual situations\u2014are now keyword-only, especially if they're booleans. It's very easy to mix up the order of boolean arguments. But `axis` arguments were left positional, since there are instances of positional `axis` in the wild.\r\n\r\nThe `Content` and `Form` subclasses, however, were left as they are. They're part of the low-level public API, and have only two arguments that are at all optional: `parameters` and `nplike` or `form_key`. These are all different types and unlikely to get misordered, and very unlikely to change order in the future. So there's not a strong need to make these arguments keyword-only.\r\n\r\nThe `Type` and `Index` subclasses are also low-level public API. `Type`'s `typestr` argument and `Index`'s `metadata` and `nplike` deserve to be keyword-only because they are rarely used and could be confusing. Any downstream developers who _do_ use them should have a good understanding of what they are and do, at least at the level of spelling out their names.\r\n\r\nThat's everything that's going on in this PR!\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-made-very-optional-arguments-keyword-only/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-28T15:47:01Z",
  "comments":11,
  "created_at":"2022-11-21T23:12:35Z",
  "draft":false,
  "id":1458732182,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DZfmF",
  "number":1905,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-28T15:47:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: made 'very optional' arguments keyword-only",
  "updated_at":"2022-11-28T15:47:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR:\r\n- cleans up how we find our headers - they're now available in the project root\r\n- exposes the tracebacks of broken builds (hopefully)\r\n- fixes the broken dependency of ipykernel that's being pulled from conda-forge.\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-header-only-docs/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-22T17:07:06Z",
  "comments":6,
  "created_at":"2022-11-22T16:04:51Z",
  "draft":false,
  "id":1460149997,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DeaUe",
  "number":1907,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-22T17:07:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: fix broken build",
  "updated_at":"2022-11-22T17:07:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-add-ioanas-test-of-to_arraylib/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-22T17:59:04Z",
  "comments":1,
  "created_at":"2022-11-22T17:36:44Z",
  "draft":false,
  "id":1460291420,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5De5Sf",
  "number":1908,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-22T17:59:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"test: add @ioana's tests of to_arraylib.",
  "updated_at":"2022-11-22T17:59:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"I think these were merged in by #1732 \r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-util-legacy-usage/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-28T10:28:13Z",
  "comments":2,
  "created_at":"2022-11-22T17:38:24Z",
  "draft":false,
  "id":1460293636,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5De5xY",
  "number":1909,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: references to old `ak._util.error`",
  "updated_at":"2022-12-06T18:09:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nIn https://github.com/scikit-hep/awkward/pull/1904#discussion_r1029626522, I said that a particular construction (`IndexedArray` of `IndexedOptionArray`) doesn't need to be considered because it's not a valid array, and while we try to use `simplify_optiontype` and `simplify_uniontype` to ensure that these things don't exist, erroneous cases have slipped through in the past, and they might again.\r\n\r\nFirst of all, we even need a way of talking about these states. @agoose77 suggested \"canonical representation,\" but there are multiple levels of canonicity.\r\n\r\n- Level 0, short-range metadata constraints: `Content` node with wrong-type or out-of-range metadata, like a `RegularArray` with a `size` of `\"some_string\"` or `-12`. This is already prohibited by the `Content` constructors and can never exist as an object.\r\n- Level 1, long-range metadata constraints: `Content` node with metadata that is incompatible with another `Content` node, such as its direct child `content`. The above-mentioned `IndexedArray` of `IndexedOptionArray` is an example. These states are allowed to exist in the midst of a calculation, but they need to be fixed before handing them off to the user.\r\n- Level 2, long-range value constraints: `Content` node with array values that are incompatible with itself or another node (in practice, always a direct child), such as an `IndexedArray` with a negative value in `index`, or with a value in `index` that is greater than or equal to the length of its `content`. The `validity_error` tests (`check_valid` argument of the `ak.Array` constructor) check these, as well as some long-range metadata constraints, like the fact that a `\"string\"` should be a list-type array that contains a `\"char\"` `NumpyArray`.\r\n\r\nThe level 2 checks are _O(n)_ where _n_ is the length of the array, so they have to be invoked by user request. Adding them to the `ak.Array` constructor, for instance, would be a bad performance regression, and almost always unnecessary.\r\n\r\n(Also note that if a kernel function needs a particular level 2 constraint to be satisfied, it performs that check as part of its operation. That's usually inexpensive because the _O(n)_ loop was happening anyway and the relevant data are already in fast memory anyway.)\r\n\r\nLevel 1 checks, however, scale with the size of the tree but not with the lengths of any arrays. Low-level arrays (layouts) are allowed to be level-1 invalid while we work on them, but if we're ever wrapping them as high-level `ak.Arrays`, they should already be simplified: i.e. the `simplify_optiontype` method should be called on an `IndexedArray` of `IndexedOptionArray` to turn it into a single-level `IndexedOptionArray`. (Similarly for `simplify_uniontype`.)\r\n\r\nScaling with the size of the tree might still be a problem if it happens frequently: our internal code pulls layouts out of `ak.Arrays` and re-wraps them as new `ak.Arrays` quite a lot, and some records have thousands of fields. We wouldn't want the same checks to be performed on the same layouts, over and over. Perhaps the best way is to add a `_metadata_checked: bool` attribute to every `Content` instance. If `not _metadata_checked` in the `ak.Array` or `ak.Record` constructor, a check should be performed to either set it to `True` or to raise an error. Since Awkward Arrays are immutable, a `True` value of `_metadata_checked` at any level means that `_metadata_checked` is true for all nested children.\r\n\r\nSome node types never need to be checked:\r\n\r\n```python\r\nclass EmptyArray(Content):\r\n    _metadata_checked = True\r\n```\r\n\r\nand\r\n\r\n```python\r\nclass NumpyArray(Content):\r\n    _metadata_checked = True\r\n```\r\n\r\ncan be class attributes, `True` for all instances of the class. Similarly,\r\n\r\n```python\r\nclass Content:\r\n    _metadata_checked = False\r\n```\r\n\r\nas a class attribute would set the default that is only overridden with a new reference to the `True` PyObject when a check is actually performed, so this has zero overhead for temporary layouts that never get into any `ak.Array.\r\n\r\nThe use of the word \"metadata\" in level 1 checks won't ever be confused with level 0 because level 0 fails at [RAII time](https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization).\r\n\r\nAdding the long-range metadata check as an \"always on\" consistency test means that it can (and should) be removed from the `validity_error` tests, which would then focus exclusively on long-range value checks.\r\n\r\nWhatever we implement for normal arrays will also work for `TypeTracerArrays` because we're only accessing the metadata. Maybe a little special care would be needed for `RecordArray`, whose `length` must be less than or equal to the `length` of all of its `contents`, as a long-range metadata constraint. This might need to speculatively pass at the `TypeTracerArray` stage (i.e. Dask graph creation) and fail when real arrays are executed (Dask worker nodes).\r\n\r\nThe value of all of this is to learn very quickly about any missing calls to `simplify_optiontype` or `simplify_uniontype`. I think that this should go in _after the 2.0.0 release_, rather than adding more work to the remaining time in the schedule. Technically, this would turn situations that might happen to work into situations that raise errors, but turning a silent error into a noisy one can hardly be called an API change.",
  "closed_at":"2022-12-03T22:10:59Z",
  "comments":3,
  "created_at":"2022-11-22T19:04:21Z",
  "id":1460411466,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5XDBxK",
  "number":1910,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Long-range metadata checks during ak.Array creation",
  "updated_at":"2023-02-15T19:10:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/ioanaif-refactor-nextcarry-outindex/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-22T20:29:28Z",
  "comments":1,
  "created_at":"2022-11-22T20:12:09Z",
  "draft":false,
  "id":1460490904,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Dfk-u",
  "number":1911,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-22T20:29:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: refactor '_nextcarry-outindex' to have the same signature everywhere",
  "updated_at":"2022-11-22T20:29:29Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"I think, it should be ignored\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/ianna-git-ignore-nox/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-23T12:34:38Z",
  "comments":2,
  "created_at":"2022-11-23T12:11:23Z",
  "draft":false,
  "id":1461645756,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DjnBZ",
  "number":1912,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-23T12:34:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: ignore .nox",
  "updated_at":"2022-11-23T12:34:39Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The NumPy lower bound for Awkward increased when we moved to `python_version>=3.7`. We made this fix in the CI, but not in the packaging metadata.\r\n\r\nWe also didn't test the `tests` or `coverage` Nox sessions, as they don't work with `scikit-build-core` out of the box. I'll follow up with @henryiii, but in the mean time we can at least ensure that they try to install the right package :facepalm: \r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-pytest/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-25T12:19:27Z",
  "comments":1,
  "created_at":"2022-11-24T10:54:25Z",
  "draft":false,
  "id":1463155597,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5DoveY",
  "number":1913,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-25T12:19:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: fix NumPy bound & noxfile installs",
  "updated_at":"2022-11-25T12:19:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nHere's an array with missing values at many levels, including unequal branches through a RecordArray:\r\n\r\n```python\r\n>>> array = ak.Array([\r\n...     None,\r\n...     [None],\r\n...     [{\"x\": None, \"y\": None}],\r\n...     [{\"x\": [None], \"y\": [None]}],\r\n...     [{\"x\": [1], \"y\": [[None]]}],\r\n...     [{\"x\": [2], \"y\": [[1, 2, 3]]}],\r\n... ])\r\n```\r\n\r\nFor `axis=0`, we expect item `0` to be `True` and the rest to be `False`, which is correct in v1 and v2 (only v2 is shown):\r\n\r\n```python\r\n>>> ak.is_none(array, axis=0).show(type=True)   # v2\r\ntype: 6 * bool\r\n[True,\r\n False,\r\n False,\r\n False,\r\n False,\r\n False]\r\n```\r\n\r\nFor `axis=1`, we expect item `0` to be `None`, item 1 to be a singleton list containing `True`, and all the rest to be singleton lists containing `False`, which is correct in v1 and v2:\r\n\r\n```python\r\n>>> ak.is_none(array, axis=1).show(type=True)   # v2\r\ntype: 6 * option[var * bool]\r\n[None,\r\n [True],\r\n [False],\r\n [False],\r\n [False],\r\n [False]]\r\n```\r\n\r\nFor `axis=2`, we expect similar pass-throughs on items `0` and `1`, and item `2` also passes through because record fields are at the same level of `axis` depth as the record itself. (That's a design decision across all of Awkward Array; we can't change it.) Item `3` contains singleton `[True]` for both fields because they're both missing at this level. v1 and v2 are both correct:\r\n\r\n```python\r\n>>> ak.is_none(array, axis=2).show(type=True)   # v2\r\ntype: 6 * option[var * ?{\r\n    x: option[var * bool],\r\n    y: option[var * bool]\r\n}]\r\n[None,\r\n [None],\r\n [{x: None, y: None}],\r\n [{x: [True], y: [True]}],\r\n [{x: [False], y: [False]}],\r\n [{x: [False], y: [False]}]]\r\n```\r\n\r\nFor `axis=3`, we expect pass-throughs on items `0`, `1`, `2`, and `3`, but item `4` should pass-through on field `x` (`axis=3` is deeper than that field) while field `y` is `[[True]]`. Only v1 gets it right (showing v1):\r\n\r\n```python\r\n>>> ak.is_none(array, axis=3).tolist()   # v1\r\n[None, [None], [{'x': None, 'y': None}], [{'x': [None], 'y': [None]}], [{'x': [1], 'y': [[True]]}], [{'x': [2], 'y': [[False, False, False]]}]]\r\n```\r\n\r\nv2 raises an AxisError:\r\n\r\n```python\r\n>>> ak.is_none(array, axis=3).show(type=True)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_is_none.py\", line 28, in is_none\r\n    return _impl(array, axis, highlevel, behavior)\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/operations/ak_is_none.py\", line 72, in _impl\r\n    raise ak._errors.wrap_error(\r\nnumpy.AxisError: while calling\r\n\r\n    ak.is_none(\r\n        array = <Array [None, ..., [{x: [2], ...}]] type='6 * option[var * ...'>\r\n        axis = 3\r\n        highlevel = True\r\n        behavior = None\r\n    )\r\n\r\nError details: axis=3 exceeds the depth (2) of this array\r\n```\r\n\r\nIt looks like there's an \"and\" when there ought to be an \"or,\" or something like that.\r\n\r\n--------------------------\r\n\r\nNow for negative `axis`. For `axis=-1`, I would expect\r\n\r\n```\r\ntype: 6 * option[var * ?{\r\n    x: var * bool,\r\n    y: option[var * bool]\r\n}]\r\n[None,\r\n [None],\r\n [{x: None, y: None}],\r\n [{x: [True], y: [None]}],\r\n [{x: [False], y: [[True]]}],\r\n [{x: [False], y: [[False, False, False]]}]]\r\n```\r\n\r\nbecause `axis=-1` goes all the way down to the option-type integers in field `y` and all the way down to the option-type integers in field `x`, which are different depths.\r\n\r\nInstead, `axis=-1` in v1 and v2 implements what I would expect for `axis=-2`:\r\n\r\n```python\r\n>>> ak.is_none(array, axis=-1).show(type=True)   # v2\r\ntype: 6 * option[var * ?{\r\n    x: bool,\r\n    y: option[var * bool]\r\n}]\r\n[None,\r\n [None],\r\n [{x: True, y: None}],\r\n [{x: False, y: [True]}],\r\n [{x: False, y: [False]}],\r\n [{x: False, y: [False]}]]\r\n```\r\n\r\n```python\r\n>>> ak.is_none(array, axis=-1).tolist()   # v1\r\n[None, [None], [{'x': True, 'y': None}], [{'x': False, 'y': [True]}], [{'x': False, 'y': [False]}], [{'x': False, 'y': [False]}]]\r\n```\r\n\r\nThere seems to have always been an off-by-one error in this accounting. It only needs to be fixed in v2.\r\n\r\nIncidentally, if we make an array just like above but without `x`, it's still wrong in the same way. This second bug is not due to confusion about the record-branching, it's a constant off-by-one error.\r\n\r\n```python\r\n>>> array = ak.Array([None, [None], [{\"y\": None}], [{\"y\": [None]}], [{\"y\": [[None]]}], [{\"y\": [[1, 2, 3]]}]])\r\n\r\n>>> ak.is_none(array, axis=-1).show(type=True)   # v2\r\ntype: 6 * option[var * ?{\r\n    y: option[var * bool]\r\n}]\r\n[None,\r\n [None],\r\n [{y: None}],\r\n [{y: [True]}],\r\n [{y: [False]}],\r\n [{y: [False]}]]\r\n```\r\n\r\n```python\r\n>>> array = ak.Array([None, [None], [{\"y\": None}], [{\"y\": [None]}], [{\"y\": [[None]]}], [{\"y\": [[1, 2, 3]]}]])\r\n\r\n>>> ak.is_none(array, axis=-1).tolist()   # v1\r\n[None, [None], [{'y': None}], [{'y': [True]}], [{'y': [False]}], [{'y': [False]}]]\r\n```",
  "closed_at":"2022-12-09T15:45:07Z",
  "comments":2,
  "created_at":"2022-11-24T16:22:36Z",
  "id":1463575518,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5XPGPe",
  "number":1914,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.is_none is off-by-one with negative axis and doesn't handle an edge case of positive axis",
  "updated_at":"2023-02-15T19:10:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR:\r\n- runs the `yesqa` tool to remove unnecessary `#noqa` comments. It doesn't seem to be perfect, so I've not added it to pre-commit in the end.\r\n- fixes the flake8 configuration that was erroneously ignoring some `src` files (my bad!)\r\n- catches some instances of exceptions not being raised\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-chore-yesqa/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-28T15:24:28Z",
  "comments":3,
  "created_at":"2022-11-27T10:18:02Z",
  "draft":false,
  "id":1465393783,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Dv_gN",
  "number":1915,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-28T15:24:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: run `yesqa`",
  "updated_at":"2022-11-28T15:44:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nWhen we release 2.0.0, we will need to be confident that our documentation and contributing guides are up-to-date. We should _explicitly_ check the following (and anything else that people remember, please edit this issue)\r\n\r\n- [x] README.md\r\n- [x] CONTRIBUTING.md\r\n- [x] documentation\r\n- [x] docstrings",
  "closed_at":"2022-12-09T15:34:00Z",
  "comments":2,
  "created_at":"2022-11-28T16:25:41Z",
  "id":1466709819,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5XbDc7",
  "number":1916,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Ensure all release documentation is up-to-date",
  "updated_at":"2023-02-15T19:10:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nI feel very certain that I implemented this, but I can't find the implementation anywhere.\r\n\r\nEven in [main-v1 src/awkward/_connect/_numba](https://github.com/scikit-hep/awkward/tree/main-v1/src/awkward/_connect/_numba) (assuming it was overlooked in the porting), all of the references to holding the GIL are related to partitions and C++ shared_ptr references, which are no longer things we need to worry about.\r\n\r\nWhen `array[i]` is called for an `array` of strings (ListArrayType whose `__array__` property is `\"string\"`), it should return a Numba string, namely `nb.types.string`. That's a Python Unicode object, which requires GIL-holding, but returning that instead of an Awkward list array has the advantage that all of the Numba methods will work for its lowered string type.\r\n\r\nWhat I may be remembering is that ArrayBuilder _consumes_ strings. What this feature request is asking for is for Arrays to _produce_ strings. (And same for bytestrings: `__array__` is `\"bytestring\"`.)\r\n\r\nI'd like to assign this to you, @ianna, since you're focusing on the Numba stuff and are already familiar with how Numba deals with strings. It's lower priority than Numba-CUDA, though.",
  "closed_at":"2022-12-06T00:14:50Z",
  "comments":5,
  "created_at":"2022-11-28T17:40:43Z",
  "id":1466829811,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Xbgvz",
  "number":1917,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Present Awkward strings to Numba as Numba strings",
  "updated_at":"2022-12-06T00:14:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Our `nplike` mechanism encodes two different things; a NumPy abstraction, and a higher-level index-content abstraction through `index_nplike`. This is problematic for several reasons:\r\n- accidental confusion of nplikes is easier, as it's hard to tell whether a function uses `nplike` or `nplike.index_nplike`\r\n- index nplikes shouldn't also have `index_nplike`\r\n\r\nAdditionally, we don't need to pass around `nplike` everywhere now that we know we can only have a single nplike family per layout. This does have consequences for our JAX integration, which cheats and stores the *wrong* nplike in the layout. We need to tackle this anyway.",
  "closed_at":"2022-11-29T14:30:15Z",
  "comments":6,
  "created_at":"2022-11-28T22:51:39Z",
  "draft":true,
  "id":1467199085,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5D18R2",
  "number":1918,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: split nplike into two nplikes",
  "updated_at":"2023-03-16T13:32:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR tackles a small naming inconsistency. Because these are public functions, we should decide now whether to merge this!\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-refactor-rename-to-xxx/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-29T00:05:02Z",
  "comments":3,
  "created_at":"2022-11-28T23:07:07Z",
  "draft":false,
  "id":1467212054,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5D1_Cs",
  "number":1919,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-29T00:05:02Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: rename `toXXX` methods",
  "updated_at":"2022-11-29T00:05:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/pre-commit/pre-commit-hooks: v4.3.0 \u2192 v4.4.0](https://github.com/pre-commit/pre-commit-hooks/compare/v4.3.0...v4.4.0)\n- [github.com/PyCQA/flake8: 5.0.4 \u2192 6.0.0](https://github.com/PyCQA/flake8/compare/5.0.4...6.0.0)\n<!--pre-commit.ci end-->\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/pre-commit-ci-update-config/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-29T15:44:51Z",
  "comments":8,
  "created_at":"2022-11-28T23:30:48Z",
  "draft":false,
  "id":1467233212,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5D2DsH",
  "number":1920,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-29T15:44:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-11-29T15:44:52Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-refactor-content-keyword/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-29T19:55:54Z",
  "comments":4,
  "created_at":"2022-11-29T11:21:30Z",
  "draft":false,
  "id":1467891425,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5D4QHh",
  "number":1921,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-29T19:55:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor!: make `Content` initialisers take `nplike`, `parameters` as keyword",
  "updated_at":"2022-11-29T19:55:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This supercedes #1918 as a means of hardening the nplike mechanism. It:\r\n\r\n- [x] Changes initialisers of non-leaf `Content` classes to remove `nplike` argument[^caveat].\r\n- [x] Introduces a \"backend\" object that holds the kernels, nplike, and index nplike. This replaces the `nplike` object that we pass around in most cases, although we might wish to keep that if there are compatibility needs.\r\n- [x] Imposes constraint that layout index-types must match content backend.\r\n- [x] Reverts previous attempt to make JAX leak-proof (see comments)\r\n\r\n## Changes to Development Practices\r\n\r\nWith this PR, most of the time we want to work with a `backend` object. A backend object can be taken from an existing array with \r\n```python\r\n\r\nbackend = ak._backends.backend_of(*arrays)\r\n```\r\n\r\nUnlike `ak._nplikes.nplike_of`, `ak._backends.backend_of` will throw an exception if it can't detect a single array-like object amongst the arguments. This is to avoid defaulting to NumPy when we do not want it to. The `default` argument can be provided to request a default, e.g.\r\n```python\r\n\r\nbackend = ak._backends.backend_of(\r\n\t*arrays, \r\n\tdefault=ak._backends.NumpyBackend.instance()\r\n)\r\n```\r\n\r\nThis `backend` object has `nplike` and `index_nplike` attributes, which replace `nplike` and `nplike.index_nplike`.\r\n\r\n:warning: you must now pass the _`index_nplike`_ to `Index`, i.e.\r\n```python3\r\nindex = ak.index.Index64(..., nplike=self._backend.index_nplike)\r\n```\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-refactor-introduce-backend/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->\r\n\r\n[^caveat]: Except for layouts that might need to pick one.",
  "closed_at":"2022-11-30T19:04:59Z",
  "comments":5,
  "created_at":"2022-11-29T14:28:08Z",
  "draft":false,
  "id":1468160771,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5D5KXa",
  "number":1922,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-30T19:04:59Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: introduce `backend` as a higher abstraction than `nplike`",
  "updated_at":"2022-12-02T16:16:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nThis currently fails silently.",
  "closed_at":"2022-12-23T14:16:39Z",
  "comments":1,
  "created_at":"2022-11-30T11:18:24Z",
  "id":1469468122,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Xlk3a",
  "number":1923,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Test uses of `ak.nplikes.nplike_of` on high level objects",
  "updated_at":"2022-12-23T14:16:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"After #1910, any handling of non-canonical layouts (\"level 1\") will become dead code, uncoverable, because we won't be able to make those non-canonical layouts anymore. (Good!) So this issue is asking to clean them up, replacing complex implementations with simple ones.\r\n\r\nFor example, `is_none` does this:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/3edac9b342ea13d4ede6ff9f541da60aee72bb2b/src/awkward/operations/ak_is_none.py#L33-L59\r\n\r\nwhen all you need (for canonical layouts) is this:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/500e0dd06fa4aa542ac0226da24851fb730e5042/src/awkward/operations/structure.py#L2857-L2875\r\n\r\nIt was implemented because of PR #1249, which is issue #1193, which was motivated by this layout:\r\n\r\n```python\r\n>>> index_of_index = ak.Array(\r\n...     ak.layout.IndexedOptionArray64(\r\n...         ak.layout.Index64(np.r_[0, 1, 2, 3]),\r\n...         ak.layout.IndexedOptionArray64(\r\n...             ak.layout.Index64(np.r_[0, -1, 2, 3]),\r\n...             ak.layout.NumpyArray(np.r_[1, 2, 3, 4]),\r\n...         ),\r\n...     )\r\n... )\r\n>>> index_of_index\r\n<Array [1, None, 5, 6] type='4 * ?union[?int64, ?int64]'>\r\n>>> ak.is_none(index_of_index)\r\n<Array [False, False, False, False] type='4 * bool'>\r\n```\r\n\r\nwhich is non-canonical and not allowed.",
  "closed_at":null,
  "comments":1,
  "created_at":"2022-11-30T15:46:19Z",
  "id":1469849251,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5XnB6j",
  "number":1924,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Any handling of non-canonical layout combinations can be removed",
  "updated_at":"2024-01-20T00:04:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/gh-action-pypi-publish](https://github.com/pypa/gh-action-pypi-publish) from 1.5.1 to 1.5.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/gh-action-pypi-publish/releases\">pypa/gh-action-pypi-publish's releases</a>.</em></p>\n<blockquote>\n<h2>v1.5.2</h2>\n<h2>What's Improved</h2>\n<ul>\n<li>Implemented the Twine transitive dependency tree pinning using pip-tools-generated constraint files. See <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/issues/107\">pypa/gh-action-pypi-publish#107</a> and <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/issues/101\">pypa/gh-action-pypi-publish#101</a> for details.</li>\n</ul>\n<p><strong>Full Diff</strong>: <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.1...v1.5.2\">https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.1...v1.5.2</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/d7edd4c95736a5bc1260d38b5523f5d24338bc25\"><code>d7edd4c</code></a> Add user-global site-packages to <code>$PYTHONPATH</code></li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/8d5f27cca4a50790668fae0c4211d3f380213dad\"><code>8d5f27c</code></a> Install Twine in the user-global site-packages</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/b0dc178d8e9955153bdd91f7aeaca24951330289\"><code>b0dc178</code></a> Disable pip cache dir with an env var</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/bbf6e0b2f09b6ddd8a439374509c868678be1630\"><code>bbf6e0b</code></a> Copy requirements to corresponding dir @ container</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/0b69a8c2dfa166206a4007a228ec3306ac63d1d0\"><code>0b69a8c</code></a> Document broken <code>pkginfo==1.9.0</code> transitive dep</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/c54db9c2b7aa2a20b80134f0f154359c73bbdf0b\"><code>c54db9c</code></a> Integrate pip-tools-generated constraint files</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/480ec4ed586e715b06c3d3a5fcdfa4834246d7e2\"><code>480ec4e</code></a> Inherit <code>yamllint</code> config from the default preset</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/5fb2f047e26679d7846a8370de1642ff160b9025\"><code>5fb2f04</code></a> Drop <code>__token__</code> from README code usage snippets</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/7bbdccd64f6c5b529791c461d8ee2c4a800e6e1d\"><code>7bbdccd</code></a> Update the mention of <code>master</code> with <code>unstable/v1</code></li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/328cf89e055741bf958be0e37ea8119928c35b0e\"><code>328cf89</code></a> \ud83d\udcdd Fix a link to the &quot;Distribution Package&quot; term</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.1...v1.5.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/gh-action-pypi-publish&package-manager=github_actions&previous-version=1.5.1&new-version=1.5.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2022-12-05T17:09:56Z",
  "comments":2,
  "created_at":"2022-11-30T17:06:05Z",
  "draft":false,
  "id":1469960745,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5D_OD5",
  "number":1925,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Build(deps): bump pypa/gh-action-pypi-publish from 1.5.1 to 1.5.2",
  "updated_at":"2022-12-05T17:09:59Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nSee title.",
  "closed_at":"2024-01-20T21:35:37Z",
  "comments":3,
  "created_at":"2022-11-30T18:53:27Z",
  "id":1470082496,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Xn63A",
  "number":1926,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Move `NumpyArray.ptr` body to `NumpyLike`.",
  "updated_at":"2024-01-20T22:43:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is part of #1910, since a UnionArray with 0 or 1 `contents` is non-canonical (level 1). However, it affects the constructor arguments: UnionArray does not need an explicit `backend`. The constructor argument set appears in `__init__` (naturally), `copy`, and `simplified`.",
  "closed_at":"2022-12-03T22:10:59Z",
  "comments":0,
  "created_at":"2022-11-30T19:50:56Z",
  "id":1470142538,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5XoJhK",
  "number":1927,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Forbid UnionArrays/UnionForms with fewer than 2 contents in constructor",
  "updated_at":"2023-02-15T19:10:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Instead of constructing non-canonical arrays and then simplifying them into something canonical, these `@classmethods` only construct canonical arrays from the start.\r\n\r\nThe next PR after this will enforce canonicity (level 1) in the Content constructors. This is the first half of #1910.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-replace-simplify-method-with-classmethod-constructor/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-01T18:01:50Z",
  "comments":5,
  "created_at":"2022-11-30T20:04:16Z",
  "draft":false,
  "id":1470155986,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5D_38g",
  "number":1928,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-01T18:01:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: replace `simplify_optiontype` and `simplify_uniontype` with `simplified` classmethod",
  "updated_at":"2023-02-15T19:10:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\nWhile testing on MacOS, I've been using\r\n\r\n```bash\r\npytest -n 8 tests\r\n```\r\n\r\nto run the tests quickly, but occasionally (~10% of the time), there are 9 segfaults:\r\n\r\n```\r\nFAILED tests/test_1374-to-rdataframe.py::test_two_columns - cppyy.ll.SegmentationViolation: vector<string> ROOT::RDF...\r\nFAILED tests/test_1374-to-rdataframe.py::test_two_columns_as_rvecs - cppyy.ll.SegmentationViolation: vector<string> ROOT::RDF...\r\nFAILED tests/test_1374-to-rdataframe.py::test_two_columns_as_vecs - cppyy.ll.SegmentationViolation: vector<string> ROOT::RDF...\r\nFAILED tests/test_1374-to-rdataframe.py::test_two_columns_transform_filter - cppyy.ll.SegmentationViolation: vector<string> ROOT::RDF...\r\nFAILED tests/test_1374-to-rdataframe.py::test_jims_example1 - cppyy.ll.SegmentationViolation: vector<string> ROOT::RDF...\r\nFAILED tests/test_1625-multiple-columns-from-rdataframe.py::test_rdata_frame_rvecs_as_records - cppyy.ll.SegmentationViolation: vector<string> ROOT::RDF...\r\nFAILED tests/test_1781-rdataframe-snapshot.py::test_data_frame_integers - cppyy.ll.SegmentationViolation: vector<string> ROOT::RDF...\r\nFAILED tests/test_1781-rdataframe-snapshot.py::test_data_frame_vec_of_vec_of_real - cppyy.ll.SegmentationViolation: vector<string> ROOT::RDF...\r\nFAILED tests/test_1829-to-from-rdataframe-bool.py::test_filters_as_well - cppyy.ll.SegmentationViolation: vector<string> ROOT::RDF...\r\n```\r\n\r\nI've only seen this on MacOS, not Linux. My ROOT version is\r\n\r\n```\r\n% root --version\r\nROOT Version: 6.26/06\r\nBuilt for macosxarm64 on Aug 07 2022, 00:21:00\r\nFrom @\r\n```\r\n\r\nfrom conda-forge. I'm a little worried about the installation because I tried uninstalling `root` and `root_base`, and yet `import ROOT` still worked... which is weird...\r\n\r\nI'm labeling this as `bug (unverified)` because if @ianna can't reproduce it, we'll blame my conda installation and I'll try to reinstall that from scratch (and see if it's still there). Once you reproduce it, @ianna, you can change the label to `bug`. Note: this is not a `next-release` priority, since fixing it won't change the public API.",
  "closed_at":"2024-01-03T16:01:59Z",
  "comments":4,
  "created_at":"2022-11-30T21:43:09Z",
  "id":1470252488,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5XokXI",
  "number":1929,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`pytest -n 8 tests` segfaults about 10% of the time on MacOS",
  "updated_at":"2024-01-03T16:01:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"`ak.unflatten` throws a secondary error if a 2D ragged array is passed for `counts`. This PR fixes that by catching the `else` case, and adds tests to try out the various improper `count` values.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-ndim-unflatten/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-11-30T23:34:45Z",
  "comments":0,
  "created_at":"2022-11-30T23:18:06Z",
  "draft":false,
  "id":1470354231,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EAjTi",
  "number":1930,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-11-30T23:34:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"test: cover the failure modes of unflatten",
  "updated_at":"2022-11-30T23:34:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nA user ran into a cryptic error message when they passed in a string instead of a tuple (it's easy to think you've written a tuple if you forget the comma). We should either handle this (`columns: str | tuple[str, ...]`) or raise an exception for a bare string.\r\n\r\nIn general, I think our current API design is to check for a \"sized iterable that is not a string/bytestring\", though we could also check for a sized iterable with at least one string.",
  "closed_at":"2022-12-06T09:39:40Z",
  "comments":2,
  "created_at":"2022-12-01T12:56:06Z",
  "id":1471268910,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Xscgu",
  "number":1931,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`from_rdataframe` API should handle case that users pass single string",
  "updated_at":"2023-02-15T19:10:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nWhen using the `RDataFrame` integration, users attempting to work with unsupported column types see a cryptic error message. This occurs because `type_to_form` returns the string `\"unsupported type\"` for unsupported types, which then triggers an exception when Awkward attempts to call `json.loads` on the generated form.\r\n\r\nCould we use `std::variant` here to catch the error case?",
  "closed_at":"2022-12-06T16:34:58Z",
  "comments":3,
  "created_at":"2022-12-01T13:54:31Z",
  "id":1471359131,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Xsyib",
  "number":1932,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"`type_to_form` returns non-JSON string in case of error",
  "updated_at":"2022-12-06T16:34:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description\r\n\r\nWe should enforce the idea that kernels are distinct from `nplikes` by having a third `kernel_nplike`, and try to convert all `Index` objects to this nplike before execution. This will ensure that JAX fails if we try to operate on JAX buffer _values_. It's a design decision that we don't support non-differentiable operations on JAX arrays, which means any place that _values_ go through a NumPy kernel.\r\n\r\n### Motivation\r\n\r\nThe `nplike` mechanism is closely related, yet distinct from, the kernel dispatch mechanism. At present we require (implicitly) that the inputs to kernels all have the same nplike. Most kernels operate exclusively on index values, with the notable exception of reducers and a few kernels (IIRC) look at both index and content. In these latter cases, we do not want backends that mix the index and content `nplike`s to be able to invoke the kernel. A simple way to do this is to explicitly define the `nplike` of the kernel, and try to convert the raw pointers to this nplike.",
  "closed_at":"2024-01-20T00:30:41Z",
  "comments":2,
  "created_at":"2022-12-01T16:10:55Z",
  "id":1471580623,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5XtonP",
  "number":1933,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Introduce `kernel_nplike` ",
  "updated_at":"2024-01-20T00:30:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Returns the string layout intact when `ak.ravel()` is performed on a string.\r\n\r\nFixes #1377 \r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-ravel-string/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-05T20:30:20Z",
  "comments":2,
  "created_at":"2022-12-01T21:04:20Z",
  "draft":false,
  "id":1471955173,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EGBSi",
  "number":1934,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-05T20:30:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: preserve strings in `ak.ravel`",
  "updated_at":"2023-02-15T19:09:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Each kernel invocation also calls `self._handle_error` to check for failures. We should move this logic into the `Kernel` responsibility to improve readability. \r\n\r\nSometimes error handling needs the current array for slicing. Perhaps we can use a context manager to set this, or perhaps this level of granularity in the error messages can be dropped.",
  "closed_at":"2023-07-02T17:10:59Z",
  "comments":1,
  "created_at":"2022-12-01T21:20:37Z",
  "id":1471972396,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5XvIQs",
  "number":1935,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Move kernel error handling to `Kernel`",
  "updated_at":"2023-07-02T17:10:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\n#### Replacement with scalar\r\nReplacing with an array with a scalar throws an `AttributeError`\r\n\r\n```python\r\narray = ak.Array({\r\n    \"x\": [1, 2, 3]\r\n})\r\narray['x'] = 4\r\n```\r\n\r\nIt seems that this also fails in `1.10.0`.\r\n\r\nThis should be an easy fix, and I think it should be next release as it is fairly fundamental.\r\n\r\n#### Replacement with array\r\nReplacing with an array doesn't broadcast, but adding a new field with an array does.\r\n\r\n```python\r\narray = ak.Array({\r\n    \"x\": [1, 2, 3]\r\n})\r\narray['x'] = [1]\r\narray[\"x\"]\r\n```\r\n\r\nI'm currently working on docs, so I'm filing the issues I find here in the mean time.",
  "closed_at":"2022-12-09T09:47:18Z",
  "comments":3,
  "created_at":"2022-12-02T14:20:04Z",
  "id":1472940818,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Xy0sS",
  "number":1936,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`array['x'] = 1` raises an `AttributeError`",
  "updated_at":"2022-12-09T09:47:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\n```python\r\n>>> import awkward as ak\r\n>>> typetracer = ak.Array([[1, 2, 3], [], [4, 5]]).layout.typetracer\r\n>>> typetracer.offsets.data.shape = (ak._typetracer.UnknownLength,)\r\n>>> ak.Array(typetracer).type\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward/src/awkward/highlevel.py\", line 463, in type\r\n    self._layout.form.type_from_behavior(self._behavior), len(self._layout)\r\nTypeError: 'UnknownLengthType' object cannot be interpreted as an integer\r\n```\r\n\r\nThis should be easy: replacing `len(self._layout)` with `self._layout.length` and using the string `\"??\"` in case of `ak._typetracer.UnknownLength`.\r\n\r\nCc: @douglasdavis",
  "closed_at":"2022-12-22T18:42:32Z",
  "comments":0,
  "created_at":"2022-12-02T16:18:22Z",
  "id":1473117375,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Xzfy_",
  "number":1937,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Typetracers with unknown length can't print their type",
  "updated_at":"2022-12-22T18:42:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR adds a basic `_ipython_display_` hook to the highlevel `Array` and `Record` types. This hook simply prints the type and contents of the array.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-feat-add-rich-display/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-02T23:57:19Z",
  "comments":6,
  "created_at":"2022-12-02T20:39:03Z",
  "draft":false,
  "id":1473418603,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EK-t-",
  "number":1938,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-02T23:57:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: add rich IPython display hook to array/record",
  "updated_at":"2023-02-15T19:09:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Which would make it impossible for a \"non-canonical\" layout to exist.\r\n\r\nFixes #1927 #1910\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-long-range-metadata-checks-in-layout-constructors/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-03T22:10:58Z",
  "comments":8,
  "created_at":"2022-12-02T20:52:14Z",
  "draft":false,
  "id":1473432770,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5ELBsU",
  "number":1939,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-03T22:10:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: move long-range metadata checks to constructors",
  "updated_at":"2022-12-03T22:10:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The safe default for `ak._backends.backend_of` is to fail if the inputs don't have a well defined backend e.g. for `lists`. However, for user-facing operations, this is not correct; we want to assume NumPy for these types. A `grep` shows that only a few `operations` need this fix.\r\n\r\nI haven't added any tests because we should really do this as part of a coverage pass for all of our operations.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-backend-default/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-02T22:52:18Z",
  "comments":8,
  "created_at":"2022-12-02T21:02:42Z",
  "draft":false,
  "id":1473441772,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5ELDkR",
  "number":1940,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-02T22:52:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: backends should have defaults for user-facing operations",
  "updated_at":"2023-02-15T19:09:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR cleans up docstrings that were wonky, or missing fields. I didn't check them hugely for meaning; this was just a quick pass over the arguments lists.\r\n\r\nI need to ping Martin to check some of the parquet/arrow parts.\r\n\r\nPartially addresses #1916\r\nFixes #1893\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-cleanup-docstrings/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-05T10:12:38Z",
  "comments":2,
  "created_at":"2022-12-02T22:50:10Z",
  "draft":true,
  "id":1473548164,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5ELaUl",
  "number":1941,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: cleanup docstrings",
  "updated_at":"2023-03-16T13:32:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This follows up #1922 to remove any reference of `nplike` in the high level API, and renames `nplikes` to `_nplikes`\r\n\r\nI also fixed the CUDA test generation, which I failed to fix in #1922\r\n\r\nNote-to-self, write a git hook to run those.\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-feat-to-buffers-backend/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-02T23:48:30Z",
  "comments":1,
  "created_at":"2022-12-02T23:04:04Z",
  "draft":false,
  "id":1473557472,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5ELcWL",
  "number":1942,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-02T23:48:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: replace nplike with backend in `to_buffers`",
  "updated_at":"2023-02-15T19:09:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1358 by using `maybe_to_NumpyArray`. `RegularArray`s that succeed with `maybe_to_NumpyArray()` follow _NumPy_ indexing. Previously, they followed Awkward Indexing.\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-regular-indexing/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-03T22:28:47Z",
  "comments":4,
  "created_at":"2022-12-03T14:52:55Z",
  "draft":false,
  "id":1474087414,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5ENSsu",
  "number":1943,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-03T22:28:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: consolidate regular indexing",
  "updated_at":"2023-02-15T19:09:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nThis raises\r\n```pytb\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\nCell In [10], line 1\r\n----> 1 ak.to_numpy(x)\r\n\r\nFile ~/Git/awkward/src/awkward/operations/ak_to_numpy.py:39, in to_numpy(array, allow_missing)\r\n      9 \"\"\"\r\n     10 Converts `array` (many types supported, including all Awkward Arrays and\r\n     11 Records) into a NumPy array, if possible.\r\n   (...)\r\n     33 See also #ak.from_numpy and #ak.to_cupy.\r\n     34 \"\"\"\r\n     35 with ak._errors.OperationErrorContext(\r\n     36     \"ak.to_numpy\",\r\n     37     dict(array=array, allow_missing=allow_missing),\r\n     38 ):\r\n---> 39     return ak._util.to_arraylib(numpy, array, allow_missing)\r\n\r\nFile ~/Git/awkward/src/awkward/_util.py:806, in to_arraylib(module, array, allow_missing)\r\n    803 layout = ak.operations.to_layout(array, allow_record=True, allow_other=True)\r\n    805 if isinstance(layout, (ak.contents.Content, ak.record.Record)):\r\n--> 806     return layout.to_numpy(allow_missing=allow_missing)\r\n    807 else:\r\n    808     return module.asarray(array)\r\n\r\nFile ~/Git/awkward/src/awkward/contents/content.py:1561, in Content.to_numpy(self, allow_missing)\r\n   1560 def to_numpy(self, allow_missing: bool):\r\n-> 1561     return self._to_numpy(allow_missing)\r\n\r\nFile ~/Git/awkward/src/awkward/contents/recordarray.py:922, in RecordArray._to_numpy(self, allow_missing)\r\n    917 if any(len(x.shape) != 1 for x in contents):\r\n    918     raise ak._errors.wrap_error(\r\n    919         ValueError(f\"cannot convert {self} into np.ndarray\")\r\n    920     )\r\n    921 out = self._backend.nplike.empty(\r\n--> 922     contents[0].shape[0],\r\n    923     dtype=[(str(n), x.dtype) for n, x in zip(self.fields, contents)],\r\n    924 )\r\n    925 mask = None\r\n    926 for n, x in zip(self.fields, contents):\r\n\r\nIndexError: list index out of range\r\n```\r\n\r\nClearly we're assuming that a `RecordArray` always has contents. This should be a simple fix.",
  "closed_at":"2022-12-15T14:13:39Z",
  "comments":0,
  "created_at":"2022-12-03T16:15:36Z",
  "id":1474143242,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5X3aQK",
  "number":1944,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.to_numpy()` fails cryptically for `ak.Array([{}])`",
  "updated_at":"2022-12-15T14:13:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n`RegularType` has a case for regular strings / bytestrings. We never see this in the rendered type information, because we pass in the typestr to the `RegularType` object (I assume, anyway, I haven't checked).\r\n\r\nAdditionally, we have logic to quote Datashape identifiers. These don't look complete between `OptionType` and `RecordType`. This might be deliberate, but we should check and explain this logic with a comment or two.",
  "closed_at":"2023-05-15T22:17:06Z",
  "comments":0,
  "created_at":"2022-12-03T21:56:05Z",
  "id":1474249568,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5X30Ng",
  "number":1945,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Check typestring handling",
  "updated_at":"2023-05-15T22:17:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR \r\n- cleans up docstrings that were wonky, or missing fields. I didn't check them hugely for meaning; this was just a quick pass over the arguments lists.\r\n- addresses quirks in user-guide \r\n\r\nI need to ping Martin to check some of the parquet/arrow parts.\r\n\r\nPartially addresses #1916\r\nFixes #1893\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-touch-ups/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-05T20:33:11Z",
  "comments":2,
  "created_at":"2022-12-04T12:45:51Z",
  "draft":false,
  "id":1474786158,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EPuF3",
  "number":1946,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-05T20:33:10Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: cleanup documentation",
  "updated_at":"2023-02-15T19:09:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1631 \r\n\r\nChanges:\r\n- `ak.behavior[\"__broadcast__\", ...]` promotes any `Content` arguments to `ak.Array`\r\n- `ak.transform` promotes the `Content`, `Record` first-parameter value(s) to `ak.Array`\r\n- `ufunc` custom cast promotes and `Content` arguments\r\n\r\nNot Changed:\r\n- `ufunc` application machinery; this already promotes arguments to `Content`.\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-feat-ak-transform-array/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-05T22:28:29Z",
  "comments":2,
  "created_at":"2022-12-05T14:27:53Z",
  "draft":false,
  "id":1476698101,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EWbcR",
  "number":1947,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: ensure user overloads are high-level interfaces",
  "updated_at":"2023-03-16T13:32:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/gh-action-pypi-publish](https://github.com/pypa/gh-action-pypi-publish) from 1.5.1 to 1.6.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/gh-action-pypi-publish/releases\">pypa/gh-action-pypi-publish's releases</a>.</em></p>\n<blockquote>\n<h2>v1.6.1</h2>\n<h2>What's happened?!</h2>\n<p>There was a sneaky bug in v1.6.0 which caused Twine to be outside the import path in the Python runtime. It is fixed in v1.6.1 by updating <code>$PYTHONPATH</code> to point to a correct location of the user-global <code>site-packages/</code> directory.</p>\n<p><strong>Full Diff</strong>: <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.6.0...v1.6.1\">https://github.com/pypa/gh-action-pypi-publish/compare/v1.6.0...v1.6.1</a></p>\n<h2>v1.6.0</h2>\n<h2>Anything's changed?</h2>\n<p>The only update is that the Python runtime has been upgraded from 3.9 to 3.11. There are no functional changes in this release.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.2...v1.6.0\">https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.2...v1.6.0</a></p>\n<h2>v1.5.2</h2>\n<h2>What's Improved</h2>\n<ul>\n<li>Implemented the Twine transitive dependency tree pinning using pip-tools-generated constraint files. See <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/issues/107\">pypa/gh-action-pypi-publish#107</a> and <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/issues/101\">pypa/gh-action-pypi-publish#101</a> for details.</li>\n</ul>\n<p><strong>Full Diff</strong>: <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.1...v1.5.2\">https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.1...v1.5.2</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/5d1679fa6b895587c6eb10c3fe82205b440a580e\"><code>5d1679f</code></a> Use py3.11 user-global site-packages in PYTHONPATH</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/d2a2496a01f8b4b773ccd9cae8f2151589de5b62\"><code>d2a2496</code></a> Switch the runtime from Python 3.9 to Python 3.11</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/d7edd4c95736a5bc1260d38b5523f5d24338bc25\"><code>d7edd4c</code></a> Add user-global site-packages to <code>$PYTHONPATH</code></li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/8d5f27cca4a50790668fae0c4211d3f380213dad\"><code>8d5f27c</code></a> Install Twine in the user-global site-packages</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/b0dc178d8e9955153bdd91f7aeaca24951330289\"><code>b0dc178</code></a> Disable pip cache dir with an env var</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/bbf6e0b2f09b6ddd8a439374509c868678be1630\"><code>bbf6e0b</code></a> Copy requirements to corresponding dir @ container</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/0b69a8c2dfa166206a4007a228ec3306ac63d1d0\"><code>0b69a8c</code></a> Document broken <code>pkginfo==1.9.0</code> transitive dep</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/c54db9c2b7aa2a20b80134f0f154359c73bbdf0b\"><code>c54db9c</code></a> Integrate pip-tools-generated constraint files</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/480ec4ed586e715b06c3d3a5fcdfa4834246d7e2\"><code>480ec4e</code></a> Inherit <code>yamllint</code> config from the default preset</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/5fb2f047e26679d7846a8370de1642ff160b9025\"><code>5fb2f04</code></a> Drop <code>__token__</code> from README code usage snippets</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.5.1...v1.6.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/gh-action-pypi-publish&package-manager=github_actions&previous-version=1.5.1&new-version=1.6.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/dependabot-github_actions-pypa-gh-action-pypi-publish-1.6.1/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-06T20:08:23Z",
  "comments":2,
  "created_at":"2022-12-05T17:09:53Z",
  "draft":false,
  "id":1477016197,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EXiaq",
  "number":1948,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-06T20:08:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: build(deps): bump pypa/gh-action-pypi-publish from 1.5.1 to 1.6.1",
  "updated_at":"2022-12-06T20:08:24Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-indexedarray-project-parameters/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-05T20:17:04Z",
  "comments":1,
  "created_at":"2022-12-05T18:01:32Z",
  "draft":false,
  "id":1477109565,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EX3SH",
  "number":1949,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-05T20:17:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: IndexedArray.project() preserves parameters.",
  "updated_at":"2023-02-15T19:09:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-unionarray-simplified-preserve-parameters/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-05T22:06:58Z",
  "comments":0,
  "created_at":"2022-12-05T18:29:57Z",
  "draft":false,
  "id":1477160982,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EYCxA",
  "number":1950,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-05T22:06:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: UnionArray.simplified preserves parameters.",
  "updated_at":"2023-02-15T19:09:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Closes #1631 \r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-ufunc-as-layout/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-05T23:47:26Z",
  "comments":7,
  "created_at":"2022-12-05T20:06:40Z",
  "draft":false,
  "id":1477338444,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EYq-D",
  "number":1951,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-05T23:47:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: clarify input types for user overloads",
  "updated_at":"2022-12-05T23:47:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-additional-touch-ups/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-05T23:52:48Z",
  "comments":1,
  "created_at":"2022-12-05T21:12:24Z",
  "draft":false,
  "id":1477448708,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EZD4w",
  "number":1952,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-05T23:52:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: fix shorthand",
  "updated_at":"2023-02-15T19:09:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/asottile/pyupgrade: v3.2.2 \u2192 v3.3.0](https://github.com/asottile/pyupgrade/compare/v3.2.2...v3.3.0)\n<!--pre-commit.ci end-->\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/pre-commit-ci-update-config/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-05T23:38:05Z",
  "comments":1,
  "created_at":"2022-12-05T22:21:08Z",
  "draft":false,
  "id":1477574933,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EZggG",
  "number":1953,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-05T23:38:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-12-05T23:38:05Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This finishes the work started in #1946, commit dc0f91e1978ee3f364ed4b3c9abb5181798be99b.\r\n\r\nAll of the sample code in docstrings is being tested and modernized: `print` statements are being removed in favor of `show` and the output is being replaced with v2 output.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-modernize-highlevel-docstrings/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-06T00:14:44Z",
  "comments":4,
  "created_at":"2022-12-05T23:12:42Z",
  "draft":false,
  "id":1477655540,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EZywS",
  "number":1954,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-06T00:14:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: retested and modernized all the docstrings in highlevel.py.",
  "updated_at":"2023-02-15T19:09:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"It was a vestige of Python 2: as you can see, we can express the keyword-only arguments after a `*arrays` without any trouble in Python 3. This is relevant because the documentation will be generated with more information now\u2014these extra arguments and their defaults will appear in the HTML rendering of the function signatures.\r\n\r\nAlso, `ak.broadcast_arrays` was missing information about its `broadcast_parameters_rule` argument. Presumably, that was an oversight? (And it demonstrates the problem with `ak._util.extra`.)\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-remove-extra-argument-helper/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-06T00:27:20Z",
  "comments":1,
  "created_at":"2022-12-06T00:10:34Z",
  "draft":false,
  "id":1477778589,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EaOwA",
  "number":1955,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-06T00:27:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: removed the 'ak._util.extra' argument helper.",
  "updated_at":"2023-02-15T19:09:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This adds a guard, but it also introduces a way of calling `ak.from_rdataframe` (which was already partially in the documentation anyway).\r\n\r\nIt's to be expected that users will sometimes pass a single string into `columns`. When this happens, we could\r\n\r\n  * raise an error to let them know that's wrong (it's already doing that, but the error message could be more clear)\r\n  * turn a single string `x` into `(x,)`, squashing the distinction between a string and a length-1 tuple of strings\r\n  * use the single string interface to mean \"I want an Awkward Array _of_ a column\" (what this function did before #1625) and the collection of strings (even if there's only one of them) to mean \"I want an Awkward Array of multiple columns.\" The latter will always be a record array, and if the collection has only one string in it, the record array will have only one field in it.\r\n\r\nIn this PR, I opted for the third case. It seems to me to be the most useful one.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-from_rdataframe-should-accept-a-single-string/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-06T09:39:39Z",
  "comments":2,
  "created_at":"2022-12-06T00:41:26Z",
  "draft":false,
  "id":1477824529,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EaZQ5",
  "number":1956,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-06T09:39:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: ak.from_rdataframe should accept a single string 'columns'.",
  "updated_at":"2023-02-15T19:09:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Oops: #1939 constrains `__array__ = 'sorted_map'` to be only allowed on list-types, when it is only allowed on record-types. There's no _implementation_ of sorted map behaviors yet, but Uproot produces them in anticipation.\r\n\r\nThis PR is necessary to fix Uproot. See the failure here ([raw logs](https://pipelines.actions.githubusercontent.com/serviceHosts/df871aa8-af7e-44b5-87e2-03f492c1b14d/_apis/pipelines/1/runs/2671/signedlogcontent/11?urlExpires=2022-12-06T01%3A56%3A49.9732796Z&urlSigningMethod=HMACV1&urlSignature=Bijv1gtbUt%2BekoBhGrpiN4ICPg6lHNNyEo7AmkAMHwU%3D)):\r\n\r\nhttps://github.com/scikit-hep/uproot5/actions/runs/3625653080/jobs/6113923488\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-__array__-sorted_map-only-allowed-on-recordarray-not-lists/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-06T09:35:34Z",
  "comments":2,
  "created_at":"2022-12-06T01:54:23Z",
  "draft":false,
  "id":1477944359,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Ea016",
  "number":1959,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-06T09:35:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: __array__ = 'sorted_map' should only be allowed on RecordArrays, not lists.",
  "updated_at":"2023-02-15T19:09:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/ianna-1932-type_to_form-returns-non-json-string-in-case-of-error/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-06T16:34:57Z",
  "comments":2,
  "created_at":"2022-12-06T10:52:02Z",
  "draft":false,
  "id":1478806475,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Ed0sC",
  "number":1960,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-06T16:34:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: unknown type column",
  "updated_at":"2022-12-07T12:41:28Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\r\n\r\nIt is not possible to remove a field from an `RecordArray` without rebuilding the layout manually e.g. with `ak.zip`. \r\n\r\nI think a natural extension of `with_field` and `__setitem__` would be `without_field` and `__delitem__`. Unlike `with_parameter`, where `None` has special meaning, `None` values are supported as array values, so we need a distinct function",
  "closed_at":"2022-12-13T21:56:21Z",
  "comments":2,
  "created_at":"2022-12-06T11:48:16Z",
  "id":1478908637,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5YJlrd",
  "number":1961,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.without_field`",
  "updated_at":"2022-12-13T21:56:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR fixes #1936 by removing the branch in which no broadcasting takes place.\r\n\r\nIt also narrows the acceptable type of `where` from an `iterable` (of strings) to a `sequence`, \r\n\r\n### Note\r\nThis is a small change, but I want to justify it in the wider context of Awkward.\r\n\r\nWe currently do iterable\u2192sequence conversion internally, and I don't think there's any benefit to accepting an iterable. My view is that unless you can naturally express an algorithm without consuming the iterable, then it's better just to accept sequences. \r\n\r\nIf we wanted to retain the iterable type without converting the iterable to a sequence, then we'd need to do something like\r\n```python\r\nif ak._util.is_sized_iterable(where):\r\n    tail = iter(where)\r\n    head = next(tail)\r\n    if not isinstance(head, str):\r\n        raise ...    \r\n```\r\nThere's no performance benefit for the user, or readability benefit for us.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-fix-item-assignment/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-09T09:47:17Z",
  "comments":2,
  "created_at":"2022-12-06T12:34:47Z",
  "draft":false,
  "id":1478996195,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Eee2i",
  "number":1962,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-09T09:47:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix!: always broadcast `with_field` assignments against existing array",
  "updated_at":"2022-12-09T09:53:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This fixes #1961 by implementing `ak.without_field`.\r\n\r\nThis is not urgent to merge; it's simple and not a next-release item, but I added it whilst I was thinking about it.\r\n",
  "closed_at":"2022-12-13T21:56:20Z",
  "comments":1,
  "created_at":"2022-12-06T14:45:08Z",
  "draft":false,
  "id":1479271358,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Efc7H",
  "number":1963,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-13T21:56:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: add `ak.without_field`",
  "updated_at":"2022-12-13T21:56:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"MyST-NB uses the notebook metadata to determine the language lexer, falling back upon the kernelspec if the required fields are not set. I believe that this leads to MyST-nb failing to highlight our code cells, which have a `{code-cell} ipython3` tag despite the notebook using a `python3` lexer. #1946 tried to solve this by setting the `python3` language for each code cell, but jupytext does not round trip this.\r\n\r\nThis PR sets and preserves the `pygments_lexer` explicitly. \r\n\r\nI ran the following Xonsh code to produce this PR:\r\n```xonsh\r\nmetadata=\"\"\"---\r\njupytext:\r\n  notebook_metadata_filter: language_info.pygments_lexer\r\n  text_representation:\r\n    extension: .md\r\n    format_name: myst\r\n    format_version: 0.13\r\n    jupytext_version: 1.14.0\r\nkernelspec:\r\n  display_name: Python 3 (ipykernel)\r\n  language: python\r\n  name: python3\r\nlanguage_info:\r\n  name: python\r\n  pygments_lexer: ipython3\r\n---\"\"\"\r\n\r\ncd docs/user-guide\r\n\r\nfor f in pg`how*.md`:\r\n    content=f.read_text()\r\n    i = content.find(\"---\")\r\n    j = content.find(\"---\",i+3)\r\n    f.write_text(metadata+content[j+3:])\r\n\r\nsd r\"cell\\} python3\" r\"cell} ipython3\" *.md\r\n```\r\n\r\nPlus some additional manual corrections for the C++ LayoutBuilder notebook.\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-fix-langauge/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-06T18:04:20Z",
  "comments":3,
  "created_at":"2022-12-06T15:17:12Z",
  "draft":true,
  "id":1479356288,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EfwSW",
  "number":1964,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: fix syntax highlighting",
  "updated_at":"2022-12-06T18:07:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.11.2 to 2.11.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.11.3</h2>\n<ul>\n<li>\u2728 Improves the 'build options' log output that's printed at the start of each run (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1352\">#1352</a>)</li>\n<li>\u2728 Added a friendly error message to a common misconfiguration of the <code>CIBW_TEST_COMMAND</code> option - not specifying path using the <code>{project}</code> placeholder (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1336\">#1336</a>)</li>\n<li>\ud83d\udee0 The GitHub Action now uses Powershell on Windows to avoid occasional incompabilities with bash (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1346\">#1346</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.11.3</h3>\n<p><em>5 Dec 2022</em></p>\n<ul>\n<li>\u2728 Improves the 'build options' log output that's printed at the start of each run (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1352\">#1352</a>)</li>\n<li>\u2728 Added a friendly error message to a common misconfiguration of the <code>CIBW_TEST_COMMAND</code> option - not specifying path using the <code>{project}</code> placeholder (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1336\">#1336</a>)</li>\n<li>\ud83d\udee0 The GitHub Action now uses Powershell on Windows to avoid occasional incompabilities with bash (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1346\">#1346</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a34a6b0f72a20272544a22a4d348d0e6cf4f6c88\"><code>a34a6b0</code></a> Bump version: v2.11.3</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/61b6cc8574579b873fc86c30c50143a98256033c\"><code>61b6cc8</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1352\">#1352</a> from pypa/improve-preamble</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/ecce3d9bf8db0c529ca2d9bd742a70d1d10b69f7\"><code>ecce3d9</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1336\">#1336</a> from pypa/test-cwd-error-message</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/63ef1b00b778b94dd6719d4370c27e2f604f81c2\"><code>63ef1b0</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1366\">#1366</a> from pypa/pre-commit-ci-update-config</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/ba9a82eae001cea317c84b1c5184ad2529776aac\"><code>ba9a82e</code></a> [pre-commit.ci] pre-commit autoupdate</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/46372e1ff1388cd0a3af4f7eff527955bb99e555\"><code>46372e1</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1364\">#1364</a> from pypa/dependabot/github_actions/pypa/gh-action-p...</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a157a51225a47c177db87bbc31a3342096fe3442\"><code>a157a51</code></a> Use a unittest style test to support more test runners</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/98508648510a139a196f304dc984ff04a4a96833\"><code>9850864</code></a> Rename 'environ' to 'env'</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/56359fba7058e0d13118c8500130f635cdbd237f\"><code>56359fb</code></a> Apply suggestions from code review</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/99f62f53f9d6156e4fc4f78cb7fd4c0da7e48742\"><code>99f62f5</code></a> build(deps): bump pypa/gh-action-pypi-publish from 1.5.1 to 1.6.1</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.11.2...v2.11.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.11.2&new-version=2.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/dependabot-github_actions-pypa-cibuildwheel-2.11.3/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-06T20:14:32Z",
  "comments":2,
  "created_at":"2022-12-06T17:04:53Z",
  "draft":false,
  "id":1479641695,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Egxmm",
  "number":1965,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-06T20:14:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: build(deps): bump pypa/cibuildwheel from 2.11.2 to 2.11.3",
  "updated_at":"2022-12-06T20:14:33Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR fixes the root cause that motivated #1964. In fact, the problem was exclusively on RTD, but when I checked my original fix, I checked the CI build result (which has not shown this highlighting problem). \r\n\r\nThis PR adds IPython as a Sphinx extension, and reverts the changes to the `code-cell` language.\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-fix-syntax-highlighting/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-06T19:53:33Z",
  "comments":2,
  "created_at":"2022-12-06T18:11:51Z",
  "draft":false,
  "id":1479804877,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EhXDR",
  "number":1966,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-06T19:53:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: add IPython as Sphinx extension",
  "updated_at":"2022-12-06T20:12:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The first commit touches a lot of files because it propagates `Content.simplified` through `recursively_apply`, which was only partially done by #1939.\r\n\r\nIt also _changes_ the `ak.transform` API to take a `return_value = \"none\" | \"original\" | \"simplified\"` argument instead of `return_array = False | True`. The `ak.transform` function hasn't gotten out into the wild (much) yet, so this is a chance to make that parameter an n-way enum, rather than grow into a bunch of booleans that are only sometimes meaningful (like `return_simplified` and `return_array`; the first means nothing if the second is False).\r\n\r\nThis should have been done earlier, but `Content._recursively_apply` is now a hidden implementation detail. The `ak.transform` API is the public one that we'll support. Having two ways of doing the same thing is opening the door to inconsistency.\r\n\r\nAll of that was a stepping-stone to revamping `ak.firsts`. I didn't change its behavior within testing scope, but implementing it in terms of `Content._recursively_apply` is more robust. Branching layouts should now work automatically; they were `NotImplementedError` before.\r\n\r\nAfter revamping `ak.singletons`, I'll mark this ready for review.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-revamp-ak.firsts-and-ak.singletons/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-07T23:00:17Z",
  "comments":3,
  "created_at":"2022-12-06T22:47:03Z",
  "draft":false,
  "id":1480382172,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EjbK8",
  "number":1968,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-07T23:00:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: add return_value='simplified' to ak.transform and revamp ak.firsts/ak.singletons",
  "updated_at":"2023-02-15T19:09:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/gh-action-pypi-publish](https://github.com/pypa/gh-action-pypi-publish) from 1.6.1 to 1.6.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/gh-action-pypi-publish/releases\">pypa/gh-action-pypi-publish's releases</a>.</em></p>\n<blockquote>\n<h2>v1.6.4</h2>\n<h2>oh, boi! again?</h2>\n<p>This is the last one tonight, promise! It fixes this embarrassing bug that was actually caught by the CI but got overlooked due to the lack of sleep.\nTL;DR GH passed <code>$HOME</code> from the external env into the container and that tricked the Python's <code>site</code> module to think that the home directory is elsewhere, adding non-existent paths to the env vars. See <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/issues/115\">#115</a>.</p>\n<p><strong>Full Diff</strong>: <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.6.3...v1.6.4\">https://github.com/pypa/gh-action-pypi-publish/compare/v1.6.3...v1.6.4</a></p>\n<h2>v1.6.3</h2>\n<h1>Another Release!? Why?</h1>\n<p>In <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/issues/112#issuecomment-1340133013\">pypa/gh-action-pypi-publish#112</a>, it was discovered that passing a <code>$PATH</code> variable even breaks the shebang. So this version adds more safeguards to make sure it keeps working with a fully broken <code>$PATH</code>.</p>\n<p><strong>Full Diff</strong>: <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.6.2...v1.6.3\">https://github.com/pypa/gh-action-pypi-publish/compare/v1.6.2...v1.6.3</a></p>\n<h2>v1.6.2</h2>\n<h2>What's Fixed</h2>\n<ul>\n<li>Made the <code>$PATH</code> and <code>$PYTHONPATH</code> environment variables resilient to broken values passed from the host runner environment, which previously allowed the users to accidentally break the container's internal runtime as reported in <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/issues/112\">pypa/gh-action-pypi-publish#112</a></li>\n</ul>\n<h2>Internal Maintenance Improvements</h2>\n<ul>\n<li>Added a devpi-based smoke-test GitHub Actions CI/CD workflow by <a href=\"https://github.com/sesdaile-varmour\"><code>@\u200bsesdaile-varmour</code></a> in <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/pull/111\">pypa/gh-action-pypi-publish#111</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/sesdaile-varmour\"><code>@\u200bsesdaile-varmour</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/pypa/gh-action-pypi-publish/pull/111\">pypa/gh-action-pypi-publish#111</a></li>\n</ul>\n<p><strong>Full Diff</strong>: <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.6.1...v1.6.2\">https://github.com/pypa/gh-action-pypi-publish/compare/v1.6.1...v1.6.2</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/c7f29f7adef1a245bd91520e94867e5c6eedddcc\"><code>c7f29f7</code></a> \ud83d\udc1b Override <code>$HOME</code> in the container with <code>/root</code></li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/644926c9722664f88c9f456a1c367031ffb065f8\"><code>644926c</code></a> \ud83e\uddea Always run smoke testing in debug mode</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/e71a4a4c1d3837e77d0353f9229be9217526a2c4\"><code>e71a4a4</code></a> Add support for verbose bash execusion w/ <code>$DEBUG</code></li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/e56e8212f48a2dd7d76d426d4bcab2f5ce15277d\"><code>e56e821</code></a> \ud83d\udc1b Make <code>id</code> always available in <code>twine-upload</code></li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/c879b84594122637ac80295111bfd478444c7983\"><code>c879b84</code></a> \ud83d\udc1b Use full path to <code>bash</code> in shebang</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/57e7d53102237d3c8f3e745ed8be27cc0e543819\"><code>57e7d53</code></a> \ud83d\udc1bEnsure the default <code>$PATH</code> value is pre-loaded</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/ce291dce5b39b74daf2a1a0dcb652314e3263edb\"><code>ce291dc</code></a> \ud83c\udfa8\ud83d\udc1bFix the branch @ pre-commit.ci badge links</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/102d8ab13f40a06246caac2b1008617a8d4673cc\"><code>102d8ab</code></a> \ud83d\udc1b Rehardcode devpi port for GHA srv container</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/3a9eaef3ef4ec31b99bda836b8b667475e6ee532\"><code>3a9eaef</code></a> \ud83d\udc1bUse different ports in/out of GHA containers</li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish/commit/a01fa7442e281f2856175aee1545561a54c01d6c\"><code>a01fa74</code></a> \ud83d\udc1b Use <code>localhost</code> @ GHA outside the containers</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/gh-action-pypi-publish/compare/v1.6.1...v1.6.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/gh-action-pypi-publish&package-manager=github_actions&previous-version=1.6.1&new-version=1.6.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/dependabot-github_actions-pypa-gh-action-pypi-publish-1.6.4/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-08T03:42:32Z",
  "comments":1,
  "created_at":"2022-12-07T17:05:26Z",
  "draft":false,
  "id":1482397160,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Eqjjx",
  "number":1970,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-08T03:42:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: build(deps): bump pypa/gh-action-pypi-publish from 1.6.1 to 1.6.4",
  "updated_at":"2022-12-08T03:42:33Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"`EmptyArray.is_numpy` is now `False` because it's surprising. (`EmptyArrays` are sometimes coerced to being `NumpyArrays` with `dtype=np.float64` to match the NumPy behavior, but in general, `EmptyArray` represents an unknown type, not a NumPy-like type.)\r\n\r\nThere's already `EmptyArray.is_unknown` to identify them, and everywhere that we actually cared about it, we were already checking for it:\r\n\r\n```\r\n% fgrep -r '.is_numpy' --include \\*.py src/awkward\r\nsrc/awkward/contents/listarray.py:            if not content.is_numpy or not content.parameter(\"__array__\") == \"char\":\r\nsrc/awkward/contents/listarray.py:            if not content.is_numpy or not content.parameter(\"__array__\") == \"byte\":\r\nsrc/awkward/contents/listoffsetarray.py:            if not content.is_numpy or not content.parameter(\"__array__\") == \"char\":\r\nsrc/awkward/contents/listoffsetarray.py:            if not content.is_numpy or not content.parameter(\"__array__\") == \"byte\":\r\nsrc/awkward/contents/regulararray.py:            if not content.is_numpy or not content.parameter(\"__array__\") == \"char\":\r\nsrc/awkward/contents/regulararray.py:            if not content.is_numpy or not content.parameter(\"__array__\") == \"byte\":\r\nsrc/awkward/operations/ak_unflatten.py:        elif counts.is_numpy or counts.is_unknown:\r\nsrc/awkward/operations/ak_is_none.py:        elif layout.is_numpy or layout.is_unknown or layout.is_list or layout.is_record:\r\nsrc/awkward/operations/ak_transform.py:        ...     if layout.is_numpy:\r\nsrc/awkward/operations/ak_transform.py:        ...     if layouts[0].is_numpy and layouts[1].is_numpy:\r\n```\r\n\r\nThe first section really wants only `NumpyArray` because it's checking for arrays of `char` or `byte`, which `EmptyArray` is not. The last two, in `ak_transform.py`, are examples in docstrings. Everything else already checks for `is_numpy or is_unknown`.\r\n\r\nDemonstrably, it does not affect any tests.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-emptyarray.is_numpy-should-be-false/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-07T22:59:19Z",
  "comments":1,
  "created_at":"2022-12-07T19:03:36Z",
  "draft":false,
  "id":1482635134,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5ErZdN",
  "number":1971,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-07T22:59:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: EmptyArray.is_numpy should be False.",
  "updated_at":"2023-02-15T19:09:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is a proposed solution to #1969. While we have to hide `recursively_apply` somehow before the 2.0.0 release, there's nothing final about doing it _this_ way. Since this is a hidden submodule, we can rename it or even change back to methods with a naming convention.\r\n\r\nThis is for any function `X` that needs to be accessible throughout the Awkward codebase but hidden from outside the codebase, the first of which is `recursively_apply`. Here's an example program flow:\r\n\r\n  1. Some function in `ak.operations` calls `ak._do.recursively_apply(layout, *args)`. They can do this because hidden submodules (like `_broadcasting`, `_slicing`, `_connect`, ...) can be called from anywhere in the Awkward codebase, but not by outsiders.\r\n  2. We declare that functions in `ak._do` are allowed to call `Content` and `Record` private methods. (Maybe it should have been called `ak._sudo`.) `ak._do.recursively_apply` decides whether `layout` is a `Content` or a `Record` and calls its `_recursively_apply` private method.\r\n  3. `Content._recursively_apply` calls `Content._recursively_apply` because we have another rule that says that `Subclass1._methodA` is allowed to call `Subclass2._methodB` if `Subclass1 == Subclass2 or _methodA == _methodB`.\r\n\r\nI'm making up rules left and right, but rules are supposed to help us organize things, not constrain us, and these rules only apply within the Awkward codebase. For communication with the outside world, we have to limit ourselves to only the community-established conventions, such as \"leading underscore means don't call it from outside.\"\r\n\r\n(Also note that the program flow sketched above does not go out of `Content` back into `Content`, which would be a little confusing. It goes from `ak.*` to `ak._do` to `Content`.)\r\n\r\nI'll add other entry points to this PR as separate commits.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-hide-recursion-entry-points/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-08T18:30:15Z",
  "comments":6,
  "created_at":"2022-12-07T19:49:59Z",
  "draft":false,
  "id":1482713315,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5ErrHp",
  "number":1972,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-08T18:30:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: hide Content recursion entry points in `ak._do` submodule.",
  "updated_at":"2023-02-15T19:09:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n2.0.0rc6\n\n### Description and code to reproduce\n\nIf passing a directory with more than one file to `ak.from_parquet` the following exception is raised:\r\n\r\n(the `outputs` directory in this example contains 50 files)\r\n\r\n```python\r\nIn [4]: ak.from_parquet(\"outputs\")\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nCell In [4], line 1\r\n----> 1 ak.from_parquet(\"outputs\")\r\n\r\nFile ~/.pyenv/versions/3.10.8/envs/dev/lib/python3.10/site-packages/awkward/operations/ak_from_parquet.py:75, in from_parquet(path, columns, row_groups, storage_options, max_gap, max_block, footer_sample_size, generate_bitmasks, highlevel, behavior)\r\n     67 import awkward._connect.pyarrow  # noqa: F401\r\n     69 parquet_columns, subform, actual_paths, fs, subrg, row_counts, meta = metadata(\r\n     70     path,\r\n     71     storage_options,\r\n     72     row_groups,\r\n     73     columns,\r\n     74 )\r\n---> 75 return _load(\r\n     76     actual_paths,\r\n     77     parquet_columns if columns is not None else None,\r\n     78     subrg,\r\n     79     max_gap,\r\n     80     max_block,\r\n     81     footer_sample_size,\r\n     82     generate_bitmasks,\r\n     83     subform,\r\n     84     highlevel,\r\n     85     behavior,\r\n     86     fs,\r\n     87 )\r\n\r\nFile ~/.pyenv/versions/3.10.8/envs/dev/lib/python3.10/site-packages/awkward/operations/ak_from_parquet.py:246, in _load(actual_paths, parquet_columns, subrg, max_gap, max_block, footer_sample_size, generate_bitmasks, subform, highlevel, behavior, fs, metadata)\r\n    243     return ak.Array(arrays[0])\r\n    244 else:\r\n    245     # TODO: if each array is a record?\r\n--> 246     return ak.operations.ak_concatenate._impl(\r\n    247         arrays, 0, True, True, highlevel, behavior\r\n    248     )\r\n\r\nTypeError: _impl() takes 5 positional arguments but 6 were given\r\n```\r\n\r\n",
  "closed_at":"2022-12-08T16:28:26Z",
  "comments":2,
  "created_at":"2022-12-07T20:05:43Z",
  "id":1482740393,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5YYNKp",
  "number":1973,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.from_parquet for multiple files uses wrong number of arguments to concatenate",
  "updated_at":"2023-02-15T19:09:58Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"We already know that Awkward 2.x doesn't support Awkward 1.x pickles because\u2014despite some careful planning in the structure and format\u2014the Awkward 1.x pickles contain Awkward 1.x Form _objects_ rather than their equivalent JSON. :facepalm:\r\n\r\nSo this PR is removing the code that attempts to support Awkward 1.x pickle formats, constraining the forward-evolution of Awkward 2.x pickle in the process. For instance, we should _not_ be inserting fictitious partition numbers when we don't support partitions; we shouldn't check for length being a list of partition lengths, etc.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-dont-try-to-support-awkward1-pickles/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-07T23:00:50Z",
  "comments":1,
  "created_at":"2022-12-07T20:20:36Z",
  "draft":false,
  "id":1482759202,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Er1fW",
  "number":1974,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-07T23:00:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: don't try to support Awkward 1.x pickles.",
  "updated_at":"2023-02-15T19:09:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR demonstrates one potential solution to the discussion in #1969\r\n\r\nThere, @jpivarski outlines four levels of access scope for Awkward Array's API\r\n\r\nHere's a table outlining these, and demonstrating the naming convention in this PR\r\n\r\n| Level | Permitted Visibility | Syntax / Feature (in #1975) |\r\n|-------|----------------------|-------------------|\r\n| 1     | Users                | `ak.XXX`          |\r\n| 2     | 3rd Party Developers | `layout.XXX`      |\r\n| 3     | Any Awkward class    | `layout._pub_XXX` |\r\n| 4     | Same Awkward Class   | `layout._XXX`     |\r\n\r\nThere are other ways to introduce a level-2\u2190\u2192level-3 split, such as L-3 attributes being Python-public, i.e. `layout.private_XXX` instead of `layout._public_XXX`, where `private_` indicate to L2 and L1 users that they should not use these attributes.\r\n\r\n\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-wip-private-impl/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-08T20:38:31Z",
  "comments":2,
  "created_at":"2022-12-08T11:20:02Z",
  "draft":false,
  "id":1484409452,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5ExwCT",
  "number":1975,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"wip: L2 access scope implementation",
  "updated_at":"2023-01-20T12:25:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This renames `Content.Form` to `Content.form_cls`, which is better in line with the PEP8 naming conventions\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-refactor-rename-form/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-08T16:12:54Z",
  "comments":1,
  "created_at":"2022-12-08T13:49:01Z",
  "draft":false,
  "id":1484683628,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EyuM2",
  "number":1976,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-08T16:12:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: rename `Form` to `form_cls`",
  "updated_at":"2022-12-08T16:12:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR fixes #1973\r\n\r\nThe issue came from parameters miss-match. \r\n\r\nThe use-case from the issue was tested locally: \r\n\r\n```\r\n>>> import awkward as ak\r\n>>> import dask_awkward as dak\r\n>>> ds = dak.from_parquet(\"s3://ddavistemp/higgs_pq/*.parquet\", storage_options={\"anon\": True})\r\n>>> dak.to_parquet(ds, \"outputs\")\r\n>>> ak.from_parquet(\"outputs\")\r\n<Array [{run: 1, ...}, ..., {run: 1, ...}] type='299683 * {run: int64, lumi...'>\r\n```\r\n\r\ncc @jpivarski \r\n\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/ioanaif-fix-ak-from-parquet/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-08T16:28:25Z",
  "comments":1,
  "created_at":"2022-12-08T15:06:44Z",
  "draft":false,
  "id":1484837729,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5EzQy8",
  "number":1977,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-08T16:28:25Z"
  },
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"fix: ak_from_parquet",
  "updated_at":"2022-12-08T16:28:26Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"From @jpata on https://gitter.im/Scikit-HEP/awkward-array\r\n---------------------------------------------------------\r\n\r\nsorry to bother, I'm trying to figure out if/how it's possible to create an empty Record with a specific datatype, to be able to save in parquet.\r\n\r\nbasically, I have something like this, which works\r\n\r\n```python\r\nj1 = awkward.from_numpy(np.ones(1, np.int32))\r\nr = awkward.Record({\"d\": j1})\r\nawkward.to_parquet(r, \"test.parquet\")\r\n```\r\n\r\nbut sometimes, depending on the data, the array j1 is empty, in which case, the export to parquet fails\r\n\r\n```python\r\nj1 = awkward.from_numpy(np.empty(0, np.int32))\r\nr = awkward.Record({\"d\": j1})\r\nawkward.to_parquet(r, \"test.parquet\")\r\n#fails with \"NullType Arrow field must be nullable\"\r\n```\r\n\r\nwhat's the right way to fix this?\r\n\r\nmaybe this is a bit clearer\r\n\r\n```python\r\n#works\r\nj1 = awkward.from_iter([[1], [2]])\r\nawkward.to_parquet({\"d\": j1}, \"test.parquet\")\r\n```\r\n\r\n```python\r\n#how to do this, specifying the datatype as above?\r\nj1 = awkward.from_iter([[], []])\r\nawkward.to_parquet({\"d\": j1}, \"test.parquet\")\r\n```\r\n\r\nMy response\r\n-----------\r\n\r\n@jpata You've found some quirks in how ak.Records get constructed that should get fixed before the API gets frozen today or tomorrow (in the 2.0.0 release). So, good timing!\r\n\r\nWhat's weird about these records is their data type. You want it to be integer type with zero entries, but it's an unknown type. The reason for that is that the `ak.Record(dict(...))` constructor is _iterating_ over the data in the `dict` because it sees it as generic Python objects to be interpreted with `ak.from_iter`. With generic Python objects, if a list is empty, the type of the data in that list is `unknown`.\r\n\r\n```python\r\n>>> j1 = ak.from_numpy(np.empty(0, np.int32))\r\n>>> j1\r\n<Array [] type='0 * int32'>\r\n>>> ak.Record({\"d\": j1})\r\n<Record {d: []} type='{d: var * unknown}'>\r\n```\r\n\r\nBy contrast, the ak.Array constructor recognizes \"dict of arrays\" as a special case, in which the arrays are taken to be columns. We call this the \"Pandas-style constructor\" because it's what you'd expect when constructing a Pandas DataFrame. Arbitrary data in an ak.Array constructor (neither an array nor a dict of arrays, but some other Python objects, including lists) invokes `ak.from_iter`.\r\n\r\n```python\r\n>>> ak.Array({\"d\": j1})\r\n<Array [] type='0 * {d: int32}'>\r\n```\r\n\r\nSo you could get an ak.Record with a field that is a length-zero list of integers by\r\n\r\n```python\r\n>>> ak.Array({\"d\": j1[np.newaxis]})[0]\r\n<Record {d: []} type='{d: 0 * int32}'>\r\n```\r\n\r\nBut we should add a special case to the ak.Record constructor to match the special case in the ak.Array constructor so that you can do this with `ak.Record({\"d\": j1})`. The case for doing this for ak.Record is even stronger than the case for doing it with ak.Array, since the Pandas-style ak.Array constructor takes data in a SOA form and makes it (virtually) AOS, a change in structure, but there would be no difference for an equivalent ak.Record constructor (there's no \"A\" here).\r\n\r\nThe next step, actually writing this to Parquet, works:\r\n\r\n```python\r\n>>> ak.to_parquet(ak.Array({\"d\": j1[np.newaxis]})[0], \"/tmp/test.parquet\")\r\n<pyarrow._parquet.FileMetaData object at 0x7fa2b81772c0>\r\n  created_by: parquet-cpp-arrow version 9.0.0\r\n  num_columns: 1\r\n  num_rows: 1\r\n  num_row_groups: 1\r\n  format_version: 2.6\r\n  serialized_size: 0\r\n```\r\n\r\nbut the subsequent step, reading it back with `ak.from_parquet`, doesn't because of a `pyarrow.lib.ArrowInvalid` error. It _might_ be a missing case in pyarrow: Parquet files with only one record in them are weird. That's another thing that I'll look into, though it might land in version 2.0.1 or 2.0.2. (It's not an API-changing thing.)",
  "closed_at":"2022-12-08T20:46:25Z",
  "comments":1,
  "created_at":"2022-12-08T15:51:59Z",
  "id":1484921011,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Yghiz",
  "number":1978,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.Record should have the same Pandas-style constructor that ak.Array has",
  "updated_at":"2023-02-15T19:10:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-docs-fix-rtd-cpp/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-08T19:21:12Z",
  "comments":1,
  "created_at":"2022-12-08T16:54:22Z",
  "draft":false,
  "id":1485029158,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Ez7Vr",
  "number":1979,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-08T19:21:11Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: fix RTD configuration",
  "updated_at":"2023-02-15T19:10:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Which documentation?\n\nTutorials site\n\n### What needs to be documented?\n\n(The form for filling out documentation issues should probably be updated as well.)\r\n\r\n--------------\r\n\r\n  * `ak.metadata_from_parquet` (should be in the same section as `ak.from_parquet`)\r\n\r\nYes, just one! I also checked inside `ak.contents`, `ak.forms`, `ak.types`, `ak.index`, `ak.record`, `ak.behaviors.*`, `ak.numba`, `ak.jax`.\r\n\r\n--------------\r\n\r\nIt looks like we're not exposing\r\n\r\n  * `ak._connect.numexpr.evaluate` \u2192 `ak.numexpr.evaluate`\r\n  * `ak._connect.numexpr.re_evaluate` \u2192 `ak.numexpr.re_evaluate`\r\n\r\nbut we can come back to that. I want to find out if NumExpr can be overloaded now (like NEP13) because it would be a much better interface if Awkward Arrays just worked in NumExpr, rather than having to introduce an `ak.numexpr.*`.",
  "closed_at":"2022-12-08T22:20:54Z",
  "comments":0,
  "created_at":"2022-12-08T19:17:57Z",
  "id":1485258831,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Yh0BP",
  "number":1980,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Missing functions in the API reference side-bar",
  "updated_at":"2023-02-15T19:10:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This correction has no effect on the value semantics, just the type semantics:\r\n\r\n```python\r\n>>> j1 = ak.from_numpy(np.empty(0, np.int32))\r\n>>> ak.Record({\"d\": j1})\r\n<Record {d: []} type='{d: var * unknown}'>\r\n```\r\n\r\nbecomes\r\n\r\n```python\r\n>>> j1 = ak.from_numpy(np.empty(0, np.int32))\r\n>>> ak.Record({\"d\": j1})\r\n<Record {d: []} type='{d: 0 * int32}'>\r\n```\r\n\r\nIn a sense, it also provides symmetry between ak.Array and ak.Record, in that they both have this \"Pandas-style\" constructor now, but since it's a distinction in values for ak.Array but only types for ak.Record, the _effect_ is a little different.\r\n\r\nAnyway, it's nice to get this in before the API freeze because this does change the API.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-ak.record-constructor-should-retain-type/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-08T20:46:24Z",
  "comments":3,
  "created_at":"2022-12-08T19:56:24Z",
  "draft":false,
  "id":1485307592,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5E05lz",
  "number":1981,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-08T20:46:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: ak.Record dict constructor should retain type.",
  "updated_at":"2023-02-15T19:10:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-documentation-touch-ups/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-08T22:20:52Z",
  "comments":3,
  "created_at":"2022-12-08T20:36:18Z",
  "draft":false,
  "id":1485358105,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5E1E1v",
  "number":1982,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-08T22:20:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: Jim's documentation touch-ups (API sidebar, obsolete kernels intro)",
  "updated_at":"2022-12-08T22:20:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- Adds `highlevel`, `behavior` arguments to the `ak.XXX` reducers\r\n- Removes `layout.XXX` reducers\r\n- Moves `layout._reduce` to `ak._do.reduce`\r\n- Rename `layout.layout_equal` to `Content.is_equal_to`\r\n- Removes unused methods of `NumpyArray`\r\n- Replaces `NumpyArray.maybe_to_array()` with `NumpyArray.maybe_to_NumpyArray()`\r\n- Renames `Content` / `Content` subclass public method/properties\r\n- Remove `Content.tolist()` (but keep high-level implementation)\r\n- Move `validity_error` to `ak._do.validity_error`\r\n- Rename `Content.typetracer` with `Content.to_typetracer(...)`\r\n- Replace `Content.forget_length()` with argument to `Content.to_typetracer()`\r\n- Rename `ak.packed()` to `ak.to_packed()` (same for `Content.packed()`)\r\n<!-- docs-preview-start -->\r\n----\r\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/agoose77-refactor-l3-l4-split/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-09T02:17:52Z",
  "comments":2,
  "created_at":"2022-12-08T21:22:43Z",
  "draft":false,
  "id":1485423540,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5E1TmY",
  "number":1983,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-09T02:17:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: hide L3 API",
  "updated_at":"2022-12-09T02:17:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"- [x] README.md\r\n- [x] CONTRIBUTING.md\r\n- [x] move papers and talks\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-readme-contributing-and-papers/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-09T15:33:59Z",
  "comments":1,
  "created_at":"2022-12-09T00:17:22Z",
  "draft":false,
  "id":1485643087,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5E2EUr",
  "number":1985,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-09T15:33:59Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: revamp README.md, CONTRIBUTING.md, and move 'papers and talks'.",
  "updated_at":"2023-02-15T19:10:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I can't believe it: `axis_wrap_if_negative` has always been wrong. This function dates back to the early days of Awkward 1.x. We've been using it for so long, in so many things, that I would have thought that it's been through every possible test.\r\n\r\nTo convert a negative `axis` into its non-negative equivalent, you have to know the absolute depth of the array. With `depth == 1` for a 1-dimensional array and increasing for each nested list, the non-negative axis is `axis + depth` where `axis` is negative. For instance, if `axis == -1` (deepest) and `depth == 2` (array of lists of primitives), `axis + depth == 1`: the equivalent non-negative `axis == 1`.\r\n\r\nIf there's branching (a union or a record), then there isn't a single depth; we can't evaluate `axis + depth`. However, as we recurse down, we'll eventually recurse through the branching structure. Inside of a record of `{x: var * float64, y: var * var * int32}`, for instance, we can evaluate one `depth` inside the `x` branch and a different `depth` inside the `y` branch. We want to do that so that `axis=-1` means \"deepest for all branches,\" i.e. the `float64` for `x` and the `int32` for `y`.\r\n\r\nThat's why `axis_wrap_if_negative` passes `axis` through unchanged if (a) it's already non-negative or (b) the `layout` it's looking at is branched. The idea is that we'll repeatedly call `axis_wrap_if_negative` while the value we get back is negative. As soon as it's non-negative, we keep that value.\r\n\r\nHowever, if we're recursing, the `layout` that we have at some level is not the whole layout. If we only have the `x` branch of a record, for instance, we'll see its `var * float64` as \"`layout`\", and if `x`'s record were embedded within other lists, we wouldn't see them. The depth we compute form _that_ \"`layout`\" is therefore relative to the depth of last branching (the record with `x` and `y`, in this example).\r\n\r\nSince `axis_wrap_if_negative` takes this partial \"`layout`\" and the negative `axis` as arguments, it can _never_ determine the absolute depth, and therefore cannot correctly convert the `axis` into a non-negative `axis`... in general.\r\n\r\nThere's only one case that works anyway: if the branching happens to be at the top level, the relative depth is equal to the absolute depth and we get the right answer. I've looked around, and I've only ever seen tests of negative `axis` with non-branching arrays (no records or unions) or the branching is a RecordArray at top level (this special case). There are tests in which different fields have different depths, like\r\n\r\n```\r\n# * {x: var * float64, y: var * var * int32}\r\n```\r\n\r\nbut never within another list, like\r\n\r\n```\r\n# * var * {x: var * float64, y: var * var * int32}\r\n```\r\n\r\nThe examples in #1914 were apparently the first general test of negative to non-negative `axis` conversion.\r\n\r\nSo I started this PR by introducing a new function (which will eventually live in `ak._util`, but right now it's in `ak._do` to be next to `axis_wrap_if_negative` for juxtaposition), which does the conversion correctly. It needs the same arguments as `axis_wrap_if_negative` _and also_ the current `depth`, to correct for the fact that the `layout` it's seeing is not the whole array.\r\n\r\nI've implemented `ak.is_none` with it. Now I'm going to look for other functions that were using `axis_wrap_if_negative` incorrectly. I don't think we'll fix all of these bugs before the 2.0.0 release tomorrow, but we'll get the pattern established.\r\n\r\nThey're bugs and we can change them without a deprecation cycle.\r\n\r\n<!-- docs-preview-start -->\r\n----\n:books: The documentation for this PR will be available at <https://awkward-array.readthedocs.io/en/jpivarski-improved-axis-to-posaxis/> once Read the Docs has finished building :hammer:\r\n<!-- docs-preview-end -->",
  "closed_at":"2022-12-09T15:45:06Z",
  "comments":1,
  "created_at":"2022-12-09T06:25:46Z",
  "draft":false,
  "id":1486121030,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5E3w0c",
  "number":1986,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-09T15:45:06Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"fix: replace `axis_wrap_if_negative` with `maybe_posaxis`, simpler and more correct",
  "updated_at":"2023-02-15T19:10:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR invokes the Sphinx `linkcheck` builder to ensure our links in the docs are up to date. It does _not_ test GitHub links, because many of these are generated by our documentation generator, and `linkcheck` doesn't play nicely with the SPA anchors. So, for now, it's only external links and internal documents that are checked.\r\n\r\nThis runs in series with the actual build. I'm not sure whether it would be better to have this run periodically, instead. Broken links are shown in the `Files changed` tab as \"checks\" overlayed onto the files.\r\n\r\nI also removed references to Doxygen within the `ak.operations` docstrings. This is not something that high-level users need to be aware of, and it makes their docstrings less readable.",
  "closed_at":"2022-12-13T20:02:46Z",
  "comments":2,
  "created_at":"2022-12-09T13:14:05Z",
  "draft":false,
  "id":1486742023,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5E57y7",
  "number":1987,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-13T20:02:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: output linkcheck information",
  "updated_at":"2022-12-13T20:02:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n...",
  "closed_at":"2022-12-13T16:35:47Z",
  "comments":0,
  "created_at":"2022-12-09T15:11:27Z",
  "id":1486921840,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5YoKBw",
  "number":1988,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Remove unused `num` kernels",
  "updated_at":"2022-12-13T16:35:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-12-09T22:51:29Z",
  "comments":1,
  "created_at":"2022-12-09T19:07:55Z",
  "draft":false,
  "id":1487288791,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5E72H3",
  "number":1990,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-09T22:51:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: move to Pages for docs",
  "updated_at":"2022-12-09T22:51:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I ran the Uproot tests \"just before\" the final Awkward release, but \"just before\" was a day or two ago. Uproot caught this tiny refactoring error, which now has a test. I scanned through the codebase and there is not another error of this type.\r\n\r\nAwkward 2.0.1 will be sooner than we'd thought.",
  "closed_at":"2022-12-10T07:19:45Z",
  "comments":1,
  "created_at":"2022-12-10T01:37:01Z",
  "draft":false,
  "id":1487770662,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5E9jid",
  "number":1993,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-10T07:19:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: missed a NumpyArray.raw call without an underscore.",
  "updated_at":"2023-02-15T19:10:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR is the first step in moving our docs to AWS.\r\n\r\nIt creates a deployment whose URL leads to the rendered docs. Each branch lives for seven days after creation.",
  "closed_at":"2022-12-12T21:59:03Z",
  "comments":3,
  "created_at":"2022-12-12T12:30:13Z",
  "draft":false,
  "id":1491763413,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FL4vd",
  "number":1994,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-12T21:59:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: restore branch preview",
  "updated_at":"2022-12-14T08:40:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"It should have one for consistency with the ak.contents.Content subclasses, even though it can't be duck-typed with them (ak.record.Record doesn't have any of the arguments that ak.contents.Content have, and vice-versa).",
  "closed_at":"2022-12-13T13:08:02Z",
  "comments":0,
  "created_at":"2022-12-12T19:04:48Z",
  "id":1492555588,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Y9pdE",
  "number":1995,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.record.Record does not have a `copy` method",
  "updated_at":"2022-12-13T13:08:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"I haven't added any tests, because we probably need to revisit our `copy` tests anyway (this code has been touched a reasonable amount)",
  "closed_at":"2022-12-13T13:08:00Z",
  "comments":4,
  "created_at":"2022-12-12T20:36:18Z",
  "draft":false,
  "id":1492709464,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FPLx-",
  "number":1996,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-13T13:08:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: add `Record.copy`",
  "updated_at":"2022-12-13T13:08:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n2.0.0\n\n### Description and code to reproduce\n\n```python\r\nIn [38]: a = ak.from_iter([[1, 2, 3], [4], [5, 6]])\r\n\r\nIn [39]: tt = ak.Array(a.layout.to_typetracer(forget_length=True))\r\n\r\nIn [40]: ak.num(tt, axis=1)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nCell In[40], line 1\r\n----> 1 ak.num(tt, axis=1)\r\n\r\nFile ~/.pyenv/versions/3.11.1/envs/dev/lib/python3.11/site-packages/awkward/operations/ak_num.py:71, in num(array, axis, highlevel, behavior)\r\n      9 \"\"\"\r\n     10 Args:\r\n     11     array: Array-like data (anything #ak.to_layout recognizes).\r\n   (...)\r\n     65     <Array [[1.1, 2.2, 3.3], None, [7.7]] type='3 * option[var * float64]'>\r\n     66 \"\"\"\r\n     67 with ak._errors.OperationErrorContext(\r\n     68     \"ak.num\",\r\n     69     dict(array=array, axis=axis, highlevel=highlevel, behavior=behavior),\r\n     70 ):\r\n---> 71     return _impl(array, axis, highlevel, behavior)\r\n\r\nFile ~/.pyenv/versions/3.11.1/envs/dev/lib/python3.11/site-packages/awkward/operations/ak_num.py:100, in _impl(array, axis, highlevel, behavior)\r\n     95     elif layout.is_leaf:\r\n     96         raise ak._errors.wrap_error(\r\n     97             np.AxisError(f\"axis={axis} exceeds the depth of this array ({depth})\")\r\n     98         )\r\n--> 100 out = ak._do.recursively_apply(layout, action, behavior, numpy_to_regular=True)\r\n    102 return ak._util.wrap(out, behavior, highlevel)\r\n\r\nFile ~/.pyenv/versions/3.11.1/envs/dev/lib/python3.11/site-packages/awkward/_do.py:33, in recursively_apply(layout, action, behavior, depth_context, lateral_context, allow_records, keep_parameters, numpy_to_regular, return_simplified, return_array, function_name)\r\n     18 def recursively_apply(\r\n     19     layout: Content | Record,\r\n     20     action: ActionType,\r\n   (...)\r\n     29     function_name: str | None = None,\r\n     30 ) -> Content | Record | None:\r\n     32     if isinstance(layout, Content):\r\n---> 33         return layout._recursively_apply(\r\n     34             action,\r\n     35             behavior,\r\n     36             1,\r\n     37             copy.copy(depth_context),\r\n     38             lateral_context,\r\n     39             {\r\n     40                 \"allow_records\": allow_records,\r\n     41                 \"keep_parameters\": keep_parameters,\r\n     42                 \"numpy_to_regular\": numpy_to_regular,\r\n     43                 \"return_simplified\": return_simplified,\r\n     44                 \"return_array\": return_array,\r\n     45                 \"function_name\": function_name,\r\n     46             },\r\n     47         )\r\n     49     elif isinstance(layout, Record):\r\n     50         out = recursively_apply(\r\n     51             layout._array,\r\n     52             action,\r\n   (...)\r\n     61             function_name,\r\n     62         )\r\n\r\nFile ~/.pyenv/versions/3.11.1/envs/dev/lib/python3.11/site-packages/awkward/contents/listoffsetarray.py:1996, in ListOffsetArray._recursively_apply(self, action, behavior, depth, depth_context, lateral_context, options)\r\n   1986     def continuation():\r\n   1987         content._recursively_apply(\r\n   1988             action,\r\n   1989             behavior,\r\n   (...)\r\n   1993             options,\r\n   1994         )\r\n-> 1996 result = action(\r\n   1997     self,\r\n   1998     depth=depth,\r\n   1999     depth_context=depth_context,\r\n   2000     lateral_context=lateral_context,\r\n   2001     continuation=continuation,\r\n   2002     behavior=behavior,\r\n   2003     backend=self._backend,\r\n   2004     options=options,\r\n   2005 )\r\n   2007 if isinstance(result, Content):\r\n   2008     return result\r\n\r\nFile ~/.pyenv/versions/3.11.1/envs/dev/lib/python3.11/site-packages/awkward/operations/ak_num.py:93, in _impl.<locals>.action(layout, depth, **kwargs)\r\n     90 posaxis = ak._util.maybe_posaxis(layout, axis, depth)\r\n     92 if posaxis == depth and layout.is_list:\r\n---> 93     return ak.contents.NumpyArray(layout.stops.data - layout.starts.data)\r\n     95 elif layout.is_leaf:\r\n     96     raise ak._errors.wrap_error(\r\n     97         np.AxisError(f\"axis={axis} exceeds the depth of this array ({depth})\")\r\n     98     )\r\n\r\nTypeError: unsupported operand type(s) for -: 'TypeTracerArray' and 'TypeTracerArray'\r\n```",
  "closed_at":"2023-01-13T00:17:40Z",
  "comments":7,
  "created_at":"2022-12-12T21:20:49Z",
  "id":1492788924,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Y-ia8",
  "number":1997,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Implement all ufuncs in TypeTracerArray (was: `ak.num(array, axis=1)`)",
  "updated_at":"2023-01-13T00:17:40Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Closes #1988 ",
  "closed_at":"2022-12-13T16:35:44Z",
  "comments":2,
  "created_at":"2022-12-12T21:59:19Z",
  "draft":false,
  "id":1492853188,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FPsNw",
  "number":1998,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-13T16:35:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: remove old `num` kernels",
  "updated_at":"2022-12-13T17:19:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/PyCQA/isort: 5.10.1 \u2192 5.11.1](https://github.com/PyCQA/isort/compare/5.10.1...5.11.1)\n- [github.com/asottile/pyupgrade: v3.3.0 \u2192 v3.3.1](https://github.com/asottile/pyupgrade/compare/v3.3.0...v3.3.1)\n- [github.com/psf/black: 22.10.0 \u2192 22.12.0](https://github.com/psf/black/compare/22.10.0...22.12.0)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-12-12T23:55:21Z",
  "comments":2,
  "created_at":"2022-12-12T23:06:22Z",
  "draft":false,
  "id":1492950068,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FQCMR",
  "number":1999,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-12T23:55:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-12-12T23:55:22Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n```\r\nimport awkward as ak\r\nak.numexpr.evaluate(...)\r\n```",
  "closed_at":"2022-12-19T12:34:17Z",
  "comments":4,
  "created_at":"2022-12-13T17:27:35Z",
  "id":1494790307,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ZGLCj",
  "number":2000,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak._connect.numexpr` is not exported under `ak.numexpr`",
  "updated_at":"2022-12-19T12:34:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is so that @aryan26roy's project of Numba-compiling AwkwardForth code will be notified of any changes in the Forth byte code (changes on the C++ side that can invalidate code on the Python side; at least there needs to be an assertion).",
  "closed_at":"2022-12-15T17:26:08Z",
  "comments":5,
  "created_at":"2022-12-13T19:43:47Z",
  "draft":false,
  "id":1495034657,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FXO6V",
  "number":2001,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-15T17:26:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: add ABI version number to AwkwardForth",
  "updated_at":"2022-12-15T17:26:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"We have a stop-gap deployment to GitHub pages for our documentation. This PR prepares to deploy to AWS S3 instead. \r\n\r\nThis will make it easier to integrate with our CI.",
  "closed_at":"2022-12-14T15:46:28Z",
  "comments":2,
  "created_at":"2022-12-13T22:26:12Z",
  "draft":false,
  "id":1495261626,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FX_cI",
  "number":2002,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-14T15:46:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: wip for deployment on AWS",
  "updated_at":"2022-12-14T16:23:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\n1e475cf (current HEAD)\n\n### Description and code to reproduce\n\nHi, installing the HEAD of `awkward` via `pip` currently fails while trying to find `awkward-cpp==3`:\r\n```console\r\n$ pip install git+https://github.com/scikit-hep/awkward.git\r\n[...]\r\nERROR: Could not find a version that satisfies the requirement awkward-cpp==3 (from awkward) (from versions: 0.11.0rc7.linux-x86_64, 0.11.0rc8.linux-x86_64, 0.10.4, 0.11.1, 0.12.0rc1, 0.12.0rc2, 0.12.0, 0.12.1, 0.12.2, 0.12.3, 0.12.4, 0.12.5, 0.12.6, 0.12.7, 0.12.8, 0.12.9, 0.12.10, 0.12.11, 0.12.12, 0.12.13, 0.12.14, 0.12.15, 0.12.16, 0.12.17, 0.12.18, 0.12.19, 0.12.20, 0.12.21, 0.12.22, 0.13.0, 0.14.0, 1, 2)\r\nERROR: No matching distribution found for awkward-cpp==3\r\n```\r\n\r\nFrom a brief look at the history it seems like this may be due to https://github.com/scikit-hep/awkward/commit/307fa10eabb0e0da1af18d1e243437a80ef40a23 raising the version number to 3.\r\n\r\nI ran the above in a `python:3.10-slim` container to reproduce, but presumably this is not specifically an environment issue.",
  "closed_at":"2022-12-14T19:27:58Z",
  "comments":5,
  "created_at":"2022-12-14T09:34:42Z",
  "id":1496176380,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ZLdb8",
  "number":2003,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Cannot install awkward from HEAD: awkward-cpp==3 not found",
  "updated_at":"2022-12-14T19:27:58Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I think that the only place where installation is described in enough detail to include a note about not using pip with git is on the README.\r\n\r\nThis note links to the Installation for developers section, which isn't on PyPI. The note is too detailed for PyPI, anyway.\r\n\r\nTo make that work with a single cut, I also moved the Getting started section earlier. It makes more sense for the two Installation sections to be next to each other, anyway. The Getting started is short enough that it's clear that there's an installation section immediately after it.",
  "closed_at":"2022-12-14T19:27:57Z",
  "comments":0,
  "created_at":"2022-12-14T16:59:46Z",
  "draft":false,
  "id":1497041850,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FeMt5",
  "number":2005,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-14T19:27:57Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"docs: add note in README.md about pip installing through git.",
  "updated_at":"2022-12-14T19:27:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\n2.0.0\r\n\r\n### Description and code to reproduce\r\n\r\nI have an awkward array where one field is of non-std (string) type. I have it saved in a parquet file, load up the array in awkward (with from_parquet), and query the first item with arr[*field_name*][0] .. it produce the following errror\r\n`site-packages/awkward/highlevel.py\", line 1751, in __getitem__\r\n    return ak._util.tobytes(out.raw(numpy)).decode(\r\nAttributeError: 'NumpyArray' object has no attribute 'raw'. Did you mean: '_raw'?`\r\n\r\n*edit*: I check to change raw into _raw and that seemd to work... does version 2.0.0 require an older numpy version, or is this an internal command?",
  "closed_at":"2022-12-14T20:08:20Z",
  "comments":1,
  "created_at":"2022-12-14T18:08:34Z",
  "id":1497145803,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ZPKHL",
  "number":2006,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Trying to get a non-standard entry in awkward array gives an error (code worked in 1.X.X)",
  "updated_at":"2022-12-14T20:08:20Z",
  "user":"MDQ6VXNlcjY2MTY2NjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Google et al. still cache links to `awkward-array.org` from its Netlify days. We need to redirect these on GitHub Pages.\r\n\r\nThis isn't done for AWS, but we can just generate those redirects once and PUT them into the root.",
  "closed_at":"2022-12-14T22:09:27Z",
  "comments":1,
  "created_at":"2022-12-14T21:33:24Z",
  "draft":false,
  "id":1497433862,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FfjR9",
  "number":2007,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-14T22:09:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: redirect paths for user-guide",
  "updated_at":"2022-12-14T22:09:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n```python\r\n>>> import awkward as ak\r\n>>> ak.type([1,2,3])\r\n\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nCell In[12], line 1\r\n----> 1 ak.type([1,2,3])\r\n\r\nFile /lib/python3.10/site-packages/awkward/operations/ak_type.py:77, in type(array)\r\n     15 \"\"\"\r\n     16 Args:\r\n     17     array: Array-like data (anything #ak.to_layout recognizes).\r\n   (...)\r\n     71 to the language.)\r\n     72 \"\"\"\r\n     73 with ak._errors.OperationErrorContext(\r\n     74     \"ak.type\",\r\n     75     dict(array=array),\r\n     76 ):\r\n---> 77     return _impl(array)\r\n\r\nFile /lib/python3.10/site-packages/awkward/operations/ak_type.py:144, in _impl(array)\r\n    141     return array.form.type\r\n    143 else:\r\n--> 144     raise ak._errors.wrap_error(TypeError(f\"unrecognized array type: {array!r}\"))\r\n\r\nTypeError: while calling\r\n\r\n    ak.type(\r\n        array = [1, 2, 3]\r\n    )\r\n\r\nError details: unrecognized array type: [1, 2, 3]\r\n```",
  "closed_at":"2022-12-15T17:09:44Z",
  "comments":0,
  "created_at":"2022-12-15T10:51:41Z",
  "id":1498214249,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ZTO9p",
  "number":2008,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.type` does not accept \"anything `ak.to_layout` recognizes\"",
  "updated_at":"2022-12-15T17:09:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #2008",
  "closed_at":"2022-12-15T17:09:42Z",
  "comments":1,
  "created_at":"2022-12-15T11:04:30Z",
  "draft":false,
  "id":1498230836,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FiQBw",
  "number":2009,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-15T17:09:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: widen input support for `ak.type()`",
  "updated_at":"2022-12-15T17:09:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR adds\r\n- `user-guide/how-to-examine-list-fields`\r\n- `user-guide/how-to-filter-ragged`\r\n- `user-guide/how-to-restructure-zip-project`\r\n- `user-guide/how-to-restructure-add-fields`\r\n\r\nDepends upon #2009",
  "closed_at":"2022-12-15T17:56:36Z",
  "comments":1,
  "created_at":"2022-12-15T11:25:23Z",
  "draft":false,
  "id":1498257621,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FiV4C",
  "number":2010,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-15T17:56:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: first pass on subset of user guide",
  "updated_at":"2022-12-15T17:56:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Numexpr support is not public yet, so we hide it for now.\r\n\r\nAlso, cleanup JAX documentation string.",
  "closed_at":"2022-12-15T14:16:13Z",
  "comments":1,
  "created_at":"2022-12-15T12:18:40Z",
  "draft":false,
  "id":1498331880,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FimSc",
  "number":2011,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-15T14:16:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: remove mention of numexpr",
  "updated_at":"2022-12-15T14:16:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1944",
  "closed_at":"2022-12-15T14:13:38Z",
  "comments":1,
  "created_at":"2022-12-15T12:58:56Z",
  "draft":false,
  "id":1498392725,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FizzF",
  "number":2012,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-15T14:13:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: support empty record arrays in `ak.to_numpy`",
  "updated_at":"2022-12-15T14:13:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"A preliminary guide on discovering array types.",
  "closed_at":"2023-02-15T21:03:53Z",
  "comments":0,
  "created_at":"2022-12-15T17:36:07Z",
  "draft":false,
  "id":1498832244,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FkTc1",
  "number":2013,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2023-02-15T21:03:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add `how-to-examine-type.md`",
  "updated_at":"2023-02-15T21:03:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\n@miranov25 noticed this:\r\n\r\n```python\r\n>>> ROOT.awkward.type_to_form[\"Long64_t\"](0)\r\nType x is not recognized.\r\n```\r\n\r\nWe obviously could support this in the `type_to_name` function, but I am unsure as to whether we want to handle these kinds of type aliases, which won't round-trip (only really important for `flatlist_as_rvec`, if at all).\r\n\r\nIf we decide that we don't support these aliases, then we should probably update the documentation :)\r\n\r\nIncidentally, there is `ROOT::Internal::RDF::TypeName2TypeID` which behaves like our `type_to_name`. Do we not use this because it's internal?",
  "closed_at":"2022-12-21T09:23:37Z",
  "comments":2,
  "created_at":"2022-12-19T12:33:16Z",
  "id":1502876257,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ZlBJh",
  "number":2018,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"`from_rdataframe` doesn't support `Long64_t`",
  "updated_at":"2022-12-21T09:23:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Our `type_to_form` should never be called on an Awkward type in `from_rdataframe`, but we should probably handle that case anyway to make the code more readable.",
  "closed_at":"2023-01-13T18:21:12Z",
  "comments":2,
  "created_at":"2022-12-19T12:47:03Z",
  "draft":false,
  "id":1502891762,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Fx6IC",
  "number":2019,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2023-01-13T18:21:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: ensure Exception if branch evaluates for Awkward type",
  "updated_at":"2023-01-13T18:21:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR reworks #1793. \r\n- [x] Fixes #1789 \r\n- [x] Removes the `flatten_records` argument to reducers\r\n- [x] General cleanups of reducers\r\n\r\nI plan to go back into `_reducers` after working on the nplike mechanism to cleanup the dtype handling. For now, it works, but I'd prefer us to deal exclusively with `np.dtype` objects rather than NumPy's generic types.",
  "closed_at":"2022-12-22T20:38:51Z",
  "comments":5,
  "created_at":"2022-12-19T17:17:39Z",
  "draft":false,
  "id":1503300480,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FzS7X",
  "number":2020,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-22T20:38:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor!: use exclusively `axis=-1` reduction for `axis=None`",
  "updated_at":"2022-12-22T20:38:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"https://github.com/dask-contrib/dask-awkward/pull/133#issuecomment-1356884239 happened because TypeTracerArray didn't have an `__eq__` method. It was easy to add, along with `__ne__`.\r\n\r\nIn addressing this issue, I first added an `__array_ufunc__` ([NEP-13](https://numpy.org/neps/nep-0013-ufunc-overrides.html)) because I thought that's what the issue was and I was surprised that it didn't have one. I'm still surprised it doesn't have one. We _could_ implement all of the `__eq__`, `__ne__`, `__gt__`, `__ge__`, `__lt__`, `__le__` methods in one swoop by making TypeTracerArray inherit from `ak._connect.numpy.NDArrayOperatorsMixin`.\r\n\r\nWhat do you think, @agoose77? Actually, I've pretty much talked myself into it. The next commit will do that. It's git, everything's reversible, of course!",
  "closed_at":"2022-12-19T20:48:48Z",
  "comments":5,
  "created_at":"2022-12-19T18:44:59Z",
  "draft":false,
  "id":1503402862,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5FzpAA",
  "number":2021,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-19T20:48:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: extend TypeTracerArray with __eq__, __ne__, and __array_ufunc__.",
  "updated_at":"2022-12-19T20:48:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/PyCQA/isort: 5.11.1 \u2192 v5.11.3](https://github.com/PyCQA/isort/compare/5.11.1...v5.11.3)\n- [github.com/shellcheck-py/shellcheck-py: v0.8.0.4 \u2192 v0.9.0.2](https://github.com/shellcheck-py/shellcheck-py/compare/v0.8.0.4...v0.9.0.2)\n<!--pre-commit.ci end-->",
  "closed_at":"2022-12-19T23:27:05Z",
  "comments":1,
  "created_at":"2022-12-19T22:37:12Z",
  "draft":false,
  "id":1503708229,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5F0sV1",
  "number":2022,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-19T23:27:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2022-12-19T23:27:06Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-12-21T09:23:36Z",
  "comments":3,
  "created_at":"2022-12-20T09:04:50Z",
  "draft":false,
  "id":1504213388,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5F2WW0",
  "number":2023,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-21T09:23:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: add support for Long64_t",
  "updated_at":"2022-12-21T09:23:37Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Add a helper function to `ak._util` that makes approximate comparisons of ragged arrays.\r\n\r\nSome of the branches in this helper may not have been tested; my view is that we'll discover any bugs when we use it in a test. I've checked all of the primitive cases, though.",
  "closed_at":"2022-12-22T10:29:18Z",
  "comments":2,
  "created_at":"2022-12-20T11:57:27Z",
  "draft":false,
  "id":1504445575,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5F3H2z",
  "number":2024,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-22T10:29:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: add array comparison test helper",
  "updated_at":"2022-12-22T10:29:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR should remove the GitHub Pages documentation deployment from the CI, and disable version selectors for previews.",
  "closed_at":"2022-12-21T17:50:07Z",
  "comments":2,
  "created_at":"2022-12-21T16:14:53Z",
  "draft":false,
  "id":1506566906,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5F-MHd",
  "number":2025,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-21T17:50:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: drop pages deployment",
  "updated_at":"2022-12-21T17:50:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-12-21T20:46:15Z",
  "comments":1,
  "created_at":"2022-12-21T20:27:54Z",
  "draft":false,
  "id":1506875575,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5F_Oq-",
  "number":2026,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-21T20:46:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add sitemap",
  "updated_at":"2022-12-21T20:46:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This came out of conversations with @lgray and @nsmith-: perhaps the type-tracer can determine which input columns have been touched, where\r\n\r\n```python\r\nrestructured = ak.zip({\r\n    \"muons\": ak.zip({\r\n        \"pt\": original[\"Muon_pt\"],\r\n        \"phi\": original[\"Muon_phi\"],\r\n        \"eta\": original[\"Muon_eta\"],\r\n        \"mass\": original[\"Muon_mass\"],\r\n    })\r\n})\r\n```\r\n\r\nwouldn't count as \"touching\" `\"Muon_pt\"`, `\"Muon_phi\"`, `\"Muon_eta\"`, and `\"Muon_mass\"`, but\r\n\r\n```python\r\nrestructured.muons.pt\r\n```\r\n\r\nwould count as touching `\"Muon_pt\"`. That kind of influence would be hard to track on the high road that dask-awkward takes, but type-tracers take the low road and can pass a label from the `\"Muon_pt\"` field of `original` to the `\"pt\"` field of `muons`.\r\n\r\nThe next commit will add tests, in which I'll see if this can truly be made to work. If it does work, then it could be a single-pass solution to identifying columns for `project_columns` in dask-awkward.\r\n\r\nCc: @douglasdavis and @martindurant",
  "closed_at":"2022-12-23T17:26:46Z",
  "comments":7,
  "created_at":"2022-12-21T20:29:31Z",
  "draft":false,
  "id":1506876922,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5F_O9t",
  "number":2027,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-23T17:26:46Z"
  },
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"feat: add data-touch reporting to the type-tracer.",
  "updated_at":"2022-12-23T19:29:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n2.0.2\n\n### Description and code to reproduce\n\nIn a profiling run of a coffea processor with awkward2 (eager mode) I found that 20% of the time was spent in the following line:\r\nhttps://github.com/scikit-hep/awkward/blob/7e6f504c3cb0310cdbe0be7b5d662722ee73aaa7/src/awkward/contents/content.py#L94\r\n![image](https://user-images.githubusercontent.com/6587412/209037377-c6ad3e62-7349-470c-a340-d0dd223f0a90.png)\r\nThis instance check would normally be very fast but I suspect because the type is a `@runtime_checkable` protocol, it is doing more work.\r\nhttps://github.com/scikit-hep/awkward/blob/7e6f504c3cb0310cdbe0be7b5d662722ee73aaa7/src/awkward/_backends.py#L42-L45\r\n\r\nPerhaps there is a way to have it first check the class `__mro__` and then fall back to the protocol?\r\n\r\nIf this time is removed from the profile, the remaining time is in line with what I get running the same processor in awkward 1.",
  "closed_at":"2022-12-22T17:57:50Z",
  "comments":5,
  "created_at":"2022-12-22T01:53:33Z",
  "id":1507133407,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Z1Qff",
  "number":2028,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Checking isinstance of a Protocol is slow",
  "updated_at":"2022-12-22T17:57:50Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Python typing protocols make it possible to enforce duck-typing at type-check time, i.e. ensure that an object has the appropriate methods and attributes rather than whether it inherits from another class. To partially check this at runtime there is a `runtime_checkable` decorator that simply test whether a given object implements the same methods (ignoring their types). \r\n\r\nHowever, this apparently is much slower than I'd anticipated #2028. This issue is only a problem because we need to sanitise the user inputs to our layouts. Otherwise, once `mypy` is fully covered through the code-base, we could just remove our runtime input validation in most cases. Given that we want to provide helpful user errors, we need runtime checks to work. We could fast-path this with \r\n```python\r\ndef isinstance_(obj, type_) -> bool:\r\n    return type.__instancecheck__(type_, obj) or type_.__instancecheck__(obj)  \r\n```\r\nbut in this case, we don't truly need to duck-type backends; they're a limited abstraction that we can forgo the flexibility of protocols.\r\n\r\nFixes #2028 ",
  "closed_at":"2022-12-22T17:57:49Z",
  "comments":1,
  "created_at":"2022-12-22T10:14:43Z",
  "draft":false,
  "id":1507604272,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GBrvJ",
  "number":2029,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-22T17:57:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: replace protocol with direct subclass",
  "updated_at":"2022-12-22T17:57:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"I'm not sure why this is needed; I can't reproduce locally, and it should be disabled by default. pre-commit.ci seems to complain, though.\r\n\r\nAs this is breaking PR workflows, and touches .flake8 only, I'm going to merge when it's successful.",
  "closed_at":"2022-12-22T11:38:37Z",
  "comments":1,
  "created_at":"2022-12-22T11:31:16Z",
  "draft":false,
  "id":1507710913,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GCDk2",
  "number":2030,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-22T11:38:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: fix flake8 warning",
  "updated_at":"2022-12-22T18:07:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #1937 ",
  "closed_at":"2022-12-22T18:42:31Z",
  "comments":3,
  "created_at":"2022-12-22T14:25:21Z",
  "draft":false,
  "id":1507983701,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GDA7b",
  "number":2031,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-22T18:42:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: support `UnknownLength` in `ak.types.ArrayType`",
  "updated_at":"2022-12-22T20:31:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"...because changes to what gets JIT-compiled (like #2023) shouldn't require a new `awkward-cpp` package to get precompiled. In fact, it's a little dangerous:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/36d5a5600da35f34b436ae6ef7325839279a9b71/header-only/awkward/utils.h#L67-L71\r\n\r\nis in the header-only code, and therefore what third party projects might pick up and use in their compilations, but `Long64_t` is not a symbol that exists outside of ROOT, as far as I can tell. Somehow, we manage to compile GrowableBuffer and ArrayBuilder without errors, despite the fact that we don't include ROOT headers in our compilation. I actually don't know why that works (C++ template bindings are very late?).\r\n\r\nThe code in `awkward/header-only` should only include\r\n\r\n  * GrowableBuffer\r\n  * LayoutBuilder\r\n  * BuilderOptions\r\n\r\nIf the RDataFrame/cppyy code _uses_ LayoutBuilder in the future, that's fine, but there can't be anything in this directory that is not used by at least one of the above or anything that is defined in ROOT headers.\r\n\r\nThere's a directory for C++ utilities for RDataFrame/cppyy:\r\n\r\nhttps://github.com/scikit-hep/awkward/tree/main/src/awkward/_connect/rdataframe/include/rdataframe\r\n\r\nSplitting the two could even involve copying some code\u2014that would be fine, if needed.",
  "closed_at":"2023-01-12T20:47:11Z",
  "comments":1,
  "created_at":"2022-12-22T21:00:53Z",
  "id":1508535724,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Z6m2s",
  "number":2032,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"C++ for JIT-compilation (RDataFrame and cppyy) shouldn't be in `awkward/header-only`.",
  "updated_at":"2023-01-12T20:47:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This type hint makes it clear (and, in future, enforces) that contents, types, and forms are all final non-inheritable types.",
  "closed_at":"2023-01-03T21:23:55Z",
  "comments":3,
  "created_at":"2022-12-23T15:23:40Z",
  "draft":false,
  "id":1509464160,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GIFXd",
  "number":2033,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2023-01-03T21:23:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: add `@final` to contents, types, and forms",
  "updated_at":"2023-01-03T21:23:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\nThis would wrap third-party exceptions.",
  "closed_at":"2023-05-09T13:26:36Z",
  "comments":1,
  "created_at":"2022-12-23T16:13:29Z",
  "id":1509515016,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5Z-V8I",
  "number":2034,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Wrap any unwrapped exceptions in `ErrorContext`?",
  "updated_at":"2023-05-09T13:26:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-12-23T19:38:04Z",
  "comments":1,
  "created_at":"2022-12-23T18:59:49Z",
  "draft":false,
  "id":1509679557,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GIzzL",
  "number":2036,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-23T19:38:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: soft-deprecate `flatten_records` instead of hard-deprecation",
  "updated_at":"2022-12-23T19:38:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Bumps [pypa/cibuildwheel](https://github.com/pypa/cibuildwheel) from 2.11.3 to 2.11.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/releases\">pypa/cibuildwheel's releases</a>.</em></p>\n<blockquote>\n<h2>v2.11.4</h2>\n<ul>\n<li>\ud83d\udc1b Fix a bug that caused missing wheels on Windows when a test was skipped using CIBW_TEST_SKIP (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1377\">#1377</a>)</li>\n<li>\ud83d\udee0 Updates CPython 3.11 to 3.11.1 (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1371\">#1371</a>)</li>\n<li>\ud83d\udee0 Updates PyPy 3.7 to 3.7.10, except on macOS which remains on 7.3.9 due to a bug. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1371\">#1371</a>)</li>\n<li>\ud83d\udcda Added a reference to abi3audit to the docs (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1347\">#1347</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/cibuildwheel/blob/main/docs/changelog.md\">pypa/cibuildwheel's changelog</a>.</em></p>\n<blockquote>\n<h3>v2.11.4</h3>\n<p><em>24 Dec 2022</em></p>\n<ul>\n<li>\ud83d\udc1b Fix a bug that caused missing wheels on Windows when a test was skipped using CIBW_TEST_SKIP (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1377\">#1377</a>)</li>\n<li>\ud83d\udee0 Updates CPython 3.11 to 3.11.1 (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1371\">#1371</a>)</li>\n<li>\ud83d\udee0 Updates PyPy to 7.3.10, except on macOS which remains on 7.3.9 due to a bug on that platform. (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1371\">#1371</a>)</li>\n<li>\ud83d\udcda Added a reference to abi3audit to the docs (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1347\">#1347</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/27fc88e6385a995e61a87ee4b903bed263e6a6e2\"><code>27fc88e</code></a> Bump version: v2.11.4</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/a7e9ece1d420cd7a546d12c845f2847aa73f4c43\"><code>a7e9ece</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1371\">#1371</a> from pypa/update-dependencies-pr</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/b9a3ed8c6a52c00ac16b94e6039d00e6263b30ca\"><code>b9a3ed8</code></a> Update cibuildwheel/resources/build-platforms.toml</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/3dcc2ff07e42035a80074fb6ecfd051742a577e2\"><code>3dcc2ff</code></a> fix: not skipping the tests stops the copy (Windows ARM) (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1377\">#1377</a>)</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/1c9ec7664eee4615f6b56352af061457416d8ca1\"><code>1c9ec76</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1378\">#1378</a> from pypa/henryiii-patch-3</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/22b433dc5ff690b62463f6a504914c37c1cfb3bc\"><code>22b433d</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1379\">#1379</a> from pypa/pre-commit-ci-update-config</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/98fdf8c269543d63c92cf045cb192082211cfa6d\"><code>98fdf8c</code></a> [pre-commit.ci] pre-commit autoupdate</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/cefc5a5a0a6a37418654710ba468f2a532b42251\"><code>cefc5a5</code></a> Update dependencies</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/e53253d7d9478e6a7a4a9e777f89222d19dd3350\"><code>e53253d</code></a> ci: move to ubuntu 20</li>\n<li><a href=\"https://github.com/pypa/cibuildwheel/commit/e9ecc65ca51209166cc7dd6e54126dc9fe8ee589\"><code>e9ecc65</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=\"https://github-redirect.dependabot.com/pypa/cibuildwheel/issues/1374\">#1374</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/cibuildwheel/compare/v2.11.3...v2.11.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pypa/cibuildwheel&package-manager=github_actions&previous-version=2.11.3&new-version=2.11.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
  "closed_at":"2023-01-13T18:08:52Z",
  "comments":1,
  "created_at":"2022-12-26T17:12:28Z",
  "draft":false,
  "id":1511093217,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GNan3",
  "number":2038,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2023-01-13T18:08:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore(deps): bump pypa/cibuildwheel from 2.11.3 to 2.11.4",
  "updated_at":"2023-01-13T18:08:54Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"<!--pre-commit.ci start-->\nupdates:\n- [github.com/PyCQA/isort: v5.11.3 \u2192 5.11.4](https://github.com/PyCQA/isort/compare/v5.11.3...5.11.4)\n<!--pre-commit.ci end-->",
  "closed_at":"2023-01-13T02:03:49Z",
  "comments":2,
  "created_at":"2022-12-26T23:41:53Z",
  "draft":false,
  "id":1511312620,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GOLAE",
  "number":2039,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2023-01-13T02:03:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pre-commit hooks",
  "updated_at":"2023-01-13T02:03:50Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR ensures that we only build the sitemap for the `main` version, and that the `link rel=\"canonical\"` links point to `main`. This ensures that Google does not index versioned links.",
  "closed_at":"2022-12-29T19:03:54Z",
  "comments":3,
  "created_at":"2022-12-29T17:04:29Z",
  "draft":false,
  "id":1513906203,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GW39Y",
  "number":2040,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-29T19:03:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: correct canonical URL",
  "updated_at":"2022-12-29T19:23:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Run the docs deployment machinery to fix canonical links without creating a release. This can be done manually, but it's a lot easier to use the CI here.",
  "closed_at":"2022-12-29T21:07:04Z",
  "comments":1,
  "created_at":"2022-12-29T20:43:15Z",
  "draft":true,
  "id":1514040146,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GXT7B",
  "number":2041,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: deploy in order to fix docs",
  "updated_at":"2023-04-11T21:33:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\r\n\r\n2.0.4\r\n\r\n### Description and code to reproduce\r\n\r\nrequires dask_awkward\r\n```python3\r\nimport dask_awkward as dak\r\nimport awkward as ak\r\n\r\nform = ak.forms.ListOffsetForm(\"i64\", ak.forms.NumpyForm(\"float32\", inner_shape=(2,)))\r\ntt = dak.typetracer_from_form(form)\r\nprint(tt)\r\n```\r\n\r\nresults in:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/awkward/highlevel.py\", line 1192, in __str__\r\n    return awkward._prettyprint.valuestr(self, 1, 80)\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/awkward/_prettyprint.py\", line 232, in valuestr\r\n    _, strs = valuestr_horiz(data, limit_cols)\r\n  File \"/Users/lgray/miniforge3/envs/coffea-dev/lib/python3.8/site-packages/awkward/_prettyprint.py\", line 99, in valuestr_horiz\r\n    if len(data) == 0:\r\nTypeError: 'UnknownLengthType' object cannot be interpreted as an integer\r\n```\r\n\r\nStrangely, `tt.__repr__()` executes just fine but when going through `tt.__str__()` I get the error!\r\nThis seems to have some knock-on problems elsewhere in dask_awkward when automatically determining typetracer metadata.\r\n",
  "closed_at":"2023-01-13T00:17:40Z",
  "comments":1,
  "created_at":"2022-12-29T22:37:38Z",
  "id":1514096260,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5aP0aE",
  "number":2042,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ListOffsetArray type tracers (from form) raise exception when printing",
  "updated_at":"2023-01-13T00:17:40Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"```python\r\nimport awkward as ak\r\n\r\n\r\ndef test():\r\n    form = ak.forms.ListOffsetForm(\r\n        \"i64\", ak.forms.NumpyForm(\"float32\", inner_shape=(2,))\r\n    )\r\n    layout = form.length_zero_array().layout.to_typetracer(forget_length=True)\r\n    array = ak.Array(layout)\r\n    assert str(array) == \"<Array-typetracer type='?? * var * 2 * float32'>\"\r\n```\r\n\r\nThis test does not succeed for `2.0.4`, because the pretty-print logic tries to determine `len(array)`. \r\n\r\nAlthough the fix for this is simple enough, down the road we might want to expose this in our public typetracer API.",
  "closed_at":"2023-01-29T01:10:14Z",
  "comments":0,
  "created_at":"2022-12-29T23:10:11Z",
  "draft":true,
  "id":1514109985,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GXirL",
  "number":2043,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: repr of unknown-length arrays",
  "updated_at":"2023-04-11T21:33:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR fixes a minor annoyance that both @lobis and I have run in to. PyCharm, our preferred editor, requires that tests are importable in order to correctly detect the PyTest configuration. \r\n\r\nIf no-one has a strong reason to keep our non-identifier naming convention, this makes it possible to run individual unit-tests from PyCharm's test runner\r\n![image](https://user-images.githubusercontent.com/1248413/210024897-9073c96c-2f43-458b-ad68-5afe8657dd37.png)\r\n",
  "closed_at":"2022-12-30T17:01:09Z",
  "comments":2,
  "created_at":"2022-12-30T01:04:08Z",
  "draft":false,
  "id":1514163277,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GXuEh",
  "number":2044,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-30T17:01:09Z"
  },
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"test: rename tests to use identifiers",
  "updated_at":"2022-12-30T17:01:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This fixes #1318.\r\n\r\nIt's not clear to me whether NumPy has a specification for the semantic meaning of its argument types. Nearly-always a tuple indicates a \"collection of arays\", whereas lists are themselves often \"array-like\", but seemingly this isn't formalised anywhere. To err on the side of caution, the conversion logic in this PR now treats both cases as \"may contain an array\", and produces a list/tuple of the nplike's raw array in such a case. Other types are not converted e.g. scalars.\r\n\r\nThis logic now relaxes the requirement that each array have the same nplike. I think this is OK \u00ad\u2014 now it's NumPy / CuPy / JAX's responsibility to deal with such a case; Awkward just converts the arrays to their underlying array-library form. ",
  "closed_at":"2023-01-03T18:28:14Z",
  "comments":14,
  "created_at":"2022-12-30T12:09:56Z",
  "draft":false,
  "id":1514479294,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GYxMj",
  "number":2045,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2023-01-03T18:28:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: support scalars in tuple (and list) arguments provided to `__array_function__`",
  "updated_at":"2023-01-03T18:28:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"#1968 added the redundant `return_simplified` argument to `ak.transform`. I missed it in my initial review, but it doesn't do anything and should be removed. I think we can do this immediately; the option isn't documented, and doesn't do anything.",
  "closed_at":"2022-12-30T18:26:54Z",
  "comments":1,
  "created_at":"2022-12-30T17:28:51Z",
  "draft":false,
  "id":1514668293,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GZZrR",
  "number":2046,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-30T18:26:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: remove unused keyword arg",
  "updated_at":"2022-12-30T18:26:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nThis simple demo does not produce a ragged array:\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nx = ak.transform(\r\n    lambda layout, depth, continuation, **kwargs: continuation(),\r\n    ak.from_numpy(np.arange(2 * 3 * 4 * 5).reshape(2, 3, 4, 5)),\r\n    regular_to_jagged=True,\r\n    numpy_to_regular=True\r\n)\r\nx.show(type=True)\r\n```\r\n\r\nYet, I would expect it to, because of `regular_to_jagged` and `numpy_to_regular`. It is not documented that `regular_to_jagged` is only implemented for multiple array arguments, and we also implement `numpy_to_regular` for the single-array variant. Therefore, I suspect this is an omission rather than a policy choice.",
  "closed_at":"2022-12-30T18:28:43Z",
  "comments":0,
  "created_at":"2022-12-30T17:40:56Z",
  "id":1514676139,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5aSB-r",
  "number":2047,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.transform` doesn't respect `regular_to_jagged` for single argument",
  "updated_at":"2022-12-30T18:28:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #2047 ",
  "closed_at":"2022-12-30T18:28:42Z",
  "comments":4,
  "created_at":"2022-12-30T17:48:39Z",
  "draft":false,
  "id":1514681834,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GZcrG",
  "number":2048,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-30T18:28:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: support `regular_to_jagged` in `Content._recursively_apply` / `ak.transform`",
  "updated_at":"2022-12-30T18:37:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Somehow a single test was incorrectly renamed in #2044. I wrote a simple Xonsh script to perform that translation, so I wonder if a local untracked file threw something off.",
  "closed_at":"2022-12-30T21:46:09Z",
  "comments":1,
  "created_at":"2022-12-30T21:24:38Z",
  "draft":false,
  "id":1514851480,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GaDHg",
  "number":2049,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-30T21:46:09Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: fix poor rename",
  "updated_at":"2022-12-30T21:46:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2022-12-31T16:49:19Z",
  "comments":2,
  "created_at":"2022-12-31T01:29:53Z",
  "draft":false,
  "id":1514943533,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5GaWBn",
  "number":2050,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-31T16:49:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: correct docstring for `ak.metadata_from_parquet`",
  "updated_at":"2022-12-31T16:49:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\nmain\n\n### Description and code to reproduce\n\n```python\r\nimport awkward as ak\r\n\r\nclass Point:\r\n    def length(self):\r\n        raise NotImplementedError\r\n\r\nbehavior = {\r\n    ('*', 'point'): Point\r\n}\r\nbuilder = ak.ArrayBuilder(behavior=behavior)\r\nwith builder.record(\"Point\"):\r\n\tbuilder.field(\"x\").real(1.0)\r\n\tbuilder.field(\"y\").real(2.0)\r\n\tbuilder.field(\"z\").real(3.0)\r\n\r\nassert ak._util.arrays_approx_equal(builder, builder.snapshot())",
  "closed_at":"2022-12-31T16:57:20Z",
  "comments":0,
  "created_at":"2022-12-31T15:14:46Z",
  "id":1515140547,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5aTzXD",
  "number":2051,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.ArrayBuilder` loses behaviour through `ak._util.behaviorof`",
  "updated_at":"2022-12-31T16:57:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"`ak._util.behavior_of` currently ignores the `behavior` of an `ak.ArrayBuilder`. This PR fixes #2051, and also fixes some bugs in the `arrays_approx_equal` function w.r.t record/array handling.",
  "closed_at":"2022-12-31T16:57:19Z",
  "comments":3,
  "created_at":"2022-12-31T15:16:29Z",
  "draft":false,
  "id":1515140946,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws5Ga-_I",
  "number":2052,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-12-31T16:57:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: read behavior from highlevel `ak.ArrayBuilder`",
  "updated_at":"2022-12-31T16:57:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nThe following reproducer does not preserve values set outside of Numba:\r\n\r\n```python3\r\nimport awkward as ak\r\nfrom numba import njit\r\n\r\n\r\n@njit\r\ndef func(builder):\r\n    builder.begin_record()\r\n    builder.field(\"time\").real(2.0)\r\n    builder.end_record()\r\n    return builder\r\n\r\n\r\nbuilder = ak.ArrayBuilder()\r\nbuilder.begin_record()\r\nbuilder.field(\"time\").real(0.0)\r\nbuilder.end_record()\r\n\r\nfunc(builder)\r\n\r\nbuilder.begin_record()\r\nbuilder.field(\"time\").real(5.0)\r\nbuilder.end_record()\r\n\r\nprint(builder.snapshot())\r\n\r\n```\r\n\r\n### Observations\r\nThis only seems to happen if the record is not given a name AND if the Python `ak.ArrayBuilder` operations occur before the njitted function. ",
  "closed_at":"2023-01-01T20:50:40Z",
  "comments":3,
  "created_at":"2022-12-31T22:30:01Z",
  "id":1515218116,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5aUGTE",
  "number":2053,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.ArrayBuilder` loses data when initalising builder outside of Numba",
  "updated_at":"2023-01-01T20:50:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\nmain\r\n\r\n### Description and code to reproduce\r\n\r\nIn the following example, the `ak.ArrayBuilder()._layout.form()` contains a union that is ultimately simplified. However, the `type` attribute looks at this form, and so includes the union.\r\n\r\n```python\r\nimport awkward as ak\r\nfrom numba import njit\r\n\r\n\r\n@njit\r\ndef func(builder):\r\n    builder.begin_record(\"x\")\r\n    builder.field(\"time\").real(2.0)\r\n    builder.end_record()\r\n    return builder\r\n\r\n\r\nbuilder = ak.ArrayBuilder()\r\nbuilder.begin_record(\"x\")\r\nbuilder.field(\"time\").real(0.0)\r\nbuilder.end_record()\r\n\r\nfunc(builder)\r\n\r\nprint(builder.type)\r\nprint(builder.snapshot().type)\r\n\r\n```\r\n\r\n### Observations\r\nThis seems to require the same conditions as #2053 ",
  "closed_at":"2023-01-01T20:50:40Z",
  "comments":3,
  "created_at":"2022-12-31T23:00:27Z",
  "id":1515222392,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5aUHV4",
  "number":2054,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.ArrayBuilder.type` contains non-canonical union",
  "updated_at":"2023-01-01T20:50:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 }
]