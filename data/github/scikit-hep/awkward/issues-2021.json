[
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Is it planned to make `awkward` indexing compatible to `numpy` integer types? I encountered this behavior:\r\n```\r\nIn [1]: arr = ak.Array([0,1])                                                                                                                                                                  \r\n\r\nIn [2]: arr[0]                                                                                                                                                                                 \r\nOut[2]: 0\r\n\r\nIn [3]: arr[np.int64(0)]                                                                                                                                                                       \r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-29-cf889115f96f> in <module>\r\n----> 1 arr[np.int64(0)]\r\n\r\n~/pyenv/3.7.5/lib/python3.7/site-packages/awkward/highlevel.py in __getitem__(self, where)\r\n    941         have the same dimension as the array being indexed.\r\n    942         \"\"\"\r\n--> 943         return ak._util.wrap(self._layout[where], self._behavior)\r\n    944 \r\n    945     def __setitem__(self, where, what):\r\n\r\nValueError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`), and integer or boolean arrays (possibly jagged) are valid indices\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.0.1/src/python/content.cpp#L652)\r\n```\r\nIn my case this also occurs within the `awkward` interface, e.g. by doing:\r\n```\r\nIn [4]: a = ak.argmax(arr)                                                                                                                                                                     \r\n\r\nIn [5]: type(a)                                                                                                                                                                                \r\nOut[5]: numpy.int64\r\n\r\nIn [6]: arr[a]                                                                                                                                                                                 \r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-42-bfaae01d2d57> in <module>\r\n----> 1 arr[a]\r\n\r\n~/pyenv/3.7.5/lib/python3.7/site-packages/awkward/highlevel.py in __getitem__(self, where)\r\n    941         have the same dimension as the array being indexed.\r\n    942         \"\"\"\r\n--> 943         return ak._util.wrap(self._layout[where], self._behavior)\r\n    944 \r\n    945     def __setitem__(self, where, what):\r\n\r\nValueError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`), and integer or boolean arrays (possibly jagged) are valid indices\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.0.1/src/python/content.cpp#L652)\r\n```",
  "closed_at":"2021-01-04T15:41:57Z",
  "comments":9,
  "created_at":"2021-01-01T15:40:45Z",
  "id":777304946,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NzczMDQ5NDY=",
  "number":628,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"NumPy integer indexing compatibility",
  "updated_at":"2021-01-04T15:41:57Z",
  "user":"MDQ6VXNlcjE3ODYyMDkw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"A recent change has caused the following code:\r\n```python\r\nimport awkward as ak\r\n\r\na = ak.zip({\"x\": [1, 2, 3], \"y\": [2, 3, 4]}, with_name=\"asdf\")\r\nprint(ak.type(a))\r\na[\"z\"] = ak.Array([4, 5, 6])\r\nprint(ak.type(a))\r\n```\r\n\r\nto no longer output:\r\n```\r\n3 * asdf[\"x\": int64, \"y\": int64]\r\n3 * asdf[\"x\": int64, \"y\": int64, \"z\": int64]\r\n```\r\nbut rather\r\n```\r\n3 * asdf[\"x\": int64, \"y\": int64]\r\n3 * {\"x\": int64, \"y\": int64, \"z\": int64}\r\n```\r\n\r\nThe change was introduced in https://github.com/scikit-hep/awkward-1.0/pull/606/files#diff-63b9cf483f8a04b770807d6cabd4098708d35ed6d124e8d1c969fcca657d9b32R852-R866\r\nI think there's a case to be made for dropping parameters in some cases, but here is one of the rare instances where awkward appears to be letting us mutate the array (though under the hood it swaps the layout to a new one) and that distinction is probably worth keeping parameters.",
  "closed_at":"2021-01-02T21:05:42Z",
  "comments":4,
  "created_at":"2021-01-01T23:20:20Z",
  "id":777370059,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NzczNzAwNTk=",
  "number":629,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Adding fields to a record array drops its parameters",
  "updated_at":"2021-01-02T21:05:42Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"I wonder if it is reasonable to attempt calling `ak.to_numpy` on each awkward array passed to a NEP18 `__array_function__` that doesn't have an explicit override already, and if the awkward array is not expressible in numpy then display a suitably descriptive error like \"no implementation found and the argument <Array ...> was not coercible to a numpy array\"\r\n\r\nThis would avoid errors such as:\r\n```\r\nTypeError: no implementation found for 'numpy.histogram' on types that implement __array_function__: [<class 'awkward.highlevel.Array'>, <class 'numpy.ndarray'>]\r\n```\r\nwhen in reality the awkward array may well be compatible with the NEP18 function.",
  "closed_at":"2021-07-15T19:58:56Z",
  "comments":1,
  "created_at":"2021-01-02T00:55:24Z",
  "id":777380087,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NzczODAwODc=",
  "number":630,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Default __array_function__ behavior",
  "updated_at":"2021-07-15T19:58:56Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-02T21:05:42Z",
  "comments":0,
  "created_at":"2021-01-02T19:11:54Z",
  "draft":false,
  "id":777510264,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTQ3Nzg4MDA0",
  "number":631,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-02T21:05:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #629.",
  "updated_at":"2021-01-02T21:05:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This should fill with a single, scalar record:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak.Array([{\"x\": 1}, {\"x\": 2}, None, {\"x\": 3}])\r\n>>> ak.fill_none(array, array[0])\r\n```\r\n\r\nbut it raises\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/operations/structure.py\", line 2012, in fill_none\r\n    valuelayout = ak.operations.convert.to_layout(\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/operations/convert.py\", line 1618, in to_layout\r\n    return from_iter(array, highlevel=False)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/operations/convert.py\", line 691, in from_iter\r\n    out.fromiter(x)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/highlevel.py\", line 1765, in __getitem__\r\n    return ak._util.wrap(self._layout[where], self._behavior)\r\nValueError: scalar Record can only be sliced by field name (string); try \"0\"\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/main/src/libawkward/array/Record.cpp#L198)\r\n```\r\n\r\nbecause this `layout` is presumed to be a `Content` when it's really a `Record`. In `to_layout`, there should be a `allow_records=False` or special handling of the `ak.layout.Record` type further down in the function.",
  "closed_at":"2021-01-04T14:15:20Z",
  "comments":0,
  "created_at":"2021-01-03T21:40:53Z",
  "id":777721583,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3Nzc3MjE1ODM=",
  "number":634,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.fill_none does not accept a Record as a fill value",
  "updated_at":"2021-01-04T14:15:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-04T14:15:20Z",
  "comments":0,
  "created_at":"2021-01-03T22:05:17Z",
  "draft":false,
  "id":777725188,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTQ3OTQxODc4",
  "number":635,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-04T14:15:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #634.",
  "updated_at":"2021-01-04T14:15:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-04T15:41:57Z",
  "comments":0,
  "created_at":"2021-01-04T15:08:13Z",
  "draft":false,
  "id":778160619,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTQ4Mjk4ODc4",
  "number":636,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-04T15:41:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Accept NumPy integers in slices.",
  "updated_at":"2021-01-04T15:42:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-12T02:51:38Z",
  "comments":1,
  "created_at":"2021-01-05T00:34:59Z",
  "draft":false,
  "id":778474780,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTQ4NTU1NTQ4",
  "number":638,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-12T02:51:38Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Prototype Forth virtual machine in C++ (close to what will be added to Awkward Array).",
  "updated_at":"2021-01-12T02:51:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-01-12T16:18:36Z",
  "comments":14,
  "created_at":"2021-01-05T13:11:42Z",
  "draft":false,
  "id":779008332,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTQ5MDIwNTkw",
  "number":639,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-12T16:18:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"add quick sort and argsort without recursion",
  "updated_at":"2021-01-12T16:18:39Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"I'll try to do this as easy to reproduce as I can but it's a little complicated.\r\n\r\nI have a data structure, that looks a little like this:\r\n```\r\n{\r\n    \"CaseNum\": 1905256,\r\n    \"Isolates\": [\r\n      {\r\n        \"IsoNum\": 5567545\r\n        \"SeqsPlate\": \"1_E5\",\r\n      }\r\n     Seqplates: [\r\n      \"1_E5\",\r\n      \"1_D5\"\r\n    ]\r\n    ],\r\n  }, \r\n```\r\nI am loading multiple csv files and saving their content in a subfield of the structure, making a final struct that looks more like this:\r\n```\r\n{\r\n    \"CaseNum\": 1905256,\r\n    \"Isolates\": [\r\n      {\r\n        \"IsoNum\": 5567545\r\n        \"SeqsPlate\": \"1_E5\",\r\n      }\r\n     Seqplates: [ \"1_E5\", \"1_D5\" ]\r\n    ],\r\n   \"Pangenome\":[\r\n       \"Gene\": [gene1, gene2, ...]\r\n      \"Annotation\": [annot1, annot2, ...]\r\n    ]\r\n  }, \r\n```\r\nI did it using the following code, a bit bukly but get the job done:\r\n\r\n```\r\ndatadir=os.getcwd()\r\n\r\n# get names of csv files\r\ndirnames=np.char.add(np.asarray(datadir+\"/pangenome/\", dtype=str), np.asarray(df.CaseNum,dtype=str))\r\nfilenames=np.char.add(dirnames,np.asarray('/gene_presence_absence.csv', dtype=str))\r\n\r\n# keep track over which of the files exist\r\nisfile=[os.path.isfile(fn) for fn in filenames]\r\n\r\n# function to read csv files into awkwardarray\r\ndef get_pangenome_data(filename):\r\n    roary_pa=csv.read_csv(filename)\r\n    roary_ak=ak.from_arrow(roary_pa)\r\n   # returns AK and the length of the array for later unflattening\r\n    return roary_ak, len(roary_ak)\r\n\r\n# loop through all existing csv files and get their data\r\npangenome_data=[ (get_pangenome_data(fn))  for fn in filenames[isfile] ]\r\n\r\n# get line count in each file for unflattening\r\nr_count=np.array([c for dat, c in pangenome_data])\r\ncount=np.zeros((len(ilp),),dtype=int) # all line counts are zero\r\ncount[isfile]=r_count # except for records that have a matching csv file\r\n\r\n# merge csv structs together into a single awkwardarray\r\npangenome_data=[dat for dat, c in pangenome_data]\r\npangenome_data=ak.concatenate(pangenome_data)\r\n\r\n# unflatten according to csv line counts to fit the main array/df\r\npangenome_data=ak.unflatten(pangneome_data,count)\r\n\r\n# assign pangenome data to array\r\ndf['Pangenome']=pangenome_data\r\n```\r\n\r\nProblem is, when I try to save the file in to_parquet\r\n`ak.to_parquet(df.Pangenome, datadir+\"/up_to_pangenome.parquet\", explode_records=True)`\r\nI get:\r\n`ArrowNotImplementedError: Unhandled type for Arrow to Parquet schema conversion: dense_union<0: string not null=0, 1: string not null=1>`\r\n\r\nNonetheless when I try to save the Isolates substructure within the awway:\r\n`ak.to_parquet(df.Isolates, datadir+\"/up_to_pangenome.parquet\", explode_records=True)`\r\n\r\nI get no error.\r\n\r\nWhen I print the type for ak.Pangenome I get:\r\n```\r\nak.type(df.Pangenome):\r\n20 * var * union[{\"Gene\": option[string],  \"Annotation\": option[string]}]\r\n```\r\n\r\nBut for the isolates I get:\r\n\r\n```\r\nak.type(df.Isolates)\r\n20 * var * {\"IsoNum\": float64, \"RowNum\": int64, \"SampleDate\": string, \"SeqSubDirName\": string, \"LowQualityThrs\": int64, \"Freezer_pos\": string, \"Used\": int64, \"SiteString\": string, \"Seqname\": string, \"IsSameStrain\": bool}\r\n```\r\n\r\nIs there a way to convert the union type to a different type within the list to circumvent this?\r\n\r\nThanks!",
  "closed_at":"2021-01-05T18:01:59Z",
  "comments":1,
  "created_at":"2021-01-05T17:07:24Z",
  "id":779302881,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NzkzMDI4ODE=",
  "number":640,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"to_parquet cannot convert union struct",
  "updated_at":"2021-01-05T18:02:09Z",
  "user":"MDQ6VXNlcjI2Nzc4NTEw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"",
  "closed_at":"2021-01-06T18:39:48Z",
  "comments":2,
  "created_at":"2021-01-06T17:47:43Z",
  "draft":false,
  "id":780735284,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTUwNTgwOTgx",
  "number":642,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-06T18:39:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Materialize virtual arrays in to_arrow",
  "updated_at":"2021-01-06T18:39:48Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-11T21:45:58Z",
  "comments":0,
  "created_at":"2021-01-11T18:28:42Z",
  "draft":false,
  "id":783599979,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTUyOTMyNDU2",
  "number":643,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-11T21:45:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Prevent trivial carrying, which can also prevent materialization of some VirtualArrays.",
  "updated_at":"2021-01-11T21:46:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-11T22:44:05Z",
  "comments":0,
  "created_at":"2021-01-11T21:44:49Z",
  "draft":false,
  "id":783727619,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTUzMDM5MDE4",
  "number":644,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-11T22:44:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Querying array depth should never materialize if anything has a Form.",
  "updated_at":"2021-01-11T22:45:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-01-22T18:15:12Z",
  "comments":0,
  "created_at":"2021-01-12T16:11:57Z",
  "draft":false,
  "id":784376730,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTUzNTc4MDM2",
  "number":645,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-22T18:15:11Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This PR adds the from_cuda_array_interface, to form CUDA arrays in a more general fashion.",
  "updated_at":"2021-01-22T18:15:22Z",
  "user":"MDQ6VXNlcjM5ODc4Njc1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-12T21:05:20Z",
  "comments":0,
  "created_at":"2021-01-12T19:39:55Z",
  "draft":false,
  "id":784534674,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTUzNzExNTU2",
  "number":646,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-12T21:05:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Black and flake8.",
  "updated_at":"2021-01-12T21:05:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-12T22:10:31Z",
  "comments":0,
  "created_at":"2021-01-12T21:06:54Z",
  "draft":false,
  "id":784593957,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTUzNzYxNjAz",
  "number":647,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-12T22:10:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix JupyterBook formatting and add the executable notebooks to CI tests.",
  "updated_at":"2021-01-12T22:25:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"- [x] Make stubs of all the necessary files.\r\n- [x] Make stubs of all the necessary functions.\r\n- [x] Pass through the public functions to Python, so that developments can be tested from Python.\r\n- [x] Connect those inputs and outputs to Python.\r\n- [x] Rebuild input/output framework, so that declaration-only programs can be run.\r\n- [x] Develop parser and test output with `bytecodes` and `assembly_instructions`.\r\n- [x] Set up stepped-running with a generator interface in Python.\r\n- [x] Fill in runtime machine.\r\n- [x] Ensure that we can obtain 5 ns per instruction again.\r\n- [x] Set up example to parse TTree data from Uproot. (Test is gated by `pytest.importorskip(\"uproot\")`.)\r\n\r\nFull-scale ROOT parsing measurements are not part of this PR.\r\n\r\nNor is the Avro \u2192 Awkward example.",
  "closed_at":"2021-01-16T02:23:55Z",
  "comments":1,
  "created_at":"2021-01-13T00:08:24Z",
  "draft":false,
  "id":784683747,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTUzODM2MjIz",
  "number":648,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-16T02:23:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add a ForthMachine to the codebase, copying from 'studies'.",
  "updated_at":"2021-01-16T02:23:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"In the [C++ doxygen API](https://awkward-array.readthedocs.io/en/latest/_static/index.html), the `RecordArray` is explained as \r\n\r\n> ak::RecordArray: represents an array of records in \"struct of arrays\" form.\r\n\r\nShouldn't it be \r\n\r\n> \"array of structs\" \r\n\r\n?\r\n\r\n",
  "closed_at":"2021-01-13T14:24:32Z",
  "comments":8,
  "created_at":"2021-01-13T12:53:55Z",
  "id":785080301,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3ODUwODAzMDE=",
  "number":649,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Clarification on struct-of-arrays vs arrays-of-structs",
  "updated_at":"2021-01-13T16:28:29Z",
  "user":"MDQ6VXNlcjU0ODg0NDA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-13T18:58:08Z",
  "comments":0,
  "created_at":"2021-01-13T16:12:05Z",
  "draft":false,
  "id":785239025,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTU0Mjk4NDUy",
  "number":650,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-13T18:58:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #649, wording in documentation.",
  "updated_at":"2021-01-13T18:58:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"",
  "closed_at":"2021-01-13T16:30:57Z",
  "comments":1,
  "created_at":"2021-01-13T16:25:17Z",
  "draft":false,
  "id":785249720,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTU0MzA3NDAx",
  "number":651,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Clarify cpp docs, same as #650 for python docs.",
  "updated_at":"2021-01-13T16:59:16Z",
  "user":"MDQ6VXNlcjU0ODg0NDA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"address issue https://github.com/scikit-hep/awkward-1.0/issues/392\r\n\r\nHowever, I'm not sure what the status of @sjperkins work is: https://github.com/scikit-hep/awkward-1.0/pull/421\r\n@jpivarski - I'll be happy to close this PR if it's a duplicate.\r\n\r\nThe main reason why I'm submitting it as a draft is to ask a question about complex numbers representation in JSON. It has been suggested [here](https://github.com/scikit-hep/awkward-1.0/issues/392#issuecomment-674110892) to use `{\"real: #, \"imag\": #}`. Is that what we want?\r\n```python\r\ndef test_complex_numbers():\r\n    array = ak.layout.NumpyArray(np.array([(1.+2.j), (3.+4.j)],dtype=np.complex_))\r\n    assert ak.to_list(array) == [(1.+2.j), (3.+4.j)]\r\n    assert (\r\n        ak.to_json(array)\r\n        == '[{\"real\":1.0,\"imag\":2.0},{\"real\":3.0,\"imag\":4.0}]'\r\n    )\r\n```",
  "closed_at":"2021-01-27T17:01:38Z",
  "comments":17,
  "created_at":"2021-01-13T17:27:14Z",
  "draft":false,
  "id":785296301,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTU0MzQ1OTkw",
  "number":652,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-27T17:01:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"complex numbers support",
  "updated_at":"2021-01-27T17:01:41Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-18T17:12:19Z",
  "comments":0,
  "created_at":"2021-01-16T17:13:16Z",
  "draft":false,
  "id":787510738,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTU2MjA0NDg0",
  "number":653,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-18T17:12:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfixes in ForthMachine (discovered by writing documentation).",
  "updated_at":"2021-01-18T17:12:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - current commits clean up all warnings for my local setup:\r\n```\r\nApple clang version 12.0.0 (clang-1200.0.32.28)\r\nTarget: x86_64-apple-darwin19.6.0\r\n```\r\n",
  "closed_at":"2021-01-18T13:37:32Z",
  "comments":2,
  "created_at":"2021-01-18T11:29:56Z",
  "draft":false,
  "id":788188694,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTU2NzQxNjUz",
  "number":654,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-18T13:37:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Forth machine warnings cleanup",
  "updated_at":"2021-01-18T13:44:28Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\narr = ak.from_buffers(*ak.to_buffers(ak.Array({\"a\": [[1,2,3]]})), lazy=True)\r\narr = arr[np.full(len(arr), True)]\r\narr[\"b\"] = np.full(len(arr), True)\r\narr = arr[np.full(len(arr), True)]\r\nprint(arr[\"a\"][arr[\"a\"] > 2])\r\n```\r\nThe last line will produce `RuntimeError: undefined operation: VirtualArray::getitem_next_jagged(array)`. It doesn't matter where exactly the masks that are used for slicing are `True` and `False`.\r\nTested on version 1.0.2 and the current Git main.",
  "closed_at":"2021-01-18T18:41:12Z",
  "comments":1,
  "created_at":"2021-01-18T11:37:35Z",
  "id":788193909,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3ODgxOTM5MDk=",
  "number":655,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Undefined operation after slicing a virtual array",
  "updated_at":"2021-01-18T18:41:12Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-18T16:13:03Z",
  "comments":0,
  "created_at":"2021-01-18T14:17:02Z",
  "draft":false,
  "id":788305763,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTU2ODQwMDYx",
  "number":656,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-18T16:13:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"scikit-hep/uproot4#244 revealed surprising semantics of ak.zip with regular arrays. Regular array case has been changed to act the same as jagged arrays.",
  "updated_at":"2021-01-18T16:13:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-18T18:41:12Z",
  "comments":0,
  "created_at":"2021-01-18T17:09:48Z",
  "draft":false,
  "id":788428895,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTU2OTQyMTU5",
  "number":657,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-18T18:41:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"With the new lazy slices, it's now possible to get into 'VirtualArray::getitem_next_jagged'.",
  "updated_at":"2021-01-18T18:41:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - these commits apply modifications suggested by `cppcheck` and fix the `ForthOutputBuffer` warnings. \r\n\r\nExcluding the `inconclusive` and `style` suggestions:\r\n```\r\ninclude/awkward/forth/ForthMachine.h:92:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::stack_can_push' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      stack_can_push() const noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:98:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::stack_can_pop' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      stack_can_pop() const noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:111:7: style:inconclusive: Technically the member function 'awkward::ForthMachineOf::stack_pop' can be const. [functionConst]\r\n      stack_pop() noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:373:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::stack_cannot_push' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      stack_cannot_push() const noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:379:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::stack_cannot_pop' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      stack_cannot_pop() const noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:385:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::stack_cannot_pop2' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      stack_cannot_pop2() const noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:391:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::stack_cannot_pop3' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      stack_cannot_pop3() const noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:424:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::bytecodes_pointer_push' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      bytecodes_pointer_push(int64_t which) noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:432:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::bytecodes_pointer_pop' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      bytecodes_pointer_pop() noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:450:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::do_loop_push' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      do_loop_push(int64_t start, int64_t stop) noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:459:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::do_steploop_push' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      do_steploop_push(int64_t start, int64_t stop) noexcept {\r\n      ^\r\ninclude/awkward/forth/ForthMachine.h:474:5: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::do_abs_recursion_depth' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n    do_abs_recursion_depth() const noexcept {\r\n    ^\r\ninclude/awkward/forth/ForthMachine.h:486:7: performance:inconclusive: Technically the member function 'awkward::ForthMachineOf::do_loop_is_step' can be static (but you may consider moving to unnamed namespace). [functionStatic]\r\n      do_loop_is_step() const noexcept {\r\n      ^\r\n```\r\n```\r\nsrc/libawkward/forth/ForthMachine.cpp:988:33: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]\r\n        if (pair.first == name) {\r\n                                ^\r\nsrc/libawkward/forth/ForthMachine.cpp:1411:25: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]\r\n      if (name == word) {\r\n                        ^\r\nsrc/libawkward/forth/ForthMachine.cpp:1806:43: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]\r\n          if (pair.first == dtype_string) {\r\n                                          ^\r\n```",
  "closed_at":"2021-01-19T15:59:54Z",
  "comments":4,
  "created_at":"2021-01-19T09:14:31Z",
  "draft":false,
  "id":788845934,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTU3MjgyNTIz",
  "number":658,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-19T15:59:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"run static analyser on Forth machine",
  "updated_at":"2021-01-19T16:09:06Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-23T04:36:34Z",
  "comments":5,
  "created_at":"2021-01-20T20:33:04Z",
  "draft":false,
  "id":790300668,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTU4NTEwMTk0",
  "number":661,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-23T04:36:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"AwkwardForth additions to make Avro and Parquet parsing possible.",
  "updated_at":"2021-01-23T04:36:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@trickarcher I probably should have checked out your PR and tried it before merging. When I merged your changes into my PR, I noticed a few compiler warnings, so here I'm fixing them on the main branch, rather than mixing those changes into my PR. Cleans up after #648.",
  "closed_at":"2021-01-22T20:05:04Z",
  "comments":0,
  "created_at":"2021-01-22T19:21:23Z",
  "draft":false,
  "id":792247130,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMTYyMzc1",
  "number":662,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-22T20:05:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Cleanups after PR #648.",
  "updated_at":"2021-01-26T20:11:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"We can add to a highlevel array with a record, e.g.\r\n```python\r\na = ak.Array({\"x\": [1, 2, 3], \"y\": [4, 5, 6]})\r\na[\"z\"] = [7, 8, 9]\r\n```\r\nbut we can't delete:\r\n```python\r\ndel a[\"z\"]  # AttributeError\r\na[\"z\"] = None  # makes a numpy object array\r\n```\r\n",
  "closed_at":"2022-04-20T01:25:27Z",
  "comments":4,
  "created_at":"2021-01-22T19:58:47Z",
  "id":792267997,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3OTIyNjc5OTc=",
  "number":663,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Adding a `__delitem__``` method to awkward arrays",
  "updated_at":"2022-04-20T01:25:27Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-24T21:35:14Z",
  "comments":4,
  "created_at":"2021-01-24T19:24:54Z",
  "draft":false,
  "id":792873024,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYwNjU5NDcz",
  "number":664,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-24T21:35:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Actually remember to release the GIL before doing some multithreading tests.",
  "updated_at":"2021-01-24T22:36:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"We shouldn't use an additional flag to delete `kernels.py` since that file is generated along with the tests.\r\nEarlier, the script threw an error if `kernels.py` didn't exist.",
  "closed_at":"2021-01-25T16:54:54Z",
  "comments":0,
  "created_at":"2021-01-25T10:45:52Z",
  "draft":false,
  "id":793268011,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYwOTg0NzAz",
  "number":665,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-25T16:54:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix cleanup script",
  "updated_at":"2021-01-25T16:54:57Z",
  "user":"MDQ6VXNlcjExNzc1NjE1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-01-25T16:56:36Z",
  "comments":0,
  "created_at":"2021-01-25T10:47:36Z",
  "draft":false,
  "id":793269265,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYwOTg1NzI1",
  "number":666,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-25T16:56:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove unused variable from dev/generate-cuda.py",
  "updated_at":"2021-01-25T16:56:38Z",
  "user":"MDQ6VXNlcjExNzc1NjE1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"to reflect that `kernel-specification.yml` is now checked into git.",
  "closed_at":"2021-01-25T16:57:46Z",
  "comments":0,
  "created_at":"2021-01-25T11:05:35Z",
  "draft":false,
  "id":793282959,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYwOTk2OTc1",
  "number":667,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-25T16:57:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Update CONTRIBUTING.md documentation",
  "updated_at":"2021-01-25T16:57:48Z",
  "user":"MDQ6VXNlcjExNzc1NjE1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-02-28T21:58:29Z",
  "comments":3,
  "created_at":"2021-01-25T11:09:36Z",
  "draft":false,
  "id":793286003,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYwOTk5NTA2",
  "number":668,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-28T21:58:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Write a type parser for TypedArrayBuilder",
  "updated_at":"2021-02-28T21:58:30Z",
  "user":"MDQ6VXNlcjExNzc1NjE1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"I think we should avoid specifying a target CUDA architecture unless there is a reason we need to.\r\n\r\nI think CUDA >= 9 implies a lower bound of sm_30 - https://docs.nvidia.com/cuda/archive/9.0/cuda-compiler-driver-nvcc/index.html#ptxas-options so if we want to be verbose, maybe we should set it to `sm_30` instead?",
  "closed_at":"2021-01-26T18:31:07Z",
  "comments":2,
  "created_at":"2021-01-25T11:15:15Z",
  "draft":false,
  "id":793290328,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYxMDAzMDQy",
  "number":669,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-26T18:31:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Avoid specifying target CUDA architecture",
  "updated_at":"2021-01-26T18:31:09Z",
  "user":"MDQ6VXNlcjExNzc1NjE1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - please, consider the following commit that cleans up warning on: \r\n```\r\nApple clang version 12.0.0 (clang-1200.0.32.28)\r\nTarget: x86_64-apple-darwin19.6.0\r\nThread model: posix\r\n```\r\nand silences a `multiCondition` static analyser warning:\r\n```\r\nsrc/libawkward/forth/ForthOutputBuffer.cpp:127:13: style: Expression is always false because 'else if' condition matches previous condition at line 115. [multiCondition]\r\n    else if (std::is_same<OUT, uint8_t>::value) {\r\n            ^\r\nsrc/libawkward/forth/ForthOutputBuffer.cpp:130:13: style: Expression is always false because 'else if' condition matches previous condition at line 118. [multiCondition]\r\n    else if (std::is_same<OUT, uint16_t>::value) {\r\n            ^\r\nsrc/libawkward/forth/ForthOutputBuffer.cpp:133:13: style: Expression is always false because 'else if' condition matches previous condition at line 121. [multiCondition]\r\n    else if (std::is_same<OUT, uint32_t>::value) {\r\n            ^\r\nsrc/libawkward/forth/ForthOutputBuffer.cpp:136:13: style: Expression is always false because 'else if' condition matches previous condition at line 124. [multiCondition]\r\n    else if (std::is_same<OUT, uint64_t>::value) {\r\n            ^\r\n```",
  "closed_at":"2021-01-25T17:45:00Z",
  "comments":3,
  "created_at":"2021-01-25T12:57:33Z",
  "draft":false,
  "id":793359563,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYxMDYwNjk4",
  "number":670,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-25T17:45:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix warnings and run static analyser",
  "updated_at":"2021-01-25T18:55:27Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"```python\r\narr = ak.layout.IndexedArray64(ak.layout.Index64([0,1]), ak.layout.NumpyArray([1,2,3]))\r\nak.from_buffers(*ak.to_buffers(arr))\r\n```\r\nRaises `ValueError: cannot reshape array of size 3 into shape (2,)`\r\n\r\nContinuing with `arr`:\r\n\r\n```python\r\narr2 = ak.layout.ListArray64(ak.layout.Index64([0]), ak.layout.Index64([0]), arr)\r\nak.from_buffers(*ak.to_buffers(arr2))\r\n```\r\nRaises `ValueError: IndexedArray length mismatch: expected 0, observed 2`\r\n\r\nTested with awkward 1.0.2.",
  "closed_at":"2021-01-26T18:30:40Z",
  "comments":1,
  "created_at":"2021-01-25T17:16:00Z",
  "id":793567293,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3OTM1NjcyOTM=",
  "number":671,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ValueErrors from from_buffers if content is longer than top-level",
  "updated_at":"2021-01-26T18:30:40Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Needs https://github.com/jpivarski/root/commit/c862fe6bcac419f516943c29659adcf9cfd02ba4 and https://github.com/root-project/root/commit/268b0cd6a5269af25173d753228d13dae126a55e",
  "closed_at":"2021-01-28T15:53:22Z",
  "comments":0,
  "created_at":"2021-01-25T22:50:06Z",
  "draft":false,
  "id":793783732,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYxNDEyOTM3",
  "number":672,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-28T15:53:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Put RNTuple measurements on the performance plot",
  "updated_at":"2021-01-28T15:53:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-26T18:30:40Z",
  "comments":0,
  "created_at":"2021-01-26T17:55:43Z",
  "draft":false,
  "id":794439764,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYxOTU2MTYz",
  "number":673,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-26T18:30:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #671 by allowing buffers in ak.from_buffers to be larger than strictly necessary (following the rules that define lengths of array nodes; https://awkward-array.readthedocs.io/en/latest/ak.layout.Content.html).",
  "updated_at":"2021-01-26T18:30:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Hi Jim, there are still problems with categoricals. This is a new issue but it is related to #400 and PR #403, which we discussed a few months ago.\r\n\r\nWhen reading in partitioned parquets (e.g. by `year`, which produce categoricals, similar to 3.) I encountered several problems with categoricals debugging. Data doesn't seem to be corrupted but e.g. writing to parquet is affected.\r\n\r\nI combined three bugs in one issue as they might be partly linked to each other and be addressed in a joint way. If you disagree please feel free to split the following:\r\n1. Invalidation of valid categorical arrays\r\n2. Minimization fails for `ChunkedArray` with categoricals using `ak.from_arrow()`\r\n3. Option-typed `DictionaryArray` are treated as non-categorical awkward arrays\r\n\r\n#### Minimal reproducible examples:\r\n```python\r\n>>> import awkward as ak\r\n>>> import pyarrow as pa\r\n>>> (ak.__version__, pa.__version__) # pyarrow 2.0 should fix ARROW-9801 and DictionaryArray indices look good\r\n('1.0.2', '2.0.0')\r\n```\r\n\r\n**1.**\r\n_Invalidation of valid categorical arrays_\r\n```python\r\n>>> original = ak.Array([2019, 2020, 2021, 2020, 2019])\r\n>>> ak.is_categorical(original)\r\n>>> categorical = ak.to_categorical(original)\r\n>>> categorical.layout # looks fine\r\n<IndexedArray64>\r\n     <parameters>\r\n         <param key=\"__array__\">\"categorical\"</param>\r\n     </parameters>\r\n     <index><Index64 i=\"[0 1 2 1 0]\" offset=\"0\" length=\"5\" at=\"0x56393ae35f60\"/></index>\r\n     <content><NumpyArray format=\"l\" shape=\"3\" data=\"2019 2020 2021\" at=\"0x56393ab84550\"/></content>\r\n</IndexedArray64>\r\n>>> ak.is_categorical(categorical) # is fine\r\nTrue\r\n>>>  ak.categories(categorical) # does fine\r\n<Array [2019, 2020, 2021] type='3 * int64'>\r\n>>> ak.is_valid(categorical) # but is invalid\r\nFalse\r\n>>> ak.is_valid(original)\r\nTrue\r\n```\r\n\r\n**2.**\r\n_Minimization fails for `ChunkedArray` with categoricals using ak.from_arrow()_\r\n```python\r\n>>> indices = pa.array([0, 1, 0, 1, 2, 0, 2])\r\n>>> dictionary = pa.array([2019, 2020, 2021])\r\n>>> dict_array = pa.DictionaryArray.from_arrays(indices, dictionary)\r\n>>> # create a table with 3 chunkedarrays\r\n>>> batch = pa.RecordBatch.from_arrays([dict_array], ['year'])\r\n>>> batches = [batch] * 3\r\n>>> table = pa.Table.from_batches(batches)\r\n>>> table['year']\r\n<pyarrow.lib.ChunkedArray object at 0x7fbb02b05310>\r\n[\r\n\r\n  -- dictionary:\r\n    [\r\n      2019,\r\n      2020,\r\n      2021\r\n    ]\r\n  -- indices:\r\n    [\r\n      0,\r\n      1,\r\n      0,\r\n      1,\r\n      2,\r\n      0,\r\n      2\r\n    ],\r\n\r\n  -- dictionary:\r\n    [\r\n      2019,\r\n      2020,\r\n      2021\r\n    ]\r\n  -- indices:\r\n    [\r\n      0,\r\n      1,\r\n      0,\r\n      1,\r\n      2,\r\n      0,\r\n      2\r\n    ],\r\n\r\n  -- dictionary:\r\n    [\r\n      2019,\r\n      2020,\r\n      2021\r\n    ]\r\n  -- indices:\r\n    [\r\n      0,\r\n      1,\r\n      0,\r\n      1,\r\n      2,\r\n      0,\r\n      2\r\n    ]\r\n]\r\n>>> array = ak.from_arrow(table)\r\n>>> ak.is_valid(array), ak.validity_error(array)\r\n(False,\r\n 'at layout.field(0).content (IndexedArray64): __array__ = \"categorical\" requires contents to be unique')\r\n>>> array.layout # this really doesn't seem to look fine\r\n<RecordArray>\r\n     <field index=\"0\" key=\"year\">\r\n         <IndexedOptionArray64>\r\n             <index><Index64 i=\"[0 1 2 3 4 ... 16 17 18 19 20]\" offset=\"0\" length=\"21\" at=\"0x55a1f6baaa10\"/></index>\r\n             <content><IndexedArray64>\r\n                 <parameters>\r\n                     <param key=\"__array__\">\"categorical\"</param>\r\n                 </parameters>\r\n                 <index><Index64 i=\"[0 1 0 1 2 ... 6 7 8 6 8]\" offset=\"0\" length=\"21\" at=\"0x55a1f6b06cc0\"/></index>\r\n                 <content><NumpyArray format=\"l\" shape=\"9\" data=\"2019 2020 2021 2019 2020 2021 2019 2020 2021\" at=\"0x55a1f69961d0\"/></content>\r\n             </IndexedArray64></content>\r\n         </IndexedOptionArray64>\r\n     </field>\r\n</RecordArray>\r\n```\r\n\r\n**3.**\r\n_Option-typed `DictionaryArray` are treated as non-categorical awkward arrays_\r\nNot sure if intended, but I couldn't figure why this behavior would be necessary:\r\n```python\r\n>>> nan_indices = pa.array([0, 1, 0, 1, 2, None, 0, 2])\r\n>>> option_dict_array = pa.DictionaryArray.from_arrays(nan_indices, dictionary)\r\n>>> option_awk_array = ak.from_arrow(option_dict_array)\r\n>>> option_awk_array.layout\r\n<IndexedOptionArray64>\r\n    <index><Index64 i=\"[0 1 0 1 2 -1 0 2]\" offset=\"0\" length=\"8\" at=\"0x55a1f68d52f0\"/></index>\r\n    <content><NumpyArray format=\"l\" shape=\"3\" data=\"2019 2020 2021\" at=\"0x7fbb09a0a6c0\"/></content>\r\n</IndexedOptionArray64>\r\n```\r\nHowever, this might be the only case where one could argue that `ak.is_valid()` would rightfully claim non-uniqueness (is `None` unique?). But it checks valid, as it is missing the param keys:\r\n```python\r\n<parameters>\r\n    <param key=\"__array__\">\"categorical\"</param>\r\n</parameters>\r\n```",
  "closed_at":"2021-02-11T20:36:53Z",
  "comments":3,
  "created_at":"2021-01-26T19:03:47Z",
  "id":794484871,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3OTQ0ODQ4NzE=",
  "number":674,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"categorical twists with arrow (invalidation of valid DictionaryArray, wrong minimization of ChunkedArray, option ChunkedArray are non-categorical)",
  "updated_at":"2021-02-11T20:36:53Z",
  "user":"MDQ6VXNlcjI1ODgzNjA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is a basic pre-commit setup. It adds the following checks:\r\n\r\n\r\nThe \"common checks\":\r\n\r\n- chore: add pre-commit\r\n- style: run pre-commit\r\n\r\nThis is a set of checks for things like whitespace at the end of the lines.\r\n\r\n- chore: add black\r\n- style: run black\r\n\r\nThis adds Black.\r\n\r\nI've also added a section in contributing.\r\n\r\n- docs: pre-commit instructions\r\n\r\nI can add ignore patterns if there are any files that need changes. Once ready, this PR should be rebased and merged (the \"style\" commits can be added to a `.git-blame-ignore-revs` eventually if we want)\r\n\r\n@JPivarski, thoughts? Other committers?\r\n\r\nI'd like to slowly introduce the checks from https://scikit-hep.org/developer/style , and also add style checking to CI in the future. But I think small steps are best, so just adding two things in this PR.",
  "closed_at":"2021-01-27T16:35:20Z",
  "comments":10,
  "created_at":"2021-01-27T01:57:43Z",
  "draft":false,
  "id":794700003,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYyMTcyNTk3",
  "number":675,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-27T16:35:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"style: pre-commit",
  "updated_at":"2021-01-27T16:35:20Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I just released 2.6.2, would be nice to update, should be a simple bump: https://github.com/pybind/pybind11/releases/tag/v2.6.2",
  "closed_at":"2021-01-28T16:47:59Z",
  "comments":0,
  "created_at":"2021-01-27T04:01:52Z",
  "draft":false,
  "id":794748207,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYyMjEwMjkx",
  "number":676,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-28T16:47:59Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: update pybind11 2.6.2",
  "updated_at":"2021-01-28T16:47:59Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Also moves a few things to the standard locations per https://jupyterbook.org/customize/config.html",
  "closed_at":"2021-01-28T15:35:19Z",
  "comments":7,
  "created_at":"2021-01-27T04:36:46Z",
  "draft":false,
  "id":794763499,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYyMjIyOTIw",
  "number":677,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-28T15:35:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: include GitHub button in GitHub dropdown",
  "updated_at":"2021-01-28T15:35:21Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"A valid array raises `ArrowNotImplementedError` with the following Error during write of a parquet file:\r\n```python\r\n>>> import awkward as ak\r\n>>> import pyarrow as pa\r\n>>> (ak.__version__, pa.__version__)\r\n('1.0.2', '2.0.0')\r\n>>> ak.is_valid(array)\r\nTrue\r\n>>> ak.to_parquet(array, 'out.parquet')\r\nArrowNotImplementedError: Lists with non-zero length null components are not supported\r\n```\r\nNot sure if it is an upstream bug. Maybe related to [ARROW-1644](https://issues.apache.org/jira/browse/ARROW-1644)?\r\nIt does seem to be related to how the array is constructed though.\r\n\r\nA round trip over pandas works while a pure arrow export raises the same error:\r\n```python\r\n>>> pa.Table.to_pandas(ak.to_arrow_table(array)).to_parquet('out.parquet')\r\n>>> ak.is_valid(ak.from_parquet('out.parquet'))\r\nTrue\r\n>>> pa.parquet.write_table(ak.to_arrow_table(array), 'out.parquet')\r\n/lib/python3.8/site-packages/pyarrow/parquet.py in write_table(self, table, row_group_size)\r\n    589             raise ValueError(msg)\r\n    590 \r\n--> 591         self.writer.write_table(table, row_group_size=row_group_size)\r\nArrowNotImplementedError: Lists with non-zero length null components are not supported\r\n```\r\n\r\nI will update data as soon as I can reproduce the issue with a sample array.",
  "closed_at":"2021-02-10T15:27:33Z",
  "comments":3,
  "created_at":"2021-01-27T10:16:48Z",
  "id":794963845,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3OTQ5NjM4NDU=",
  "number":678,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ArrowNotImplementedError when writing to_parquet()",
  "updated_at":"2021-02-10T15:32:39Z",
  "user":"MDQ6VXNlcjI1ODgzNjA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"This issue is originating from the usage of Coffea's NanoEvents. It is a RecoardArray of large RecordArrays, which really need lazy loading.\r\n\r\nWhen masking the array, after done some other operations, it loads the data of a large number of fields. There seems to be no need to load these fields and it takes very long in case of NanoEvents.\r\n\r\n  <details>\r\n    <summary>Simplified example source code</summary>\r\n    <!-- have to be followed by an empty line! -->\r\n\r\n```python\r\n\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\nclass Map(dict):\r\n    def __getitem__(self, key):\r\n        print(f\"Loading {key}\")\r\n        return dict.__getitem__(self, key)\r\n\r\nlength = 500\r\nform = {\r\n 'class': 'RecordArray',\r\n 'contents': {'run': {'class': 'NumpyArray',\r\n                      'form_key': 'loads_very_slowly',\r\n                      'format': 'I',\r\n                      'has_identities': False,\r\n                      'inner_shape': [],\r\n                      'itemsize': 4,\r\n                      'parameters': {},\r\n                      'primitive': 'uint32'}},\r\n 'form_key': '',\r\n 'parameters': {}}\r\n\r\ncontainer = Map({\r\n    \"part0-loads_very_slowly-data\": np.ones(length, dtype=np.int32)})\r\ndata = ak.from_buffers(form, length, container, lazy=True)\r\n\r\nmask = np.full(len(data), True)\r\nmask[0] = False\r\ndata = data[mask]\r\nlength = len(data)\r\n\r\ndata[\"test\"] = 1\r\nprint(\"Calling ak.mask\")\r\nak.mask(data, np.full(length, True))\r\n\r\n```\r\n  </details>\r\n\r\nIn the example, `ak.mask` will make `run` being loaded, even though this doesn't seem to be necessary. It is not loaded unless the masking and item setting is done. This behavior currently stops me from using `ak.mask` together with NanoEvents.",
  "closed_at":"2021-01-27T18:27:38Z",
  "comments":1,
  "created_at":"2021-01-27T16:49:01Z",
  "id":795268689,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3OTUyNjg2ODk=",
  "number":679,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Masking virtual array makes it load",
  "updated_at":"2021-01-27T18:27:38Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This was inspired by, and fixes, #679.",
  "closed_at":"2021-01-27T18:27:38Z",
  "comments":0,
  "created_at":"2021-01-27T17:23:20Z",
  "draft":false,
  "id":795295584,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYyNjY4MjM4",
  "number":680,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-27T18:27:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove right-broadcasting from most uses of 'broadcast_and_apply'. It's almost never what people want, and we're only obliged to maintain it in functions that generalize NumPy (like ufuncs and 'ak.where').",
  "updated_at":"2021-01-27T18:27:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Starting to work on flake8 issues; this one was the most worrisome, since the five tests these shadow were never run. I'll add flake8 to pre-commit once I've fixed the issues, this one (since it runs new tests) deserved to be it's own cherry-picked PR.\r\n\r\nAccidentally included black fixes from #652.",
  "closed_at":"2021-01-27T23:17:25Z",
  "comments":5,
  "created_at":"2021-01-27T20:34:39Z",
  "draft":false,
  "id":795424262,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYyNzc0MzAy",
  "number":681,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-27T23:17:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: flake8 F811",
  "updated_at":"2021-01-27T23:17:35Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"B015 Pointless comparison. This comparison does nothing but wastes CPU instructions. Remove it.\r\n\r\nThis is a followup to #681; this time fixing a warning from one of my favorite flake8 extensions, bugbear. The warning (above) tells you to remove pointless comparisons, but 95% of the time, such as all the cases here, they tend to be missed asserts in PyTest.",
  "closed_at":"2021-01-28T15:27:48Z",
  "comments":5,
  "created_at":"2021-01-28T02:19:05Z",
  "draft":false,
  "id":795607268,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYyOTI3NDA2",
  "number":682,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-28T15:27:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"tests: fix B015",
  "updated_at":"2021-01-28T15:27:48Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Pulling out some static info into setup.cfg. Partially automated via a tool I'm working on, also contains the following changes:\r\n\r\n* Find package refactored just a bit\r\n* I've dropped the deprecated test_requires / test suite stuff.\r\n* Fiddled with the URLs a bit\r\n* Put the standard \"Scikit-HEP\" for the maintainers\r\n* Fixed pins so Awkward supports building on macOS 11 (Intel) now",
  "closed_at":"2021-01-29T00:53:30Z",
  "comments":3,
  "created_at":"2021-01-28T03:19:39Z",
  "draft":false,
  "id":795630530,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYyOTQ2MjAy",
  "number":683,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-29T00:53:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: pulling static info into setup.cfg",
  "updated_at":"2021-01-29T00:53:54Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Thanks, @reikdas!",
  "closed_at":"2021-01-28T13:17:55Z",
  "comments":0,
  "created_at":"2021-01-28T13:08:35Z",
  "draft":false,
  "id":795989553,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYzMjQ0OTUy",
  "number":684,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-28T13:17:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"UnknownType documentation had a copy-paste error; fixed now.",
  "updated_at":"2021-01-28T13:17:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Each fix is a commit, which the full error message from the check fixed.\r\n\r\nThis now includes the pre-commit flake8 check; it checks the last few items as well, #682 and #681. I've disabled quite a few checks, but hopefully over time we'll turn them back on; each disabled check has a note in the cfg.\r\n\r\nHave all committers had a chance to play with pre-commit? I can turn on checking in CI once I'm pretty sure everyone is able to run locally, as I think it's a good skill to have before letting CI help with it. @ianna @reikdas @trickarcher \r\n\r\nCan be rebased and merged or squashed and merged, flake8 needs hand fixes, so not `style:` commits.",
  "closed_at":"2021-01-28T20:12:16Z",
  "comments":9,
  "created_at":"2021-01-28T16:27:24Z",
  "draft":false,
  "id":796159449,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTYzMzg0NDgz",
  "number":685,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-28T20:12:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: flake8",
  "updated_at":"2021-01-28T20:30:09Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"```python\r\nimport awkward as ak\r\narr = ak.layout.IndexedArray64(ak.layout.Index64([]), ak.layout.NumpyArray([1,2,3]))\r\nak.argsort(arr)\r\n```\r\n will exit Python with the message `Segmentation fault`.\r\nTested on awkward version 1.0.2 and git main.",
  "closed_at":"2021-01-29T18:28:58Z",
  "comments":1,
  "created_at":"2021-01-29T15:57:33Z",
  "id":796993492,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3OTY5OTM0OTI=",
  "number":686,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Segmentation fault from argsort and sort",
  "updated_at":"2021-01-29T18:28:58Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"adresses https://github.com/scikit-hep/awkward-1.0/issues/686\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> arr = ak.layout.IndexedArray64(ak.layout.Index64([]), ak.layout.NumpyArray([1,2,3]))\r\n>>> ak.argsort(arr)\r\n<Array [] type='0 * int64'>\r\n>>> ak.sort(arr)\r\n<Array [] type='0 * int64'>\r\n>>> \r\n\r\n```",
  "closed_at":"2021-01-29T18:28:58Z",
  "comments":5,
  "created_at":"2021-01-29T16:46:36Z",
  "draft":false,
  "id":797029041,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY0MTA2MDU2",
  "number":687,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-29T18:28:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"check content length before arg/sorting",
  "updated_at":"2021-01-29T18:29:02Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-01-30T05:49:57Z",
  "comments":1,
  "created_at":"2021-01-29T23:14:40Z",
  "draft":false,
  "id":797265344,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY0MzA0Njg1",
  "number":688,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-01-30T05:49:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Give lazy Parquet files information about their Forms.",
  "updated_at":"2021-01-30T05:49:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Example\r\n```python\r\n>>> import numpy as np\r\n>>> import awkward as ak\r\n>>> ak.Array([[1,2],[3,4]])[[True, False], 0].ndim\r\n1\r\n>>> ak.Array([[1,2],[3,4]])[[False, False], 0].ndim\r\n2\r\n>>> ak.Array([[1,2],[3,4]])[[False, False]][:, 0].ndim\r\n1\r\n>>> np.array([[1,2],[3,4]])[[False, False], 0].ndim\r\n1\r\n```\r\nIn this example the dimensionality of the result is 2 only in the second case, but in all others it's 1. I believe the dimensionality should be 1 in all cases. I can not see a reason why one would need to check if the mask for the first axis is zero everywhere and handle this case separately.\r\nTested on current git main (1.1.0rc1).",
  "closed_at":"2021-02-01T20:47:58Z",
  "comments":1,
  "created_at":"2021-02-01T12:49:28Z",
  "id":798319983,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3OTgzMTk5ODM=",
  "number":689,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Inconsistent dimensionality when slicing muiltple axes",
  "updated_at":"2021-02-01T20:47:58Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - here is a small fix based on the time profiler report. The following test shows `5%` improvement :-)\r\n\r\nPerhaps, it's not the most representative test. However, it looks like moving away from using a `shared_ptr` and replacing it with a `unique_ptr` could speed it up significantly. The `shared_ptr` destructor accounts for around `6%` in `ArrayBuilder::field_check()` and around `2%` in every other `ArrayBuilder` method: `integer()`, `real()`, `boolean()`, `beginrecord()`, `endrecord()`.\r\n\r\n```c++\r\nak::ArrayBuilder myarray(ak::ArrayBuilderOptions(1024, 2.0));\r\n\r\n  for (int64_t i = 0; i < 10000000; i++) {\r\n\r\n    // populate builder with lists\r\n    myarray.beginrecord();\r\n    myarray.field_check(\"one\");\r\n    myarray.boolean(true);\r\n    myarray.field_check(\"two\");\r\n    myarray.integer(1);\r\n    myarray.field_check(\"three\");\r\n    myarray.real(1.1);\r\n    myarray.endrecord();\r\n\r\n    myarray.beginrecord();\r\n    myarray.field_check(\"one\");\r\n    myarray.boolean(false);\r\n    myarray.field_check(\"two\");\r\n    myarray.integer(2);\r\n    myarray.field_check(\"three\");\r\n    myarray.real(2.2);\r\n    myarray.endrecord();\r\n\r\n    myarray.beginrecord();\r\n    myarray.field_check(\"one\");\r\n    myarray.boolean(true);\r\n    myarray.field_check(\"two\");\r\n    myarray.integer(3);\r\n    myarray.field_check(\"three\");\r\n    myarray.real(3.3);\r\n    myarray.endrecord();\r\n  }\r\n  // take a snapshot\r\n  std::shared_ptr<ak::Content> array = myarray.snapshot();\r\n```\r\nHere is the report before the PR that showed that around 5% was spent in retrieving a key container size:\r\n<img width=\"879\" alt=\"Screenshot 2021-02-01 at 15 59 49\" src=\"https://user-images.githubusercontent.com/1390682/106478580-a1b24e80-64a9-11eb-80f6-a68391e4f950.png\">\r\n\r\nHere is the result with this PR:\r\n<img width=\"884\" alt=\"Screenshot 2021-02-01 at 16 29 11\" src=\"https://user-images.githubusercontent.com/1390682/106479630-d2df4e80-64aa-11eb-9a56-00f06a0c56fc.png\">\r\n",
  "closed_at":"2021-02-23T15:50:51Z",
  "comments":2,
  "created_at":"2021-02-01T15:56:23Z",
  "draft":false,
  "id":798482752,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY1MjkyMjcz",
  "number":690,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-23T15:50:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"array builder time profiler study",
  "updated_at":"2021-02-23T15:50:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-01T20:47:58Z",
  "comments":0,
  "created_at":"2021-02-01T18:56:10Z",
  "draft":false,
  "id":798621808,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY1NDA2MTM5",
  "number":691,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-01T20:47:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #689, the dimension of arrays returned by empty slices.",
  "updated_at":"2021-02-01T20:48:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"It shouldn't return a zero-length array of dimension `1`; it should return a zero-length array of dimension `n - 1` where `n` is the dimension of `this`.\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/1bfa9c60ba59d6e549011b287ebbcb49bebe5840/src/libawkward/array/NumpyArray.cpp#L1092-L1110\r\n\r\nI noticed this in #689 but forgot to fix it.",
  "closed_at":"2021-02-17T20:47:01Z",
  "comments":1,
  "created_at":"2021-02-01T20:30:38Z",
  "id":798685292,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3OTg2ODUyOTI=",
  "number":692,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Remember: NumpyArray::getitem_nothing is wrong",
  "updated_at":"2021-02-17T20:47:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-02T16:01:08Z",
  "comments":0,
  "created_at":"2021-02-01T20:50:55Z",
  "draft":false,
  "id":798697705,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY1NDY4ODI0",
  "number":693,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-02T16:01:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes for SciPy 2021 prep.",
  "updated_at":"2021-02-02T16:01:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-02T08:48:13Z",
  "comments":0,
  "created_at":"2021-02-02T06:35:18Z",
  "draft":false,
  "id":798980136,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY1NzAzMTk3",
  "number":694,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-02T08:48:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"SliceVarNewAxis",
  "updated_at":"2021-02-02T08:48:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - yes, it was observed both in C++ and in Python:\r\n```python\r\n>>> import awkward as ak\r\n>>> a = ak.layout.ArrayBuilder()\r\n>>> a.begintuple(2)\r\n>>> a.index(2)\r\n>>> a.boolean(True)\r\nzsh: segmentation fault  python\r\n```\r\nnow is fixed with \"an out of bounds\" message:\r\n```python\r\n>>> import awkward as ak\r\n>>> a = ak.layout.ArrayBuilder()\r\n>>> a.begintuple(2)\r\n>>> a.index(2)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nValueError: 'index' 2 is out of bounds for a tuple with number of fields 2\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.1.0rc2/src/libawkward/builder/TupleBuilder.cpp#L307)\r\n\r\n```",
  "closed_at":"2021-02-02T15:58:39Z",
  "comments":0,
  "created_at":"2021-02-02T15:01:50Z",
  "draft":false,
  "id":799360674,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY2MDE2NjE0",
  "number":697,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-02T15:58:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"check for an out of bounds index in a tuple builder",
  "updated_at":"2021-02-02T15:58:42Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This has been documented with warnings since PR #592 (December 11, 2020, [1.0.1rc2](https://github.com/scikit-hep/awkward-1.0/releases/tag/1.0.1rc2)) and it's on the [Roadmap](https://github.com/scikit-hep/awkward-1.0#roadmap).",
  "closed_at":"2021-02-02T17:44:57Z",
  "comments":0,
  "created_at":"2021-02-02T16:13:39Z",
  "draft":false,
  "id":799424613,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY2MDY5MjEz",
  "number":698,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-02T17:44:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove ak.*_arrayset functions in preparation for 1.1.0.",
  "updated_at":"2021-02-02T17:45:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-05T00:41:10Z",
  "comments":0,
  "created_at":"2021-02-02T19:35:24Z",
  "draft":false,
  "id":799612042,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY2MjI4ODgz",
  "number":699,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-05T00:41:10Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixing more bugs revealed by prepping for SciPy.",
  "updated_at":"2021-02-05T00:41:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"This came up while using `uproot.lazy()`:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.0.2'\r\n>>> import uproot\r\n>>> ak.to_arrow(uproot.lazy('file.root'))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/miniconda3/envs/iris-hep/lib/python3.9/site-packages/awkward/operations/convert.py\", line 2226, in to_arrow\r\n    return recurse(layout, None, False)\r\n  File \"/home/user/miniconda3/envs/iris-hep/lib/python3.9/site-packages/awkward/operations/convert.py\", line 2221, in recurse\r\n    raise TypeError(\r\nTypeError: unrecognized array type: <IrregularlyPartitionedArray>\r\n```",
  "closed_at":"2021-02-05T00:40:46Z",
  "comments":1,
  "created_at":"2021-02-04T22:04:04Z",
  "id":801669956,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDE2Njk5NTY=",
  "number":702,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"to_arrow() fails with IrregularlyPartitionedArrays",
  "updated_at":"2021-02-05T00:40:46Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-05T00:40:46Z",
  "comments":0,
  "created_at":"2021-02-05T00:01:27Z",
  "draft":false,
  "id":801727071,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY3OTkyNTI3",
  "number":703,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-05T00:40:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed #702, 'ak.to_arrow' with PartitionedArrays.",
  "updated_at":"2021-02-05T00:40:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"The page https://awkward-array.org/how-to-restructure-flatten.html looks like it should explain exactly what I need, but it is empty so far. Hence this issue.",
  "closed_at":"2021-06-18T18:32:32Z",
  "comments":3,
  "created_at":"2021-02-05T15:47:56Z",
  "id":802271546,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDIyNzE1NDY=",
  "number":704,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"How to flatten awkward arrays (e.g. for plotting)",
  "updated_at":"2021-06-18T18:32:32Z",
  "user":"MDQ6VXNlcjU4ODQwNjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hello, I think there is a bug when trying to slice an awkward array with python 2.7:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\nu'1.0.2'\r\n>>> a = ak.Array([[1,2],[3]])\r\n>>> a\r\n<Array [[1, 2], [3]] type='2 * var * int64'>\r\n>>> a[...]\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/koch/Projekte/histoprint/env27/local/lib/python2.7/site-packages/awkward/highlevel.py\", line 1005, in __getitem__\r\n    return ak._util.wrap(self._layout[where], self._behavior)\r\nValueError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`), and integer or boolean arrays (possibly jagged) are valid indices\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.0.2/src/python/content.cpp#L666)\r\n```\r\n\r\nWhen I try the same with Python 3.7 it works:\r\n\r\n```python\r\n>>> a[...]\r\n<Array [[1, 2], [3]] type='2 * var * int64'>\r\n```\r\n\r\nOther slices work, so I suspect it does not like the ellipsis.",
  "closed_at":"2021-02-06T00:28:54Z",
  "comments":1,
  "created_at":"2021-02-05T19:06:38Z",
  "id":802405208,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDI0MDUyMDg=",
  "number":705,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Slicing awkward array does not work correctly with Python 2.7",
  "updated_at":"2021-02-06T00:28:54Z",
  "user":"MDQ6VXNlcjU4ODQwNjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-05T23:24:33Z",
  "comments":0,
  "created_at":"2021-02-05T19:39:21Z",
  "draft":false,
  "id":802424579,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY4NTY5OTgx",
  "number":706,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-05T23:24:33Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Read and write Parquet datasets (sets of files).",
  "updated_at":"2021-02-05T23:24:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-06T00:28:54Z",
  "comments":0,
  "created_at":"2021-02-05T23:24:46Z",
  "draft":false,
  "id":802538660,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY4NjY0ODU3",
  "number":707,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-06T00:28:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Python 2 can use ellipsis now.",
  "updated_at":"2021-02-06T00:28:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hi,\r\n\r\nI'm using Python 3.7.3 and awkward 1.0.2 and I see that `ak.singletons()` only adds a dimension when there is a missing element. E.g.,\r\n```python\r\nak.singletons([2,0,1])\r\n# <Array [2, 0, 1] type='3 * int64'>\r\nak.singletons([2,None,1])\r\n# <Array [[2], [], [1]] type='3 * var * int64'>\r\n```\r\nwhich means I have two cases to deal with when using one array as an index for another. \r\n\r\nThe first case (which doesn't give me my desired output) where the first array has inner arrays of size at least 1 (and thus each value in the second index array is defined):\r\n```python\r\nvals = ak.Array([[43, 15, 10.5], [11.5], [50, 5]])\r\nidx = ak.Array([2, 0, 1])\r\nvals[ak.singletons(idx)]\r\n# <Array [[50, 5], [43, 15, 10.5], [11.5]] type='3 * var * float64\r\n# but I was expecting to get [[10.5],[11.5],[5]]\r\n```\r\nAnd another case (which does give me my desired output) where the first array has at least one empty inner array (and thus at least one missing element in the indexing array):\r\n```python\r\nvals = ak.Array([[43, 15, 10.5], [], [50, 5]])\r\nidx = ak.Array([2, None, 1])\r\nvals[ak.singletons(idx)]\r\n# <Array [[10.5], [], [5]] type='3 * var * float64'>\r\n```\r\nIs this intended? If so, is there a more awkward-like way of doing `vals[idx]`?\r\n\r\nThanks!",
  "closed_at":"2021-02-06T20:13:21Z",
  "comments":3,
  "created_at":"2021-02-06T05:49:23Z",
  "id":802618774,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDI2MTg3NzQ=",
  "number":708,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.singletons not wrapping some arrays",
  "updated_at":"2021-02-06T20:13:22Z",
  "user":"MDQ6VXNlcjU3NjAwMjc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-08T19:52:53Z",
  "comments":0,
  "created_at":"2021-02-06T19:34:29Z",
  "draft":false,
  "id":802773636,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY4ODQwMTE4",
  "number":709,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-08T19:52:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ARROW-10930 has been fixed, and we depend on it in the new Parquet-handling code, so the minimum Arrow is now 3.0.",
  "updated_at":"2021-02-08T19:52:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The array builder type is known at compile time. \r\nA given primitive type array builder accepts only its own type.\r\nFor example:\r\n```c++\r\n  auto options = ak::ArrayBuilderOptions(1024, 2.0);\r\n  auto bool_builder = ak::BoolTypedBuilder(options, ak::GrowableBuffer<uint8_t>::empty(options));\r\n  auto int_builder = ak::Int64TypedBuilder(options, ak::GrowableBuffer<int64_t>::empty(options));\r\n\r\n  integer(bool_builder, 1);\r\n  integer(int_builder, 1);\r\n\r\n  boolean(bool_builder, true);\r\n  boolean(int_builder, true);\r\n\r\n  std::shared_ptr<ak::Content> bool_array = bool_builder.snapshot();\r\n  std::shared_ptr<ak::Content> int_array = int_builder.snapshot();\r\n\r\n  std::cout << bool_array.get()->tostring() << \"\\n\";\r\n  std::cout << int_array.get()->tostring() << \"\\n\";\r\n\r\n```\r\n```log\r\nBoolTypedBuilder does not have \"integer\" method\r\nInt64TypedBuilder does not have \"boolean\" method\r\n<NumpyArray format=\"?\" shape=\"1\" data=\"true\" at=\"0x7fa9a9808800\"/>\r\n<NumpyArray format=\"l\" shape=\"1\" data=\"1\" at=\"0x7fa9a9808c00\"/>\r\n```\r\nor\r\n```c++\r\n  auto myarray = ak::TypedArrayBuilder<uint8_t, ak::BoolTypedBuilder>(ak::ArrayBuilderOptions(1024, 2.0));\r\n\r\n  myarray.boolean(true);\r\n  myarray.boolean(false);\r\n  myarray.boolean(true);\r\n  myarray.boolean(false);\r\n  myarray.boolean(true);\r\n  myarray.boolean(false);\r\n  myarray.integer(1);\r\n  myarray.real(1.1);\r\n  myarray.null();\r\n  myarray.boolean(false);\r\n\r\n  std::cout << myarray.snapshot().get()->tostring() << \"\\n\";\r\n\r\n```\r\n\r\n```log\r\nBoolTypedBuilder does not have \"integer\" method\r\nBoolTypedBuilder does not have \"real\" method\r\nBoolTypedBuilder does not have \"null\" method\r\n<NumpyArray format=\"?\" shape=\"7\" data=\"true false true false true false false\" at=\"0x7fa9a980bc00\"/>\r\n```",
  "closed_at":"2021-02-09T21:35:32Z",
  "comments":2,
  "created_at":"2021-02-08T12:09:46Z",
  "draft":true,
  "id":803504360,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY5NDIyOTc3",
  "number":711,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"test typed array builder prototype",
  "updated_at":"2021-11-12T14:51:25Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"I've encountered two (possibly related) bugs when using negative axis indices in local_index (with awkward version 1.1.0rc2). The first is that `ak.local_index(jets, axis=-1)`, where \"jets\" comes from the coffea Nanoevents schema, gives an error:\r\n`*** ValueError: axis == -1 exceeds the min depth == 1 of this array`\r\nHowever `ak.local_index(jets, axis=1)` and `ak.local_index(jets.pt, axis=-1)` both work and give the same output as I would expect from `ak.local_index(jets, axis=-1)`.  I wasn't able to directly reproduce this problem outside of a coffea processor, as it didn't seem to occur for simpler classes like lorentz vectors. If you think this actually a problem with coffea's Nanoevents rather than an awkard problem I can make an issue there.\r\n\r\nThe second issue, which I found while trying to reproduce the first, is that for an array containing only strings, local index seems to find another axis:\r\n```\r\n>>> arr = ak.from_iter([[\"a\", \"b\", \"c\"], [], [\"d\", \"e\"]])\r\n>>> ak.local_index(arr, axis=-1)\r\n<Array [[[0], [0], [0]], [], [[0], [0]]] type='3 * var * var * int64'>\r\n>>> ak.local_index(arr, axis=-2)\r\n<Array [[0, 1, 2], [], [0, 1]] type='3 * var * int64'>\r\n```\r\nIf the array is made of integers, the output is what I would expect:\r\n```\r\n>>> arr = ak.from_iter([[1, 2, 3], [], [4, 5]])\r\n>>> ak.local_index(arr, axis=-1)\r\n<Array [[0, 1, 2], [], [0, 1]] type='3 * var * int64'>\r\n```\r\nAnd if I mix ints and strings, I get the same error as for the jets:\r\n```\r\n>>> arr = ak.from_iter([[\"a\", \"b\", \"c\"], [], [\"d\", 1]])\r\n>>> ak.local_index(arr, axis=-1)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/afs/desy.de/user/s/stafford/.local/lib/python3.8/site-packages/awkward/operations/structure.py\", line 1771, in local_index\r\n    out = layout.localindex(axis)\r\nValueError: axis == -1 exceeds the min depth == 1 of this array\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.1.0rc2/src/libawkward/Content.cpp#L1708)\r\n```\r\n\r\nThanks,\r\n\r\nDominic",
  "closed_at":"2021-02-09T16:28:38Z",
  "comments":3,
  "created_at":"2021-02-08T12:19:53Z",
  "id":803511971,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDM1MTE5NzE=",
  "number":712,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Isues with negative axis indices in local_index",
  "updated_at":"2021-02-09T16:29:58Z",
  "user":"MDQ6VXNlcjYwMjkyMjQ3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Using awkward version 1.1.0rc2, I managed to create an array where some entries were None, but `ak.is_none` returned False for these entries:\r\n```\r\n>>> arr = ak.Array({\"a\": [1, 2], \"b\":[1, None]})\r\n>>> arr = ak.mask(arr, [True, True])\r\n>>> ak.is_none(arr.b)\r\n<Array [False, False] type='2 * bool'>\r\n```\r\nThe problem appears to come from the fact that arr.b is now doubly masked:\r\n```\r\n>>> arr.b.layout\r\n<ByteMaskedArray valid_when=\"true\">\r\n    <mask><Index8 i=\"[1 1]\" offset=\"0\" length=\"2\" at=\"0x000002b93290\"/></mask>\r\n    <content><IndexedOptionArray64>\r\n        <index><Index64 i=\"[0 -1]\" offset=\"0\" length=\"2\" at=\"0x000002b98c30\"/></index>\r\n        <content><NumpyArray format=\"l\" shape=\"1\" data=\"1\" at=\"0x000002b96c20\"/></content>\r\n    </IndexedOptionArray64></content>\r\n</ByteMaskedArray>\r\n```\r\nwhich doesn't seem to be possible in simpler cases, so perhaps this is the issue that needs to be solved:\r\n```\r\n>>> arr=ak.Array([1, None])\r\n>>> arr = ak.mask(arr, [True, True])\r\n>>> arr.layout\r\n<IndexedOptionArray64>\r\n    <index><Index64 i=\"[0 -1]\" offset=\"0\" length=\"2\" at=\"0x000002a1f190\"/></index>\r\n    <content><NumpyArray format=\"l\" shape=\"1\" data=\"1\" at=\"0x000002b5a8e0\"/></content>\r\n</IndexedOptionArray64>\r\n>>> ak.is_none(arr)\r\n<Array [False, True] type='2 * bool'>\r\n```\r\n\r\nThanks\r\n\r\nDominic",
  "closed_at":"2021-02-08T19:53:13Z",
  "comments":3,
  "created_at":"2021-02-08T16:12:44Z",
  "id":803706118,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDM3MDYxMTg=",
  "number":713,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.is_none doesn't work for doubly masked arrays",
  "updated_at":"2021-02-09T11:07:54Z",
  "user":"MDQ6VXNlcjYwMjkyMjQ3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-08T19:53:13Z",
  "comments":0,
  "created_at":"2021-02-08T18:52:16Z",
  "draft":false,
  "id":803832135,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTY5Njk0Mzk4",
  "number":714,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-08T19:53:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"getitem_field should simplify_optiontype (for option-type arrays).",
  "updated_at":"2021-02-08T19:53:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Currently the resulting array of `ak.zip` has the behavior of the inputs. However often `ak.zip` is used to construct a (highlevel) record array with some particular name from (lowlevel) basic lists or numpy arrays and thus the result is lacking behavior. Creating awkward arrays with a particular behavior of the inputs before calling `ak.zip` is inconvenient.\r\nThus it would be nice of `ak.zip` takes an optional parameter `behavior` that, if given, is used for the behavior of the result.",
  "closed_at":"2021-02-09T18:17:41Z",
  "comments":1,
  "created_at":"2021-02-09T13:26:59Z",
  "id":804550088,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDQ1NTAwODg=",
  "number":715,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add behavior parameter to ak.zip",
  "updated_at":"2021-02-09T18:17:41Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-09T18:17:41Z",
  "comments":0,
  "created_at":"2021-02-09T17:27:33Z",
  "draft":false,
  "id":804756461,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcwNDcxMDkw",
  "number":717,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-09T18:17:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Every function with 'highlevel=True' gets 'behavior=None', which overrides behaviors from the input arrays. Also dropped 'ak.is_unique' because it isn't a well-designed high-level function.",
  "updated_at":"2021-02-09T18:17:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Trying to slice an array with None to create a new axis produces an error in awkward 1.1.0rc5:\r\n```\r\n>>> arr = ak.Array([1, 2, 3])\r\n>>> arr[:, None]\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/afs/desy.de/user/s/stafford/.local/lib/python3.8/site-packages/awkward/highlevel.py\", line 1007, in __getitem__\r\n    return ak._util.wrap(self._layout[where], self._behavior)\r\nValueError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`), and integer or boolean arrays (possibly jagged) are valid indices\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.1.0rc5/src/python/content.cpp#L669)\r\n```\r\n\r\nThank you\r\n\r\nDominic",
  "closed_at":"2021-02-09T18:30:29Z",
  "comments":4,
  "created_at":"2021-02-09T17:55:42Z",
  "id":804780469,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDQ3ODA0Njk=",
  "number":718,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Slices containing None don't seem to work",
  "updated_at":"2021-02-09T18:41:50Z",
  "user":"MDQ6VXNlcjYwMjkyMjQ3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Uproot tests caught an Awkward bug. From now on, Uproot is going to test against Awkward release candidates, and I recommend that for other Awkward dependencies.",
  "closed_at":"2021-02-09T20:13:56Z",
  "comments":0,
  "created_at":"2021-02-09T19:26:31Z",
  "draft":false,
  "id":804852115,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcwNTUyMTc5",
  "number":719,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-09T20:13:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Prevent nullptr in PyArrayGenerator::caches.",
  "updated_at":"2021-02-09T20:13:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Following guidelines here: https://scikit-hep.org/developer/style#check-manifest \n",
  "closed_at":"2021-02-09T23:48:00Z",
  "comments":9,
  "created_at":"2021-02-09T21:32:02Z",
  "draft":false,
  "id":804940640,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcwNjI3MDAz",
  "number":720,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-09T23:48:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: add missing files to the manifest, include a check",
  "updated_at":"2021-02-09T23:48:00Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"```python\r\n>>> content = ak.repartition(range(10), 3)\r\n>>> counts = ak.Array([3, 0, 2, 4, 1])\r\n>>> ak.unflatten(content, counts)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/operations/structure.py\", line 1751, in unflatten\r\n    out = ak.layout.ListOffsetArray64(offsets, layout)\r\nValueError: content argument must be a Content subtype\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.1.0/src/python/content.cpp#L318)\r\n>>> ak.unflatten(ak.repartition(content, None), counts)\r\n<Array [[0, 1, 2], [], ... [5, 6, 7, 8], [9]] type='5 * var * int64'>\r\n```",
  "closed_at":"2021-02-12T01:38:47Z",
  "comments":0,
  "created_at":"2021-02-09T23:38:58Z",
  "id":805017271,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDUwMTcyNzE=",
  "number":721,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.unflatten is broken for partitioned arrays",
  "updated_at":"2021-02-12T01:38:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Even if it's not allowed, it shouldn't return _this_ error:\r\n\r\n```python\r\n>>> ak.concatenate([ak.Array([[1, 2, 3], [], [4, 5]]), ak.Array([100, 200, 300])], axis=1)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/operations/structure.py\", line 1379, in concatenate\r\n    out = ak._util.broadcast_and_apply(\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_util.py\", line 1026, in broadcast_and_apply\r\n    out = apply(broadcast_pack(inputs, isscalar), 0, user)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_util.py\", line 786, in apply\r\n    outcontent = apply(nextinputs, depth + 1, user)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_util.py\", line 838, in apply\r\n    outcontent = apply(nextinputs, depth + 1, user)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_util.py\", line 974, in apply\r\n    raise ValueError(\r\nValueError: cannot broadcast: <class 'awkward._ext.NumpyArray'>, <class 'awkward._ext.NumpyArray'>\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.1.0/src/awkward/_util.py#L976)\r\n```",
  "closed_at":"2021-02-17T21:39:27Z",
  "comments":0,
  "created_at":"2021-02-09T23:41:07Z",
  "id":805018260,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDUwMTgyNjA=",
  "number":722,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Concatenation of arrays with different dimensions at axis=1",
  "updated_at":"2021-02-17T21:39:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\na = ak.layout.NumpyArray(np.empty(122))\r\nidx = ak.layout.Index64([0, 2, 4, 6, 8, 10, 12])\r\na = ak.layout.ListOffsetArray64(idx, a)\r\nidx = ak.layout.Index64([0, -1, 1, 2, -1, 3, 4, 5])\r\na = ak.layout.IndexedOptionArray64(idx, a)\r\na = ak.Array(a)\r\na[[[0], None]]\r\n```\r\nThe last line causes a `MemoryError: std::bad_alloc` to be raised. Occasionally (randomly) it raises a `ValueError` instead reading something like `in ListArray64 attempting to get 875985249, jagged slice's offsets extend beyond its content`.\r\n\r\nTested with awkward version 1.1.1 and current git main.",
  "closed_at":"2021-02-10T20:36:00Z",
  "comments":4,
  "created_at":"2021-02-10T15:18:03Z",
  "id":805607371,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDU2MDczNzE=",
  "number":723,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"MemoryError: std::bad_alloc from masked slicing",
  "updated_at":"2021-02-11T15:06:12Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Using awkward version 1.1.1, I get a segmentation fault when running the following:\r\n```\r\nimport awkward as ak\r\nimport numpy as np\r\na = ak.layout.NumpyArray(np.empty(0))\r\nidx = ak.layout.Index64([]) \r\na = ak.layout.IndexedOptionArray64(idx, a)\r\nidx = ak.layout.Index64([0])\r\na = ak.layout.ListOffsetArray64(idx, a)\r\nidx = ak.layout.Index64([175990832])\r\na = ak.layout.ListOffsetArray64(idx, a)\r\nak.flatten(a, axis=2)\r\n```\r\nI'm not sure why, but this only occurs for sufficiently large values of the final index (though I haven't been able to quantify what the smallest \"sufficiently large\" value is- it's not something obvious like 2^16 or 2^32).\r\n\r\nThanks,\r\n\r\nDominic",
  "closed_at":"2021-02-10T21:20:41Z",
  "comments":0,
  "created_at":"2021-02-10T16:18:16Z",
  "id":805660408,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDU2NjA0MDg=",
  "number":724,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Seg fault when flattening empty array",
  "updated_at":"2021-02-10T21:20:41Z",
  "user":"MDQ6VXNlcjYwMjkyMjQ3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-10T20:36:00Z",
  "comments":0,
  "created_at":"2021-02-10T18:22:42Z",
  "draft":false,
  "id":805758108,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcxMzA2NzMx",
  "number":725,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-10T20:36:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Ensure that a jagged slice fits the array's length.",
  "updated_at":"2021-02-10T20:36:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-10T21:20:41Z",
  "comments":0,
  "created_at":"2021-02-10T20:35:05Z",
  "draft":false,
  "id":805851594,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcxMzg0NzYx",
  "number":726,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-10T21:20:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed #724, a segfault in ak.flatten.",
  "updated_at":"2021-02-10T21:20:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"I tried my luck with a partial fix as part of #674.\r\n\r\n- [x] 1. Validation of valid categorical arrays\r\n- [x] 2. fix minimization for ChunkedArray with categoricals using ak.from_arrow()\r\n- [x] 3. add parameter `__array__ = \"categorical\"` for option-typed categorical arrays\r\n- [x] 4. add tests\r\n\r\nFeedback very welcome.\r\n\r\nYou mentioned that it is purely on python level but I think the validation checks were C++ based. If I am mistaken please advise.",
  "closed_at":"2021-02-11T20:24:45Z",
  "comments":5,
  "created_at":"2021-02-10T21:54:25Z",
  "draft":false,
  "id":805905357,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcxNDI4Njk5",
  "number":727,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-11T20:24:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix some issues of categorical arrays",
  "updated_at":"2021-02-13T03:29:39Z",
  "user":"MDQ6VXNlcjI1ODgzNjA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is to avoid reading VirtualArrays from partitions that would be entirely cut out anyway (assuming that the partitioning correlates with the cut, as it does sometimes).",
  "closed_at":"2021-02-11T21:49:30Z",
  "comments":1,
  "created_at":"2021-02-11T00:53:30Z",
  "id":805997529,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDU5OTc1Mjk=",
  "number":728,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"When applying an array of booleans to a PartitionedArray, skip partitions that are all False",
  "updated_at":"2021-02-11T21:49:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This fixes the follow-up issue in #723.",
  "closed_at":"2021-02-11T15:45:04Z",
  "comments":0,
  "created_at":"2021-02-11T15:05:37Z",
  "draft":false,
  "id":806476089,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcxODg4MTU3",
  "number":729,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-11T15:45:04Z"
  },
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Only 'simplify'ed option-type and union-type arrays are now considered valid.",
  "updated_at":"2021-02-11T15:45:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"So that you don't have to do this:\r\n\r\n```python\r\nstructure = ak.Array([[0], [2, 1]])\r\ncounts0 = ak.num(structure)\r\ncounts1 = ak.flatten(structure)\r\nvalues = ak.Array([3,4,5])\r\narray = ak.unflatten(ak.unflatten(values, counts1), counts0)\r\n```\r\n\r\n(It also came up in the Million Song Dataset prep.)",
  "closed_at":"2021-02-11T23:45:08Z",
  "comments":3,
  "created_at":"2021-02-11T17:49:32Z",
  "id":806610252,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDY2MTAyNTI=",
  "number":730,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.unflatten should take an axis argument",
  "updated_at":"2021-02-11T23:45:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-11T23:45:08Z",
  "comments":0,
  "created_at":"2021-02-11T23:06:29Z",
  "draft":false,
  "id":806814704,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcyMTcwNjk1",
  "number":731,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-11T23:45:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add an 'axis' parameter to 'ak.unflatten'.",
  "updated_at":"2021-02-11T23:45:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-12T01:38:47Z",
  "comments":0,
  "created_at":"2021-02-12T00:27:23Z",
  "draft":false,
  "id":806853360,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcyMjAyNTkz",
  "number":732,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-12T01:38:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Allow 'ak.unflatten' to be used on PartitionedArrays.",
  "updated_at":"2021-02-12T01:38:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"You might be interested in this, @nsmith-.\r\n\r\nThis was motivated by trying to write example problems for the SciPy tutorials. The `ak.run_lengths` function is the reason `ak.unflatten` needed an `axis` parameter (PR #731).",
  "closed_at":"2021-02-12T03:55:38Z",
  "comments":0,
  "created_at":"2021-02-12T03:18:02Z",
  "draft":false,
  "id":806912421,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcyMjQ4NzU5",
  "number":733,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-12T03:55:38Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Implemented 'ak.run_lengths' to enable group-by operations.",
  "updated_at":"2021-02-12T03:55:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-12T18:32:27Z",
  "comments":0,
  "created_at":"2021-02-12T17:35:34Z",
  "draft":false,
  "id":807424220,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcyNjc3NDUz",
  "number":734,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-12T18:32:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implemented 'ak.strings_astype' to convert strings into numbers.",
  "updated_at":"2021-02-12T18:32:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-12T19:40:29Z",
  "comments":0,
  "created_at":"2021-02-12T19:03:12Z",
  "draft":false,
  "id":807475711,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcyNzIwMTM5",
  "number":735,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-12T19:40:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Allow ak.run_lengths to recognize strings as distinguishable values.",
  "updated_at":"2021-02-12T19:40:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-13T02:36:11Z",
  "comments":0,
  "created_at":"2021-02-12T20:03:58Z",
  "draft":false,
  "id":807512627,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcyNzUwMzE3",
  "number":736,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-13T02:36:11Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implement argsort for strings.",
  "updated_at":"2021-02-13T02:36:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"So like this:\r\n\r\n```python\r\n>>> ak.Array([\"one\", \"two\", \"three\"])\r\n<Array ['one', 'two', 'three'] type='3 * string'>\r\n>>> ak.Array([\"one\", \"two\", \"three\"]).layout.purelist_depth\r\n1\r\n>>> ak.Array([[\"one\", \"two\"], [\"three\"]]).layout.purelist_depth\r\n2\r\n>>> ak.Array([1, 2, 3]).layout.purelist_depth\r\n1\r\n>>> ak.Array([[1, 2], [3]]).layout.purelist_depth\r\n2\r\n```\r\n\r\nThe things that depend on it are exactly the things I'm working on now, so it's an issue that's just beginning to be relevant. Doing this later would be much harder.\r\n\r\n@Dominic-Stafford, this addresses the issue you raised in #716.",
  "closed_at":"2021-02-12T22:43:34Z",
  "comments":1,
  "created_at":"2021-02-12T21:59:02Z",
  "draft":false,
  "id":807573525,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcyNzk5Nzc4",
  "number":737,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-12T22:43:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Define the depth of an array of strings to be 1.",
  "updated_at":"2021-02-12T22:43:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @drahnreb as a contributor for code, test.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward-1.0/pull/727#issuecomment-778555262)",
  "closed_at":"2021-02-13T03:30:33Z",
  "comments":0,
  "created_at":"2021-02-13T03:29:36Z",
  "draft":false,
  "id":807665143,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTcyODc1MTA1",
  "number":738,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-13T03:30:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add drahnreb as a contributor",
  "updated_at":"2021-02-13T03:30:33Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hi,\r\n\r\n```python\r\nak.from_iter([np.array(1.)])\r\n```\r\n\r\nTo be honest I don't know if it should work or not but the error message is cryptic.\r\n\r\n```\r\nRuntimeError: Unable to cast Python instance to C++ type (compile in debug mode for details)\r\n```",
  "closed_at":"2021-02-17T20:41:23Z",
  "comments":1,
  "created_at":"2021-02-13T08:46:13Z",
  "id":807708033,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDc3MDgwMzM=",
  "number":740,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.from_iter should accept NumPy scalars as numbers",
  "updated_at":"2021-02-17T20:41:23Z",
  "user":"MDQ6VXNlcjMzMzc4MA=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hi :-)\r\n\r\n# Aim\r\nI would like to compute the median\r\n\r\n# What I tried\r\nI guess I should be able to do it using a combination of `ak.sort` and `ak.num` but I don't manage to do the indexing",
  "closed_at":null,
  "comments":2,
  "created_at":"2021-02-15T13:00:59Z",
  "id":808519785,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDg1MTk3ODU=",
  "number":741,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Median",
  "updated_at":"2021-02-16T08:05:46Z",
  "user":"MDQ6VXNlcjMzMzc4MA=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"```python\r\nimport awkward as ak\r\nak.unflatten(ak.Array([0,0,0]), ak.Array([1,2,0]))\r\n```\r\nRaises `ValueError: structure imposed by 'counts' does not fit in the array or partition at axis=0`",
  "closed_at":"2021-02-15T20:14:23Z",
  "comments":1,
  "created_at":"2021-02-15T15:02:07Z",
  "id":808609232,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MDg2MDkyMzI=",
  "number":742,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.unflatten raises ValueError if counts end with 0",
  "updated_at":"2021-02-15T20:14:23Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-15T20:14:23Z",
  "comments":0,
  "created_at":"2021-02-15T19:31:55Z",
  "draft":false,
  "id":808773490,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTczNzU0NzE4",
  "number":743,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-15T20:14:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ak.unflatten should include trailing zero-length counts in the array.",
  "updated_at":"2021-02-15T20:14:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Following the guide here https://awkward-array.org/how-to-convert-buffers.html it instructs to use `ak.to_buffers` in order to write HDF5 files. However, the output files can become unnecessary large very easily.\r\nPlease consider the following example\r\n```python\r\nimport numpy as np\r\nimport awkward as ak\r\narr = ak.Array({\"x\": np.random.rand(1000)})\r\nmask = [0, 2]\r\narr = arr[mask]\r\nform, length, container = ak.to_buffers(arr)\r\n```\r\n`container`, which will get saved to the file, contains an array of 1000 numbers, even though we only want 2 of them. It doesn't have to be 1000, in fact this number can be much larger.\r\nWhat I think would be very nice here is an option to have the container be restricted to only the data that is necessary. This could even be an additional function, condensing an awkward array so that it is compact in memory.\r\nI know that flattening can have a similar effect, but it doesn't work on arrays with records. Surprisingly doing something like `ak.from_array(ak.to_arrow(arr))` has the desired effect on the array. However, this seems to be a very crude workaround.",
  "closed_at":"2021-06-14T22:33:46Z",
  "comments":1,
  "created_at":"2021-02-17T15:35:16Z",
  "id":810291737,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MTAyOTE3Mzc=",
  "number":746,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"We need an ak.packed function",
  "updated_at":"2021-06-14T22:33:46Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Writing multiple row groups seems to work\r\n\r\n```pycon\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.2.0rc1'\r\n>>> array = ak.Array([1, 2, 3, 4, 5, 6, 7, 8])\r\n>>> ak.to_parquet(ak.repartition(array, 2), \"array.parquet\")\r\n>>> import pyarrow.parquet as pq\r\n>>> f = pq.ParquetFile(\"array.parquet\")\r\n>>> f.num_row_groups\r\n4\r\n```\r\n\r\nbut then restricting via the `row_groups` argument in `ak.from_parquet` seems to have no effect\r\n\r\n```pycon\r\n>>> ak.from_parquet(\"array.parquet\", row_groups=0)\r\n<Array [1, 2, 3, 4, 5, 6, 7, 8] type='8 * int64'>\r\n>>> ak.from_parquet(\"array.parquet\", row_groups=[0, 1])\r\n<Array [1, 2, 3, 4, 5, 6, 7, 8] type='8 * int64'>\r\n```\r\n",
  "closed_at":"2021-02-17T18:24:04Z",
  "comments":1,
  "created_at":"2021-02-17T16:29:16Z",
  "id":810338769,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MTAzMzg3Njk=",
  "number":747,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`row_groups` argument in `ak.from_parquet` seems to have no effect",
  "updated_at":"2021-02-17T18:24:04Z",
  "user":"MDQ6VXNlcjM3MDcyMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This fixes #747.",
  "closed_at":"2021-02-17T18:24:04Z",
  "comments":0,
  "created_at":"2021-02-17T17:46:21Z",
  "draft":false,
  "id":810400641,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc1MDk4NjU5",
  "number":748,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-17T18:24:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"I had somehow forgotten to handle 'row_groups' in 'ak.from_parquet'. Fixed now.",
  "updated_at":"2021-02-17T18:24:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"It would just pass through to [ak.to_numpy](https://awkward-array.readthedocs.io/en/latest/_auto/ak.to_numpy.html), but it's much more convenient if it's a method, both for typing and so that third party libraries can check for its existence and call it (without `import awkward`!). @tacaswell suggested this and pointed out that it's like Pandas:\r\n\r\nhttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_numpy.html#pandas-dataframe-to-numpy\r\n\r\nand almost like xarray:\r\n\r\nhttp://xarray.pydata.org/en/stable/generated/xarray.Dataset.to_array.html#xarray-dataset-to-array\r\n\r\n(which is unfortunately spelled differently: `to_numpy` vs `to_array`; I like `to_numpy` better).\r\n\r\nThe [ak.Array.tolist](https://awkward-array.readthedocs.io/en/latest/_auto/ak.Array.html#ak-array-tolist) method was spelled without the underscore because of the precedent set by [np.ndarray.tolist](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tolist.html), but maybe it should have a second spelling (a synonym!) with an underscore, for symmetry. It has an underscore in [ak.to_list](https://awkward-array.readthedocs.io/en/latest/_auto/ak.to_list.html).",
  "closed_at":"2021-02-17T20:08:00Z",
  "comments":1,
  "created_at":"2021-02-17T18:45:03Z",
  "id":810441311,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MTA0NDEzMTE=",
  "number":749,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.Array should have a convenience method `to_numpy`",
  "updated_at":"2021-02-17T23:20:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-17T20:08:00Z",
  "comments":0,
  "created_at":"2021-02-17T19:32:02Z",
  "draft":false,
  "id":810473176,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc1MTU4NTAw",
  "number":750,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-17T20:08:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Added 'ak.Array.to_list', 'ak.Array.to_numpy', and 'ak.Record.to_list', and simplified the documentation to point to the functions they call.",
  "updated_at":"2021-02-17T20:08:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-17T20:41:23Z",
  "comments":0,
  "created_at":"2021-02-17T20:03:40Z",
  "draft":false,
  "id":810497522,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc1MTc5MjY5",
  "number":751,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-17T20:41:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #740; NumPy scalars should be iterated over as numbers.",
  "updated_at":"2021-02-17T20:41:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-17T21:39:28Z",
  "comments":0,
  "created_at":"2021-02-17T20:19:23Z",
  "draft":false,
  "id":810508065,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc1MTg3OTkw",
  "number":752,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-17T21:39:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #722; better error message for bad concatenation.",
  "updated_at":"2021-02-17T21:39:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"NONE",
  "body":"First of all, this is an amazing project! I am trying to use awkward arrays with CUDA kernels implemented with Numba. It would be good to have more information in general on how to use awkward arrays on GPU (on this page https://awkward-array.org/how-to-math-gpu.html) and, if possible, an example with Numba cuda-jitted function.\r\n\r\nThanks!",
  "closed_at":null,
  "comments":2,
  "created_at":"2021-02-17T22:11:00Z",
  "id":810577130,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MTA1NzcxMzA=",
  "number":753,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"How to use Awkward Arrays on GPUs",
  "updated_at":"2024-01-20T00:33:59Z",
  "user":"MDQ6VXNlcjY1MzUyNTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"In general, `nplike.searchsorted` should require the second argument to be an array, to ensure that this is consistently used.",
  "closed_at":"2021-02-17T23:23:47Z",
  "comments":0,
  "created_at":"2021-02-17T22:45:24Z",
  "draft":false,
  "id":810595510,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc1MjYwMjcz",
  "number":754,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-17T23:23:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Minor tweak so that ak.unflatten works for CuPy arrays. This doesn't count as support yet.",
  "updated_at":"2021-02-17T23:23:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-18T16:10:06Z",
  "comments":0,
  "created_at":"2021-02-18T15:35:59Z",
  "draft":false,
  "id":811211077,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc1Nzc2MTE5",
  "number":755,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-18T16:10:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Print ak.layout.RecordArray's 'length' unequivocally to aid debugging.",
  "updated_at":"2021-02-18T16:10:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Not sure whether this should be an issue in uproot or awkward. `ak.num()` doesn't work with `uproot.lazy()`:\r\n\r\n```python\r\n>>> import uproot\r\n>>> import awkward as ak\r\n>>> uproot.__version__\r\n'4.0.4'\r\n>>> ak.__version__\r\n'1.1.2'\r\n>>> uproot.lazy('file.root')\r\n<Array [{int_branch: 0, ... bool_branch: True}] type='2 * {\"int_branch\": int32, ...'>\r\n>>> ak.num(uproot.lazy('file.root'), axis=0)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/miniconda3/envs/iris-hep/lib/python3.9/site-packages/awkward/operations/structure.py\", line 256, in num\r\n    out = layout.num(axis=axis)\r\n  File \"/home/user/miniconda3/envs/iris-hep/lib/python3.9/site-packages/awkward/partition.py\", line 481, in num\r\n    return sum(x.num(axis) for x in self.partitions)\r\nTypeError: unsupported operand type(s) for +: 'int' and 'awkward._ext.Record'\r\n```\r\n\r\nNote that you can apply `ak.num()` to a TTree in other ways, albeit with inconsistent results:\r\n\r\n```python\r\n>>> ak.num(uproot.open('file.root')['tree'], axis=0)\r\n5\r\n```\r\n(there are five branches)\r\n\r\n```python\r\n>>> ak.num(uproot.open('file.root')['tree'].arrays(), axis=0)\r\n<Record ... double_branch: 2, bool_branch: 2} type='{\"int_branch\": int64, \"long_...'>\r\n```\r\n(there are two entries in each branch)\r\n\r\nIntuitively I would have expected all of the above options to give me just `2`.",
  "closed_at":"2021-02-18T20:56:57Z",
  "comments":1,
  "created_at":"2021-02-18T18:29:31Z",
  "id":811353937,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MTEzNTM5Mzc=",
  "number":756,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Buggy behavior in ak.num() on TTrees",
  "updated_at":"2021-02-18T20:56:57Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-18T20:56:57Z",
  "comments":0,
  "created_at":"2021-02-18T20:19:06Z",
  "draft":false,
  "id":811427019,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc1OTU2NzU5",
  "number":757,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-18T20:56:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #756; ak.num on PartitionedArrays.",
  "updated_at":"2021-02-18T20:56:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"For example,\r\n```python\r\n>>> ak.zip({\"x\": 1, \"y\": 0, \"z\": 0})\r\n\r\nTypeError: 1 cannot be converted into an Awkward Array\r\n```\r\ncould in principle return a record, e.g.\r\n```\r\n>>> ak.Record({\"x\": 1, \"y\": 0, \"z\": 0})\r\n<Record {x: 1, y: 0, z: 0} type='{\"x\": int64, \"y\": int64, \"z\": int64}'>\r\n```",
  "closed_at":"2021-04-16T21:32:12Z",
  "comments":4,
  "created_at":"2021-02-19T22:09:09Z",
  "id":812387723,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MTIzODc3MjM=",
  "number":758,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.zip for scalars should return a Record",
  "updated_at":"2021-04-16T21:32:12Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"After updating to the latest `uproot` and `awkward`, I am having issues saving parquet files. I'm also having trouble figuring generating an example file to provide which reproduces the error. \r\n\r\n```\r\nuproot  - 4.0.4\r\nuproot3 - 3.14.3\r\nawkward - 1.1.2\r\npyarrow - 3.0.0\r\n```\r\nThis reliably reproduces the error\r\n```\r\nrootfiles = glob.glob(\"/path/to/rootfiles/*\")\r\nfields = \\\r\n[    \r\n     'field1',\r\n     'field2'\r\n]\r\nbranches = [f\"{filename}:events\" for filename in rootfiles]\r\nevents = uproot.concatenate(branches[0:3], fields)\r\nak.to_parquet(events, \"test.parquet\")\r\n```\r\nThe error \r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-23-c8be16528deb> in <module>\r\n----> 1 ak.to_parquet(events, \"test.parquet\")\r\n\r\n~/anaconda/playground/lib/python3.8/site-packages/awkward/operations/convert.py in to_parquet(array, where, explode_records, list_to32, string_to32, bytestring_to32, **options)\r\n   2983     layout = to_layout(array, allow_record=False, allow_other=False)\r\n   2984     iterator = batch_iterator(layout)\r\n-> 2985     first = next(iterator)\r\n   2986 \r\n   2987     if \"schema\" not in options:\r\n\r\n~/anaconda/playground/lib/python3.8/site-packages/awkward/operations/convert.py in batch_iterator(layout)\r\n   2977                     )\r\n   2978                 )\r\n-> 2979             yield pyarrow.RecordBatch.from_arrays(\r\n   2980                 pa_arrays, schema=pyarrow.schema(pa_fields)\r\n   2981             )\r\n\r\n~/anaconda/playground/lib/python3.8/site-packages/pyarrow/table.pxi in pyarrow.lib.RecordBatch.from_arrays()\r\n\r\nValueError: Arrays were not all the same length: 614 vs 615\r\n```\r\nHowever, checking the lengths seems to indicate that they are both 615\r\n```\r\n>>> for field in fields:\r\n>>>     print(field, len(getattr(events, field)))\r\nfield1 615\r\nfield2 615\r\n```\r\nExamining the fields shows\r\n```\r\n>>> events.field1\r\n<Array [454, 454, 454, 454, ... 174, 174, 174] type='615 * uint32'>\r\n>>> events.field2\r\n<Array [[0, 0, 0, 0, ... 296, 252, 0]] type='615 * var * float64'>\r\n```\r\n\r\nNow, unrelated to this bug report, but perhaps worth noting. I tried generating an example ROOT file to include, but ran into some issues. This is very likely some user error, though, but I have attached what I did manage to create.\r\n\r\n[example_0.txt](https://github.com/scikit-hep/awkward-1.0/files/6013771/example_0.txt)\r\n[example_1.txt](https://github.com/scikit-hep/awkward-1.0/files/6013772/example_1.txt)\r\n[example_2.txt](https://github.com/scikit-hep/awkward-1.0/files/6013773/example_2.txt)\r\n\r\n```\r\nfor i in range(3):\r\n    file = uproot3.recreate(f\"example_{i}.root\")\r\n    file[\"tree\"] = uproot3.newtree({\"branch1\": np.int32, \"branch2\": np.float64}) # uint32 seems unsupported\r\n    array1 = ak.to_numpy(events.field1)\r\n    array2 = ak.to_numpy(events.field2)\r\n    file[\"tree\"].extend({\"branch1\": array1,\r\n                                 \"branch2\": array2})\r\n    file.close()\r\n\r\nfiles = [f\"example_{i}.root\" for i in range(3)]\r\nnew_events = uproot.concatenate(files)\r\n\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-47-9aa3a03e189c> in <module>\r\n      1 files = [f\"example_{i}.root\" for i in range(3)]\r\n----> 2 new_events = uproot.concatenate(files)\r\n\r\n~/anaconda/playground/lib/python3.8/site-packages/uproot/behaviors/TBranch.py in concatenate(files, expressions, cut, filter_name, filter_typename, filter_branch, aliases, language, decompression_executor, interpretation_executor, library, how, custom_classes, allow_missing, **options)\r\n    371             with hasbranches:\r\n    372                 try:\r\n--> 373                     arrays = hasbranches.arrays(\r\n    374                         expressions=expressions,\r\n    375                         cut=cut,\r\n\r\n~/anaconda/playground/lib/python3.8/site-packages/uproot/behaviors/TBranch.py in arrays(self, expressions, cut, filter_name, filter_typename, filter_branch, aliases, language, entry_start, entry_stop, decompression_executor, interpretation_executor, array_cache, library, how)\r\n   1122                         ranges_or_baskets.append((branch, basket_num, range_or_basket))\r\n   1123 \r\n-> 1124         _ranges_or_baskets_to_arrays(\r\n   1125             self,\r\n   1126             ranges_or_baskets,\r\n\r\n~/anaconda/playground/lib/python3.8/site-packages/uproot/behaviors/TBranch.py in _ranges_or_baskets_to_arrays(hasbranches, ranges_or_baskets, branchid_interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, library, arrays)\r\n   3458 \r\n   3459         elif isinstance(obj, tuple) and len(obj) == 3:\r\n-> 3460             uproot.source.futures.delayed_raise(*obj)\r\n   3461 \r\n   3462         else:\r\n\r\n~/anaconda/playground/lib/python3.8/site-packages/uproot/source/futures.py in delayed_raise(exception_class, exception_value, traceback)\r\n     44         exec(\"raise exception_class, exception_value, traceback\")\r\n     45     else:\r\n---> 46         raise exception_value.with_traceback(traceback)\r\n     47 \r\n     48 \r\n\r\n~/anaconda/playground/lib/python3.8/site-packages/uproot/behaviors/TBranch.py in basket_to_array(basket)\r\n   3415             )\r\n   3416             if basket.num_entries != len(basket_arrays[basket.basket_num]):\r\n-> 3417                 raise ValueError(\r\n   3418                     \"\"\"basket {0} in tree/branch {1} has the wrong number of entries \"\"\"\r\n   3419                     \"\"\"(expected {2}, obtained {3}) when interpreted as {4}\r\n\r\nValueError: basket 0 in tree/branch /tree;1:branch2 has the wrong number of entries (expected 1, obtained 10) when interpreted as AsDtype('>f8')\r\n    in file example_0.root\r\n```\r\n\r\nThanks as always for all the hard work on awkward and uproot, and thanks further for any help you can provide!",
  "closed_at":"2021-02-20T15:41:08Z",
  "comments":4,
  "created_at":"2021-02-20T00:24:16Z",
  "id":812449402,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MTI0NDk0MDI=",
  "number":759,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Error saving with to_parquet - ValueError / Off-by-One",
  "updated_at":"2021-02-20T15:41:08Z",
  "user":"MDQ6VXNlcjg1OTM0ODE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"There had been two code paths that do the same thing. The one that was active (called before the other had a chance) was wrong.\r\n\r\nFixes #759.",
  "closed_at":"2021-02-20T15:41:08Z",
  "comments":0,
  "created_at":"2021-02-20T15:01:28Z",
  "draft":false,
  "id":812636723,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc2OTU1NjM4",
  "number":760,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-20T15:41:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Simplify 'ak.to_arrow' list handling.",
  "updated_at":"2021-02-20T15:41:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-22T16:07:37Z",
  "comments":1,
  "created_at":"2021-02-21T19:05:04Z",
  "draft":false,
  "id":812925896,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc3MTYyMDk5",
  "number":762,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-22T16:07:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"More documentation, starting with \"how to build\".",
  "updated_at":"2021-02-22T16:07:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"```python\r\nimport awkward as ak\r\narr = ak.Array([[]])\r\nprint(ak.argsort(arr))\r\n```\r\nWill print `<Array [[]] type='1 * var * float64'>`, which has the value type `float64` instead of `int64`. It works normally (returning `int64`) if `arr` is not empty. If you try to use this result to sort `arr`, you will get `ValueError: only arrays of integers or booleans may be used as a slice`.\r\n\r\nRelated to this I noticed that the following does not raise an error, even though `argsort` still returns floats here\r\n```python\r\narr = ak.Array([])\r\narr[ak.argsort(arr)]\r\n```\r\nI'm not sure if this is to be expected.\r\n\r\nTested on the latest git main (1.2.0rc2).",
  "closed_at":"2021-02-22T19:17:54Z",
  "comments":1,
  "created_at":"2021-02-22T17:54:50Z",
  "id":813725785,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MTM3MjU3ODU=",
  "number":763,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.argsort returns floats",
  "updated_at":"2021-02-22T19:17:54Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-22T19:17:54Z",
  "comments":0,
  "created_at":"2021-02-22T18:42:35Z",
  "draft":false,
  "id":813762274,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc3ODU2NDUz",
  "number":764,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-22T19:17:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #763 by assigning a better type to EmptyArray::argsort_next.",
  "updated_at":"2021-02-22T19:17:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-23T02:21:30Z",
  "comments":0,
  "created_at":"2021-02-22T23:51:40Z",
  "draft":false,
  "id":813965983,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc4MDI1NzMz",
  "number":765,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-23T02:21:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Consider this implementation of a DifferentiableArray for JAX.",
  "updated_at":"2021-02-23T02:21:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-23T17:53:50Z",
  "comments":0,
  "created_at":"2021-02-23T17:14:15Z",
  "draft":false,
  "id":814661881,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc4NjEzNTkz",
  "number":766,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-02-23T17:53:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Prevent combinations of characters (from a bug on Mattermost).",
  "updated_at":"2021-02-23T17:53:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@ianna, I found that I had to think through the logic of how the TypedArrayBuilder will interact with the ForthMachine to be able to write about it. For instance, from working through this I found out that TypedArrayBuilder will need a finite state machine in addition to using the ForthMachine as a bag of functions. Also, in a typed environment, `begin_list`, `begin_record`, etc. become superfluous and `field` or `index` (for setting the next record field or tuple index) can't be supported: it has to know which functions are coming next.\r\n\r\nWait a minute... maybe the finite state machine can be encoded in the ForthMachine after all...",
  "closed_at":"2021-03-02T14:09:18Z",
  "comments":3,
  "created_at":"2021-02-23T20:30:59Z",
  "draft":false,
  "id":814806979,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTc4NzM0ODYz",
  "number":767,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-02T14:09:18Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Conceptual test of TypedArrayBuilder through AwkwardForth.",
  "updated_at":"2021-03-02T14:09:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-03-02T13:42:18Z",
  "comments":2,
  "created_at":"2021-02-25T11:29:27Z",
  "draft":true,
  "id":816350516,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTgwMDI2Njcx",
  "number":768,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start Working on the CannotMaterialize class",
  "updated_at":"2021-03-02T13:42:18Z",
  "user":"MDQ6VXNlcjM5ODc4Njc1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - it should be moved to a new directory: `src/libawkward/typedbuilder`? Suggestions are welcome! Thanks!",
  "closed_at":"2021-04-13T13:41:46Z",
  "comments":3,
  "created_at":"2021-02-26T16:51:54Z",
  "draft":false,
  "id":817510135,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTgwOTkxMzg0",
  "number":769,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-13T13:41:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Typed Array Builder from Form",
  "updated_at":"2021-04-13T13:41:46Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"If I define a simple mixin class and create a union array that can be an instance:\r\n```python\r\nimport awkward as ak\r\n\r\n\r\n@ak.mixin_class(ak.behavior)\r\nclass Blah:\r\n    @property\r\n    def blah(self):\r\n        return self[\"x\"]\r\n\r\n\r\na = ak.zip({\"x\": [[1, 2], [3]], \"y\": [[4, 5], [6]]})\r\nb = ak.zip({\"x\": [[-1, -2, -3], [-4]], \"z\": [[-4, -5, -6], [-7]]})\r\nc = ak.with_name(ak.concatenate([a, b], axis=1), \"Blah\")\r\n```\r\nthen, as expected, `c.blah` returns `<Array [[1, 2, -1, -2, -3], [3, -4]] type='2 * var * union[int64, int64]'>` (it would be nice if it simplified, that's #714).\r\nBut if I first filter `a` and `b` (i.e. turning them into indexed arrays):\r\n```python\r\na2 = a[a.x % 2 == 0]\r\nb2 = b[b.x % 2 == 0]\r\nc2 = ak.with_name(ak.concatenate([a2, b2], axis=1), \"Blah\")\r\n```\r\nthe same `c2.blah` now raises an `AttributeError`. One also sees that `c2.layout.purelist_parameter(\"__record__\")` is empty.\r\n\r\nWith ak version `1.2.0rc2`.",
  "closed_at":"2021-07-12T23:43:12Z",
  "comments":8,
  "created_at":"2021-03-01T15:38:27Z",
  "id":818988015,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MTg5ODgwMTU=",
  "number":770,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Union of indexed arrays loses its record type",
  "updated_at":"2021-07-12T23:43:12Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Creating an awkward Array from different length columns currently (in v1.1.1) just truncates to the length of the shortest column:\r\n```\r\n>>> ak.Array({\"a\": [1, 2], \"b\": [1, 2, 3]})\r\n<Array [{a: 1, b: 1}, {a: 2, b: 2}] type='2 * {\"a\": int64, \"b\": int64}'>\r\n```\r\nI'm not sure if this is intended behaviour, but I personally would expect this to fail with an exception (for instance pandas gives a `ValueError: arrays must all be same length`). If there is a reason to have this as the behaviour, could it be included in the documentation, please?",
  "closed_at":"2021-03-01T17:28:21Z",
  "comments":2,
  "created_at":"2021-03-01T16:23:56Z",
  "id":819030958,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MTkwMzA5NTg=",
  "number":771,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Constructing Array with different length columns should raise error",
  "updated_at":"2021-03-01T17:28:21Z",
  "user":"MDQ6VXNlcjYwMjkyMjQ3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-03-01T17:28:22Z",
  "comments":0,
  "created_at":"2021-03-01T16:49:55Z",
  "draft":false,
  "id":819054857,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTgyMjE4MTMz",
  "number":772,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-01T17:28:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #771; constructing Array with different length columns should raise error.",
  "updated_at":"2021-03-01T17:28:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-03-04T20:35:51Z",
  "comments":2,
  "created_at":"2021-03-01T17:07:35Z",
  "draft":false,
  "id":819070904,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTgyMjMxMzM0",
  "number":773,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-04T20:35:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add type parser to main codebase",
  "updated_at":"2021-03-04T20:35:52Z",
  "user":"MDQ6VXNlcjExNzc1NjE1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Unfortunately, it seems that issue #483 has resurfaced after updating to the new versions of awkward (1.2.0rc2) and pybind11 (2.6.2). Just trying to pass an awkward array into a c++ function on ubuntu 18.04, I get:\r\n\r\n```\r\n========================================================================================== FAILURES ===========================================================================================\r\n______________________________________________________________________________________ test_numpy_array _______________________________________________________________________________________\r\n\r\n    def test_numpy_array() -> None:\r\n>       pba.awkward_test_numpy_array(ak.Array([1,2,3]).layout)\r\nE       TypeError: awkward_test_numpy_array(): incompatible function arguments. The following argument types are supported:\r\nE           1. (arr: awkward::NumpyArray) -> awkward::NumpyArray\r\nE\r\nE       Invoked with: <NumpyArray format=\"l\" shape=\"3\" data=\"1 2 3\" at=\"0x562381da0240\"/>\r\n\r\n\r\ntests/test_simple.py:6: TypeError\r\n_____________________________________________________________________________________ test_awkward_array ______________________________________________________________________________________\r\n\r\n    def test_awkward_array() -> None:\r\n>       pba.awkward_test(ak.Array([1,2,3]).layout)\r\nE       TypeError: awkward_test(): incompatible function arguments. The following argument types are supported:\r\nE           1. (arr: awkward::Content) -> awkward::Content\r\nE\r\nE       Invoked with: <NumpyArray format=\"l\" shape=\"3\" data=\"1 2 3\" at=\"0x562381dada40\"/>\r\n\r\n\r\ntests/test_simple.py:9: TypeError\r\n=================================================================================== short test summary info ===================================================================================\r\nFAILED tests/test_simple.py::test_numpy_array - TypeError: awkward_test_numpy_array(): incompatible function arguments. The following argument types are supported:\r\nFAILED tests/test_simple.py::test_awkward_array - TypeError: awkward_test(): incompatible function arguments. The following argument types are supported:\r\n====================================================================================== 2 failed in 0.30s ======================================================================================\r\n```\r\n\r\nThe full reproducer is here: https://github.com/raymondEhlers/pybind11-awkward-array-test . It was a few c++ functions in `pybind11_awkward/src/binding.cpp`, and then the tests leading to the failures above are in `tests`. It uses poetry, but you should be able to build it with pep 517:\r\n\r\n```bash\r\n# in some virtualenv\r\npip install .\r\npytest tests/test_simple.py\r\n```\r\n\r\nRecall that this doesn't seem to occur on macOS, but only on linux. Perhaps I've forgotten to somehow link everything properly? In any case, I must be doing something trivially wrong, but I can't seem to find it. Any advice is appreciated!\r\n\r\n(I created a new issue because I realized I couldn't reopen the previous one and I didn't want it to get lost. We can return there if preferred)\r\n\r\n_Originally posted by @raymondEhlers in https://github.com/scikit-hep/awkward-1.0/issues/483#issuecomment-789061311_",
  "closed_at":"2021-03-02T20:58:25Z",
  "comments":3,
  "created_at":"2021-03-02T17:16:29Z",
  "id":820219943,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MjAyMTk5NDM=",
  "number":774,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Return of issue: in dependent project, ak.layout fails to convert to ak::Content",
  "updated_at":"2021-03-03T23:07:09Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-03-06T11:36:24Z",
  "comments":1,
  "created_at":"2021-03-03T12:25:21Z",
  "draft":true,
  "id":821063032,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTgzOTE4NDY2",
  "number":775,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This PR concentrates on covering all edge cases while doing a jax.jvp on Awkward Arrays.",
  "updated_at":"2021-11-12T14:51:23Z",
  "user":"MDQ6VXNlcjM5ODc4Njc1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This one: https://stackoverflow.com/q/66449170/1623645\r\n\r\nThe problem was that `numba.bool` does not exist; it's spelled `numba.boolean`. This error only shows up in _virtual_ arrays with booleans.",
  "closed_at":"2021-03-03T15:44:24Z",
  "comments":0,
  "created_at":"2021-03-03T15:06:09Z",
  "draft":false,
  "id":821195445,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTg0MDI4NDkw",
  "number":776,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-03T15:44:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix bug raised on StackOverflow.",
  "updated_at":"2021-03-03T15:44:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hello,\r\n\r\nI was reading through CONTRIBUTING.md and noticed that the hyperlink to the \"how-it-works tutorials for developers\" under the [performance considerations](https://github.com/scikit-hep/awkward-1.0/blob/main/CONTRIBUTING.md#performance-considerations) section (first paragraph) had a link that redirected to [this 404 page](https://scikit-hep.org/awkward-1.0/how-it-works.html). Would it be possible to replace this link with a new one, as I assume the page has been moved?",
  "closed_at":"2021-03-05T22:28:15Z",
  "comments":1,
  "created_at":"2021-03-05T22:14:39Z",
  "id":823458039,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MjM0NTgwMzk=",
  "number":777,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Dead link to \"how-it-works tutorials for developers\" in CONTRIBUTING.md",
  "updated_at":"2021-03-05T22:28:15Z",
  "user":"MDQ6VXNlcjQ1NzcwMDIx"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"While investigating #774, I was concerned that there may be some issues with gcc 7.3, so I tried to compile fastjet separately and then build my bindings. In the process, I came across what looks like some memory corruption when trying to call `ak::Content::classname()` as a cross check. It either causes memory corruption or a segfault. I'm fairly certain this isn't system specific because I managed to reproduce it in singularity (specifically, using the docker image `python:3.9-buster`), as well as directly on the system.\r\n\r\nAgain, falling back on my reproducer repo, this time on the branch [`segfault_name`](https://github.com/raymondEhlers/pybind11-awkward-array-test/tree/segfault_name). Running pytest to just print the name of the array results in a segfault:\r\n\r\n```bash\r\n(test_env) Singularity> pytest -l -vv tests\r\n===================================================================================== test session starts =====================================================================================\r\nplatform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/bin/python3\r\ncachedir: .pytest_cache\r\nrootdir: /home/rehlers/code/quarantine/pybind11-awkward-array-test-name\r\ncollected 2 items\r\n\r\ntests/test_simple.py::test_numpy_array Fatal Python error: Aborted\r\n\r\nCurrent thread 0x00007fbeed68b740 (most recent call first):\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/tests/test_simple.py\", line 6 in test_numpy_array\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/python.py\", line 183 in pytest_pyfunc_call\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/python.py\", line 1641 in runtest\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/runner.py\", line 162 in pytest_runtest_call\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/runner.py\", line 255 in <lambda>\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/runner.py\", line 311 in from_call\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/runner.py\", line 254 in call_runtest_hook\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/runner.py\", line 215 in call_and_report\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/runner.py\", line 126 in runtestprotocol\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/runner.py\", line 109 in pytest_runtest_protocol\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/main.py\", line 348 in pytest_runtestloop\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/main.py\", line 323 in _main\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/main.py\", line 269 in wrap_session\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/main.py\", line 316 in pytest_cmdline_main\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/callers.py\", line 187 in _multicall\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/manager.py\", line 84 in <lambda>\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/manager.py\", line 93 in _hookexec\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/pluggy/hooks.py\", line 286 in __call__\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 162 in main\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 185 in console_main\r\n  File \"/home/rehlers/code/quarantine/pybind11-awkward-array-test-name/test_env/bin/pytest\", line 8 in <module>\r\nAborted\r\n```\r\n\r\nwhile running the function directly show the memory corruption:\r\n\r\n```bash\r\n(test_env) Singularity> python tests/test_simple.py\r\nIn function for NumpyArray\r\n. Name: NumpyArray8UU\r\n    Partition each element in `a` around `sep`.\r\n\r\n    Calls `str.partition` element-wise.\r\n\r\n    For each element in `a`, split the element as the first\r\n    occurrence of `sep`, and return 3 strings containing the part\r\n    before the separator, the separator itself, and the part after\r\n    the separator. If the separator is not found, return 3 strings\r\n    containing the string itself, followed by two empty strings.\r\n\r\n    Parameters\r\n    ----------\r\n    a : array_like, {str, unicode}\r\n        Input array\r\n    sep : {str, unicode}\r\n        Separator to split each string element in `a`.\r\n\r\n    Returns\r\n    -------\r\n    out : ndarray, {str, unicode}\r\n        Output array of str or unicode, depending on input type.\r\n        The output array will have an extra dimension with 3\r\n        elements per input element.\r\n\r\n    See also\r\n    --------\r\n    str.partition\r\n\r\n    A8U%8UValidate a pyc against the sourcfree(): invalid pointer\r\nAborted\r\n```\r\n\r\nThis may just be a forgotten null, and I don't know if this is related to my underlying issues in #774, but seemed better to report. As always, your help is appreciated.\r\n\r\n```python\r\n>>> awkward.__version__\r\n'1.2.0rc2'\r\n```\r\n",
  "closed_at":"2021-04-12T18:32:43Z",
  "comments":9,
  "created_at":"2021-03-07T23:06:44Z",
  "id":824047343,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MjQwNDczNDM=",
  "number":778,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Apparent memory corruption for ak::Content::classname()",
  "updated_at":"2021-04-13T14:07:47Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-03-24T16:59:36Z",
  "comments":2,
  "created_at":"2021-03-08T05:28:23Z",
  "draft":false,
  "id":824181985,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTg2NDU1ODg3",
  "number":779,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-24T16:59:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Adapt getitem of DifferentiableArray for JAX",
  "updated_at":"2021-03-24T16:59:37Z",
  "user":"MDQ6VXNlcjM5ODc4Njc1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"In Python, a key in a dictionary can be any immutable type, e.g. ints and floats. However, it seems like awkward array only supports strings as keys. As an example \r\n```python\r\nak.Array({1:[1, 2, 3]})\r\n```\r\ngives the error \r\n```\r\nRuntimeError: Unable to cast Python instance to C++ type (compile in debug mode for details)\r\n``` \r\nI am guessing that implementing this would require quite a lot of changes to the code, so it might not be feasible but would it be possible to allow other key types than strings, e.g. ints, floats or booleans?\r\n\r\nIf there are too many problems with implementing this feature, maybe the error message could be changed to something along the lines of\r\n```\r\nKeyError: keys can only be of type string\r\n```\r\nwhen an incorrect key type is passed, as in the example above?\r\n",
  "closed_at":null,
  "comments":2,
  "created_at":"2021-03-08T22:54:22Z",
  "id":825035406,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MjUwMzU0MDY=",
  "number":780,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Implement __array__ = \"sorted_map\" for dict-like behavior.",
  "updated_at":"2021-03-09T12:14:52Z",
  "user":"MDQ6VXNlcjQ1NzcwMDIx"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"User defined error messages can be passed to a `halt` command exception handling. For example:\r\n\r\n```python\r\ndef test_user_defined_exception():\r\n    vm32 = awkward.forth.ForthMachine32(\r\n        \"\"\"\r\nvariable x 0 x !\r\nvariable err\r\ns\" variable x reached its maximum 10\"\r\n: foo\r\n    5 x +! x @\r\n    dup 10 = if\r\n        0 err ! err @ halt\r\n    then\r\n;\r\n0\r\nbegin\r\n    foo\r\n    1+\r\nagain\r\n\"\"\"\r\n    )\r\n    with pytest.raises(ValueError) as err:\r\n        vm32.run()\r\n    assert vm32.stack[-1] == 0\r\n    assert vm32.string_at(vm32.stack[-1]) == \"variable x reached its maximum 10\"\r\n```",
  "closed_at":"2021-03-10T13:16:58Z",
  "comments":1,
  "created_at":"2021-03-09T16:38:03Z",
  "draft":false,
  "id":826222740,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTg4MjQxMDU4",
  "number":781,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-10T13:16:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"AwkwardForth: add an s\" core word to define strings",
  "updated_at":"2021-03-10T13:16:59Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I have a simple array, repr looks like this:\r\n`<Array [-0.0848, -0.00858, 0.13, -0.0658] type='4 * float32'>`\r\n\r\nApplying `ak.flatten` yields this error:\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-57-80600ed80be4> in <module>\r\n     13         c = px - mc_px\r\n     14         print(repr(c))\r\n---> 15         ak.flatten(c)\r\n     16         delta_px = np.append(delta_px, ak.flatten(px) - ak.flatten(mc_px))\r\n     17 \r\n\r\n/usr/local/lib/python3.8/site-packages/awkward/operations/structure.py in flatten(array, axis, highlevel, behavior)\r\n   1665 \r\n   1666     else:\r\n-> 1667         out = layout.flatten(axis)\r\n   1668 \r\n   1669     if highlevel:\r\n\r\nValueError: axis out of range for flatten\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.1.2/src/libawkward/array/NumpyArray.cpp#L1568)\r\n```\r\nI am not sure what exactly the problem is, but `ak.flatten` should also work on arrays of any dimension.",
  "closed_at":"2021-03-12T13:19:40Z",
  "comments":1,
  "created_at":"2021-03-11T22:45:42Z",
  "id":829582087,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4Mjk1ODIwODc=",
  "number":782,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.flatten fails to flatten 1D array",
  "updated_at":"2021-03-12T13:19:59Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"In some situations i get the wrong result when loading parquet files with `lazy=True` - the simplest example i could come up with is this ListOffsetArray of a nested record:\r\n\r\n```pycon\r\n>>> array = ak.Array([[], [{\"a\" : [{\"x\" : 17, \"y\" : 42}]}]])\r\n>>> ak.to_parquet(array, \"array.parquet\")\r\n>>> ak.from_parquet(\"array.parquet\").tolist()\r\n[[], [{'a': [{'x': 17, 'y': 42}]}]]\r\n>>> ak.from_parquet(\"array.parquet\", lazy=True).tolist()\r\n[[], [{'a': []}]]\r\n```\r\n\r\n```pycon\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.2.0rc2'\r\n\r\n```\r\n\r\nBut otherwise, pretty nice that lazy reading of columns from nested parquet files is possible now in principle!\r\n",
  "closed_at":"2021-03-12T18:28:27Z",
  "comments":2,
  "created_at":"2021-03-12T15:18:02Z",
  "id":830218682,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4MzAyMTg2ODI=",
  "number":783,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.from_parquet` loads wrong data with `lazy=True` for ListOffsetArray of nested records",
  "updated_at":"2021-03-12T18:28:28Z",
  "user":"MDQ6VXNlcjM3MDcyMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-03-12T18:28:30Z",
  "comments":0,
  "created_at":"2021-03-12T17:48:53Z",
  "draft":false,
  "id":830330243,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTkxODU4Njc3",
  "number":784,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-12T18:28:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Disambiguate offsets-index cache keys when lazily reading Parquet.",
  "updated_at":"2021-03-12T18:29:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"",
  "closed_at":"2021-03-23T20:21:26Z",
  "comments":0,
  "created_at":"2021-03-15T16:55:23Z",
  "draft":false,
  "id":832004928,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTkzMjM2NTY4",
  "number":785,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-23T20:21:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-03-23T20:21:26Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"A bit experimental, now that numba is available this should work, perhaps?\r\n\r\nDropping flake8 since it's already tested in in a more controlled environment in pre-commit.\r\n\r\nDo we need every combination of 32 bits and 64 bits on every supported Python for the tests on Windows? Couldn't a sampling be used?",
  "closed_at":"2021-03-23T20:01:17Z",
  "comments":7,
  "created_at":"2021-03-23T16:09:43Z",
  "draft":false,
  "id":838886831,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTk4OTkwODM2",
  "number":786,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-23T20:01:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: cleanup and remove 3.9 restrictions",
  "updated_at":"2021-03-23T20:01:40Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"If another Numba extension (such as [Vector](https://github.com/scikit-hep/vector)) is trying to overload an operator and Awkward's check goes first, Awkward's check has a bug (variable not defined because the other-library object is not an Awkward object) that gets reported in the Numba error message, even though it has _nothing to do_ with any data types that are present in the function being compiled:\r\n\r\n```\r\nnumba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nNo implementation of function Function(<built-in function abs>) found for signature:\r\n \r\n >>> abs(VectorObject2DType(AzimuthalObjectXY(int64 x 2)))\r\n \r\nThere are 8 candidate implementations:\r\n  - Of which 2 did not match due to:\r\n  Type Restricted Function in function 'abs': File: unknown: Line unknown.\r\n    With argument(s): '(VectorObject2DType(AzimuthalObjectXY(int64 x 2)))':\r\n   No match for registered cases:\r\n    * (int8,) -> int8\r\n    * (int16,) -> int16\r\n    * (int32,) -> int32\r\n    * (int64,) -> int64\r\n    * (uint8,) -> uint8\r\n    * (uint16,) -> uint16\r\n    * (uint32,) -> uint32\r\n    * (uint64,) -> uint64\r\n    * (float32,) -> float32\r\n    * (float64,) -> float64\r\n    * (complex64,) -> float32\r\n    * (complex128,) -> float64\r\n  - Of which 2 did not match due to:\r\n  Overload in function 'operator_abs.generic': File: ../../../../irishep/vector/vector/backends/numba_object.py: Line 2996.\r\n    With argument(s): '(VectorObject2DType(AzimuthalObjectXY(int64 x 2)))':\r\n   Rejected as the implementation raised a specific error:\r\n     TypeError: 'builtin_function_or_method' object is not subscriptable\r\n  raised from /home/jpivarski/irishep/vector/vector/backends/numba_object.py:3002\r\n  - Of which 2 did not match due to:\r\n  Overload in function 'register_unary_operator.<locals>.type_binary_operator.generic': File: awkward/_connect/_numba/arrayview.py: Line 959.\r\n    With argument(s): '(VectorObject2DType(AzimuthalObjectXY(int64 x 2)))':\r\n   Rejected as the implementation raised a specific error:\r\n     UnboundLocalError: local variable 'left' referenced before assignment\r\n  raised from /home/jpivarski/miniconda3/lib/python3.8/site-packages/awkward/_connect/_numba/arrayview.py:967\r\n  - Of which 2 did not match due to:\r\n  Overload of function 'abs': File: numba/core/typing/npdatetime.py: Line 20.\r\n    With argument(s): '(VectorObject2DType(AzimuthalObjectXY(int64 x 2)))':\r\n   No match.\r\n\r\nDuring: resolving callee type: Function(<built-in function abs>)\r\nDuring: typing of call at /home/jpivarski/irishep/vector/tests/backends/test_numba_object.py (1320)\r\n\r\n\r\nFile \"tests/backends/test_numba_object.py\", line 1320:\r\n    def get_abs(v):\r\n        return abs(v)\r\n        ^\r\n\r\n../../miniconda3/lib/python3.8/site-packages/numba/core/dispatcher.py:357: TypingError\r\n```\r\n\r\nNote the reference to `awkward/_connect/_numba/arrayview.py`. The function being compiled was\r\n\r\n```python\r\n@numba.njit\r\ndef get_abs(v):\r\n    return abs(v)\r\n```\r\n\r\nwhere `v` is `vector.obj(x=3, y=4)`, which has _nothing to do_ with Awkward Array. With this fix, Awkward Array stays out of the way and Numba error messages refer only to the types of data in question.",
  "closed_at":"2021-03-24T19:12:11Z",
  "comments":0,
  "created_at":"2021-03-24T16:47:48Z",
  "draft":false,
  "id":839922999,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTk5ODU4Nzg0",
  "number":787,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-24T19:12:11Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Don't prevent other Numba extensions from using operators.",
  "updated_at":"2021-03-24T19:12:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Motivation\r\nI'm updating my coffea analysis up to 0.7 (with awkward 1.1.2), and loving the new awkward1 features! I have, however, found some behavior that I'd consider to be odd. In part of the analysis, it's far easier to stack muons and electrons into a single array while preserving flavor. I found that this can be accomplished easily by a combination of `ak.with_field` to add a flavor tag and `ak.concatenate`, using `ak.with_name` to label the array as `PtEtaPhiMCandidate` to preserve functions like delta_r().\r\n\r\n### Behavior\r\nAnd here lies the discrepancy: if I add the flavor at the very beginning, the array doesn't seem to retain any name I put on it. In other words:\r\n\r\n```\r\nimport awkward as ak\r\nfrom coffea.nanoevents import NanoEventsFactory, NanoAODSchema\r\n\r\nfile = 'root://hcc-stash.unl.edu:1094//osgconnect/public/dweitzel/coffea-casa/38E83594-51BD-7D46-B96D-620DD60078A7.root'\r\nevents = NanoEventsFactory.from_root(file).events()\r\n\r\nmuons = ak.with_field(events.Muon, 0, 'flavor')\r\nelectrons = ak.with_field(events.Electron, 1, 'flavor')\r\n\r\nloose_muons = muons[muons.pt > 5]\r\nloose_electrons = electrons[electrons.pt > 5]\r\n\r\nloose_leptons = ak.with_name(ak.concatenate([loose_muons, loose_electrons], axis=1), 'PtEtaPhiMCandidate')\r\n```\r\n\r\nResults in a loose_leptons array that appears as:\r\n`<Array [[{dxy: 0.000454, ... flavor: 1}]] type='614400 * var * union[struct[[\"dx...'>)`\r\n\r\nBut if I add the flavor after all cuts on the muons/electrons have been made, then it all works just fine:\r\n```\r\nimport awkward as ak\r\nfrom coffea.nanoevents import NanoEventsFactory, NanoAODSchema\r\n\r\nfile = 'root://hcc-stash.unl.edu:1094//osgconnect/public/dweitzel/coffea-casa/38E83594-51BD-7D46-B96D-620DD60078A7.root'\r\nevents = NanoEventsFactory.from_root(file).events()\r\n\r\nmuons = events.Muon\r\nelectrons = events.Electron\r\n\r\nloose_muons = muons[muons.pt > 5]\r\nloose_muons = ak.with_field(loose_muons, 0, 'flavor')\r\n\r\nloose_electrons = electrons[electrons.pt > 5]\r\nloose_electrons = ak.with_field(loose_electrons, 1, 'flavor')\r\n\r\nloose_leptons = ak.with_name(ak.concatenate([loose_muons, loose_electrons], axis=1), 'PtEtaPhiMCandidate')\r\n```\r\n\r\nThis results in loose_leptons appearing as (as intended):\r\n`<PtEtaPhiMCandidateArray [[{charge: -1, ... flavor: 1}]] type='614400 * var * un...'>)`\r\n\r\nAfter further investigation, it seems like altering the array after adding a field onto it breaks how `ak.with_name` behaves. However, I don't see any other changes in behavior or any differences in content for loose_leptons between the two examples, so this seems like a bug.",
  "closed_at":"2021-03-25T13:59:32Z",
  "comments":1,
  "created_at":"2021-03-25T01:42:19Z",
  "id":840479719,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NDA0Nzk3MTk=",
  "number":788,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Differing behavior depending on placement of ak.with_field",
  "updated_at":"2021-03-25T13:59:32Z",
  "user":"MDQ6VXNlcjI1NDkzODM5"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-03-25T13:59:32Z",
  "comments":0,
  "created_at":"2021-03-25T13:21:23Z",
  "draft":false,
  "id":840921413,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjAwNzMyNzM3",
  "number":789,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-25T13:59:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"When RecordArrays are lazily carried as IndexedArrays, the IndexedArrays shouldn't copy the RecordArray parameters. Also, 'with_name' may be able to simplify some UnionArrays after homogenizing names.",
  "updated_at":"2021-03-25T13:59:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-03-25T20:03:51Z",
  "comments":0,
  "created_at":"2021-03-25T19:19:11Z",
  "draft":false,
  "id":841235647,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjAwOTk4MjUz",
  "number":790,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-25T20:03:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implement 'np.nan_to_num' and 'np.isclose' for Vector.",
  "updated_at":"2021-03-25T20:03:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-04-19T18:13:25Z",
  "comments":7,
  "created_at":"2021-03-28T13:11:00Z",
  "draft":false,
  "id":842735345,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjAyMjM5MTc5",
  "number":793,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-19T18:13:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This PR integrates JAX element wise differentiation into the main codebase",
  "updated_at":"2021-04-19T18:13:26Z",
  "user":"MDQ6VXNlcjM5ODc4Njc1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"To reproduce\r\n```python\r\nimport awkward as ak\r\ndata = ak.layout.NumpyArray([1, 2, 3])\r\ndata = ak.layout.ListArray64(ak.layout.Index64([0]), ak.layout.Index64([3]), data)\r\ndata = ak.layout.IndexedArray64(ak.layout.Index64([]), data)\r\ncart = ak.cartesian([data, data])\r\nprint(cart.type)\r\n```\r\nThis prints `0 * var * (1 * int64, int64)`. I think it should be `0 * var * (int64, int64)`.\r\nIf you compare this to the case that the index of the `IndexedArray64` has one entry, you nicely get `1 * var * (int64, int64)`.\r\nI run into invalid array shapes with this behavior, as `ak.unzip(cart)[0]` suddenly is 3 dimensional (in case of 0 length input) instead of 2 dimensional.\r\n\r\nTested on latest git main (awkward-1.2.0rc4)\r\n",
  "closed_at":"2021-03-29T20:11:10Z",
  "comments":1,
  "created_at":"2021-03-29T14:39:58Z",
  "id":843439893,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NDM0Mzk4OTM=",
  "number":794,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Invalid dimensionality from cartesian with zero length input",
  "updated_at":"2021-03-29T20:11:10Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-03-29T20:11:11Z",
  "comments":0,
  "created_at":"2021-03-29T17:40:02Z",
  "draft":false,
  "id":843617009,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjAyOTc0NTMy",
  "number":795,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-29T20:11:10Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed #794, ak.cartesian on an empty array.",
  "updated_at":"2021-03-29T20:11:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is needed for Vector, so that Awkward Arrays of vectors can be used in the same expression with NumPy arrays of vectors.",
  "closed_at":"2021-03-30T00:07:10Z",
  "comments":0,
  "created_at":"2021-03-29T23:29:10Z",
  "draft":false,
  "id":843909319,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjAzMjMxMzc1",
  "number":796,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-30T00:07:10Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add mechanism to cast objects before __array_ufunc__.",
  "updated_at":"2021-03-30T00:07:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"So sometimes calling `dict(ak_array)` gives an error.\r\n\r\n```python\r\n\r\nIn [10]: import awkward as ak\r\n    ...: print(ak.__version__)\r\n    ...: dog = ak.from_iter([[1., 2.], [5.]])\r\n    ...: pets = ak.zip({\"dog\": dog[np.newaxis]}, depth_limit=1)\r\n1.1.2\r\n\r\nIn [11]: dict(pets)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-11-f7ecb9a598b4> in <module>\r\n----> 1 dict(pets)\r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/awkward/highlevel.py in __getitem__(self, where)\r\n   1765             2\r\n   1766         \"\"\"\r\n-> 1767         return ak._util.wrap(self._layout[where], self._behavior)\r\n   1768\r\n   1769     def __setitem__(self, where, what):\r\n\r\nValueError: scalar Record can only be sliced by field name (string); try \"0\"\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.1.2/src/libawkward/array/Record.cpp#L198)\r\n\r\n```\r\nIt is more than possible I have done something odd with my packages, so let me know if you don't reproduce it. Also apologies if it's already been reported.\r\n\r\nSide note for future readers; if you got here with the same goal I had then you wanted the list of column names, it's `ak.fields(pets)`.",
  "closed_at":"2021-03-31T16:39:15Z",
  "comments":1,
  "created_at":"2021-03-31T14:34:20Z",
  "id":846784202,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NDY3ODQyMDI=",
  "number":797,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Calling dict() on some awkward.highlevel.Array object leads to ValueError.",
  "updated_at":"2021-03-31T17:29:13Z",
  "user":"MDQ6VXNlcjEyOTk2NzYz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The bug was reported here: https://stackoverflow.com/q/66891744/1623645\r\n\r\nActually, it's pyarrow being unable to write its own `pyarrow.lib.Tensor` to Parquet files. Parquet doesn't have a concept of regular-length lists (\"Tensor\"), so that's not completely surprising, but they should at least raise a meaningful error or at most convert the `pyarrow.lib.Tensor` into (possibly nested) `pyarrow.lib.ListArray`. It's very strange that `pyarrow.lib.Tensor` has no `__len__`! But it's an easy work-around for us: this PR adds an `allow_tensor = True` option to `ak.to_arrow`, which `ak.to_parquet` always sets to `False`.",
  "closed_at":"2021-03-31T18:14:39Z",
  "comments":0,
  "created_at":"2021-03-31T17:35:35Z",
  "draft":false,
  "id":847020049,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjA2MDY0ODA1",
  "number":799,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-03-31T18:14:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Forbid 'pyarrow.lib.Tensor' in 'ak.to_parquet'.",
  "updated_at":"2021-03-31T18:14:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"",
  "closed_at":"2021-04-07T17:10:33Z",
  "comments":0,
  "created_at":"2021-04-05T17:01:15Z",
  "draft":false,
  "id":850508667,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjA5MDcwMzY5",
  "number":800,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-07T17:10:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-04-07T17:10:34Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"ak.where works with one argument for regularly shaped arrays,\r\n```\r\nB = ak.Array([[False, True], [True, False]])\r\nak.where(B)\r\n>>> (<Array [0, 1] type='2 * int64'>, <Array [1, 0] type='2 * int64'>)\r\n```\r\nbut not for variable length ones:\r\n```\r\nA = ak.Array([[False, True], [True, False, True]])\r\nak.where(A)\r\n>>> ValueError: in ListOffsetArray64, cannot convert to RegularArray because subarray lengths are not regular\r\n```\r\nA crude workaround is using ak.where with multiple arguments:\r\n```\r\nC = ak.where(A, ak.local_index(A), ak.broadcast_arrays(A, -1)[1])\r\nC[C != -1]\r\n>>> <Array [[1], [0, 2]] type='2 * var * int64'>\r\n```\r\nThe output of `ak.where(A)` should probably also be the same as for the workaround, and not a tuple of arrays as we saw above for `ak.where(B)`.",
  "closed_at":null,
  "comments":4,
  "created_at":"2021-04-06T10:16:48Z",
  "id":851276949,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTEyNzY5NDk=",
  "number":801,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Generalize one-argument ak.where to variable length arrays",
  "updated_at":"2021-04-07T13:30:39Z",
  "user":"MDQ6VXNlcjI0OTgyMDI5"
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"ak.argsort does not return an index-type in the case that the input list array is empty!\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.2.0'\r\n>>> x = ak.Array([[1.1, 2.2], [3.3, 3.1]])\r\n>>> x\r\n<Array [[1.1, 2.2], [3.3, 3.1]] type='2 * var * float64'>\r\n>>> x[x > 5]\r\n<Array [[], []] type='2 * var * float64'>\r\n>>> ak.argsort(x[x > 5])\r\n<Array [[], []] type='2 * var * float64'>\r\n>>> ak.argsort(x)\r\n<Array [[0, 1], [1, 0]] type='2 * var * int64'>\r\n```\r\n",
  "closed_at":"2021-04-07T16:55:42Z",
  "comments":2,
  "created_at":"2021-04-06T21:12:05Z",
  "id":851814061,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTE4MTQwNjE=",
  "number":802,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"awkward.argsort does not return correct types for empty lists",
  "updated_at":"2021-04-07T16:55:43Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"addresses issue https://github.com/scikit-hep/awkward-1.0/issues/802",
  "closed_at":"2021-04-07T16:36:05Z",
  "comments":5,
  "created_at":"2021-04-07T08:31:04Z",
  "draft":false,
  "id":852161213,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjEwNDYwMzk4",
  "number":803,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-07T16:36:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"argsort to return an index-type in the case that the input list array is empty",
  "updated_at":"2021-04-07T20:46:05Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Awkward version = 1.2.0\r\n\r\n```python3\r\nimport awkward as ak\r\n\r\nmuon = ak.Array([[{\"pt\": 1.}],[]], with_name=\"muon\")\r\nelectron = ak.Array([[],[{\"pt\": 1.}]], with_name=\"electron\")\r\n\r\nmuon = muon[muon.pt > 5]\r\nelectron = electron[electron.pt > 5]\r\n\r\nleptons = ak.concatenate([muon,electron], axis=1)\r\ncandidate = ak.firsts(leptons)\r\n\r\nak.cartesian([candidate, candidate])\r\n```\r\n\r\nfails with:\r\n```\r\nTraceback (most recent call last):\r\n  File \"make_example.py\", line 12, in <module>\r\n    prod = ak.cartesian([candidate,candidate])\r\n  File \"/opt/conda/lib/python3.8/site-packages/awkward/operations/structure.py\", line 3089, in cartesian\r\n    out = ak._util.broadcast_and_apply(\r\n  File \"/opt/conda/lib/python3.8/site-packages/awkward/_util.py\", line 1037, in broadcast_and_apply\r\n    out = apply(broadcast_pack(inputs, isscalar), 0, user)\r\n  File \"/opt/conda/lib/python3.8/site-packages/awkward/_util.py\", line 799, in apply\r\n    outcontent = apply(nextinputs, depth + 1, user)\r\n  File \"/opt/conda/lib/python3.8/site-packages/awkward/_util.py\", line 752, in apply\r\n    outcontent = apply(nextinputs, depth, user)\r\n  File \"/opt/conda/lib/python3.8/site-packages/awkward/_util.py\", line 717, in apply\r\n    for i in range(numoutputs)\r\nUnboundLocalError: local variable 'numoutputs' referenced before assignment\r\n```\r\n\r\nand indeed numoutputs is not defined in the case there are no unique non-null entries.",
  "closed_at":"2021-04-08T18:04:39Z",
  "comments":7,
  "created_at":"2021-04-07T18:57:08Z",
  "id":852715596,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTI3MTU1OTY=",
  "number":805,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.cartesian fails on empty lists of union types",
  "updated_at":"2021-04-08T18:04:39Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Descriptors for class `PartitionedArray` and `IrregularlyPartitionedArray` are not accessible via:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n1.2.0\r\n>>> array = ak.repartition([{\"x\": x, \"y\": x * 10} for x in range(10)], 2)\r\n>>> array.layout\r\n<IrregularlyPartitionedArray>\r\n    <partition start=\"0\" stop=\"2\">\r\n        <RecordArray length=\"2\">\r\n            <field index=\"0\" key=\"x\">\r\n                <NumpyArray format=\"l\" shape=\"2\" data=\"0 1\" at=\"0x00010f038200\"/>\r\n            </field>\r\n            <field index=\"1\" key=\"y\">\r\n                <NumpyArray format=\"l\" shape=\"2\" data=\"0 10\" at=\"0x00010f03a200\"/>\r\n            </field>\r\n        </RecordArray>\r\n    </partition>\r\n    <partition start=\"2\" stop=\"4\">\r\n        <RecordArray length=\"2\">\r\n            <field index=\"0\" key=\"x\">\r\n                <NumpyArray format=\"l\" shape=\"2\" data=\"2 3\" at=\"0x00010f038200\"/>\r\n            </field>\r\n            <field index=\"1\" key=\"y\">\r\n                <NumpyArray format=\"l\" shape=\"2\" data=\"20 30\" at=\"0x00010f03a200\"/>\r\n            </field>\r\n        </RecordArray>\r\n    </partition>\r\n</IrregularlyPartitionedArray>\r\n\r\n>>> ak.partitions(array)\r\n[2,2]\r\n>>> array.partitions\r\n\r\nAttributeError: no field named 'partitions'\r\n```\r\nAccording to the docs, this should be a valid repartition? \r\n\r\nThe [tests](https://github.com/scikit-hep/awkward-1.0/blob/main/tests/test_0056-partitioned-array.py) do not cover `ak.repartition` with partitioned array methods, but following one test leads to:\r\n```python\r\n>>> one = ak.from_iter([[1.1, 2.2, 3.3], [], [4.4, 5.5]], highlevel=False)\r\n>>> two = ak.from_iter([[6.6], [], [], [], [7.7, 8.8, 9.9]], highlevel=False)\r\n>>> array = ak.partition.IrregularlyPartitionedArray([one, two])\r\n>>> array.layout\r\n\r\nAttributeError: no field named 'layout'\r\n```\r\n\r\nAccording to the docs, I would expect this to work as\r\n> [...] it should behave identically to a non-partitioned array [...]",
  "closed_at":"2021-04-07T20:38:32Z",
  "comments":1,
  "created_at":"2021-04-07T20:20:21Z",
  "id":852779607,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTI3Nzk2MDc=",
  "number":806,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"PartitionedArray class properties not correctly implemented ",
  "updated_at":"2021-04-07T20:38:33Z",
  "user":"MDQ6VXNlcjI1ODgzNjA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"proposed error message for `ak.cartesian` reported by @lgray - issue https://github.com/scikit-hep/awkward-1.0/issues/805",
  "closed_at":"2021-04-08T18:04:39Z",
  "comments":15,
  "created_at":"2021-04-08T09:32:51Z",
  "draft":false,
  "id":853272707,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjExMzg3ODI2",
  "number":808,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-08T18:04:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Issue #805: fix an empty case when broadcasting UnionArrays",
  "updated_at":"2021-04-08T18:40:25Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Using the following file as input, because constructing a trivial example has proven painful:\r\nhttps://drive.google.com/file/d/1a1Zla1htgjgF_b74Y0TKgcA3PABSpTFf/view?usp=sharing\r\n\r\nYou will need a recent version of coffea installed to run this (just pip install coffea).\r\nI am using awkward==1.3.0rc1.\r\n\r\nThe following script:\r\n```python3\r\nfrom coffea import nanoevents\r\nimport awkward as ak\r\n\r\nnanoevents.NanoAODSchema.mixins[\"FatJetLS\"] = \"PtEtaPhiMLorentzVector\"\r\n\r\nx = nanoevents.NanoEventsFactory.from_root(\r\n    './nano106Xv8_on_mini106X_2017_mc_NANO_py_NANO_7.root',\r\n    entry_start=100560, \r\n    entry_stop=102266\r\n)\r\n\r\nevents = x.events()\r\n\r\nmuons = events.Muon\r\nelectrons = events.Electron\r\njets = events.Jet\r\nfatjets = events.FatJet\r\nsubjets = events.SubJet\r\nfatjetsLS = events.FatJetLS\r\nmet = events.MET\r\n\r\ngoodmuon = (\r\n    (muons.mediumId)\r\n    & (muons.miniPFRelIso_all <= 0.2)\r\n    & (muons.pt >= 27)\r\n    & (abs(muons.eta) <= 2.4)\r\n    & (abs(muons.dz) < 0.1)\r\n    & (abs(muons.dxy) < 0.05)\r\n    & (muons.sip3d < 4)\r\n)\r\ngood_muons = muons[goodmuon]\r\n\r\n# electrons\r\ngoodelectron = (\r\n    (electrons.mvaFall17V2noIso_WP90)\r\n    & (electrons.pt >= 30)\r\n    & (abs(electrons.eta) <= 1.479)\r\n    & (abs(electrons.dz) < 0.1)\r\n    & (abs(electrons.dxy) < 0.05)\r\n    & (electrons.sip3d < 4)\r\n)\r\ngood_electrons = electrons[goodelectron]\r\n\r\nleptons = ak.concatenate([muons, electrons], axis=1)\r\ngood_leptons = ak.concatenate([good_muons, good_electrons], axis=1)\r\n\r\nidx1 = ak.argsort(leptons.pt, axis=1)\r\nidx2 = ak.argsort(good_leptons.pt, axis=1)\r\n\r\nleptons[idx1]\r\n\r\ngood_leptons[idx2]\r\n```\r\n\r\nfails with\r\n```\r\nTraceback (most recent call last):\r\n  File \"test_unions.py\", line 52, in <module>\r\n    good_leptons[idx2]\r\n  File \"/Users/lagray/miniconda3/envs/coffea-jetmet/lib/python3.7/site-packages/awkward/highlevel.py\", line 974, in __getitem__\r\n    return ak._util.wrap(self.layout[where], self._behavior)\r\nValueError: only arrays of integers or booleans may be used as a slice\r\n```\r\n\r\nand indeed ak.argsort(good_leptons, axis=1) has some wacky type:\r\n```python3\r\n1706 * var * union[float32[parameters={\"__doc__\": \"pt\"}], float32[parameters={\"__doc__\": \"p_{T}\"}]]\r\n```\r\n\r\nThe only difference between the path to idx1 and idx2 is that good_leptons is empty for this slice of events in this file.",
  "closed_at":"2021-04-09T15:18:15Z",
  "comments":3,
  "created_at":"2021-04-08T22:09:58Z",
  "id":853979204,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTM5NzkyMDQ=",
  "number":811,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Empty union types don't pass through ak.argsort correctly",
  "updated_at":"2021-04-09T15:18:15Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"address issue #811 ",
  "closed_at":"2021-04-09T15:10:02Z",
  "comments":7,
  "created_at":"2021-04-09T07:43:44Z",
  "draft":false,
  "id":854263321,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjEyMjM0NDU2",
  "number":812,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-09T15:10:02Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"argsort bugfix for empty arrays",
  "updated_at":"2021-04-09T15:10:03Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Normally np.zeros_like can be given a dtype argument, like;\r\n```python3\r\nimport numpy as np\r\ncat = np.array([1, 2])\r\nmask = np.zeros_like(bird, dtype=bool)\r\n```\r\nIt's particularly useful when creating masks, but I've used it to ensure and array is an int array too.\r\nWhen used on an awkward array this throws an error;\r\n```python3\r\nIn [1]: import awkward\r\n\r\nIn [2]: import numpy as np\r\n\r\nIn [3]: dog = awkward.from_iter([2, 5])\r\n\r\nIn [4]: mask = np.zeros_like(dog, dtype=bool)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-4-8daf51a4c0a1> in <module>\r\n----> 1 mask = np.zeros_like(dog, dtype=bool)\r\n\r\n<__array_function__ internals> in zeros_like(*args, **kwargs)\r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/awkward/highlevel.py in __array_function__(self, func, types, args, kwargs)\r\n   1396         See also #__array_ufunc__.\r\n   1397         \"\"\"\r\n-> 1398         return ak._connect._numpy.array_function(func, types, args, kwargs)\r\n   1399\r\n   1400     @property\r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/awkward/_connect/_numpy.py in array_function(func, types, args, kwargs)\r\n     26         return NotImplemented\r\n     27     else:\r\n---> 28         return function(*args, **kwargs)\r\n     29\r\n     30\r\n\r\nTypeError: zeros_like() got an unexpected keyword argument 'dtype'\r\n```\r\nThere are plenty of ways round this, but it would be neat if it did work.",
  "closed_at":"2021-04-13T19:12:24Z",
  "comments":11,
  "created_at":"2021-04-09T12:33:28Z",
  "id":854482838,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTQ0ODI4Mzg=",
  "number":813,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Can np.zeros_like(awkd_array) have a dtype argument?",
  "updated_at":"2021-04-13T19:12:24Z",
  "user":"MDQ6VXNlcjEyOTk2NzYz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Is this the right branch to be making a pull request to? \r\nI still need to add the tests.",
  "closed_at":"2021-04-13T19:12:24Z",
  "comments":1,
  "created_at":"2021-04-09T15:37:35Z",
  "draft":false,
  "id":854635338,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjEyNTQ5MjU1",
  "number":814,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-13T19:12:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Added dtype argument to ones/zeros/full_like functions",
  "updated_at":"2021-04-13T19:12:24Z",
  "user":"MDQ6VXNlcjEyOTk2NzYz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Using the following file as input, because constructing a trivial example has proven painful:\r\nhttps://drive.google.com/file/d/1t4iyU103CEWDuF9Tqx36D2cPVDyxdJDP/view?usp=sharing\r\n\r\nYou will need a recent version of coffea installed to run this (just pip install coffea).\r\nI am using the current main branch of awkward, which will soon also be in 1.30.rc2.\r\n\r\nThe issue is that when a `?union[type1 type2]` array contains all Nones it loses its ability behave as either type1 or type2, which is preserved when the array has non-None elements.\r\n\r\nIt's pretty clear when that's the only difference between consecutive 1000 event chunks in the same file.\r\n\r\nHere's the script for reproducing the error:\r\n```python3\r\nfrom coffea import nanoevents\r\nfrom coffea.nanoevents.methods import candidate\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\nnanoevents.NanoAODSchema.mixins[\"FatJetLS\"] = \"PtEtaPhiMLorentzVector\"\r\n\r\ndef script_excerpt(start, stop):\r\n    x = nanoevents.NanoEventsFactory.from_root(\r\n        './nano106Xv8_on_mini106X_2017_mc_NANO_py_NANO_46.root',\r\n        entry_start=start,\r\n        entry_stop=stop,\r\n    )\r\n\r\n    events = x.events()\r\n\r\n    muons = events.Muon\r\n    electrons = events.Electron\r\n    jets = events.Jet\r\n    fatjets = events.FatJet\r\n    subjets = events.SubJet\r\n    fatjetsLS = events.FatJetLS\r\n    met = events.MET\r\n\r\n    goodmuon = (\r\n        (muons.mediumId)\r\n        & (muons.miniPFRelIso_all <= 0.2)\r\n        & (muons.pt >= 27)\r\n        & (abs(muons.eta) <= 2.4)\r\n        & (abs(muons.dz) < 0.1)\r\n        & (abs(muons.dxy) < 0.05)\r\n        & (muons.sip3d < 4)\r\n    )\r\n    good_muons = muons[goodmuon]\r\n    ngood_muons = ak.sum(goodmuon, axis=1)\r\n\r\n    # electrons\r\n    goodelectron = (\r\n        (electrons.mvaFall17V2noIso_WP90)\r\n        & (electrons.pt >= 30)\r\n        & (abs(electrons.eta) <= 1.479)\r\n        & (abs(electrons.dz) < 0.1)\r\n        & (abs(electrons.dxy) < 0.05)\r\n        & (electrons.sip3d < 4)\r\n    )\r\n    good_electrons = electrons[goodelectron]\r\n    ngood_electrons = ak.sum(goodelectron, axis=1)\r\n        \r\n    # good leptons\r\n    good_leptons = ak.concatenate(\r\n        [good_muons, good_electrons],\r\n        axis=1,\r\n        #behavior=candidate.behavior,\r\n    )\r\n    print(\"name of good_leptons ->\", good_leptons.layout.purelist_parameter(\"__record__\"))\r\n    print(ak.argsort(good_leptons.pt))\r\n    good_leptons = good_leptons[ak.argsort(good_leptons.pt)]\r\n    candidatelep = ak.firsts(good_leptons)\r\n\r\n    # jets\r\n    ht = ak.sum(jets[jets.pt > 30].pt,axis=1)\r\n    goodjet = (\r\n        (jets.isTight)\r\n        & (jets.pt > 30)\r\n        & (abs(jets.eta) <= 2.5)\r\n    )\r\n    good_jets = jets[goodjet]\r\n\r\n    good_fatjet = (\r\n        (fatjets.isTight)\r\n        & (abs(fatjets.eta) <= 2.4)\r\n        & (fatjets.pt > 50)\r\n        & (fatjets.msoftdrop > 30)\r\n        & (fatjets.msoftdrop < 210)\r\n    )\r\n    good_fatjets = fatjets[good_fatjet]\r\n\r\n    # hbb candidate\r\n    mask_hbb = (\r\n        (good_fatjets.pt > 200)\r\n        & (good_fatjets.delta_r(candidatelep) > 2.0)\r\n    )\r\n    candidateHbb = ak.firsts(good_fatjets[mask_hbb])\r\n\r\n    # number of AK4 away from bb jet\r\n    jets_awayHbb = jets[good_jets.delta_r(candidateHbb) >= 1.2]\r\n\r\n    # fat jets Lepton Subtracted\r\n    # TODO: add ID\r\n    # TODO: add 2 subjets w pt > 20 & eta<2.4\r\n    good_fatjetLS = (\r\n        (fatjetsLS.pt > 0)\r\n        # & (fatjetsLS.delta_r(candidatelep) > 1.2)\r\n    )\r\n    good_fatjetLSs = fatjetsLS[good_fatjetLS]\r\n\r\n    # wqq candidate\r\n    mask_hww = (\r\n        (good_fatjetLSs.mass > 10)\r\n    )\r\n    candidateWjj = ak.firsts(fatjetsLS)\r\n    print(len(candidateWjj.pt))\r\n    print(candidateWjj.pt)\r\n    candidateWjj = ak.firsts(\r\n        good_fatjetLSs[mask_hww][ak.argmin(\r\n            good_fatjetLSs[mask_hww].delta_r(candidatelep),\r\n            axis=1,\r\n            keepdims=True)\r\n        ]\r\n    )\r\n    print(len(candidateWjj.pt))\r\n    print(candidateWjj.pt)\r\n\r\n    # TODO: add lvqq likelihood and HWW mass reconstruction\r\n    # For now, reconstruct the mass by taking qq jet, lepton and MET and solving for the z component of the neutrino momentum\r\n    # by requiring that the invariant mass of the group of objects is the Higgs mass = 125\r\n    def getNeutrinoZ(vis,inv,h_mass=125):\r\n        a = h_mass*h_mass - vis.mass*vis.mass + 2*vis.x*inv.x + 2*vis.y*inv.y\r\n        A = 4*(vis.t*vis.t - vis.z*vis.z)\r\n        B = -4*a*vis.z\r\n        C = 4*vis.t*vis.t*(inv.x*inv.x + inv.y*inv.y) - a*a\r\n        delta = B*B - 4*A*C\r\n        invZ = ((delta<0)*( -B/(2*A) )\r\n               + (delta>0)*( np.maximum( (-B + np.sqrt(delta))/(2*A), (-B - np.sqrt(delta))/(2*A)) ))\r\n        neutrino =  ak.zip({\"x\": inv.x,\r\n                            \"y\": inv.y,\r\n                            \"z\": invZ,\r\n                            \"t\": np.sqrt(inv.x*inv.x + inv.y*inv.y + invZ*invZ),\r\n                        },\r\n                        with_name=\"LorentzVector\")\r\n        return neutrino\r\n\r\n    print(candidatelep)\r\n    print(candidateWjj)\r\n\r\n    vis = candidatelep + candidateWjj  # error occurs here!!!!\r\n            \r\n    candidateNeutrino = getNeutrinoZ(candidatelep + candidateWjj, met)\r\n\r\nif __name__ == \"__main__\":\r\n    # works\r\n    script_excerpt(99860, 100860)\r\n    \r\n    # doesn't work\r\n    script_excerpt(100860, 101878)\r\n```",
  "closed_at":"2021-04-09T19:34:37Z",
  "comments":4,
  "created_at":"2021-04-09T15:39:32Z",
  "id":854636722,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTQ2MzY3MjI=",
  "number":815,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Option-union arrays loose naming / typing information when all Nones.",
  "updated_at":"2021-04-09T19:34:37Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-04-09T19:34:37Z",
  "comments":0,
  "created_at":"2021-04-09T18:22:25Z",
  "draft":false,
  "id":854756083,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjEyNjQ4OTE3",
  "number":816,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-09T19:34:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Broadcast union types to all possibilities, even ones with no instances in the array.",
  "updated_at":"2021-04-09T19:34:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Using `ak.unflatten` with `axis=1` gives an error for awkward v1.2.1:\r\n```\r\n>>> a = ak.Array([[1,2,3,4],[5,6,7,8]])\r\n>>> ak.unflatten(a, 2, axis=0)\r\n<Array [[[1, 2, 3, 4], [5, 6, 7, 8]]] type='1 * 2 * var * int64'>\r\n>>> ak.unflatten(a, 2, axis=1)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/afs/desy.de/user/s/stafford/.local/lib/python3.8/site-packages/awkward/operations/structure.py\", line 2091, in unflatten\r\n    out = ak._util.recursively_apply(\r\n  File \"/afs/desy.de/user/s/stafford/.local/lib/python3.8/site-packages/awkward/_util.py\", line 1302, in recursively_apply\r\n    return apply(layout, 1, user)\r\n  File \"/afs/desy.de/user/s/stafford/.local/lib/python3.8/site-packages/awkward/_util.py\", line 1098, in apply\r\n    custom = getfunction(layout, *args)\r\n  File \"/afs/desy.de/user/s/stafford/.local/lib/python3.8/site-packages/awkward/operations/structure.py\", line 2059, in getfunction\r\n    inneroffsets = nplike.asarray(content.offsets)\r\nAttributeError: 'awkward._ext.RegularArray' object has no attribute 'offsets'\r\n```\r\nUsing an array of depth 3 I got the error for both  axis=1 and axis=2.\r\n\r\nThank you\r\n\r\nDominic",
  "closed_at":"2021-04-12T19:25:10Z",
  "comments":3,
  "created_at":"2021-04-12T16:09:14Z",
  "id":856131393,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTYxMzEzOTM=",
  "number":819,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.unflatten doesn't seem to work for axis>0",
  "updated_at":"2021-04-13T09:38:35Z",
  "user":"MDQ6VXNlcjYwMjkyMjQ3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-04-12T19:25:11Z",
  "comments":0,
  "created_at":"2021-04-12T18:47:54Z",
  "draft":false,
  "id":856253336,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjEzODYxNTE5",
  "number":820,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-12T19:25:10Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes issue #819: unflattening at axis>0 with a scalar.",
  "updated_at":"2021-04-12T19:25:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Version 1.2.1 is missing the macOS wheel for Python 3.9. causing it to try to build from source. The wheel was present in 1.2.0.",
  "closed_at":"2021-04-14T18:07:38Z",
  "comments":5,
  "created_at":"2021-04-12T19:41:15Z",
  "id":856301227,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTYzMDEyMjc=",
  "number":821,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Version 1.2.1 missing macOS 3.9 wheel",
  "updated_at":"2021-04-14T18:07:38Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"sorry for opening another issue :-/ , i'm just trying things out and cross-checking with my expectations \r\n\r\nStarting with the same examplle\r\n```\r\ndata = [\r\n    {\"px\": 1., \"py\": 1.1, \"pz\": 0.1, 'E': 3.3},\r\n    {\"px\": 2., \"py\": 2.2, \"pz\": 0.2, 'E': 3.3}\r\n]\r\n\r\narr = vc.awk(data)\r\n```\r\ngives\r\n\r\n```\r\n<MomentumArray4D [{x: 1, y: 1.1, z: 0.1, ... t: 3.3}] type='2 * Momentum4D[\"x\": ...'>\r\n```\r\n\r\nbut two (i would think) identical ways to add them yield the same data\r\n\r\n\r\n```python\r\n>>> print(ak.to_list(arr[0] +  arr[1]))\r\n... print(ak.to_list(ak.sum(arr,axis=-1)))\r\n{'x': 3.0, 'y': 3.3000000000000003, 'z': 0.30000000000000004, 't': 6.6}\r\n{'x': 3.0, 'y': 3.3000000000000003, 'z': 0.30000000000000004, 't': 6.6}\r\n```\r\n\r\nbut different types\r\n\r\n```python\r\n>>> print(ak.type(arr[0] +  arr[1]))\r\n... print(ak.type(ak.sum(arr,axis=-1)))\r\nMomentum4D[\"x\": float64, \"y\": float64, \"z\": float64, \"t\": float64]\r\n{\"x\": float64, \"y\": float64, \"z\": float64, \"t\": float64}\r\n```\r\n\r\ntrying to fix things up manually gets the type right\r\n\r\n```python\r\n>>> print(ak.type(ak.Record(ak.sum(arr,axis=-1),with_name = 'Momentum4D')))\r\nMomentum4D[\"x\": float64, \"y\": float64, \"z\": float64, \"t\": float64]\r\n```\r\n\r\nbut the bahavior is broken (trying to get the mass)\r\n\r\n```python\r\n>>>  ak.Record(ak.sum(arr,axis=-1),with_name = 'Momentum4D').mass\r\n\r\n   1799                 raise AttributeError(\r\n   1800                     \"no field named {0}\".format(repr(where))\r\n-> 1801                     + ak._util.exception_suffix(__file__)\r\n   1802                 )\r\n   1803 \r\n\r\nAttributeError: no field named 'mass'\r\n```\r\n\r\nwhile on the other type of summing it works\r\n\r\n\r\n```python\r\n>>> (arr[0] +  arr[1]).mass\r\n4.8559242168715935\r\n```\r\n",
  "closed_at":"2021-04-12T23:52:47Z",
  "comments":5,
  "created_at":"2021-04-12T22:38:32Z",
  "id":856417759,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTY0MTc3NTk=",
  "number":824,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Override 'ak.sum' for custom types (expected in Vector)",
  "updated_at":"2021-04-13T01:50:16Z",
  "user":"MDQ6VXNlcjIzMTgwODM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-04-12T23:52:47Z",
  "comments":0,
  "created_at":"2021-04-12T23:15:51Z",
  "draft":false,
  "id":856428388,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE0MDA3MzUy",
  "number":825,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-12T23:52:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix ak.Record's promote to behavior.",
  "updated_at":"2021-04-12T23:52:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Really little fix.",
  "closed_at":"2021-04-13T15:36:50Z",
  "comments":2,
  "created_at":"2021-04-13T12:43:37Z",
  "draft":false,
  "id":856924518,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE0NDI3ODA5",
  "number":826,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-13T15:36:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fixed string inequality comparison",
  "updated_at":"2021-04-13T15:36:50Z",
  "user":"MDQ6VXNlcjEyOTk2NzYz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @HenryDayHall as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward-1.0/pull/826#issuecomment-818833668)",
  "closed_at":"2021-04-13T16:14:14Z",
  "comments":0,
  "created_at":"2021-04-13T15:36:38Z",
  "draft":false,
  "id":857084630,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE0NTYzODQy",
  "number":827,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-13T16:14:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add HenryDayHall as a contributor",
  "updated_at":"2021-04-13T16:14:15Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"As everything can be nullable in Arrow (and Parquet) an Arrow Array of type `DataType(null)` with `num_buffers = 1` could be handled separately in `.from_arrow()` or should be excepted.\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n1.2.2\r\n>>> ak.from_arrow(pa.Table.from_pydict({'null col': [None]}))\r\nAssertionError:\r\n[...]\r\nawkward/operations/convert.py in popbuffers(array, tpe, buffers)\r\n   2755 \r\n   2756         elif isinstance(tpe, pyarrow.lib.DataType):\r\n-> 2757             assert tpe.num_buffers == 2\r\n[...]\r\n```\r\nThe problem:\r\n```python\r\n>>> pa.Table.from_pydict({'null col': [None]}).column(0).chunks[0].type.num_buffers\r\n1\r\n```\r\n\r\nIn the reverse, I experienced that a nullable (valid) awkward Array gets transformed into Record Arrow Array of type (consider nullability on both levels):\r\n```\r\npyarrow.Table\r\nnullable_field: list<item: double> not null\r\n  child 0, item: double not null\r\n```\r\nThat fails to be written to parquet (similar to #678). Hard to reproduce but I suspect a similar or common(?) unhandled case for nullable fields?",
  "closed_at":"2021-04-13T17:07:09Z",
  "comments":2,
  "created_at":"2021-04-13T15:40:34Z",
  "id":857088175,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTcwODgxNzU=",
  "number":828,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"from_arrow() fails when arrow array is of type `DataType(null)`",
  "updated_at":"2021-04-13T17:09:54Z",
  "user":"MDQ6VXNlcjI1ODgzNjA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-04-13T17:10:10Z",
  "comments":0,
  "created_at":"2021-04-13T16:22:26Z",
  "draft":false,
  "id":857124824,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE0NTk3NjU5",
  "number":829,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-13T17:10:10Z"
  },
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Handle Arrow's DataType(null).",
  "updated_at":"2021-04-13T17:10:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Small cleanup, removing lots of duplicated code, and avoiding distutils for Python 3 while we are at it.\n",
  "closed_at":"2021-04-14T19:12:50Z",
  "comments":0,
  "created_at":"2021-04-14T18:30:56Z",
  "draft":false,
  "id":858160324,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE1NDYxNDUw",
  "number":831,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-14T19:12:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: cleanup setup.py",
  "updated_at":"2021-04-14T19:15:23Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Originally mentioned in https://github.com/scikit-hep/awkward-1.0/issues/490#issuecomment-712250246. Mainly all I'm looking for is a nice shortcut for `array[~ak.is_none(array, axis=-1)]` (I think this would cover any of my own use cases), although the default behavior (`axis=None`?) for a `drop_none` function should probably be to do this on every axis. A particularly important case for this function is that functions like `np.histogram()` and `plt.hist()` do not handle masked arrays properly (https://github.com/numpy/numpy/issues/10019).",
  "closed_at":"2023-01-05T14:31:11Z",
  "comments":8,
  "created_at":"2021-04-15T13:29:58Z",
  "id":858883246,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTg4ODMyNDY=",
  "number":832,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add a `drop_none()`",
  "updated_at":"2023-01-05T14:31:12Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Working on some CMake cleanups. Second comment is automated formatting, so look at the changes from the first comment only if you want to see what has changed.\r\n\r\n- chore: cleanup cmake\r\n- style: cmake format\r\n",
  "closed_at":"2021-05-03T18:31:13Z",
  "comments":2,
  "created_at":"2021-04-15T13:32:25Z",
  "draft":false,
  "id":858885474,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE2MDU0ODEz",
  "number":833,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-03T18:31:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: cmake cleanup",
  "updated_at":"2021-05-03T18:31:13Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Leaving the pre-commit job commented out for now, waiting for the Flake8 commented out messages to be addressed (since it doesn't allow comments in setup.cfg).\r\n\r\nMostly follows a standard ordering and spacing, also can catch a few missing fields and classifiers. Checks for consistency, as well.",
  "closed_at":"2021-05-03T17:57:36Z",
  "comments":0,
  "created_at":"2021-04-15T13:34:41Z",
  "draft":false,
  "id":858887477,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE2MDU2NTE4",
  "number":834,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-03T17:57:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"style: setup.cfg formatting",
  "updated_at":"2021-05-03T17:57:36Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"issue https://github.com/scikit-hep/awkward-1.0/issues/367",
  "closed_at":"2021-06-10T19:39:53Z",
  "comments":8,
  "created_at":"2021-04-15T16:12:39Z",
  "draft":false,
  "id":859036120,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE2MTgxMDQ5",
  "number":835,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-10T19:39:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"support 'datetime64' and 'timedelta64' types",
  "updated_at":"2021-06-11T09:10:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"So when trying to save a parquet with an array of various types I came across an issue. If all my arrays contain ints and floats, it's fine but if one array contains bools I get a ValueError. This appears in both version 1.2.1 and 1.3.0rc1.\r\n\r\n```python\r\nIn [3]: gob = ak.Array([3.4, 5.6])[np.newaxis]\r\n   ...: clob = ak.Array([2, 3, 7])[np.newaxis]\r\n   ...: log = ak.zip({\"c\": clob, \"g\": gob}, depth_limit=1)\r\n   ...: ak.to_parquet(log, \"test.parquet\")\r\n\r\nIn [4]: gob = ak.Array([True, True])[np.newaxis]\r\n   ...: clob = ak.Array([2, 3, 7])[np.newaxis]\r\n   ...: log = ak.zip({\"c\": clob, \"g\": gob}, depth_limit=1)\r\n   ...: ak.to_parquet(log, \"test.parquet\")\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-4-4eaa8e961b03> in <module>\r\n      2 clob = ak.Array([2, 3, 7])[np.newaxis]\r\n      3 log = ak.zip({\"c\": clob, \"g\": gob}, depth_limit=1)\r\n----> 4 ak.to_parquet(log, \"test.parquet\")\r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/awkward/operations/convert.py in to_parquet(array, where, explode_records, list_to32, string_to32, bytestring_to32, **options)\r\n   2958     layout = to_layout(array, allow_record=False, allow_other=False)\r\n   2959     iterator = batch_iterator(layout)\r\n-> 2960     first = next(iterator)\r\n   2961\r\n   2962     if \"schema\" not in options:\r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/awkward/operations/convert.py in batch_iterator(layout)\r\n   2942                         string_to32=string_to32,\r\n   2943                         bytestring_to32=bytestring_to32,\r\n-> 2944                         allow_tensor=False,\r\n   2945                     )\r\n   2946                 )\r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/awkward/operations/convert.py in to_arrow(array, list_to32, string_to32, bytestring_to32, allow_tensor)\r\n   2464             )\r\n   2465\r\n-> 2466     return recurse(layout, None, False)\r\n   2467\r\n   2468\r\n\r\n~/Programs/anaconda3/envs/tree/lib/python3.7/site-packages/awkward/operations/convert.py in recurse(layout, mask, is_option)\r\n   1997                         int(numpy.ceil(len(numpy_arr) / 8.0)) * 8, dtype=numpy_arr.dtype\r\n   1998                     )\r\n-> 1999                     ready_to_pack[: len(numpy_arr)] = numpy_arr\r\n   2000                     ready_to_pack[len(numpy_arr) :] = 0\r\n   2001                 numpy_arr = numpy.packbits(\r\n\r\nValueError: could not broadcast input array from shape (2) into shape (1)\r\n\r\n```\r\nIf this is actually a bug and not some mistake on my part I'd be happy to attempt a fix?",
  "closed_at":"2021-04-16T20:50:39Z",
  "comments":1,
  "created_at":"2021-04-15T16:44:53Z",
  "id":859064691,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTkwNjQ2OTE=",
  "number":836,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Something wrong with putting bools in parquets",
  "updated_at":"2021-04-16T20:50:39Z",
  "user":"MDQ6VXNlcjEyOTk2NzYz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-04-16T20:50:39Z",
  "comments":0,
  "created_at":"2021-04-15T17:04:13Z",
  "draft":false,
  "id":859078906,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE2MjE3NDE2",
  "number":837,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-16T20:50:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Handle ndim != 1 bool arrays in to_arrow (and hence, Parquet).",
  "updated_at":"2021-04-16T20:50:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"I think I would call at least the first case below a bug even though it doesn't actually affect any array operations.\r\n\r\nThere are certain `Array`s that have string representations that seem misleading:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.2.2'\r\n>>> ak.Array([[True], [], [True], [True], [True], []])\r\n<Array [[True], [], [True, ... [True], []] type='6 * var * bool'>\r\n```\r\n\r\nThe comma after the second `True` makes it seem like there are more elements in that third list. I would have expected something like `<Array [[True], [], [True], ... [True], []] type='6 * var * bool'>` instead.\r\n\r\nLess inaccurate but still potentially misleading are cases like:\r\n\r\n```python\r\n>>> ak.Array([[0], [], [0, 1, 2, 3], [1, 0], [0], [], []])\r\n<Array [[0], [], [0, 1, 2, ... 0], [0], [], []] type='7 * var * int64'>\r\n```\r\n\r\nThis makes it look like `[0, 1, 2, ... 0]` is all the same list. You can tell the difference by counting the number of entries and comparing to the length of 7, but I would have expected something like `<Array [[0], [], [0, 1, 2, ... ], ... [ ... 0], [0], [], []] type='7 * var * int64'>`.\r\n\r\n(Actually, it's always confused me why `__repr__` and `__str__` don't just show the whole array like numpy. I guess `ak.to_list()` always works for that at least.)",
  "closed_at":"2021-10-21T22:27:41Z",
  "comments":6,
  "created_at":"2021-04-16T08:46:42Z",
  "id":859608052,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NTk2MDgwNTI=",
  "number":838,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Array `__repr__` and `__str__` can produce misleading text",
  "updated_at":"2021-10-21T22:27:41Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-04-16T21:32:12Z",
  "comments":0,
  "created_at":"2021-04-16T20:50:28Z",
  "draft":false,
  "id":860163597,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE3MTE3NzA4",
  "number":839,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-16T21:32:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Allow scalars in ak.zip and make an ak.Record if they're all scalars.",
  "updated_at":"2021-04-16T21:32:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-04-16T23:01:21Z",
  "comments":1,
  "created_at":"2021-04-16T21:18:45Z",
  "draft":false,
  "id":860178424,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE3MTMwMTYy",
  "number":840,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add an ak.drop_none function.",
  "updated_at":"2021-04-16T23:01:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/PyCQA/flake8: 3.9.0 \u2192 3.9.1](https://github.com/PyCQA/flake8/compare/3.9.0...3.9.1)\n",
  "closed_at":"2021-04-19T17:40:23Z",
  "comments":0,
  "created_at":"2021-04-19T17:01:07Z",
  "draft":false,
  "id":861535320,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE4MTg0NzUx",
  "number":842,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-19T17:40:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-04-19T17:40:23Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The full list is here: https://github.com/scikit-hep/awkward-1.0/pull/834/files#r616043382\r\n",
  "closed_at":"2021-04-19T20:06:39Z",
  "comments":0,
  "created_at":"2021-04-19T17:34:27Z",
  "id":861581470,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NjE1ODE0NzA=",
  "number":843,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Remove \"ignore\" from some Flake8 complaints",
  "updated_at":"2021-04-19T20:06:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-04-19T20:06:39Z",
  "comments":0,
  "created_at":"2021-04-19T17:51:25Z",
  "draft":false,
  "id":861607801,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjE4MjUwNDMz",
  "number":844,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-19T20:06:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Removed \"ignore\" from some Flake8 complaints",
  "updated_at":"2021-04-19T20:06:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The following multiplication produces a result with too few entries in the underlying contents, leading to errors when accessing items:\r\n```python\r\ntransform = ak.Array(\r\n    [\r\n        [0, 1, 0],\r\n        [1, 0, 0],\r\n        [0, 0, 1],\r\n    ]\r\n)\r\n\r\nvector = ak.Array(\r\n    np.r_[4,5,6].reshape(3, 1)    \r\n)\r\n\r\nresult = np.matmul(transform, vector)\r\nresult[0]\r\n```\r\n\r\nThis does not happen if I create the `vector` Array by hand:\r\n```python\r\nvector = ak.Array(\r\n    [\r\n        [4],\r\n        [5],\r\n        [6]\r\n    ]\r\n)\r\nresult = np.matmul(transform, vector)\r\nresult[0]\r\n```\r\n\r\nThis is also true of `transpose(vector) @ transform`\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.2.2'\r\n```\r\n",
  "closed_at":"2021-04-27T21:09:59Z",
  "comments":3,
  "created_at":"2021-04-22T11:37:11Z",
  "id":864845712,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NjQ4NDU3MTI=",
  "number":846,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`np.matmul` produces wrong result with NumPy RHS",
  "updated_at":"2021-04-27T21:09:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR tracks the fix for #846 (assuming that this is indeed a bug). For now, it just adds a test to demonstrate the issue.",
  "closed_at":"2021-04-27T21:09:59Z",
  "comments":6,
  "created_at":"2021-04-22T12:57:53Z",
  "draft":false,
  "id":864920008,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjIxMDY4MjIz",
  "number":847,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-27T21:09:59Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: fix #846 - matrix multiplication with numpy array ",
  "updated_at":"2022-07-08T21:41:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @agoose77 as a contributor for test, code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward-1.0/pull/847#issuecomment-824945482)",
  "closed_at":"2021-04-22T16:41:53Z",
  "comments":1,
  "created_at":"2021-04-22T15:31:50Z",
  "draft":false,
  "id":865087604,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjIxMjA3Njkw",
  "number":848,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-22T16:41:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add agoose77 as a contributor",
  "updated_at":"2021-04-22T16:44:00Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Reproducer on Binder: [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gist/agoose77/0d2765f6d3b8e5b5b0cb75b28b7a95d0/HEAD?filepath=awkward-bug.ipynb)\r\n\r\nGiven an Awkward array and a mask:\r\n```python \r\nlabel = ak.Array([[0, 1, 2, 3], [3, 3, 3, 2, 1]])\r\nis_valid = label != 3\r\n```\r\nthe result of `argsort(label.mask[is_valid])` is not a valid Array. \r\n\r\nIt appears that the result does not maintain the mask, and so the `offsets` node in the layout is invalidated (it still refers to the masked structure).\r\n\r\n```python\r\n>>> label.mask[is_valid].layout\r\n<ListOffsetArray64>\r\n    <offsets><Index64 i=\"[0 4 9]\" offset=\"0\" length=\"3\" at=\"0x0000026d8b10\"/></offsets>\r\n    <content><ByteMaskedArray valid_when=\"true\">\r\n        <mask><Index8 i=\"[1 1 1 0 0 0 0 1 1]\" offset=\"0\" length=\"9\" at=\"0x0000026a7ad0\"/></mask>\r\n        <content><NumpyArray format=\"l\" shape=\"9\" data=\"0 1 2 3 3 3 3 2 1\" at=\"0x0000026dab20\"/></content>\r\n    </ByteMaskedArray></content>\r\n</ListOffsetArray64>\r\n>>> ak.argsort(label.mask[is_valid]).layout\r\n<ListOffsetArray64>\r\n    <offsets><Index64 i=\"[0 4 9]\" offset=\"0\" length=\"3\" at=\"0x0000026d8b10\"/></offsets>\r\n    <content><NumpyArray format=\"l\" shape=\"5\" data=\"0 1 2 1 0\" at=\"0x0000028d0710\"/></content>\r\n</ListOffsetArray64>\r\n```\r\n\r\nI would expect the mask to persist after the call to `argsort` inasmuch as the resulting array has the same \"shape\" as the original array. \r\n\r\n### Awkward Array version\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n1.2.2\r\n```\r\n",
  "closed_at":"2021-04-28T13:33:35Z",
  "comments":3,
  "created_at":"2021-04-26T12:09:58Z",
  "id":867633752,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4Njc2MzM3NTI=",
  "number":849,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"argsort of masked array has wrong layout",
  "updated_at":"2021-04-28T13:33:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"address issue #849 ",
  "closed_at":"2021-04-28T13:32:01Z",
  "comments":1,
  "created_at":"2021-04-26T15:28:38Z",
  "draft":false,
  "id":867830240,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjIzNDM2MjY2",
  "number":850,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-28T13:32:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"masked array sort and argsort bug fix ",
  "updated_at":"2021-04-28T13:32:02Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 20.8b1 \u2192 21.4b0](https://github.com/psf/black/compare/20.8b1...21.4b0)\n",
  "closed_at":"2021-04-26T18:14:49Z",
  "comments":0,
  "created_at":"2021-04-26T17:10:12Z",
  "draft":false,
  "id":867932946,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjIzNTIzMzkw",
  "number":851,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-04-26T18:14:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-04-26T18:14:50Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"The ufunc in awkward seem to be too slow for what they are actually doing. Compared to the Numpy equivalent, there is a difference of a few magnitudes of order. I have studied this with `np.logical_not` on a simple one dimensional array. Other ufuncs appeared to have similar behavior.\r\n![awkward_performance](https://user-images.githubusercontent.com/30041073/116428889-a175e500-a845-11eb-8360-ad8ebd7a0a19.png)\r\n\r\n  <details>\r\n    <summary>Python script to produce the plot</summary>\r\n    <!-- have to be followed by an empty line! -->\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport numpy as np\r\nimport numpy.ma as ma\r\nimport awkward as ak\r\nimport matplotlib.pyplot as plt\r\nfrom timeit import Timer\r\n\r\ndef timeit(func, number=100):\r\n    return Timer(func).timeit(number=number)\r\n\r\ntestsizes = np.logspace(0, 6, 20).astype(int)\r\n\r\nnumpy_time = []\r\nfor size in testsizes:\r\n    a = np.full(size, True)\r\n    numpy_time.append(timeit(lambda: np.logical_not(a)))\r\n\r\nnumpymask_time = []\r\nfor size in testsizes:\r\n    a = ma.masked_array(np.full(size, True), mask=[True] * size)\r\n    numpymask_time.append(timeit(lambda: np.logical_not(a)))\r\n\r\nawkward_time = []\r\nfor size in testsizes:\r\n    a = ak.Array(np.full(size, True))\r\n    awkward_time.append(timeit(lambda: np.logical_not(a)))\r\n\r\nawkwardmask_time = []\r\nfor size in testsizes:\r\n    a = ak.Array(np.full(size, True)).mask[[True] * size]\r\n    awkwardmask_time.append(timeit(lambda: np.logical_not(a)))\r\n\r\nplt.plot(testsizes, numpy_time, label=\"Numpy\", color=\"C0\", linestyle=\"--\")\r\nplt.plot(testsizes, numpymask_time, label=\"Numpy masked\", color=\"C1\", linestyle=\"--\")\r\nplt.plot(testsizes, awkward_time, label=\"Awkward\", color=\"C0\")\r\nplt.plot(testsizes, awkwardmask_time, label=\"Awkward masked\", color=\"C1\")\r\nplt.xscale(\"log\")\r\nplt.yscale(\"log\")\r\nplt.xlabel(\"Array length\")\r\nplt.ylabel(\"Time per 100 iterations in s\")\r\nplt.legend(title=\"Logical not with\", loc=\"upper left\")\r\nplt.show()\r\n```\r\n  </details>\r\n\r\n\r\n\r\nIn https://github.com/scikit-hep/awkward-1.0/issues/442#issuecomment-689669226 the plot shows that the numpy and awkward execution times for large inputs becomes equal. However, I do not see this in my case. In above plot the blue lines might line up for input sizes far outside of what I am using, and the orange ones do not look like they will line up at all.\r\n\r\nI think this is important because of this example timing I got from line_profiler using it on some of my code, `data` and `mask` are simple one dimensional awkward arrays with no further layout other than that they might use an OptionArray, times are in \u00b5s:\r\n```\r\nLine #      Hits         Time  Per Hit   % Time  Line Contents\r\n==============================================================\r\n   130     34668    6706606.0    193.5      2.5              a = ak.is_none(data)\r\n   131     34668   22385934.0    645.7      8.2              b = ~a\r\n   132     34668  190116583.0   5483.9     69.9              mask = mask & b\r\n```\r\nand comepare this to\r\n```\r\n   130     35939   12825258.0    356.9     21.6              a = np.asarray(ak.is_none(data))\r\n   131     35939     172479.0      4.8      0.3              b = ~a\r\n   132     35939    4658937.0    129.6      7.8              c = np.asarray(mask)\r\n   133     35938     108790.0      3.0      0.2              mask = c & b\r\n```\r\n\r\nThis is all using awkward 1.2.2\r\n",
  "closed_at":"2021-05-03T16:51:45Z",
  "comments":6,
  "created_at":"2021-04-28T17:07:10Z",
  "id":870166864,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NzAxNjY4NjQ=",
  "number":852,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Very slow ufuncs, especially when masked",
  "updated_at":"2021-05-03T16:51:45Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-05-03T16:51:28Z",
  "comments":1,
  "created_at":"2021-04-28T22:34:05Z",
  "draft":false,
  "id":870453310,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjI1NjUzMDQ5",
  "number":853,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Performance optimization for Bit/ByteMaskedArray ufuncs.",
  "updated_at":"2021-05-03T16:51:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"awkward version 1.2.2.\r\n\r\nThe inplace bitwise-and operator is missing.\r\n\r\n```py\r\na &= b\r\n``` \r\n\r\nError excerpt from my code:\r\n```\r\nTypeError: operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'bitwise_and'>, '__call__', <Array [False, False, False, ... False, False] type='3460644 * bool'>, <Array [True, True, True, ... True, True, True] type='3460644 * bool'>, out=(<Array [False, False, False, ... False, False] type='3460644 * bool'>,)): 'Array', 'Array', 'Array'\r\n```",
  "closed_at":"2021-05-01T15:27:06Z",
  "comments":4,
  "created_at":"2021-05-01T09:07:12Z",
  "id":873613652,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4NzM2MTM2NTI=",
  "number":854,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Missing operators",
  "updated_at":"2021-05-01T17:39:38Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-05-03T17:49:53Z",
  "comments":1,
  "created_at":"2021-05-02T14:50:19Z",
  "draft":false,
  "id":873961187,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjI4NjIyODk3",
  "number":855,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-03T17:49:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This PR adds documentation for differentiation using JAX.",
  "updated_at":"2021-05-03T17:49:54Z",
  "user":"MDQ6VXNlcjM5ODc4Njc1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 21.4b0 \u2192 21.4b2](https://github.com/psf/black/compare/21.4b0...21.4b2)\n",
  "closed_at":"2021-05-03T19:02:27Z",
  "comments":0,
  "created_at":"2021-05-03T17:08:25Z",
  "draft":false,
  "id":874748263,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjI5MjM4ODY4",
  "number":856,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-03T19:02:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-05-03T19:02:28Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"NONE",
  "body":"This can be simply checked as follows:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> ak.__version__\r\n'1.2.2'\r\n```\r\n\r\nThis works for ak.Arrays:\r\n```python\r\n>>> ak.concatenate(([1],[1]))\r\n<Array [1, 1] type='2 * int64'>\r\n```\r\nThis works for np.ndarrays:\r\n```python\r\n>>> np.concatenate(([1j],[1j]))\r\narray([0.+1.j, 0.+1.j])\r\n```\r\n\r\nThis doesn't work for ak.Arrays\r\n```python\r\n>>> ak.concatenate(([1j],[1j]))\r\n\".../lib/python3.8/site-packages/awkward/operations/structure.py\", line 1529, in concatenate\r\n    out = batch[0].mergemany(batch[1:])\r\nRuntimeError: dtype not in {boolean, int8, int16, int32, int64, uint8, uint16, uint32, uint64, float16, float32, float64, complex64, complex128}\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.2.2/src/libawkward/array/NumpyArray.cpp#L2783)\r\n\r\n```\r\n\r\nThanks in advance for taking care of this!",
  "closed_at":"2021-05-07T14:57:36Z",
  "comments":1,
  "created_at":"2021-05-07T10:06:05Z",
  "id":878713453,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4Nzg3MTM0NTM=",
  "number":857,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Array concatenation not working for complex type",
  "updated_at":"2021-05-07T14:57:36Z",
  "user":"MDQ6VXNlcjI4NzY2ODA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"address issue https://github.com/scikit-hep/awkward-1.0/issues/857",
  "closed_at":"2021-05-07T14:57:36Z",
  "comments":1,
  "created_at":"2021-05-07T12:11:05Z",
  "draft":false,
  "id":878883994,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjMyNjUzMDU1",
  "number":858,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-07T14:57:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"concatenate arrays of complex types",
  "updated_at":"2021-05-07T15:08:15Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"So we were chatting about a possible issue using `np.newaxis` to save arrays of bools on [stackoverflow](https://stackoverflow.com/questions/67436879/awkward1-how-to-set-array-dimension-as-variable/67439610?noredirect=1#comment119232107_67439610).\r\n\r\nI did manage to replicate this in a docker; https://hub.docker.com/r/henrydayhall/awkward_issue_replication\r\n\r\nWhen I run this I get;\r\n```\r\n$ sudo docker run -ti awkwarddoc1\r\nPlease run python3 ~/problem.py\r\nroot@eee2b4b23af5:/# python3 ~/problem.py\r\nAwkward version 1.2.2\r\nSave success\r\nTraceback (most recent call last):\r\n  File \"/root/problem.py\", line 12, in <module>\r\n    ak.to_parquet(zipped, 'test.parquet')\r\n  File \"/usr/local/lib/python3.8/dist-packages/awkward/operations/convert.py\", line 2960, in to_parquet\r\n    first = next(iterator)\r\n  File \"/usr/local/lib/python3.8/dist-packages/awkward/operations/convert.py\", line 2939, in batch_iterator\r\n    to_arrow(\r\n  File \"/usr/local/lib/python3.8/dist-packages/awkward/operations/convert.py\", line 2466, in to_arrow\r\n    return recurse(layout, None, False)\r\n  File \"/usr/local/lib/python3.8/dist-packages/awkward/operations/convert.py\", line 1999, in recurse\r\n    ready_to_pack[: len(numpy_arr)] = numpy_arr\r\nValueError: could not broadcast input array from shape (3,) into shape (1,)\r\n```\r\nIn the Docker I install awkward with pip, on my own system I'm using conda, and both give me the same behaviour.\r\n\r\nSeeing as I can replicate this locally too I'd be happy to try and fix it? On the other hand it could be some issue with how I am importing things or something, which would probably be apparent in the [Dockerfile](https://github.com/HenryDayHall/awkward_docker/blob/master/Dockerfile)?",
  "closed_at":"2021-05-10T14:04:55Z",
  "comments":4,
  "created_at":"2021-05-10T09:47:28Z",
  "id":883852162,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4ODM4NTIxNjI=",
  "number":859,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Replicated issue using np.newaxis on array of bools",
  "updated_at":"2021-05-10T14:37:57Z",
  "user":"MDQ6VXNlcjEyOTk2NzYz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I've noticed the name mismatch when looking at the links you've posted on Slack.",
  "closed_at":"2021-05-11T11:46:32Z",
  "comments":2,
  "created_at":"2021-05-10T11:57:01Z",
  "draft":false,
  "id":884061178,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjM3NDc3Nzkz",
  "number":860,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-11T11:46:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"corrected the class names in documentation",
  "updated_at":"2021-05-11T11:46:34Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 21.4b2 \u2192 21.5b1](https://github.com/psf/black/compare/21.4b2...21.5b1)\n- [github.com/PyCQA/flake8: 3.9.1 \u2192 3.9.2](https://github.com/PyCQA/flake8/compare/3.9.1...3.9.2)\n",
  "closed_at":"2021-05-10T20:55:06Z",
  "comments":0,
  "created_at":"2021-05-10T20:10:55Z",
  "draft":false,
  "id":885012311,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjM4MzU2NjYw",
  "number":862,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-10T20:55:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-05-10T20:55:07Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Reproducer:\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.is_none(np.arange(12))\r\n<Array [0, 1, 2, 3, 4, 5, ... 7, 8, 9, 10, 11] type='12 * int64'>\r\n```\r\n\r\nI assume that the cause is [this final `else` clause](https://github.com/scikit-hep/awkward-1.0/blob/4aaae9a4ddbff3b42d633b38d07f047794463d62/src/awkward/operations/structure.py#L2546-L2558), which is visited as `NumpyArray` is not considered by the `zeros` case. I would assume the solution is just to add another type to the `isinstance` call?\r\n\r\nVersion Info\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\nak.__version__\r\n```\r\n",
  "closed_at":"2021-05-12T12:54:44Z",
  "comments":1,
  "created_at":"2021-05-12T09:09:04Z",
  "id":889857603,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4ODk4NTc2MDM=",
  "number":863,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.is_none` returns NumpyArray as-is",
  "updated_at":"2021-05-12T12:54:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"In this PR I just add the `NumpyType` to the zeros-result of the `is_none` test function. \r\n\r\nFixes #863",
  "closed_at":"2021-05-12T12:54:45Z",
  "comments":0,
  "created_at":"2021-05-12T09:12:14Z",
  "draft":false,
  "id":889860838,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjQyOTcxNzIz",
  "number":864,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-12T12:54:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: possible fix for #863",
  "updated_at":"2022-07-08T21:41:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"When using `ak.from_parquet()` with `lazy=True` the function seems to take a different code path that ignores the `columns` argument in the early stages. Not sure if this is a bug or intended behavior because `ak.layout.VirtualArray` requires it (but then it seems to be undocumented - apart from datetime fields generally not supported)?\r\n\r\nThe following fails (a particularly useful example to exclude fields of yet (#835 \ud83c\udf89 ) unsupported datatypes):\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.2.3'\r\n>>> example_df_with_datetime_col = pd.DataFrame({\r\n             'timestamp': [1621164368000000000],\r\n             'datetime': [pd.to_datetime(1621164368000000000)]\r\n})\r\n>>> example_df_with_datetime_col.to_parquet('table_with_datetime_col.parquet')\r\n>>> ak.from_parquet('table_with_datetime_col.parquet', columns=['timestamp'], lazy=True)\r\n\r\nValueError: cannot convert NumPy dtype with kind M into a NumpyForm\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.2.3/src/libawkward/Content.cpp#L232)\r\n\r\n# in contrast:\r\n>>> ak.from_parquet('table_with_datetime_col.parquet', columns=['timestamp'])  # works as expected\r\n>>> ak.from_parquet('table_with_datetime_col.parquet')  # fails as expected\r\nValueError: cannot include dtype 'M' in a buffer\r\n```\r\n",
  "closed_at":"2021-05-17T16:59:38Z",
  "comments":2,
  "created_at":"2021-05-16T12:33:04Z",
  "id":892661817,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4OTI2NjE4MTc=",
  "number":865,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.from_parquet` lazy loading does not consider `columns` arg early enough",
  "updated_at":"2021-05-17T16:59:38Z",
  "user":"MDQ6VXNlcjI1ODgzNjA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"For example:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.2.3'\r\n>>> a1 = ak.zip({\"a\" : [[1], [], [2, 3]], \"b\": [[4], [], [5, 6]]}, with_name=\"a1\")\r\n>>> a2 = ak.zip({\"a\" : [[7, 8], [9], []], \"b\": [[10, 11], [12], []]}, with_name=\"a2\")\r\n>>> union = ak.where([True, False, True], a1, a2)\r\n>>> union\r\n<Array [[{a: 1, b: 4}], ... {a: 3, b: 6}]] type='3 * union[var * a1[\"a\": int64, ...'>\r\n>>> ak.flatten(union, axis=None)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/nikolai/.local/lib/python3.9/site-packages/awkward/operations/structure.py\", line 1874, in flatten\r\n    assert isinstance(out, tuple) and all(isinstance(x, np.ndarray) for x in out)\r\nAssertionError\r\n>>> # same when selecting a field from the union\r\n>>> ak.flatten(union.a, axis=None)\r\n...\r\n```\r\n\r\nHowever, it works for `axis=1`\r\n\r\n```\r\n>>> ak.flatten(union, axis=1)\r\n<Array [{a: 1, b: 4}, {a: 9, ... {a: 3, b: 6}] type='4 * union[a1[\"a\": int64, \"b...'>\r\n>>> ak.flatten(union.a, axis=1)\r\n<Array [1, 9, 2, 3] type='4 * union[int64, int64]'>\r\n```\r\n\r\n\r\n",
  "closed_at":"2021-05-17T18:41:51Z",
  "comments":2,
  "created_at":"2021-05-16T17:42:53Z",
  "id":892720886,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4OTI3MjA4ODY=",
  "number":866,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.flatten` with `axis=None` does not work for union array",
  "updated_at":"2021-05-17T18:41:51Z",
  "user":"MDQ6VXNlcjM3MDcyMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Possible fix for #865.\r\nThis passes my tests. Let me know if that is reasonable and if a test needs to be added.",
  "closed_at":"2021-05-17T16:59:37Z",
  "comments":4,
  "created_at":"2021-05-17T08:23:06Z",
  "draft":false,
  "id":893078238,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjQ1NjUyNTk4",
  "number":867,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-17T16:59:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix #865, only build forms for columns that are requested in lazy mode",
  "updated_at":"2021-05-17T17:04:09Z",
  "user":"MDQ6VXNlcjI1ODgzNjA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@agoose77 Please add a test for the error case you encountered, to see if this fix is sufficient. Thanks!",
  "closed_at":"2021-06-01T16:51:47Z",
  "comments":1,
  "created_at":"2021-05-17T16:12:08Z",
  "draft":false,
  "id":893490520,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjQ1OTk2NTY1",
  "number":868,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-01T16:51:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Matrix multiplication of a non-array vector.",
  "updated_at":"2021-06-01T16:51:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/pre-commit/pre-commit-hooks: v3.4.0 \u2192 v4.0.1](https://github.com/pre-commit/pre-commit-hooks/compare/v3.4.0...v4.0.1)\n",
  "closed_at":"2021-05-17T17:57:52Z",
  "comments":0,
  "created_at":"2021-05-17T17:15:21Z",
  "draft":false,
  "id":893538264,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjQ2MDM2MzMz",
  "number":869,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-17T17:57:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-05-17T17:57:53Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-05-17T18:41:51Z",
  "comments":0,
  "created_at":"2021-05-17T18:03:20Z",
  "draft":false,
  "id":893572428,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjQ2MDY0MTcy",
  "number":870,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-17T18:41:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Simplify UnionArray::getitem_field(s) and ak.flatten axis=None.",
  "updated_at":"2021-05-17T18:41:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-05-17T23:57:02Z",
  "comments":0,
  "created_at":"2021-05-17T22:08:54Z",
  "draft":false,
  "id":893754536,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjQ2MjE5MTE2",
  "number":871,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-17T23:57:02Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes for Parquet, Numba, Dask test.",
  "updated_at":"2021-05-17T23:57:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hi @jpivarski ,\r\n\r\nI'd be interested in this documentation/example, if you have one! Thanks!\r\n\r\nCheers,\r\nMax",
  "closed_at":"2021-06-18T20:40:41Z",
  "comments":4,
  "created_at":"2021-05-18T16:25:07Z",
  "id":894563812,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4OTQ1NjM4MTI=",
  "number":872,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Issue on page /how-to-restructure-pad.html",
  "updated_at":"2021-06-21T11:32:55Z",
  "user":"MDQ6VXNlcjM5NzE4MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"In numpy, the elements of an `np.ndarray` of strings are `np.str_`, which is a subclass of `str`:\r\n\r\n```python\r\n>>> import numpy as np\r\n>>> np.array(['asdf'])[0]\r\n'asdf'\r\n>>> type(np.array(['asdf'])[0])\r\n<class 'numpy.str_'>\r\n>>> isinstance(np.array(['asdf'])[0], str)\r\nTrue\r\n```\r\n\r\nIn awkward, the elements come up as `awkward.behaviors.string.CharBehavior`, which is not a `str`:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.2.3'\r\n>>> ak.Array(['asdf'])[0]\r\n'asdf'\r\n>>> type(ak.Array(['asdf'])[0])\r\n<class 'awkward.behaviors.string.CharBehavior'>\r\n>>> isinstance(ak.Array(['asdf'])[0], str)\r\nFalse\r\n```\r\n\r\nThis makes it inconvenient to pass these values to functions that depend on `isinstance(input, str)` to detect strings in their arguments. Getting around this is straightforward (just wrap with `str()`), but is it possible to make the default behavior an instance of `str`?\r\n\r\nI guess the same would go for `awkward.behaviors.string.ByteBehavior` and `bytes`, but that issue would never come up in any of my use cases.",
  "closed_at":"2021-06-15T22:33:12Z",
  "comments":3,
  "created_at":"2021-05-19T17:50:19Z",
  "id":895720884,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4OTU3MjA4ODQ=",
  "number":873,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Have elements of an `Array` of strings be instances of `str`",
  "updated_at":"2021-06-15T22:33:12Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-15T22:33:13Z",
  "comments":2,
  "created_at":"2021-05-19T18:08:24Z",
  "draft":false,
  "id":895736194,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjQ3OTIwMTUy",
  "number":874,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-15T22:33:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Should strings from __getitem__ be Python str? (and bytes?)",
  "updated_at":"2021-06-15T22:33:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"I might have finally reproduced another problem in awkward that is linked to nullable columns in arrow tables (#828) and affects #865.\r\n\r\nEnvironment specs:\r\n```sh\r\n# install latest awkward from @main to include newest lazy loading changes:\r\npip install git+https://github.com/scikit-hep/awkward-1.0.git@3dbf8c87d78d98332b6629607841d8610dcca072\r\n```\r\n```python\r\n>>> import awkward as ak\r\n>>> import pyarrow as pa\r\n>>> ak.__version__, pa.__version__\r\n(1.2.3, 4.0.0)\r\n```\r\nConsider the following table with a null typed column:\r\n\r\n```python\r\n>>> null_table = pa.Table.from_pydict({'null_col': pa.array([None])})\r\n>>> null_table\r\npyarrow.Table\r\nnull_col: null\r\n# as expected with #828\r\n>>> null_array = ak.from_arrow(null_table)\r\n>>> null_array\r\n<Array [{null_col: None}] type='1 * {\"null_col\": ?unknown}'>\r\n# alternatively:\r\n>>> null_array = ak.Array({'null_col': [None]})\r\n<Array [{null_col: None}] type='1 * {\"null_col\": ?unknown}'>\r\n```\r\n\r\n**Issue 1** - conversion to arrow results in a double typed column\r\n```python\r\n>>> ak.to_arrow_table(null_array)\r\npyarrow.Table\r\nnull_col: double\r\n```\r\n\r\n\r\n**Issue 2** - lazy read a nullable column fails with ValueError\r\n```python\r\n# we have to write via external lib e.g. pyarrow to avoid type conversion and save null typed column on disk\r\npq.write_table(null_table, 'null_typed_table.parquet')\r\npq.read_table('null_typed_table.parquet')\r\npyarrow.Table\r\nnull_col: null\r\n\r\nak.from_parquet('null_typed_table.parquet', lazy=True)\r\nValueError: cannot convert NumPy dtype with kind O into a NumpyForm\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.2.3/src/libawkward/Content.cpp#L232)\r\n\r\n# this works as expected\r\n>>> ak.from_parquet('null_typed_table.parquet')\r\n<Array [{null_col: None}] type='1 * {\"null_col\": ?unknown}'>\r\n```\r\n\r\n\r\nWithout looking into the relevant lines yet, I guess definitely null typed columns should have its own routine for building Forms  (not `maybe_nullable()`; something reversed to #828)?\r\n\r\nI didn't think of kind O typed numpy arrays when reasoning about a valid, non-temporary test case for #867 - but actually this ValueError should not be raised ever when loading from parquet because awkward should be compliant with both arrow and parquet (on-disk) columnar memory formats and none of them does support flexible/python objects as valid column types.",
  "closed_at":"2021-05-24T20:26:41Z",
  "comments":3,
  "created_at":"2021-05-23T14:46:21Z",
  "id":899036419,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4OTkwMzY0MTk=",
  "number":875,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"More issues with null typed columns to_arrow_table conversion & lazy loading from parquet",
  "updated_at":"2021-05-24T20:26:41Z",
  "user":"MDQ6VXNlcjI1ODgzNjA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"For example:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> indices = ak.Array([0, 1, 2, 3, 4, 5])\r\n>>> array = ak.Array([0, 10, 20, 30, 40])\r\n>>> indices_with_offset = indices[3:4]\r\n>>> indices_with_offset\r\n<Array [3] type='1 * int64'>\r\n```\r\nthe following should give `[30]`\r\n```python\r\n>>> array[indices_with_offset.mask[[True]]]\r\n<Array [0] type='1 * ?int64'>\r\n```\r\nit's fine without the masking\r\n```python\r\n>>> array[indices_with_offset]\r\n<Array [30] type='1 * int64'>\r\n```\r\nalso fine with masking, but when the `NumpyArray` does not have an offset\r\n```python\r\n>>> indices_without_offset = ak.Array([3])\r\n>>> array[indices_without_offset.mask[[True]]]\r\n<Array [30] type='1 * ?int64'>\r\n```\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.3.0rc4'\r\n```\r\n\r\nFound this while experimenting with the `_apply_global_index` function from `coffea.nanoevents` - tagging @nsmith- \r\n",
  "closed_at":"2021-05-24T19:57:32Z",
  "comments":6,
  "created_at":"2021-05-24T17:58:37Z",
  "id":899878813,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU4OTk4Nzg4MTM=",
  "number":876,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`__getitem__` gives wrong result when called with masked indices from `NumpyArray` with offset",
  "updated_at":"2021-06-01T17:27:43Z",
  "user":"MDQ6VXNlcjM3MDcyMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-05-24T19:57:32Z",
  "comments":0,
  "created_at":"2021-05-24T19:00:44Z",
  "draft":false,
  "id":899925607,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjUxNTU1NjUw",
  "number":877,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-24T19:57:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Buffer pointers should come from `data()`, not `ptr().get()`.",
  "updated_at":"2021-05-24T19:57:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-05-24T20:26:41Z",
  "comments":0,
  "created_at":"2021-05-24T19:39:55Z",
  "draft":false,
  "id":899949729,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjUxNTc1ODE5",
  "number":878,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-24T20:26:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix some issues with null-typed Arrow/Parquet columns.",
  "updated_at":"2021-05-24T20:26:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n1.2.3\r\n>>> test = ak.Array({'': []})\r\n# this should fail (or create a type `?unknown` ?)\r\n>>> test = ak.with_field(\r\n    base=test,\r\n    what=None,\r\n    where='non-PrimitiveType_field'\r\n)\r\n>>> test\r\npython3.8/site-packages/awkward/_util.py in highlevel_type(layout, behavior, isarray)\r\n   1412 def highlevel_type(layout, behavior, isarray):\r\n   1413     if isarray:\r\n-> 1414         return ak.types.ArrayType(layout.type(typestrs(behavior)), len(layout))\r\n   1415     else:\r\n   1416         return layout.type(typestrs(behavior))\r\n\r\nValueError: Numpy format \"O\" cannot be expressed as a PrimitiveType\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.2.3/src/libawkward/array/NumpyArray.cpp#L81)\r\n```\r\n\r\nI think this should fail early and not only at ak._utils / repr(test).\r\nA type check should be around [these (structure.py#L963)](https://github.com/scikit-hep/awkward-1.0/blob/22501ba218646dc24dc515c4394eb22f126d340d/src/awkward/operations/structure.py#L963) lines?\r\n\r\nSorry for bringing up all these null-typed issues... I can try to PR for this issue later this week.",
  "closed_at":"2021-05-30T10:14:19Z",
  "comments":4,
  "created_at":"2021-05-25T19:07:22Z",
  "id":901237915,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MDEyMzc5MTU=",
  "number":879,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"non-PrimitiveType `what` should fail in `ak.with_field()`",
  "updated_at":"2021-05-30T10:14:19Z",
  "user":"MDQ6VXNlcjI1ODgzNjA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR:\r\n- adds a test to trigger the ValueError that is produced in the high-level API.\r\n- adds a special case treatment of `what=None` in `ak.with_field` in accordance with the suggestion given by @jpivarski ",
  "closed_at":"2021-05-30T10:14:19Z",
  "comments":9,
  "created_at":"2021-05-28T09:51:59Z",
  "draft":false,
  "id":905075956,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjU2MTc5NDM3",
  "number":880,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-30T10:14:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix #879",
  "updated_at":"2022-07-08T21:41:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":":information_source:  This issue has already been reproduced, so this is just a placeholder for posterity.\r\n\r\nCurrently, this test fails:\r\n```python\r\nimport numpy as np\r\nimport awkward as ak\r\nimport vector\r\n\r\ndef test():\r\n    point = ak.Record({'x': 1, 'y': 2, 'z': 3}, with_name=\"Vector3D\")    \r\n    point @ vector.obj(x=1, y=0, z=2)\r\n```\r\n\r\nI think a non-`vector` equivalent would be this:\r\n```python\r\nimport numpy as np\r\nimport awkward as ak\r\nfrom collections import namedtuple\r\n\r\nPoint = namedtuple(\"Point\", \"x y z\")\r\n\r\n\r\ndef point_dot(left, right):\r\n    return left.x*right.x + left.y*right.y + left.z*right.z\r\n\r\n\r\ndef test():\r\n    point = ak.Record({'x': 1, 'y': 2, 'z': 3}, with_name=\"Vector3D\")    \r\n    ak.behavior[np.matmul, \"point\", Point] = point_dot\r\n    \r\n    point @ Point(1, 0, 2)\r\n```\r\nI think what's happening is that Awkward expects the arguments to be `cast`-able to an Array, e.g. https://github.com/scikit-hep/awkward-1.0/blob/22501ba218646dc24dc515c4394eb22f126d340d/src/awkward/_connect/_numpy.py#L43-L53\r\n\r\nI expected the test to succeed, because `vector` implements these behaviours: https://github.com/scikit-hep/vector/blob/8951b9bcfe3b6cc9fbbfc1a32fd84bdf50739682/src/vector/_backends/awkward_.py#L875-L902",
  "closed_at":"2021-06-01T16:51:46Z",
  "comments":0,
  "created_at":"2021-05-28T10:19:21Z",
  "id":905118074,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MDUxMTgwNzQ=",
  "number":881,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Matrix multiplication of non-array object fails",
  "updated_at":"2021-06-01T16:51:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"When broadcasting an array with an `option` array, the option leaks into the non-option array, e.g.\r\n```python\r\n>>> np.broadcast_arrays(ak.Array([[1,2,3],[4]]), [None, 6])\r\n>>> [<Array [None, [4]] type='2 * option[var * int64]'>,\r\n <Array [None, [6]] type='2 * option[var * int64]'>]\r\n```\r\n\r\nI understand that some options need to propagate the `None` e.g. NumPy ufuncs. But, for broadcasting, do you think it's acceptable that the result should instead be:\r\n```python\r\n [<Array [[1,2,3], [4]] type='2 * var * int64]'>,\r\n <Array [None, [6]] type='2 * option[var * int64]'>]\r\n```\r\nI.e. [lines 758-766](https://github.com/scikit-hep/awkward-1.0/blob/22501ba218646dc24dc515c4394eb22f126d340d/src/awkward/_util.py#L758-L766) might not be required (in addition to some other change of course. \r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.2.3'\r\n```\r\n",
  "closed_at":"2021-07-13T21:13:20Z",
  "comments":3,
  "created_at":"2021-05-28T12:33:40Z",
  "id":905322503,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MDUzMjI1MDM=",
  "number":882,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`broadcast_arrays()` loses information when broadcasting `None`",
  "updated_at":"2021-07-13T21:13:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-05-28T17:57:53Z",
  "comments":0,
  "created_at":"2021-05-28T17:51:52Z",
  "draft":true,
  "id":905814945,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjU2ODY2NzYy",
  "number":883,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: initial passthrough for index file",
  "updated_at":"2021-11-02T22:01:24Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-06-03T14:22:52Z",
  "comments":3,
  "created_at":"2021-05-28T18:11:51Z",
  "draft":false,
  "id":905839011,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjU2ODg5MDc1",
  "number":884,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-03T14:22:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Index and Identities (Identifier)",
  "updated_at":"2021-06-03T14:38:50Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 21.5b1 \u2192 21.5b2](https://github.com/psf/black/compare/21.5b1...21.5b2)\n",
  "closed_at":"2021-05-31T17:51:37Z",
  "comments":0,
  "created_at":"2021-05-31T17:16:51Z",
  "draft":false,
  "id":907622157,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjU4NDQwOTU3",
  "number":885,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-05-31T17:51:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-05-31T17:51:38Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Unfortunately, `pyarrow.parquet.ParquetFile` does not support remote filesystems.\r\nYou could use a construction like\r\n```\r\nwith fsspec.open(url, 'rb', **storage_options) as f:\r\n    q = pq.ParquetFile(f)\r\n```\r\nfor the _metadata case or\r\n```\r\npq.ParquetDataset(paths, filesystem=fs, **kwargs)\r\n```\r\nfor the list-of-files case; this is what dask \"legacy\" does.\r\n\r\nHowever, it seems that arrow will be using the new API only,  so\r\n```\r\nq = pyarrow.dataset.parquet_dataset(\"s3://pivarski-princeton/millionsongs/_metadata\", filesystem=fs)  # note the full path to metadata\r\n```\r\nwhere the returned object has a `.schema` and fragments `list(q.get_fragments())` instead of the former pieces.",
  "closed_at":"2022-04-15T19:37:43Z",
  "comments":22,
  "created_at":"2021-06-01T15:58:23Z",
  "id":908452592,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MDg0NTI1OTI=",
  "number":886,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Use `pyarrow.dataset.parquet_dataset` in `ak.from_parquet`",
  "updated_at":"2022-04-15T19:37:44Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Is there a precedent for implementing functions that improve API parity with NumPy?\r\n\r\nE.g. a naive `ptp` is something like two lines of code:\r\n```python\r\n@ak._connect._numpy.implements(\"ptp\")\r\ndef ptp(arr, axis=None, keepdims=False, initial=None, mask_identity=True):\r\n    \"\"\"Return the range of values along a given axis.\"\"\"\r\n    return ak.max(\r\n        arr, axis=axis, keepdims=keepdims, initial=initial, mask_identity=mask_identity\r\n    ) - ak.min(\r\n        arr, axis=axis, keepdims=keepdims, initial=initial, mask_identity=mask_identity\r\n    )\r\n```\r\n\r\nBut it's not an *essential* function. I'd vote in favour of implementing it (in https://github.com/scikit-hep/awkward-1.0/blob/main/src/awkward/operations/reducers.py) because `np.ptp` is more concise and quite widely used.",
  "closed_at":"2021-06-02T17:30:29Z",
  "comments":8,
  "created_at":"2021-06-02T10:42:51Z",
  "id":909361902,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MDkzNjE5MDI=",
  "number":889,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Implement ptp",
  "updated_at":"2021-06-02T17:30:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #889",
  "closed_at":"2021-06-02T17:30:29Z",
  "comments":0,
  "created_at":"2021-06-02T12:57:35Z",
  "draft":false,
  "id":909473926,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjYwMDQzMjUz",
  "number":890,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-02T17:30:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feature: add `ak.ptp`",
  "updated_at":"2022-07-08T21:41:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #892 ",
  "closed_at":"2021-06-02T16:13:29Z",
  "comments":1,
  "created_at":"2021-06-02T13:41:31Z",
  "draft":false,
  "id":909516622,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjYwMDgwMDg0",
  "number":891,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-02T16:13:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Documentation: fix typo in reducers",
  "updated_at":"2022-07-08T21:41:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The `keepdims` docstring in [reducers.py](https://github.com/scikit-hep/awkward-1.0/blob/8f468c60bb519f3337ae856839498396e535cb55/src/awkward/operations/reducers.py#L360) has a small typo.",
  "closed_at":"2021-06-02T16:13:29Z",
  "comments":0,
  "created_at":"2021-06-02T14:34:29Z",
  "id":909570547,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MDk1NzA1NDc=",
  "number":892,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Typo in reducers.py docstrings",
  "updated_at":"2021-06-02T16:13:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-07-13T12:18:29Z",
  "comments":3,
  "created_at":"2021-06-02T17:06:23Z",
  "draft":true,
  "id":909708645,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjYwMjQxNzAw",
  "number":893,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Added a fuzz test",
  "updated_at":"2021-07-13T12:18:29Z",
  "user":"MDQ6VXNlcjUyNjM1Nzcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"https://github.com/scikit-hep/awkward-1.0/blob/a0ec3bcacacc81a47fe61a1d99b0bc512a8bb3cf/src/awkward/_v2/identifier.py#L30",
  "closed_at":"2021-06-03T15:05:51Z",
  "comments":0,
  "created_at":"2021-06-03T14:24:32Z",
  "id":910546472,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MTA1NDY0NzI=",
  "number":894,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Typo in `identifier.py`",
  "updated_at":"2021-06-03T15:05:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-06-03T15:05:51Z",
  "comments":0,
  "created_at":"2021-06-03T14:25:13Z",
  "draft":false,
  "id":910547122,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjYwOTUxNjA0",
  "number":895,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-03T15:05:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #894",
  "updated_at":"2021-06-03T15:05:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Look at [ak.layout.Content documentation](https://awkward-array.readthedocs.io/en/latest/ak.layout.Content.html) for suggestions on how to implement each class. However:\r\n\r\n   1. Translate the documentation's reliance on Python lists of numbers into NumPy arrays (for the NumpyArray class) and `ak._v2.index.Index` for the indexes (array buffers attached to non-leaf nodes).\r\n   2. Don't implement the validity checks that scale with the length of any arrays, only the tests that can be performed in _O(1)_ time. See https://github.com/scikit-hep/awkward-1.0/pull/896#issuecomment-854128943.\r\n   3. Convert the assertions into errors with error messages (TypeError if it's the wrong type, IndexError if an index is out of range, including string field names).\r\n   4. You'll have to write the `__repr__` and `_getitem_fields` code and test it on your own.\r\n   5. See `tests/test_0896-content-classes-refactoring.py` for tests of `__len__`, `_getitem_at`, `_getitem_range`, and `_getitem_field`. You'll have to add one or two tests for `_getitem_fields`, but it's very similar to `_getitem_field`.\r\n\r\nChecklist:\r\n\r\n   - [x] `Record.__init__`\r\n   - [x] `Record.__getitem__`\r\n   - [x] `Content.__getitem__` (only handle int, slice without step, string, iterable of strings for now; everything else goes to NotImplementedError)\r\n   - [x] `EmptyArray.__init__`\r\n   - [x] `EmptyArray.__repr__`\r\n   - [x] `EmptyArray.__len__`\r\n   - [x] `EmptyArray._getitem_at`\r\n   - [x] `EmptyArray._getitem_range`\r\n   - [x] `EmptyArray._getitem_field`\r\n   - [x] `EmptyArray._getitem_fields`\r\n   - [x] `NumpyArray.__init__`\r\n   - [x] `NumpyArray.__repr__`\r\n   - [x] `NumpyArray.__len__`\r\n   - [x] `NumpyArray._getitem_at`\r\n   - [x] `NumpyArray._getitem_range`\r\n   - [x] `NumpyArray._getitem_field`\r\n   - [x] `NumpyArray._getitem_fields`\r\n   - [x] `RegularArray.__init__`\r\n   - [x] `RegularArray.__repr__`\r\n   - [x] `RegularArray.__len__`\r\n   - [x] `RegularArray._getitem_at`\r\n   - [x] `RegularArray._getitem_range`\r\n   - [x] `RegularArray._getitem_field`\r\n   - [x] `RegularArray._getitem_fields`\r\n   - [x] `ListArray.__init__`\r\n   - [x] `ListArray.__repr__`\r\n   - [x] `ListArray.__len__`\r\n   - [x] `ListArray._getitem_at`\r\n   - [x] `ListArray._getitem_range`\r\n   - [x] `ListArray._getitem_field`\r\n   - [x] `ListArray._getitem_fields`\r\n   - [x] `ListOffsetArray.__init__`\r\n   - [x] `ListOffsetArray.__repr__`\r\n   - [x] `ListOffsetArray.__len__`\r\n   - [x] `ListOffsetArray._getitem_at`\r\n   - [x] `ListOffsetArray._getitem_range`\r\n   - [x] `ListOffsetArray._getitem_field`\r\n   - [x] `ListOffsetArray._getitem_fields`\r\n   - [x] `RecordArray.__init__`\r\n   - [x] `RecordArray.__repr__`\r\n   - [x] `RecordArray.__len__`\r\n   - [x] `RecordArray._getitem_at`\r\n   - [x] `RecordArray._getitem_range`\r\n   - [x] `RecordArray._getitem_field`\r\n   - [x] `RecordArray._getitem_fields`\r\n   - [x] `IndexedArray.__init__`\r\n   - [x] `IndexedArray.__repr__`\r\n   - [x] `IndexedArray.__len__`\r\n   - [x] `IndexedArray._getitem_at`\r\n   - [x] `IndexedArray._getitem_range`\r\n   - [x] `IndexedArray._getitem_field`\r\n   - [x] `IndexedArray._getitem_fields`\r\n   - [x] `IndexedOptionArray.__init__`\r\n   - [x] `IndexedOptionArray.__repr__`\r\n   - [x] `IndexedOptionArray.__len__`\r\n   - [x] `IndexedOptionArray._getitem_at`\r\n   - [x] `IndexedOptionArray._getitem_range`\r\n   - [x] `IndexedOptionArray._getitem_field`\r\n   - [x] `IndexedOptionArray._getitem_fields`\r\n   - [x] `ByteMaskedArray.__init__`\r\n   - [x] `ByteMaskedArray.__repr__`\r\n   - [x] `ByteMaskedArray.__len__`\r\n   - [x] `ByteMaskedArray._getitem_at`\r\n   - [x] `ByteMaskedArray._getitem_range`\r\n   - [x] `ByteMaskedArray._getitem_field`\r\n   - [x] `ByteMaskedArray._getitem_fields`\r\n   - [x] `BitMaskedArray.__init__`\r\n   - [x] `BitMaskedArray.__repr__`\r\n   - [x] `BitMaskedArray.__len__`\r\n   - [x] `BitMaskedArray._getitem_at`\r\n   - [x] `BitMaskedArray._getitem_range`\r\n   - [x] `BitMaskedArray._getitem_field`\r\n   - [x] `BitMaskedArray._getitem_fields`\r\n   - [x] `UnmaskedArray.__init__`\r\n   - [x] `UnmaskedArray.__repr__`\r\n   - [x] `UnmaskedArray.__len__`\r\n   - [x] `UnmaskedArray._getitem_at`\r\n   - [x] `UnmaskedArray._getitem_range`\r\n   - [x] `UnmaskedArray._getitem_field`\r\n   - [x] `UnmaskedArray._getitem_fields`\r\n   - [x] `UnionArray.__init__`\r\n   - [x] `UnionArray.__repr__`\r\n   - [x] `UnionArray.__len__`\r\n   - [x] `UnionArray._getitem_at`\r\n   - [x] `UnionArray._getitem_range`\r\n   - [x] `UnionArray._getitem_field`\r\n   - [x] `UnionArray._getitem_fields`\r\n",
  "closed_at":"2021-06-16T02:49:05Z",
  "comments":8,
  "created_at":"2021-06-03T14:43:57Z",
  "draft":false,
  "id":910564346,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjYwOTY2NDI2",
  "number":896,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-16T02:49:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Content classes",
  "updated_at":"2021-06-16T02:49:05Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-07T16:59:39Z",
  "comments":0,
  "created_at":"2021-06-03T18:22:08Z",
  "draft":false,
  "id":910748114,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjYxMTI0NzQ4",
  "number":897,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-07T16:59:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"More precise Content documentation.",
  "updated_at":"2021-06-07T16:59:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Given two record arrays with different fields, e.g.\r\n\r\n```python\r\n>>> a = ak.Array([{\"this\": 100}])\r\n>>> b = ak.Array([{\"this\": 90, \"that\": 100}])\r\n```\r\nthe concatenated array has a union type:\r\n```python3\r\n>>> c = ak.concatenate((a, b))\r\n>>> c.type\r\n2 * union[{\"this\": int64}, {\"this\": int64, \"that\": int64}]\r\n```\r\n\r\nThis union should fail to unzip, because the second array has field `that` whilst the first array does not. At present, this does not fail:\r\n```python\r\n>>> ak.unzip(c)\r\n(<Array [100, 90] type='2 * union[int64, int64]'>,)\r\n```",
  "closed_at":"2021-12-07T22:54:00Z",
  "comments":1,
  "created_at":"2021-06-07T14:51:54Z",
  "id":913635890,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MTM2MzU4OTA=",
  "number":898,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.unzip` does not fail for unions of heterogeneous records",
  "updated_at":"2021-12-07T22:54:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"This is maybe a bit of an arcane use case, since in these cases one would usually zip the arrays, but if i create a form where different fields have the same offset array (but a different content) and try to assemble it with `ak.from_buffers`\r\n\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\nform = {\r\n    \"class\": \"RecordArray\",\r\n    \"contents\": {\r\n        \"a\": {\r\n            \"class\": \"ListOffsetArray64\",\r\n            \"offsets\": \"i64\",\r\n            \"content\" : {\r\n                \"class\": \"NumpyArray\",\r\n                \"itemsize\": 8,\r\n                \"format\": \"l\",\r\n                \"primitive\": \"int64\",\r\n                \"form_key\": \"node2\"\r\n            },\r\n            \"form_key\": \"node0\",\r\n        },\r\n        \"b\" : {\r\n            \"class\": \"ListOffsetArray64\",\r\n            \"offsets\": \"i64\",\r\n            \"content\" : {\r\n                \"class\": \"NumpyArray\",\r\n                \"itemsize\": 8,\r\n                \"format\": \"l\",\r\n                \"primitive\": \"int64\",\r\n                \"form_key\": \"node3\"\r\n            },\r\n            \"form_key\": \"node0\",\r\n        },\r\n    },\r\n    \"form_key\": \"node1\",\r\n}\r\n\r\ncontainer = {\r\n    'part0-node0-offsets': np.array([0, 2, 3, 3, 6], dtype=np.int64),\r\n    'part0-node2-data': np.array([1, 2, 3, 4, 5, 6]),\r\n    'part0-node3-data': np.array([10, 20, 30, 40, 50, 60])\r\n}\r\n```\r\n\r\nit works without lazy\r\n\r\n```pycon\r\n>>> ak.from_buffers(form, 4, container).tolist()\r\n[{'a': [1, 2], 'b': [10, 20]}, {'a': [3], 'b': [30]}, {'a': [], 'b': []}, {'a': [4, 5, 6], 'b': [40, 50, 60]}]\r\n```\r\n\r\nbut with `lazy=True` it seems to try caching the whole array under `node0`, leading to the same result for field `a` and `b`\r\n```pycon\r\n>>> lazy = ak.from_buffers(form, 4, container, lazy=True)\r\n>>> lazy.tolist()\r\n[{'a': [1, 2], 'b': [1, 2]}, {'a': [3], 'b': [3]}, {'a': [], 'b': []}, {'a': [4, 5, 6], 'b': [4, 5, 6]}]\r\n>>> list(lazy._caches[0].keys())\r\n['ak.from_buffers:0', 'ak.from_buffers:0(part0-node0-virtual)']\r\n>>> lazy._caches[0]['ak.from_buffers:0(part0-node0-virtual)']\r\n<ListOffsetArray64>\r\n    <offsets><Index64 i=\"[0 2 3 3 6]\" offset=\"0\" length=\"5\" at=\"0x55ef0e5b93b0\"/></offsets>\r\n    <content><NumpyArray format=\"l\" shape=\"6\" data=\"1 2 3 4 5 6\" at=\"0x55ef0e591d80\"/></content>\r\n</ListOffsetArray64>\r\n```\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n1.3.0\r\n```\r\n",
  "closed_at":"2021-06-07T20:28:25Z",
  "comments":1,
  "created_at":"2021-06-07T15:01:46Z",
  "id":913650992,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MTM2NTA5OTI=",
  "number":899,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"lazy cache in `ak.from_buffers` does not work when different different fields have the same offset key, but different content",
  "updated_at":"2021-06-07T20:28:25Z",
  "user":"MDQ6VXNlcjM3MDcyMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #898",
  "closed_at":"2021-07-20T14:36:03Z",
  "comments":2,
  "created_at":"2021-06-07T15:10:21Z",
  "draft":true,
  "id":913659203,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjYzNjU3NzU0",
  "number":900,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: raise `ValueError` for incompatible union types in `ak.unzip` ",
  "updated_at":"2022-07-08T21:41:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-07T20:28:25Z",
  "comments":0,
  "created_at":"2021-06-07T17:43:42Z",
  "draft":false,
  "id":913797150,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjYzNzc2ODM4",
  "number":901,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-07T20:28:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Distinguish cache keys for non-leaf nodes.",
  "updated_at":"2021-06-07T20:28:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is a little tricky to reproduce late on a Friday. There is definitely a simpler example hiding in here somewhere\r\n```python\r\n@nb.njit\r\ndef get_11(record):\r\n    return record[1].u\r\n\r\n\r\ndef test(order):\r\n    # Create an array with either strided or contiguous columns\r\n    table = np.zeros((2, 2), order=order)\r\n    table[:] = np.arange(2  * 2).reshape(table.shape)\r\n\r\n    record = ak.zip({\"u\": table[..., 0]})\r\n\r\n    r1 = record[1].u\r\n    r2 = get_11(record)\r\n\r\n    assert r1 == r2, (r1, r2)\r\n\r\n\r\ntest(order=\"F\")\r\ntest(order=\"C\")\r\n```",
  "closed_at":"2021-06-08T21:19:48Z",
  "comments":5,
  "created_at":"2021-06-08T15:39:19Z",
  "id":915187960,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MTUxODc5NjA=",
  "number":903,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Numba retrieves wrong value for buffers with strides",
  "updated_at":"2021-06-08T21:19:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-08T21:19:48Z",
  "comments":2,
  "created_at":"2021-06-08T20:27:01Z",
  "draft":false,
  "id":915459630,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY1MjcxODMw",
  "number":904,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-08T21:19:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ArrayView expects contiguous NumpyArrays, so make sure they're contiguous.",
  "updated_at":"2021-06-09T12:34:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"```python3\r\n>>> array = ak.Array([[], [0, 2, 2, 2, 2, 2]])\r\n>>> lengths = ak.Array([0, 0, 0, 1, 0, 5])\r\n>>> ak.unflatten(array, lengths, axis=1)\r\n<Array [[], [[0], [], [2, 2, 2, 2, 2]]] type='2 * var * var * int64'>\r\n>>> assert ak.unflatten(array, lengths, axis=1).to_list() == [[[], [], []], [[0], [], [2, 2, 2, 2, 2]]]\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-284-684780e734b5> in <module>\r\n      1 array = ak.Array([[], [0, 2, 2, 2, 2, 2]])\r\n      2 lengths = ak.Array([0, 0, 0, 1, 0, 5])\r\n----> 3 assert ak.unflatten(array, lengths, axis=1).to_list() == [\r\n      4     [[], [], []],\r\n      5     [[0], [], [2, 2, 2, 2, 2]],\r\n\r\nAssertionError: \r\n```\r\n\r\nI expect the function to produce the layout as shown on the RHS, `[[[], [], []], [[0], [], [2, 2, 2, 2, 2]]]`. \r\n\r\nI would like to support zeros like this, because I want the output to be a regular array. I am effectively using a modified `run_lengths` to count runs of a predefined list of keys.\r\n\r\nI may be able to look at this today, I'll self-assign if so.",
  "closed_at":"2021-12-07T22:19:25Z",
  "comments":7,
  "created_at":"2021-06-09T10:54:49Z",
  "id":916067716,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MTYwNjc3MTY=",
  "number":905,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.unflatten` does not always respect zero counts ",
  "updated_at":"2021-12-07T22:19:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"NONE",
  "body":"Hi there,\r\nThanks for the library.\r\n\r\nI'm trying to use `from_arrow` to convert a pyarrow struct containing fixed-size lists and it's currently failing. I used the following snippet to test:\r\n\r\n```py\r\nimport pyarrow as pa\r\nimport awkward as ak\r\ndef test():\r\n    struct = pa.struct([pa.field('x', pa.list_(pa.float64(), 2)), pa.field('y', pa.list_(pa.float64(), 2))])\r\n\r\n    arr = pa.array([{'x': [1.0, 2.0], 'y': [3.0, 4.0]}], type=struct)\r\n    assert ak.from_arrow(arr).tolist() == [{\"x\": [1.0, 2.0]}, {\"y\": [3.0, 4.0]}]\r\n```\r\n\r\nIt fails at this assertion https://github.com/scikit-hep/awkward-1.0/blob/main/src/awkward/operations/convert.py#L2767 and I believe the reason is that pyarrow's type is `pyarrow.lib.FixedSizeListType` which is a subclass of `pyarrow.lib.DataType` thus matching it as a null data type.",
  "closed_at":"2021-06-10T17:14:42Z",
  "comments":1,
  "created_at":"2021-06-09T18:37:04Z",
  "id":916537366,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MTY1MzczNjY=",
  "number":906,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Can't convert a pyarrow struct with a fixed-size list",
  "updated_at":"2021-06-10T17:14:42Z",
  "user":"MDQ6VXNlcjkyMzk2Mw=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #906 ",
  "closed_at":"2021-06-10T17:14:42Z",
  "comments":6,
  "created_at":"2021-06-10T06:33:18Z",
  "draft":false,
  "id":916962789,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY2NTYzNzcy",
  "number":907,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-10T17:14:42Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Support for reading `pyarrow.lib.FixedSizeListType`",
  "updated_at":"2022-07-08T21:41:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"allow `TypedArrayBuilder` to be used as follows:\r\n```python\r\nb = ak.TypedArrayBuilder(form)\r\n```",
  "closed_at":"2021-06-15T12:51:15Z",
  "comments":0,
  "created_at":"2021-06-10T15:56:12Z",
  "draft":true,
  "id":917511231,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY3MDM0NTYy",
  "number":908,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"start on high-level TypedArrayBuilder",
  "updated_at":"2021-11-12T14:51:21Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"(Possible extension to #835)\r\n\r\nWhile this works:\r\n```python\r\n>>> arr = ak.Array(['2019-09-02T09:30:00',  None])\r\n>>> ak.strings_astype(arr, np.datetime64)\r\n<Array [2019-09-02T09:30:00.000, None] type='2 * ?datetime'>\r\n```\r\n\r\n`ak.values_astype` **could** be extended to convert values not only to new numeric but also datetime type (if I remember correctly, that function is originally not meant for anything else than numeric values).\r\n```python\r\nak.values_astype(ak.Array([1567416600000]), np.datetime64)\r\n```",
  "closed_at":"2021-06-15T16:14:45Z",
  "comments":6,
  "created_at":"2021-06-11T00:49:30Z",
  "id":918090745,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MTgwOTA3NDU=",
  "number":909,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.values_astype` could support dtype specifier `np.datetime64` to convert `?int` or `?float` typed unix timestamps to `datetime`",
  "updated_at":"2021-06-15T16:14:46Z",
  "user":"MDQ6VXNlcjI1ODgzNjA3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"## Reproducer :bug: \r\n\r\n### Same-depth `IndexedArray`s\r\nGiven the following layout:\r\n```python3\r\nlayout = ak.layout.IndexedArray64(\r\n    ak.layout.Index64(np.array([3, 1, 0, 2])),\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([0, 3, 6, 9, 12])),\r\n        ak.layout.NumpyArray(np.array([0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 3])),\r\n    ),\r\n)\r\n```\r\nwhich has the list representations\r\n```python\r\n>>> display(\r\n...     ak.to_list(layout),\r\n...     ak.to_list(layout.content),\r\n...     ak.to_list(layout.content.content),\r\n... )\r\n[[3, 3, 3], [1, 1, 1], [0, 0, 0], [2, 2, 3]]\r\n[[0, 0, 0], [1, 1, 1], [2, 2, 3], [3, 3, 3]]\r\n[0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 3]\r\n```\r\n\r\nthe act of unflattening by the run lengths produces\r\n```python\r\n>>> ak.unflatten(\r\n...     layout,\r\n...     ak.flatten(ak.run_lengths(layout)),\r\n...     axis=1\r\n... ).tolist()\r\n[[[3, 3], [3]], [[1, 1, 1]], [[0, 0, 0]], [[2, 2, 3]]]\r\n```\r\n\r\nIf we apply `run_lengths` to the `ListOffsetArray` layout, then the result is \"correct\":\r\n```python\r\n>>> ak.unflatten(\r\n...     layout,\r\n...     ak.flatten(ak.run_lengths(layout.content)),\r\n...     axis=1\r\n... ).tolist()\r\n[[[3, 3, 3]], [[1, 1, 1]], [[0, 0, 0]], [[2, 2], [3]]]\r\n```\r\n### Upper `IndexedArray`s\r\nThis is not just true for thee same-depth `index` layouts, but also,*any* layout at any depth above the current depth. Consider this layout:\r\n```python3\r\nlayout = ak.layout.IndexedArray64(\r\n    ak.layout.Index64([1, 0]),\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64([0, 2, 4]),\r\n        ak.layout.ListOffsetArray64(\r\n            ak.layout.Index64(([0, 3, 6, 9, 12])),\r\n            ak.layout.NumpyArray(([0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 3])),\r\n        ),\r\n    ),\r\n)\r\n```\r\nwhich has\r\n```python\r\n>>> display(\r\n...     ak.to_list(layout),\r\n...     ak.to_list(layout.content),\r\n...     ak.to_list(layout.content.content),\r\n...     ak.to_list(layout.content.content.content),\r\n... )\r\n[[[2, 2, 3], [3, 3, 3]], [[0, 0, 0], [1, 1, 1]]]\r\n[[[0, 0, 0], [1, 1, 1]], [[2, 2, 3], [3, 3, 3]]]\r\n[[0, 0, 0], [1, 1, 1], [2, 2, 3], [3, 3, 3]]\r\n[0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 3]\r\n```\r\nIts run lengths are \r\n```python3\r\n>>> ak.run_lengths(layout).to_list()\r\n[[[2, 1], [3]], [[3], [3]]]\r\n```\r\nUnflattening as before, we have\r\n```python3\r\n>>> ak.unflatten(layout, ak.flatten(ak.run_lengths(layout), axis=None), axis=-1).tolist()\r\n[[[[2, 2, 3]], [[3, 3, 3]]], [[[0, 0], [0]], [[1, 1, 1]]]]\r\n```\r\ninstead of \r\n```python3\r\n[[[[2, 2], [3]], [[3, 3, 3]]], [[[0, 0, 0]], [[1, 1, 1]]]]\r\n```\r\n\r\nMy expectation is that these public APIs should respect the depth-preserving (`IndexedArray`) layouts.  \r\n\r\n## Cause :mag: \r\nThe cause is simply that we don't transform the `counts` array with respect to preceding layouts. \r\n\r\n### Same-depth `IndexedArray`s\r\n`ak.unflatten` uses `recursively_apply` to find the layout corresponds to the axis *above* the location indicated by the user. When there are `ak.layout.IndexedArray` layouts at the same depth, we move past them until we find a list type. https://github.com/scikit-hep/awkward-1.0/blob/94de4e5112ad3a2d5fc9c2ec0fc29e242543a0d6/src/awkward/operations/structure.py#L2093\r\ne.g. walking the above example\r\n| Layout          | Depth | List Type? |\r\n|-----------------|-------|------------|\r\n| IndexedArray    | 1     | False      |\r\n| ListOffsetArray | 1     | True       |\r\n\r\n### Upper `IndexedArray`s\r\nEffectively the `getfunction` skips over these layouts until the correct depth is reached.\r\n\r\n## Solution :wrench: \r\nI *think* we need to aggregate the non list-type layouts that precede the current list-type layout (that `getfunction` operates upon) and create a new `IndexedArray` layout that wraps the current layout's content. Then, we create the `ListOffsetArray` over *this* layout, and restore the structural layouts above.",
  "closed_at":"2021-06-15T19:58:34Z",
  "comments":10,
  "created_at":"2021-06-11T08:39:37Z",
  "id":918438283,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MTg0MzgyODM=",
  "number":910,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.unflatten` does not respect `IndexedArray` w.r.t `counts`",
  "updated_at":"2021-06-15T19:58:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Thanks @drahnreb for clarifying it:\r\n\r\n> This is somewhat expected behavior when providing `ns` resolution. \r\n> \r\n> ```python\r\n> >>> np.datetime64('2019-09-02T09:30:00', 'ns').tolist()\r\n> 1567416600000000000\r\n> >>> np.datetime64(\"2019-09-02T09:30:00.0000000\").tolist()\r\n> 1567416600000000000\r\n> ```\r\n> \r\n> It's a very [old and complex (if not weird)](https://stackoverflow.com/questions/13703720/converting-between-datetime-timestamp-and-datetime64/21916253#21916253) behavior.\r\n> Numpy considers datetime still [experimenting](https://numpy.org/doc/stable/reference/arrays.datetime.html), and this might change anytime, but I would prefer to mimic rather than sacrificing non-vectorized performance.\r\n> \r\n> \r\n\r\n_Originally posted by @drahnreb in https://github.com/scikit-hep/awkward-1.0/pull/835#r649397958_",
  "closed_at":"2021-06-15T12:14:01Z",
  "comments":6,
  "created_at":"2021-06-11T09:09:59Z",
  "draft":false,
  "id":918478107,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY3OTAzNjE4",
  "number":911,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"revert to expected behavior when providing ns resolution",
  "updated_at":"2021-06-15T19:38:26Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This will simplify the length and order violating layouts such that external operations are compatible with per-layout transformations like `ak.unflatten`.\r\n\r\n- [x] **EmptyArray:** unchanged\r\n- [x] **NumpyArray:** converted to contiguous, if not already\r\n- [x] **RegularArray:** truncate the `content` to `len(original) * size` with special handling (pass through) if `size == 0`\r\n- [x] **ListArray:** convert `toListOffsetArray64(true)` (the `true` means starting at zero)\r\n- [x] **ListOffsetArray:** convert `toListOffsetArray64(true)` (it's a pass-through if it's already true that `offsets[0] == 0`)\r\n- [x] **RecordArray:** truncate all the `contents` to `len(original)`\r\n- [x] **IndexedArray:** `project()` it\r\n- [x] **ByteMaskedArray:** convert `toIndexedOptionArray` if the `content` does not have `PrimitiveType`. Doing so will naturally lead to the right kind of `index`. If not changing the type (because the `content` has `PrimitiveType`), at least truncate the `content` length to `len(original)`.\r\n- [x] **IndexedOptionArray:** convert `toByteMaskedArray` if the `content` has `PrimitiveType`; otherwise, we want to project the `content` such that the non-negative `index` values become simple counting... the `index` should end up looking like `0, 1, 2, -1, 3, -1, -1, -1, 4, 5...`. That will take some thought.\r\n- [x] **BitMaskedArray:** convert `toIndexedOptionArray` if the `content` does not have `PrimitiveType`. If not changing the type, at least truncate the `content` length to `len(original)`.\r\n- [x] **UnmaskedArray:** unchanged (but recursively descend, of course)\r\n- [x] **UnionArray:** simplify the `index` by `project`ing each of the `contents`\r\n- [x] **VirtualArray:** materialize and recursively descend\r\n- ~~**PartitionedArray** concatenate partitions?~~",
  "closed_at":"2021-06-14T22:33:46Z",
  "comments":37,
  "created_at":"2021-06-11T14:30:03Z",
  "draft":false,
  "id":918824742,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY4MjEzMzYx",
  "number":912,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-14T22:33:46Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Feature: add `ak.packed`",
  "updated_at":"2021-06-14T22:33:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I've been making unit tests for the C++ \u2192 Python transition and found out how the datetime types are being made [consistent with Datashape](https://datashape.readthedocs.io/en/latest/types.html#date-time-and-datetime):\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/94de4e5112ad3a2d5fc9c2ec0fc29e242543a0d6/src/libawkward/util.cpp#L73-L78\r\n\r\nand\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/94de4e5112ad3a2d5fc9c2ec0fc29e242543a0d6/src/libawkward/util.cpp#L119-L122\r\n\r\nBut this means that in all other contexts, the name has the \"64\" stripped as well. This is inconsistent with our other uses of dtypes, and that's worse than being inconsistent with Datashape. Moreover, Datashape is not consistent with itself: all the other types, \"int8\", \"int32\", \"int64\", \"float64\", etc., have the bit width in their names.\r\n\r\nSo I'd like to go back on this, to let datetime64 and timedelta64 have the \"64\" in their names, foregoing strict adherence with Datashape (which we're not completely keeping anyway: it doesn't look like they'll ever add unions and such, which we need blaze/datashape#237).\r\n\r\n@ianna, please revert the names of datetime64 and timedelta64 to have the \"64\" at the end, before anything starts to depend on it. Thanks!",
  "closed_at":"2021-06-30T18:50:43Z",
  "comments":1,
  "created_at":"2021-06-11T20:07:13Z",
  "id":919166433,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MTkxNjY0MzM=",
  "number":913,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"The dtype name for datetime64 and timedelta64 shouldn't strip off the \"64\"",
  "updated_at":"2021-06-30T18:50:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Types Checklist:\r\n\r\n   - Type superclass\r\n      - [x] `parameters` property\r\n      - [x] `typestr` property\r\n      - [x] private helper function(s) for \"categorical\" handling\r\n   - UnknownType\r\n      - [x] `__init__`\r\n      - [x] `__str__`\r\n      - [x] `__repr__`\r\n   - NumpyType (renamed from PrimitiveType)\r\n      - [x] `__init__`\r\n      - [x] `primitive` property (renamed from `dtype`)\r\n      - [x] `__str__` with special handling for datetime64/timedelta64, char, and byte\r\n      - [x] `__repr__`\r\n   - RegularType\r\n      - [x] `__init__` (complain about negative size)\r\n      - [x] `content` property (renamed from `type`)\r\n      - [x] `size` property\r\n      - [x] `__str__` with special handling for string and bytestring\r\n      - [x] `__repr__`\r\n   - ListType\r\n      - [x] `__init__`\r\n      - [x] `content` property (renamed from `type`)\r\n      - [x] `__str__` with special handling for string and bytestring\r\n      - [x] `__repr__`\r\n   - RecordType\r\n      - [x] `__init__`\r\n      - [x] `contents` property (renamed from `types`)\r\n      - [x] `recordlookup` property\r\n      - [x] `__str__` with special handling for unnamed/named, `recordlookup is None`\r\n      - [x] `__repr__`\r\n   - OptionType\r\n      - [x] `__init__`\r\n      - [x] `content` property (renamed from `type`)\r\n      - [x] `__str__` with special handling for nested RegularType/ListType\r\n      - [x] `__repr__`\r\n   - UnionType\r\n      - [x] `__init__`\r\n      - [x] `contents` property (renamed from `types`)\r\n      - [x] `__str__`\r\n      - [x] `__repr__`\r\n   - ArrayType (not a subclass of Type)\r\n      - [x] `__init__` (complain about negative length)\r\n      - [x] `content` property (renamed from `type`)\r\n      - [x] `length` property\r\n      - [x] `__str__`\r\n      - [x] `__repr__`\r\n\r\nForms checklist:\r\n\r\n   - [x] `from_iter` function\r\n   - [x] `from_json` just calls `from_iter(json.loads(data))`\r\n   - [x] `numpyform.from_dtype` function\r\n   - Form superclass\r\n      - [x] `has_identities` property\r\n      - [x] `parameters` property\r\n      - [x] `form_key` property\r\n      - [x] `__str__` method returns `json.dumps(self.tolist(verbose=False), indent=\"    \")`\r\n      - [x] `tolist` method starts recursion into `_tolist_part` so that `toplevel=False` can be handled specially\r\n      - [x] `to_list` is a synonym for `tolist` (historical)\r\n      - [x] `to_json` just calls `json.dumps(self.tolist())`\r\n   - EmptyForm\r\n      - [x] `__init__`\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - NumpyForm\r\n      - [x] `__init__`\r\n      - [x] `primitive` property (replaces `itemsize`, `format`, and `dtype` from C++)\r\n      - [x] `inner_shape`\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part` with special handling when `not verbose and not toplevel`\r\n   - RegularForm\r\n      - [x] `__init__`\r\n      - [x] `content` property\r\n      - [x] `size` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - ListForm\r\n      - [x] `__init__`\r\n      - [x] `starts` property\r\n      - [x] `stops` property\r\n      - [x] `content` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - ListOffsetForm\r\n      - [x] `__init__`\r\n      - [x] `offsets` property\r\n      - [x] `content` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - RecordForm\r\n      - [x] `__init__`\r\n      - [x] `contents` property\r\n      - [x] `recordlookup` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - IndexedForm\r\n      - [x] `__init__`\r\n      - [x] `index` property\r\n      - [x] `content` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - IndexedOptionForm\r\n      - [x] `__init__`\r\n      - [x] `index` property\r\n      - [x] `content` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - ByteMaskedForm\r\n      - [x] `__init__`\r\n      - [x] `mask` property\r\n      - [x] `content` property\r\n      - [x] `valid_when` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - BitMaskedForm\r\n      - [x] `__init__`\r\n      - [x] `mask` property\r\n      - [x] `content` property\r\n      - [x] `valid_when` property\r\n      - [x] `lsb_order` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - UnmaskedForm\r\n      - [x] `__init__`\r\n      - [x] `content` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - UnionForm\r\n      - [x] `__init__`\r\n      - [x] `tags` property\r\n      - [x] `index` property\r\n      - [x] `contents` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n   - VirtualForm\r\n      - [x] `__init__`\r\n      - [x] `form` property\r\n      - [x] `has_length` property\r\n      - [x] `__repr__`\r\n      - [x] `_tolist_part`\r\n",
  "closed_at":"2021-06-24T13:28:33Z",
  "comments":2,
  "created_at":"2021-06-11T20:35:27Z",
  "draft":false,
  "id":919189274,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY4NTM5NTM2",
  "number":914,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-24T13:28:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Type and Form classes",
  "updated_at":"2021-06-24T13:28:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"address https://github.com/scikit-hep/awkward-1.0/issues/913",
  "closed_at":"2021-06-12T22:24:57Z",
  "comments":4,
  "created_at":"2021-06-12T16:02:22Z",
  "draft":false,
  "id":919597728,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY4ODk5OTgz",
  "number":915,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-12T22:24:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"revert to datetime64 and timedelta64",
  "updated_at":"2021-06-13T16:09:35Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"issue https://github.com/scikit-hep/awkward-1.0/issues/909",
  "closed_at":"2021-06-15T12:12:33Z",
  "comments":0,
  "created_at":"2021-06-14T08:54:29Z",
  "draft":false,
  "id":920193048,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY5Mzc5NTM4",
  "number":916,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-15T12:12:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"`ak.values_astype` support `dtype` specifier `np.datetime64` to convert `?int` or `?float` typed unix timestamps to `datetime64`",
  "updated_at":"2021-06-15T12:12:34Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"## Change\r\nThis PR modifies the signature of `ak.fill_none`, by adding a new `axis` parameter. This parameter can either by an `int` or `None`. \r\n\r\n## Motivation\r\nThe existing behaviour of `ak.fill_none` is not easily predictable; the C++ layer ultimately operates upon the first layout(s) within the tree that are option types. Users sometimes encounter the need to remove *all* `None`s, which requires several calls to `ak.fill_none`. Framework authors might wish to ensure inputs are `None` free, this change now enables that more easily.\r\n\r\n## Notes\r\nWhilst the `type(axis) is int` cases are unambiguous as to their intended behaviour, the `axis=None` variant is up for debate.\r\n\r\nHere, @jpivarski and I decided that `axis=None` should fill *all* `None`s. Because any choice of axis is now more restrictive than the existing behaviour, until the next major version the `fill_none` function will default to the old behaviour when no `axis` is set.",
  "closed_at":"2021-07-13T17:02:38Z",
  "comments":25,
  "created_at":"2021-06-14T13:30:32Z",
  "draft":false,
  "id":920415967,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY5NTY4OTk0",
  "number":917,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-13T17:02:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feature: add axis parameter to `ak.fill_none`",
  "updated_at":"2021-07-13T17:02:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is a very simple PR to add `pass_apply` to `recursively_apply`. This permits clients of this function to re-enter, without re-implementing the same logic. This is not useful for #912 but is useful for #917",
  "closed_at":"2021-06-14T16:19:58Z",
  "comments":0,
  "created_at":"2021-06-14T15:13:03Z",
  "draft":false,
  "id":920514863,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY5NjUzMDg2",
  "number":918,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-14T16:19:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feature: add `pass_apply` argument to util",
  "updated_at":"2021-06-14T16:19:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 21.5b2 \u2192 21.6b0](https://github.com/psf/black/compare/21.5b2...21.6b0)\n",
  "closed_at":"2021-06-14T18:23:39Z",
  "comments":0,
  "created_at":"2021-06-14T17:19:42Z",
  "draft":false,
  "id":920619574,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjY5NzQxNTIy",
  "number":919,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-14T18:23:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-06-14T18:23:40Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"For example\r\n\r\n```pycon\r\n>>> import awkward as ak\r\n>>> array = ak.Array([1, 2, 3])\r\n>>> ak.to_parquet(array, \"array.parquet\")\r\n>>> f = open(\"array.parquet\", \"rb\")\r\n>>> array2 = ak.from_parquet(f)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/nikolai/.local/lib/python3.9/site-packages/awkward/operations/convert.py\", line 3566, in from_parquet\r\n    single_file = pyarrow.parquet.ParquetFile(filename)\r\n  File \"/home/nikolai/.local/lib/python3.9/site-packages/pyarrow/parquet.py\", line 217, in __init__\r\n    self.reader.open(source, use_memory_map=memory_map,\r\n  File \"pyarrow/_parquet.pyx\", line 947, in pyarrow._parquet.ParquetReader.open\r\n  File \"pyarrow/io.pxi\", line 1473, in pyarrow.lib.get_reader\r\n  File \"pyarrow/io.pxi\", line 1466, in pyarrow.lib.get_native_file\r\nTypeError: Cannot convert bytes to pyarrow.lib.NativeFile\r\n```\r\n\r\npresumably because file-like objects are instances of `Iterable`, so it tries to loop over them here:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/0fe77918e1fa828e539ff287153150d028decfda/src/awkward/operations/convert.py#L3616-L3617\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.3.0'\r\n```\r\n",
  "closed_at":"2021-06-15T18:58:26Z",
  "comments":6,
  "created_at":"2021-06-15T09:01:57Z",
  "id":921172578,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MjExNzI1Nzg=",
  "number":921,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`from_parquet` does not work with file-like objects",
  "updated_at":"2021-06-15T18:58:26Z",
  "user":"MDQ6VXNlcjM3MDcyMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This fixes #910 by ensuring that the structure *above* the flatten site is regular. This will sometimes lead to projections of arrays *at* the flatten axis, but that's because `packed` decides not to introduce another indirection and instead just forces the copy. We could look at modifying that at a later date if it proves problematic.",
  "closed_at":"2021-06-15T19:58:34Z",
  "comments":2,
  "created_at":"2021-06-15T09:32:42Z",
  "draft":false,
  "id":921200509,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjcwMjM3Mzky",
  "number":922,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-15T19:58:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: use `ak.packed` in `ak.unflatten`",
  "updated_at":"2021-06-15T19:58:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This doesn't fully address the larger changes that we probably need to make w.r.t #886, but does fix #921.\r\n\r\nPerhaps this is a good stop-gap fix until we address the larger changes.",
  "closed_at":"2021-06-15T18:58:27Z",
  "comments":0,
  "created_at":"2021-06-15T11:40:52Z",
  "draft":false,
  "id":921305308,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjcwMzI3MTEx",
  "number":923,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-15T18:58:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: check for `file`-like objects in `from_parquet`",
  "updated_at":"2021-06-15T18:58:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"as discussed current `TypedArrayBuilder` is a `LayoutBuilder`. Name it appropriately.",
  "closed_at":"2021-06-16T14:10:17Z",
  "comments":1,
  "created_at":"2021-06-15T13:40:42Z",
  "draft":false,
  "id":921411163,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjcwNDE3ODUz",
  "number":924,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-16T14:10:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"rename `TypedArrayBuilder` to `LayoutBuilder`",
  "updated_at":"2021-06-16T14:10:17Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-15T15:58:54Z",
  "comments":0,
  "created_at":"2021-06-15T15:17:19Z",
  "draft":false,
  "id":921510628,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjcwNTAyNjU0",
  "number":925,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-15T15:58:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Added '[todo]' to unwritten documentation, added a few nodes, and added description of ak.packed to how-to-convert-buffers.md.",
  "updated_at":"2021-06-15T15:58:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I'd like to add the following image to the description. Shall I add it to \r\n`docs-img/diagrams/axis.jpg`?\r\n\r\n```\r\n% ls -al docs-img/diagrams/axis.jpg\r\n-rw-r--r--@ 1 yana  staff  31328 Jun 15 17:35 docs-img/diagrams/axis.jpg\r\n```\r\n<img src=\"https://user-images.githubusercontent.com/1390682/122084870-80bc1b80-ce02-11eb-9146-bd36f11423b0.jpg\" alt=\"axis\" width=\"50%\"/>\r\n",
  "closed_at":"2021-06-23T11:02:38Z",
  "comments":9,
  "created_at":"2021-06-15T15:58:15Z",
  "draft":true,
  "id":921552959,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjcwNTM4OTMw",
  "number":926,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"start on sorting documentation",
  "updated_at":"2021-11-12T14:51:15Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"```python3\r\n>>> ak.from_numpy(np.random.random(size=(4, 100*1024*1024//8//4)), regulararray=False).nbytes\r\n32\r\n>>> ak.from_numpy(np.random.random(size=(4, 100*1024*1024//8//4)), regulararray=True).nbytes\r\n104857600\r\n```",
  "closed_at":"2021-06-15T19:57:21Z",
  "comments":0,
  "created_at":"2021-06-15T17:53:02Z",
  "id":921652947,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MjE2NTI5NDc=",
  "number":927,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`NumpyArray.nbytes` returns wrong value for n-D arrays",
  "updated_at":"2021-06-15T19:57:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #927 ",
  "closed_at":"2021-06-15T19:57:21Z",
  "comments":0,
  "created_at":"2021-06-15T18:01:53Z",
  "draft":false,
  "id":921659827,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjcwNjMwNTM0",
  "number":928,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-15T19:57:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: return correct `nbytes` value for multidimensional NumPy arrays",
  "updated_at":"2021-06-15T19:57:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This behaviour can be replicated with `warnings.simplefilter(\"error\", category)`\r\nAdditionally remove usage in tests where no deprecated behaviour exists.\r\n\r\nFrom `grep`ing the code, there are currently no clients of this global variable besides that of `deprecate`.\r\n\r\nThis will be useful for making the tests pass in #917, but is not directly related to it.",
  "closed_at":"2021-06-15T23:37:00Z",
  "comments":10,
  "created_at":"2021-06-15T21:20:42Z",
  "draft":false,
  "id":921811090,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjcwNzU3OTI4",
  "number":929,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-15T23:37:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Refactor: remove `ak.deprecations_as_errors`",
  "updated_at":"2021-06-15T23:40:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Maybe the new rule could be,\r\n\r\n   1. if the UnionArray has a parameter with a given name, `purelist_parameter(name)` should return its value;\r\n   2. if the UnionArray does not have this parameter, but every one of its contents has that parameter with the same value, then `purelist_parameter(none)` should return that common value.\r\n\r\nNone of the error cases that raised this issue are still errors, though. In all of those cases, it was wrong for the UnionArray to have existed: a `simplifiy_uniontype` call was missing. The above rule would make UnionArrays transparent to common parameters, but maybe that's bad because then we'd be less likely to catch missing `simplifiy_uniontype` calls, since that's a common symptom.\r\n\r\nAre there any legitimate cases in which you'd have a UnionArray with all contents having the same parameter? I can think of one corner-case: you have an array of records that are all Lorentz vectors (`\"__record__\": \"Momentum4D\"`), but some of them have auxiliary data, like `\"charge\"` because they're electrons, while others don't. Then you'd want the record name to be visible above the UnionArray.\r\n\r\n_Originally posted by @jpivarski in https://github.com/scikit-hep/awkward-1.0/issues/770#issuecomment-861867937_",
  "closed_at":"2021-07-12T23:43:13Z",
  "comments":3,
  "created_at":"2021-06-16T15:18:30Z",
  "id":922752847,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MjI3NTI4NDc=",
  "number":930,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"UnionArrays must not hide a `__record__` parameter when all contents have the same `__record__` value",
  "updated_at":"2021-07-12T23:43:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Let's see what I can get done...",
  "closed_at":"2021-06-17T23:34:38Z",
  "comments":0,
  "created_at":"2021-06-16T15:59:52Z",
  "draft":false,
  "id":922800383,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjcxNjMyMTY4",
  "number":931,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-17T23:34:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Writing tutorial documentation 2021-06-16",
  "updated_at":"2021-06-17T23:34:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This is a weird bug that I can only trigger for certain forms. This form fails, but if you remove any of the inner-most fields, or remove an outer set of list brackets, it no longer fails.\r\n\r\n```python\r\nimport io\r\n\r\nimport awkward as ak\r\n\r\narray = ak.Array(\r\n    [[{\"addr\": {\"aget\": 3,  \"cobo\": 0}}]]\r\n)\r\n\r\nf = io.BytesIO()\r\nak.to_parquet(array, f)\r\nf.seek(0)\r\n\r\nrestored = ak.from_parquet(f, lazy=True)\r\nak.materialized(restored)\r\n```",
  "closed_at":"2021-12-07T21:18:10Z",
  "comments":3,
  "created_at":"2021-06-16T23:00:29Z",
  "id":923193972,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MjMxOTM5NzI=",
  "number":932,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`from_parquet` with `lazy` raises `ArrowInvalid` ",
  "updated_at":"2021-12-07T21:18:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR refactors the `from_parquet` implementation into several `Reader` classes. These objects are used by the reduced-scope `_ParquetGenerator` class to build a lazy array, or by the greedy (up-front) construction of an Array when `lazy=False`.\r\n\r\nSome initial work is done to prepare for `_ArrowDatasetReader`.\r\n\r\nThis PR should *not* add any new functionality or (hopefully) break anything.\r\n\r\nI plan in another PR to then remove all of the dataset readers, add an `_ArrowDatasetReader`, and leave only the `_ParquetFileReader` to handle file-like source arguments.",
  "closed_at":"2021-06-22T17:42:52Z",
  "comments":24,
  "created_at":"2021-06-17T09:31:50Z",
  "draft":false,
  "id":923703161,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjcyNDM5MTMw",
  "number":935,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-22T17:42:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Separate `from_parquet` into different routines",
  "updated_at":"2021-06-22T17:42:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Currently, `ak.packed` doesn't truncate the contents of a `ListOffsetArray`, so buffers can be larger than necessary after calling the function.\r\n\r\nFixes #938 ",
  "closed_at":"2021-06-18T14:57:40Z",
  "comments":3,
  "created_at":"2021-06-18T06:03:30Z",
  "draft":false,
  "id":924571806,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjczMTkxNDE2",
  "number":937,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-18T14:57:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: truncate `ListOffsetArray` contents",
  "updated_at":"2021-06-18T14:57:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"```python3\r\nFor example, this layout\r\n>>> content = ak.layout.NumpyArray(\r\n...     np.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])\r\n... )\r\n>>> offsets = ak.layout.Index64(np.array([0, 3, 3, 5, 6]))\r\n>>> layout = ak.layout.ListOffsetArray64(offsets, content)\r\n```\r\nProduces this when packed\r\n```python3\r\n>>> packed = ak.packed(layout, highlevel=False)\r\n>>> packed.content\r\n<NumpyArray format=\"d\" shape=\"9\" data=\"1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9\" at=\"0x000001b74f90\"/>\r\n```\r\nwhen it should be\r\n```python3\r\n>>> packed.content\r\n<NumpyArray format=\"d\" shape=\"6\" data=\"1.1 2.2 3.3 4.4 5.5 6.6\" at=\"0x0000017d2f90\"/>\r\n```",
  "closed_at":"2021-06-18T14:57:40Z",
  "comments":0,
  "created_at":"2021-06-18T06:05:25Z",
  "id":924572923,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MjQ1NzI5MjM=",
  "number":938,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.packed` doesn't truncate the contents of `ListOffsetArray`",
  "updated_at":"2021-06-18T14:57:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This issue has been refiled as I've understood the cause better.\r\n\r\nThe list types simplify the act of merging by simplifying to the most generic type (`ListArray64`). Not only is it more generic, it also supports different contents, which means we don't need to check whether contents are mergeable (although this is subsequently done to simplify the type).\r\n\r\nThis behaviour has implications for operations that expect / require the layout types to remain identical for \"compatible\" layouts e.g. `ak.partitioned`.\r\n\r\nIn theory, it should be possible to first try and merge the contents. If this works, then we should be able to retain the same family of list type. \r\n\r\nWhat I would like is something more like this:\r\n```python3\r\ndef merge_list_offset(this, that):\r\n    this = this.toListOffsetArray64(True)\r\n    that = that.toListOffsetArray64(True)\r\n\r\n    content = merge(this.content[: len(this)], that.content[: len(that)])\r\n    index = ak.layout.Index64(\r\n        np.concatenate(\r\n            (\r\n                np.asarray(this.offsets),\r\n                np.asarray(this.offsets)[-1] + np.asarray(that.offsets),\r\n            )\r\n        )\r\n    )\r\n    return ak.layout.ListOffsetArray64(index, content)\r\n\r\ndef merge_regular(this, that):\r\n    if this.size == that.size:\r\n        content = merge(this.content, that.content)\r\n        return ak.layout.RegularArray(content, this.size)\r\n\r\n    return merge(this, that)\r\n\r\ndef merge_record(this, that):\r\n    new_content = [merge(a, b) for a, b in zip(this.contents, that.contents)]\r\n    return ak.layout.RecordArray(new_content, this.recordlookup, len(this))\r\n\r\nSYMMETRIC_TABLE = {\r\n    ak.layout.ListOffsetArray64: merge_list_offset,\r\n    ak.layout.RegularArray: merge_regular,\r\n    ak.layout.NumpyArray: lambda this, that: this.merge(that),\r\n    ak.layout.RecordArray: merge_record,\r\n}\r\n\r\ndef merge(this, that):\r\n    this = ak.packed(this, highlevel=False)\r\n    that = ak.packed(that, highlevel=False)\r\n\r\n    assert this.mergeable(that)\r\n    if (merge_symmetric := SYMMETRIC_TABLE.get(type(this))) and isinstance(\r\n        that, type(this)\r\n    ):\r\n        return merge_symmetric(this, that)\r\n\r\n    raise NotImplementedError(f\"merge({type(this)}, {type(that)}\")\r\n```\r\n\r\nIs this something that we're planning on moving to the Python layer anyway?",
  "closed_at":"2021-12-07T21:21:25Z",
  "comments":5,
  "created_at":"2021-06-18T06:30:54Z",
  "id":924587911,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MjQ1ODc5MTE=",
  "number":939,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Merging list-types unnecessarily changes layout",
  "updated_at":"2021-12-07T21:21:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Traceback\r\n```pytb\r\n---------------------------------------------------------------------------\r\nNameError                                 Traceback (most recent call last)\r\n<ipython-input-55-18e9a13fc6a7> in <module>\r\n----> 1 dataset = _from_hdf5_dataset(\"/tmp/dataset\")\r\n\r\n/mnt/app/texat/src/texat/awkward/io.ipynb in _from_hdf5_dataset(directory, lazy, h5py_options)\r\n     82     partitions = sum([ak.partition.every(l) for l in layouts], start=[])\r\n     83     layout = ak.partitioned(partitions, highlevel=False)\r\n---> 84     cached = ak.with_cache(layout, cache={})\r\n     85     return ak.Array(cached)\r\n     86 \r\n\r\n/opt/texat-venv/lib/python3.9/site-packages/awkward/operations/structure.py in with_cache(array, cache, highlevel, behavior)\r\n   4193             return None\r\n   4194 \r\n-> 4195     out = ak._util.recursively_apply(\r\n   4196         ak.operations.convert.to_layout(array), getfunction, pass_depth=False\r\n   4197     )\r\n\r\n/opt/texat-venv/lib/python3.9/site-packages/awkward/_util.py in recursively_apply(layout, getfunction, pass_depth, pass_user, pass_apply, user, keep_parameters, numpy_to_regular)\r\n   1322             )\r\n   1323 \r\n-> 1324     return apply(layout, 1, user)\r\n   1325 \r\n   1326 \r\n\r\n/opt/texat-venv/lib/python3.9/site-packages/awkward/_util.py in apply(layout, depth, user)\r\n   1127         if isinstance(layout, ak.partition.PartitionedArray):\r\n   1128             return ak.partition.IrregularlyPartitionedArray(\r\n-> 1129                 [apply(x, depth, user) for x in layout.partitions]\r\n   1130             )\r\n   1131 \r\n\r\n/opt/texat-venv/lib/python3.9/site-packages/awkward/_util.py in <listcomp>(.0)\r\n   1127         if isinstance(layout, ak.partition.PartitionedArray):\r\n   1128             return ak.partition.IrregularlyPartitionedArray(\r\n-> 1129                 [apply(x, depth, user) for x in layout.partitions]\r\n   1130             )\r\n   1131 \r\n\r\n/opt/texat-venv/lib/python3.9/site-packages/awkward/_util.py in apply(layout, depth, user)\r\n   1120         custom = getfunction(layout, *args)\r\n   1121         if callable(custom):\r\n-> 1122             return custom()\r\n   1123         else:\r\n   1124             user = custom\r\n\r\n/opt/texat-venv/lib/python3.9/site-packages/awkward/operations/structure.py in <lambda>()\r\n   4185             return lambda: ak.layout.VirtualArray(\r\n   4186                 layout.generator,\r\n-> 4187                 newcache,\r\n   4188                 layout.cache_key,\r\n   4189                 layout.identities,\r\n\r\nNameError: free variable 'newcache' referenced before assignment in enclosing scope\r\n```",
  "closed_at":"2021-06-18T20:18:46Z",
  "comments":0,
  "created_at":"2021-06-18T11:44:28Z",
  "id":924825205,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MjQ4MjUyMDU=",
  "number":940,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`with_cache` raises `NameError` if cache is given and layout already has one",
  "updated_at":"2021-06-18T20:18:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"In the case that `with_cache` is given the `\"new\"` literal or a bare-dict value for the cache, the returned array will ultimately be left with a broken cache. This is because in these cases a weak-referenceable proxy would is/need to be made which goes out of scope when `with_cache` returns.",
  "closed_at":"2021-06-18T14:42:37Z",
  "comments":1,
  "created_at":"2021-06-18T12:19:35Z",
  "id":924851281,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MjQ4NTEyODE=",
  "number":941,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`with_cache` should not accept `\"new\"` or bare-dict cache argument",
  "updated_at":"2021-06-18T14:42:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR fixes #940 and #941.\r\n\r\n`with_cache` is one of two places (there's also something going on in the `convert` module w.r.t cache handling) the current cache handling is slightly broken. This PR simplifies the scope of the function by requiring the user to have created the cache prior to calling `with_cache`. Currently, the lifetime of the cache proxy that is created in the removed cases is not associated with the lifetime of the cache.\r\n\r\nIt would be possible to retain the existing API by storing a reference to the proxy on the cache object, but this will break the assumption that the cache is populated exclusively for virtual materialisation.",
  "closed_at":"2021-06-18T20:18:47Z",
  "comments":9,
  "created_at":"2021-06-18T12:26:06Z",
  "draft":false,
  "id":924856049,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjczNDMxNzE1",
  "number":942,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-18T20:18:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: fix `with_cache` implementation",
  "updated_at":"2021-06-19T20:43:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-18T21:50:06Z",
  "comments":1,
  "created_at":"2021-06-18T16:11:45Z",
  "draft":false,
  "id":925041452,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjczNTkwNzUy",
  "number":943,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-18T21:50:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Tutorial documentation on 2021-06-18.",
  "updated_at":"2021-06-18T21:50:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski check this out. \r\nIn here, if we run `python dev/generate-strategies.py` it creates composite strategies by making use of contraints.json for particular kernel functions inside hypothesis-tests-spec folder. \r\nThe plan is , after the strategies are generated, I would call those strategies and fetch the inputs they generate. For each of those input I would dynamically call the kernel and store the input and the output in a json file (tests-data/json). \r\nThen make a change in the current generate-tests.py to fetch those input and outputs and generate the test cases.",
  "closed_at":"2021-07-13T12:18:47Z",
  "comments":2,
  "created_at":"2021-06-18T16:23:03Z",
  "draft":true,
  "id":925049181,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjczNTk3MjE0",
  "number":944,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"test data generation",
  "updated_at":"2021-07-13T12:18:47Z",
  "user":"MDQ6VXNlcjUyNjM1Nzcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"* do not drop `None`s  when sorting a 1D `IndexedOptionArray`\r\n* `argsort` to account `None`s by passing and post-processing `shifts`:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak.Array([None, None, 1, -1, 30])\r\n>>> ak.sort(array)\r\n<Array [-1, 1, 30, None, None] type='5 * ?int64'>\r\n>>> ak.argsort(array)\r\n<Array [3, 2, 4, None, None] type='5 * ?int64'>\r\n>>> array[ak.argsort(array)]\r\n<Array [-1, 1, 30, None, None] type='5 * ?int64'>\r\n```\r\n* unused `keepdim` has been dropped\r\n* `argsort` documentation corrected",
  "closed_at":"2021-07-01T19:50:24Z",
  "comments":12,
  "created_at":"2021-06-22T14:33:25Z",
  "draft":false,
  "id":927302312,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc1NDgwMTI4",
  "number":946,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-01T19:50:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"sorting an indexed option array in `axis0` bug fix; argsort to account `None`s",
  "updated_at":"2021-07-01T19:50:24Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-22T23:17:32Z",
  "comments":0,
  "created_at":"2021-06-22T17:59:44Z",
  "draft":false,
  "id":927497381,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc1NjQ2OTQ4",
  "number":947,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-22T23:17:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"How much documentation can I get done today?",
  "updated_at":"2021-06-22T23:17:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"<strike>this one replaces https://github.com/scikit-hep/awkward-1.0/pull/926</strike>",
  "closed_at":"2021-12-21T15:46:38Z",
  "comments":4,
  "created_at":"2021-06-23T11:01:55Z",
  "draft":false,
  "id":928133734,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc2MTgwMDc4",
  "number":948,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-21T15:46:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"pictures for a tutorial",
  "updated_at":"2021-12-21T15:46:38Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2022-01-10T09:35:09Z",
  "comments":1,
  "created_at":"2021-06-23T12:48:15Z",
  "draft":true,
  "id":928220655,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc2MjU1ODY3",
  "number":949,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"WIP: support _Arrow datasets",
  "updated_at":"2022-07-08T21:41:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-23T18:19:45Z",
  "comments":0,
  "created_at":"2021-06-23T14:07:05Z",
  "draft":false,
  "id":928300174,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc2MzI0NDEz",
  "number":950,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-23T18:19:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Appropriate FileNotFoundError for ak.from_json.",
  "updated_at":"2021-06-23T18:19:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-23T23:29:47Z",
  "comments":0,
  "created_at":"2021-06-23T16:46:30Z",
  "draft":false,
  "id":928454538,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc2NDU2NTAx",
  "number":951,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-23T23:29:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Writing documentation on 2021-06-23",
  "updated_at":"2021-06-23T23:29:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR adds a new `maybe_wrap_like` to handle the altogether more common case that we want to `maybe_wrap` and take the behaviour from an existing array. \r\n\r\n@jpivarski you might feel this is starting to lead to creep of helper functions, but I think it's reasonable given that these two patterns are very common in the codebase.",
  "closed_at":"2021-06-23T20:57:58Z",
  "comments":3,
  "created_at":"2021-06-23T19:20:44Z",
  "draft":false,
  "id":928567611,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc2NTUzNDQ5",
  "number":952,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-23T20:57:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Refactor: use `maybe_wrap` in source",
  "updated_at":"2021-06-23T20:57:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The tests wouldn't run from inside the directory.\n",
  "closed_at":"2021-06-24T14:38:54Z",
  "comments":3,
  "created_at":"2021-06-23T21:05:59Z",
  "draft":false,
  "id":928645445,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc2NjIwNjM4",
  "number":953,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-24T14:38:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"tests: fix loading from any directory",
  "updated_at":"2021-06-24T14:56:34Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The current version of the setup.py wasn't loading the correct MSVC reliably. I've synced this up with the work done on the `cmake_example`, which fixes this issue and is arguably a bit nicer with more docs.\n",
  "closed_at":"2021-06-24T16:41:40Z",
  "comments":2,
  "created_at":"2021-06-23T21:07:41Z",
  "draft":false,
  "id":928646561,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc2NjIxNTc5",
  "number":954,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-24T16:41:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix(setup): sync with cmake_example",
  "updated_at":"2021-06-24T19:06:38Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The current wheel building infrastructure does not test the wheels after building them. Manylinux1 wheels were broken due to a really weird bug - see https://github.com/pybind/pybind11/issues/3056 - that I don't understand yet. This should fix the wheels for now. The replacement wheel building infrastructure does test the wheels. :)\n",
  "closed_at":"2021-06-24T00:32:24Z",
  "comments":1,
  "created_at":"2021-06-23T21:10:09Z",
  "draft":false,
  "id":928648170,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc2NjIyOTE4",
  "number":955,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-24T00:32:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: manylinux1 couldn't take None/newaxis",
  "updated_at":"2021-06-24T00:32:24Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-06-24T16:58:00Z",
  "comments":2,
  "created_at":"2021-06-24T14:33:55Z",
  "draft":false,
  "id":929294116,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc3MTY2MDk2",
  "number":957,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-24T16:58:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Type and Form classes - touchups",
  "updated_at":"2021-06-24T16:58:01Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-24T22:13:44Z",
  "comments":0,
  "created_at":"2021-06-24T15:54:26Z",
  "draft":false,
  "id":929379075,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc3MjM5ODgx",
  "number":958,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-24T22:13:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: new Forms must accept old Form JSON",
  "updated_at":"2021-06-24T22:13:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"   - [x] `Content.__getitem__` in the right order\r\n   - [x] `EmptyArray._getitem_array`\r\n   - [x] `NumpyArray._getitem_array`\r\n   - [x] `RegularArray._getitem_array`\r\n   - [x] `ListArray._getitem_array`\r\n   - [x] `ListOffsetArray._getitem_array`\r\n   - [x] `RecordArray._getitem_array` handing the `allow_lazy` case\r\n   - [x] `IndexedArray._getitem_array`\r\n   - [x] `IndexedOptionArray._getitem_array`\r\n   - [x] `ByteMaskedArray._getitem_array`\r\n   - [x] `BitMaskedArray._getitem_array`\r\n   - [x] `UnmaskedArray._getitem_array`\r\n   - [x] `UnionArray._getitem_array`\r\n",
  "closed_at":"2021-07-20T00:40:06Z",
  "comments":3,
  "created_at":"2021-06-24T16:19:00Z",
  "draft":false,
  "id":929402187,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc3MjU5ODAw",
  "number":959,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-20T00:40:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":" C++ refactoring: _getitem_array implementation ",
  "updated_at":"2021-07-20T00:40:06Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This PR moves the wheel building to cibuilldwheel, and performs it on GitHub Actions. One benefit of GitHub Actions is that we can keep this up-to-date with dependabot at some point; another is that the Azure 10 build queue and the GitHub Actions 10 build queue are not synced, so these can build in parallel with Azure ;). It's the same hardware and VMs, generally.\r\n\r\nFeatures:\r\n* Tests are now run on the wheels. This caught some bugs (#953, #954, #950, #955).\r\n* SDists are build with pypa/build.\r\n* Wheels can be directly downloaded from the GitHub Actions interface.\r\n* Removed the manylinux1 32-bit wheels, which were segfaulting. Easy to re-add if the segfaults on running tests are fixed.\r\n* Removed the CPython 3.10 builds - Python 3.10 will not have a stable ABI until 3.10.0b4, so PyPy wheels are not supposed to be uploaded yet. Cibuildwheel 2.0.0 alphas have 3.10 support protected by a flag CIBW_PRERELEASE_PYTHONS, so that users don't upload 3.10 wheels accidentally during the early beta period.\r\n* Trimmed the overlapping manylinux wheels - it's now manylinux1 for 2.7, 3.5, and 3.6, and manylinux2010 for 3.6+. This is based on the Pip version analysis (performed using Hist ;) ) in https://github.com/pypa/manylinux/issues/994#issuecomment-792210874 \r\n* Added Universal2 builds for Python 3.8 and 3.9 (TODO: I still need to test these on my Apple Silicon machine)\r\n* Added Arm on Linux builds for 3.6+ (TODO: Should it be 3.7+? Are there old Arm users around? Due to emulation, these are _slow_. Travis can be used to get a faster native build, but not fond of messing with that. Building wheels should be pretty rare anyway.)\r\n* Added PyPy builds for Linux (tested) and macOS (untested due to missing macOS wheels for NumPy)\r\n* Builds manually triggered on GitHub, or on \"Release\" via GitHub (can be changed). TODO: Also on PR, so that this PR can build. Can be removed when the PR is ready.\r\n* PyTest defaults to printing a summary.\r\n* Removed almost 200 lines of code.\r\n\r\nThe CUDA build is currently untouched, still on Azure.",
  "closed_at":"2021-06-24T17:11:50Z",
  "comments":1,
  "created_at":"2021-06-24T17:07:10Z",
  "draft":true,
  "id":929437160,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc3Mjg5MjI0",
  "number":960,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: move to cibuildwheel on GHA",
  "updated_at":"2021-06-24T17:11:50Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This PR moves the wheel building to cibuilldwheel, and performs it on GitHub Actions. One benefit of GitHub Actions is that we can keep this up-to-date with dependabot at some point; another is that the Azure 10 build queue and the GitHub Actions 10 build queue are not synced, so these can build in parallel with Azure ;). It's the same hardware and VMs, generally.\r\n\r\nFeatures:\r\n* **Fixed** cross compile support for macOS.\n* Tests are now run on the wheels. This caught some bugs (#953, #954, #950, #955). Currently only testing with the `[tests]` extra.\r\n* SDists are built with `pypa/build`.\r\n* Wheels can be directly downloaded from the GitHub Actions interface.\r\n* **Removed** the manylinux1 32-bit wheels, which were segfaulting. Easy to re-add if the segfaults on running tests are fixed.\r\n* **Removed** the CPython 3.10 builds - Python 3.10 will not have a stable ABI until 3.10.0b4, so PyPy wheels are not supposed to be uploaded yet. Cibuildwheel 2.0.0 alphas have 3.10 support protected by a flag CIBW_PRERELEASE_PYTHONS, so that users don't upload 3.10 wheels accidentally during the early beta period.\r\n* **Trimmed** the overlapping manylinux wheels - it's now manylinux1 for 2.7, 3.5, and 3.6, and manylinux2010 for 3.6+. This is based on the Pip version analysis (performed using Hist ;) ) in https://github.com/pypa/manylinux/issues/994#issuecomment-792210874 Edit: now only removed the 3.9 wheel, should cover over 99% of users (in fact, NumPy does not ship a 3.9 manylinux1 wheel anymore either).\r\n*  **Added** Universal2 builds for Python 3.8 and 3.9 (TODO: I still need to test these on my Apple Silicon machine)\r\n* **Added** Arm on Linux builds for 3.6+ (TODO: Should it be 3.7+? Are there old Arm users around? Due to emulation, these are _slow_. Travis can be used to get a faster native build, but not fond of messing with that. Building wheels should be pretty rare anyway.)\r\n* **Added** PyPy builds for Linux (tested) and macOS (untested due to missing macOS wheels for NumPy)\r\n* Builds manually triggered on GitHub, or on \"Release\" via GitHub (can be changed). TODO: Also on PR, so that this PR can build. Can be removed when the PR is ready. Or anytime, it just has to trigger once to make the \"manual run\" option available in the UI.\r\n* PyTest defaults to printing a summary.\r\n* Removed almost 200 lines of code.\r\n* The wheels also now only upload to PyPI if all of them pass, instead of partially uploading a set of wheels if one or more break (big plus!).\r\n\r\nThe CUDA build is currently untouched, still on Azure. We will need to add a token to the secrets before deployment, as well.\r\n\r\nSummary of todo's:\r\n\r\n- [x] Test wheel on Apple Silicon\r\n- [x] Drop the build-on-PR\r\n- [x] What should the range of ARM builds be? 3.6+? 3.7+?\r\n- [x] Should we enable manylinux1 3.7 and 3.8? Looking back at that list, there's still 7% of users with an old pip version (that doesn't officially support Python 3.7) on Python 3.7. What are we aiming for here?",
  "closed_at":"2021-06-28T18:44:48Z",
  "comments":14,
  "created_at":"2021-06-24T17:12:09Z",
  "draft":false,
  "id":929440713,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc3MjkyMjMw",
  "number":961,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-28T18:44:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: move to cibw on GHA",
  "updated_at":"2021-06-28T18:44:49Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-25T00:38:19Z",
  "comments":0,
  "created_at":"2021-06-24T22:21:20Z",
  "draft":false,
  "id":929654993,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc3NDcyOTEx",
  "number":962,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-25T00:38:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: convert and compare v1 and v2 arrays; renamed v2 recordarray -> keys.",
  "updated_at":"2021-06-25T00:38:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I learned that jaxlib might be the culprit here: https://github.com/scikit-hep/pyhf/issues/1501#issuecomment-868670253",
  "closed_at":"2021-06-25T17:26:38Z",
  "comments":0,
  "created_at":"2021-06-25T16:44:57Z",
  "draft":false,
  "id":930339846,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc4MDUwMzcz",
  "number":963,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-25T17:26:38Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Test jaxlib<0.1.68 for segfault.",
  "updated_at":"2021-06-25T17:26:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"EDIT: this is a little fiddlier than first thought as we need to handle the case where the final field is removed (which causes `with_field` to fail). Perhaps we need to manually perform `with_field` or add a `no_broadcast` like option to it.",
  "closed_at":"2021-06-28T17:54:22Z",
  "comments":0,
  "created_at":"2021-06-28T15:30:44Z",
  "draft":true,
  "id":931697061,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc5MTUxMzcy",
  "number":965,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feature: add drop field",
  "updated_at":"2021-06-28T17:54:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-29T00:12:17Z",
  "comments":0,
  "created_at":"2021-06-28T17:23:39Z",
  "draft":false,
  "id":931795016,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njc5MjMzMTA0",
  "number":966,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-29T00:12:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Make dev/generate-kernel-signatures.py part of the build process and add Python ctypes signatures as well.",
  "updated_at":"2021-06-29T00:12:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Given the following layout\r\n```python3\r\nlayout = ak.layout.ListOffsetArray64(\r\n    ak.layout.Index64([1, 4]),\r\n    ak.layout.NumpyArray(np.arange(64)),\r\n)\r\n```\r\ncalling `argsort` does not produce a valid layout. It appears that the `index` parameter is not projected to start at 0:\r\n```python3\r\n>>> ak.argsort(layout, highlevel=False)\r\n<ListOffsetArray64>\r\n    <offsets><Index64 i=\"[1 4]\" offset=\"0\" length=\"2\" at=\"0x00000ba033d0\"/></offsets>\r\n    <content><NumpyArray format=\"l\" shape=\"3\" data=\"0 1 2\" at=\"0x000003c7b190\"/></content>\r\n</ListOffsetArray64>\r\n\r\n```",
  "closed_at":"2021-07-01T19:50:23Z",
  "comments":11,
  "created_at":"2021-06-30T14:22:31Z",
  "id":933765059,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MzM3NjUwNTk=",
  "number":967,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`argsort` produces invalid layout for `ListOffsetArray` with `offset[0] != 0`",
  "updated_at":"2021-07-01T19:50:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"There was a quick fix (made for KM3NeT data \ud83d\ude04) for doubly jagged arrays which were discussed here https://github.com/scikit-hep/uproot4/issues/90 and the it uses the `akward._io` submodule which is not accessible anymore directly (`AttributeError`) in `1.4.0rc2`.\r\n\r\nSee here:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/main/src/awkward/_connect/_uproot.py#L35\r\n\r\nI am not sure what the desired fix is, to import `_io` in `_connect/_uproot.py` or if this fix is now covered by further developments, so I thought I ask first before I do a PR \ud83d\ude09 \r\n\r\nHere is the full MWE (needs `pip install km3net-testdata`, I am not sure if this test\r\n\r\n```python\r\n>>> import uproot\r\n\r\n>>> uproot.__version__\r\n'4.0.7'\r\n\r\n>>> import awkward as ak\r\n\r\n>>> ak.__version__\r\n'1.4.0rc2'\r\n\r\n>>> from km3net_testdata import data_path\r\n\r\n>>> f = uproot.open(data_path(\"offline/mcv5.11r2.gsg_muonCChigherE-CC_50-5000GeV.km3_AAv1.jterbr00004695.jchain.aanet.498.root\"))\r\n\r\n>>> f[\"E/Evt/trks/trks.rec_stages\"].array()\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-18-80472509fad7> in <module>\r\n----> 1 f[\"E/Evt/trks/trks.rec_stages\"].array()\r\n\r\n~/Dev/km3io/venv/lib/python3.9/site-packages/uproot/behaviors/TBranch.py in array(self, interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, array_cache, library)\r\n   2076                         ranges_or_baskets.append((branch, basket_num, range_or_basket))\r\n   2077\r\n-> 2078         _ranges_or_baskets_to_arrays(\r\n   2079             self,\r\n   2080             ranges_or_baskets,\r\n\r\n~/Dev/km3io/venv/lib/python3.9/site-packages/uproot/behaviors/TBranch.py in _ranges_or_baskets_to_arrays(hasbranches, ranges_or_baskets, branchid_interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, library, arrays, update_ranges_or_baskets)\r\n   3476\r\n   3477         elif isinstance(obj, tuple) and len(obj) == 3:\r\n-> 3478             uproot.source.futures.delayed_raise(*obj)\r\n   3479\r\n   3480         else:\r\n\r\n~/Dev/km3io/venv/lib/python3.9/site-packages/uproot/source/futures.py in delayed_raise(exception_class, exception_value, traceback)\r\n     44         exec(\"raise exception_class, exception_value, traceback\")\r\n     45     else:\r\n---> 46         raise exception_value.with_traceback(traceback)\r\n     47\r\n     48\r\n\r\n~/Dev/km3io/venv/lib/python3.9/site-packages/uproot/behaviors/TBranch.py in basket_to_array(basket)\r\n   3420             basket_arrays = branchid_arrays[branch.cache_key]\r\n   3421\r\n-> 3422             basket_arrays[basket.basket_num] = interpretation.basket_array(\r\n   3423                 basket.data,\r\n   3424                 basket.byte_offsets,\r\n\r\n~/Dev/km3io/venv/lib/python3.9/site-packages/uproot/interpretation/objects.py in basket_array(self, data, byte_offsets, basket, branch, context, cursor_offset, library)\r\n    151                     \"cursor_offset\": cursor_offset,\r\n    152                 }\r\n--> 153                 output = awkward._connect._uproot.basket_array(\r\n    154                     form, data, byte_offsets, extra\r\n    155                 )\r\n\r\n~/Dev/km3io/venv/lib/python3.9/site-packages/awkward/_connect/_uproot.py in basket_array(form, data, byte_offsets, extra)\r\n     36     # FIXME: uproot_issue_90 is just a placeholder, to show how it would be done\r\n     37\r\n---> 38     return ak._io.uproot_issue_90(\r\n     39         form,\r\n     40         ak.layout.NumpyArray(data),\r\n\r\nAttributeError: module 'awkward' has no attribute '_io'\r\n```\r\n\r\n\r\n",
  "closed_at":"2021-06-30T20:16:20Z",
  "comments":3,
  "created_at":"2021-06-30T16:03:17Z",
  "id":933866289,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MzM4NjYyODk=",
  "number":968,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Doubly jagged workaround broken in awkward 1.4.0rc2",
  "updated_at":"2021-06-30T20:17:12Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"When `_packed` is given a negative axis for a layout that doesn't return a positive value in `wrap_axis_if_negative`, it actually bails early:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/bec1a0d240f0e590a835a0ef70e3687624c96be5/src/awkward/operations/structure.py#L2122-L2123\r\n\r\nWhat we are trying to catch here is whether the current depth is past the terminal depth, i.e. if we have gone past the deepest level we wish to operate on. This doesn't mean that deeper layouts aren't modified; the parent layout can simplify the child, but the child itself will not be simplified beyond this. \r\n\r\nBecause this routine bails whenever `posaxis` is negative, it is \"broken\" for unions.\r\n\r\nThis bug is only triggered by the public API if we try to `unflatten` an array containing unions using a negative axis.",
  "closed_at":"2021-07-01T17:32:15Z",
  "comments":6,
  "created_at":"2021-06-30T17:54:25Z",
  "id":933955643,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MzM5NTU2NDM=",
  "number":969,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`_packed` negative axes aren't handled properly for unions",
  "updated_at":"2021-07-01T17:32:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-06-30T20:16:20Z",
  "comments":0,
  "created_at":"2021-06-30T18:49:33Z",
  "draft":false,
  "id":934009680,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjgxMTMxMTUy",
  "number":970,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-06-30T20:16:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix #968, missing 'import awkward._io'.",
  "updated_at":"2021-06-30T20:16:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"To run ,\r\n`python dev/generate-strategies.py`\r\n`python hypothesis-tests-spec/gen.py`\r\n`python -m pytest  hypothesis-tests-spec/tests_awkward_IndexedArray_validity.py`\r\n",
  "closed_at":"2021-08-02T21:02:51Z",
  "comments":3,
  "created_at":"2021-06-30T22:40:04Z",
  "draft":true,
  "id":934179622,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjgxMjgwMjY2",
  "number":971,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Kernel function Test Cases",
  "updated_at":"2021-08-02T21:02:51Z",
  "user":"MDQ6VXNlcjUyNjM1Nzcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR does two things:\r\n\r\n## Support Explicit Recursive Transformers\r\nThe main reason for adding `pass_apply` to `recursively_apply`\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d3be0b101efeaf9f5345dfcbb7e03adc3f42c6c2/src/awkward/_util.py#L1175-L1195\r\n\r\nwas to enable recursive layout replacement. Having looked at the implementation again, however, it still doesn't go far enough to support the kinds of recursion that motivated this PR; it is not convenient to either call `apply` or just the generic recursion routine. \r\n\r\nThis PR moves the existing recursion logic into the free function `transform_child_layouts`. This reconstructs an existing layout, calling `transform` on each child layout to ensure that each level of the recursion may be overridden by the user.\r\nThe `recursively_apply` helper function is now written in terms of this new function:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/6c7e0659c33038cf8b0574b7d5a973a8448165ed/src/awkward/_util.py#L1184-L1203 \r\n\r\nThe combination of `transform` and `transform_child_layouts` makes explicit the recursion that was previously handled by testing the return value from the `getfunction`. Long-term, we might remove `recursively_apply` in favour of this new approach. For now, however, this PR re-implements the former using the latter.\r\n\r\n## Replace internal `_packed` implementation\r\nAdditionally, the `_packed` routine is replaced with `_pack_layout` which operates upon a single layout object. \r\nhttps://github.com/scikit-hep/awkward-1.0/blob/6c7e0659c33038cf8b0574b7d5a973a8448165ed/src/awkward/operations/structure.py#L2097-L2262\r\n\r\nThis is then recursively applied by `ak.packed` using a custom transformer:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/6c7e0659c33038cf8b0574b7d5a973a8448165ed/src/awkward/operations/structure.py#L2318-L2323\r\n\r\nCloses #969",
  "closed_at":"2021-07-01T17:32:16Z",
  "comments":0,
  "created_at":"2021-07-01T10:40:38Z",
  "draft":false,
  "id":934696834,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjgxNzI5MDE4",
  "number":972,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-01T17:32:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feature: add layout transformer & simplify unpacked",
  "updated_at":"2021-07-01T17:32:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Completely flattening an n-D `ak.layout.NumpyArray` doesn't produce a flat layout:\r\n\r\n```python3\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> ak.flatten(ak.from_numpy(np.zeros((3, 3, 5))), axis=None)\r\n<Array [[[0, 0, 0, 0, 0], ... [0, 0, 0, 0, 0]]] type='3 * 3 * 5 * float64'>\r\n```",
  "closed_at":"2021-07-01T18:54:30Z",
  "comments":0,
  "created_at":"2021-07-01T18:19:41Z",
  "id":935103465,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MzUxMDM0NjU=",
  "number":973,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.flatten` fails to flatten `ak.layout.NumpyArray` for `axis=None`",
  "updated_at":"2021-07-01T18:54:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fix #973 by calling `array.reshape(-1)` before returning from `ak._util.completely_flatten`",
  "closed_at":"2021-07-01T18:54:31Z",
  "comments":0,
  "created_at":"2021-07-01T18:23:03Z",
  "draft":false,
  "id":935105859,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjgyMDc2NTY3",
  "number":974,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-01T18:54:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: fix #973",
  "updated_at":"2021-07-01T18:54:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"The following example raises a `ValueError`\r\n```python3\r\n\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\narray = ak.Array(\r\n    ak.layout.RegularArray(ak.layout.NumpyArray(np.r_[1, 2, 3, 4, 5, 6, 7, 8, 9]), 3)\r\n)\r\nmask = ak.Array(ak.layout.NumpyArray(np.array([\r\n    [True, True, True],\r\n    [True, True, False],\r\n    [True, False, True]\r\n])))\r\n\r\nak.mask(array, mask)\r\n```",
  "closed_at":"2021-07-01T22:13:08Z",
  "comments":0,
  "created_at":"2021-07-01T21:24:04Z",
  "id":935225903,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MzUyMjU5MDM=",
  "number":975,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.mask` fails for n-dim `NumpyArray` masks",
  "updated_at":"2021-07-01T22:13:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #975",
  "closed_at":"2021-07-01T22:13:08Z",
  "comments":1,
  "created_at":"2021-07-01T21:28:03Z",
  "draft":false,
  "id":935228406,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjgyMTc5NzA2",
  "number":976,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-01T22:13:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: support multidimensional NumPy mask arrays in `ak.mask`",
  "updated_at":"2021-07-01T22:13:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- [x] move all `*::snapshot` methods that depended on `Content` classes to a `builder_snapshot(const ak::Builder& builder)` function invoked in `content.cpp` to be handled via `pybind11` \r\n<strike>- [ ] move `ArrayBuilder::append` methods to be handled via `pybind11` </strike>\r\n   as discussed, this one is needed for numba and will be revisited later\r\n- [x] remove `RawArray` class\r\n- [x] remove *.cpp tests\r\n- [x] remove dependent project",
  "closed_at":"2021-08-03T17:28:26Z",
  "comments":1,
  "created_at":"2021-07-02T09:48:27Z",
  "draft":false,
  "id":935606612,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjgyNDkwNzU0",
  "number":977,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-03T17:28:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ArrayBuilder refactoring",
  "updated_at":"2021-08-03T17:28:27Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Given the following n-dim `NumpyArray` condition, `ak.where` raises a `ValueError` (similar to #975)\r\n```python3\r\narray = ak.Array(\r\n    ak.layout.RegularArray(\r\n        ak.layout.NumpyArray(np.r_[1, 2, 3, 4, 5, 6, 7, 8, 9]), 3\r\n    )\r\n)\r\nmask = ak.Array(\r\n    ak.layout.NumpyArray(\r\n        np.array([[True, True, True], [True, True, False], [True, False, True]])\r\n    )\r\n)\r\n\r\nassert ak.where(mask == 2, array, 2 * array).tolist() == [\r\n    [2, 4, 6], \r\n    [8, 10, 12],  \r\n    [14, 16, 18]\r\n]\r\n```\r\n",
  "closed_at":"2021-07-12T18:18:30Z",
  "comments":0,
  "created_at":"2021-07-05T12:17:24Z",
  "id":937034642,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MzcwMzQ2NDI=",
  "number":979,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.where` fails for n-dim `NumpyArray` conditions",
  "updated_at":"2021-07-12T18:18:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Fixes #979",
  "closed_at":"2021-07-12T18:18:30Z",
  "comments":0,
  "created_at":"2021-07-05T12:21:58Z",
  "draft":false,
  "id":937038197,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjgzNjU3MjM2",
  "number":980,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-12T18:18:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: support n-dim `NumpyArray`s in `ak.where`",
  "updated_at":"2021-07-12T18:18:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"when processsing multiple batches of events it's possible that some fields are null / not present for fields that have variable size. Also the order of fields in a record may differ\r\n\r\nin order to do large-scale format transformation it'd be great if one could provide a fixed schema that is used in order to write files such that they can then be merged later \r\n\r\ncc @nikoladze ",
  "closed_at":"2023-07-02T17:45:47Z",
  "comments":19,
  "created_at":"2021-07-06T16:48:39Z",
  "id":938083348,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MzgwODMzNDg=",
  "number":981,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"ability to normalize schema in conversion  operations like `to_arrow()` / `to_parquet()`",
  "updated_at":"2023-07-02T17:45:47Z",
  "user":"MDQ6VXNlcjIzMTgwODM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"I wonder if the following is a bug or a feature:\r\n```python\r\n>>> import awkward as ak\r\n>>> ak.__version__\r\n'1.3.0'\r\n>>> ak_array = ak.Array([[[1, 2, 3], [], [4, 3, 2]], [[4, 5, 6], [], [2, 3, 4]]])\r\n>>> ak.min(ak_array, axis=0)\r\n<Array [[1, 2, 3], [2, 3, 2], []] type='3 * var * ?int64'>\r\n```\r\nThe empty nested list is now in last index.\r\nThis works if the array is masked though:\r\n```python\r\n>>> ak_array = ak.mask(ak_array, ak.count(ak_array, axis=2)>0)\r\n>>> ak.min(ak_array, axis=0)\r\n<Array [[1, 2, 3], [], [2, 3, 2]] type='3 * var * ?int64'>\r\n```\r\nIs this a bug in `ak.min` or should one always mask the ak array for such kind of operations?",
  "closed_at":"2021-07-14T01:37:30Z",
  "comments":6,
  "created_at":"2021-07-07T09:42:57Z",
  "id":938698900,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5Mzg2OTg5MDA=",
  "number":982,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.min` changes index of empty nested lists",
  "updated_at":"2021-07-14T01:37:30Z",
  "user":"MDQ6VXNlcjY5OTA1MDM1"
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"I see what appears to be an inconsistency between using `keepdims=True` in a reducer and the behavior of `ak.singletons`:\r\n\r\n```python\r\n>>> a = ak.Array([[3, 1, 2], [4, 5], []])\r\n>>> ak.argmin(a, axis=1, keepdims=True)\r\n<Array [[1], [0], [None]] type='3 * var * ?int64'>\r\n>>> ak.singletons(ak.argmin(a, axis=1))\r\n<Array [[1], [0], []] type='3 * var * int64'>\r\n```\r\nThis can get a bit annoying when I want to then use the indexer to slice the array:\r\n```python\r\n>>> a[ak.argmin(a, axis=1, keepdims=True)]\r\n<Array [[1], [4], [None]] type='3 * var * ?int64'>\r\n>>> a[ak.singletons(ak.argmin(a, axis=1))]\r\n<Array [[1], [4], []] type='3 * var * int64'>\r\n```\r\nIt would be nicer if the latter were the default, since although there is some ambiguity between `[]` and `None` for the third outer list element, I think `[None]` gets the bronze medal here.",
  "closed_at":null,
  "comments":9,
  "created_at":"2021-07-07T20:41:01Z",
  "id":939246486,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5MzkyNDY0ODY=",
  "number":983,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"argmin keepdims vs. singletons",
  "updated_at":"2024-01-20T00:37:13Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"As discussed in the [user docs](https://awkward-array.org/how-to-restructure-flatten.html#ak-flatten-with-axis-none), there is currently no straightforward way for a user to completely flatten an array without losing its record structure, e.g.\r\n\r\n```python3\r\n>>> array = ak.Array([{'x': 1, 'y': 'hi'}])\r\n>>> ak.flatten(array, axis=None)\r\n<Array [1, 104, 105] type='3 * int64'>\r\n```\r\n\r\n@jpivarski mentioned on Gitter the idea of adding a new `axis=\"records\"` case to `ak.flatten` which preserves (nested) record fields. ",
  "closed_at":null,
  "comments":1,
  "created_at":"2021-07-08T12:39:04Z",
  "id":939816191,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5Mzk4MTYxOTE=",
  "number":984,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Add record-preserving for behaviour to `ak.flatten`",
  "updated_at":"2022-12-19T13:14:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"As discussed in #984, this PR adds a new simplified `ak.ravel` counterpart to `np.ravel` for Awkward Arrays. This retains the record-losing behaviour of `ak.flatten(axis=None)`, and permits us to schedule the removal of this quirk from `ak.flatten` after a deprecation cycle. In the meantime, a new `axis=\"records\"` axis will be added to `ak.flatten` to opt-in to this change.\r\n\r\n```python3\r\n>>> np.ravel(ak.Array([1, 2, [3, 4]]))\r\nak.Array([1, 2, 3, 4])\r\n```\r\n\r\nImplements NumPy `ak.ravel` with `ak.flatten(..., axis=None)` behaviour (closes #989)",
  "closed_at":"2021-07-15T15:03:39Z",
  "comments":1,
  "created_at":"2021-07-08T19:54:08Z",
  "draft":false,
  "id":940172900,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njg2Mjg0MjMw",
  "number":985,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-15T15:03:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feature: add `np.ravel`",
  "updated_at":"2021-07-15T15:03:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"GitHub now provides the ability to define Issue Forms, which establish a structured, validated form for creating Issues.\r\n\r\n[Here](https://github.com/agoose77/test-issue-syntax/issues/new?assignees=&labels=bug+%28unverified%29&template=bug-report.yaml&title=Bug) is an example form for Awkward.\r\n\r\nDo you think this would be a useful addition?",
  "closed_at":"2021-07-12T20:38:00Z",
  "comments":4,
  "created_at":"2021-07-09T11:05:52Z",
  "id":940661520,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDA2NjE1MjA=",
  "number":986,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Meta: use GitHub Issue Forms",
  "updated_at":"2021-07-12T20:38:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"See [here](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms) for more info\r\n\r\nHere's an test repository with the same templates already configured:\r\nhttps://github.com/agoose77/test-issue-syntax/issues/new/choose\r\n\r\nCloses #986",
  "closed_at":"2021-07-12T20:38:00Z",
  "comments":5,
  "created_at":"2021-07-09T17:17:07Z",
  "draft":false,
  "id":940940934,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njg2OTM0ODcw",
  "number":987,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-12T20:38:00Z"
  },
  "reactions":{
   "+1":3,
   "total_count":3
  },
  "state":"closed",
  "state_reason":null,
  "title":"Feature: add GitHub Issue Forms",
  "updated_at":"2021-07-12T20:38:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjUxNDIzOTQ=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"* Unrestrict the upper bound on jaxlib in dev requirements\r\n   - Reverts PR #963\r\n* Exclude jaxlib v0.1.68 from being installed in dev requirements\r\n   - c.f. https://github.com/google/jax/issues/7128",
  "closed_at":"2021-07-10T15:42:05Z",
  "comments":2,
  "created_at":"2021-07-10T05:08:32Z",
  "draft":false,
  "id":941175454,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njg3MTI4ODk3",
  "number":988,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-10T15:42:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: Unrestrict jaxlib upper bound and exclude jaxlib v0.1.68",
  "updated_at":"2021-09-09T16:26:17Z",
  "user":"MDQ6VXNlcjUxNDIzOTQ="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"NumPy has a `np.ravel` function that is analogous to `ak.flatten` with `axis=None`. We should overload this function to provide feature parity.\r\n",
  "closed_at":"2021-07-15T15:03:39Z",
  "comments":0,
  "created_at":"2021-07-11T13:10:05Z",
  "id":941449827,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDE0NDk4Mjc=",
  "number":989,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add `np.ravel`",
  "updated_at":"2021-07-15T15:03:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Building upon #985, this PR adds a new `axis=\"records\"` axis will be added to `ak.flatten` to opt-in to this change.\r\n\r\n- [ ] Add `axis=\"records\"` to `ak.flatten`\r\n- [ ] Add deprecation note to `axis=None` argument \r\n   The meaning of `axis=None` will change to *preserving* records.\r\n\r\nImplements #984\r\n",
  "closed_at":"2022-01-24T22:05:55Z",
  "comments":4,
  "created_at":"2021-07-11T13:45:47Z",
  "draft":true,
  "id":941456399,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njg3MzM3MjY1",
  "number":990,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feature: add `ak.flatten(axis=\"records\")`",
  "updated_at":"2022-07-26T08:42:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-07-12T23:43:13Z",
  "comments":1,
  "created_at":"2021-07-12T22:06:11Z",
  "draft":false,
  "id":942488563,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njg4MjEyMDMw",
  "number":991,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-12T23:43:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed bug #770, #930: not a policy issue; UnionForm::purelist_parameter was incorrectly comparing its contents' direct parameters, rather than their purelist_parameters.",
  "updated_at":"2021-07-12T23:43:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.4.0\r\n\r\n### Description and code to reproduce\r\n\r\nThe existing implementation of `ak.ptp` works, but it probably doesn't handle `None` types very well; if the existing array already contains `None`s, these will probably be filled by https://github.com/scikit-hep/awkward-1.0/blob/4fe53b0a0a9b20b8d32f7cc7780e64885e63c60e/src/awkward/operations/reducers.py#L670\r\n\r\nThis might need to be implemented at a lower level in order to be able to perform this filling step for only the appropriate entries.",
  "closed_at":"2021-07-13T16:49:44Z",
  "comments":5,
  "created_at":"2021-07-13T09:40:26Z",
  "id":943074950,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDMwNzQ5NTA=",
  "number":992,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Review `ak.ptp` implementation",
  "updated_at":"2021-07-13T18:28:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@nsmith- This might have been preventing Jupyter from displaying custom methods and properties in tab-completion.\r\n\r\nLet me know if you think this implementation is right. (I'm not including the underscored attributes of `type(self)` because this `__dir__` should be showing an object's attributes; it should not include class attributes like `__mro__`.)",
  "closed_at":"2021-07-14T01:09:18Z",
  "comments":3,
  "created_at":"2021-07-13T17:43:16Z",
  "draft":false,
  "id":943677226,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njg5MjczODQw",
  "number":993,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-14T01:09:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix high-level ak.Array.__dir__ to include methods and properties of overridden classes.",
  "updated_at":"2021-07-14T01:09:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-07-13T20:54:45Z",
  "comments":0,
  "created_at":"2021-07-13T19:22:25Z",
  "draft":false,
  "id":943755886,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njg5MzM5NTg5",
  "number":994,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-13T20:54:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes two bugs in #992: double-masking of reducers and unmasking of ak.ptp.",
  "updated_at":"2021-07-13T20:54:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-07-13T20:32:55Z",
  "comments":0,
  "created_at":"2021-07-13T19:42:13Z",
  "draft":false,
  "id":943769041,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njg5MzUwOTU5",
  "number":995,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-13T20:32:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #546, ak.fill_none losing the replacement value's dtype.",
  "updated_at":"2021-07-13T20:32:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-07-14T01:37:30Z",
  "comments":0,
  "created_at":"2021-07-14T01:00:40Z",
  "draft":false,
  "id":943938083,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njg5NDk2NTA4",
  "number":997,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-14T01:37:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #982 by accounting for an additional kind of 'gap' in nonlocal reducers.",
  "updated_at":"2021-07-14T01:37:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.4.0\r\n\r\n### Description and code to reproduce\r\nThe result of this reproducer is off-by-one:\r\n\r\n```python3\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\narray = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.r_[1, 2, 4, 7]),\r\n        ak.layout.NumpyArray(\r\n            np.r_[\r\n                1.8125,\r\n                0.8125,\r\n                -0.9375,\r\n                1.1875,\r\n                -0.6875,\r\n                1.3125,\r\n                21.3125,\r\n            ]\r\n        ),\r\n    )\r\n)\r\n\r\nassert ak.to_list(ak.argmax(array, axis=-1)) == [0, 1, 2]\r\n```",
  "closed_at":"2021-07-14T22:05:54Z",
  "comments":1,
  "created_at":"2021-07-14T11:39:20Z",
  "id":944335779,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDQzMzU3Nzk=",
  "number":998,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.argmax` reducer off-by-one for `ListOffsetArray` is `start != 0`",
  "updated_at":"2021-07-14T22:05:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR intends to solve #998 by fixing `awkward_NumpyArray_reduce_adjust_starts_64`. With these changes, the adjusted positions are now valid for `ListOffsetArray`s with non-zero `offsets[0]`.\r\n\r\nThis is my first time working with the kernels, and whilst I think I have a handle on what is going on (see #998), I would appreciate a look over by the reviewers.\r\n\r\nFixes #998",
  "closed_at":"2021-07-14T15:54:52Z",
  "comments":1,
  "created_at":"2021-07-14T15:08:47Z",
  "draft":false,
  "id":944527296,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njg5OTk3NDY2",
  "number":999,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: fix `awkward_NumpyArray_reduce_adjust_starts_64` ",
  "updated_at":"2021-11-12T14:51:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.4.0\r\n\r\n### Description and code to reproduce\r\n\r\nThis is possibly related to #998 , but I wanted to open a new issue in case it is not.\r\n\r\nGiven this reproducer, the result loses certain elements\r\n```python3\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\narray = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.r_[1, 3, 5]),\r\n        ak.layout.ListOffsetArray64(\r\n            ak.layout.Index64(np.r_[0, 3, 5, 8, 10, 12]),\r\n            ak.layout.NumpyArray(\r\n                np.r_[\r\n                    1.8125,###\r\n                    0.81252,###\r\n                    -0.937,###\r\n\r\n                    6.0,\r\n                    -0.6875,\r\n\r\n                    1.3125,\r\n                    21.3125,\r\n                    4.0,\r\n\r\n                    9.8,\r\n                    2.2,\r\n\r\n                    33.0,\r\n                    44.6,\r\n                ]\r\n            ),\r\n        )\r\n    )\r\n)\r\nassert ak.to_list(ak.argmax(array, axis=1)) == [[0, 1, 1], [1, 1]]\r\n```",
  "closed_at":"2021-07-14T22:05:54Z",
  "comments":1,
  "created_at":"2021-07-14T16:40:02Z",
  "id":944611441,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDQ2MTE0NDE=",
  "number":1000,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.argmax` doesn't produce correct result for inner axis with nonzero start",
  "updated_at":"2021-07-14T22:05:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@agoose77 Although there's probably a solution involving fixing kernels, the offsets would have to be rewritten to shift to zero anyway (because that's what the output of the reduction has), so we might as well just adjust it to start at zero preemptively.\r\n\r\nThe cost of `ListOffsetArray64::toListOffsetArray64(true)` (if `offsets_[0] != 0`, which is a trivial case) should only be the cost of rewriting the `offsets`. (Which itself [is auto-vectorizable](https://awkward-array.readthedocs.io/en/latest/_auto/kernels.html#awkward-listoffsetarray-compact-offsets) by a smart enough compiler.) It shouldn't be necessary to do anything with the `content` other than `content->getitem_range(offsets_[0], content->length())`, which is _O(1)_.\r\n\r\nThe old implementation of `toListOffsetArray64` was calling `broadcast_tooffsets64`, which is a general purpose function that doesn't assume that the given offsets will fit this array, but if we've just generated them and we're starting with a ListOffsetArray, then we know that they will fit (i.e. all nested lists have have compatible lengths). Optimizing this utility function probably has benefits across the codebase, though we don't have frequently-executed performance metrics to measure it.",
  "closed_at":"2021-07-14T22:05:54Z",
  "comments":0,
  "created_at":"2021-07-14T21:32:36Z",
  "draft":false,
  "id":944813231,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkwMjM5MTAy",
  "number":1001,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-14T22:05:54Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #998 and #1000; argmax for ListOffsetArray with nonzero start. Also optimizes toListOffsetArray64(true).",
  "updated_at":"2021-07-14T22:05:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Adds a spelling check, and I fixed (or added to the ignore file) everything it found.\r\n\r\nAlso added the miscapitalization check. I had to remove checking for \"Numpy\" instead of \"NumPy\" automatically, because quite a few things have \"Numpy\" burned into class names - I couldn't even check for \"Numpy\\b\", since one class is named Numpy without anything else. I still manually fixed the ones I saw in comments.",
  "closed_at":"2021-09-07T20:48:38Z",
  "comments":1,
  "created_at":"2021-07-15T15:28:33Z",
  "draft":false,
  "id":945506916,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkwODI3NjU2",
  "number":1003,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-07T20:48:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: fix spelling and check in pre-commit",
  "updated_at":"2021-09-07T20:48:38Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This corrects the outdated commend about formatting and linting.\r\n\r\nIt also removes something I found highly irritating - I'm sure you know what it\r\nis :). Using new features in a language or a library does _not_ make your code\r\n\"less-simple\" - it makes it harder to read and more complex because instead of\r\nusing a new feature that has a clear meaning that everyone can learn, it's\r\nadding code unique to your library only every reader must parse to see what you\r\nare doing. For example, take a few items from contextlib (which has had\r\nfantastic improvements):\r\n\r\n```python\r\nwith contextlib.redirect_stdout(sys.stderr):\r\n    should_print_to_stderr_but_doesnt()\r\n\r\nwith contextlib.suppress(FileNotFoundError):\r\n    os.remove('somefile.tmp')\r\n\r\nwith contextlib.ExitStack() as stack:\r\n    stack.enter_context(context_manager_1())\r\n    stack.enter_context(context_manager_2())\r\n    stack.enter_context(context_manager_3())\r\n```\r\n\r\nI think you can read what those do without looking at the docs, and if you\r\ncan't, everyone knows how to get to the Python docs; finding local\r\ndocumentation or reading the expanded try/catch or manually implemented\r\nversions is much harder for readers. And it's easy to incorrectly implement;\r\nfor example, if `should_print_to_stderr_but_doesnt` throws an error, a hand\r\nimplementation might not restore the streams, causing important information\r\nabout what happened to be swallowed.\r\n\r\nAlso, why should someone upgrade awkward, then? Aren't older versions\r\n\"simpler\", by this logic?\r\n\r\nIf/when you are ready to drop Python 2, remember that Python 2 _will_ keep\r\nworking! It will just pull older versions of awkward / uproot (as it already\r\ndoes with NumPy, boost-histogram, and everything else). Binary distribution\r\nwill become much harder quite rapidly for Python 2 - pip, packaging, wheel, and\r\nauditwheel have already dropped support, manylinux1 (the only remaining place\r\nwith Python 2) dies Jan 1, 2022, pybind11 drops support roughly Jan 1, 2022,\r\ncibuildwheel drops it tomorrow, etc.\r\n\r\n(PS: I originally did this with the GitHub interface and it committed to main\r\naccidentally - immediately reverted, and making a proper PR. Huge apologies!).\r\n",
  "closed_at":"2021-07-16T14:36:15Z",
  "comments":1,
  "created_at":"2021-07-15T15:59:58Z",
  "draft":false,
  "id":945537356,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkwODUzNTE4",
  "number":1004,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-16T14:36:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: touch up contributing",
  "updated_at":"2021-07-16T14:36:16Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-07-15T19:58:56Z",
  "comments":1,
  "created_at":"2021-07-15T17:11:59Z",
  "draft":false,
  "id":945594019,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkwOTAxMzQ3",
  "number":1005,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-15T19:58:56Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #595 and #630; adds a default for NEP-18.",
  "updated_at":"2021-07-15T19:58:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.4.0\n\n### Description and code to reproduce\n\nGiven this code\r\n```python3\r\nak.packed(ak.from_numpy(np.zeros((1, 0), dtype=np.int32), regulararray=True))\r\n```\r\n`ak.packed` raises `ZeroDivisionError` when dividing the length of the content by the size.",
  "closed_at":"2021-07-16T14:36:50Z",
  "comments":0,
  "created_at":"2021-07-15T18:45:45Z",
  "id":945659265,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDU2NTkyNjU=",
  "number":1006,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.packed` fails for `RegularArray` with size 0",
  "updated_at":"2021-07-16T14:36:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.4.0\n\n### Description and code to reproduce\n\nThe following code\r\n```python3\r\n>>> array = ak.from_numpy(np.zeros((1, 0), dtype=np.int32))\r\n>>> ak.from_buffers(*ak.to_buffers(array))\r\n```\r\nfails with a `ZXeroDivisionError`:\r\n```pytb\r\n---------------------------------------------------------------------------\r\nZeroDivisionError                         Traceback (most recent call last)\r\n/tmp/ipykernel_10330/380633746.py in <module>\r\n----> 1 ak.from_buffers(*ak.to_buffers(array))\r\n\r\n/opt/texat-venv/lib/python3.9/site-packages/awkward/operations/convert.py in from_buffers(form, length, container, partition_start, key_format, lazy, lazy_cache, lazy_cache_key, highlevel, behavior)\r\n   5055 \r\n   5056         else:\r\n-> 5057             out = _form_to_layout(*(args + (None, None)))\r\n   5058 \r\n   5059     elif isinstance(length, Iterable):\r\n\r\n/opt/texat-venv/lib/python3.9/site-packages/awkward/operations/convert.py in _form_to_layout(form, container, partnum, key_format, length, lazy_cache, lazy_cache_key)\r\n   4712 \r\n   4713         if length is not None:\r\n-> 4714             actual = len(raw_array) // dtype_inner_shape.itemsize\r\n   4715             if length > actual:\r\n   4716                 raise ValueError(\r\n\r\nZeroDivisionError: integer division or modulo by zero\r\n```",
  "closed_at":"2021-07-15T22:20:30Z",
  "comments":0,
  "created_at":"2021-07-15T18:48:11Z",
  "id":945660863,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDU2NjA4NjM=",
  "number":1007,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.from_buffers` fails for n-dim `NumpyArray` with size 0",
  "updated_at":"2021-07-15T22:20:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This also catches some places where the `identities` and `parameters` were not retained from the original layout\r\n\r\nFixes #1006 ",
  "closed_at":"2021-07-16T14:36:51Z",
  "comments":2,
  "created_at":"2021-07-15T19:29:02Z",
  "draft":false,
  "id":945688882,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkwOTgxOTcx",
  "number":1008,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-16T14:36:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: fix `ak.packed` for `RegularArray`s with `.size=0`",
  "updated_at":"2021-07-16T14:36:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"`ak.from_buffers` fails to reconstruct an array when the `NumpyForm` has a zero itemsize. This PR fixes this by only performing a length check if itemsize` is nonzero, and taking the leading dimension from the given `length`.\r\n\r\nFixes #1007",
  "closed_at":"2021-07-15T22:20:30Z",
  "comments":6,
  "created_at":"2021-07-15T20:33:05Z",
  "draft":false,
  "id":945731106,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkxMDE3NzQx",
  "number":1009,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-15T22:20:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: support empty buffers in `from_buffers`",
  "updated_at":"2021-07-15T22:20:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-12-16T22:25:10Z",
  "comments":5,
  "created_at":"2021-07-17T12:44:27Z",
  "draft":false,
  "id":946817327,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkxOTI3MTc2",
  "number":1011,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-16T22:25:10Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"chore: bump pybind11 to 2.8.0",
  "updated_at":"2021-12-16T22:25:10Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.4.0\n\n### Description and code to reproduce\n\nHere is a reproducer:\r\n```python3\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nparameters = ak.from_numpy(np.arange(8 * 8).reshape(-1, 8), regulararray=True)\r\narray = ak.zip((parameters, parameters))\r\nassert array.layout.purelist_isregular\r\n```\r\n\r\nThis is caused by the change to `ak.zip` in 585ca1a0d0c6f8d8473c3f177f7ccf8546cea9a6",
  "closed_at":"2021-07-19T18:27:46Z",
  "comments":0,
  "created_at":"2021-07-19T17:31:16Z",
  "id":947873324,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDc4NzMzMjQ=",
  "number":1012,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.zip` converts `RegularArray`s to `ListOffsetArray64`s",
  "updated_at":"2021-07-19T18:27:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This fixes #1012 which was introduced by 585ca1a0d0c6f8d8473c3f177f7ccf8546cea9a6. Instead, we just use `right_broadcast=False`, and allow the user to override this value with a parameter.",
  "closed_at":"2021-07-19T18:27:46Z",
  "comments":1,
  "created_at":"2021-07-19T17:42:57Z",
  "draft":false,
  "id":947881236,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkyODAxMzIz",
  "number":1013,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-19T18:27:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugfix: do not use `regular_to_jagged` in `ak.zip`",
  "updated_at":"2021-07-19T18:27:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nAs discussed on Gitter, all non NEP-18 functions should be modified to set `right_broadcast=False` by default (which I think is already the case for most, if not all, functions), with this value override-able by a function parameter.",
  "closed_at":null,
  "comments":1,
  "created_at":"2021-07-19T17:45:08Z",
  "id":947882759,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDc4ODI3NTk=",
  "number":1014,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Allow users to override `right_broadcast=False` in all NEP-18 overrides",
  "updated_at":"2023-07-02T18:04:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Which documentation?\n\nPython docstrings\n\n### What needs to be documented?\n\nThe scenarios in which left and right broadcasting occurs, namely that the *entire* layout must be regular for right-broadcasting, could perhaps be more explicitly stated.",
  "closed_at":"2021-07-19T18:44:40Z",
  "comments":0,
  "created_at":"2021-07-19T18:00:12Z",
  "id":947892966,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDc4OTI5NjY=",
  "number":1015,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Left & right broadcasting scenarios",
  "updated_at":"2021-07-19T18:44:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Namely, that they are mutually exclusive (although their flags *are not*) modes of broadcasting.\r\n\r\nFixes #1015",
  "closed_at":"2021-07-19T18:44:40Z",
  "comments":1,
  "created_at":"2021-07-19T18:00:23Z",
  "draft":false,
  "id":947893085,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkyODExMjQ2",
  "number":1016,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-19T18:44:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Documentation: clarify left & right broadcasting",
  "updated_at":"2021-07-19T18:44:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.4.0\r\n\r\n### Description and code to reproduce\r\nThe result of `broadcast_arrays` differs according to whether the regular dimension in a *jagged* array is a `RegularArray` or a `NumpyArray[ndim == 2]]`\r\n\r\n#### Reproducer:\r\n```python3\r\nform, length, container = (\r\n    {\r\n        \"class\": \"ListOffsetArray64\",\r\n        \"offsets\": \"i64\",\r\n        \"content\": {\r\n            \"class\": \"ListOffsetArray64\",\r\n            \"offsets\": \"i64\",\r\n            \"content\": {\r\n                \"class\": \"NumpyArray\",\r\n                \"inner_shape\": [2],\r\n                \"itemsize\": 8,\r\n                \"format\": \"d\",\r\n                \"primitive\": \"float64\",\r\n                \"form_key\": \"node2\",\r\n            },\r\n            \"form_key\": \"node1\",\r\n        },\r\n        \"form_key\": \"node0\",\r\n    },\r\n    4,\r\n    {\r\n        \"part0-node0-offsets\": np.array([0, 1, 2, 3, 4], dtype=np.int64),\r\n        \"part0-node1-offsets\": np.array([0, 1, 6, 7, 8], dtype=np.int64),\r\n        \"part0-node2-data\": np.array(\r\n            [\r\n                [40.25, 41.25],\r\n                [-8.0, -11.75],\r\n                [-8.0, -13.75],\r\n                [35.0, 41.25],\r\n                [70.0, 75.25],\r\n                [24.0, 34.25],\r\n                [-3.75, -3.75],\r\n                [-6.25, -9.75],\r\n            ]\r\n        ),\r\n    },\r\n)\r\n\r\nx = ak.from_buffers(form, length, container)\r\ny = ak.Array(\r\n    [\r\n        [[42.5]],\r\n        [[-13.25, -14.25, 40.416666666666664, 76.75, 35.75]],\r\n        [[-4.916666666666667]],\r\n        [[-8.833333333333334]],\r\n    ]\r\n)\r\nak.broadcast_arrays(x, y)\r\n```\r\nproduces \r\n```python3\r\n[<Array [[[[40.2, 41.2]], ... [[-6.25, -9.75]]]] type='4 * var * var * 2 * float64'>,\r\n <Array [[[42.5]], [[-13.2, ... [[-8.83]]] type='4 * var * var * float64'>]\r\n```\r\nwhereas\r\n```python3\r\nz = ak.to_regular(ak.Array(x.tolist()), axis=-1)\r\nak.broadcast_arrays(z, y)\r\n```\r\nproduces\r\n```python3\r\n[<Array [[[[40.2, 41.2]], ... [[-6.25, -9.75]]]] type='4 * var * var * 2 * float64'>,\r\n <Array [[[[42.5, 42.5]], ... [[-8.83, -8.83]]]] type='4 * var * var * 2 * float64'>]\r\n```",
  "closed_at":"2021-07-20T14:37:24Z",
  "comments":2,
  "created_at":"2021-07-19T21:24:35Z",
  "id":948040537,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDgwNDA1Mzc=",
  "number":1017,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`NumpyArray` with `ndim>1` does not broadcast correctly",
  "updated_at":"2021-07-20T14:37:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 21.6b0 \u2192 21.7b0](https://github.com/psf/black/compare/21.6b0...21.7b0)\n",
  "closed_at":"2021-07-19T23:24:41Z",
  "comments":0,
  "created_at":"2021-07-19T21:41:32Z",
  "draft":false,
  "id":948050758,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkyOTQ0MTQ1",
  "number":1018,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-19T23:24:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-07-19T23:24:42Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"As discussed in #1017, the solution here is either to apply this PR, or to modify the `getfunction` to accept n-dim arrays. As the broadcasting routine performs such a conversion anyway (albeit after the getfunction is called), it seems reasonable to do so earlier.\r\n\r\nFixes #1017 ",
  "closed_at":"2021-07-20T14:37:24Z",
  "comments":1,
  "created_at":"2021-07-20T07:51:09Z",
  "draft":false,
  "id":948391239,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkzMjQxNjk3",
  "number":1019,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-20T14:37:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: set `numpy_to_regular=True` in `broadcast_arrays`",
  "updated_at":"2021-07-20T14:37:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nCurrently `ak.packed` only packs the array of a `Record`. This means that we keep more items than necessary to reconstruct the record.",
  "closed_at":"2021-07-20T15:16:41Z",
  "comments":0,
  "created_at":"2021-07-20T13:46:16Z",
  "id":948671276,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDg2NzEyNzY=",
  "number":1020,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.packed` should pack `Record`s",
  "updated_at":"2021-07-20T15:16:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR adds packing of `Record` contents to `ak.packed`, by taking a single item slice of the underlying array.\r\n\r\nResolves #1020 ",
  "closed_at":"2021-07-20T15:16:42Z",
  "comments":2,
  "created_at":"2021-07-20T13:53:41Z",
  "draft":false,
  "id":948678095,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkzNDg3MTEx",
  "number":1021,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-20T15:16:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: pack `Record`s in `ak.packed`",
  "updated_at":"2021-07-20T15:16:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.4.0\n\n### Description and code to reproduce\n\nThe following code \r\n```python3\r\narray = ak.layout.ListOffsetArray64(\r\n    ak.layout.Index64(np.r_[0, 2]),\r\n    ak.layout.NumpyArray(np.random.uniform(size=(2, 4)))\r\n)\r\nt = ak.argmax(array, axis=-1, keepdims=True)\r\ny = array[t]\r\n```\r\nraises this traceback\r\n```pytb\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n/tmp/ipykernel_46426/3125939061.py in <module>\r\n      1 t = ak.argmax(y, axis=-1, keepdims=True)\r\n----> 2 q = y[t]\r\n\r\nRuntimeError: FIXME ListArrayOf<T>::SliceVarNewAxis. 2021-02-10 Was this left over from development? If so, it's not getting tested. If anyone out there encounters this error, please report it so that we can properly validate this code path and include it in the tests. https://github.com/scikit-hep/awkward-1.0/issues/new?assignees=&labels=bug+%28unverified%29&template=bug-report.md&title=\r\n```\r\n",
  "closed_at":"2021-07-21T17:37:23Z",
  "comments":14,
  "created_at":"2021-07-20T14:34:31Z",
  "id":948718041,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDg3MTgwNDE=",
  "number":1022,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Jagged index array raises FIXME",
  "updated_at":"2021-07-21T17:37:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Somehow this snuck through on #1021.\r\n\r\nThis PR doesn't modify any code, it just adds a link the Content class.",
  "closed_at":"2021-07-20T15:34:28Z",
  "comments":2,
  "created_at":"2021-07-20T15:24:55Z",
  "draft":false,
  "id":948768482,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkzNTYxMzI3",
  "number":1023,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-20T15:34:28Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Docs: make link to layout",
  "updated_at":"2021-07-20T15:34:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-07-20T21:46:25Z",
  "comments":1,
  "created_at":"2021-07-20T21:12:10Z",
  "draft":false,
  "id":949097702,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkzODUxNzMw",
  "number":1024,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-20T21:46:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Chore: correct spelling of \"operation\"",
  "updated_at":"2021-07-20T21:46:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-07-21T01:13:38Z",
  "comments":0,
  "created_at":"2021-07-21T00:41:07Z",
  "draft":false,
  "id":949218850,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NjkzOTU5MjEz",
  "number":1025,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-21T01:13:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Rename _getitem_array as _carry and have it take Index.",
  "updated_at":"2021-07-21T01:13:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.4.0\r\n\r\n### Description and code to reproduce\r\n\r\nI think we should support this given that it works if the `NumpyArray` is converted into a `RegularArray`:\r\n```python3\r\narray = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.r_[0, 4, 4, 6]),\r\n        ak.layout.NumpyArray(np.arange(4 * 6).reshape(6, 4)),\r\n    )\r\n)\r\nix = ak.Array([\r\n    [[0], [1], [2], [3]],\r\n    [],\r\n    [[3], [2]]\r\n])\r\n```\r\nThis fails:\r\n```python3\r\narray[ix]\r\n```\r\n\r\nThis succeeds:\r\n```python3\r\nak.to_regular(array, axis=-1)[ix]\r\n```\r\n\r\nI would expect the result of jagged indexing into a `NumpyArray` to produce a jagged result (i.e. behave as it currently does for `RegularArray`).\r\n\r\nThe simplest solution would be to re-use the `RegularArray` code here, i.e. `toRegularArray()->getitem_XXX` but I don't know what the protocol on this is vs doing less work by implementing a solution specifically for NumpyArrays. I suspect here it's not unreasonable because the conversion to `RegularArray` is cheap (?)",
  "closed_at":"2021-07-22T11:41:44Z",
  "comments":1,
  "created_at":"2021-07-21T11:49:00Z",
  "id":949624937,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NDk2MjQ5Mzc=",
  "number":1026,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`NumpyArray::getitem_next_jagged` is undefined for `ndim == 2`",
  "updated_at":"2021-07-22T11:41:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This was motivated by issue #1022 and the feature-removal was posted in #1027. See those links for all the reasons.",
  "closed_at":"2021-07-21T17:37:23Z",
  "comments":1,
  "created_at":"2021-07-21T16:11:42Z",
  "draft":false,
  "id":949881649,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njk0NTE0NjY0",
  "number":1028,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-21T17:37:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Reverting #694: SliceVarNewAxis",
  "updated_at":"2021-07-21T17:37:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-07-22T11:41:44Z",
  "comments":1,
  "created_at":"2021-07-21T18:08:09Z",
  "draft":false,
  "id":949971040,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njk0NTg4MDUx",
  "number":1029,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-22T11:41:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed #1026; jagged slicing of multidim NumpyArray.",
  "updated_at":"2021-07-22T11:41:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"`ak.mixin_class` is very useful, but does not provide a straightforward way to specify the name of the behavior; it uses the name of the class by default.\r\n\r\nThe requirements of a behavior name and a Python class name are somewhat in conflict:\r\n- Length\r\n  - Python class names tend to be longer and descriptive\r\n  - Behavior names tend to be short and concise\r\n- Case\r\n  - Python class names are usually CamelCase\r\n  - Type strings tend to be lower case\r\n\r\nThis PR makes it easier to change the name used by `ak.mixin_class`.",
  "closed_at":"2021-08-09T14:21:24Z",
  "comments":4,
  "created_at":"2021-07-22T07:45:20Z",
  "draft":false,
  "id":950389666,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njk0OTQzNzUw",
  "number":1030,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-09T14:21:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Feat: add `name` parameter to `mixin_class`",
  "updated_at":"2021-08-09T14:21:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This PR implements all types of slices allowed by NumPy on Awkward Arrays. Awkward's extensions of NumPy's slicing rules will be covered in a future PR.\r\n\r\nIn principle, there are 12 classes to cover: BitMaskedArray, ByteMaskedArray, EmptyArray, IndexedArray, IndexedOptionArray, ListArray, ListOffsetArray, NumpyArray, RecordArray, RegularArray, UnionArray, and UnmaskedArray with 10 types of slice items: no-slice (`head == ()`), integer (`int`), range-slice (`slice`), field (`str`), fields (`list(str)`), `np.newaxis` (which is `None`), `Ellipsis` (`...`), flat array (`Index64`), jagged array (`ListOffsetArray`), and option-type array (`IndexedOptionArray`). **120 cases.**\r\n\r\nHowever, putting off Awkward's extensions reduces this to only 8 types of slice by dropping jagged arrays and option-type arrays. (They can be left as `NotImplementedError`.) **96 cases.**\r\n\r\nAlso, I did the \"weird\" classes, so that what remains would be more straightforward: all of EmptyArray (because it's a leaf), NumpyArray (because it's a leaf and very different\u2014much simpler\u2014in Python), RecordArray (because fields are fundamentally different from other slices), and RegularArray (because fake RegularArrays are used to structure the getitem procedure). **64 cases.**\r\n\r\nAlso, I did the \"weird\" slice types, so that what remains would be more straightforward: no-slice, field, fields, `np.newaxis`, and `Ellipsis`. **24 cases.**\r\n\r\nHere's what remains, for you to finish off this PR:\r\n\r\n   - BitMaskedArray\r\n     - [x] integer slice\r\n     - [x] range-slice\r\n     - [x] flat array\r\n   - ByteMaskedArray\r\n     - [x] integer slice\r\n     - [x] range-slice\r\n     - [x] flat array\r\n   - IndexedArray\r\n     - [x] integer slice\r\n     - [x] range-slice\r\n     - [x] flat array\r\n   - IndexedOptionArray\r\n     - [x] integer slice\r\n     - [x] range-slice\r\n     - [x] flat array\r\n   - ListArray\r\n     - [x] integer slice\r\n     - [x] range-slice\r\n     - [x] flat array\r\n   - ListOffsetArray\r\n     - [x] integer slice\r\n     - [x] range-slice\r\n     - [x] flat array\r\n   - UnionArray\r\n     - [x] integer slice\r\n     - [x] range-slice\r\n     - [x] flat array\r\n   - UnmaskedArray\r\n     - [x] integer slice\r\n     - [x] range-slice\r\n     - [x] flat array\r\n\r\nAs you finish implementing each one, uncomment the corresponding tests in test_1031-start-getitem_next.py. When the PR is done, all of the code should be uncommented. test_1031b-start-getitem_next-specialized.py is for any additional tests you need to add while working things out.",
  "closed_at":"2021-07-29T01:14:16Z",
  "comments":3,
  "created_at":"2021-07-22T13:32:18Z",
  "draft":false,
  "id":950675053,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njk1MTg3NTM0",
  "number":1031,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-29T01:14:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: starting _getitem_next.",
  "updated_at":"2021-07-29T01:14:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-08-09T13:23:18Z",
  "comments":2,
  "created_at":"2021-07-23T14:38:08Z",
  "draft":true,
  "id":951639174,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njk1OTkxODc1",
  "number":1032,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Print all kernel names, for diagnostics.",
  "updated_at":"2021-08-09T13:23:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Run `gen.py` to insert `cout` in all kernel function calls in libawkward",
  "closed_at":"2021-08-02T21:01:59Z",
  "comments":1,
  "created_at":"2021-07-26T18:55:47Z",
  "draft":false,
  "id":953191701,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njk3MjcxODEw",
  "number":1033,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Script for inserting cout line in libawkward",
  "updated_at":"2021-08-02T21:01:59Z",
  "user":"MDQ6VXNlcjUyNjM1Nzcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nGitHub [has just added support](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-citation-files) for [`CITATION.cff`files](https://citation-file-format.github.io/)\r\n\r\nI assume that we might already have a citation in mind, so I thought I'd bring it to our collective attention.",
  "closed_at":"2022-03-09T12:24:55Z",
  "comments":13,
  "created_at":"2021-07-28T13:18:26Z",
  "id":954847075,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NTQ4NDcwNzU=",
  "number":1034,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add `CITATION.cff` ",
  "updated_at":"2022-03-09T12:24:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Add @ioanaif as a contributor for code, test.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward-1.0/pull/1031#issuecomment-888375219)",
  "closed_at":"2021-07-28T14:52:42Z",
  "comments":0,
  "created_at":"2021-07-28T14:51:43Z",
  "draft":false,
  "id":954946136,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njk4NzY2Mjcx",
  "number":1035,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-07-28T14:52:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add ioanaif as a contributor for code, test",
  "updated_at":"2021-07-28T14:52:42Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"test_0002-minimal-listarray.py \r\n\r\n- [x] test \r\n- [x] test_len \r\n- [x] test_members\r\n\r\ntest_0006-deep-iteration.py \r\n\r\n- [x] test_iterator\r\n\r\ntest_0008-slices-and-getitem.py \r\n\r\n- [x] test_numpyarray_getitem_bystrides \r\n- [x] test_numpyarray_getitem_next\r\n\r\ntest_0011-listarray.py \r\n\r\n- [x] test_listarray_basic \r\n- [x] test_listoffsetarray_basic \r\n- [x] test_listarray_at \r\n- [x] test_listoffsetarray_at \r\n- [x] test_listarray_slice \r\n- [x] test_listoffsetarray_slice \r\n- [x] test_listarray_slice_slice \r\n- [x] test_listoffsetarray_slice_slice \r\n- [x] test_listarray_ellipsis \r\n- [x] test_listoffsetarray_ellipsis \r\n- [x] test_listarray_array_slice \r\n- [x] test_listoffsetarray_array_slice \r\n- [x] test_listarray_array \r\n- [x] test_listoffsetarray_array\r\n\r\ntest_0013-error-handling-struct.py \r\n\r\n- [x] test_numpyarray \r\n- [x] test_listarray_numpyarray \r\n- [x] test_listarray_listarray_numpyarray\r\n\r\ntest_0014-finish-up-getitem.py \r\n\r\n- [x] test_basic \r\n- [x] test_listoffsetarrayA64 \r\n- [x] test_listoffsetarrayA32 \r\n- [x] test_listarrayA64\r\n- [x] test_listarrayA32 \r\n- [x] test_listoffsetarrayB64\r\n- [x] test_listoffsetarrayB32 \r\n- [x] test_listarrayB64 \r\n- [x] test_listarrayB32\r\n\r\ntest_0020-support-unsigned-indexes.py \r\n\r\n- [x] test_listarray_basic \r\n- [x] test_listoffsetarray_basic \r\n- [x] test_listarray_at \r\n- [x] test_listoffsetarray_at \r\n- [x] test_listarray_slice \r\n- [x] test_listoffsetarray_slice \r\n- [x] test_listarray_slice_slice \r\n- [x] test_listoffsetarray_slice_slice \r\n- [x] test_listarray_ellipsis \r\n- [x] test_listoffsetarray_ellipsis \r\n- [x] test_listarray_array_slice \r\n- [x] test_listoffsetarray_array_slice \r\n- [x] test_listarray_array \r\n- [x] test_listoffsetarray_array\r\n\r\ntest_0021-emptyarray.py \r\n\r\n- [x] test_getitem\r\n\r\ntest_0023-regular-array.py \r\n\r\n- [x] test_iteration \r\n- [x] test_getitem_at \r\n- [x] test_getitem_range \r\n- [x] test_getitem \r\n- [x] test_getitem_deeper \r\n- [x] test_numpy\r\n\r\ntest_0024-use-regular-array.py \r\n\r\n- [x] test_empty_array_slice \r\n- [x] test_nonflat_slice \r\n- [x] test_newaxis\r\n\r\ntest_0025-record-array.py \r\n\r\n- [x] test_basic \r\n- [x] test_scalar_record \r\n- [x] test_getitem \r\n- [x] test_getitem_other_types \r\n- [x] test_getitem_next\r\n\r\ntest_0046-start-indexedarray.py \r\n\r\n- [x] test_basic \r\n- [x] test_null \r\n- [x] test_carry \r\n- [x] test_others \r\n- [x] test_missing\r\n\r\ntest_0084-start-unionarray.py \r\n\r\n- [x] test_getitem\r\n",
  "closed_at":"2021-08-24T19:44:06Z",
  "comments":1,
  "created_at":"2021-07-29T08:12:22Z",
  "draft":false,
  "id":955580262,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0Njk5MzEwMDIw",
  "number":1036,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-24T19:44:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: testing_starting _getitem_next",
  "updated_at":"2021-08-24T19:44:07Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nI believe we discussed this on Gitter (or perhaps elsewhere) @jpivarski. I'm opening this issue to track the feature as I don't have time just now to work on it, but want to keep tabs on it.\r\n\r\nIt would be useful if there were an `axis=None` variant of the to/from regular functions such that the entire layout may be converted to/from regular contents.",
  "closed_at":"2021-11-04T18:25:13Z",
  "comments":1,
  "created_at":"2021-07-30T11:11:39Z",
  "id":956649025,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NTY2NDkwMjU=",
  "number":1037,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add `axis=None` functionality to `ak.to/from_regular`",
  "updated_at":"2021-11-04T18:25:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\r\n\r\nAs discussed on Gitter, it may be useful for some people to be able to specify lower bounds on the dimensionality required for array classes to be chosen by their `behavior` name. \r\n\r\n# Syntax\r\n## Option A\r\nThe `\"+\"` token was mused to reflect \"one dimension\":\r\n\r\n* `ak.behavior[\"+\", \"point\"]` would denote a one dimensional array of points.\r\n* `ak.behavior[\"*\", \"point\"]` would denote a one-plus dimensional array of points.\r\n* `ak.behavior[\"*\", \"+\", \"point\"]` would denote a two-plus dimensional array of points.\r\n\r\n## Option B\r\nA cleaner approach might instead use only `\"*\"`, and would allow users only to specify `ndim >= k` instead of `ndim == k`. This would look like:\r\n\r\n* `ak.behavior[\"*\", \"point\"]` would denote a one-plus dimensional array of points.\r\n* `ak.behavior[\"*\", \"*\", \"point\"]` would denote a two-plus dimensional array of points.\r\n\r\n## Option C\r\nSeeing as we already use `\".\"` to mean a single dimension array, the same behaviour in A could be implemented with `\".\"`:\r\n\r\n* `ak.behavior[\".\", \"point\"]` would denote a one dimensional array of points.\r\n* `ak.behavior[\"*\", \"point\"]` would denote a one-plus dimensional array of points.\r\n* `ak.behavior[\"*\", \".\", \"point\"]` would denote a two-plus dimensional array of points.\r\n\r\n# Observations\r\nOne problem that I can see with option A is that it uses regular expressions qualifiers, but whose behaviours are inverted (`\"*\"` is 0+ in regex, and `\"+\"` is 1+).",
  "closed_at":"2024-01-20T00:45:39Z",
  "comments":8,
  "created_at":"2021-07-30T11:34:48Z",
  "id":956665604,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NTY2NjU2MDQ=",
  "number":1038,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Extend the array-class syntax in `ak.behavior`",
  "updated_at":"2024-01-20T00:45:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@agoose77 I didn't want #1038 to have to wait for v2, so I wrote `nlist_parameter` to demonstrate how `purelist_parameter` can be generalized. This method is like `purelist_parameter` except that it will only report the parameter at a given depth. Unlike `purelist_parameter`, it \"looks through\" nodes at a higher depth than the one specified and like `purelist_parameter`, it will take the first node that has the requested parameter _at_ the specified depth.\r\n\r\nNow that I look at the original problem, you also want \"depth greater than or equal to,\" but that would be a simple modification of this method: after `n` reaches `0`, it can switch over to `purelist_parameter` to keep going. The main thing about these methods is that they encode the knowledge that ListArray, ListOffsetArray, and RegularArray are dimensions, RecordArrays are terminal, UnionArrays require agreement among all of their branches, and everything else is a non-dimension node.\r\n\r\nYou can use this PR as a base for solving #1038 or as an example of how a method _like_ `purelist_parameter` is implemented, since it's illustrated in the diff of this first commit. Whatever you come up with can easily be ported to v2.",
  "closed_at":"2022-01-24T22:07:26Z",
  "comments":8,
  "created_at":"2021-07-30T13:56:16Z",
  "draft":true,
  "id":956769418,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzAwMzEzMzEy",
  "number":1039,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Extend arrayclass to depend on number of dimensions.",
  "updated_at":"2022-09-23T00:50:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@agoose77 This is prompted by your question on Gitter:\r\n\r\n> Hey @jpivarski , sorry for the visual noise - I've determined that you can't edit messages on Matrix once someone has replied to them (well, you can, but Gitter displays copied messages \ud83e\udd2e).\r\n> \r\n> Should two arrays with different dimensions and record types be broadcastable?\r\n> E.g.\r\n> \r\n> ```\r\n> >>> x.type\r\n> 4056 * var * {\"u\": ?int64, \"v\": ?int64}\r\n> >>> y.type\r\n> 4056 * var * var * {\"q\": float64, \"t\": float64}\r\n> >>> ak.broadcast_arrays(x, y)\r\n> ValueError ...\r\n> ```\r\n> We currently require the record fields to match if we allow records to broadcast against one another.\r\n> \r\n> This behavior initially surprised me - I expected the record-part to be irrelevant and successfully left-broadcast; the record is part of the type, and we allow different dtypes to broadcast:\r\n> \r\n> ```\r\n> >>> ak.broadcast_arrays(x.u, y.t)\r\n> [<Array [[[66], [65]], ... 64], [68], [65]]] type='4056 * var * option[var * int64]'>,\r\n>  <Array [[[32], [199]], ... [31], [275]]] type='4056 * var * option[var * float64]'>]\r\n> ```\r\n> However, I'm also not sure about the resulting type here - naively I'd expect the option to wrap the dtype, not the var dimension.\r\n> \r\n> The broadcasting works if I use zip, because zip exits early from the broadcasting once the purelist_depth is 1 (i.e. it doesn't encounter the bare record).\r\n> \r\n> ```\r\n> >>> ak.zip((u, v)).type\r\n> 4056 * var * var * ({\"u\": ?int64, \"v\": ?int64}, {\"t\": float64, \"q\": float64})\r\n> ```\r\n> Most likely I am missing something here, but perhaps you could shed some light on this? @jpivarski\r\n\r\nWhat I've done here is to stop broadcasting at records when all inputs are records, so that non-records are still broadcasted into the fields of a record, but two records aren't broadcasted into each other (which is impossible, which is why you got the ValueError). Maybe the rule should be \"any record\" rather than \"all records\"? That's why this PR is a draft.\r\n\r\nSee tests/test_1040-proposal-to-stop-broadcast_arrays-at-records.py for examples.\r\n\r\nAlso note that this only affects `ak.broadcast_arrays`, not broadcasting in general.",
  "closed_at":"2022-09-08T16:26:41Z",
  "comments":17,
  "created_at":"2021-07-30T14:31:27Z",
  "draft":true,
  "id":956800211,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzAwMzM5NjIw",
  "number":1040,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Proposal to stop ak.broadcast_arrays at records.",
  "updated_at":"2022-09-23T00:50:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Reproducer:\r\n```python3\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nx = ak.layout.NumpyArray(np.arange(10), None, {\"__record__\": \"mm_pad\"})\r\n\r\ny = ak.layout.IndexedArray64(\r\n    ak.layout.Index64(np.arange(10)),\r\n    x\r\n)\r\n\r\nassert x.mergeable(y)\r\n```\r\n\r\nThis seems to be caused by the following parameter check, which doesn't take into account the wrapped layout parameters:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/585569b245d65078e0b7440de0b0baf6f2b67a4e/src/libawkward/array/IndexedArray.cpp#L1644-L1645\r\n\r\nIs this intentional? Or do we want to take the `purelist_parameter`(s) such that one *could* make the `IndexedArrayOf` non mergeable, but bare depth-less contents would be mergeable?\r\n\r\nC.f. `BitMaskedArray`, etc.",
  "closed_at":"2023-02-18T17:55:32Z",
  "comments":4,
  "created_at":"2021-07-30T16:30:47Z",
  "id":956904125,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NTY5MDQxMjU=",
  "number":1041,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`IndexedArray::mergeable` returns `false` incorrectly",
  "updated_at":"2023-02-18T17:55:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\n\nBy name, `ak.unzip` is the logical inverse of `ak.zip`. However, at the moment, the API is not symmetrical; `ak.zip` can produce tuples or named records from the input argument, whereas `ak.unzip` always returns a tuple of arrays. \r\n\r\nIf this can be improved upon, then one option is to return a mapping or a tuple according to the array type. This *would* work, but I'm not convinced that returning different types is the best design.\r\n\r\nPerhaps a better solution would be to return two tuples; one for the keys, and one for values? \r\n```python3\r\nfields, values = ak.unzip(array)\r\n```\r\n\r\nAlthough users would still need to handle the two cases differently (named records vs tuples), this would be as simple as testing `len(keys)` (or just `bool(keys)` if one is being Pythonic). This is also true of using `ak.fields` with `ak.unzip`, so I don't think it's a strong counterargument.\r\n\r\nThis issue proposes to clean-up `ak.unzip`, but clearly it would entail a breaking change. ",
  "closed_at":"2021-08-02T14:59:57Z",
  "comments":0,
  "created_at":"2021-08-02T14:59:45Z",
  "id":958232466,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NTgyMzI0NjY=",
  "number":1042,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Should `ak.unzip` return both the field names and the values?",
  "updated_at":"2021-08-02T14:59:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"To execute run,\r\n`python print-data.py`\r\n\r\n Test Cases Generation Progress:\r\n\r\n- [ ] Reducer.cpp\r\n- [ ] Slice,cpp\r\n- [ ] Index.cpp\r\n- [x] Identities.cpp\r\n- [x] Content.cpp\r\n- [ ] Files in layoutbuilder\r\n- [ ] Files in array",
  "closed_at":"2021-09-07T22:03:57Z",
  "comments":2,
  "created_at":"2021-08-02T20:59:31Z",
  "draft":false,
  "id":958501988,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzAxNzc2MzM4",
  "number":1044,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Generating Test Data through Integration Tests",
  "updated_at":"2021-11-12T14:50:49Z",
  "user":"MDQ6VXNlcjUyNjM1Nzcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2021-08-18T07:17:58Z",
  "comments":3,
  "created_at":"2021-08-03T20:11:44Z",
  "draft":false,
  "id":959462732,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzAyNTc1Nzk4",
  "number":1045,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-18T07:17:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"LayoutBuilder refactoring",
  "updated_at":"2021-08-18T09:31:39Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\n'1.4.0'\r\n\r\n### Description and code to reproduce\r\n\r\nDear awkward developers,\r\n\r\nwe noticed an unexpected behaviour in fancy indexing empty dimensions before and after `ak.to_numpy` call.\r\nI think the following snippet makes it a bit more clear:\r\n\r\n```python\r\n# before\r\nak.to_numpy(ak.Array([[1], [2]])[[]])\r\n>> array([], shape=(0, 0), dtype=int64)\r\n\r\n# after\r\nak.to_numpy(ak.Array([[1], [2]]))[[]]\r\n>> array([], shape=(0, 1), dtype=int64) # <-- this is what we expected\r\n```\r\nThe shape discrepancy is unexpected for us. \r\nWhat is your take, is this behaviour intended?\r\n\r\nBest, Peter",
  "closed_at":"2021-08-04T13:39:26Z",
  "comments":1,
  "created_at":"2021-08-04T13:24:41Z",
  "id":960448102,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NjA0NDgxMDI=",
  "number":1046,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Empty slicing behaviour before and after `ak.to_numpy` is different",
  "updated_at":"2021-08-04T13:39:26Z",
  "user":"MDQ6VXNlcjE4NDYzNTgy"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\nHEAD\n\n### Description and code to reproduce\n\n```python\r\n>>> ak.to_numpy(ak.Array([[], [], []]))   # should have shape (3, 0)\r\narray([], shape=(0, 0), dtype=float64)\r\n```\r\n\r\nIt's probably not setting the `zeros_length` argument when converting the ListArray or ListOffsetArray into a RegularArray. It's possible to express such an array:\r\n\r\n```python\r\n>>> shape30 = ak.Array(ak.layout.RegularArray(\r\n...     ak.layout.NumpyArray(np.array([])),\r\n...     size=0,\r\n...     zeros_length=3,\r\n... ))\r\n>>> shape30\r\n<Array [[], [], []] type='3 * 0 * float64'>\r\n```\r\n\r\n... or maybe the outer length is being lost _later_ in the process, because look at this:\r\n\r\n```python\r\n>>> ak.to_numpy(shape30)\r\narray([], shape=(0, 0), dtype=float64)\r\n```\r\n\r\nAnyway, it's probably an easy fix, once we know where the outer length is being lost.",
  "closed_at":"2021-12-07T23:22:53Z",
  "comments":3,
  "created_at":"2021-08-06T12:10:32Z",
  "id":962680292,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NjI2ODAyOTI=",
  "number":1048,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.to_numpy(ak.Array([[], [], []])) should return an array of shape (3, 0), not (0, 0)",
  "updated_at":"2021-12-07T23:22:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Version of Awkward Array\n\n?\n\n### Description and code to reproduce\n\n```python\r\nak.concatenate(some_array_with_more_than_one_dimension)\r\n```\r\n\r\nwhether that array is an Awkward Array or NumPy (or CuPy? how to check all the libraries?), it should instead `ak.flatten` it with `axis=1`. That's because `ak.concatenate` _does_ effectively flatten, but not in a way that was designed to be remotely CPU or memory efficient. (It iterates over the items as a Python iterable, making a _lot_ of little arrays to concatenate.)",
  "closed_at":"2022-08-31T23:41:14Z",
  "comments":0,
  "created_at":"2021-08-06T20:45:51Z",
  "id":963035555,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NjMwMzU1NTU=",
  "number":1049,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.concatenate with a single array argument effectively flattens; it should short-circuit to ak.flatten with axis=1",
  "updated_at":"2022-08-31T23:41:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Allow to override build date with `SOURCE_DATE_EPOCH`\nin order to make builds reproducible.\nSee https://reproducible-builds.org/ for why this is good\nand https://reproducible-builds.org/specs/source-date-epoch/\nfor the definition of this variable.\n\nThis PR was done while working on reproducible builds for openSUSE.",
  "closed_at":"2021-08-12T12:45:35Z",
  "comments":4,
  "created_at":"2021-08-09T08:23:00Z",
  "draft":false,
  "id":963758533,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzA2MzE1NDQz",
  "number":1050,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-12T12:45:35Z"
  },
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Allow to override build date with SOURCE_DATE_EPOCH",
  "updated_at":"2021-09-09T18:42:03Z",
  "user":"MDQ6VXNlcjYzNzk5MA=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-08-09T13:34:42Z",
  "comments":0,
  "created_at":"2021-08-09T13:03:03Z",
  "draft":false,
  "id":963972996,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzA2NTAxMzAx",
  "number":1051,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-09T13:34:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove debugging printout.",
  "updated_at":"2021-08-09T13:34:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.4.0 (and git main) \n\n### Description and code to reproduce\n\nWhen inserting a virtual array into an array created with `ak.from_buffers` with `lazy=True`, the generator function of the virtual array gets called right away. This however happens only for the first virtual array being inserted. I would expect the generator function not being called at all, as the virtual arrays content is not required at this point.\r\nCode example:\r\n```python\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\n\r\ndef some_function1(length):\r\n    print(\"called1\")\r\n    return np.ones(length)\r\n\r\n\r\ndef some_function2(length):\r\n    print(\"called2\")\r\n    return np.ones(length)\r\n\r\n\r\narray = ak.from_buffers(*ak.to_buffers(ak.Array({\"something\": [1,2,3]})), lazy=True)\r\narray[\"virtual\"] = ak.virtual(some_function1, (len(array),), length=len(array))\r\narray[\"virtual\"] = ak.virtual(some_function2, (len(array),), length=len(array))\r\n\r\n```\r\nThis will print `called1`, even though it shouldn't. If `lazy=False` in the `ak.from_buffers` call, it doesn't print anything, like it should.\r\n\r\n\r\nIn the same context i noticed a continuous increase in memory usage, in case the array is also used as part of the `args` parameter. To me this looks a lot like something isn't being freed. Code example:\r\n```python\r\nimport os\r\nimport psutil\r\nimport gc\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\n\r\ndef some_function(length, something):\r\n    print(\"called\")\r\n    return np.ones(length)\r\n\r\n\r\nwhile True:\r\n    gc.collect()\r\n    big = ak.Array({\"something\": np.random.rand(100000000)})\r\n    array = ak.from_buffers(*ak.to_buffers(big), lazy=True)\r\n    array[\"virtual\"] = ak.virtual(some_function, (len(array), array), length=len(array))\r\n    array[\"virtual\"] = ak.virtual(some_function, (len(array), array), length=len(array))\r\n    print(psutil.Process(os.getpid()).memory_info().rss)\r\n```\r\nThe resident set size, which is printed, will continue to increase with every loop. This does not happen (there is almost no change to the number) if `array[\"virtual\"]` is only set once. It also does not happen if `big` instead of `array` is used in the `args` parameter.",
  "closed_at":"2021-08-09T15:26:45Z",
  "comments":2,
  "created_at":"2021-08-09T14:41:51Z",
  "id":964068967,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NjQwNjg5Njc=",
  "number":1052,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Assigning virtual arrays as a field to an array materializes the virtual arrays",
  "updated_at":"2021-08-09T15:26:45Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-08-09T18:43:15Z",
  "comments":0,
  "created_at":"2021-08-09T18:05:59Z",
  "draft":false,
  "id":964239766,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzA2NzI4NDgy",
  "number":1054,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-09T18:43:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove debugging printout (2).",
  "updated_at":"2021-08-09T18:43:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.4.0\n\n### Description and code to reproduce\n\nThe support for shapeless arrays (i.e. numpy shape `()`) seems to be either (intentionally?) missing or broken.\r\n\r\n#### In case it is intentionally missing:\r\nOther code, in particular functions that require a scalar argument (i.e. `fill_none`) may fail to operate as expected. For example, it is not possible to provide a specific-typed scalar fill `value` argument for [`fill_none`](https://awkward-array.readthedocs.io/en/latest/_auto/ak.fill_none.html) which in turn will always convert the result to the default type:\r\n```python\r\na = ak.values_astype(ak.Array([1, None]), np.float32)\r\n# value: <Array [1, None] type='2 * ?float32'>\r\n\r\nak.fill_none(a, 0)\r\n# output: <Array [1, 0] type='2 * float64'>\r\n# type gets changed, expected - the same behavior as in numpy\r\n\r\nak.fill_none(a, np.float32(0))\r\n# output: <Array [1, 0] type='2 * float64'>\r\n# type \"hint\" ignored, unexpected but tolerate since a rarely-used type i.e. not an (nd)array\r\n\r\nak.fill_none(a, np.array([0], dtype=np.float32))\r\n# output: <Array [1, [0]] type='2 * union[float32, 1 * float32]'>\r\n# type is correctly retained, working as expected\r\n\r\nak.fill_none(a, np.array(0, dtype=np.float32))\r\n# output: <Array [1, [0]] type='2 * union[float32, 1 * float32]'>\r\n# type retained, but superfluous dimension inserted\r\n```\r\n\r\nDuring the [internal conversion to an awkward type/layout](https://github.com/scikit-hep/awkward-1.0/blob/1.4.0/src/awkward/operations/structure.py#L2659-L2661) the superfluous dimension gets inserted.\r\n\r\n#### In case that there is supposed to be support for shapeless arrays, this illustrates the inconsistency:\r\n```python\r\na = np.array(0) # value: array(0)\r\nb = ak.Array(a) # value: <Array [0] type='1 * int64'>\r\nc = ak.to_numpy(b) # value: array([0])\r\nassert a.shape == c.shape # this fails\r\n```\r\n\r\n",
  "closed_at":"2021-08-10T13:34:21Z",
  "comments":3,
  "created_at":"2021-08-10T12:23:09Z",
  "id":964925919,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NjQ5MjU5MTk=",
  "number":1055,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Scalar values/shapeless arrays related issues",
  "updated_at":"2021-08-10T13:34:21Z",
  "user":"MDQ6VXNlcjE1NjUxMTUw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-08-10T13:34:21Z",
  "comments":0,
  "created_at":"2021-08-10T13:01:19Z",
  "draft":false,
  "id":964957805,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzA3MzMyNTc0",
  "number":1056,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-10T13:34:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix ak.fill_none fill value's handling of NumPy dimension.",
  "updated_at":"2021-08-10T13:34:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"... because they're not iterable. This was raised in an issue by @bfis:\r\n\r\n> #### In case that there is supposed to be support for shapeless arrays, this illustrates the inconsistency:\r\n> ```python\r\n> a = np.array(0) # value: array(0)\r\n> b = ak.Array(a) # value: <Array [0] type='1 * int64'>\r\n> c = ak.to_numpy(b) # value: array([0])\r\n> assert a.shape == c.shape # this fails\r\n> ```\r\n\r\nElsewhere, we consider NumPy scalars (e.g. `np.float32(3.14)`) to be equivalent to zero-dimensional arrays (e.g. `np.array(3.14, np.float32)`), but this is interpreting the zero-dimensional array as a length-1 array.\r\n\r\n`ak.Array` and `ak.from_numpy` do not accept scalars:\r\n\r\n```python\r\n>>> ak.Array(np.float32(3.14))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/miniconda3/lib/python3.8/site-packages/awkward/highlevel.py\", line 254, in __init__\r\n    layout = ak.operations.convert.from_iter(\r\n  File \"/home/jpivarski/miniconda3/lib/python3.8/site-packages/awkward/operations/convert.py\", line 885, in from_iter\r\n    for x in iterable:\r\nTypeError: 'numpy.float32' object is not iterable\r\n```\r\n\r\nSo they should not accept zero-dimensional arrays, for consistency. In other words, not this:\r\n\r\n```python\r\n>>> ak.Array(np.array(3.14, np.float32))\r\n<Array [3.14] type='1 * float32'>\r\n```\r\n\r\n_Originally posted by @jpivarski in https://github.com/scikit-hep/awkward-1.0/issues/1055#issuecomment-896017089_, with @bfis's response in https://github.com/scikit-hep/awkward-1.0/issues/1055#issuecomment-896027116\r\n",
  "closed_at":null,
  "comments":3,
  "created_at":"2021-08-10T17:09:47Z",
  "id":965155094,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NjUxNTUwOTQ=",
  "number":1057,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":"reopened",
  "title":"ak.Array and ak.from_numpy should not accept zero-dimensional arrays",
  "updated_at":"2024-01-20T00:51:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"The current warning(s) emitted by `deprecate` (currently only used in `fill_none`) are not too helpful since they show a [position](https://github.com/scikit-hep/awkward-1.0/blob/69b66fce097d3daf978eac7aa95c7ccd85b1e5bb/src/awkward/_util.py#L112) in the `deprecate` helper function.\r\n\r\nBy using the `stacklevel` parameter of [`warnings.warn`](https://docs.python.org/3/library/warnings.html#warnings.warn) we can adjust this to show the line where the (marked as deprecated) function was called from i.e. usually somewhere in the users code.",
  "closed_at":"2021-08-12T12:44:26Z",
  "comments":3,
  "created_at":"2021-08-11T16:05:22Z",
  "draft":false,
  "id":966996650,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzA5MTk5MTY2",
  "number":1058,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-12T12:44:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix deprecation warning stack level",
  "updated_at":"2021-08-12T12:44:27Z",
  "user":"MDQ6VXNlcjE1NjUxMTUw"
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjg4Mjg5MDg2",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR implements the `_localindex` function for all the Awkward Array types except `VirtualArray`.\r\n\r\n* `_localindex` implementation\r\n- [x] BitMaskedArray\r\n- [x] ByteMaskedArray\r\n- [x] EmptyArray\r\n- [x] IndexedArray\r\n- [x] IndexedOptionArray\r\n- [x] ListArray\r\n- [x] ListOffsetArray\r\n- [x] NumpyArray\r\n- [x] RecordArray\r\n- [x] RegularArray\r\n- [x] UnionArray\r\n- [x] UnmaskedArray\r\n\r\n\r\n* `_localindex` tests\r\n- [x] BitMaskedArray\r\n- [x] ByteMaskedArray\r\n- [x] EmptyArray\r\n- [x] IndexedArray\r\n- [x] IndexedOptionArray\r\n- [x] ListArray\r\n- [x] ListOffsetArray\r\n- [x] NumpyArray\r\n- [x] RecordArray\r\n- [x] RegularArray\r\n- [x] UnionArray\r\n- [x] UnmaskedArray",
  "closed_at":"2021-08-23T17:56:31Z",
  "comments":1,
  "created_at":"2021-08-12T12:14:14Z",
  "draft":false,
  "id":968704682,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzEwODAzMzkw",
  "number":1059,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-23T17:56:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Implementing _localindex.",
  "updated_at":"2021-08-23T17:56:32Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\r\n\r\n1.4.0\r\n\r\n### Description and code to reproduce\r\n\r\nThis works:\r\n```python\r\n>>> import awkward; awkward.Array({\"record\": awkward.Array({\"column\": [1]})})\r\n<Array [{record: {column: 1}}] type='1 * {\"record\": {\"column\": int64}}'>\r\n```\r\n\r\nThis doesn't:\r\n```python\r\n>>> import awkward; awkward.Array([awkward.Array({\"column\": [1]})])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/nix/store/wi2ck5llz7lv07sir0a9xia1irc974pj-python3.9-awkward-1.4.0/lib/python3.9/site-packages/awkward/highlevel.py\", line 254, in __init__\r\n    layout = ak.operations.convert.from_iter(\r\n  File \"/nix/store/wi2ck5llz7lv07sir0a9xia1irc974pj-python3.9-awkward-1.4.0/lib/python3.9/site-packages/awkward/operations/convert.py\", line 886, in from_iter\r\n    out.fromiter(x)\r\n  File \"/nix/store/wi2ck5llz7lv07sir0a9xia1irc974pj-python3.9-awkward-1.4.0/lib/python3.9/site-packages/awkward/highlevel.py\", line 1763, in __getitem__\r\n    tmp = ak._util.wrap(self.layout[where], self._behavior)\r\nValueError: scalar Record can only be sliced by field name (string); try \"0\"\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.4.0/src/libawkward/array/Record.cpp#L198)\r\n```\r\n\r\nExpected result:\r\n```\r\n<Array [{column: [1]}] type='1 * {\"column\": var * int64}'>\r\n```",
  "closed_at":"2021-08-16T13:57:48Z",
  "comments":7,
  "created_at":"2021-08-15T01:42:31Z",
  "id":971029040,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NzEwMjkwNDA=",
  "number":1060,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Building arrays out of lists of arrays doesn't work",
  "updated_at":"2021-08-18T12:34:42Z",
  "user":"MDQ6VXNlcjI0NTU3Mw=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-08-16T13:57:48Z",
  "comments":0,
  "created_at":"2021-08-16T13:26:29Z",
  "draft":false,
  "id":971738556,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzEzNDM4NDMz",
  "number":1061,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-16T13:57:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Explicit ak.Record.__iter__ (iterates over fields, like dict) and better ak.from_iter handling of nested ak.Record and ak.Array.",
  "updated_at":"2021-08-16T13:57:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"The kernel `awkward_NumpyArray_getitem_next_null` was #2 in a profile of the [ADL benchmark](https://github.com/nsmith-/coffea-benchmarks/blob/master/coffea-adl-benchmarks.ipynb) after decompression.\r\n\r\nI decided to compare the performance of a basic take operation to numpy, compiling awkward on my machine (Intel(R) Core(TM) i7-8559U CPU @ 2.70GHz) with `python localbuild.py --release` (which, according to the internet, means CMake will use -O3 with clang, but not sure about `-march` setting) and then running the following ipython script:\r\n```python\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\nnp.random.seed(42)\r\nn = np.random.poisson(5, size=100_000)\r\na = np.arange(n.sum(), dtype=\"f4\")\r\n\r\nx = ak.unflatten(a, n)\r\ni0, _, _ = ak.unzip(ak.argcombinations(x, 3))\r\n\r\nxoffsets = np.array(x.layout.offsets)\r\nioffsets = np.array(i0.layout.offsets)\r\nicontent = np.array(ak.flatten(i0))\r\n\r\ndef take_ak():\r\n    x[i0]\r\n\r\n\r\ndef take_np():\r\n    iflat = np.repeat(xoffsets[:-1], np.diff(ioffsets)) + icontent\r\n    a[iflat]\r\n\r\n%timeit take_ak()\r\n%timeit take_np()\r\n```\r\nI get\r\n```\r\n28.7 ms \u00b1 3.67 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\r\n11.9 ms \u00b1 193 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n```\r\nUsing Instruments to sample 1000 `take_ak` calls, the heaviest functions are (omitting the stack parents for clarity) the kernels:\r\n```\r\nTime  % Self-time symbol\r\n8.45 s   31.1%\t8.45 s\t \t        awkward_NumpyArray_getitem_next_null_64\r\n1.94 s    7.1%\t1.94 s\t \t        awkward_carry_arange64\r\n8.39 s   30.9%\t8.39 s\t \t       awkward_NumpyArray_getitem_next_null_64\r\n3.90 s   14.3%\t3.90 s\t \t       awkward_ListArray64_getitem_jagged_apply_64\r\n```\r\nSo I started with `awkward_NumpyArray_getitem_next_null_64`. This is doing the same thing as numpy's [mapiter_trivial_get](https://github.com/numpy/numpy/blob/7311af8238e5a3643acf9d7614ea64e56ad55078/numpy/core/src/multiarray/lowlevel_strided_loops.c.src#L1448), but much slower. Clearly numpy has implemented a lot of magic there. The relevant lines in awkward are https://github.com/scikit-hep/awkward-1.0/blob/f250c34279476ae545e1cd629b97a4013a71ca17/src/cpu-kernels/awkward_NumpyArray_getitem_next_null.cpp#L14-L16 \r\nPutting the following functions into [compiler explorer](https://godbolt.org/z/5xh1Mqsqd)\r\n```cpp\r\n#include <cstring>\r\n#include <cstdint>\r\n\r\nvoid foo(uint8_t* toptr, uint8_t* fromptr, int64_t* pos, int64_t len, int64_t stride) {\r\n  for (int64_t i = 0;  i < len;  i++) {\r\n    std::memcpy(&toptr[i*stride], &fromptr[pos[i]*stride], (size_t)stride);\r\n  }\r\n}\r\n\r\nvoid bar(uint8_t* toptr, uint8_t* fromptr, int64_t* pos, int64_t len) {\r\n  for (int64_t i = 0;  i < len;  i++) {\r\n    std::memcpy(&toptr[i*4], &fromptr[pos[i]*4], 4);\r\n  }\r\n}\r\n```\r\nit is apparent that most compilers can specialize on fixed strides to emit much more optimized code. It looks like the numpy tricks of casting to the dtype, copying, and casting back emits the same assembly as the fixed-size `std::memcpy`, so I think it is probably most of the magic in the numpy implementation. That's what's in https://github.com/scikit-hep/awkward-1.0/commit/4ce4b4d0d667990a996bd9a5c9236ffa84326f32 After that commit, the test script result is\r\n```\r\n11.7 ms \u00b1 179 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n11.8 ms \u00b1 153 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n```\r\nand the statistical profile shows\r\n```\r\n1.95 s   15.4%\t1.95 s\t \t         awkward_NumpyArray_getitem_next_null_64\r\n1.94 s   15.4%\t1.94 s\t \t        awkward_carry_arange64\r\n4.06 s   32.2%\t0 s\t \t       awkward_ListArray64_getitem_jagged_apply_64\r\n1.82 s   14.4%\t1.82 s\t \t        awkward_NumpyArray_getitem_next_null_64\r\n```\r\nFurther improvement here could come from finding ways to skip validity checks in `awkward_NumpyArray_getitem_next_null_64`.\r\n\r\nI also looked at the flat take operation, i.e.\r\n```python\r\n# continuing from above\r\nxflat = ak.flatten(x)\r\niflat = np.repeat(xoffsets[:-1], np.diff(ioffsets)) + icontent\r\n\r\ndef take_ak():\r\n    xflat[iflat]\r\n```\r\nHere there are a different set of kernels:\r\n```\r\n3.86 s   32.5%\t3.86 s\t \t    awkward_NumpyArray_getitem_next_array_64\r\n2.58 s   21.7%\t0 s\t \t     awkward_slicearray_ravel_64\r\n1.43 s   12.0%\t1.43 s\t \t     awkward_NumpyArray_getitem_next_null_64\r\n1.42 s   11.9%\t1.42 s\t \t    awkward_regularize_arrayslice_64\r\n```\r\nThe leading kernel, after some thought, can be completely optimized away in any case where the outer dimension is the length-1 wrapper artificially put around `iflat` for sake of convenience in the library code. This is https://github.com/scikit-hep/awkward-1.0/commit/254ddf6e1f41e4add5a17af53312a395c78eb25e In the same cases, `awkward_slicearray_ravel_64` is effectively a `memcpy` operation, as the stride is 1. Letting `std::memcpy` do it improves performance a lot, as done in https://github.com/scikit-hep/awkward-1.0/commit/eb968ef35d1c35d63000fbc1da50d10b65481d0e After these changes, we have for the same test\r\n```\r\n2.40 s   35.1%\t0 s\t \t     awkward_slicearray_ravel_64\r\n1.92 s   28.1%\t1.92 s\t \t     awkward_NumpyArray_getitem_next_null_64\r\n1.64 s   24.0%\t1.64 s\t \t    awkward_regularize_arrayslice_64\r\n```\r\nAh! it didn't do anything! Ok, what happened is I was originally testing with CMake `RelWithDbgInfo` rather than `Release` and for that it seems `-O2` is [what is used in gcc/clang](https://stackoverflow.com/questions/48754619/what-are-cmake-build-type-debug-release-relwithdebinfo-and-minsizerel). I guess that wasn't enough to get the compiler to do the same memory copy optimization?\r\n\r\nThe last commit attempts to improve the validity checking in `awkward_regularize_arrayslice_64` and a similar kernel in the ListArray case by reordering two branch points to not be dependent, which I thought might help with pipelining. Amusingly, once again it showed better performance under `RelWithDbgInfo` but same performance under `Release`.\r\n\r\nA significant source of improvement would be to add flags to some kernels to omit bounds checks if the indexers are known to be safe (e.g. when generated by awkward itself, as is the case for combinations). That's a more involved project so I didn't pursue it. Perhaps with awkward2 refactor this will be more straightforward.",
  "closed_at":"2021-08-17T21:59:04Z",
  "comments":6,
  "created_at":"2021-08-17T17:08:07Z",
  "draft":false,
  "id":972897682,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzE0NDI1MzQ2",
  "number":1062,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-17T21:59:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Optimizing common take operations",
  "updated_at":"2021-08-17T21:59:04Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-08-26T09:28:34Z",
  "comments":3,
  "created_at":"2021-08-18T10:04:16Z",
  "draft":false,
  "id":973495345,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzE0OTMyMDg4",
  "number":1063,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-26T09:28:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"LayoutBuilder template using either ForthMachine32 or ForthMachine64 and a tutorial",
  "updated_at":"2021-08-26T09:28:34Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"NONE",
  "body":"### Description of new feature\n\nhttps://awkward-array.org/how-to-use-in-numba-features.html",
  "closed_at":null,
  "comments":0,
  "created_at":"2021-08-18T19:57:12Z",
  "id":974008758,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NzQwMDg3NTg=",
  "number":1064,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"open",
  "state_reason":null,
  "title":"Awkward 1.0 Numba documentation",
  "updated_at":"2024-01-20T00:51:23Z",
  "user":"MDQ6VXNlcjY4MzE2NTcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"To run :\r\n```\r\npython dev/generate-tests.py\r\npython -m pytest -vv unit-tests\r\n```",
  "closed_at":"2021-08-31T22:17:21Z",
  "comments":2,
  "created_at":"2021-08-18T21:08:16Z",
  "draft":false,
  "id":974057239,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzE1NDE3NTA3",
  "number":1065,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-31T22:17:21Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Unit Tests",
  "updated_at":"2021-09-09T17:05:47Z",
  "user":"MDQ6VXNlcjUyNjM1Nzcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\n1.4.0\r\n\r\n### Description and code to reproduce\r\n\r\n**Code:**\r\n```python3\r\nimport awkward as ak\r\ntab = ak.Array({\"A\": [1,2,3], \"B\": [4, None, 5]})\r\nprint(tab.to_numpy())\r\n```\r\n**Output:**\r\n```\r\n[(1,               4) (2, 0) (3,               5)]\r\n```\r\n**Expected Output:**\r\nSomething like\r\n\r\n```\r\n[(1,               4) (2, --) (3,               5)]\r\n```\r\nSpecifically, I expected to get a masked array, or failing that, an error.\r\n\r\nIf I construct the array using pyarrow instead:\r\n```python3\r\nimport pyarrow as pa\r\nimport awkward as ak\r\n\r\ntab = pa.table(\r\n    {\r\n        \"A\": pa.array([1, 2, 3], type=pa.int32()),\r\n        \"B\": pa.array([4, None, 6], type=pa.int32()),\r\n    }\r\n)\r\naktab = ak.from_arrow(tab)\r\nprint(aktab.to_numpy())\r\n```\r\nI'm able to get what looks like uninitalized memory (changes each run). Presumably this is an artifact of how pyarrow constructs nullable arrays, and awkward re-using the buffer.\r\n```\r\n[(1,     4) (2, 32607) (3,     6)]\r\n```",
  "closed_at":"2021-08-20T19:19:38Z",
  "comments":1,
  "created_at":"2021-08-20T16:45:35Z",
  "id":975766985,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NzU3NjY5ODU=",
  "number":1066,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Awkward array to numpy structured array fills in None with garbage",
  "updated_at":"2021-08-20T19:19:38Z",
  "user":"MDQ6VXNlcjE0OTA4MzI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-08-20T19:19:38Z",
  "comments":0,
  "created_at":"2021-08-20T17:09:01Z",
  "draft":false,
  "id":975781948,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzE2ODgyNTk5",
  "number":1067,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-20T19:19:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #1066, ak.to_numpy can return masked-structured arrays.",
  "updated_at":"2021-08-20T19:19:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.4.0\n\n### Description and code to reproduce\n\n**Code**\r\n```python\r\nimport pyarrow as pa\r\nimport awkward as ak\r\n\r\ntable1 = pa.Table.from_pydict({\"key\": [True]})\r\ntable2 = pa.Table.from_pydict({\"\": [True]})\r\ntable3 = pa.Table.from_pydict({\"\": [True], \"key\": [False]})\r\nprint(ak.from_arrow(table1))\r\nprint(ak.from_arrow(table2))\r\nprint(ak.from_arrow(table3))\r\n```\r\n**Output**\r\n```\r\n[{key: True}]\r\n[True]\r\n[{'': True, key: False}]\r\n```\r\n**Expected Output**\r\n```\r\n[{key: True}]\r\n[{'':True}]\r\n[{'': True, key: False}]\r\n```",
  "closed_at":"2021-08-23T14:32:00Z",
  "comments":8,
  "created_at":"2021-08-20T20:16:01Z",
  "id":975893972,
  "labels":null,
  "locked":true,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NzU4OTM5NzI=",
  "number":1068,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`from_arrow` doesn't preserve empty string column name",
  "updated_at":"2021-08-23T14:32:00Z",
  "user":"MDQ6VXNlcjE0OTA4MzI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The search box works when I build the docs using sphinx_rtd_theme==0.5.2 (the [latest non-1.0 release](https://github.com/readthedocs/sphinx_rtd_theme/releases)), but it doesn't on readthedocs.org, which uses sphinx_rtd_theme 0.4.3. @tacaswell has pointed out that https://github.com/matplotlib/matplotlib/pull/19279 was a necessary fix in Matplotlib, but this is the same change as https://github.com/readthedocs/sphinx_rtd_theme/commit/24f8e31c5b77131a25e6ed99533a4bbca969b2f0, which was [merged into sphinx_rtd_theme 0.5.1](https://github.com/readthedocs/sphinx_rtd_theme/compare/0.5.0...0.5.1#diff-500f053fcaf0bb11ee9ff8302134207002fdf56a7aedc9f26fa0a86e79540790).\r\n\r\nIdeally, upgrading readthedocs.org's sphinx_rtd_theme should fix it without having to edit templates.",
  "closed_at":"2021-09-07T19:51:43Z",
  "comments":0,
  "created_at":"2021-08-23T22:44:30Z",
  "draft":false,
  "id":977539780,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzE4MjcxMzE5",
  "number":1070,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-07T19:51:43Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Try fixing the search box by upgrading sphinx-rtd-theme.",
  "updated_at":"2021-09-07T19:51:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.4.0\n\n### Description and code to reproduce\n\nGiven this array:\r\n```python3\r\nlayout = ak.layout.ListOffsetArray64(\r\n    ak.layout.Index64(np.r_[0, 1]),\r\n    ak.layout.IndexedArray64(\r\n        ak.layout.Index64(np.r_[0,1,2,3]),\r\n        ak.layout.RegularArray(\r\n            ak.layout.NumpyArray(np.r_[1,2,3,4]),\r\n            4\r\n        )\r\n    )\r\n)\r\narray = ak.Array(layout)\r\n```\r\nthe result of reducing with `mask_identity=False` is an array with an option type:\r\n```pycon\r\n>>> ak.argmin(array, axis=-1, mask_identity=False)\r\n<Array [[0]] type='1 * var * ?int64'>\r\n```\r\n\r\nIf I were to hazard a guess, I suspect it is something to do with the way we handle indexed types vs indexed option types.",
  "closed_at":"2021-09-27T23:04:31Z",
  "comments":1,
  "created_at":"2021-08-24T14:11:20Z",
  "id":978144912,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5NzgxNDQ5MTI=",
  "number":1071,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`mask_identity=False` should never introduce option-types",
  "updated_at":"2021-09-27T23:04:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-09-13T14:41:05Z",
  "comments":6,
  "created_at":"2021-08-24T20:43:14Z",
  "draft":false,
  "id":978469984,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzE5MDUxNjM2",
  "number":1072,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-13T14:41:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: sort",
  "updated_at":"2021-09-13T15:17:29Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":" `Content getitem_next_jagged`\r\n - [x] `NumpyArray._getitem_array_ListOffsetArray`\r\n - [x] `RegularArray._getitem_array_ListOffsetArray`\r\n - [x] `ListArray._getitem_array_ListOffsetArray`\r\n - [x] `ListOffsetArray._getitem_array_ListOffsetArray`\r\n - [x] `RecordArray._getitem_array_ListOffsetArray` \r\n - [x] `IndeedArray._getitem_array_ListOffsetArray`\r\n - [x] `IndeedOptionArray._getitem_array_ListOffsetArray`\r\n - [x] `ByteMaskedArray._getitem_array_ListOffsetArray`\r\n - [x] `BitMaskedArray._getitem_array_ListOffsetArray`\r\n - [x] `UnmaskedArray._getitem_array_ListOffsetArray`\r\n - [x] `UnionArray._getitem_array_ListOffsetArray`\r\n\r\n\r\n `Content getitem_next_missing*`\r\n\r\n - [x] `EmptyArray._getitem_array_IndexedOptionArray`\r\n - [x] `NumpyArray._getitem_array_IndexedOptionArray`\r\n - [x] `RegularArray._getitem_array_IndexedOptionArray`\r\n - [x] `ListArray._getitem_array_IndexedOptionArray`\r\n - [x] `ListOffsetArray._getitem_array_IndexedOptionArray`\r\n - [x] `RecordArray._getitem_array_IndexedOptionArray` \r\n - [x] `IndeedArray._getitem_array_IndexedOptionArray`\r\n - [x] `IndeedOptionArray._getitem_array_IndexedOptionArray`\r\n - [x] `ByteMaskedArray._getitem_array_IndexedOptionArray`\r\n - [x] `BitMaskedArray._getitem_array_IndexedOptionArray`\r\n - [x] `UnmaskedArray._getitem_array_IndexedOptionArray`\r\n - [x] `UnionArray._getitem_array_IndexedOptionArray`\r\n\r\n`Tests`\r\n- [x]  `test_0315-integerindex.py ` \r\n- [x] `test_integerindex_null`\r\n- [x] `test_boolindex_null`\r\n- [x] `test_integerindex_null_more`\r\n- [x]  `test_silly_stuff`\r\n- [x] `test_0499-getitem-indexedarray-bug.py`\r\n- [x] `test`\r\n- [ ]  `test_0111-jagged-and-masked-getitem.py`\r\n- [x] `test_array_slice` \r\n- [x] `test_new_slices` \r\n- [x] `test_missing` \r\n- [x] `test_bool_missing` \r\n- [ ] `test_bool_missing2` \r\n- [x] `test_records_missing` \r\n- [x] `test_jagged` \r\n- [x] `test_double_jagged` \r\n- [x] `test_masked_jagged` \r\n- [x] `test_jagged_masked` \r\n- [x] `test_regular_regular` \r\n- [x] `test_masked_of_jagged_of_whatever` \r\n- [x] `test_emptyarray` \r\n- [x] `test_numpyarray` \r\n- [x] `test_record` \r\n- [x] `test_indexedarray` \r\n- [x] `test_indexedarray2` \r\n- [x] `test_indexedarray2b` \r\n- [x] `test_bytemaskedarray2b` \r\n- [x] `test_bitmaskedarray2b` \r\n- [x] `test_indexedarray3` \r\n- [x] `test_sequential` \r\n- [x] `test_union` \r\n- [x] `test_jagged_mask` \r\n- [x] `test_jagged_missing_mask` \r\n",
  "closed_at":"2021-09-07T00:53:44Z",
  "comments":0,
  "created_at":"2021-08-25T07:55:50Z",
  "draft":false,
  "id":978836869,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzE5MzUyMzk3",
  "number":1073,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-07T00:53:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: handling ListOffsetArray and IndexedOptionArray in _getitem_next",
  "updated_at":"2021-09-07T00:53:45Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjg4Mjg5MDg2",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR implements the `_combinations` function for all the Awkward Array types except `VirtualArray`.\r\n\r\n* `_combinations` implementation\r\n- [x] BitMaskedArray\r\n- [x] ByteMaskedArray\r\n- [x] EmptyArray\r\n- [x] IndexedArray\r\n- [x] IndexedOptionArray\r\n- [x] ListArray\r\n- [x] ListOffsetArray\r\n- [x] NumpyArray\r\n- [x] RecordArray\r\n- [x] RegularArray\r\n- [x] UnionArray\r\n- [x] UnmaskedArray\r\n\r\n* `_combinations` tests\r\n- [x] BitMaskedArray\r\n- [x] ByteMaskedArray\r\n- [x] EmptyArray\r\n- [x] IndexedArray\r\n- [x] IndexedOptionArray\r\n- [x] ListArray\r\n- [x] ListOffsetArray\r\n- [x] NumpyArray\r\n- [x] RecordArray\r\n- [x] RegularArray\r\n- [x] UnionArray\r\n- [x] UnmaskedArray",
  "closed_at":"2021-09-03T16:44:36Z",
  "comments":1,
  "created_at":"2021-08-25T12:45:10Z",
  "draft":false,
  "id":979104661,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzE5NTY2OTMz",
  "number":1074,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-03T16:44:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Implementing combinations",
  "updated_at":"2021-09-03T16:44:37Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.4.0\n\n### Description and code to reproduce\n\nThis is a (superficially) very strange bug.\r\n\r\nI noticed that reducing over a jagged array produced different results according to how the Array was built:\r\n\r\n```pyconthon\r\n>>> X = ak.from_regular(ak.from_numpy(np.array([[0,1,2],[3,2,1]])))\r\n>>> X.layout\r\n<ListOffsetArray64>\r\n    <offsets><Index64 i=\"[0 3 6]\" offset=\"0\" length=\"3\" at=\"0x0000036ea7b0\"/></offsets>\r\n    <content><NumpyArray format=\"l\" shape=\"6\" data=\"0 1 2 3 2 1\" at=\"0x0000036f4570\"/></content>\r\n</ListOffsetArray64>\r\n>>> ak.max(X, axis=-1, keepdims=True)\r\n<Array [[2], [3]] type='2 * 1 * ?int64'>\r\n```\r\nand\r\n```pycon\r\n>>> Y = ak.Array([[0,1,2],[3,2,1]])\r\n>>> Y.layout\r\n<ListOffsetArray64>\r\n    <offsets><Index64 i=\"[0 3 6]\" offset=\"0\" length=\"3\" at=\"0x000003728f00\"/></offsets>\r\n    <content><NumpyArray format=\"l\" shape=\"6\" data=\"0 1 2 3 2 1\" at=\"0x0000037314d0\"/></content>\r\n</ListOffsetArray64>\r\n>>> ak.max(Y, axis=-1, keepdims=True)\r\n<Array [[2], [3]] type='2 * var * ?int64'>\r\n```\r\n\r\nI haven't dug into this too much, but it looks like a bug to me because they layout representation is identical. Clearly, they're not identical, but I suspect something internal that isn't exposed.",
  "closed_at":"2021-12-07T22:34:32Z",
  "comments":6,
  "created_at":"2021-08-25T21:48:20Z",
  "id":979645943,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5Nzk2NDU5NDM=",
  "number":1075,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.from_regular` and `ak.Array` produce distinguishable Arrays",
  "updated_at":"2021-12-07T22:34:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 21.7b0 \u2192 21.8b0](https://github.com/psf/black/compare/21.7b0...21.8b0)\n",
  "closed_at":"2021-08-30T18:53:14Z",
  "comments":0,
  "created_at":"2021-08-30T18:15:14Z",
  "draft":false,
  "id":983067683,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzIyNzA5Njk0",
  "number":1078,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-08-30T18:53:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-08-30T18:53:15Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-09-07T19:48:13Z",
  "comments":2,
  "created_at":"2021-08-31T22:43:35Z",
  "draft":false,
  "id":984395111,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzIzODM0NDM5",
  "number":1079,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-07T19:48:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Implementing VirtualArray in Awkward v2.",
  "updated_at":"2022-09-28T14:07:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Which documentation?\n\nPython docstrings\n\n### What needs to be documented?\n\n`arrays` type in `concatenate` docstring made me guess. Maybe `(iterable)` ? \r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/18ba84ec7101e89fbdadb63b4683ff0025e85d71/src/awkward/operations/structure.py#L1398",
  "closed_at":"2022-12-05T20:34:45Z",
  "comments":2,
  "created_at":"2021-09-02T22:11:31Z",
  "id":987209679,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5ODcyMDk2Nzk=",
  "number":1080,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Use a consistent docstring fragment for all array inputs to ak.* functions",
  "updated_at":"2023-02-15T19:10:58Z",
  "user":"MDQ6VXNlcjEzMjI2NTAw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"To run\r\n```\r\npython dev/generate-tests.py\r\npython -m pytest tests-spec-explicit\r\n```",
  "closed_at":"2021-09-08T17:37:51Z",
  "comments":1,
  "created_at":"2021-09-03T17:52:23Z",
  "draft":false,
  "id":987988719,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzI2OTkzMDA4",
  "number":1081,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-08T17:37:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Data for Remaining Kernel Functions",
  "updated_at":"2021-09-08T17:37:51Z",
  "user":"MDQ6VXNlcjUyNjM1Nzcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- [x] merge_as_union\r\n\r\nmergemany:\r\n- [x] `NumpyArray.mergemany` \r\n- [x]  `RegularArray.mergemany`\r\n- [x] `ListArray.mergemany`\r\n- [x] `ListOffsetArray.mergemany`\r\n- [x] `RecordArray.mergemany` \r\n- [x] `IndexedArray.mergemany`\r\n- [x] `IndexedOptionArray.mergemany`\r\n- [x] `ByteMaskedArray.mergemany`\r\n- [x] `BitMaskedArray.mergemany`\r\n- [x] `UnmaskedArray.mergemany`\r\n- [x] `UnionArray.mergemany`\r\n\r\nmergeable:\r\n- [x] `NumpyArray.mergeable`\r\n- [x] `RegularArray.mergeable`\r\n- [x] `ListArray.mergeable`\r\n- [x] `ListOffsetArray.mergeable`\r\n- [x] `RecordArray.mergeable` \r\n- [x] `IndexedArray.mergeable`\r\n- [x] `IndexedOptionArray.mergeable`\r\n- [x] `ByteMaskedArray.mergeable`\r\n- [x] `BitMaskedArray.mergeable`\r\n- [x] `UnmaskedArray.mergeable`\r\n- [x] `UnionArray.mergeable`\r\n\r\nsimplify:\r\n- [x] `IndexedArray.simplify`\r\n- [x] `IndexedOptionArray.simplify`\r\n- [x] `ByteMaskedArray.simplify`\r\n- [x] `BitMaskedArray.simplify`\r\n- [x] `UnmaskedArray.simplify`\r\n- [x] `UnionArray.simplify`\r\n\r\nmerging_strategy:\r\n- [x] `NumpyArray. merging_strategy` \r\n- [x] `ListArray. merging_strategy`\r\n- [x] `ListOffsetArray. merging_strategy`\r\n- [x] `IndexedArray. merging_strategy`\r\n- [x] `IndexedOptionArray. merging_strategy`\r\n- [x] `UnionArray. merging_strategy`\r\n\r\nreverse_merge:\r\n- [x] `IndexedArray.reverse_merge`\r\n- [x] `IndexedOptionArray.reverse_merge`\r\n- [x] `ByteMaskedArray.reverse_merge`\r\n- [x] `BitMaskedArray.reverse_merge`\r\n- [x] `UnmaskedArray.reverse_merge`\r\n- [x] `UnionArray.reverse_merge`\r\n- [x] `UnionArray.mergeable`\r\n\r\n\r\n",
  "closed_at":"2021-10-15T13:47:50Z",
  "comments":0,
  "created_at":"2021-09-07T08:03:15Z",
  "draft":false,
  "id":989707029,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzI4NDA0NTY1",
  "number":1082,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-15T13:47:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Merge and Simplify Types",
  "updated_at":"2021-10-15T13:47:51Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.4\n\n### Description and code to reproduce\n\nThe following seems like it should work, but does not due to type error on counts:\r\n\r\n```\r\ncounts = ak.Array([0, 1, 2])\r\ndata = ak.Array([1.1, 2.1, 2.2])\r\nprint(counts.type)\r\nak.unflatten(counts, data)\r\n```\r\n\r\nOutput:\r\n```\r\n3 * int64\r\n\r\nValueError: counts must be integers\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.4.0/src/awkward/operations/structure.py#L1988)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-8-bb8eaec2314e> in <module>\r\n      1 # The KDE can deal with numpy, but not with akward, so we have to unfold and refold\r\n----> 2 jet_probs = ak.unflatten(jet_pts.counts, trigger_jet_pt_probabilities_kde(jet_pts.flatten()))\r\n      3 jet_probs[~ good_jet_mask] = 0.0\r\n\r\n/LLPData/gwatts/calratio_abcd_ml/.conda_env/lib/python3.9/site-packages/awkward/operations/structure.py in unflatten(array, counts, axis, highlevel, behavior)\r\n   1985             )\r\n   1986         if not issubclass(counts.dtype.type, np.integer):\r\n-> 1987             raise ValueError(\r\n   1988                 \"counts must be integers\" + ak._util.exception_suffix(__file__)\r\n   1989             )\r\n\r\nValueError: counts must be integers\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.4.0/src/awkward/operations/structure.py#L1988)\r\n```\r\n\r\n",
  "closed_at":"2021-09-07T10:15:12Z",
  "comments":2,
  "created_at":"2021-09-07T10:01:40Z",
  "id":989812911,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5ODk4MTI5MTE=",
  "number":1083,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.unflatten` can't deal with int64 datatype for counts",
  "updated_at":"2021-09-07T10:15:12Z",
  "user":"MDQ6VXNlcjE3NzgzNjY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\nnot sure\n\n### Description and code to reproduce\n\nDiscovered by a student in a course (who was working on Windows). We were going through the bikeroutes example:\r\n\r\n```python\r\nimport awkward as ak\r\nimport urllib\r\nurl = \"https://raw.githubusercontent.com/Chicago/osd-bike-routes/master/data/Bikeroutes.geojson\"\r\nbikeroutes_json = urllib.request.urlopen(url).read()\r\nbikeroutes = ak.from_json(bikeroutes_json)\r\n```\r\n\r\nGave him the following error:\r\n\r\n```\r\nValueError Traceback (most recent call last)\r\n<ipython-input-25-171b38169686> in <module>\r\n----> 1 bikeroutes = ak.from_json(bikeroutes_json)\r\n\r\n~\\Anaconda3\\lib\\site-packages\\awkward\\operations\\convert.py in from_json(source, nan_string, infinity_string, minus_infinity_string, complex_record_fields, highlevel, behavior, initial, resize, buffersize)\r\n1054 is_path, source = ak._util.regularize_path(source)\r\n1055\r\n-> 1056 if os.path.isfile(source):\r\n1057 layout = ak._ext.fromjsonfile(\r\n1058 source,\r\n\r\n~\\Anaconda3\\lib\\genericpath.py in isfile(path)\r\n28 \"\"\"Test whether a path is a regular file\"\"\"\r\n29 try:\r\n---> 30 st = os.stat(path)\r\n31 except OSError:\r\n32 return False\r\n\r\nValueError: stat: path too long for Windows\r\n```\r\n\r\nunfortunately i currently have no windows Installation available to reproduce it",
  "closed_at":"2021-09-27T23:34:51Z",
  "comments":2,
  "created_at":"2021-09-08T08:22:44Z",
  "id":990850868,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5OTA4NTA4Njg=",
  "number":1084,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"\"path too long for Windows\" when calling `ak.from_json` with a long json string on Windows",
  "updated_at":"2021-09-27T23:34:51Z",
  "user":"MDQ6VXNlcjM3MDcyMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"I didn't follow the `isint` / `isstr` convention: I think we should rename those in a subsequent PR",
  "closed_at":"2021-09-27T23:34:51Z",
  "comments":13,
  "created_at":"2021-09-08T11:30:48Z",
  "draft":false,
  "id":991034394,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzI5NTU5MDAy",
  "number":1085,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-27T23:34:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: add utility to check whether a string is a filepath",
  "updated_at":"2021-09-28T09:16:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Add @matthewfeickert as a contributor for maintenance.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward-1.0/pull/988#issuecomment-916251752)",
  "closed_at":"2021-09-09T17:01:17Z",
  "comments":0,
  "created_at":"2021-09-09T16:26:14Z",
  "draft":false,
  "id":992411915,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzMwNzQ4MTQ4",
  "number":1086,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-09T17:01:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add matthewfeickert as a contributor for maintenance",
  "updated_at":"2021-09-09T17:01:18Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Add @bmwiedemann as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward-1.0/pull/1050#issuecomment-916274798)",
  "closed_at":"2021-09-09T18:21:12Z",
  "comments":0,
  "created_at":"2021-09-09T16:59:40Z",
  "draft":false,
  "id":992440191,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzMwNzcyMzQx",
  "number":1087,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-09T18:21:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add bmwiedemann as a contributor for code",
  "updated_at":"2021-09-09T18:21:13Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Add @SantamRC as a contributor for test.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/awkward-1.0/pull/1065#issuecomment-916279102)",
  "closed_at":"2021-09-09T17:25:15Z",
  "comments":0,
  "created_at":"2021-09-09T17:05:44Z",
  "draft":false,
  "id":992445275,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzMwNzc2Nzcx",
  "number":1088,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-09T17:25:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add SantamRC as a contributor for test",
  "updated_at":"2021-09-09T17:25:15Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-09-12T20:19:18Z",
  "comments":4,
  "created_at":"2021-09-12T18:45:20Z",
  "draft":false,
  "id":994230021,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzMyMjA4OTk4",
  "number":1089,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-12T20:19:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Revert 'NumPy' spelling to 'Numpy' in code only.",
  "updated_at":"2021-09-12T20:28:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Fix that was required in conda-forge for the latest release to be deployable for a cross-compiled apple silicon Python 3.9 binary: https://github.com/conda-forge/awkward-feedstock/pull/74\r\n\r\nFailing CI log will be available from [here](https://dev.azure.com/conda-forge/feedstock-builds/_build/results?buildId=375352&view=logs&jobId=253ea3ec-a032-5a61-0d20-dbf0bb326fc2&j=253ea3ec-a032-5a61-0d20-dbf0bb326fc2&t=8f279e6b-1d24-5e23-4618-cb474b6bf3b9) for a a week or so.\r\n\r\n(The CI is still running in conda-forge but once it works I'll unmark as draft)",
  "closed_at":"2021-09-13T14:17:12Z",
  "comments":2,
  "created_at":"2021-09-13T08:45:36Z",
  "draft":false,
  "id":994619659,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzMyNTE5OTYw",
  "number":1091,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-13T14:17:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Respect CMAKE_ARGS if set by the environment",
  "updated_at":"2021-09-13T15:01:11Z",
  "user":"MDQ6VXNlcjUyMjA1MzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-10-06T09:03:30Z",
  "comments":0,
  "created_at":"2021-09-13T15:56:37Z",
  "draft":false,
  "id":995058931,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NzMyODg1OTY5",
  "number":1092,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-06T09:03:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: argsort",
  "updated_at":"2021-10-06T09:03:31Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.5.0\n\n### Description and code to reproduce\n\n#703 fixed `ak.to_arrow()` for `PartitionedArray`, but not `ak.to_arrow_table()`. For example, this part works fine:\r\n\r\n```python\r\n>>> import uproot\r\n>>> import awkward as ak\r\n>>> array = uproot.lazy('scalars_tree_file.root:tree')['int_branch']\r\n>>> array.layout\r\n<IrregularlyPartitionedArray>\r\n    <partition start=\"0\" stop=\"2\">\r\n        <VirtualArray cache_key=\"aec71362-c2dd-11ea-91f6-3b01a8c0beef:/tree;1:int_branch(0):AsDtype(Bi4(),Li4()):0-2:ak\">\r\n            <ArrayGenerator f=\"<bound method TBranch.array of <TBranch 'int_branch' at 0x7f7edec57eb0>>\" args=\"(None, 0, 2, <TrivialExecutor at 0x7f7edecc5b20>, <TrivialExecutor at 0x7f7edecc5550>, None, 'ak')\">\r\n                <length>2</length>\r\n                <form>\r\n                    {\r\n                        \"class\": \"NumpyArray\",\r\n                        \"itemsize\": 4,\r\n                        \"format\": \"i\",\r\n                        \"primitive\": \"int32\"\r\n                    }\r\n                </form>\r\n            </ArrayGenerator>\r\n            <ArrayCache mapping=\"<LRUArrayCache (32/100000000 bytes full) at 0x7...\"/>\r\n            <array><NumpyArray format=\"i\" shape=\"2\" data=\"0 -1\" at=\"0x555df8251c90\"/></array>\r\n        </VirtualArray>\r\n    </partition>\r\n</IrregularlyPartitionedArray>\r\n>>> ak.to_arrow(array)\r\n<pyarrow.lib.ChunkedArray object at 0x7f7edecd1e00>\r\n[\r\n  [\r\n    0,\r\n    -1\r\n  ]\r\n]\r\n```\r\n\r\nBut this doesn't work when going to a table:\r\n\r\n```python\r\n>>> ak.to_arrow_table(array)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/miniconda3/envs/iris-hep/lib/python3.9/site-packages/awkward/operations/convert.py\", line 2578, in to_arrow_table\r\n    batch = pyarrow.RecordBatch.from_arrays(pa_arrays, schema=pyarrow.schema(pa_fields))\r\n  File \"pyarrow/table.pxi\", line 1034, in pyarrow.lib.RecordBatch.from_arrays\r\nTypeError: Cannot convert pyarrow.lib.ChunkedArray to pyarrow.lib.Array\r\n```",
  "closed_at":"2021-12-07T21:23:56Z",
  "comments":2,
  "created_at":"2021-09-13T17:20:57Z",
  "id":995139680,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU5OTUxMzk2ODA=",
  "number":1093,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.to_arrow_table()` fails on `PartitionedArray`s",
  "updated_at":"2021-12-07T21:23:56Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-09-14T13:31:31Z",
  "comments":0,
  "created_at":"2021-09-14T12:51:44Z",
  "draft":false,
  "id":995981893,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4rupJE",
  "number":1094,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-14T13:31:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Little fixes from meeting with @ianna.",
  "updated_at":"2021-09-14T13:31:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-09-28T18:08:09Z",
  "comments":1,
  "created_at":"2021-09-14T22:44:31Z",
  "draft":true,
  "id":996498089,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4rwUQV",
  "number":1095,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Prepare Awkward for Dask (kernel-level DAG)",
  "updated_at":"2021-11-02T22:00:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Description of new feature\n\nHi, \r\n\r\nI am trying to make a simple 2D histogram\r\n\r\n```python\r\nfNtuple = uproot.open('nTuple_GGJets_Pt-15_13TeV-sherpa_evt71999.root')\r\ntree = fNtuple['demo/EventTree']\r\nbranches = tree.arrays()\r\n\r\nimport matplotlib.pyplot as plt\r\nimport awkward as ak\r\n\r\nplt.hist2d(ak.flatten(branches['phoSCEta']),ak.flatten(branches['phoSCPhi']),bins=150)\r\nplt.subtitle('Photon location',fontsize=16)\r\nplt.xlabel('$\\eta$');\r\nplt.ylabel('$\\phi$');\r\n```\r\nBut I could not find a solution from the documentation or the other issues\r\n```\r\nTypeError: no implementation found for 'numpy.histogram2d' on types that implement __array_function__: [<class 'awkward.highlevel.Array'>]\r\n```\r\nDoes anyone know if there is already an existing implementation that could be used?\r\nIn case you need the root file: https://drive.google.com/drive/folders/1MAMUybsbuSbJWhCP12dcTRrjUQNwVgGi",
  "closed_at":"2021-09-15T14:22:02Z",
  "comments":3,
  "created_at":"2021-09-15T12:10:39Z",
  "id":997008452,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws47bSRE",
  "number":1096,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"'numpy.histogram2d' implementation for awkward.highlevel.Array",
  "updated_at":"2021-09-15T14:22:04Z",
  "user":"MDQ6VXNlcjEyODI4OTk1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"## ak.to_parquet should accept a generator to make row groups\r\n\r\n### Description of new feature\r\n\r\nThe first thing it should check is to see if `arrays` is an iterator/generator but not a generic iterable\u2014i.e. the data are _not_ concrete\u2014and if so, do something like\r\n\r\n```python\r\nactually_a_generator = arrays\r\narrays = ak.partitioned(ak.virtual(lambda: next(actually_a_generator), cache=None))\r\n```\r\n\r\nso that the Parquet file will be written with each \"`yield`\" of the generator as another row group (so that it doesn't have to be in memory all at once). Users will have to circumlocute to produce data in this form, but it's more Pythonic/less surprising than expecting them to come up with the partitioned-virtual form.\r\n\r\nEventually, users will probably want an interface like Uproot's TTree writing: open a file-like object and keep adding row groups until done, then close it. That would require a new object and it would be super-important that users put it in a `with` block (because Parquet's metadata _starts_ in its footer, so that absolutely must be written), but this imperative code organization is more familiar to more people than the Javascript-like async-like way of \"make an iterator and pass it to this function\" (which is nevertheless cleaner, since it guarantees that the footer gets written without any `with` statement...)\r\n\r\n## ak.to_parquet should have better defaults, such as use_byte_stream_split != False\r\n\r\n### Description of new feature\r\n\r\nAfter gaining some experience with the format, it's clear that float-point data should use `use_byte_stream_split` wherever possible. Unfortunately, that not only defaults to False in `parquet.pyarrow.ParquetWriter`, but to use it, one must explicitly specify all of the floating point fields. `ak.to_parquet` should have a default `use_byte_stream_split=True` and make the list of floating point columns at around the time that it makes the schema, as all of that data would be available then.\r\n\r\nAlso, `ak.to_parquet` should default to `use_dictionary=False`. Maybe a similar crawl, looking for `__array__: \"categorical\"` fields, can be used to specify dictionary-encoding for the very few fields in which it would be beneficial.\r\n\r\nAdditionally, the `data_page_size`, `compression`, and `compression_level` fields should be highlighted in the documentation, instead of leaving it to the user to discover these options in pyarrow's documentation. We might want to pick ZSTD level 9 as a default. (Maybe a lower level?) Though highlighted in the documentation, `data_page_size`'s default of 1 MiB should not be overridden.\r\n",
  "closed_at":"2022-10-31T20:46:20Z",
  "comments":1,
  "created_at":"2021-09-15T15:46:37Z",
  "id":997241282,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws47cLHC",
  "number":1097,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Implement ak.to_parquet for v2",
  "updated_at":"2022-10-31T20:46:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### Description of new feature\n\nAfter gaining some experience with the format, it's clear that float-point data should use `use_byte_stream_split` wherever possible. Unfortunately, that not only defaults to False in `parquet.pyarrow.ParquetWriter`, but to use it, one must explicitly specify all of the floating point fields. `ak.to_parquet` should have a default `use_byte_stream_split=True` and make the list of floating point columns at around the time that it makes the schema, as all of that data would be available then.\r\n\r\nAlso, `ak.to_parquet` should default to `use_dictionary=False`. Maybe a similar crawl, looking for `__array__: \"categorical\"` fields, can be used to specify dictionary-encoding for the very few fields in which it would be beneficial.\r\n\r\nAdditionally, the `data_page_size`, `compression`, and `compression_level` fields should be highlighted in the documentation, instead of leaving it to the user to discover these options in pyarrow's documentation. We might want to pick ZSTD level 9 as a default. (Maybe a lower level?) Though highlighted in the documentation, `data_page_size`'s default of 1 MiB should not be overridden.\r\n",
  "closed_at":"2022-04-15T19:27:33Z",
  "comments":1,
  "created_at":"2021-09-15T15:55:00Z",
  "id":997249926,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws47cNOG",
  "number":1098,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.to_parquet should have better defaults, such as use_byte_stream_split != False",
  "updated_at":"2022-04-15T19:27:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"address https://github.com/scikit-hep/awkward-1.0/projects/4#card-68315181",
  "closed_at":"2021-09-30T12:22:45Z",
  "comments":10,
  "created_at":"2021-09-17T15:11:17Z",
  "draft":false,
  "id":999462118,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4r5ZaC",
  "number":1099,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-30T12:22:45Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: reducers",
  "updated_at":"2021-09-30T12:22:46Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-09-23T20:38:38Z",
  "comments":0,
  "created_at":"2021-09-20T10:49:19Z",
  "draft":false,
  "id":1000823421,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4r9LTL",
  "number":1101,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-23T20:38:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ Refactoring: Implement validityerror for all array types.",
  "updated_at":"2021-09-23T20:38:39Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 21.8b0 \u2192 21.9b0](https://github.com/psf/black/compare/21.8b0...21.9b0)\n",
  "closed_at":"2021-09-27T19:33:05Z",
  "comments":0,
  "created_at":"2021-09-20T18:35:39Z",
  "draft":false,
  "id":1001274554,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4r-mez",
  "number":1102,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-27T19:33:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-09-27T19:33:06Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Description of new feature\n\nThe current implementation shows awkward instances (principally arrays) as blocks of XML. Since a lot of usage will be via notebooks, it would be very helpful to provide a visual layout, including expandable sections. The dask project has undertaken such work over the last couple of years, and users of, for example, the array API have found it to be very useful.",
  "closed_at":null,
  "comments":4,
  "created_at":"2021-09-21T14:48:07Z",
  "id":1002637310,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws47wwf-",
  "number":1103,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"HTML repr for awkward instances",
  "updated_at":"2024-01-20T21:47:00Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Description of new feature\n\nReduce array elements to unique along a specific axis, similar to [`numpy.unique`][npunique], but preserving dimensions:\r\n\r\n```\r\nx = awkward.Array([[1,1,2,3,],[4,5,5]])\r\ny = awkward.unique(x, axis=-1)\r\n# y = [[1,2,3],[4,5]]\r\n```\r\n\r\n[npunique]: https://numpy.org/doc/stable/reference/generated/numpy.unique.html",
  "closed_at":null,
  "comments":5,
  "created_at":"2021-09-22T14:24:52Z",
  "id":1004364060,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws473WEc",
  "number":1104,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Reduction to unique elements",
  "updated_at":"2024-01-20T20:18:49Z",
  "user":"MDQ6VXNlcjExNzAzNjQ0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Description of new feature\n\nIt would be nice to have convenience functions for asserting the equivalence of ak arrays.\r\n\r\nWe can compare an array's:\r\n- values\r\n- type (i.e., datashape description)\r\n- form (including lengths of sub structures, if known)\r\n\r\nCurrently, tests tend to compare via `.tolist()` (resulting in python lists and dicts) which can compare the array values. The result of ak.type is already comparable. There are, however, well-defined rules of whether an array can be considered equal as a whole to another array.\r\n\r\nNote that this is not the same as `__eq__`, which is an element-wise operation.",
  "closed_at":null,
  "comments":12,
  "created_at":"2021-09-23T14:50:01Z",
  "id":1005527533,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws477yHt",
  "number":1105,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"open",
  "state_reason":"reopened",
  "title":"ak.array_equal to override np.array_equal",
  "updated_at":"2023-02-03T22:19:37Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.5.0\n\n### Description and code to reproduce\n\nConsider\r\n```python3\r\n>>> x = ak.Array([1, 2, 3, None, 4])\r\n>>> ak.argmax(x)\r\n3\r\n```\r\n\r\nWhat is happening is that `ak._util.completely_flatten` is dropping the `None` values, consequently shifting the position of the elements before calling `np.argmax`.\r\n",
  "closed_at":"2021-11-17T16:24:20Z",
  "comments":3,
  "created_at":"2021-09-24T13:23:04Z",
  "id":1006462782,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws47_Wc-",
  "number":1106,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`argmax` and `argmin` give incorrect results on option types when `axis=None`",
  "updated_at":"2021-11-17T16:24:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\n1.5.0\r\n\r\n### Description and code to reproduce\r\n\r\nHi,\r\n\r\nI'm trying to read a parquet file using python 3.8 with a map column and it fails with `ValueError`:\r\n\r\n```py\r\nimport pandas as pd\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\nimport awkward as ak\r\n\r\nprint(f\"Pandas: {pd.__version__}\")\r\nprint(f\"Pyarrow: {pa.__version__}\")\r\nprint(f\"Awkward: {ak.__version__}\")\r\n\r\ndf = pd.DataFrame({\r\n        'col1': pd.Series([\r\n            [('key', 'aaaa'), ('value', '1111')],\r\n            [('key', 'bbbb'), ('value', '2222')],\r\n        ]),\r\n        'col2': pd.Series(['foo', 'bar'])\r\n    }\r\n)\r\n\r\nudt = pa.map_(pa.string(), pa.string())\r\nschema = pa.schema([pa.field('col1', udt), pa.field('col2', pa.string())])\r\n\r\ntable = pa.Table.from_pandas(df, schema)\r\npq.write_table(table, \"/tmp/map.parquet\")\r\n\r\nak.from_parquet(\"/tmp/map.parquet\")\r\n```\r\n\r\n> Pandas: 1.3.3 \r\n> Pyarrow: 5.0.0\r\n> Awkward: 1.5.0\r\n> ValueError: cannot create an OBJECT array from memory buffer\r\n\r\nUsing Pandas and Arrow directly doesn't cause the error:\r\n\r\n```py\r\npd.read_parquet(\"/tmp/map.parquet\")\r\npa.from_parquet(\"/tmp/map.parquet\").to_pandas()\r\n```",
  "closed_at":"2021-09-27T22:00:55Z",
  "comments":2,
  "created_at":"2021-09-24T14:50:38Z",
  "id":1006546826,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws47_q-K",
  "number":1107,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ValueError: cannot create an OBJECT array from memory buffer",
  "updated_at":"2021-09-27T22:00:55Z",
  "user":"MDQ6VXNlcjkyMzk2Mw=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-09-27T23:04:32Z",
  "comments":1,
  "created_at":"2021-09-27T22:23:57Z",
  "draft":false,
  "id":1008714995,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4sV37k",
  "number":1108,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-27T23:04:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed #1071: mask_identity=False should not return option type.",
  "updated_at":"2021-09-27T23:04:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"\"The Good Parts\" of #1095, which I'm closing.",
  "closed_at":"2021-09-28T18:47:42Z",
  "comments":0,
  "created_at":"2021-09-28T18:05:24Z",
  "draft":false,
  "id":1010054181,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4saI2i",
  "number":1109,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-09-28T18:47:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: \"The Good Parts\" of #1095, which I'm closing.",
  "updated_at":"2021-11-02T22:00:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-10-12T12:40:44Z",
  "comments":4,
  "created_at":"2021-10-05T20:32:49Z",
  "draft":false,
  "id":1016797382,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4suCxC",
  "number":1110,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-12T12:40:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Implemented the type tracer for Awkward-Dask.",
  "updated_at":"2021-11-02T22:00:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-09T15:51:37Z",
  "comments":3,
  "created_at":"2021-10-06T15:09:59Z",
  "draft":false,
  "id":1018530934,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4s0DxP",
  "number":1111,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-09T15:51:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: unique and is_unique",
  "updated_at":"2021-11-09T15:51:37Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/PyCQA/flake8: 3.9.2 \u2192 4.0.1](https://github.com/PyCQA/flake8/compare/3.9.2...4.0.1)\n",
  "closed_at":"2021-10-11T19:49:34Z",
  "comments":0,
  "created_at":"2021-10-11T18:27:26Z",
  "draft":false,
  "id":1022999235,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tCHgE",
  "number":1112,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-11T19:49:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-10-11T19:49:35Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.5.0\n\n### Description and code to reproduce\n\nFor example:\r\n```python\r\n>>> a = ak.with_parameter(ak.Array([1, 2, 3]), \"metadata\", {\"thing\": 1.234})\r\n>>> a.layout.form\r\n{\r\n    \"class\": \"NumpyArray\",\r\n    \"itemsize\": 8,\r\n    \"format\": \"l\",\r\n    \"primitive\": \"int64\",\r\n    \"parameters\": {\r\n        \"metadata\": {\r\n            \"thing\": 1\r\n        }\r\n    }\r\n}\r\n>>> a.layout.parameter(\"metadata\")\r\n{'thing': 1.234}\r\n```\r\nthe form's parameters has turned `1.234` into an integer.\r\nSurprisingly, a rountrip with buffers preserves the float:\r\n```python\r\n>>> ak.to_buffers(a)\r\n({\r\n    \"class\": \"NumpyArray\",\r\n    \"itemsize\": 8,\r\n    \"format\": \"l\",\r\n    \"primitive\": \"int64\",\r\n    \"parameters\": {\r\n        \"metadata\": {\r\n            \"thing\": 1\r\n        }\r\n    },\r\n    \"form_key\": \"node0\"\r\n}, 3, {'part0-node0-data': array([1, 2, 3])})\r\n>>> ak.from_buffers(*ak.to_buffers(a))\r\n<Array [1, 2, 3] type='3 * int64[parameters={\"metadata\": {\"thing\": 1.234}}]'>\r\n```\r\nthough if I convert the form to json and back then it shows the loss of data:\r\n```python\r\n>>> from awkward.forms import Form\r\n>>> form, length, container = ak.to_buffers(a)\r\n>>> form = Form.fromjson(form.tojson())\r\n>>> ak.from_buffers(form, length, container)\r\n<Array [1, 2, 3] type='3 * int64[parameters={\"metadata\": {\"thing\": 1}}]'>\r\n```",
  "closed_at":"2021-10-14T20:03:19Z",
  "comments":2,
  "created_at":"2021-10-14T18:08:25Z",
  "id":1026678274,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws49Md4C",
  "number":1113,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Form parameters cannot be float",
  "updated_at":"2021-10-14T20:03:19Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-10-14T20:03:20Z",
  "comments":0,
  "created_at":"2021-10-14T18:35:25Z",
  "draft":false,
  "id":1026701770,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tN1WE",
  "number":1114,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-14T20:03:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes copyjson casting bug.",
  "updated_at":"2021-10-14T20:03:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"project():\r\n\r\n- [x] bitmaskedarray\r\n- [x] bytemaskedarray\r\n- [x] unmaskedarray\r\n- [x] indexedarray\r\n- [x] indexedoptionarray\r\n- [x] testing",
  "closed_at":"2021-10-18T19:38:29Z",
  "comments":1,
  "created_at":"2021-10-15T15:27:43Z",
  "draft":false,
  "id":1027555825,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tQfyT",
  "number":1116,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-18T19:38:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: project - bit/byte/unmaskedarray",
  "updated_at":"2021-10-18T19:38:30Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-10-18T16:01:07Z",
  "comments":0,
  "created_at":"2021-10-18T15:23:45Z",
  "draft":false,
  "id":1029270382,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tVcgm",
  "number":1117,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-18T16:01:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Move v2 tests into their own directory.",
  "updated_at":"2021-11-02T22:00:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-10-18T16:35:49Z",
  "comments":0,
  "created_at":"2021-10-18T15:53:06Z",
  "draft":false,
  "id":1029302696,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tViuQ",
  "number":1118,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-18T16:35:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Prepare the 1.7.0 deprecation (ak.fill_none default axis).",
  "updated_at":"2021-10-18T16:35:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is the PR to reverse if we decide that we do need VirtualArray, after all. (And then we'd have to add PartitionedArray, I guess.)",
  "closed_at":"2021-10-18T18:28:26Z",
  "comments":0,
  "created_at":"2021-10-18T17:48:53Z",
  "draft":false,
  "id":1029417554,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tV5US",
  "number":1119,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-18T18:28:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Remove v2 VirtualArray (to try using Dask only).",
  "updated_at":"2021-11-02T22:00:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-10-18T22:50:21Z",
  "comments":1,
  "created_at":"2021-10-18T20:08:07Z",
  "draft":false,
  "id":1029545609,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tWSv5",
  "number":1120,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-18T22:50:21Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Enable codecov.",
  "updated_at":"2021-11-02T22:00:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-10-19T20:11:31Z",
  "comments":1,
  "created_at":"2021-10-19T16:36:57Z",
  "draft":false,
  "id":1030523887,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tZTy7",
  "number":1121,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-19T20:11:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Stubs for high-level interface in the src/awkward/_v2 directory.",
  "updated_at":"2021-11-02T22:00:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-10-21T22:27:41Z",
  "comments":1,
  "created_at":"2021-10-19T22:50:55Z",
  "draft":false,
  "id":1030806377,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4taMpj",
  "number":1122,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-21T22:27:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Working on the high-level ak.Array for v2.",
  "updated_at":"2021-11-02T21:59:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-10-22T18:27:40Z",
  "comments":2,
  "created_at":"2021-10-22T17:30:50Z",
  "draft":false,
  "id":1033806830,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tj6uR",
  "number":1123,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-22T18:27:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Renamed record 'key' -> 'field' to be consistent with high-level.",
  "updated_at":"2021-11-02T21:59:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"By replacing a lot of v1 idioms with v2 idioms in the commented-out code, a v1 idiom is less likely to be copy-pasted into the new high-level v2 code. (The commented-out blocks are intended as a guide.)\r\n\r\nThere's still work to do, like removing references to VirtualArray and PartitionedArray, replacing if-elif-else chains with Content methods where possible (where single-dispatch allows it\u2014functions of only one array argument), some function and method name changes, etc. But with this PR, that future work should proceed more quickly.",
  "closed_at":"2021-10-22T22:28:51Z",
  "comments":1,
  "created_at":"2021-10-22T21:53:20Z",
  "draft":false,
  "id":1033972853,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tkc6Q",
  "number":1124,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-10-22T22:28:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: Make the commented-out code in v2 a better guide.",
  "updated_at":"2021-11-02T21:59:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"As part of this, I'm using Arrow's ExtensionType to add metadata so that Awkward \u2192 Arrow \u2192 Awkward conversions are fully round-trip. That is,\r\n\r\n   * never lose option-type, even if an array is not nested within another (corner case of Arrow's nullable-handling)\r\n   * never lose any parameters; they get JSON-encoded\r\n\r\nAs long as `register_extension_type` is called before opening a file (i.e. the new `ak.from_parquet` uses `ak._v2._connect.pyarrow.import_pyarrow_parquet` as it should), all Awkward metadata will be round-trippable through Parquet, too.",
  "closed_at":"2021-11-02T22:34:07Z",
  "comments":3,
  "created_at":"2021-10-25T21:00:06Z",
  "draft":false,
  "id":1035567940,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4tpcjM",
  "number":1125,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-02T22:34:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: to_arrow and from_arrow in v2",
  "updated_at":"2021-11-02T22:34:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Description of new feature\r\n\r\nAs discussed in the Awkward-Dask meeting, it would be useful (both for v2 and for Dask) to allow other libraries to share the Awkward high-level API with alternative array class implementations. \r\n\r\nWe suggested closely following the [NEP18 specification](https://numpy.org/neps/nep-0018-array-function-protocol.html), but with a different name: `__awkward_function__`.\r\n\r\nAdditionally, perhaps we would want to implement an `__awkward_array__` interface, like `__array__`, to allow third-party libraries to define conversion routines from their array types to Awkward.",
  "closed_at":"2024-01-20T00:54:22Z",
  "comments":5,
  "created_at":"2021-10-28T14:37:56Z",
  "id":1038598690,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4958Ii",
  "number":1126,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Implement `__awkward_function__` and `__awkward_array__` protocols",
  "updated_at":"2024-01-20T18:32:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\r\n\r\n1.5.1\r\n\r\n### Python version\r\n\r\nPython 3.6 and 3.8\r\n\r\n### OS\r\n\r\nUbuntu 18.04 and macOS Big Sur\r\n\r\n### Problem\r\n\r\nUsing `ak.Array` causes memory to be leaked. The following program causes the memory (RAM) consumption to grow indefinitely\r\n\r\n```\r\nimport awkward as ak\r\n\r\nwhile True:\r\n    ak.Array([1])\r\n```\r\n\r\nyes, that is the whole program.\r\n\r\n\r\n### Rate of leakage\r\n\r\nMemory increase can be tracked with utilities (e.g. htop) or from Python itself. Using `psutil`, memory usage in megabytes can be printed with the following code\r\n\r\n```\r\nimport os\r\n\r\nimport awkward as ak\r\nimport psutil\r\n\r\n\r\nprocess = psutil.Process(os.getpid())\r\n\r\nwhile True:\r\n    ak.Array([1])\r\n\r\n    usage = process.memory_info().rss / 1000 / 1000\r\n    print(usage)\r\n```\r\n\r\nwhich (for me) shows a steady RAM usage increase at a rate of about 2 MB/s.\r\n\r\nI briefly tried to find the cause for this with various memory-profiling tools but could not find the cause (I tried three tools and none of them even saw any change in object counts/sizes)\r\n\r\n## Expected behavior\r\n\r\nI see no good reason for why this should be happening, I would expect `ak.Array` to cause no memory leakage.",
  "closed_at":"2023-03-17T11:44:37Z",
  "comments":10,
  "created_at":"2021-10-29T14:53:03Z",
  "id":1039651956,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4999R0",
  "number":1127,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Massive memory leak with awkward.Array",
  "updated_at":"2023-03-17T11:44:37Z",
  "user":"MDQ6VXNlcjI5MzU0OTE0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 21.9b0 \u2192 21.10b0](https://github.com/psf/black/compare/21.9b0...21.10b0)\n",
  "closed_at":"2021-11-04T19:05:48Z",
  "comments":2,
  "created_at":"2021-11-01T19:08:43Z",
  "draft":false,
  "id":1041499516,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4t8Ypv",
  "number":1128,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-04T19:05:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-11-04T19:05:48Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The code update is the same as 477581d9937776a9fa984a5c278d1eccf14f25d6 and the test update is the same as 1a446ab5f865f68f529fdf9195e087808622c294, just to get the tests to pass with Arrow and Numba updates.\r\n\r\nHopefully, the new Windows VM won't cause any trouble.",
  "closed_at":"2021-11-02T23:09:34Z",
  "comments":1,
  "created_at":"2021-11-02T22:13:43Z",
  "draft":false,
  "id":1042897843,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uAbXu",
  "number":1129,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-02T23:09:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Update Azure Pipeline's Windows VM image and adapt to Arrow and Numba updates.",
  "updated_at":"2021-11-02T23:09:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-03T16:02:07Z",
  "comments":5,
  "created_at":"2021-11-03T06:35:44Z",
  "draft":false,
  "id":1043132464,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uBL-k",
  "number":1130,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-03T16:02:07Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: 'simplify_uniontype' only in UnionArray",
  "updated_at":"2021-11-03T16:02:08Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-11-03T15:39:13Z",
  "comments":1,
  "created_at":"2021-11-03T14:52:23Z",
  "draft":false,
  "id":1043701925,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uCseT",
  "number":1131,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-03T15:39:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: High-level to/from_arrow functions for v2.",
  "updated_at":"2021-11-03T15:48:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-11-04T18:25:13Z",
  "comments":2,
  "created_at":"2021-11-03T15:47:31Z",
  "draft":false,
  "id":1043766522,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uC5uZ",
  "number":1132,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-04T18:25:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: utility methods for high-level functions in v2.",
  "updated_at":"2021-11-04T18:25:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"NONE",
  "body":"### Description of new feature\r\n\r\nThis was bugging me for an hour or so, until I realised that it has to do with the order of tests executed `;)`\r\n\r\nI have a function which I need to make compatible with Numba so that it can accept single values (Integers) or an array of integers. Luckily there is `@nb.vectorize` since type checking (e.g. via `isinstance`) is not possible inside Numba-JITted functions and doing it outside is not an option either since I want this function to be generally compatible in a Numba context.\r\n\r\nLong story short, the MWE is pretty simple:\r\n\r\n```python\r\nimport numba as nb\r\nimport numpy as np\r\nimport awkward as ak\r\n\r\n@nb.vectorize\r\ndef f(x):\r\n    return x\r\n```\r\n\r\nWhich will fail with\r\n\r\n```python\r\n>>> f(ak.Array([1,2,3]))\r\n...\r\n...\r\n...\r\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nnon-precise type pyobject\r\nDuring: typing of argument at /var/folders/84/mcvklq757tq1nfrkbxvvbq8m0000gn/T/ipykernel_92463/551455230.py (3)\r\n\r\nFile \"../../../../var/folders/84/mcvklq757tq1nfrkbxvvbq8m0000gn/T/ipykernel_92463/551455230.py\", line 3:\r\n<source missing, REPL/exec in use?>\r\n```\r\n\r\nbut successfully compile and work with\r\n\r\n```python\r\n>>> f(np.array([1,2,3]))\r\n```\r\n\r\nand eventually (once it ran with a `np.array` instance) work with Awkward\r\n\r\n```python\r\n>>> f(ak.Array([1,2,3]))\r\n```\r\n\r\nThis means that only the type inference stage in Numba failed, however, once it was able to figure it out with a Numpy array, it understood that the Awkward array has the same type and run the correct compiled (and cached) function.\r\n\r\nIf I call `f` again with a yet unseen Awkward type:\r\n\r\n```python\r\n>>> f(ak.values_astype(ak.Array([1,2,3]), \"float\"))\r\n```\r\n\r\nI get the same inference error, which can be again fixed by calling it with a similar Numpy array type:\r\n\r\n```python\r\n>>> f(np.array([1,2,3], dtype=\"float\"))\r\n```\r\n\r\nMy current workaround now is a call with a Numpy array for the expected types right after the function definition.",
  "closed_at":"2024-01-20T00:56:33Z",
  "comments":12,
  "created_at":"2021-11-04T14:41:59Z",
  "id":1044838326,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4-Rve2",
  "number":1133,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Support nb.vectorize without type annotations",
  "updated_at":"2024-01-20T00:56:33Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-11-11T00:24:41Z",
  "comments":2,
  "created_at":"2021-11-04T22:04:52Z",
  "draft":false,
  "id":1045253599,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uHlcP",
  "number":1134,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-11T00:24:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: to_buffers and from_buffers",
  "updated_at":"2021-11-11T00:24:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This PR adds the `rpad` and `rpad_and_clip` funtions to `content.py`. Internally, these two have been morphed into a single function `_rpad` with an additional parameter `clip`. Two kernels were replaced with their `nplike` alternatives.",
  "closed_at":"2021-11-09T17:32:23Z",
  "comments":2,
  "created_at":"2021-11-08T05:55:51Z",
  "draft":false,
  "id":1047047838,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uNM38",
  "number":1135,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-09T17:32:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ Refactoring: Implement rpad and rpad_and_clip",
  "updated_at":"2021-11-09T17:32:24Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.5.1\n\n### Description and code to reproduce\n\nEmpty arrays (with structure but no contents) are not well behaved with respect to `ak.zip`:\r\n```python3\r\n>>> x = ak.from_numpy(np.arange(2*3*4).reshape(2, 3, 4))\r\n>>> s = x[..., :0]\r\n>>> ak.zip(\r\n    {\r\n        \"q\": s,\r\n        \"t\": s,\r\n    }\r\n)\r\n<Array [] type='0 * 3 * 0 * {\"q\": int64, \"t\": int64}'>\r\n```\r\n\r\nI would expect to see `<Array [] type='2 * 3 * 0 * {\"q\": int64, \"t\": int64}'>`.\r\n",
  "closed_at":"2021-12-08T17:54:05Z",
  "comments":2,
  "created_at":"2021-11-08T19:34:14Z",
  "id":1047843122,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4-dNEy",
  "number":1136,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Empty arrays do not produce valid layouts when zipped together",
  "updated_at":"2021-12-08T17:54:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-11T16:46:44Z",
  "comments":1,
  "created_at":"2021-11-09T10:09:13Z",
  "draft":false,
  "id":1048417647,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uRpxe",
  "number":1137,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-11T16:46:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: num()",
  "updated_at":"2021-11-11T16:46:44Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-12T16:04:57Z",
  "comments":6,
  "created_at":"2021-11-09T13:14:29Z",
  "draft":false,
  "id":1048593352,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uSOyQ",
  "number":1138,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-12T16:04:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: nbytes",
  "updated_at":"2021-11-12T16:04:57Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"NONE",
  "body":"### Which documentation?\n\nPython docstrings\n\n### What needs to be documented?\n\nI am wondering if I can use the awkward arrays on GPUs similar to dataframes or numpy arrays, (provided by rapids.ai and other tools). I came across this link\r\nhttps://awkward-array.org/how-to-math-gpu.html\r\n\r\nbut it seems to be not in priority list. I just wanted to check if an implementation already exists. In case yes, an example will be really useful. \r\n\r\nThanks. ",
  "closed_at":null,
  "comments":2,
  "created_at":"2021-11-09T22:00:13Z",
  "id":1049161947,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4-iPDb",
  "number":1139,
  "performed_via_github_app":null,
  "reactions":{
   "eyes":1,
   "total_count":1
  },
  "state":"open",
  "state_reason":null,
  "title":"How to use Awkward Arrays on GPUs",
  "updated_at":"2024-01-20T00:55:07Z",
  "user":"MDQ6VXNlcjQ5OTY2MDk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-10T18:53:46Z",
  "comments":3,
  "created_at":"2021-11-10T08:17:10Z",
  "draft":false,
  "id":1049522286,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uVSKl",
  "number":1140,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-10T18:53:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: argsort - remove workaround, use merge",
  "updated_at":"2021-11-10T18:53:47Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-10T14:15:04Z",
  "comments":1,
  "created_at":"2021-11-10T09:00:32Z",
  "draft":false,
  "id":1049561889,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uVag7",
  "number":1141,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-10T14:15:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: UnionArray argsort and sort and enable tests",
  "updated_at":"2021-11-10T14:15:05Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-12T20:18:58Z",
  "comments":6,
  "created_at":"2021-11-10T15:04:13Z",
  "draft":false,
  "id":1049938706,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uWpUV",
  "number":1142,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-12T20:18:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: prepared high-level ArrayBuilder and reducer functions, though still untested.",
  "updated_at":"2021-11-15T09:33:12Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-11-12T00:10:55Z",
  "comments":1,
  "created_at":"2021-11-11T23:03:27Z",
  "draft":false,
  "id":1051430390,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4ubgFW",
  "number":1143,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-12T00:10:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: NumPy ufuncs for v2.",
  "updated_at":"2021-11-12T00:10:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"NONE",
  "body":"I looked up awkward array documentation (https://awkward-array.org/quickstart.html), but many are labeled [to do]. Can someone fill it up? For example, I tried to understand how to filter array but found the corresponding documentation missing. Many thanks.\r\n\r\n\r\n\r\n",
  "closed_at":null,
  "comments":1,
  "created_at":"2021-11-12T10:46:57Z",
  "id":1051825563,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4-sZWb",
  "number":1144,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Documentation",
  "updated_at":"2024-01-20T00:57:05Z",
  "user":"MDQ6VXNlcjQyNzg4NTI4"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-18T14:15:00Z",
  "comments":1,
  "created_at":"2021-11-12T11:07:31Z",
  "draft":false,
  "id":1051848441,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4ucztw",
  "number":1145,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-18T14:15:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: numbers_to_type()",
  "updated_at":"2021-11-18T14:15:00Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Rather than as dicts. This allows for datetime64 and timedelta64 to have arbitrary units.",
  "closed_at":"2021-11-12T17:13:40Z",
  "comments":1,
  "created_at":"2021-11-12T16:28:24Z",
  "draft":false,
  "id":1052148614,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4udxTM",
  "number":1146,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-12T17:13:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"primitive_to_dtype and dtype_to_primitive as functions.",
  "updated_at":"2021-11-12T17:13:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-18T14:28:29Z",
  "comments":1,
  "created_at":"2021-11-14T10:37:41Z",
  "draft":false,
  "id":1052904809,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4ufshA",
  "number":1147,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-18T14:28:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: fillna() operation",
  "updated_at":"2021-11-18T14:28:30Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-22T17:00:36Z",
  "comments":1,
  "created_at":"2021-11-14T22:28:51Z",
  "draft":false,
  "id":1053058407,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4ugIi6",
  "number":1148,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-22T17:00:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: flatten()",
  "updated_at":"2021-11-22T17:00:37Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- [x] test reducers on `datetime` and `timedelta` at axis `None`\r\n\r\n- [x] `sort` and `argsort` `datetime` and `timedelta` types\r\n\r\n- [x] `unique` and `is_unique` for `datetime` and `timedelta` types\r\n",
  "closed_at":"2021-11-15T16:19:04Z",
  "comments":9,
  "created_at":"2021-11-15T10:47:01Z",
  "draft":false,
  "id":1053511994,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uhm1O",
  "number":1149,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-15T16:19:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: handle datetime and timedelta",
  "updated_at":"2021-11-15T16:19:05Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"- [x] reducers support complex numbers and tests\r\n- [x] to_numpy and tests\r\n- [x] validity error enabled and tests\r\n- [x] tests for highlevel reducers enabled",
  "closed_at":"2021-11-17T18:31:47Z",
  "comments":5,
  "created_at":"2021-11-16T07:42:27Z",
  "draft":false,
  "id":1054552920,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uk0Gj",
  "number":1150,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-17T18:31:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: to_numpy()",
  "updated_at":"2021-11-17T18:31:48Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.5.1\n\n### Description and code to reproduce\n\nI use the `LorentzVector` behavior implemented in `coffea`. When using `ak.where` to choose between two arrays of lorentz vectors, the resulting array seems to lose its behavior. Setting the behavior manually (using `arr.behavior`) does not seem to fix this. See the attached code for a reproducible example.\r\n\r\n```\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nfrom coffea.nanoevents.methods import vector\r\n\r\nN = 10\r\n\r\n# Producing some random Lorentz vector arrays\r\nv1 = ak.Array({\r\n        \"x\": np.random.normal(size=N), \"y\": np.random.normal(size=N), \"z\": np.random.normal(size=N),\r\n        \"t\": np.random.normal(size=N)}, with_name=\"LorentzVector\",\r\n        behavior=vector.behavior)\r\n\r\nv2 = ak.Array({\r\n        \"x\": np.random.normal(size=N), \"y\": np.random.normal(size=N), \"z\": np.random.normal(size=N),\r\n        \"t\": np.random.normal(size=N)}, with_name=\"LorentzVector\",\r\n        behavior=vector.behavior)\r\n\r\n# Choosing randomly between the two arrays using ak.where\r\narr = ak.where(np.random.uniform(0,1,N)>0.5, v1, v2, axis=0)\r\n\r\n# The type of the records is still there, but the behavior is gone\r\nprint(arr.type)\r\nprint(arr.behavior)\r\n\r\n# Using the add operation on the array results in a ValueError\r\n\r\nres = arr[0:5] + arr[5:10] # gives an error\r\n\r\n# Adding the behavior manually fixes the addition, but fields such as mass are still unavailable\r\n\r\narr.behavior = arr1.behavior\r\n\r\nres = arr[0:5] + arr[5:10]\r\n\r\narr.mass # gives an error\r\n\r\n# For whatever reason, this fixes the fields even though it should do nothing\r\n\r\narr = arr[:]\r\n\r\narr.mass\r\n```",
  "closed_at":"2021-11-17T14:39:20Z",
  "comments":12,
  "created_at":"2021-11-16T16:51:59Z",
  "id":1055103372,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4-45mM",
  "number":1152,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.where seems to lose the array behavior",
  "updated_at":"2021-11-17T15:04:40Z",
  "user":"MDQ6VXNlcjk5OTE2MzU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"  - [ ] Also, all of the other uses of `ak._util.behaviorof` that are being passed layouts, rather than `ak.Array` wrappers (which is the level that could possibly have behaviors).",
  "closed_at":"2021-11-17T14:39:20Z",
  "comments":1,
  "created_at":"2021-11-16T18:08:08Z",
  "draft":false,
  "id":1055174937,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4um3Rc",
  "number":1153,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-17T14:39:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"'behaviorof' should take Array, not layouts, and setting 'behavior' should set the '__class__'.",
  "updated_at":"2021-11-17T14:39:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-11-16T23:45:34Z",
  "comments":1,
  "created_at":"2021-11-16T18:53:15Z",
  "draft":false,
  "id":1055214114,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4um-9a",
  "number":1154,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-16T23:45:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Arrow Tables should preserve parameters.",
  "updated_at":"2021-11-16T23:45:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-12-21T14:20:05Z",
  "comments":11,
  "created_at":"2021-11-17T11:27:10Z",
  "draft":false,
  "id":1056016470,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4upe-a",
  "number":1155,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-21T14:20:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ArrayBuilder: replace shared with unique",
  "updated_at":"2021-12-21T14:20:06Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-11-17T16:24:20Z",
  "comments":1,
  "created_at":"2021-11-17T15:41:34Z",
  "draft":false,
  "id":1056279139,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uqWie",
  "number":1156,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-17T16:24:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Replace leaf Nones with +-inf for argmin/argmax axis=None.",
  "updated_at":"2021-11-17T16:24:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjk3NTE4NzE=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Here's a quick way to find out what kernels are actually used:\r\n\r\n```bash\r\nfgrep -r '\"awkward_' src/awkward/_v2 | sed 's/.*\"\\(awkward_[^\"]*\\)\".*/\\1/' | sort | uniq\r\n```\r\n\r\nalthough a smarter one could make a Python AST of all the src/awkward/_v2 code and searching for `nplike[...]` (subscript), where the first tuple item is a constant string naming the kernel.\r\n\r\nAs of this writing, the list of used kernels (using the quick method) is\r\n\r\n```\r\nawkward_argsort\r\nawkward_BitMaskedArray_to_ByteMaskedArray\r\nawkward_BitMaskedArray_to_IndexedOptionArray\r\nawkward_ByteMaskedArray_getitem_nextcarry\r\nawkward_ByteMaskedArray_getitem_nextcarry_outindex\r\nawkward_ByteMaskedArray_mask\r\nawkward_ByteMaskedArray_numnull\r\nawkward_ByteMaskedArray_overlay_mask\r\nawkward_ByteMaskedArray_reduce_next_64\r\nawkward_ByteMaskedArray_reduce_next_nonlocal_nextshifts_64\r\nawkward_ByteMaskedArray_reduce_next_nonlocal_nextshifts_fromshifts_64\r\nawkward_ByteMaskedArray_toIndexedOptionArray\r\nawkward_Content_getitem_next_missing_jagged_getmaskstartstop\r\nawkward_IndexedArray_fill\r\nawkward_IndexedArray_fill_count\r\nawkward_IndexedArray_fill_to64_count\r\nawkward_IndexedArray_flatten_nextcarry\r\nawkward_IndexedArray_getitem_nextcarry\r\nawkward_IndexedArray_getitem_nextcarry_outindex\r\nawkward_IndexedArray_index_of_nulls\r\nawkward_IndexedArray_local_preparenext_64\r\nawkward_IndexedArray_mask\r\nawkward_IndexedArray_numnull\r\nawkward_IndexedArray_numnull_parents\r\nawkward_IndexedArray_numnull_unique_64\r\nawkward_IndexedArray_overlay_mask\r\nawkward_IndexedArray_ranges_carry_next_64\r\nawkward_IndexedArray_ranges_next_64\r\nawkward_IndexedArray_reduce_next_64\r\nawkward_IndexedArray_reduce_next_fix_offsets_64\r\nawkward_IndexedArray_reduce_next_nonlocal_nextshifts_64\r\nawkward_IndexedArray_reduce_next_nonlocal_nextshifts_fromshifts_64\r\nawkward_IndexedArray_simplify\r\nawkward_IndexedArray_unique_next_index_and_offsets_64\r\nawkward_IndexedArray_validity\r\nawkward_IndexedOptionArray_rpad_and_clip_mask_axis1\r\nawkward_Index_iscontiguous\r\nawkward_Index_nones_as_index\r\nawkward_index_rpad_and_clip_axis0\r\nawkward_index_rpad_and_clip_axis1\r\nawkward_ListArray_broadcast_tooffsets\r\nawkward_ListArray_combinations\r\nawkward_ListArray_combinations_length\r\nawkward_ListArray_compact_offsets\r\nawkward_ListArray_fill\r\nawkward_ListArray_getitem_jagged_apply\r\nawkward_ListArray_getitem_jagged_carrylen\r\nawkward_ListArray_getitem_jagged_descend\r\nawkward_ListArray_getitem_jagged_expand\r\nawkward_ListArray_getitem_jagged_numvalid\r\nawkward_ListArray_getitem_jagged_shrink\r\nawkward_ListArray_getitem_next_array\r\nawkward_ListArray_getitem_next_array_advanced\r\nawkward_ListArray_getitem_next_at\r\nawkward_ListArray_getitem_next_range\r\nawkward_ListArray_getitem_next_range_carrylength\r\nawkward_ListArray_getitem_next_range_counts\r\nawkward_ListArray_getitem_next_range_spreadadvanced\r\nawkward_ListArray_localindex\r\nawkward_ListArray_min_range\r\nawkward_ListArray_num\r\nawkward_ListArray_rpad_and_clip_length_axis1\r\nawkward_ListArray_rpad_axis1\r\nawkward_ListArray_validity\r\nawkward_ListOffsetArray_argsort_strings\r\nawkward_ListOffsetArray_compact_offsets\r\nawkward_ListOffsetArray_local_preparenext_64\r\nawkward_ListOffsetArray_reduce_local_nextparents_64\r\nawkward_ListOffsetArray_reduce_local_outoffsets_64\r\nawkward_ListOffsetArray_reduce_nonlocal_findgaps_64\r\nawkward_ListOffsetArray_reduce_nonlocal_maxcount_offsetscopy_64\r\nawkward_ListOffsetArray_reduce_nonlocal_nextshifts_64\r\nawkward_ListOffsetArray_reduce_nonlocal_nextstarts_64\r\nawkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64\r\nawkward_ListOffsetArray_reduce_nonlocal_preparenext_64\r\nawkward_ListOffsetArray_rpad_and_clip_axis1\r\nawkward_ListOffsetArray_rpad_axis1\r\nawkward_ListOffsetArray_rpad_length_axis1\r\nawkward_ListOffsetArray_toRegularArray\r\nawkward_localindex\r\nawkward_MaskedArray_getitem_next_jagged_project\r\nawkward_missing_repeat\r\nawkward_NumpyArray_fill\r\nawkward_NumpyArray_rearrange_shifted\r\nawkward_NumpyArray_reduce_adjust_starts_64\r\nawkward_NumpyArray_reduce_adjust_starts_shifts_64\r\nawkward_NumpyArray_reduce_mask_ByteMaskedArray_64\r\nawkward_NumpyArray_sort_asstrings_uint8\r\nawkward_NumpyArray_subrange_equal\r\nawkward_NumpyArray_unique_strings\r\nawkward_quick_sort\r\nawkward_reduce_argmax\r\nawkward_reduce_argmin\r\nawkward_reduce_count_64\r\nawkward_reduce_countnonzero\r\nawkward_reduce_max\r\nawkward_reduce_min\r\nawkward_reduce_prod\r\nawkward_reduce_prod_bool\r\nawkward_reduce_sum\r\nawkward_reduce_sum_bool\r\nawkward_reduce_sum_int32_bool_64\r\nawkward_reduce_sum_int64_bool_64\r\nawkward_RegularArray_broadcast_tooffsets\r\nawkward_RegularArray_broadcast_tooffsets_size1\r\nawkward_RegularArray_combinations_64\r\nawkward_RegularArray_compact_offsets\r\nawkward_RegularArray_getitem_carry\r\nawkward_RegularArray_getitem_jagged_expand\r\nawkward_RegularArray_getitem_next_array\r\nawkward_RegularArray_getitem_next_array_advanced\r\nawkward_RegularArray_getitem_next_array_regularize\r\nawkward_RegularArray_getitem_next_at\r\nawkward_RegularArray_getitem_next_range\r\nawkward_RegularArray_getitem_next_range_spreadadvanced\r\nawkward_RegularArray_localindex\r\nawkward_RegularArray_num\r\nawkward_RegularArray_rpad_and_clip_axis1\r\nawkward_sort\r\nawkward_sorting_ranges\r\nawkward_sorting_ranges_length\r\nawkward_UnionArray_fillindex\r\nawkward_UnionArray_fillindex_count\r\nawkward_UnionArray_filltags\r\nawkward_UnionArray_filltags_const\r\nawkward_UnionArray_project\r\nawkward_UnionArray_regular_index\r\nawkward_UnionArray_regular_index_getsize\r\nawkward_UnionArray_simplify\r\nawkward_UnionArray_simplify_one\r\nawkward_UnionArray_validity\r\nawkward_unique\r\nawkward_unique_copy\r\nawkward_unique_offsets\r\nawkward_unique_ranges\r\n```\r\n\r\nThis is **135 kernels** used by v2 out of **206 kernels** currently defined. Using cloc to count lines of code:\r\n\r\n```\r\n-------------------------------------------------------------------------------\r\n                             files          blank        comment           code\r\n-------------------------------------------------------------------------------\r\nCurrently existing kernels     206            798            218          14178\r\n-------------------------------------------------------------------------------\r\nKernels used by v2             131            495            140           9237\r\n-------------------------------------------------------------------------------\r\n```\r\n\r\nThat is, we can drop 35% of the lines of code.\r\n\r\nEven this list of 135 kernels may be inflated: some in the list can possibly be replaced by NumPy and it hasn't been investigated because the old code was translated as-is. A manual scan over the 135 would reveal that, but we should wait on that scan until v2 is done.",
  "closed_at":"2022-11-14T08:14:06Z",
  "comments":3,
  "created_at":"2021-11-17T16:22:06Z",
  "id":1056322910,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4-9jVe",
  "number":1157,
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Remove unused kernels when v2 transition is complete",
  "updated_at":"2023-02-15T19:10:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"  - [x] `skipws`: moves the input pointer past zero or move whitespace characters (as defined by JSON spec)\r\n  - [x] `textint->`: integer; sent to stack or output\r\n  - [x] `textfloat->`: floating-point number; sent to output only\r\n  - [x] `quotedstr->`: quoted string with escape sequences; unquoted, unescaped string sent to output only and the length of the unescaped string is put on the stack. A machine-wide parameter `max_string_size` defines a reusable buffer for the string (not sent directly to output to avoid regrow-checks with every character). Raises error if the unescaped string exceeds `max_string_size`.\r\n  - [x] `enum string1\" string2\"`: literal `string1`, `string2`, etc. (arbitrarily many, at least one) is checked against the input, and a 0, 1, etc. is put on the stack for the string that matches; if none match, puts -1 on the stack. In JSON, all of the `string1`, `string2`, etc. would be quoted in the Forth code (except `null`, `true`, `false`) so that they'll match\r\n  - [x] `peek`: reports the next character on the stack (as an ASCII integer) but does not move the input past it. Raises error if the input is at its end.\r\n  - [x] Standard Forth `CASE .. OF .. ENDOF .. ENDCASE`: https://forth-standard.org/standard/core/CASE and https://lists.gnu.org/archive/html/gforth/2010-03/msg00024.html The general case can be turned into equivalent `IF .. THEN .. ELSE` (there's always an `ELSE` because it consumes an item from the stack in every case, even an undefined default case)\r\n  - [x] But a regular case, in which every `OF` is preceded by literal integers from zero until the number of `OF` cases, would get a special `CODE_CASE_REGULAR` instruction that dispatches to pseudofunctions by integer value.\r\n\r\nGeneral `CASE`:\r\n\r\n```forth\r\nCASE\r\ntest1 OF ... ENDOF           test1 OVER = IF DROP ... ELSE\r\ntest2 OF ... ENDOF           test2 OVER = IF DROP ... ELSE\r\ntestn OF ... ENDOF           testn OVER = IF DROP ... ELSE\r\n... ( default case )         ...\r\nENDCASE                      DROP THEN [THEN [THEN ...]]\r\n```\r\n\r\nSpecialized `CASE` removes the tests (as sequential integers starting with zero, they contain no information) and jumps to the \"`...`\" corresponding to the top value of the stack, with the same `DROP` logic for numbered consequents and the catch-all default case.\r\n\r\nI'd just like to say that the placement of `DROP` _before_ numbered consequents and _after_ the catch-all default makes no sense, but it's [described here](https://github.com/phf/forth/blob/edf15db8399c7b9c12604c04ecac53202b91e008/x86/jonesforth.f#L926-L933) and confirmed with gforth.",
  "closed_at":"2021-11-20T17:35:32Z",
  "comments":2,
  "created_at":"2021-11-18T23:33:09Z",
  "draft":false,
  "id":1057970842,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uvlTf",
  "number":1159,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-20T17:35:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add JSON commands to AwkwardForth.",
  "updated_at":"2021-11-20T22:28:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-11-20T23:19:56Z",
  "comments":1,
  "created_at":"2021-11-20T22:36:28Z",
  "draft":false,
  "id":1059243580,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4uzokc",
  "number":1160,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-20T23:19:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Better decompiled print-outs for 'case' and 'enum'.",
  "updated_at":"2021-11-20T23:19:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-30T16:59:48Z",
  "comments":3,
  "created_at":"2021-11-22T11:04:20Z",
  "draft":false,
  "id":1060008788,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4u2DcK",
  "number":1161,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-30T16:59:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: ak.concatenate",
  "updated_at":"2021-11-30T17:32:43Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-11-23T23:50:46Z",
  "comments":4,
  "created_at":"2021-11-22T16:53:27Z",
  "draft":false,
  "id":1060383134,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4u3SAj",
  "number":1162,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-23T23:50:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ak.from_json_schema as a demonstration of generating AwkwardForth from a type-schema",
  "updated_at":"2021-11-23T23:50:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 21.10b0 \u2192 21.11b1](https://github.com/psf/black/compare/21.10b0...21.11b1)\n",
  "closed_at":"2021-11-22T20:01:01Z",
  "comments":1,
  "created_at":"2021-11-22T19:24:19Z",
  "draft":false,
  "id":1060513775,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4u3s6o",
  "number":1163,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-22T20:01:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-11-22T20:01:01Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":null,
  "closed_at":"2021-11-30T15:54:24Z",
  "comments":4,
  "created_at":"2021-11-23T14:31:24Z",
  "draft":false,
  "id":1061354776,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4u6SsW",
  "number":1164,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-30T15:54:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"C++ refactoring: to and from json",
  "updated_at":"2021-11-30T15:54:25Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-11-25T04:24:17Z",
  "comments":4,
  "created_at":"2021-11-24T19:49:13Z",
  "draft":false,
  "id":1062838929,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4u-9vM",
  "number":1165,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-25T04:24:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Second try at specialized JSON: RapidJSON + custom assembly",
  "updated_at":"2021-11-25T04:24:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-11-29T09:26:23Z",
  "comments":4,
  "created_at":"2021-11-29T08:44:33Z",
  "draft":false,
  "id":1065758819,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vHSba",
  "number":1166,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-29T09:26:23Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Preserve order in v1 RecordForm.contents.",
  "updated_at":"2021-11-29T09:46:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEzOTA2ODI=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.7.0\n\n### Description and code to reproduce\n\nThe following code\r\n```python\r\nimport awkward as ak\r\n\r\na = ak.layout.NumpyArray([])\r\nb = ak.layout.ListOffsetArray64(ak.layout.Index64([0]), a)\r\nc = ak.layout.ListOffsetArray64(ak.layout.Index64([0]), b)\r\nak.any(c, axis=1)\r\n```\r\ncrashes in the `ak.any` call. It simply prints `Floating point exception` to the console without a Python backtrace.",
  "closed_at":"2021-11-30T11:23:04Z",
  "comments":5,
  "created_at":"2021-11-30T09:12:08Z",
  "id":1066979215,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4_mM-P",
  "number":1167,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Crash from ak.any (Floating point exception)",
  "updated_at":"2021-11-30T11:23:04Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"address issue #1167",
  "closed_at":"2021-11-30T11:23:04Z",
  "comments":1,
  "created_at":"2021-11-30T10:40:46Z",
  "draft":false,
  "id":1067073858,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vLh53",
  "number":1168,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-11-30T11:23:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"bugfix: avoid division by zero",
  "updated_at":"2021-11-30T11:23:05Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - sorry, I missed it.",
  "closed_at":"2021-12-02T14:24:19Z",
  "comments":1,
  "created_at":"2021-12-02T09:17:35Z",
  "draft":false,
  "id":1069309295,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vS6eh",
  "number":1169,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-02T14:24:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"remove debug printout",
  "updated_at":"2021-12-02T14:24:20Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-12-02T21:14:39Z",
  "comments":1,
  "created_at":"2021-12-02T17:47:14Z",
  "draft":false,
  "id":1069823245,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vUn1t",
  "number":1170,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-02T21:14:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Parquet files with zero record batches.",
  "updated_at":"2021-12-02T21:14:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This may need to be a running tab...",
  "closed_at":"2021-12-08T20:01:31Z",
  "comments":1,
  "created_at":"2021-12-03T21:47:54Z",
  "draft":false,
  "id":1070994696,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vYcA3",
  "number":1172,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-08T20:01:31Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugs found by the Dask project",
  "updated_at":"2021-12-08T20:01:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\n\n1.5.1\n\n### Description and code to reproduce\n\n```python3\r\n\r\n>>>  x = ak.Array(ak.layout.NumpyArray(np.array([[0,1],[2,0]])))\r\n>>> ak.values_astype(x, np.bool_)\r\n<Array [[False, True], [False, False]] type='2 * 2 * bool'>\r\n>>> ak.values_astype(ak.to_regular(x), np.bool_)\r\n<Array [[False, True], [True, False]] type='2 * 2 * bool'>\r\n```\r\n\r\nIt *looks* like we're just missing the dimension hidden inside the `NumpyArray` !",
  "closed_at":"2021-12-08T00:30:40Z",
  "comments":2,
  "created_at":"2021-12-05T19:14:31Z",
  "id":1071534804,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4_3lLU",
  "number":1173,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.values_astype` produces incorrect results for 2D NumPy array",
  "updated_at":"2021-12-08T00:30:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/psf/black: 21.11b1 \u2192 21.12b0](https://github.com/psf/black/compare/21.11b1...21.12b0)\n",
  "closed_at":"2021-12-06T20:15:43Z",
  "comments":1,
  "created_at":"2021-12-06T19:31:50Z",
  "draft":false,
  "id":1072527846,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vdTHA",
  "number":1174,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-06T20:15:43Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-12-06T20:15:44Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-12-08T00:30:40Z",
  "comments":1,
  "created_at":"2021-12-06T20:16:35Z",
  "draft":false,
  "id":1072570945,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vdcVG",
  "number":1175,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-08T00:30:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"NumpyArray::numbers_to_type must use flattened_length, not length.",
  "updated_at":"2021-12-08T00:30:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.7.0\n\n### Description and code to reproduce\n\nBased on the docstring for `ak.to_arrow_table`, you would think that `explode_records` would have no effect on arrays without records:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/ab26ed33c8e2ab18b70bcc190ba8933ad86a7d1b/src/awkward/operations/convert.py#L2540-L2542\r\n\r\nYet using this option with a record-less array leads to an empty table:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> a = ak.Array([1])\r\n>>> ak.to_arrow_table(a)\r\npyarrow.Table\r\n: int64 not null\r\n>>> ak.to_arrow_table(a, explode_records=True)\r\npyarrow.Table\r\n\r\n```\r\n\r\nThe issue is here:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/ab26ed33c8e2ab18b70bcc190ba8933ad86a7d1b/src/awkward/operations/convert.py#L2566-L2570\r\n\r\nIn the example, `a` has no keys, so you end up with no contents. The same thing appears in `ak.to_parquet`, which has the `explode_records` option as well.\r\n\r\nPerhaps the solution is as simple as adding a clause to the `if` here, checking whether there are any keys at all?",
  "closed_at":"2022-01-04T16:38:49Z",
  "comments":2,
  "created_at":"2021-12-07T11:47:32Z",
  "id":1073258324,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws4_-J9U",
  "number":1176,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`explode_records=True` leads to empty results for layouts without records",
  "updated_at":"2022-01-04T16:38:49Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-12-07T22:19:25Z",
  "comments":1,
  "created_at":"2021-12-07T21:43:49Z",
  "draft":false,
  "id":1073778560,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vhajk",
  "number":1178,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-07T22:19:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix leading zeros in ak.unflatten.",
  "updated_at":"2021-12-07T22:19:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Takes over for #900.",
  "closed_at":"2021-12-07T22:54:00Z",
  "comments":1,
  "created_at":"2021-12-07T22:13:11Z",
  "draft":false,
  "id":1073796351,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vheO_",
  "number":1179,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-07T22:54:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Raise ValueError for incompatible union types in ak.unzip.",
  "updated_at":"2021-12-07T22:54:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-12-07T23:22:54Z",
  "comments":1,
  "created_at":"2021-12-07T22:25:13Z",
  "draft":false,
  "id":1073803309,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vhfqK",
  "number":1180,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-07T23:22:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ak.to_numpy with RegularArray of size zero and non-zero length.",
  "updated_at":"2021-12-07T23:22:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-12-08T17:54:06Z",
  "comments":1,
  "created_at":"2021-12-07T23:52:19Z",
  "draft":false,
  "id":1073852219,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vhp6P",
  "number":1181,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-08T17:54:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed zeros in RegularArray shape.",
  "updated_at":"2021-12-08T17:54:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I only updated CI tests, deployments, setup requirements and classifiers, not the code itself. The \"tests\" directory is still riddled with `if ak._util.py27: ...`, but mostly just the v1 tests. v2 just have a module-level `pytest.mark.skipif` that will be easy to strip off in one go (if the first batch of tests work).",
  "closed_at":"2021-12-08T19:20:09Z",
  "comments":1,
  "created_at":"2021-12-08T18:05:51Z",
  "draft":false,
  "id":1074679950,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vkYJP",
  "number":1182,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-08T19:20:09Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove Python 2.7 and 3.5 support.",
  "updated_at":"2021-12-08T19:20:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-12-09T19:29:01Z",
  "comments":1,
  "created_at":"2021-12-08T21:30:43Z",
  "draft":false,
  "id":1074849102,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vk56L",
  "number":1183,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-09T19:29:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bugs found by the Dask project: broaden type-tracers' applicability",
  "updated_at":"2021-12-09T19:29:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@ioanaif, @ianna, and @ctrl-stormy: this is requiring pervasive changes to the Python v2. PRs targeting the C++ will merge well with this, but if you're working on the Python, ask me about it in Slack.",
  "closed_at":"2021-12-10T23:34:37Z",
  "comments":1,
  "created_at":"2021-12-10T02:30:14Z",
  "draft":false,
  "id":1076355172,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4vp22u",
  "number":1184,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-10T23:34:37Z"
  },
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":null,
  "title":"Drop all length information from TypeTracer, get all tests working again.",
  "updated_at":"2021-12-10T23:34:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Version of Awkward Array\n\n1.8.0rc1\n\n### Description and code to reproduce\n\nVery low priority issue\r\n\r\n```\r\n../../../.pyenv/versions/3.10.1/envs/dask-awkward/lib/python3.10/site-packages/awkward/__init__.py:7\r\n  /Users/ddavis/.pyenv/versions/3.10.1/envs/dask-awkward/lib/python3.10/site-packages/awkward/__init__.py:7: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\r\n    import distutils.version\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/warnings.html\r\n```\r\n\r\nAccording to PyPA docs the preferred method for version checking is [to use `packaging.version`](\r\nhttps://setuptools.pypa.io/en/latest/deprecated/distutils-legacy.html#prefer-setuptools).",
  "closed_at":"2022-01-04T20:39:58Z",
  "comments":4,
  "created_at":"2021-12-13T15:24:00Z",
  "id":1078662990,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5ASxdO",
  "number":1185,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"distutils module deprecated in Python 3.10",
  "updated_at":"2022-01-05T15:44:20Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2021-12-16T20:44:49Z",
  "comments":6,
  "created_at":"2021-12-15T19:35:57Z",
  "draft":false,
  "id":1081434303,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4v6PWL",
  "number":1186,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-16T20:44:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: bump cibuildwheel, add Python 3.10",
  "updated_at":"2021-12-16T21:45:32Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"\"of bike paths\" appeared twice in the sentence.",
  "closed_at":"2021-12-16T12:32:33Z",
  "comments":4,
  "created_at":"2021-12-16T09:56:54Z",
  "draft":false,
  "id":1081988156,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4v8CUO",
  "number":1187,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-16T12:32:33Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove duplicated text",
  "updated_at":"2022-01-07T18:01:07Z",
  "user":"MDQ6VXNlcjU5MzQ0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"- chore: minor cleanup\r\n- ci: try Numba RC on 3.10\r\n",
  "closed_at":"2022-01-07T18:13:20Z",
  "comments":1,
  "created_at":"2021-12-17T05:15:02Z",
  "draft":false,
  "id":1082896087,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4v_CMZ",
  "number":1188,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2022-01-07T18:13:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: try Numba RC on 3.10",
  "updated_at":"2022-01-07T18:13:47Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.7.0\n\n### Description and code to reproduce\n\nDear experts,\r\n\r\nWhen an ak array does not have missing values, `ak.singletons` does not wrap non-missing values into a list.\r\n\r\n```python\r\n>>> ak_array = ak.Array([1, 2, 3])\r\n>>> ak.singletons(ak_array)\r\n<Array [1, 2, 3] type='3 * int64'>\r\n```\r\n\r\nHowever everything seems fine with one missing value:\r\n```python\r\n>>> ak_array = ak.Array([1, 2, None])\r\n>>> ak.singletons(ak_array)\r\n<Array [[1], [2], []] type='3 * var * int64'>\r\n```\r\n\r\nIs this intending or is it a bug?",
  "closed_at":"2022-01-04T21:29:00Z",
  "comments":3,
  "created_at":"2021-12-18T07:24:30Z",
  "id":1083769606,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5AmQMG",
  "number":1189,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ak.singletons when array has no missing value",
  "updated_at":"2022-01-04T21:29:00Z",
  "user":"MDQ6VXNlcjY5OTA1MDM1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"### Version of Awkward Array\n\n1.7.0\n\n### Description and code to reproduce\n\n```\r\nfirst = ak.from_numpy(np.array([1,2,3]))\r\ndeltas = ak.from_numpy(np.array([[1,2],[1,2],[1,2,3]]))\r\ndeltas = ak.pad_none(deltas, 3, axis=-1)\r\ndxs = ak.numpy.hstack((first, deltas))\r\n```\r\n```\r\n\r\n<__array_function__ internals> in hstack(*args, **kwargs)\r\n\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n\r\n```\r\n\r\nExpected it to hstack; also, a different error message comes up when you use `ak.numpy.ma.hstack` as well:\r\n\r\n\r\n```\r\ndxs = ak.numpy.ma.hstack((first, deltas))\r\nValueError: NumPy format \"O\" cannot be expressed as a PrimitiveType\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.7.0/src/libawkward/array/NumpyArray.cpp#L82)\r\n\r\n```",
  "closed_at":"2022-01-04T22:29:11Z",
  "comments":2,
  "created_at":"2021-12-23T21:44:23Z",
  "id":1088006603,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5A2anL",
  "number":1192,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"hstack using padded numpy arrays leads to infinite recursion",
  "updated_at":"2022-01-08T05:15:43Z",
  "user":"MDQ6VXNlcjMwNjQ0Mg=="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjEyNDg0MTM=",
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"### Version of Awkward Array\r\n\r\n1.7.0\r\n\r\n### Description and code to reproduce\r\n\r\nCurrently, `ak.is_none` returns during the result building stage once it encounters an option type. This produces some interesting results when `ak.is_none` over nested option types:\r\n  ```python3\r\n  >>> index_of_index = ak.Array(\r\n  ...     ak.layout.IndexedOptionArray64(\r\n  ...         ak.layout.Index64(np.r_[0, 1, 2, 3]),\r\n  ...         ak.layout.IndexedOptionArray64(\r\n  ...             ak.layout.Index64(np.r_[0, -1, 2, 3]),\r\n  ...             ak.layout.NumpyArray(np.r_[1, 2, 3, 4]),\r\n  ...         ),\r\n  ...     )\r\n  ... )\r\n  >>> index_of_index\r\n  <Array [1, None, 5, 6] type='4 * ?union[?int64, ?int64]'>\r\n  >>> ak.is_none(index_of_index)\r\n  <Array [False, False, False, False] type='4 * bool'>\r\n  ```\r\n\r\nIn these cases, it's visible in the type string that there is something funky going on with the layout, but the correct result would be a `NumpyArray` layout of union of bytemask arrays\r\n\r\nIt might be that the simplest solution here is to use the `transform_child_layouts` utility, and return the union of the option-layout bytemask and the result from `transform_child_layouts`, e.g.\r\n```python3\r\ndef is_none(array, axis=0, highlevel=True, behavior=None):\r\n    \"\"\"\r\n    Args:\r\n        array: Data to check for missing values (None).\r\n        axis (int): The dimension at which this operation is applied. The\r\n            outermost dimension is `0`, followed by `1`, etc., and negative\r\n            values count backward from the innermost: `-1` is the innermost\r\n            dimension, `-2` is the next level up, etc.\r\n        highlevel (bool): If True, return an #ak.Array; otherwise, return\r\n            a low-level #ak.layout.Content subclass.\r\n        behavior (None or dict): Custom #ak.behavior for the output array, if\r\n            high-level.\r\n\r\n    Returns an array whose value is True where an element of `array` is None;\r\n    False otherwise (at a given `axis` depth).\r\n    \"\"\"\r\n\r\n    def apply(layout, depth, posaxis):\r\n        posaxis = layout.axis_wrap_if_negative(posaxis)\r\n        if posaxis == depth - 1:\r\n            nplike = ak.nplike.of(layout)\r\n            if isinstance(layout, ak._util.optiontypes):\r\n                mask = nplike.asarray(layout.bytemask()).view(np.bool_)\r\n\r\n                inner_mask = ak.to_numpy(\r\n                    ak._util.transform_child_layouts(apply, layout, depth, posaxis)\r\n                )\r\n                return ak.layout.NumpyArray(mask | inner_mask)\r\n\r\n            if isinstance(\r\n                layout,\r\n                (\r\n                    ak._util.unknowntypes,\r\n                    ak._util.listtypes,\r\n                    ak._util.recordtypes,\r\n                    ak.layout.NumpyArray,\r\n                ),\r\n            ):\r\n                return ak.layout.NumpyArray(nplike.zeros(len(layout), dtype=np.bool_))\r\n\r\n        return ak._util.transform_child_layouts(apply, layout, depth, posaxis)\r\n\r\n    layout = ak.operations.convert.to_layout(array)\r\n\r\n    out = apply(layout, 1, axis)\r\n\r\n    return ak._util.maybe_wrap_like(out, array, behavior, highlevel)\r\n```\r\n\r\nThis feels a bit clunky, but it makes the point :)\r\n\r\nAlternatively, we could just call `ak.packed` here, which will ensure that merge-able layouts are merged. This solution won't fix other cases, though, e.g.\r\n```python3\r\nak.layout.IndexedOptionArray64(\r\n    ak.layout.Index64(np.r_[0, 1, 2, 3]),\r\n    ak.layout.UnionArray8_64(\r\n        ak.layout.Index8(np.r_[0, 0, 1, 1]),\r\n        ak.layout.Index64(np.r_[0, 1, 0, 1]),\r\n        [\r\n            ak.layout.IndexedOptionArray64(\r\n                ak.layout.Index64(np.r_[0, -1, 2, 3]),\r\n                ak.layout.NumpyArray(np.r_[1, 2, 3, 4]),\r\n            ),\r\n            ak.layout.NumpyArray(np.r_[4, 5, 6]),\r\n        ],\r\n    ),\r\n)\r\n```\r\n\r\nRelated to this: at present, multple option layouts grow the type string `??` corresponds to two nested options. Is this what we want? I would expect to see a single logical option (`any(l.optional for l in layouts_at_depth)`).",
  "closed_at":"2022-02-10T23:25:03Z",
  "comments":5,
  "created_at":"2021-12-27T16:58:53Z",
  "id":1089361186,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"I_kwDODBCWws5A7lUi",
  "number":1193,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"`ak.is_none` does not descend into option contents",
  "updated_at":"2022-11-24T17:54:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"updates:\n- [github.com/pre-commit/pre-commit-hooks: v4.0.1 \u2192 v4.1.0](https://github.com/pre-commit/pre-commit-hooks/compare/v4.0.1...v4.1.0)\n",
  "closed_at":"2021-12-27T23:14:02Z",
  "comments":1,
  "created_at":"2021-12-27T19:28:10Z",
  "draft":false,
  "id":1089432925,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wUEXQ",
  "number":1194,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-27T23:14:02Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[pre-commit.ci] pre-commit autoupdate",
  "updated_at":"2021-12-27T23:14:03Z",
  "user":"MDM6Qm90NjY4NTMxMTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"When _pack_layout is passed an indexed array, it returns `layout.project()`. However,  `_pack_layout` is *supposed* to return a layout whereby only its children may need packing. In this case, by returning `layout.project()`, we are not guaranteed to satisfy this expectation.\r\n\r\nThis PR fix the issue by ensuring that we pack the result of `project`.",
  "closed_at":"2021-12-28T19:03:29Z",
  "comments":3,
  "created_at":"2021-12-28T14:25:04Z",
  "draft":false,
  "id":1089931510,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"PR_kwDODBCWws4wVp_d",
  "number":1195,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2021-12-28T19:03:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix: _pack_layout should also pack projected index arrays",
  "updated_at":"2021-12-28T19:03:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 }
]