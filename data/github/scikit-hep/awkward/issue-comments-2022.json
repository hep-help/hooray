[
 {
  "author_association":"MEMBER",
  "body":"I don't think it would be possible.",
  "created_at":"2022-04-15T19:53:34Z",
  "id":1100337031,
  "issue":174,
  "node_id":"IC_kwDODBCWws5Blc-H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:53:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is superseded by v2.",
  "created_at":"2022-04-15T19:53:12Z",
  "id":1100336291,
  "issue":176,
  "node_id":"IC_kwDODBCWws5Blcyj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:53:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is superseded by v2.",
  "created_at":"2022-04-15T19:52:57Z",
  "id":1100335816,
  "issue":177,
  "node_id":"IC_kwDODBCWws5BlcrI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:52:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Being realistic, this isn't going to happen. (It's late to be adding new node types now.)",
  "created_at":"2022-04-15T19:52:26Z",
  "id":1100335043,
  "issue":178,
  "node_id":"IC_kwDODBCWws5BlcfD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:52:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm expanding the scope of this old issue to be the `ak.to_json`/`ak.from_json` work that's needed for v2. There are several functions that need to become options in a single interface.",
  "created_at":"2022-04-15T19:51:17Z",
  "id":1100333112,
  "issue":192,
  "node_id":"IC_kwDODBCWws5BlcA4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:51:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Can we close this now that we have `keepdims`? It's not perfect (it requires the original array to be entirely jagged), but that might be a separate issue.\r\n\r\nThat said, I *do* think we want something like `.pick` to force Awkward indexing. I'm also not against something like adding `axis=None` to `ak.from_regular` to convert an arg into a fully jagged array, but that might be a separate API improvement to making Awkward indexing. \r\n\r\nFor posterity, I do a reasonable amount of work with mixed regular and jagged arrays, and have written a helper `make_jagged` to ensure that index arguments behave as Awkward does. Finding a way to make this nicer would be useful :)\r\n",
  "created_at":"2022-04-07T09:38:27Z",
  "id":1091433684,
  "issue":203,
  "node_id":"IC_kwDODBCWws5BDfTU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-07T09:45:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Although there's a way to do it (using `keepdims`, which actually had been there from the beginning, but I didn't recognize that they solved this problem until @nsmith- pointed it out), although there's a way to do it, it's not easy to discover. The other things talked about in this issue, `array.pick` or more simply `ak.minby` and `ak.maxby`, are still potentially useful.\r\n\r\nAnd actually, if we take the `ak.minby`, `ak.maxby` route, they would be simple implementations, a good-first-issue. On the other hand, if a user learns it this way, they'll have even less chance of discovering the route of integer arrays, and will probably end up re-computing the selector a hundred times to apply it to a hundred arrays. (Adding a convenient `cut` argument to [uproot.TTree.arrays](https://uproot.readthedocs.io/en/latest/uproot.behaviors.TTree.TTree.html#arrays) has led to the impression that this is the _only_ way to apply cuts, and people have developed some illegible and inefficient workflows to force all their cuts into this string-valued argument.)\r\n\r\nMaybe we should just close it because it's borderline and we have so many open issues. Okay, I'll do it.",
  "created_at":"2022-04-07T15:52:39Z",
  "id":1091905919,
  "issue":203,
  "node_id":"IC_kwDODBCWws5BFSl_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-07T15:52:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"In case you're wondering what all of this is about, I'm going through all of our open issues from oldest to newest to decide what should be done with them, post-2.0.\r\n\r\nIn this case, @nikoladze's array can be converted to NumPy if you pay attention to all the details of which `axis` needs to be padded and with some numeric fill value (i.e. don't try to fill missing _records_ with a number). There ought to be a function to make some reasonable choices (apply standardized rules) to turn anything rectilinear with a given fill value that is by default `0`. Maybe another function argument to choose between clipping to the smallest list length versus padding to the longest (the latter is the default).\r\n\r\nThe point of this is to remember that sometimes, we don't care about structure and don't want to think about it: we just want a NumPy array _somehow_. This would be a good function to develop with `ak.transform`; the hardest part might be naming it...",
  "created_at":"2022-12-12T15:26:41Z",
  "id":1346699242,
  "issue":336,
  "node_id":"IC_kwDODBCWws5QRP_q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-12T15:26:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski do you think that we still need this in 2022?",
  "created_at":"2022-07-06T15:31:44Z",
  "id":1176367602,
  "issue":391,
  "node_id":"IC_kwDODBCWws5GHfHy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-06T15:31:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"No, this sounds like a to-do item that gets \"done\" by waiting so long that it's no longer relevant. We probably have more new users of Awkward 1 than transitioning users of Awkward 0.\r\n\r\n[![image](https://user-images.githubusercontent.com/1852447/177607668-70196be8-6003-4e0f-923b-c476f660bebd.png)](https://github.com/jpivarski-talks/2022-03-04-reload-statistics/blob/main/PLOTS/pip-allos-awkward-lin.pdf)\r\n\r\nSorry I fell off the ball on this, @raymondEhlers. I'll close the issue.",
  "created_at":"2022-07-06T17:21:10Z",
  "id":1176485332,
  "issue":391,
  "node_id":"IC_kwDODBCWws5GH73U",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-06T17:21:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"No worries at all @jpivarski! You always answer so helpfully and quickly that it makes issues like this quite minor. (Plus, I made the transition years ago). I really appreciate the effort that you and others put into such a useful package!",
  "created_at":"2022-07-06T17:34:02Z",
  "id":1176497168,
  "issue":391,
  "node_id":"IC_kwDODBCWws5GH-wQ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-06T17:34:02Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"MEMBER",
  "body":"(I'm going through old issues, deciding what to do with them.)\r\n\r\nI think that the `array == None` and `array != None` behavior _should not_ be changed. In the examples you presented, @andrzejnovak, the results look non-intuitive, but they're following a rule that applies to all mathematical functions, including `==` and `!=`, and I think it would be dangerous to have exceptions to that behavior. If we made\r\n\r\n```python\r\nak.Array([1, 2, None, 3, None, 4]) == None\r\n```\r\n\r\nreturn\r\n\r\n```python\r\nak.Array([False, False, True, False, True, False])\r\n```\r\n\r\nthen someone else's use-case might break because they were assuming that `==` and `!=` would act like all other mathematical functions. Namely,\r\n\r\n```python\r\nak.Array([1, 2, None, 3, None, 4]) + 10\r\n```\r\n\r\nreturns\r\n\r\n```python\r\nak.Array([11, 12, None, 13, None, 14])\r\n```\r\n\r\nThat is, the scalar `10` broadcasts and the `None` values pass through any mathematical operation. When applied to `==` (same for `!=`), the expected result of\r\n\r\n```python\r\nak.Array([1, 2, None, 3, None, 4]) == None\r\n```\r\n\r\nwould be\r\n\r\n```python\r\nak.Array([False, False, None, False, None, False])\r\n```\r\n\r\nbecause each `integer == None` is `False` and each missing value passes through.\r\n\r\n@agoose77, do you concur? If you think there is something that we should do that would benefit all use-cases, reopen the issue. Thanks!",
  "created_at":"2022-11-10T21:02:21Z",
  "id":1310888929,
  "issue":487,
  "node_id":"IC_kwDODBCWws5OIpPh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-10T21:02:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I had the same thought. If we allow `x == None`, then we run into the problem that `x == None` has a different type to `x == 10` (logically, unless we used an `UnmaskedArray` to keep the option type. Then, what about `x == [None]`? Maybe we'd allow that, but then what about `x == [None]` vs `x == [None, 1]`? It seems like a can of worms!",
  "created_at":"2022-11-10T21:38:10Z",
  "id":1310934593,
  "issue":487,
  "node_id":"IC_kwDODBCWws5OI0ZB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-10T21:38:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Closing this one because it's a time-traveling duplicate.",
  "created_at":"2022-04-15T19:49:31Z",
  "id":1100330005,
  "issue":489,
  "node_id":"IC_kwDODBCWws5BlbQV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:49:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I found this issue when discussing a similar topic on Gitter, so I thought I'd move that discussion here!\r\n> Since matching versions is important, they would probably all be built from this one GitHub repo, so that they have shared version control.\r\n\r\nI haven't much experience of non-monorepo development for a project like this. From a CI perspective, I imagine it's going to make much more sense to use a monorepo.\r\n\r\n> But it would also be advantageous for them to have separate CI, since we don't want to have to wait for recompilation when we're making Python changes, and we're imagining future contributors to be much more active on the Python part.\r\n\r\nI agree with this. If we nicely package each component into its own Python package, we can implement the CI without _too_ much difficulty, I think. As you say, this is much more important now that most of Awkward development shouldn't need to touch the C++ layer.\r\n\r\nThere are some additional pros, as I see them:\r\n- Much quicker build times + CI feedback times\r\n- Smaller wheels (~3MB vs 14.5MB) - some installers can perform parallel downloads, making this faster too\r\n- Simpler build system - we could move the Python-only project to flit / pdm rather than setuptools :)\r\n\r\nMost of the cons I think are outlined here, including upfront work to reconfigure the repo.",
  "created_at":"2022-02-08T11:48:11Z",
  "id":1032521736,
  "issue":503,
  "node_id":"IC_kwDODBCWws49iwgI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-08T11:48:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I saw this when I was [prioritizing issues](https://github.com/scikit-hep/awkward-1.0/projects/5). This thread started in 2020, and how it would be dealt with now is rather different than it was then.\r\n\r\nThe date when all v1 code will be dropped and we release a version numbered \"2.0.0\" is set: Dec 1, 2022 (exactly 2 years after 1.0.0, see [roadmap](https://github.com/scikit-hep/awkward-1.0/wiki#current-status)).\r\n\r\nRight now, we build 46 wheels in each release, which is a total of 576 MB per release. Each wheel is 10\u201215 MB (though \r\n`cp3*-cp310-macosx_10_9_universal2` is 21 MB). On my Linux, `libawkward.so` is **8.2 MB** and `libawkward-cpu-kernels.so` is **1.6 MB**. The kernels in v2 won't be much smaller (we'll be able to remove a few trivial kernels now that we can use more NumPy, but not the complex ones), but `libawkward.so` will be considerably smaller.\r\n\r\nTo get a sense of this, I did rough surgery on the codebase, removing what I know will be removed and just patching things up so that `import awkward` works (without any other testing\u2014the actual transition will require care!). In this rough v2 environment, the number of lines of C++ code is\r\n\r\n```\r\n% cloc include/awkward src/libawkward src/python\r\n      53 text files.\r\n      53 unique files.                              \r\n       0 files ignored.\r\n\r\ngithub.com/AlDanial/cloc v 1.82  T=0.05 s (1013.7 files/s, 429753.4 lines/s)\r\n-------------------------------------------------------------------------------\r\nLanguage                     files          blank        comment           code\r\n-------------------------------------------------------------------------------\r\nC++                             24           1151            553          10687\r\nC/C++ Header                    29           1136           1090           7851\r\n-------------------------------------------------------------------------------\r\nSUM:                            53           2287           1643          18538\r\n-------------------------------------------------------------------------------\r\n```\r\n\r\ncompared to the current (1.9.0rc2) environment:\r\n\r\n```\r\n% cloc include/awkward src/libawkward src/python\r\n     173 text files.\r\n     173 unique files.                                          \r\n       0 files ignored.\r\n\r\ngithub.com/AlDanial/cloc v 1.82  T=0.22 s (787.9 files/s, 477788.7 lines/s)\r\n-------------------------------------------------------------------------------\r\nLanguage                     files          blank        comment           code\r\n-------------------------------------------------------------------------------\r\nC++                             84           5600            467          71849\r\nC/C++ Header                    89           4264           5217          17514\r\n-------------------------------------------------------------------------------\r\nSUM:                           173           9864           5684          89363\r\n-------------------------------------------------------------------------------\r\n```\r\n\r\nCompilation time for `localbuild.py` in the rough v2 environment is **38 sec** using all (12) threads + **17 sec** using one thread = **55 seconds**. Compilation time for `pip install .` in the rough v2 environment is **43 sec** using all (12) threads + **12 sec** using one thread = **55 seconds**. (Note: the total time is accurate, from `time`, the breakdown into parallel + sequential is a by-hand stopwatch.)\r\n\r\nCompilation time for `localbuild.py` in the current (1.9.0rc2) environment is **106 sec** using all (12) threads + **120 sec** using one thread = **226 seconds**. Compilation time for `pip install .` in the current (1.9.0rc2) environment is **89 sec** using all (12) threads + **53 sec** using one thread = **142 seconds**.\r\n\r\nThe size of `libawkward-cpu-kernels.so` stays the same at **1.6 MB** (naturally; it wasn't changed), but the size of `libawkward.so` drops from **8.2 MB** down to **1.2 MB**.\r\n\r\nHere are some compressed sizes within a sample wheel:\r\n\r\n```python\r\n>>> os.path.getsize(\"awkward-1.9.0rc2-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\")\r\n11621633\r\n>>> f = zipfile.ZipFile(\"awkward-1.9.0rc2-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\")\r\n>>> print(\"\\n\".join(x for x in f.namelist() if x.endswith(\".so\")))\r\n_ext.cpython-39-x86_64-linux-gnu.so\r\nlibawkward-cpu-kernels.so\r\nlibawkward.so\r\nawkward/_ext.cpython-39-x86_64-linux-gnu.so\r\nawkward/libawkward-cpu-kernels.so\r\nawkward/libawkward.so\r\n```\r\n\r\nOkay, first issue: the shared libraries seem to be in there twice. Only the ones in `awkward/` are actually accessed.\r\n\r\n```python\r\n>>> for x in f.namelist():\r\n...     if x.endswith(\".so\"):\r\n...         print(x, f.getinfo(x).file_size, f.getinfo(x).compress_size, sep=\"\\t\")\r\n... \r\n_ext.cpython-39-x86_64-linux-gnu.so           10824112   3018096\r\nlibawkward-cpu-kernels.so                      1586488    324808\r\nlibawkward.so                                  8205224   2132871\r\nawkward/_ext.cpython-39-x86_64-linux-gnu.so   10824112   3018096\r\nawkward/libawkward-cpu-kernels.so              1586488    324808\r\nawkward/libawkward.so                          8205224   2132871\r\n```\r\n\r\nThe sum of compressed shared libraries (including that 2\u00d7 duplication!) comprise 94% of the total size of the wheel. The contribution from compressed Python code is insignificant.\r\n\r\nThe shared libraries built on my computer are within 10% of the uncompressed sizes (including the `_ext`), and this is how they shrink when dropping v1 symbols:\r\n\r\n   * `_ext`: 11791328 \u2192 1317816, which is 11% as big (uncompressed)\r\n   * `libawkward-cpu-kernels.so`: 1611304 \u2192 1610080, which is 100.07% as big (uncompressed)\r\n   * `libawkward.so`: 8508904 \u2192 1205216, which is 7% as big (uncompressed)\r\n\r\nAssuming code removal and compression factorize \ud83e\udd37\u200d\u2642\ufe0f, the code removal would reduce wheel size to\r\n\r\n```\r\n(0.06 + 0.94*(1317816 + 1610080 + 1205216)) / (0.06 + 0.94*(11791328 + 1611304 + 8508904)) = 0.1886\r\n```\r\n\r\n**19% of their current size**. Instead of a release costing **576 MB**, a release will cost **109 MB**.\r\n\r\nIf we also fix the 2\u00d7 duplication, it would reduce wheel size to **9.4%** of their current size, or **54 MB** per release.\r\n\r\nInstead of this wheel being **11 MB**, it would be **1 MB**.\r\n\r\nA few conclusions:\r\n\r\n   * The reason I like `localbuild.py` is because it allows for incremental builds. In particular, if you don't change any header files, you get to skip most of the **120 sec** of single-threaded linking. In v2, that part is just **17 sec** and the compilation time becomes dominated by the very parallel compilation of cpu-kernels. Developers with a lot of cores will be able to compile from scratch in under a minute. If `pip install -e` can be made to work, we could get rid of `localbuild.py` and always compile through `pip`, always from scratch, because only C++ changes would require a minute of waiting, and that's not so bad. Most development is in Python now, anyway.\r\n   * We can reduce wheel size by a factor of 2 right now.\r\n   * When the v1 code is finally dropped on Dec 1, 2022, they will be **54 MB** per release, or **1 MB** for a typical wheel. I would say that's small enough to not have to worry about splitting the packages into a part that depends on architecture and a part that depends on Python version. There would still be a file-size benefit to doing so, but I don't think it warrants the complexity.\r\n\r\nWhat do you think?",
  "created_at":"2022-04-22T18:14:58Z",
  "id":1106750209,
  "issue":503,
  "node_id":"IC_kwDODBCWws5B96sB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-22T18:14:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is the \"rough surgery\" branch: [jpivarski/v1-v2-rough-surgery](https://github.com/scikit-hep/awkward-1.0/tree/jpivarski/v1-v2-rough-surgery). DO NOT MERGE!",
  "created_at":"2022-04-22T18:18:08Z",
  "id":1106752490,
  "issue":503,
  "node_id":"IC_kwDODBCWws5B97Pq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-22T18:18:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"~@jpivarski can this be closed, now?~\r\n\r\nI re-read the comments, and I think there is still merit to this, actually. The assumption underpinning this is that most work on Awkward isn't touching the compiled portions any more. To summarise where we're at now:\r\n\r\n## Resources\r\nWith the v2 split, we lose the first-order concerns about file-size (our builds are now ~3MB w/ duplication). However, deleting the compiled portion of the wheel naively drops the distribution size entirely to ~550kB (assuming no compiled changes). Of course, this is multiplicative; we would be able to release a pure-Python wheel and thus drop the per-platform scaling factor. I'm increasingly thinking about trying to reduce the resources that projects use from PyPI et al., so if we can do something here (even if we're only talking MBs), it might be worth it. Splitting `awkward` into `awkward` and `libawkward` would likely see us releasing `awkward` more frequently, and occasionally releasing patch versions of `libawkward`. We are free to synchronise the two if needs be, i.e. for a new feature release in `awkward`.\r\n\r\n## Release / CI duration\r\nEven with the new v2 build process, our releases take hours (we don't use `ccache` in cibuildwheel). It would be nice to reduce this for multiple reasons (UX, resource usage, etc).\r\n\r\nNote that we *could* at least remove the build time costs by instead caching the built binary artefacts with a hash of their sources, and drop ccache (for simplicity). The question is whether the work to do this is better than explicitly separating the compiled and non-compiled sources.\r\n\r\nIn a random run of `build-test`, we had:\r\n- Win: 6m33s of 9m1s on compiled code\r\n- Mac: 4m24s of 9m37s on compiled code\r\n- Linux: 2m37s of 5m43s on compiled code\r\n\r\nOur CI could move to something like ~2.5-5.5 minutes per job across archs, meaning approx ~2x faster (very hand wavy).\r\n\r\nMeanwhile, I don't have any hard numbers, but our releases would essentially become tens-of-minutes instead of 3.5 hours, unless we also had to modify the compiled portion. I say this because our release time is dominated by the alt-builds, which I assume Is nearly entirely the setup + compilation via emulation.\r\n\r\n## Development burden\r\nSplitting out the compiled portion of awkward (even if we use a monorepo) means we could move to flit without waiting for scikit-core-build (which will inevitably improve the compiled build toolchain, when it's ready). It's only a small issue, but I'd like to be able to use `pip install -e .` e.g. to ensure that the numba entry-point is working, and to avoid having my IDE get confused between `awkward/` and `src/awkward/`.",
  "created_at":"2022-10-10T10:31:19Z",
  "id":1273109967,
  "issue":503,
  "node_id":"IC_kwDODBCWws5L4h3P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T11:15:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Unless we count complexity as a negative, the value of splitting `libawkward` (the C++ part) out of `awkward` (the Python part) as two PyPI (and conda-forge?) packages has always been positive. The question is whether the positive is significant enough to prioritize right now.\r\n\r\n  * Compilation time and CI time: used to be a bigger deal than it is now, though being able to test the Python parts without recompiling the C++ parts is always going to be _somewhat_ faster. If it's now a factor of 2, I wouldn't say that's an argument on its own.\r\n  * Deployment time: getting a release out in minutes, rather than 4 hours, would be a Very Big Deal.\r\n  * PyPI disk space (quota): used to be a bigger deal than it is now.\r\n  * Eliminating `localbuild.py` and using `pip install -e .` instead: a Very Big Deal. I've been looking forward to this for a long time, without even having the problem of an IDE getting confused, though I can see how this would happen. I haven't tried `pip install -e .` after v1 was dropped: I don't know if this is still a problem. But if we split `libawkward` from `awkward`, then it would definitely work on the Python part.\r\n  * filt: wasn't this going to be hatchling? Uproot uses hatchling, and it would probably be easier if they were the same.\r\n\r\nAddressing this would also have the side-benefits of reexamining some things. One is that it seems like the wheels are producing `libawkward.so` and `libawkward-cpu-kernels.so` outside the `awkward` directory (in `site-packages`). That's not intended, and I'm not sure if it's platform-dependent. The `.so` files were supposed to all be inside the `awkward` directory, to minimize the possibility of name-clobbering (though names containing \"awkward\" are rather unlikely, which was a motivating point in favor of the project's name).\r\n\r\nAnother is that `libawkward.so`, `libawkward-cpu-kernels.so`, and `_ext.asdl;fkja;dfklj.so` no longer need to be separate libraries. At least, `libawkward.so` and `libawkward-cpu-kernels.so` don't need to be separate because different \"kernels\" backends are not going to be swapped out at the shared library level (as was originally envisioned). Now the CUDA kernels are JIT-compiled in CuPy, and it will never be the case that we want some kernels other than the CPU kernels and also _not_ the CPU kernels: the CPU kernels will always need to be available.\r\n\r\nSo at least `libawkward.so` and `libawkward-cpu-kernels.so` can be a single shared library file. But further, there isn't a strong reason for this to be a distinct library from the Python module itself, since we're not providing a C++ interface as a linkable library. (Instead, we're providing a C++ interface as header-only source code.) What we do need is to be able to access pure C functions with `dlopen`. The Numba implementation of ArrayBuilder calls into `extern \"C\"` functions in `libawkward.so` with external function pointers\u2014it _has to_ work this way to hide ArrayBuilder's dynamic types from Numba. Right now, our kernels are called by ctypes. They're compiled into the Python library anyway and could be pybind11-wrapped, though the binding code would have to be automatically generated because there are a lot of kernels, and those calls would have to release the GIL (which we get automatically with ctypes). But I think it must be possible to get a ctypes module associated with a Python extension module and access its `extern \"C\"` functions, possibly in a more simple way than we do now.\r\n\r\nIf we're pulling things apart to make two packages, putting it back together in such a way that the `libawkward` package (or `awkward-core`?) consists of a single extension module and no free-floating shared libraries would simplify deployments and further reduce C++ build times and disk space (though that's a smaller concern now than it used to be). Currently, some symbols appear in all three `.so` files.\r\n\r\n-------------\r\n\r\nNow for the complication: if we have two packages, `awkward-core` and `awkward`, and the Python one is updated more frequently than the C++ one (which is the whole point, after all), then they will have different version numbers to sync. The version compatibilities can be managed as strict dependencies by PyPI/conda-forge, but these dependencies should probably also be human-computable so that it's easy to spot an incompatibility if you know the pattern: perhaps `awkward-core` and `awkward` should always agree in major and minor number, but not necessarily revision number? So `awkward-core` 2.1.X can be used with `awkward` 2.1.Y for any (or the latest) X and Y, but X and Y are not required to be equal. Releasing 2.2.0 would mean that a new `awkward-core` and `awkward` are both needed, even if one is not changing.\r\n\r\nIn this scheme, `awkward-core` would have no dependencies (not even NumPy!) and `awkward` 2.1.Y would have (in addition to NumPy),\r\n\r\n```\r\nawkward-core >= 2.1.0, < 2.2\r\n```\r\n\r\nNormally, putting an upper bound on a dependency is a bad thing, but that's because we're releasing both packages, controlling _when_ they get released, and there's a tight coupling between the two. This is reason number 5 in @henryiii's [When it's okay to set an upper limit](https://iscinumpy.dev/post/bound-version-constraints/#upper-limits-are-valid-sometimes).\r\n\r\nNo matter how carefully we do it, there will always be a time-gap between when `awkward-core` is released and when `awkward` is released. I suppose pip is smart enough now that someone who tries to install in the window when one is released and the other isn't, pip will install the latest consistent pair. Depending on how pip works, it might be a good idea to deploy `awkward` 2.2.0 first, then `awkward-core` 2.2.0 afterward, so that someone who tries to `pip install awkward` will get the last 2.1.Y until `awkward-core` is deployed. It might also be necessary to deploy the `awkward-core` source distribution last, so that someone trying to pip install in this window doesn't get a compiler error because their binary wheel isn't uploaded yet.\r\n\r\nOne more complication: although we edit the C++ code much less often nowadays, @ioanaif is working on kernels for vectorized matrix multiplication right now. Perhaps we should think about these packaging improvements, but implement them after @ioanaif is done.",
  "created_at":"2022-10-10T15:26:14Z",
  "id":1273482738,
  "issue":503,
  "node_id":"IC_kwDODBCWws5L583y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T15:26:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> filt: wasn't this going to be hatchling? Uproot uses hatchling, and it would probably be easier if they were the same.\r\n\r\nI prefer `hatchling`, I just talk about `flit_core` sometimes (I'm really referring to new PEP 621 builders).\r\n\r\n>  One is that it seems like the wheels are producing libawkward.so and libawkward-cpu-kernels.so outside the awkward directory (in site-packages). That's not intended, and I'm not sure if it's platform-dependent.\r\n\r\nYes, I was looking to tackle that at the same time. I took a look earlier, and the Win wheels don't have the same number of objects outside of the `awkward` subdirectory. I noticed that, at least on my machine for `python3 setup.py bdist_wheel`, the `get_outputs()` method isn't called, also.\r\n\r\n> So at least libawkward.so and libawkward-cpu-kernels.so can be a single shared library file. \r\n\r\nYes, it's really a matter of convenience. I'm in favour of keeping them the same; we aren't encouraging anyone to link against these, and the sizes are small. Meanwhile, release complexity goes up ever so slightly the more packages we build.\r\n\r\n> The version compatibilities can be managed as strict dependencies by PyPI/conda-forge, but these dependencies should probably also be human-computable so that it's easy to spot an incompatibility if you know the pattern\r\n\r\nYes, we do need to think about this part. In principle, I think we have an easier job of semvering the CPU-kernels part, which has a very limited interface and is effectively a bunch of free-standing functions; the API surface is fairly small, and most features can just be new kernels. The `libawkward` part removes this simplicity. I am not against synchronising versions between the two packages; JupyterLab e.g releases a set of `MAJOR.0.0` packages for each major release. However, I wouldn't want this coupling to be so tight that we resemble e.g. `jaxlib`; if releasing an `awkward` version requires a new `awkward-core`, then we're back to long release builds. We don't have much data here; most of our releases on PyPI are new minor versions; we don't patch much. I'd probably prefer to cap on the major version here, which is a much, much broader compatibility range. Effectively we need to choose some level of compatibility commitment and then stick to it. I'm not against leaving the upper bound unset, but I also don't know about the kind of downstream problems that users of semi-managed platforms like HPC environments have to face; if we introduce unpinned dependencies, does that break their assumptions? Note that this would only affect users who don't update their `awkward` version, but update `awkward-core` for whatever reason. It's good that you've tagged @henryiii; it will be nice to get a few opinions on this from different stakeholders. I'm a convert to the pinning-skepticism (tongue-in-cheek) in Python, but I'm not someone who's applied it in practice in a library used by as many as Awkward.\r\n\r\n> One more complication [...]\r\n\r\nThe details of how we manage the workflow of developers who touch the compiled portion would need to be worked out. We could do anything from\r\n- have a PR label that turns on building of the compiled parts (to use in the testing of the Python module)\r\n- have the workflow check the branch diff to see if compiled code has been modified\r\n\r\n",
  "created_at":"2022-10-10T16:32:30Z",
  "id":1273564418,
  "issue":503,
  "node_id":"IC_kwDODBCWws5L6Q0C",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T16:33:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Looking at the data, expecting to make the point that we don't touch C++ all that much anymore:\r\n\r\n![awkward-file-type-changed](https://user-images.githubusercontent.com/1852447/194971541-dcfb78e9-7b6b-4734-ba29-b287e7a28a8a.png)\r\n\r\nIt's true that 2019\u20122020 saw a lot of C++ and kernel changes (v1 development) and 2021\u20122022 saw a lot of Python and test file changes (v2 development). Your final removal of the v1 code is the last little peak on September 10, 2022, but there's a lot of C++ work earlier in the summer. It was @ManasviGoyal's development of GrowableBuffer and LayoutBuilder, as well as @ianna's adjustment of the C++ code to use the new GrowableBuffer and remove v1 dependencies from the C++ code that survived into v2. That _was_ a substantial amount of C++ work, recently, though we don't have reason to expect something like that to happen again.\r\n\r\nIt's also neat to see that there was a lot more test development for v2 than for v1 (shout-out to @ioanaif).\r\n\r\nIt would be too much to write here how this plot was made, except to say that the time-granularity is 2 weeks per time-bin, \"lines changed\" means the max of insertions and removals (so a changed line counts as much as a removed or added line), and this is how file names were classified:\r\n\r\n```python\r\ndef classify(x):\r\n    if (\r\n        re.match(\"^\\{?\\..*\", x)\r\n        or re.match(\"^\\{?dev/\", x)\r\n        or re.match(\"^\\{?studies/\", x)\r\n        or re.match(\"^\\{?requirements.*\\.txt\", x)\r\n        or re.match(\"^\\{?test-requirements.*\\.txt\", x)\r\n        or x in [\r\n            \"CMakeLists.txt\", \"Doxyfile\", \"MANIFEST.in\",\r\n            \"VERSION_INFO\", \"codecov.yml\", \"cuda-build.sh\", \"dlpack\", \"localbuild.py\", \"noxfile.py\", \"pybind11\", \"pyproject.toml\", \"rapidjson\",\r\n            \"runtime.txt\", \"setup.cfg\", \"setup.py\", \"simdjson\", \"src/awkward/_typeparser/type-grammar.lark\",\r\n        ]\r\n    ):\r\n        return \"Development and Packaging\"\r\n    elif re.match(\"^\\{?dependent-project/.*\", x) or re.match(\"^\\{?docs.*/.*\", x) or x in [\r\n        \"CITATION.cff\", \"CONTRIBUTING.md\", \"LICENSE\", \"QUICKSTART.md\", \"README-pypi.md\", \"README.md\",\r\n    ]:\r\n        return \"Documentation\"\r\n    elif (\r\n        re.match(\"^\\{?src/awkward.*\\.py\\}?$\", x)\r\n        or re.match(\"^\\{?awkward1.*\\.py\\}?$\", x)\r\n        or re.match(\".*\\{awkward1 => awkward\\}.*\\.py\\}?$\", x)\r\n        or x in [\"src/{awkward1_cuda_kernels => awkward_cuda_kernels}/__init__.py\", \"{cuda-kernels => src}/awkward1_cuda_kernels/__init__.py\"]\r\n    ):\r\n        return \"Python\"\r\n    elif (\r\n        re.search(\"cpu-kernels/\", x)\r\n        or re.search(\"cuda-kernels/\", x)\r\n        or re.match(\".*\\.cu\\}?$\", x)\r\n        or re.match(\".*(getitem|identities|operations|reducers|sorting|gpu_kernels|kernel-dispatch|kernels?)\\.h\\}?$\", x)\r\n    ):\r\n        return \"Kernels\"\r\n    elif re.match(\".*\\.xml\\}?\", x) or re.match(\"^\\{?kernel-specification.*\", x) or x in [\r\n        \"kernel-test-data.yml\", \"test-data.yml\", \"test-data.yml => kernel-test-data.yml\"\r\n    ]:\r\n        return \"Kernel specification and testing\"\r\n    elif re.match(\".*\\.cpp\\}?$\", x) or re.match(\".*\\.h\\}?$\", x):\r\n        return \"C++\"\r\n    elif re.match(\"^\\{?tests.*\", x):\r\n        return \"Tests\"\r\n    else:\r\n        raise AssertionError(x)\r\n```",
  "created_at":"2022-10-11T00:33:48Z",
  "id":1273943516,
  "issue":503,
  "node_id":"IC_kwDODBCWws5L7tXc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T00:33:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Over in #1778 I took a look at what this split might look like. It's actually fairly straightforward. \r\n\r\n@jpivarski that's a fun graph. I enjoy the exponential-like decay of the C++ activity (if you squint hard enough to ignore the flurry of activity before v1\u2192v2).",
  "created_at":"2022-10-11T09:02:44Z",
  "id":1274354978,
  "issue":503,
  "node_id":"IC_kwDODBCWws5L9R0i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T09:03:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - nice! BTW, we do have some C++ code as strings embedded in Python ;-)",
  "created_at":"2022-10-12T15:14:17Z",
  "id":1276345744,
  "issue":503,
  "node_id":"IC_kwDODBCWws5ME32Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-12T15:14:17Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"That's okay. Those code strings embedded in Python are, by definition, only usable by Python with a C++ JIT available, so it's a different sort of thing than the C++ that we want to isolate in `awkward-core`. Actually, those embedded Python strings are implementation details. The reason for isolating C++ in `awkward-core` and Python in `awkward`, as much as is possible, is to make the project easier to think about from the outside\u2014i.e. public interface. We want the GrowableBuffer and LayoutBuilder C++ in `awkward-core` because that's the place for downstream developers to look for C++ code. Downstream developers won't be able to use the strings embedded in Python.\r\n\r\nSo that's why the criterion applies to the `cpp-headers` directory and not the embedded strings. (If some things ought to move from embedded strings into `cpp-headers` to be visible to downstream developers, then that's anther thing.)",
  "created_at":"2022-10-12T15:40:43Z",
  "id":1276384089,
  "issue":503,
  "node_id":"IC_kwDODBCWws5MFBNZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-12T15:40:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Finally done! See the copious documentation:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/0b3806ae10ee02ac8490eb9d7623194d1f090ddd/src/awkward/_v2/operations/ak_transform.py#L9-L351",
  "created_at":"2022-08-19T21:26:01Z",
  "id":1221103822,
  "issue":516,
  "node_id":"IC_kwDODBCWws5IyJDO",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-08-19T21:26:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"FYI, both `ak._v2.to_rdataframe` and `ak._v2.from_rdataframe` are now in a pre-release. You can pick it up with \r\n```\r\npip install --pre awkward\r\n```\r\n\r\nHere is an example how to use it:\r\n```python\r\ndef test_data_frame_vec_of_real():\r\n    ak_array_in = ak._v2.Array([[1.1, 2.2], [3.3], [4.4, 5.5]])\r\n\r\n    data_frame = ak._v2.to_rdataframe({\"x\": ak_array_in})\r\n\r\n    assert data_frame.GetColumnType(\"x\") == \"ROOT::VecOps::RVec<double>\"\r\n\r\n    ak_array_out = ak._v2.from_rdataframe(\r\n        data_frame,\r\n        column=\"x\",\r\n    )\r\n    assert ak_array_in.to_list() == ak_array_out[\"x\"].to_list()\r\n```\r\n\r\nPlease, let me know if there are any issues, or requests. Thanks!",
  "created_at":"2022-06-23T11:45:53Z",
  "id":1164307957,
  "issue":588,
  "node_id":"IC_kwDODBCWws5FZe31",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T11:45:53Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Completed in https://github.com/scikit-hep/awkward/pull/1625. A short tutorial is [here](https://github.com/ianna/PyHep2022/blob/main/Awkward%20to%20RDataFrame%20and%20back%20v1.ipynb).",
  "created_at":"2022-08-31T18:13:34Z",
  "id":1233261233,
  "issue":588,
  "node_id":"IC_kwDODBCWws5JghKx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T18:13:34Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Until somebody actually asks for this, I'm going to ignore it. (And v2 is more Python-level now, anyway.)",
  "created_at":"2022-04-15T19:45:40Z",
  "id":1100324135,
  "issue":601,
  "node_id":"IC_kwDODBCWws5BlZ0n",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:45:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I think this was fixed (imperfectly). And anyway, the documentation system should be simplified in such a way that we don't have this issue.",
  "created_at":"2022-04-15T19:44:58Z",
  "id":1100323399,
  "issue":607,
  "node_id":"IC_kwDODBCWws5BlZpH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:44:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"In v2, `ak.from_parquet` uses fsspec (though not Dataset, for reasons explained there): #1338.",
  "created_at":"2022-04-15T19:37:43Z",
  "id":1100316318,
  "issue":886,
  "node_id":"IC_kwDODBCWws5BlX6e",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:37:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Let's close this given that we're astroturfing most of this code in v2",
  "created_at":"2022-01-10T09:35:09Z",
  "id":1008690222,
  "issue":949,
  "node_id":"IC_kwDODBCWws48H2Qu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-10T09:35:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've been thinking about this some more @jpivarski, and it seems to me that we want `argmin` et al. to be reducers. This means that we have to support an identity element in the case that the sublist is empty, else we break the interface of reducers (always introducing elements for empty lists). \r\n\r\nMy understanding is that @nsmith- prefers the `ak.singletons` result, which doesn't introduce an element for an empty list. i.e., we *like* the behaviour of `singletons`.\r\n\r\nI'll add the `docs` label because, whatever happens, we should improve the documentation on this.",
  "created_at":"2022-11-18T15:20:27Z",
  "id":1320167588,
  "issue":983,
  "node_id":"IC_kwDODBCWws5OsCik",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T18:35:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> it seems to me that we want `argmin` et al. to be reducers. This means that we have to support an identity element in the case that the sublist is empty, else we break the interface of reducers (always introducing elements for empty lists).\r\n\r\nI think the default should be `mask_identity=True` to return `None` for empty lists. Each of the reducers and reducer-like functions have a different `mask_identity` default (#1873).\r\n\r\nWhen `mask_identity=False`, the `argmin` and `argmax` functions return `-1` for empty lists. This is not a true identity (there is no such thing for `argmin` and `argmax`), but it is a value that can never be returned from any non-empty list. In the usual application of slicing an array with the output of `argmin`/`argmax` on an array with the same shape, the attempt to select the `-1` (last) element from an empty list would fail.\r\n\r\nThis seems like the best thing to do for `argmin`/`argmax`. The only other behavior I can think of is the Awkward 0.x behavior, which was essentially like having `keepdims=True` always on and `[]` was generated for empty lists, rather than `[None]`. But that differs significantly from NumPy's behavior. We shouldn't go back to anything like that.",
  "created_at":"2022-11-18T17:20:15Z",
  "id":1320310069,
  "issue":983,
  "node_id":"IC_kwDODBCWws5OslU1",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-18T17:20:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77 I changed my mind. This does not have to be a `next-release` issue. We can leave it for the far future.",
  "created_at":"2022-11-10T22:28:17Z",
  "id":1310983249,
  "issue":984,
  "node_id":"IC_kwDODBCWws5OJARR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-10T22:28:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is the oldest PR, it's about a policy change, and it would be hard to bring up-to-date, even without #1244.\r\n\r\nIs `ak.flatten(axis=\"records\")` obsolete, now that you've implemented `ak.ravel`? Did that fill the need that this would have filled?\r\n\r\nIt's been about a half year since we talked about this. Can we close the PR?",
  "created_at":"2022-01-21T17:30:28Z",
  "id":1018717124,
  "issue":990,
  "node_id":"IC_kwDODBCWws48uGPE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T17:30:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this is an old PR, and given my limited cycles right now I think it is a good idea to close it. This change was rather to change flatten now that ravel exists. I mostly want to drop all list structure whilst preserving records, which is currently a non-trivial thing to do. We can discuss it again when I make a new pr (with implementation!) :) ",
  "created_at":"2022-01-22T23:23:24Z",
  "id":1019375791,
  "issue":990,
  "node_id":"IC_kwDODBCWws48wnCv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-22T23:23:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Sounds good. There's a lot to focus on!",
  "created_at":"2022-01-24T22:05:55Z",
  "id":1020594498,
  "issue":990,
  "node_id":"IC_kwDODBCWws481QlC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T22:05:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This can be added as a feature at any time, so it does not need to be `next-release`.",
  "created_at":"2022-11-29T22:14:13Z",
  "id":1331389190,
  "issue":1014,
  "node_id":"IC_kwDODBCWws5PW2MG",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-29T22:14:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #1257 ",
  "created_at":"2022-03-09T12:24:55Z",
  "id":1062868414,
  "issue":1034,
  "node_id":"IC_kwDODBCWws4_WhW-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T12:24:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not working on this at the moment, but I had some more thoughts syntax-wise: why not repurpose `:` and `...`? They already have meaning to developers that is compatible:\r\n\r\n* `:, :` for \"two levels\"\r\n* `:, :, :` for \"three levels\"\r\n* `..., :, :` for \"two or more levels\"\r\n* `..., :, :, :` for \"three or more levels\"\r\n\r\nThe only configurations that don't make sense hold for the `\".\"`, `\"*\"` syntax:\r\n\r\n- `:, ...` vs `\".\", \"*\"`\r\n- `:, ..., :` vs `\".\", \"*\", \".\"`\r\n\r\nI think we could decide to raise an Exception for any non-standard usage (i.e. `...` is always the left-most token, or missing).\r\n\r\n~~The benefit of this is that it would also not break compatibility, whereas the `\"*\"` syntax necessarily changes `\".\"` from \"arrays to \"array\". We could introduce it through a deprecation cycle, maintaining both for a small period of time.~~",
  "created_at":"2022-03-09T12:32:44Z",
  "id":1062875480,
  "issue":1038,
  "node_id":"IC_kwDODBCWws4_WjFY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T15:52:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's fine, although `\".\"` and `\"*\"` were an attempt to use existing syntax\u2014from regular expressions. (By extension, `\"+\"` would mean \"at least one.) I was thinking about regular expressions because this is a kind of expression-match.\r\n\r\n`\":\"` and `\"...\"` also make sense, and seem more relevant because these are arrays (though `ak.behavior` isn't slicing an array... but I see the connection).\r\n\r\nEven though we're allowed to break API from v1 to v2, replacing `\".\"` \u2192 `\":\"` and `\"*\"` \u2192 `\"...\"` would be a pretty subtle change, since missing behaviors (because something that used to match no longer matches) are not always caught, or are caught much later than the assignment. If we're going to introduce `\":\"` and `\"...\"`, it would have to be in addition to `\".\"` and `\"*\"`, and having too many synonyms becomes an organizational problem.\r\n\r\nAlthough I _like_ the choice of `\":\"` and `\"...\"`, it may be too late to switch to them, primarily because I don't see the urgency outweighing the problems that a switch would cause. (Am I missing something? Is this anything more than a different choice of symbols, which would be used the same way with `\":\", \":\", \":\"` meaning 3 levels just like `\".\", \".\", \".\"`?)",
  "created_at":"2022-03-09T15:31:06Z",
  "id":1063043979,
  "issue":1038,
  "node_id":"IC_kwDODBCWws4_XMOL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T15:31:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> were an attempt to use existing syntax\u2014from regular expression\r\nYes, I should have touched on this (thanks for the reminder). \r\n\r\nMy thought here is that we're talking about dimensions, so let's use the same syntax that we do for slicing. This uses the actual sentinel objects / slicing mechanism, rather than strings, i.e.\r\n```python\r\nak.behavior[:, :, \"Vector3D\"] = Vector3DArray\r\nak.behavior[..., \"Vector3D\"] = Vector3DArray\r\n```\r\n\r\n> though ak.behavior isn't slicing an array\r\n\r\nAbsolutely, we're in syntactic sugar territory now!\r\n\r\n> Am I missing something? Is this anything more than a different choice of symbols\r\n\r\nEr, actually _I'm_ missing something here - I managed to confuse `\".\"` and `\"*\"`. I've struck it through!",
  "created_at":"2022-03-09T15:55:11Z",
  "id":1063075627,
  "issue":1038,
  "node_id":"IC_kwDODBCWws4_XT8r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T15:55:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We are talking about dimensions, and in retrospect, I should have thought of `\":\"` and `\"...\"`, but I didn't. (I just wasn't thinking about it that way!)",
  "created_at":"2022-03-09T15:58:00Z",
  "id":1063080369,
  "issue":1038,
  "node_id":"IC_kwDODBCWws4_XVGx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T15:58:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is the second-oldest PR, it's about a policy change, and I think it's been forgotten about. It would be difficult to get this up-to-date as things currently stand, let alone after #1244.\r\n\r\nIs it an important feature? It's been half a year since we've talked about it, which is suggestive that it's not that necessary.\r\n\r\nCan we close the PR?",
  "created_at":"2022-01-21T17:28:47Z",
  "id":1018715805,
  "issue":1039,
  "node_id":"IC_kwDODBCWws48uF6d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T17:28:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think we might still want this behaviour, but you make a good case for closing it for now. Let's discuss again in future if/when it is raised again? ",
  "created_at":"2022-01-22T23:25:19Z",
  "id":1019376019,
  "issue":1039,
  "node_id":"IC_kwDODBCWws48wnGT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-22T23:25:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Right. The good news is that the mechanism for doing this is almost exactly the same in v2 as v1, so we can reference this PR when starting a new attempt at implementing it again.",
  "created_at":"2022-01-24T22:07:26Z",
  "id":1020595727,
  "issue":1039,
  "node_id":"IC_kwDODBCWws481Q4P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T22:07:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I like your proposed change here. I *do* think that `any` vs `all` should be a user-parameter - I can imagine a time where transparently populating records when broadcasting a scalar against a record might be useful (`all`), but I mostly find myself wanting to preserve non-record-ness (`any` ). \r\n\r\nWhat do you think of these new commits?",
  "created_at":"2022-01-11T11:58:10Z",
  "id":1009894200,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48McM4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T11:58:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1040?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`main@585569b`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-01-11T12:07:17Z",
  "id":1009901532,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48Md_c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T12:24:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Actually, I don't think this is quite right to call this `promote_scalar_to_record`. Perhaps `stop_at_record` is a better name?",
  "created_at":"2022-01-11T12:07:38Z",
  "id":1009901787,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48MeDb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T12:07:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hmm, maybe this naming isn't the best, though \u00ad\u2014 we're actually just testing whether the layouts at the current depth are records or not. They might be scalars, or they might be lists (of scalars / records). I've therefore changed the PR.",
  "created_at":"2022-01-11T12:15:41Z",
  "id":1009908229,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48MfoF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T12:15:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Since this function is `broadcast_arrays`, it can have fine-grained arguments for \"any\" vs \"all\". This is what people should turn to if another function's broadcasting isn't fine-grained enough. I wouldn't use the word \"stop\", though: I doubt people are going to be thinking of this in terms of the process that implements it (which steps downward to a certain level and then \"stops\"). Maybe `broadcast_any_records` and `broadcast_all_records`?",
  "created_at":"2022-01-11T17:22:18Z",
  "id":1010189105,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48NkMx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T17:22:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Also, I can override that one required-but-not-running test. It's because our set of tests has changed to accommodate Python 3.10; I moved the Windows ones to only test 32-bit on one Python version, which is 3.9 because that's currently the most mainstream.",
  "created_at":"2022-01-11T17:23:44Z",
  "id":1010190292,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48NkfU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T17:23:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> \r\n\r\nI see your point. It also might be worth pinning down some concrete examples to discuss; there are some places where this new behaviour might not be desirable.\r\n\r\n## Broadcasting same records\r\nGiven these arrays,\r\n```python\r\n>>> left = ak.Array([[{\"x\": [1, 2]}]])\r\n>>> right = ak.Array([[{\"x\": [[3, 4], [5, 6]]}]])\r\n```\r\nthe current behaviour is as follows:\r\n```python3\r\n>>> ak.broadcast_arrays(left, right)\r\n[<Array [[{x: [[1, 1], [2, 2]]}]] type='1 * var * {\"x\": var * var * int64}'>,\r\n <Array [[{x: [[3, 4], [5, 6]]}]] type='1 * var * {\"x\": var * var * int64}'>]\r\n ```\r\nWith `all`, we would have:\r\n```python\r\n[<Array [[{x: [1, 2]}]] type='1 * var * {\"x\": var * int64}'>,\r\n <Array [[{x: [[3, 4], [5, 6]]}]] type='1 * var * {\"x\": var * var * int64}'>]\r\n```\r\n\r\n I think that this behaviour is wrong. My feeling is that we should try and broadcast through the records, and *only if they're not compatible* do we return early at this depth. A record being compatible with another is determined by, to my mind, `ak.fields(this) == ak.fields(that)`.  If `allow_incompatible_records=False` then encountering incompatible records would raise an `Exception` as it currently does in `main`.\r\n\r\n## Promoting non-records to records\r\nMaybe the non-record \u00ad\u2013 record broadcasting could be a nice option. Unlike non-identical records, the current non-record-becomes-record behaviour is well defined, so it could be an opt in via `coerce_to_record=True`? \r\n\r\ne.g.\r\n```python\r\n>>> scalar = ak.Array([5])\r\n>>> ak.broadcast_arrays(left, scalar, coerce_to_record=True)\r\n[<Array [[{x: [1, 2]}]] type='1 * var * {\"x\": var * int64}'>,\r\n <Array [[{x: [5, 5]}]] type='1 * var * {\"x\": var * int64}'>]\r\n```\r\nand\r\n```python\r\n>>> ak.broadcast_arrays(left, scalar, coerce_to_record=False)\r\n[<Array [[{x: [1, 2]}]] type='1 * var * {\"x\": var * int64}'>,\r\n <Array [[5]] type='1 * var * int64'>]\r\n```\r\n\r\nThe overall new behaviour would then be:\r\n\r\n- Identical (compatible) records are transparent to `broadcast_and_apply`\r\n- Incompatible records don't raise a `ValueError`, but instead stop broadcasting at that layout (like `all` currently does). Maybe this becomes an error if `allow_incompatible_records` is `False`?\r\n- Record \u2013 non-record cases stop broadcasting, unless `coerce_to_record` is set to `True`\r\n\r\nAs for the API, normally I advocate for new functions, but in this case I feel like it might be better to have parameters to `broadcast_arrays`. This is primarily because we currently expose the NEP 35 equivalents at the high-level API (i.e. `ak.ravel`), so if we have to have `broadcast_arrays`, we might as well let it have a broader API instead of multiple separate additional functions. Does this argument appeal to you?",
  "created_at":"2022-01-11T20:39:04Z",
  "id":1010341594,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48OJba",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T20:49:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Transparent broadcasting of compatible records (all `inputs` have the same sets of fields) had to be disabled because functions with broadcasting, such as `+`, were doing bad things like:\r\n\r\n```python\r\n>>> ak.Array([{\"r\": 1, \"phi\": 0.1}]) + ak.Array([{\"r\": 2, \"phi\": 0.2}])   # real code raises error, now\r\n<Array [{r: 3, phi: 0.3}] type='1 * {\"r\": int64, \"phi\": float64}'>\r\n```\r\n\r\nThese arrays of polar-coordinate vectors are missing the `behavior` that would add them correctly, but that can happen accidentally. Coffea found that it would be better for such things to be errors than to be added naively (as a reminder to set the `behavior` properly). That means that broadcasting, in general, can't pass them through. Broadcasting has to stop at record boundaries.\r\n\r\nI would have thought that `ak.broadcast_arrays` would raise an error just as attempting to add them does, but it passes the inputs back without modification:\r\n\r\n```python\r\n>>> ak.broadcast_arrays(ak.Array([{\"r\": 1, \"phi\": 0.1}]), ak.Array([{\"r\": 2, \"phi\": 0.2}]))\r\n[<Array [{r: 1, phi: 0.1}] type='1 * {\"r\": int64, \"phi\": float64}'>,\r\n <Array [{r: 2, phi: 0.2}] type='1 * {\"r\": int64, \"phi\": float64}'>]\r\n```\r\n\r\nIs that different in this branch? (Oh yeah, that was the original point of this PR, I think.)\r\n\r\nBroadcasting through records of identical fields could be enabled in `ak.broadcast_arrays` with an argument, but the default should be standard broadcasting, like what `+` does.\r\n\r\nBroadcasting scalars into records looks interesting, but I can't think of a use-case. For most operations (like `+`, in which users can't override broadcasting behaviors), arrays with identical fields can't be used together, so I don't see why one would want to construct arrays with this property.",
  "created_at":"2022-01-11T22:30:42Z",
  "id":1010416839,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48ObzH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T22:30:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Transparent broadcasting of compatible records (all `inputs` have the same sets of fields) had to be disabled because functions with broadcasting, such as `+`, were doing bad things like:\r\n\r\nRight, I recall you mentioning this change. It might be that I don't have a good enough mental model of this particular code yet \u2014 I suggested the identical record case for where you might have sublists within record fields which differ, e.g. \r\n```python\r\n(\r\n    var * pos[x * var * float64],\r\n    var * pos[x * float64]\r\n)\r\n```\r\n\r\nI would naively want this to produce `var * pos[x * var * float64]` (and using the `parameters` of the deeper layout). \r\n\r\nIn fact, this is what we have in `main` (v1):\r\n```python3\r\n>>> a = ak.Array([{'x': [1]}])\r\n>>> b = ak.Array([{'x': [[3, 4]]}])\r\n>>> ak.broadcast_arrays(a, b)\r\n[<Array [{x: [[1, 1]]}] type='1 * {\"x\": var * var * int64}'>,\r\n <Array [{x: [[3, 4]]}] type='1 * {\"x\": var * var * int64}'>]\r\n```\r\n\r\nI'm probably misusing some terminology here, which might be where we are crossing wires.\r\n\r\n\r\n> Broadcasting scalars into records looks interesting, but I can't think of a use-case. For most operations (like `+`, in which users can't override broadcasting behaviors), arrays with identical fields can't be used together, so I don't see why one would want to construct arrays with this property.\r\n\r\nAs for scalars-into-records, we currently also have\r\n```python\r\n>>> c = ak.Array([[3,4]])\r\n>>>  ak.broadcast_arrays(a, c)\r\n[<Array [[{x: [1]}, {x: [1]}]] type='1 * var * {\"x\": var * int64}'>,\r\n <Array [[{x: [3]}, {x: [4]}]] type='1 * var * {\"x\": var * int64}'>]\r\n```\r\nDo I understand correctly that you'd prefer to drop this?",
  "created_at":"2022-01-11T23:12:16Z",
  "id":1010450006,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48Oj5W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T23:12:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm coming back to this with too-large gaps in between.\r\n\r\nBroadcasting and records is just confusing me, maybe they're incompatible concepts. One concept comes from APL/NumPy, land of purely numerical arrays, and the other comes from ALGOL/OOP. Awkward attempts to bring these worlds together as much as possible, but maybe this one just doesn't fit. NumPy-style reducers and sorting, which cross between levels of nested lists when `axis != -1`, also doesn't mix well with records, and I think the original implementation had to be revoked because, however it could be defined, it wasn't predictable. The same thing might be true here.\r\n\r\nI'm not saying the old implementation was right\u2014it was probably allowing too much. Could we just remove broadcasting through records, just treat them as solid objects?\r\n\r\nComing back to the original question,\r\n\r\n> ```python\r\n> >>> x.type\r\n> 4056 * var * {\"u\": ?int64, \"v\": ?int64}\r\n> >>> y.type\r\n> 4056 * var * var * {\"q\": float64, \"t\": float64}\r\n> >>> ak.broadcast_arrays(x, y)\r\n> ValueError ...\r\n> ```\r\n\r\nbroadcasting the `var` to `var * var` is fine, but if `\"u\"`, `\"v\"` is broadcasted somehow into `\"q\"`, `\"t\"` (or even if they had the same field names but different types, like one is scalar and the other is a list), then the records' types have changed. Whatever `parameters` they had would have to be invalidated: if one of them used to be a Momentum4D, it would have to lose that type. That's probably unexpected.\r\n\r\nTaking a step back, languages could take records as being more or less \"solid\": ALGOL-like languages (C, Python, Java) consider records to be very solid: they have names, maybe methods, and constructing them or taking them apart is a laborious process. Structured arrays in NumPy are very loose, and Awkward Array is somewhere in between\u2014it's the fact that they can have behaviors that tightens it somewhat, because you usually don't want Lorentz vectors to turn into non-vectors, but they are _somewhat_ softer than OOP objects. We just have to decide how soft.",
  "created_at":"2022-01-14T14:43:01Z",
  "id":1013186530,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48Y__i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-14T14:43:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, and the set of required tests can get fixed if you update to `main`.",
  "created_at":"2022-01-14T14:43:23Z",
  "id":1013186797,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48ZADt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-14T14:43:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I agree that this is a tricky area: I've rewritten this answer a couple of times. I generally like the feeling in Awkward that records are very loose - `ak.zip` and `ak.unzip` are wonderful features that really solve the awkward (no pun intended) feeling of mapping OO-logic onto array programming. I personally see types (`__record__`) as a secondary, more rigid system that is layered on top of these loose records. As we discussed, these types need to drop the moment that the structure changes, but I think that is a reasonable requirement. \r\n\r\nLet's assume that we always have two main cases:\r\n- identical records with different substructures, i.e. same fields, but internal lists may be different.\r\n- scalar-only with different structures\r\n\r\nI think these cover many of the examples that we would encounter in the wild. \r\n\r\nThere is a third case, for scalar-record, and I think that warrants consideration. Unlike the other two examples, where the operations to bring two arrays into compatible shapes is well posed, here it is not. The whole utility of broadcasting is to make operations between two arrays \"just work\". In the case of scalar vs record, what does \"just work\" even mean? There is no primitive operation that can directly operate between a record and a scalar, unless the record implements a behaviour for it. \r\n\r\nI feel that we should prohibit broadcasting scalars against records. It will be annoying for my use case, but equally, to replicate the behaviour I wanted earlier, you can just pull out the leaf that you need, e.g.\r\n```python\r\nscalar, _ = ak.broadcast_arrays(scalar, record.this.that.leaf)\r\n```\r\nThis _is_ well defined.\r\n\r\nThen, I think we should require that any (record, record) case should permit _only_ matching records. Either we do this by taking only the common fields, *or* we require identical fields. Obviously, we have to drop parameters in the former case.\r\n\r\nHow does this sound? I am not sure if I'm missing something",
  "created_at":"2022-01-14T16:41:47Z",
  "id":1013282754,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48ZXfC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-14T16:43:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think we're on the same page; let me repeat it back in my words to see if we are. (I'm going to avoid the word \"scalar\" because the non-records we're talking about here are lists/arrays.)\r\n\r\n   * Non-records and non-records are unchanged: uncontroversial case.\r\n   * Non-records and records are to be prohibited because it's probably a mistake and `record.this.that.leaf` is easy enough to type. Perhaps the error message should suggest this. (Here, we're taking advantage of the \"softness\" of records, but asking users to explicitly use that softness, rather than making assumptions about what they want.)\r\n   * Records and records with different sets of fields should be prohibited. Whatever they thought they meant by that, it was wrong.\r\n   * Records and records with the same sets of fields could have each individual field get broadcasted and if any records change their structure, they have to lose their `parameters` because they are no longer the same type.\r\n\r\nRecords and records with the same sets of fields still can't be used in any mathematical operations, even if the types of all fields exactly match. But now that I'm thinking of it, that prohibition is not a prohibition in broadcasting, but in function application: `broadcast_and_apply` does _two_ things; mathematical operations are not allowed to do the second of those two things when records are involved. The `ak.broadcast_arrays` function is not doing the second of those two things; it's not applying anything. The output has the same number of arrays as the input.\r\n\r\nIs that right?",
  "created_at":"2022-01-14T17:26:45Z",
  "id":1013315910,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48ZflG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-14T17:26:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski right, that's exactly as I see it. AFAICT, if someone *wants* to do something that operates on two different record types (here \"type\" means the record datashape) then they need to handle that in the getfunction that handles control flow. Awkward code can just treat that as an error.\r\n> Records and records with the same sets of fields still can't be used in any mathematical operations, even if the types of all fields exactly match. \r\n\r\nYes, unless they override the operators via a behaviour(?)\r\n\r\nHow do you feel about taking the intersection of record keys vs requiring them to be identical? I like the idea that it *might* be useful to take the intersection instead of requiring hard compatibility, but perhaps that's a user option with a sane default?\r\n\r\nMaybe scalar is a poor choice of words, as it connotes singular values. Perhaps a better word would be \"primitive\" arrays vs \"record\" arrays? Here I mean any array that contains a record vs any array that does not.",
  "created_at":"2022-01-14T20:08:42Z",
  "id":1013440848,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48Z-FQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-14T22:00:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is the third-oldest PR, it's about a policy change, and we're in agreement about what the `ak.broadcast` behavior ought to be. Something has been implemented for v1 (is it the full change?) but not v2.\r\n\r\nIt looks like it won't be hard to merge with #1244. If #1244 goes into main first (it probably will), I think it would be relatively easy to merge main into this branch and continue. So there's no hurry to finish this, but you'll want to be aware of that dependency.\r\n\r\n(To be clear, I don't think this PR should be closed!)",
  "created_at":"2022-01-21T17:26:58Z",
  "id":1018714307,
  "issue":1040,
  "node_id":"IC_kwDODBCWws48uFjD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T17:30:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This one is old and is a policy change in v1, which won't be changing like that anymore\u2014only bug-fixes. It is a policy that we might pick up in v2, and we've been addressing a lot of questions about how broadcasting works recently (e.g. #1679).",
  "created_at":"2022-09-08T16:26:41Z",
  "id":1240944680,
  "issue":1040,
  "node_id":"IC_kwDODBCWws5J91Ao",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T16:26:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I ran into this again today, with `IndexedArray`s losing their arrayclass due to `layout.parameter` returning `{}` when wrapping a `RecordArray`:\r\n```python\r\n>>> form = ak.forms.Form.fromjson(\"\"\"\r\n{\r\n    \"class\": \"IndexedArray64\",\r\n    \"index\": \"i64\",\r\n    \"content\": {\r\n        \"class\": \"RecordArray\",\r\n        \"contents\": {\r\n            \"index\": \"int64\",\r\n            \"position\": {\r\n                \"class\": \"RecordArray\",\r\n                \"contents\": {\r\n                    \"x\": \"float64\",\r\n                    \"y\": \"float64\",\r\n                    \"z\": \"float64\"\r\n                },\r\n                \"parameters\": {\r\n                    \"__record__\": \"Vector3D\"\r\n                }\r\n            }\r\n        },\r\n        \"parameters\": {\r\n            \"__record__\": \"si_chan_map\"\r\n        }\r\n    }\r\n}\r\n\"\"\")\r\n>>> form.parameter(\"__record__\") is None\r\nTrue\r\n```\r\n\r\nI believe that the best course of action here is to keep the existing per-layout `parameters` attribute, and add a new `resolved_parameters` (name tbd) that merges the parameters within the same dimension. This would also address point (1) in your discussion of `parameters_equal`.\r\n\r\nThis is still on my todo list.",
  "created_at":"2022-05-26T11:48:56Z",
  "id":1138448843,
  "issue":1041,
  "node_id":"IC_kwDODBCWws5D21nL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-26T11:54:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski do you want to ban this at the `to_layout` level, or just the array constructor? I imagine both, as we don't want `from_numpy` to succeed either.",
  "created_at":"2022-10-06T16:29:13Z",
  "id":1270371677,
  "issue":1057,
  "node_id":"IC_kwDODBCWws5LuFVd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T16:29:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yeah, it should be banned at the `to_layout` level. Nothing in the layouts can accept zero-dimensional arrays.\r\n\r\n`to_layout` with an `allow_other=True` argument allows for non-array types, and most often, the intention is to get numbers this way. In NumPy and especially NumPy-API-like libraries, it's easy to get a zero-dimensional array when you really wanted a scalar: `np.array(3.14)` instead of `np.float64(3.14)`. Therefore, the `allow_other=True` case should still let these through, but turning them into actual scalars would be a safer thing to do.\r\n\r\nBoth zero-dimensional arrays and scalars have a `shape` (and `dtype`).\r\n\r\n```python\r\n>>> np.array(3.14).shape\r\n()\r\n>>> np.float64(3.14).shape\r\n()\r\n```\r\n\r\nBut scalars are not instances of `np.ndarray`.\r\n\r\n```python\r\n>>> isinstance(np.array(3.14), np.ndarray)\r\nTrue\r\n>>> isinstance(np.float64(3.14), np.ndarray)\r\nFalse\r\n```\r\n\r\nIf `to_layout` with `allow_other=True` converts anything with an empty shape into a NumPy scalar, I think that would be sufficient:\r\n\r\n```python\r\n>>> something = np.array(3.14)\r\n>>> isinstance(something, np.ndarray)\r\nTrue\r\n>>> # Below is the check that to_layout could do...\r\n>>> if len(getattr(something, \"shape\", (None,))) == 0 and hasattr(something, \"dtype\"):\r\n...     something = something.dtype.type(something)\r\n... \r\n>>> isinstance(something, np.ndarray)\r\nFalse\r\n```",
  "created_at":"2022-10-06T18:37:21Z",
  "id":1270521179,
  "issue":1057,
  "node_id":"IC_kwDODBCWws5Lup1b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T18:37:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #1946",
  "created_at":"2022-12-05T20:34:45Z",
  "id":1338131548,
  "issue":1080,
  "node_id":"IC_kwDODBCWws5PwkRc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T20:34:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is done.",
  "created_at":"2022-10-31T20:46:20Z",
  "id":1297665308,
  "issue":1097,
  "node_id":"IC_kwDODBCWws5NWM0c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T20:46:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This and #1097 are two features of the new `ak.to_parquet`, so I'm merging the issues into \"write an `ak.to_parquet` function for v2.\"",
  "created_at":"2022-04-15T19:27:33Z",
  "id":1100308653,
  "issue":1098,
  "node_id":"IC_kwDODBCWws5BlWCt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:27:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This isn't pressing for this release.",
  "created_at":"2022-11-15T17:35:56Z",
  "id":1315653060,
  "issue":1103,
  "node_id":"IC_kwDODBCWws5Oa0XE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T17:35:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@nsmith- This is the issue I was referring to earlier today; I had forgotten who opened it!",
  "created_at":"2022-03-17T17:39:33Z",
  "id":1071135635,
  "issue":1126,
  "node_id":"IC_kwDODBCWws4_2DuT",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-03-17T17:39:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I was also observing this effect, but I'm not fully convinced this can be explained or solved garbage collector invocation, which is why I'm replying to this rather old issue.\r\n\r\nYou are calling `gc.collect` in every loop, but what if that slows down the loop so much, you stop seeing the leak? When I do\r\n```python\r\nimport awkward as ak\r\nimport gc\r\n\r\ni = 0\r\nwhile True:\r\n    tmp = ak.Array([1])\r\n    i += 1\r\n    if i > 100000:\r\n        print(\"collect\")\r\n        gc.collect()\r\n        i = 0\r\n```\r\nI get steady increase in memory usage, even though garbage collection is being done.",
  "created_at":"2022-07-26T13:28:51Z",
  "id":1195485647,
  "issue":1127,
  "node_id":"IC_kwDODBCWws5HQanP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-26T13:28:51Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I can reproduce growing memory for your trivial example. If I change the Array object to the `v2` implementation (`ak._v2.Array`), I don't see this reproduced. It's not clear to me at this stage where this is a memory leak or fragmentation, but it seems like the former's a reasonable bet.",
  "created_at":"2022-07-26T13:52:29Z",
  "id":1195514207,
  "issue":1127,
  "node_id":"IC_kwDODBCWws5HQhlf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-26T13:53:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I can reproduce growing memory for your trivial example. If I change the Array object to the `v2` implementation (`ak._v2.Array`), I don't see this reproduced. It's not clear to me at this stage where this is a memory leak or fragmentation, but it seems like the former's a reasonable bet.\r\n\r\n@agoose77 - how long before see it? I'm running on master + PR #1560 for ~15 min. It looks like it v1 memory oscillates between 250 - 560 M:\r\n<img width=\"448\" alt=\"Screenshot 2022-07-26 at 16 04 24\" src=\"https://user-images.githubusercontent.com/1390682/181025797-d57861d0-21ff-445b-b0c8-bdcb58051c34.png\">\r\n\r\nand for v2 it's pretty stable at 50 M:\r\n<img width=\"466\" alt=\"Screenshot 2022-07-26 at 16 15 48\" src=\"https://user-images.githubusercontent.com/1390682/181028638-312154bd-f1ce-4093-9b30-42c47197ce7e.png\">\r\n",
  "created_at":"2022-07-26T14:20:49Z",
  "id":1195549033,
  "issue":1127,
  "node_id":"IC_kwDODBCWws5HQqFp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-26T14:20:49Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna good question. I gave it a while, and observed memory growing from $t=0$. Let me run it for longer, and see whether it saturates as expected.",
  "created_at":"2022-07-26T14:53:21Z",
  "id":1195588523,
  "issue":1127,
  "node_id":"IC_kwDODBCWws5HQzur",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-26T14:53:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"For me, it climbs past 1GB (5 minutes). I don't actually have a huge amount of spare memory right now with all of my open tasks, so I won't be able to let it run for any longer :sweat_smile: \r\n",
  "created_at":"2022-07-26T14:59:38Z",
  "id":1195597307,
  "issue":1127,
  "node_id":"IC_kwDODBCWws5HQ137",
  "performed_via_github_app":null,
  "reactions":{
   "eyes":1,
   "total_count":1
  },
  "updated_at":"2022-07-26T14:59:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We've moved from C++ owning the data (ArrayBuilder based on `std::shared_ptr` that is shared with Python) to Python owning the data (a copy of `std::unique_ptr` data in C++ to a NumPy-allocated array\u2014until a few weeks ago, 1.9.0rc8? 9? 10? Now ArrayBuilder is using @ManasviGoyal's new GrowableBuffer, so there isn't even a single `std::unique_ptr` anymore: the _only_ full copy of the data is allocated and owned by NumPy).\r\n\r\nSo memory management for data created by ArrayBuilder (`ak.Array([1])`) has dramatically changed in the last few versions, with more and more reliance on NumPy owning the data (both v1 and v2). Let's only do these tests in the latest version, since that's what's relevant going forward. We shouldn't spend a lot of time diagnosing issues that have already been fixed.",
  "created_at":"2022-07-26T16:03:18Z",
  "id":1195676485,
  "issue":1127,
  "node_id":"IC_kwDODBCWws5HRJNF",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-26T16:03:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski \r\n\r\nI am closing this issue as no action is to be taken. All unused kernels have been removed prior to my investigation of this issue. \r\n\r\nThis can be checked in the following manner: \r\n\r\n```\r\n\r\nfgrep -R --exclude-dir=cuda '\"awkward_' src/awkward/  | sed 's/.*\"\\(awkward_[^\"]*\\)\".*/\\1/' | sort | uniq > used_kernels.txt\r\n\r\npython \r\n\r\nimport subprocess\r\n\r\nwith open(\"used_kernels.txt\") as f:\r\n       used_kernels = f.readlines()\r\n\r\nused_kernels = [x[:-1] for x in used_kernels]\r\nused_kernels.sort()\r\n\r\nexisting_kernels = subprocess.run(['ls', 'src/cpu-kernels/'], stdout=subprocess.PIPE).stdout.decode('utf-8').split('\\n')\r\n\r\nexisting_kernels = [x[:-4] for x in existing_kernels[:-1]]\r\n\r\nexisting_kernels.sort()\r\n\r\nset(existing_kernels) - set(used_kernels)\r\n```",
  "created_at":"2022-11-14T08:14:06Z",
  "id":1313258488,
  "issue":1157,
  "node_id":"IC_kwDODBCWws5ORrv4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-14T08:14:59Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"MEMBER",
  "body":"Great, thanks for checking!",
  "created_at":"2022-11-14T15:22:42Z",
  "id":1313925111,
  "issue":1157,
  "node_id":"IC_kwDODBCWws5OUOf3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-14T15:22:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I just looked into this. `distutils.version.LooseVersion` would be replaced by `packaging.version.Version`, and that's available in our minimally supported Python version, 3.6.\r\n\r\nHowever, that means we take on another strict, package-wide dependency, _just to check version numbers?_ Why isn't this in the standard library? (I'm tempted to just split by `\".\"` and compare tuples, though I know I shouldn't\u2014because of pre-releases.)\r\n\r\nNote: Uproot also needs this.",
  "created_at":"2022-01-04T18:38:59Z",
  "id":1005073980,
  "issue":1185,
  "node_id":"IC_kwDODBCWws476DY8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-04T18:38:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, we're already depending on `setuptools` and `packaging.version.Version` can be accessed via\r\n\r\n```python\r\nsetuptools.extern.packaging.version.parse\r\n```\r\n\r\nI don't know if `setuptools` depends on `packaging` or embeds it (it seems to be the latter, since it's possible to have the above but not the `packaging` package in a fresh Conda environment), so I'll go through the above.",
  "created_at":"2022-01-04T19:58:07Z",
  "id":1005127297,
  "issue":1185,
  "node_id":"IC_kwDODBCWws476QaB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-04T19:58:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I guess it would be a bug in Python 3.11, but Python 3.11 doesn't exist yet. \"Installation\" was the closest I could find to what this is about.",
  "created_at":"2022-01-04T20:13:45Z",
  "id":1005137279,
  "issue":1185,
  "node_id":"IC_kwDODBCWws476S1_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-04T20:13:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> I don't know if setuptools depends on packaging or embeds it\r\n\r\n`setuptools` indeed vendors its dependencies (`packaging` is here: https://github.com/pypa/setuptools/tree/main/setuptools/_vendor/packaging)",
  "created_at":"2022-01-05T15:44:20Z",
  "id":1005839594,
  "issue":1185,
  "node_id":"IC_kwDODBCWws478-Tq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-05T15:44:20Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"MEMBER",
  "body":"@all-contributors please add @BioGeek for doc\r\n",
  "created_at":"2022-01-07T18:00:58Z",
  "id":1007614770,
  "issue":1187,
  "node_id":"IC_kwDODBCWws48Dvsy",
  "performed_via_github_app":null,
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "updated_at":"2022-01-07T18:00:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski \n\nI've put up [a pull request](https://github.com/scikit-hep/awkward-1.0/pull/1210) to add @BioGeek! :tada:",
  "created_at":"2022-01-07T18:01:07Z",
  "id":1007614869,
  "issue":1187,
  "node_id":"IC_kwDODBCWws48DvuV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-07T18:01:07Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "author_association":"MEMBER",
  "body":"ak.singletons and ak.firsts will be kept; I just posted an update in #710.",
  "created_at":"2022-01-04T20:38:11Z",
  "id":1005153135,
  "issue":1189,
  "node_id":"IC_kwDODBCWws476Wtv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-04T20:38:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"ak.singleton had been written with the assumption that the argument has option-type (even if there are no missing values in fact). That's because it was intended for the output of `ak.argmin`/`argmax`, which always has option-type, regardless of the value.\r\n\r\nYour first example didn't work because it has type `3 * int64`, but it would work if it had type `3 * ?int64`, even if that option-type (question mark) is added through an option-type node with no mask (no missing data):\r\n\r\n```python\r\n>>> oops = ak.Array([1, 2, 3])\r\n>>> ak.singletons(ak.Array(ak.layout.UnmaskedArray(oops.layout)))\r\n<Array [[1], [2], [3]] type='3 * var * int64'>\r\n```\r\n\r\nThe original point of the function was to turn option-type into list-type (and `ak.firsts` does the reverse), so maybe it _should_ pass through if there is no option-type at all. (I.e. maybe the original behavior was right.) But then again, the name is \"singletons,\" which doesn't tell you that it has anything to do with option-types\u2014you just expect it to make singleton lists and that's reasonable. The fix will go in.",
  "created_at":"2022-01-04T20:56:41Z",
  "id":1005164448,
  "issue":1189,
  "node_id":"IC_kwDODBCWws476Zeg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-04T20:56:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks for reporting the infinite recursion bug: #1198 fixes it by handling non-array iterables (the tuple, `(first, deltas)`) explicitly.\r\n\r\nYour example still won't run as-is: there's a number of things to fix. First, `ak.numpy` was not supposed to be exposed and has been removed. What you're looking at is not a special NumPy-like submodule of Awkward Array, in the sense of `jax.numpy`, it's the normal `numpy` module that was imported within Awkward Array. Instead of providing a NumPy look-alike, you should use the normal `numpy as np`, so `np.hstack`, `np.ma.hstack`, etc. When we need to override NumPy's behavior, we use NumPy's [NEP-18](https://numpy.org/neps/nep-0018-array-function-protocol.html) (`__array_function__` protocol).\r\n\r\nAlthough `ak.from_numpy(np.array([1, 2, 3]))` is a good way to make one-dimensional Awkward Arrays from NumPy (it shares the memory with NumPy and avoids copying the array), you shouldn't say\r\n\r\n```python\r\ndeltas = ak.from_numpy(np.array([[1, 2], [1, 2], [1, 2, 3]]))\r\n```\r\n\r\nbecause the `np.array` constructor is given non-rectiliear data, which it can't handle other than creating a `dtype=\"O\"` array (which is essentially a Python list\u2014no advantage to using NumPy at all). In fact, NumPy 1.19 will tell you it's wrong:\r\n\r\n```\r\nVisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of\r\nlists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you\r\nmust specify 'dtype=object' when creating the ndarray\r\n```\r\n\r\nand NumPy 1.20 will raise an error. That change in NumPy's behavior is [NEP-34](https://numpy.org/neps/nep-0034-infer-dtype-is-object.html).\r\n\r\nIf you want an array like that, avoid NumPy and go straight to Awkward Array:\r\n\r\n```python\r\ndeltas = ak.Array([[1, 2], [1, 2], [1, 2, 3]])\r\n```\r\n\r\nNext is that even if the array had been regular, [np.hstack](https://numpy.org/doc/stable/reference/generated/numpy.hstack.html) requires all of the arguments in the tuple to have the same number of dimensions. They're not:\r\n\r\n```python\r\n>>> first\r\n<Array [1, 2, 3] type='3 * int64'>\r\n>>> deltas\r\n<Array [[1, 2], [1, 2], [1, 2, 3]] type='3 * var * int64'>\r\n```\r\n\r\nbut `first` can be made 2-dimensional by adding a `np.newaxis` regardless of whether `first` is NumPy or Awkward):\r\n\r\n```python\r\n>>> first[:, np.newaxis]\r\n<Array [[1], [2], [3]] type='3 * 1 * int64'>\r\n```\r\n\r\n([np.hstack](https://numpy.org/doc/stable/reference/generated/numpy.hstack.html) does not broadcast the elements of the tuple it's given.)\r\n\r\nNow, you can pad `deltas` to make it rectangular, but you still can't use `np.hstack` or `np.ma.hstack` on it because (a) `np.hstack` doesn't deal with missing values, only pure NumPy arrays, and (b) while `np.ma.hstack` can do it, it's not a \"regular NumPy function,\" so [NEP-18](https://numpy.org/neps/nep-0018-array-function-protocol.html) doesn't apply: we don't have the power to overload it. The only way to get this method to work is to pad _and_ fill missing values in `deltas`:\r\n\r\n```python\r\n>>> totally_regular = ak.fill_none(ak.pad_none(deltas, 3, axis=-1), 999)\r\n>>> totally_regular\r\n<Array [[1, 2, 999], ... 1, 2, 999], [1, 2, 3]] type='3 * var * int64'>\r\n>>> np.hstack((first[:, np.newaxis], totally_regular))\r\n<Array [[1, 1, 2, 999], ... 999], [3, 1, 2, 3]] type='3 * 4 * int64'>\r\n```\r\n\r\nCombining [ak.pad_none](https://awkward-array.readthedocs.io/en/latest/_auto/ak.pad_none.html) with [ak.fill_none](https://awkward-array.readthedocs.io/en/latest/_auto/ak.fill_none.html) turns `deltas` into a totally regular NumPy array\u2014no variable-length lists and no missing values, and `np.hstack` applies.\r\n\r\nBut then, what's the point of using Awkward Array? Just for reshaping things back so that you could have used NumPy instead?\r\n\r\nThere are other ways of approaching this problem. Starting with the original `first` and `deltas`,\r\n\r\n```python\r\n>>> first\r\n<Array [1, 2, 3] type='3 * int64'>\r\n>>> deltas\r\n<Array [[1, 2], [1, 2], [1, 2, 3]] type='3 * var * int64'>\r\n```\r\n\r\nYou could [ak.concatenate](https://awkward-array.readthedocs.io/en/latest/_auto/ak.concatenate.html) them at `axis=1`, which interleaves them in the way you were getting at with `np.hstack`, but you don't have to make `deltas` rectilinear.\r\n\r\n```python\r\n>>> ak.concatenate((first[:, np.newaxis], deltas), axis=1)\r\n<Array [[1, 1, 2], [2, 1, 2], [3, 1, 2, 3]] type='3 * var * int64'>\r\n```\r\n\r\nIf `first` and `deltas` have some semantic difference, you might want to make them records instead, so that you can access fields by name.\r\n\r\n```python\r\n>>> records = ak.Array({\"first\": first, \"deltas\": deltas})\r\n\r\n>>> records[0]\r\n<Record {first: 1, deltas: [1, 2]} type='{\"first\": int64, \"deltas\": var * int64}'>\r\n>>> records[1]\r\n<Record {first: 2, deltas: [1, 2]} type='{\"first\": int64, \"deltas\": var * int64}'>\r\n>>> records[2]\r\n<Record {first: 3, deltas: [1, 2, 3]} type='{\"first\": int64, \"deltas\": var * int64}'>\r\n\r\n>>> records[1:]\r\n<Array [{first: 2, deltas: [1, 2, ... 2, 3]}] type='2 * {\"first\": int64, \"deltas...'>\r\n>>> records[1:].deltas\r\n<Array [[1, 2], [1, 2, 3]] type='2 * var * int64'>\r\n>>> records[\"deltas\", 1:]\r\n<Array [[1, 2], [1, 2, 3]] type='2 * var * int64'>\r\n```\r\n\r\nWhatever it is you want to do with the array after having put `first` and `deltas` together, you'll likely want to do it in a different way with Awkward Array than you would have in NumPy.",
  "created_at":"2022-01-04T22:25:35Z",
  "id":1005216580,
  "issue":1192,
  "node_id":"IC_kwDODBCWws476mNE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-04T22:25:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Just wanted to say thank you for this thoughtful answer! You are doing great work",
  "created_at":"2022-01-08T05:15:43Z",
  "id":1007888543,
  "issue":1192,
  "node_id":"IC_kwDODBCWws48Eyif",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-08T05:15:43Z",
  "user":"MDQ6VXNlcjMwNjQ0Mg=="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77, could you handle this one? From my perspective, it is not necessary to fix the v1 `is_none`, but if you can take the above into account for v2, that would be great. From your perspective, you might also need to fix v1 because you depend on it for your thesis (unless you have a work-around).\r\n\r\nThere's a project (https://github.com/scikit-hep/awkward-1.0/projects/4) where we can take ownership of high-level function porting. I was catching up on bug-fixes today and plan to take some of those porting tasks tomorrow, but I can avoid this one because you've thought more deeply about it and see something that needs to get fixed.",
  "created_at":"2022-01-04T22:36:42Z",
  "id":1005222668,
  "issue":1193,
  "node_id":"IC_kwDODBCWws476nsM",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-01-04T22:36:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks! (I linked the card to this issue.) If you're sure the above is a bug, you can switch the label, too.",
  "created_at":"2022-01-05T15:40:32Z",
  "id":1005836437,
  "issue":1193,
  "node_id":"IC_kwDODBCWws4789iV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-05T15:40:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Depends upon #1279 to fix tests",
  "created_at":"2022-02-08T10:07:11Z",
  "id":1032430199,
  "issue":1193,
  "node_id":"IC_kwDODBCWws49iaJ3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-08T10:07:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@ioanaif and I were looking at the `is_none` code. It was a lot more complicated than I was expecting, and that was because PR #1249 expanded it to handle cases like `option[option[X]]` (or if one of those `options` is a type-invisible `IndexedArray`) and `option[union[option[X], ...]]`.\r\n\r\nThese cases are not supposed to exist in user ak.Arrays\u2014issue #1910 proposes a guard against them, to try to ensure that we never encounter\r\n\r\n* `IndexedArray` of `option`-type\r\n* `option`-type of `IndexedArray`\r\n* `IndexedArray` of `IndexedArray`\r\n* `option`-type of `option`-type\r\n* `union`-type of `union`-type\r\n* `union`-type in which one of the `contents` is a `union`-type\r\n\r\nThis issue, #1193, also mentions\r\n\r\n* `option`-type of `union`-type (specifically, the three-level combination, `option`-type of `union`-type in which one of the `contents` is a `union`-type, is what is being protected against)\r\n\r\nas a case for `is_none` to handle, but this is also something that shouldn't be allowed to exist. Arrow has already forbidden `option`-type of `union`-type, and we're halfway there: we don't admit that it exists as a type: the `options` are always pushed down to be inside of the `unions`. See, for example,\r\n\r\n```python\r\n>>> array = ak.contents.ByteMaskedArray(\r\n...     ak.index.Index(np.array([1, 1, 0, 1], np.int8)),\r\n...     ak.from_iter([1, \"two\", 999, [1, 2, 3]], highlevel=False),\r\n...     valid_when=True,\r\n... )\r\n\r\n>>> print(array.form.type)\r\nunion[?int64, ?string, option[var * int64]]\r\n```\r\n\r\nThis layout has a `ByteMaskedArray` around a `UnionArray`, but the type claims that the `union` is on the outside and the `option` is on the inside. This is the type it would have if we did a round trip through Arrow (regardless of whether metadata are preserved with `extensionarray=True`/`False`):\r\n\r\n```python\r\n>>> ak.from_arrow(ak.to_arrow(array)).layout\r\n<UnionArray len='4'>\r\n    <tags><Index dtype='int8' len='4'>[0 1 0 2]</Index></tags>\r\n    <index><Index dtype='int32' len='4'>[0 0 1 0]</Index></index>\r\n    <content index='0'>\r\n        <BitMaskedArray valid_when='true' lsb_order='true' len='2'>\r\n            <mask><Index dtype='uint8' len='1'>[1]</Index></mask>\r\n            <content><NumpyArray dtype='int64' len='2'>[  1 999]</NumpyArray></content>\r\n        </BitMaskedArray>\r\n    </content>\r\n    <content index='1'>\r\n        <BitMaskedArray valid_when='true' lsb_order='true' len='1'>\r\n            <mask><Index dtype='uint8' len='1'>[1]</Index></mask>\r\n            <content><ListOffsetArray len='1'>\r\n                <parameter name='__array__'>'string'</parameter>\r\n                <offsets><Index dtype='int64' len='2'>[0 3]</Index></offsets>\r\n                <content><NumpyArray dtype='uint8' len='3'>\r\n                    <parameter name='__array__'>'char'</parameter>\r\n                    [116 119 111]\r\n                </NumpyArray></content>\r\n            </ListOffsetArray></content>\r\n        </BitMaskedArray>\r\n    </content>\r\n    <content index='2'>\r\n        <UnmaskedArray len='1'>\r\n            <content><ListOffsetArray len='1'>\r\n                <offsets><Index dtype='int64' len='2'>[0 3]</Index></offsets>\r\n                <content><NumpyArray dtype='int64' len='3'>[1 2 3]</NumpyArray></content>\r\n            </ListOffsetArray></content>\r\n        </UnmaskedArray>\r\n    </content>\r\n</UnionArray>\r\n\r\n>>> print(ak.from_arrow(ak.to_arrow(array)).layout.form.type)\r\nunion[?int64, ?string, option[var * int64]]\r\n```\r\n\r\nIssue #1910 is asking to forbid non-canonical layouts in the ak.Array constructor; the `array` above would be another non-canonical case.\r\n\r\nSo with all of these taken together, users won't _have_ arrays like the ones that inspired issue #1193 and PR #1249, and the implementation of `is_none` could go back to its simpler form.\r\n\r\nSorry that, at the time, I didn't seem to notice that the arrays that `is_none` is being protected against are non-canonical.",
  "created_at":"2022-11-24T15:51:31Z",
  "id":1326617840,
  "issue":1193,
  "node_id":"IC_kwDODBCWws5PEpTw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-24T15:51:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Right  - my understanding was that we've developed an internal convention of only operating upon simplified arrays, but it might have always been the case and you just forgot! \r\n\r\nI was thinking of this issue when we recently discussed \"canonical\" layouts.",
  "created_at":"2022-11-24T17:54:45Z",
  "id":1326740252,
  "issue":1193,
  "node_id":"IC_kwDODBCWws5PFHMc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-24T17:54:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1196?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1196](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1196?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6881ef2) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1196?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1196/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `83.28% <100.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1196/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.08% <100.00%> (+0.18%)` | :arrow_up: |\n",
  "created_at":"2022-01-04T20:18:08Z",
  "id":1005140156,
  "issue":1196,
  "node_id":"IC_kwDODBCWws476Ti8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-04T20:18:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1197?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1197](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1197?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (896c8f0) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1197?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [.../awkward/\\_v2/operations/structure/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1197/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3NpbmdsZXRvbnMucHk=) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1197/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `83.28% <0.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1197/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.08% <0.00%> (+0.18%)` | :arrow_up: |\n",
  "created_at":"2022-01-04T21:05:13Z",
  "id":1005169681,
  "issue":1197,
  "node_id":"IC_kwDODBCWws476awR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-04T21:05:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1198?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1198](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1198?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (09526cf) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1198?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1198/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `83.28% <100.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1198/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.08% <100.00%> (+0.18%)` | :arrow_up: |\n",
  "created_at":"2022-01-04T22:04:59Z",
  "id":1005204734,
  "issue":1198,
  "node_id":"IC_kwDODBCWws476jT-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-04T22:04:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1199?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1199](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1199?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (743994d) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1199?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [.../awkward/\\_v2/operations/structure/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1199/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3NpbmdsZXRvbnMucHk=) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1199/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `83.28% <100.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1199/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.08% <100.00%> (+0.18%)` | :arrow_up: |\n",
  "created_at":"2022-01-04T22:26:36Z",
  "id":1005217115,
  "issue":1199,
  "node_id":"IC_kwDODBCWws476mVb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-04T22:26:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1200?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1200](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1200?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (693ad25) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1200?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [.../awkward/\\_v2/operations/structure/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1200/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3NpbmdsZXRvbnMucHk=) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1200/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `83.28% <100.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1200/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.08% <100.00%> (+0.18%)` | :arrow_up: |\n",
  "created_at":"2022-01-05T10:16:50Z",
  "id":1005554193,
  "issue":1200,
  "node_id":"IC_kwDODBCWws4774oR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-05T15:55:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm closing this one since there are already new changes integrated from recent PRs. It will be easier to open a new one, or integrate this into an ongoing development of the LayoutBuilder.",
  "created_at":"2022-06-03T09:54:35Z",
  "id":1145798480,
  "issue":1200,
  "node_id":"IC_kwDODBCWws5ES39Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-03T09:54:35Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1201?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1201](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1201?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5c5bf47) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.00%`.\n> The diff coverage is `54.05%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1201?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [.../awkward/\\_v2/operations/structure/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1201/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3NpbmdsZXRvbnMucHk=) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_list.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1201/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19saXN0LnB5) | `50.00% <42.30%> (-30.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1201/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `64.79% <66.66%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1201/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `83.28% <100.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1201/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.08% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1201/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.40% <0.00%> (+2.00%)` | :arrow_up: |\n",
  "created_at":"2022-01-05T19:57:33Z",
  "id":1006033601,
  "issue":1201,
  "node_id":"IC_kwDODBCWws479trB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-05T19:57:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1202?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1202](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1202?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ba6029d) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1202?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1202/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `83.19% <\u00f8> (\u00f8)` | |\n| [.../awkward/\\_v2/operations/structure/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1202/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3NpbmdsZXRvbnMucHk=) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1202/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `83.28% <100.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1202/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.08% <100.00%> (+0.18%)` | :arrow_up: |\n",
  "created_at":"2022-01-05T20:28:33Z",
  "id":1006053912,
  "issue":1202,
  "node_id":"IC_kwDODBCWws479yoY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-05T20:28:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1203?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1203](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1203?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2c54cc8) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.00%`.\n> The diff coverage is `55.26%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1203?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [.../awkward/\\_v2/operations/structure/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3NpbmdsZXRvbnMucHk=) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_list.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19saXN0LnB5) | `50.00% <42.30%> (-30.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `64.79% <66.66%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `83.28% <100.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.08% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `83.19% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1203/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.40% <0.00%> (+2.00%)` | :arrow_up: |\n",
  "created_at":"2022-01-05T21:00:31Z",
  "id":1006073054,
  "issue":1203,
  "node_id":"IC_kwDODBCWws4793Te",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-05T21:00:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1204](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ed61444) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.00%`.\n> The diff coverage is `56.09%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [.../awkward/\\_v2/operations/structure/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3NpbmdsZXRvbnMucHk=) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_list.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19saXN0LnB5) | `50.00% <42.30%> (-30.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `64.79% <66.66%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19udW1weS5weQ==) | `88.88% <75.00%> (-11.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `83.28% <100.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.08% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `83.19% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1204/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.40% <0.00%> (+2.00%)` | :arrow_up: |\n",
  "created_at":"2022-01-05T21:25:34Z",
  "id":1006089644,
  "issue":1204,
  "node_id":"IC_kwDODBCWws4797Ws",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-05T21:25:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1206](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b3f563c) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.35%`.\n> The diff coverage is `77.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `90.59% <\u00f8> (\u00f8)` | |\n| [.../awkward/\\_v2/operations/structure/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3NpbmdsZXRvbnMucHk=) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_list.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19saXN0LnB5) | `50.00% <42.30%> (-30.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `64.99% <66.66%> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfbWVhbi5weQ==) | `78.57% <70.00%> (-1.43%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_moment.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfbW9tZW50LnB5) | `78.57% <70.00%> (-1.43%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19udW1weS5weQ==) | `88.88% <75.00%> (-11.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_covar.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY292YXIucHk=) | `82.35% <76.92%> (+2.35%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_var.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfdmFyLnB5) | `82.35% <76.92%> (+2.35%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_corr.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY29yci5weQ==) | `81.81% <77.77%> (+1.81%)` | :arrow_up: |\n| ... and [22 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1206/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-06T23:47:53Z",
  "id":1007020665,
  "issue":1206,
  "node_id":"IC_kwDODBCWws48Bep5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-07T16:38:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1207](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1dd4594) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **decrease** coverage by `0.09%`.\n> The diff coverage is `69.34%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `79.13% <7.14%> (-4.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `80.82% <9.09%> (-2.23%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `59.42% <10.00%> (-1.23%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `55.25% <20.00%> (-0.83%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fanNvbl9maWxlLnB5) | `47.05% <43.75%> (-27.95%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.14% <50.00%> (-0.23%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.76% <50.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.59% <58.33%> (-0.47%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `81.97% <58.82%> (-0.88%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_json.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qc29uLnB5) | `68.75% <65.51%> (-6.25%)` | :arrow_down: |\n| ... and [11 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1207/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-07T13:47:51Z",
  "id":1007420744,
  "issue":1207,
  "node_id":"IC_kwDODBCWws48DAVI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-04T14:51:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@ianna Be careful to exclude the pybind11 directory from your PR, so that you don't accidentally downgrade it. (It's happened before: see https://github.com/scikit-hep/awkward-1.0/pull/1223.)\r\n\r\nThis will fix it in your local repo, and then check it in:\r\n\r\n```bash\r\ncd pybind11/\r\ngit checkout master\r\ngit pull origin master\r\ngit checkout 45f792efdd92da094548e2095d6efdbfa7e536ee   # ignore warnings about detached HEAD; we know...\r\ncd ..\r\ngit add pybind11\r\ngit commit -m \"Leave 'pybind11' at version 2.9.0.\"\r\ngit push\r\n```",
  "created_at":"2022-01-21T16:35:38Z",
  "id":1018670709,
  "issue":1207,
  "node_id":"IC_kwDODBCWws48t651",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-01-21T16:35:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - Here is a reference for the PR as it is now. Note, this v2 `to_json` code does not have the optimisations we have discussed, so this is the worst estimate.\r\n\r\n**v2** `from_json` is **4x** faster than **v1**: \r\n```python\r\nIn [4]: %%timeit\r\n   ...: ak.from_json(\"[[1.1, 2.2, 3], [], [4, 5.5]]\")\r\n   ...: \r\n   ...: \r\n670 \u00b5s \u00b1 2.06 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1,000 loops each)\r\n\r\nIn [5]: %%timeit\r\n   ...: ak._v2.operations.convert.from_json(\"[[1.1, 2.2, 3], [], [4, 5.5]]\")\r\n   ...: \r\n   ...: \r\n152 \u00b5s \u00b1 1.72 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\r\n```\r\n**v2** `to_json` is **2x** slower than **v1**: \r\n```python\r\nIn [7]: b = ak.layout.NumpyArray(\r\n   ...:     np.array(\r\n   ...:         [\r\n   ...:             [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]],\r\n   ...:             [[10.1, 20.2, 30.3], [40.4, 50.5, 60.6]],\r\n   ...:         ]\r\n   ...:     )\r\n   ...: )\r\n\r\nIn [8]: %%timeit\r\n   ...: ak.to_json(b)\r\n   ...: \r\n   ...: \r\n32.7 \u00b5s \u00b1 237 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [9]: b2 = ak._v2.contents.NumpyArray(\r\n   ...:     np.array(\r\n   ...:         [\r\n   ...:             [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]],\r\n   ...:             [[10.1, 20.2, 30.3], [40.4, 50.5, 60.6]],\r\n   ...:         ]\r\n   ...:     )\r\n   ...: )\r\n\r\nIn [10]: %%timeit\r\n    ...: ak._v2.operations.convert.to_json(b2)\r\n    ...: \r\n    ...: \r\n62.3 \u00b5s \u00b1 493 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\r\n```",
  "created_at":"2022-01-31T10:53:47Z",
  "id":1025610148,
  "issue":1207,
  "node_id":"IC_kwDODBCWws49IZGk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-31T10:53:47Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"These are very peculiar test cases\u2014they're serializing/deserializing a very small array many times. In a simple performance model with _O(n)_ asymptotic dependence and _O(1)_ constant-time overhead, these tests are only measuring the _O(1)_ part. Usually, we're only interested in the _O(n)_ part.",
  "created_at":"2022-01-31T20:25:29Z",
  "id":1026177135,
  "issue":1207,
  "node_id":"IC_kwDODBCWws49Kjhv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-31T20:25:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - The v2 json de-/serialisation functions in this PR use [Python json](https://docs.python.org/3/library/json.html) and do not depend on RapidJSON. The latter can be removed when the v1 code is phased out!\r\n\r\nOne issue is that Python json decoder understands `'NaN'`, `'Infinity'`, and `'-Infinity'` as their corresponding `float` values. Allowing the decoder understand configurable strings is doable, but a bit tricky (https://bugs.python.org/issue29992) The question is how important is to keep this functionality?\r\n\r\n",
  "created_at":"2022-02-03T14:27:26Z",
  "id":1029044448,
  "issue":1207,
  "node_id":"IC_kwDODBCWws49Vfjg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-03T14:27:26Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @jpivarski - The v2 json de-/serialisation functions in this PR use [Python json](https://docs.python.org/3/library/json.html) and do not depend on RapidJSON. The latter can be removed when the v1 code is phased out!\r\n> \r\n> One issue is that Python json decoder understands `'NaN'`, `'Infinity'`, and `'-Infinity'` as their corresponding `float` values. Allowing the decoder understand configurable strings is doable, but a bit tricky (https://bugs.python.org/issue29992) The question is how important is to keep this functionality?\r\n\r\nI think, I'll implement it as a post processing step in the recursively applied action.",
  "created_at":"2022-02-03T14:46:42Z",
  "id":1029063357,
  "issue":1207,
  "node_id":"IC_kwDODBCWws49VkK9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-03T14:46:42Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"The Python JSON decoder recognizes non-quoted strings as nan and infinity:\r\n\r\n```python\r\n>>> json.loads('[1.1, 2.2, NaN, 3.3]')\r\n[1.1, 2.2, nan, 3.3]\r\n>>> json.loads('[1.1, 2.2, \"NaN\", 3.3]')\r\n[1.1, 2.2, 'NaN', 3.3]\r\n```\r\n\r\nwhich is different from what the arguments to `to_json`/`from_json` do. Python's JSON encoder/decoder is writing and reading invalid JSON (a feature that can be turned off with some flag, but then NaN/infinity become errors).\r\n\r\nThe arguments to `to_json`/`from_json` write and read valid JSON, but change its interpretation as an Awkward Array. Without the string-converting argument, `'[1.1, 2.2, \"NaN\", 3.3]'` would be interpreted as a union array; with it, it's interpreted as a numeric array with a NaN value. The same is true of the complex-conversion argument: `[{\"real\": 1.1, \"imag\": 2.2}]` is valid JSON that could be interpreted as a record array (by default) or as a numeric array with complex type (with the argument).\r\n\r\nIf we keep in our arguments, there will be two ways to deal with NaN/infinity, by quoting (our arguments) or not quoting (what the Python json library does by default). Our argument for complex numbers is the only way to deal with complex numbers, though.\r\n\r\nOn RapidJSON, I hadn't been planning to drop it\u2014that was how we could deal with continuous streams of JSON input or output. Also, the JSONSchema-based reader (a v2 thing) depends on it. But we can leave the PR like this and do its reintroduction at a later time. One way or the other, we _did_ have to change the way we use it, so removing it and reintroducing it will make that a cleaner break.",
  "created_at":"2022-02-03T14:51:35Z",
  "id":1029068382,
  "issue":1207,
  "node_id":"IC_kwDODBCWws49VlZe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-03T14:51:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> I think, I'll implement it as a post processing step in the recursively applied action.\r\n\r\nWe should not postprocess the JSON string\u2014that's too dangerous. Getting it right essentially involves parsing and reserializing JSON, which duplicates that effort.",
  "created_at":"2022-02-03T14:53:01Z",
  "id":1029069839,
  "issue":1207,
  "node_id":"IC_kwDODBCWws49VlwP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-03T14:53:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > I think, I'll implement it as a post processing step in the recursively applied action.\r\n> \r\n> We should not postprocess the JSON string\u2014that's too dangerous. Getting it right essentially involves parsing and reserializing JSON, which duplicates that effort.\r\n\r\nNo, I was thinking of the following:\r\n```python\r\n    _CONSTANTS = {}\r\n    if nan_string is not None:\r\n        _CONSTANTS[nan_string] = json.decoder.NaN\r\n    if infinity_string is not None:\r\n        _CONSTANTS[infinity_string] = json.decoder.PosInf\r\n    if minus_infinity_string is not None:\r\n        _CONSTANTS[minus_infinity_string] = json.decoder.NegInf\r\n\r\n    def replace_constants_action(node, **kwargs):\r\n        if isinstance(node, ak._v2.contents.ListOffsetArray):\r\n            if (\r\n                node.parameter(\"__array__\") == \"bytestring\"\r\n                or node.parameter(\"__array__\") == \"string\"\r\n            ):\r\n                out = node._awkward_strings_to_constants(_CONSTANTS)\r\n                return None if out is None else ak._v2.contents.NumpyArray(out)\r\n        else:\r\n            return None\r\n\r\n    if len(_CONSTANTS) > 0:\r\n        layout = layout.recursively_apply(replace_constants_action)\r\n```\r\nand ListOffsetArray function:\r\n```python\r\n    def _awkward_strings_to_constants(self, constants):\r\n        if (\r\n            self.parameter(\"__array__\") == \"bytestring\"\r\n            or self.parameter(\"__array__\") == \"string\"\r\n        ):\r\n            content = ak._v2._util.tobytes(self._content.data)\r\n            starts, stops = self.starts, self.stops\r\n            out = [None] * starts.length\r\n            result = [None] * starts.length\r\n            for i in range(starts.length):\r\n                out[i] = content[starts[i] : stops[i]].decode(errors=\"surrogateescape\")\r\n                if out[i] in constants:\r\n                    result[i] = constants[out[i]]\r\n            return None if result[0] is None else result\r\n```",
  "created_at":"2022-02-03T15:34:39Z",
  "id":1029113311,
  "issue":1207,
  "node_id":"IC_kwDODBCWws49VwXf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-03T15:35:53Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"More like this: Awkward \u2192 Awkward preprocessing and postprocessing:\r\n\r\n```python\r\ndef nonfinite_to_union(node, **kwargs):\r\n    if isinstance(node, ak._v2.contents.NumpyArray):\r\n        is_nonfinite = ~node.nplike.isfinite(node.data)  # true for inf, -inf, nan\r\n        is_posinf = is_nonfinite & (node.data > 0)  # true for inf only\r\n        is_neginf = is_nonfinite & (node.data < 0)  # true for -inf only\r\n        is_nan = node.nplike.isnan(node.data)  # true for nan only\r\n        tags = node.nplike.zeros(len(node), np.int8)\r\n        tags[is_nonfinite] = 1\r\n        index = node.nplike.arange(len(node), dtype=np.int64)\r\n        index[is_posinf] = 0\r\n        index[is_neginf] = 1\r\n        index[is_nan] = 2\r\n        return ak._v2.contents.UnionArray(\r\n            ak._v2.index.Index8(tags),\r\n            ak._v2.index.Index64(index),\r\n            [\r\n                node,\r\n                ak._v2.operations.convert.from_iter(\r\n                    [\"inf\", \"-inf\", \"nan\"], highlevel=False\r\n                ),\r\n            ],\r\n        )\r\n\r\ndef union_to_nonfinite(node, **kwargs):\r\n    if isinstance(node, ak._v2.contents.UnionArray) and len(node.contents) == 2:\r\n        for i in (0, 1):\r\n            not_i = 0 if i == 1 else 1\r\n            if (\r\n                isinstance(node.contents[not_i], ak._v2.contents.NumpyArray)\r\n                and len(node.contents[not_i].shape) == 1\r\n                and node.contents[i].parameter(\"__array__\") == \"string\"   # not bytestring\r\n                and node.contents[i].length <= 3\r\n                and set(node.contents[i].to_list()).issubset({\"inf\", \"-inf\", \"nan\"})\r\n            ):\r\n                is_string = (node.tags.data == i)\r\n                not_string = ~is_string\r\n                strings = node.contents[i].to_list()   # we know this is small\r\n                finite_numbers = node.contents[not_i].data\r\n                all_numbers = node.nplike.empty(len(node), finite_numbers.dtype)\r\n                all_numbers[not_string] = finite_numbers[node.index.data[not_string]]\r\n                try:\r\n                    posinf_index = (node.index.data == strings.index(\"inf\"))\r\n                    all_numbers[posinf_index & is_string] = np.inf\r\n                except ValueError:   # in case the union doesn't have \"inf\"\r\n                    pass\r\n                try:\r\n                    neginf_index = (node.index.data == strings.index(\"-inf\"))\r\n                    all_numbers[neginf_index & is_string] = -np.inf\r\n                except ValueError:   # in case the union doesn't have \"-inf\"\r\n                    pass\r\n                try:\r\n                    nan_index = (node.index.data == strings.index(\"nan\"))\r\n                    all_numbers[nan_index & is_string] = np.nan\r\n                except ValueError:   # in case the union doesn't have \"nan\"\r\n                    pass\r\n                return ak._v2.contents.NumpyArray(all_numbers)\r\n```\r\n\r\nGiven\r\n\r\n```python\r\nwith_nonfinite = ak._v2.from_iter([1.1, 2.2, float(\"inf\"), 3.3, -float(\"inf\"), 4.4, float(\"nan\"), 5.5, 6.6])\r\nwithout_nonfinite = ak._v2.from_iter([1.1, 2.2, 3.3, 4.4, 5.5, 6.6])\r\n```\r\n\r\nThey can be applied like\r\n\r\n```python\r\nak._v2.Array(with_nonfinite.layout.recursively_apply(nonfinite_to_union, numpy_to_regular=True))\r\nak._v2.Array(without_nonfinite.layout.recursively_apply(nonfinite_to_union, numpy_to_regular=True))\r\n```\r\n\r\n(The actions assume that the NumpyArray is flat, so `numpy_to_regular` is needed.)\r\n\r\nThis also assumes that `nplike` has `isfinite` and `isnan`, which it doesn't yet, but that's easy to add. The above actions also don't accept user-supplied strings, but that's just a matter of replacing these constant strings.",
  "created_at":"2022-02-03T16:49:38Z",
  "id":1029188994,
  "issue":1207,
  "node_id":"IC_kwDODBCWws49WC2C",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-02-03T16:49:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - thanks! All strings are now user-configurable, the tests pass. Note, the `_awkward_strings_to_nonfinite` converts JSON to either a `NumpyArray` or a `UnionArray`. The latter is needed if there are other strings a user did not request to convert. Please, see `tests/v2/test_0437-stream-of-many-json-files.py`:\r\n```python\r\n    # read json file containing multiple definitions of 'nan' and 'inf'\r\n    # user-defined strings\r\n    # replace can only work for one string definition\r\n    array = ak._v2.operations.io.from_json_file(\r\n        os.path.join(path, \"samples/test-nan-inf.json\"),\r\n        infinity_string=\"Infinity\",\r\n        nan_string=\"None at all\",\r\n    )\r\n```\r\nActually, now we could introduce multiple strings such as `infinity_strings={\"Infinity\", \"Inf\", \"inf\", \"\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c\"}`\r\n\r\nSome tests were removed as `ndjson` noncompliant. The JSON decoder class implements `ndjson` specs: see https://github.com/ndjson/ndjson-spec\r\n\r\n    - accept newline as line delimiter '\\n' (0x0A) as well as carriage return and newline '\\r\\n' (0x0D0A)\r\n    - ignore empty lines '\\n\\n'\r\n    - raise an error if JSON is nor parsable\r\n\r\nPlease, have a look at the PR when you have time and comment (or commit directly to the branch if you feel like ;-) Thanks!",
  "created_at":"2022-02-04T15:10:11Z",
  "id":1030075118,
  "issue":1207,
  "node_id":"IC_kwDODBCWws49ZbLu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-04T15:10:11Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Here is an idea (not mine) how to read from a JSON stream using Python json: consume opening `[`, call `json.raw_decode(s)` on a bit starting with the first `{` to get an object and its ending offset, then consume a comma and whitespace in between, repeat.",
  "created_at":"2022-02-04T16:16:54Z",
  "id":1030136191,
  "issue":1207,
  "node_id":"IC_kwDODBCWws49ZqF_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-04T16:16:54Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1208](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (21b5028) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/1751ffc262b36e6bf29b85db195c99dbccba27d9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1751ffc) will **increase** coverage by `0.01%`.\n> The diff coverage is `67.79%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [.../awkward/\\_v2/operations/structure/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3NpbmdsZXRvbnMucHk=) | `80.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_list.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19saXN0LnB5) | `50.00% <42.30%> (-30.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `54.87% <66.66%> (+0.18%)` | :arrow_up: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `64.79% <66.66%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19udW1weS5weQ==) | `88.88% <75.00%> (-11.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `83.28% <100.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.08% <100.00%> (+0.18%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `83.19% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1208/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.40% <0.00%> (+2.00%)` | :arrow_up: |\n",
  "created_at":"2022-01-07T17:07:28Z",
  "id":1007577511,
  "issue":1208,
  "node_id":"IC_kwDODBCWws48Dmmn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-07T17:07:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I unfortunately don't have access to a Mac Device too, but there could be a way to run macOS as a docker image. I can't test it right now, but a quick search brings this up. \nhttps://github.com/sickcodes/Docker-OSX",
  "created_at":"2022-01-07T17:46:36Z",
  "id":1007604444,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48DtLc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-07T17:46:36Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'll try to chase it.\r\n\r\n",
  "created_at":"2022-01-07T21:26:52Z",
  "id":1007752748,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48ERYs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-07T21:26:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks! If it doesn't present itself after just running the test some 5\u201210 times, we'll stop and rethink. (I've been thinking about it, and maybe running it many times on the _same_ computer might not trigger it, because triggering it has something to do with how memory happens to be laid out, and it resets itself after each run...)",
  "created_at":"2022-01-07T21:35:27Z",
  "id":1007757249,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48ESfB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-07T21:35:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I wonder if this can be an issue https://stackoverflow.com/questions/24126799/python-garbage-collection-causes-segfault-when-destructing-a-c-object",
  "created_at":"2022-01-07T21:41:44Z",
  "id":1007760307,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48ETOz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-07T21:41:44Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"That's the kind of thing it probably is, though not as an analogy to take too closely. (It's probably some double-free because it happens at random times, and therefore I guess it's in a garbage collection, but the specific StackOverflow question was about Boost Python, not pybind11, and we also track array buffer memory separately from explicit Python objects.)\r\n\r\nSince it's not giving us any clues about itself, I don't think it would be useful to try to solve it deductively. Just finding out which test is at fault via bisection would be a huge improvement.",
  "created_at":"2022-01-07T22:07:21Z",
  "id":1007774595,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48EWuD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-07T22:07:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've just seen this, I don't have a Mac unfortunately :( Maybe we can hack something together using Darling if no-one has access to a Mac?",
  "created_at":"2022-01-11T21:40:28Z",
  "id":1010383811,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48OTvD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T21:40:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@ianna has started to look at it, though it took 1000 runs to get 2 failures. (CI has a higher rate than that.) If there's anything that can trigger the segfault more consistently, then that would be the first step toward bisecting and finding it.\r\n\r\nI was thinking of adding `gc.collect()` at the end of every test (suggested it to @ianna this morning). That is, turn each\r\n\r\n```python\r\ndef test_something(asdf):\r\n```\r\n\r\ninto\r\n\r\n```python\r\ndef test_something(asdf):\r\n    original_test_something(asdf)\r\n    gc.collect()\r\n\r\ndef original_test_something(asdf):\r\n```\r\n\r\nso that the garbage collector would be collecting symbols that were defined in the original `test_something` (being called after that scope is closed).\r\n\r\nThe way it manifested itself at random times, I suspect it's a double-free when garbage collecting, and therefore doing it at deterministic times would help narrow down where the invalid pointer operation is happening.",
  "created_at":"2022-01-11T22:37:24Z",
  "id":1010424982,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48OdyW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T22:37:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - yes, I've added it, but the crash is still not reproducible :-(",
  "created_at":"2022-01-12T10:19:36Z",
  "id":1010883529,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48QNvJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-12T10:19:36Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"```\r\ntests/v2/test_0449-merge-many-arrays-in-one-pass.py::test_lists gc: collectable <cell 0x11ff85ed0>\r\ngc: collectable <cell 0x11ff869e0>\r\ngc: collectable <tuple 0x11ff38c80>\r\ngc: collectable <function 0x11ffa5360>\r\nTrue\r\nPASSED\r\ntests/v2/test_0449-merge-many-arrays-in-one-pass.py::test_records Fatal Python error: Aborted\r\n\r\nCurrent thread 0x0000000109252e00 (most recent call first):\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/logging.py\", line 335 in reset\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/logging.py\", line 693 in _runtest_for\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/logging.py\", line 708 in pytest_runtest_setup\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_callers.py\", line 34 in _multicall\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/runner.py\", line 255 in <lambda>\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/runner.py\", line 311 in from_call\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/runner.py\", line 254 in call_runtest_hook\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/runner.py\", line 215 in call_and_report\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/runner.py\", line 120 in runtestprotocol\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/runner.py\", line 109 in pytest_runtest_protocol\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/main.py\", line 348 in pytest_runtestloop\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/main.py\", line 323 in _main\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/main.py\", line 269 in wrap_session\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/main.py\", line 316 in pytest_cmdline_main\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 162 in main\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 185 in console_main\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/site-packages/pytest/__main__.py\", line 5 in <module>\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/runpy.py\", line 86 in _run_code\r\n  File \"/Users/yana/.pyenv/versions/3.10.1/lib/python3.10/runpy.py\", line 196 in _run_module_as_main\r\n\r\nExtension modules: numpy.core._multiarray_umath, numpy.core._multiarray_tests, numpy.linalg._umath_linalg, numpy.fft._pocketfft_internal, numpy.random._common, numpy.random.bit_generator, numpy.random._bounded_integers, numpy.random._mt19937, numpy.random.mtrand, numpy.random._philox, numpy.random._pcg64, numpy.random._sfc64, numpy.random._generator (total: 13)\r\n```",
  "created_at":"2022-01-12T10:55:23Z",
  "id":1010914311,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48QVQH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-12T10:55:23Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"@ianna I think you said before that \"merge many\" is where it failed before, when it failed. I had been thinking it was in a garbage collection pass and not actually related to the mergemany method or this test. But if it's always failing (when it fails) in `test_0449-merge-many-arrays-in-one-pass.py` even though it enters that function with all garbage already collected, that's suggesting new information: that it _really is_ something in `test_0449-merge-many-arrays-in-one-pass.py` that's the problem.\r\n\r\nIf you run just that one test file, `test_0449-merge-many-arrays-in-one-pass.py` obscenely many times (10\u00d7 or 100\u00d7 your current runs, because it's just one file), does it ever segfault? If so, it's bracketed and we can narrow in.",
  "created_at":"2022-01-12T16:47:55Z",
  "id":1011246814,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48Rmbe",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-01-12T16:47:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I run all the tests (with forced garbage collection after each one) in a 100x loop. It doesn't look good: there is a random segmentation fault on exit (it happened 4 times in addition to 7 aborts). It makes me think that the C++ destructors of the wrapped instances are called in an order we do not expect.\r\n\r\nFirstly, I will update to a master where we do not mix v1 and v2 in tests. Then I'll backtrace destructors and, finally, try to revert to `shared_ptr`. \r\n\r\n```\r\n(base) yana@iannas-macbook-pro-2 awkward-1.0 % grep Seg /tmp/yana/*\r\n/tmp/yana/gc-tests.2022.01.13-09.54.17.log:Fatal Python error: Segmentation fault\r\n/tmp/yana/gc-tests.2022.01.13-10.31.26.log:Fatal Python error: Segmentation fault\r\n/tmp/yana/gc-tests.2022.01.13-11.51.44.log:Fatal Python error: Segmentation fault\r\n/tmp/yana/gc-tests.2022.01.13-11.54.33.log:Fatal Python error: Segmentation fault\r\n(base) yana@iannas-macbook-pro-2 awkward-1.0 % grep Abo /tmp/yana/*\r\n/tmp/yana/gc-tests.2022.01.13-09.49.45.log:tests/v2/test_0557-min-max-initial-argument.py::test Fatal Python error: Aborted\r\n/tmp/yana/gc-tests.2022.01.13-10.29.17.log:tests/v2/test_0404-array-validity-check.py::test_RecordArray Fatal Python error: Aborted\r\n/tmp/yana/gc-tests.2022.01.13-10.51.17.log:tests/v2/test_0449-merge-many-arrays-in-one-pass.py::test_records Fatal Python error: Aborted\r\n/tmp/yana/gc-tests.2022.01.13-11.16.37.log:tests/v2/test_0449-merge-many-arrays-in-one-pass.py::test_lists Fatal Python error: Aborted\r\n/tmp/yana/gc-tests.2022.01.13-11.21.45.log:tests/v2/test_0449-merge-many-arrays-in-one-pass.py::test_lists Fatal Python error: Aborted\r\n/tmp/yana/gc-tests.2022.01.13-11.30.33.log:tests/v2/test_0449-merge-many-arrays-in-one-pass.py::test_lists Fatal Python error: Aborted\r\n/tmp/yana/gc-tests.2022.01.13-11.43.48.log:tests/v2/test_0449-merge-many-arrays-in-one-pass.py::test_records Fatal Python error: Aborted\r\n```",
  "created_at":"2022-01-13T12:07:29Z",
  "id":1012077121,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48UxJB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T12:07:29Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - you were right, the segfault seems to be unrelated to the `unique_ptr`  -  I have managed to reproduce it after reversing to a previous implementation based on `shared_ptr`. The good news is that the segfault happens only in the v2 tests (both with and without `unique_ptr`s). It is good because it's faster to reproduce. I run the v1 and the v2 tests separately. The bad news is that it happens in v2.\r\n\r\nv1 arrays are immutable, that is if we need to modify them, we allocate new memory with `awkward_malloc` (e.g. `new` that is always paired with `delete []`).\r\n\r\nIt does look like we are overwriting memory, I'm trying to narrow it down. Also I'm going through the code and checking  for heap memory errors:\r\n\r\n- [ ] Attempting to free memory already freed.\r\n- [ ] Freeing memory that was not allocated.\r\n- [ ] Attempting to read/write memory already freed.\r\n- [ ] Attempting to read/write to memory which was never allocated.\r\n- [ ] Memory allocation error.\r\n- [ ] Reading/writing to memory out of the bounds of a dynamically allocated array\r\n\r\nand stack (local variables) memory errors:\r\n\r\n- [ ] Reading/writing to memory out of the bounds of a static array. (array index overflow - index too large/underflow - negative index)\r\n- [ ] Function pointer corruption: Invalid passing of function pointer and thus a bad call to a function.",
  "created_at":"2022-01-14T16:39:42Z",
  "id":1013281152,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48ZXGA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-14T16:39:42Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"v2 arrays are also immutable. Once constructed, we should never be overwriting any of their buffers, and the Python objects are replaced, rather than modified in place.\r\n\r\nThe fact that the segfault is in v2 is in another way good news: we can eliminate a variety of ways that v1 can produce errors. v2's NumPy handling introduces significantly fewer avenues for segfaults than v1's pointer handling. But there are a few that remain:\r\n\r\n   * v2 arrays built via `from_iter` (perhaps indirectly through the highlevel `Array` constructor) are supposed to be allocated and owned by NumPy (in pybind11 C++ code, [calling NumPy to allocate and own the buffers here](https://github.com/scikit-hep/awkward-1.0/blob/5f5687fde4bd15ba67707c12370b7cc15bcdae43/include/awkward/python/content.h#L83-L90), [exposed to Python here](https://github.com/scikit-hep/awkward-1.0/blob/5f5687fde4bd15ba67707c12370b7cc15bcdae43/src/python/content.cpp#L1045-L1054), and [assembled into a v2 array here](https://github.com/scikit-hep/awkward-1.0/blob/5f5687fde4bd15ba67707c12370b7cc15bcdae43/src/awkward/_v2/operations/convert/ak_from_iter.py#L73-L78)). The fact that we copy from unique pointers now makes this a lot safer than it used to be.\r\n   * v2 arrays build via `from_numpy` (perhaps indirectly through the highlevel `Array` constructor) are definitely allocated and owned by NumPy; there's no C++ involved.\r\n   * v2 arrays are either modified by NumPy (through nplike), which is completely safe, or they're modified by passing them to kernels via ctypes. It could be a problem if the kernel function oversteps the bounds without checking\u2014a bug in the kernel\u2014though that sort of thing should have been caught by v1. However, :shrug:, maybe the bug has always been there but it's only getting triggered now, due to slightly different tests or (more likely) slightly different memory layouts (since it's platform-dependent and doesn't even happen on all MacOS runs). Another way the ctypes call could go wrong is if NumPy deallocates the buffer while the kernel is still running, but I think both Python's argument refcount rules prohibit that (`sys.getrefcount` always returns at least `2`) and we also follow a convention of only passing arguments in a kernel call with `someindex.to(nplike)`, so the `someindex` name stays in scope beyond the lifetime of the kernel call, anyway. (We never construct objects in the argument list. But like I said, I think Python has friendly semantics for that, anyway.)\r\n\r\nIn v1, there are other ways to get segfaults, but I'm pretty sure the above is a complete list for v2. If you can narrow down which tests cause it, we have a short list of possible causes.",
  "created_at":"2022-01-14T17:11:29Z",
  "id":1013305194,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48Zc9q",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-01-14T17:11:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - as suggested I put one test in a loop: `test_IndexedArray` from\r\n```\r\ntests/v2/test_0404-array-validity-check.py\r\n```\r\noccasional failures confirm that the array data gets corrupted: an Index of an IndexedOptionArray in this case:\r\n```python\r\n>       assert to_list(indexedarray.unique(axis=-1)) == [\r\n            [6.6, 7.7, 8.8, 9.9],\r\n            [5.5],\r\n            [3.3, 4.4],\r\n            [],\r\n            [0.0, 1.1, 2.2],\r\n        ]\r\nE       assert [None, [6.6, ...3.3, 4.4], []] == [[6.6, 7.7, 8....0, 1.1, 2.2]]\r\nE         At index 0 diff: None != [6.6, 7.7, 8.8, 9.9]\r\nE         Full diff:\r\nE         - [[6.6, 7.7, 8.8, 9.9], [5.5], [3.3, 4.4], [], [0.0, 1.1, 2.2]]\r\nE         ?                                             ---------------- -\r\nE         + [None, [6.6, 7.7, 8.8, 9.9], [5.5], [3.3, 4.4], []]\r\nE         ?  ++++++\r\n\r\ntests/v2/test_0404-array-validity-check.py:701: AssertionError\r\n```\r\nHere is a short test that can reproduce it:\r\n\r\n```python\r\n    def orig_test_IndexedArray():\r\n        listoffsetarray = ak._v2.operations.convert.from_iter(\r\n            [[0.0, 1.1, 2.2], [], [3.3, 4.4], [5.5], [6.6, 7.7, 8.8, 9.9]], highlevel=False\r\n        )\r\n    \r\n        index = ak._v2.index.Index64(np.array([4, 3, 2, 1, 0], dtype=np.int64))\r\n        indexedarray = ak._v2.contents.IndexedArray(index, listoffsetarray)\r\n        assert to_list(indexedarray) == [\r\n            [6.6, 7.7, 8.8, 9.9],\r\n            [5.5],\r\n            [3.3, 4.4],\r\n            [],\r\n            [0.0, 1.1, 2.2],\r\n        ]\r\n \r\n>       assert to_list(indexedarray.unique(axis=-1)) == [\r\n            [6.6, 7.7, 8.8, 9.9],\r\n            [5.5],\r\n            [3.3, 4.4],\r\n            [],\r\n            [0.0, 1.1, 2.2],\r\n        ]\r\nE       assert [None, None, None, None, None] == [[6.6, 7.7, 8....0, 1.1, 2.2]]\r\nE         At index 0 diff: None != [6.6, 7.7, 8.8, 9.9]\r\nE         Full diff:\r\nE         - [[6.6, 7.7, 8.8, 9.9], [5.5], [3.3, 4.4], [], [0.0, 1.1, 2.2]]\r\nE         + [None, None, None, None, None]\r\n\r\ntests/v2/test_0404-array-validity-check.py:701: AssertionError\r\n``` ",
  "created_at":"2022-01-18T16:59:04Z",
  "id":1015619068,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48iR38",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2022-01-18T16:59:04Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"This is great\u2014it looks like you've cornered it. Are the wrong values being assigned in a kernel?\r\n\r\n(If so, then all platforms and also Awkward 1.x were affected, though we didn't know until now.)",
  "created_at":"2022-01-18T18:09:20Z",
  "id":1015679257,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48igkZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-18T18:09:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"fixed in https://github.com/scikit-hep/awkward-1.0/pull/1232",
  "created_at":"2022-01-19T14:51:57Z",
  "id":1016541897,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48lzLJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T14:51:57Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Should be closed, I think.",
  "created_at":"2022-01-21T20:16:05Z",
  "id":1018828118,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48uhVW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T20:16:05Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"You're right!",
  "created_at":"2022-01-21T22:08:48Z",
  "id":1018899962,
  "issue":1209,
  "node_id":"IC_kwDODBCWws48uy36",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T22:08:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1211](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (94b81eb) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `1.42%`.\n> The diff coverage is `71.87%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.57% <23.07%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.59% <95.45%> (+0.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/tmp\\_for\\_testing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3RtcF9mb3JfdGVzdGluZy5weQ==) | `5.31% <0.00%> (-77.78%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <0.00%> (-0.79%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `78.87% <0.00%> (-0.29%)` | :arrow_down: |\n| ... and [4 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1211/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-07T23:57:27Z",
  "id":1007827973,
  "issue":1211,
  "node_id":"IC_kwDODBCWws48EjwF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T01:27:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@henryiii I've added skips to pyproject.toml based on what I saw in boost-histogram: https://github.com/scikit-hep/awkward-1.0/pull/1212/files#diff-50c86b7ed8ac2cf95bd48334961bf0530cdc77b5a56f852c5c61b89d735fd711",
  "created_at":"2022-01-10T17:16:01Z",
  "id":1009146366,
  "issue":1212,
  "node_id":"IC_kwDODBCWws48Jln-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-10T17:16:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1212?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1212](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1212?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c40cc07) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-01-10T17:25:57Z",
  "id":1009155783,
  "issue":1212,
  "node_id":"IC_kwDODBCWws48Jn7H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-10T17:25:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I think this looks fine. Can you trigger a build without a release to see if the build passes?",
  "created_at":"2022-01-10T17:44:39Z",
  "id":1009171262,
  "issue":1212,
  "node_id":"IC_kwDODBCWws48Jrs-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-10T17:44:39Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"I think I got that started: https://github.com/scikit-hep/awkward-1.0/actions/runs/1678746604",
  "created_at":"2022-01-10T17:58:04Z",
  "id":1009182013,
  "issue":1212,
  "node_id":"IC_kwDODBCWws48JuU9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-10T17:58:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This one failed and I don't even see an error message: https://github.com/scikit-hep/awkward-1.0/runs/4765296804?check_suite_focus=true",
  "created_at":"2022-01-10T20:37:55Z",
  "id":1009322111,
  "issue":1212,
  "node_id":"IC_kwDODBCWws48KQh_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-10T20:37:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"It's a segmentation fault:\r\n\r\n```\r\n work/awkward-1.0/awkward-1.0/tests/v2/test_0404-array-validity-check.py . [ 70%]\r\n  .............Fatal Python error: Segmentation fault\r\n  \r\n  Current thread 0x0000000113a9de00 (most recent call first):\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/awkward/nplike.py\", line 384 in __call__\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/awkward/_v2/contents/numpyarray.py\", line 747 in _unique\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/awkward/_v2/contents/listoffsetarray.py\", line 929 in _unique\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/awkward/_v2/contents/listarray.py\", line 980 in _unique\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/awkward/_v2/contents/indexedarray.py\", line 725 in _unique\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/awkward/_v2/contents/content.py\", line 1141 in unique\r\n    File \"/Users/runner/work/awkward-1.0/awkward-1.0/tests/v2/test_0404-array-validity-check.py\", line 700 in test_IndexedArray\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/python.py\", line 183 in pytest_pyfunc_call\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/python.py\", line 1641 in runtest\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/runner.py\", line 162 in pytest_runtest_call\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/runner.py\", line 255 in <lambda>\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/runner.py\", line 311 in from_call\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/runner.py\", line 254 in call_runtest_hook\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/runner.py\", line 215 in call_and_report\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/runner.py\", line 126 in runtestprotocol\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/runner.py\", line 109 in pytest_runtest_protocol\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/main.py\", line 348 in pytest_runtestloop\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/main.py\", line 323 in _main\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/main.py\", line 269 in wrap_session\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/main.py\", line 316 in pytest_cmdline_main\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_callers.py\", line 39 in _multicall\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_manager.py\", line 80 in _hookexec\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/pluggy/_hooks.py\", line 265 in __call__\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 162 in main\r\n    File \"/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/lib/python3.9/site-packages/_pytest/config/__init__.py\", line 185 in console_main\r\n    File \"/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/tmp12878rgl/bin/pytest\", line 8 in <module>\r\n```",
  "created_at":"2022-01-11T16:36:31Z",
  "id":1010147682,
  "issue":1212,
  "node_id":"IC_kwDODBCWws48NaFi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T16:36:31Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"> It's a segmentation fault\r\n\r\nSince it's MacOS, it's probably this: https://github.com/scikit-hep/awkward-1.0/issues/1209\r\n\r\n@ianna, I'd like to hold back on releasing 1.8.0 until the segfault is fixed. Let me know when you have something. Thanks!",
  "created_at":"2022-01-11T21:22:23Z",
  "id":1010370417,
  "issue":1212,
  "node_id":"IC_kwDODBCWws48OQdx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T21:22:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Technically, this should be fine (the rebuild passed) - it's not worse than what was there before. #1209 should be a blocking issue, but this PR should be safe to merge.",
  "created_at":"2022-01-11T22:20:09Z",
  "id":1010409744,
  "issue":1212,
  "node_id":"IC_kwDODBCWws48OaEQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T22:20:09Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1213?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1213](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1213?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6315c50) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-01-10T19:55:40Z",
  "id":1009290008,
  "issue":1213,
  "node_id":"IC_kwDODBCWws48KIsY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-10T19:55:40Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1214?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1214](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1214?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f6d675a) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.14%`.\n> The diff coverage is `n/a`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1214?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1214/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `79.74% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/tmp\\_for\\_testing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1214/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3RtcF9mb3JfdGVzdGluZy5weQ==) | `13.52% <0.00%> (+8.21%)` | :arrow_up: |\n",
  "created_at":"2022-01-11T22:13:03Z",
  "id":1010405039,
  "issue":1214,
  "node_id":"IC_kwDODBCWws48OY6v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T16:46:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ha, thanks for the test cases. I only added a tiny test for the draft, this makes things a lot easier.",
  "created_at":"2022-01-11T22:51:24Z",
  "id":1010438146,
  "issue":1214,
  "node_id":"IC_kwDODBCWws48OhAC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T22:51:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It's set to auto-merge.",
  "created_at":"2022-01-11T23:04:57Z",
  "id":1010445496,
  "issue":1214,
  "node_id":"IC_kwDODBCWws48Oiy4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T23:04:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I bet the MacOS failure was due to the segfault issue (#1209), which is fixed in main, so I brought that up-to-date.\r\n\r\nAlso, this almost downgraded pybind11\u2014you'd be the third to do that or almost do that. (See https://github.com/scikit-hep/awkward-1.0/pull/1223!)\r\n\r\nIt's looking good now, so I'm going to auto-merge again.",
  "created_at":"2022-01-21T16:31:16Z",
  "id":1018667173,
  "issue":1214,
  "node_id":"IC_kwDODBCWws48t6Cl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T16:31:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1215?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1215](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1215?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c0f0159) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `0.04%`.\n> The diff coverage is `73.77%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1215?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1215/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1215/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1215/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n",
  "created_at":"2022-01-11T23:59:08Z",
  "id":1010485401,
  "issue":1215,
  "node_id":"IC_kwDODBCWws48OsiZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-11T23:59:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This is a feature, but an essential one: typetracers should probably have an entirely different path for high-level printing. Maybe just the type, since the values section could at best look like\r\n\r\n```\r\n[[[{x: ??, y: ??, z: ??}, ...], ...], ...]\r\n```\r\n\r\nwhich doesn't provide any more information than\r\n\r\n```\r\ntype='?? * var * var * {x: float64, y: float64, z: float64}'\r\n```\r\n\r\nThe easiest thing to implement would be just the type. A values section with lots of `??` could be added if there's a psychological advantage to seeing those \"vars\" as nested brackets. Typetracer-based arrays are likely only internal: users would directly manipulate the Dask arrays, which have typetracers inside of them that don't normally have to be printed out. But maybe the values section with `??` would be useful code for displaying a Dask array as text (outside of Jupyter)?\r\n\r\nThat is, would it be better for Dask Awkward Arrays to look like this:\r\n\r\n```\r\n<Dask Array [[[{x: ??, y: ??, z: ??}, ...], ...], ...] type='?? * var * v...>'\r\n```\r\n\r\nor like this?\r\n\r\n```\r\n<Dask Array type='?? * var * var * {x: float64, y: float64, z: float64}'>\r\n```\r\n\r\nThe latter is the easy option, and it also leaves space for more metadata, like chunksize:\r\n\r\n```\r\n<Dask Array chunksize=1000 type='?? * var * var * {x: float64, y: float64...'>\r\n```",
  "created_at":"2022-01-12T18:13:10Z",
  "id":1011321607,
  "issue":1216,
  "node_id":"IC_kwDODBCWws48R4sH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-12T18:13:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1217](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eb47bf6) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `1.11%`.\n> The diff coverage is `77.85%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.74% <23.07%> (-1.45%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_ravel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3JhdmVsLnB5) | `91.66% <87.50%> (+11.66%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_flatten.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZsYXR0ZW4ucHk=) | `91.66% <90.62%> (+11.66%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.59% <95.45%> (+0.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `79.39% <100.00%> (+0.31%)` | :arrow_up: |\n| [...awkward/\\_v2/operations/structure/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2xvY2FsX2luZGV4LnB5) | `100.00% <100.00%> (+20.00%)` | :arrow_up: |\n| ... and [18 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1217/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-12T17:35:49Z",
  "id":1011290972,
  "issue":1217,
  "node_id":"IC_kwDODBCWws48RxNc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T20:58:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"`completely_flatten` is a method on `Content` now:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/82fda7394418bcae2e4c967f58f9fd5196660803/src/awkward/_v2/contents/content.py#L1231-L1233\r\n\r\nIt's because it only affects one array. Things that operate on only one array should be methods with overloads on each subclass (the OOP way), rather than functions that `if .. elif .. else` them all. We only resort to `if .. elif .. else` style for functions of more than one array, because then we have to deal with the fact that you can get different combinations of node types. With one array, single-dispatch works well.\r\n\r\nSo `completely_flatten` should not be reintroduced to `ak._v2._util`. Thanks!",
  "created_at":"2022-01-12T17:37:30Z",
  "id":1011292408,
  "issue":1217,
  "node_id":"IC_kwDODBCWws48Rxj4",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-01-12T17:37:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1218?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1218](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1218?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c0bff9d) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `0.07%`.\n> The diff coverage is `67.12%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1218?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1218/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1218/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `64.43% <33.33%> (-0.56%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1218/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1218/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n",
  "created_at":"2022-01-12T18:44:50Z",
  "id":1011346361,
  "issue":1218,
  "node_id":"IC_kwDODBCWws48R-u5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-12T18:44:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1219](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a4ce887) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `1.33%`.\n> The diff coverage is `77.63%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `79.43% <\u00f8> (+0.28%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX21hc2sucHk=) | `94.73% <93.33%> (+14.73%)` | :arrow_up: |\n| [src/awkward/\\_v2/tmp\\_for\\_testing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3RtcF9mb3JfdGVzdGluZy5weQ==) | `5.31% <0.00%> (-77.78%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.57% <0.00%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <0.00%> (-0.79%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `76.29% <0.00%> (-0.22%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.59% <0.00%> (+0.19%)` | :arrow_up: |\n| ... and [5 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1219/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-13T07:35:44Z",
  "id":1011873205,
  "issue":1219,
  "node_id":"IC_kwDODBCWws48T_W1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T07:35:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1220](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (38efa40) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `1.17%`.\n> The diff coverage is `77.12%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.74% <23.07%> (-1.45%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `81.99% <80.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3doZXJlLnB5) | `87.50% <86.11%> (+7.50%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_ravel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3JhdmVsLnB5) | `91.66% <87.50%> (+11.66%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.59% <95.45%> (+0.19%)` | :arrow_up: |\n| [...awkward/\\_v2/operations/structure/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2xvY2FsX2luZGV4LnB5) | `100.00% <100.00%> (+20.00%)` | :arrow_up: |\n| ... and [15 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1220/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-13T15:09:09Z",
  "id":1012224649,
  "issue":1220,
  "node_id":"IC_kwDODBCWws48VVKJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T18:10:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1221](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d4e23a1) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `1.38%`.\n> The diff coverage is `72.72%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.74% <23.07%> (-1.45%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.59% <95.45%> (+0.19%)` | :arrow_up: |\n| [...awkward/\\_v2/operations/structure/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2xvY2FsX2luZGV4LnB5) | `100.00% <100.00%> (+20.00%)` | :arrow_up: |\n| [src/awkward/\\_v2/tmp\\_for\\_testing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3RtcF9mb3JfdGVzdGluZy5weQ==) | `5.31% <0.00%> (-77.78%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <0.00%> (-0.79%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `78.87% <0.00%> (-0.29%)` | :arrow_down: |\n| ... and [7 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1221/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-13T08:44:05Z",
  "id":1011918367,
  "issue":1221,
  "node_id":"IC_kwDODBCWws48UKYf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T08:44:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1222](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1afce1b) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `1.30%`.\n> The diff coverage is `73.07%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.57% <23.07%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_ravel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3JhdmVsLnB5) | `91.66% <87.50%> (+11.66%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.59% <95.45%> (+0.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/tmp\\_for\\_testing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3RtcF9mb3JfdGVzdGluZy5weQ==) | `5.31% <0.00%> (-77.78%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <0.00%> (-0.79%)` | :arrow_down: |\n| ... and [7 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1222/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-13T09:30:57Z",
  "id":1011954547,
  "issue":1222,
  "node_id":"IC_kwDODBCWws48UTNz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T09:30:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1223](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (be5261d) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `1.21%`.\n> The diff coverage is `73.83%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.74% <23.07%> (-1.45%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_ravel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3JhdmVsLnB5) | `91.66% <87.50%> (+11.66%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.59% <95.45%> (+0.19%)` | :arrow_up: |\n| [...awkward/\\_v2/operations/structure/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2xvY2FsX2luZGV4LnB5) | `100.00% <100.00%> (+20.00%)` | :arrow_up: |\n| [src/awkward/\\_v2/tmp\\_for\\_testing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3RtcF9mb3JfdGVzdGluZy5weQ==) | `5.31% <0.00%> (-77.78%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <0.00%> (-0.79%)` | :arrow_down: |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1223/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-13T15:36:23Z",
  "id":1012250555,
  "issue":1223,
  "node_id":"IC_kwDODBCWws48Vbe7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T15:36:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1224](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1906456) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `1.21%`.\n> The diff coverage is `71.87%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.74% <23.07%> (-1.45%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.59% <95.45%> (+0.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/tmp\\_for\\_testing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3RtcF9mb3JfdGVzdGluZy5weQ==) | `5.31% <0.00%> (-77.78%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <0.00%> (-0.79%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `64.43% <0.00%> (-0.56%)` | :arrow_down: |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1224/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-13T16:35:08Z",
  "id":1012305361,
  "issue":1224,
  "node_id":"IC_kwDODBCWws48Vo3R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T16:35:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm fine with this, including the restriction on Python version for particular hardware.\r\n\r\nIt should probably also get tested in regular CI. That could be hard to do with the Azure tests, but we also run some GitHub Actions tests in CI: `.github/workflows/tests.yml`. Since wheels.yml and tests.yml are on the same system, is it easy to add this as a test?",
  "created_at":"2022-01-13T16:46:37Z",
  "id":1012315275,
  "issue":1224,
  "node_id":"IC_kwDODBCWws48VrSL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T16:46:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"It seems like you currently don't do any CI for the aarch64 builds except for when deploying releases?\r\n\r\nIt should be possible to set up on either GitHub actions or Azure however it will be quite slow as it's using emulation (from experience elsewhere it'll be ~5x slower).",
  "created_at":"2022-01-13T20:46:37Z",
  "id":1012502469,
  "issue":1224,
  "node_id":"IC_kwDODBCWws48WY_F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T20:46:37Z",
  "user":"MDQ6VXNlcjUyMjA1MzM="
 },
 {
  "author_association":"MEMBER",
  "body":"As I understand it, we're moving from Azure to GitHub Actions, and that's partially done through some GitHub Actions tests in CI that aren't currently required. (I could make them required.)\r\n\r\nThe current Azure tests do the combinations of {x86_64 Linux, Mac, Windows} \u00d7 {Python versions}, which are all the same hardware (x86_64). Azure only covers continuous testing, not deployment.\r\n\r\nThe GitHub Actions that deploy (wheels.yml) have a variety of architectures, recently added by @henryiii.\r\n\r\nThere are a few GitHub Actions that run in continuous testing (test.yml). I would think that they should test all the same architectures that get deployed. The advantages of doing it in test.yml are that this is what we're moving to and the syntax will be the same as for deployment. These tests are not currently required, but I can make them so.\r\n\r\nI didn't realize that there are architectures that get deployed as wheels without testing. The deployment process itself invokes the tests, but wheels.yml only gets triggered manually or in an actual release. If a bug breaks an architecture, we'd want to know that sooner.",
  "created_at":"2022-01-13T21:18:32Z",
  "id":1012523289,
  "issue":1224,
  "node_id":"IC_kwDODBCWws48WeEZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-13T21:18:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm doing a prerelease now, so let's take this as-is to see if it works in the full deployment machinery. I'll revisit this question of whether these hardware architectures (ARM, PowerPC) get regularly tested.",
  "created_at":"2022-01-20T16:31:11Z",
  "id":1017688916,
  "issue":1224,
  "node_id":"IC_kwDODBCWws48qLNU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T16:31:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1225](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (92eee96) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `0.98%`.\n> The diff coverage is `81.81%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `79.43% <\u00f8> (+0.28%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.57% <28.57%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `65.02% <60.00%> (+0.03%)` | :arrow_up: |\n| [...c/awkward/\\_v2/operations/reducers/ak\\_linear\\_fit.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfbGluZWFyX2ZpdC5weQ==) | `85.71% <66.66%> (-1.52%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYWxsLnB5) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYW55LnB5) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnQucHk=) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/reducers/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnRfbm9uemVyby5weQ==) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| ... and [36 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1225/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-14T14:29:51Z",
  "id":1013169449,
  "issue":1225,
  "node_id":"IC_kwDODBCWws48Y70p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:55:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It looks good now (your changes in addition to my restriction of `wrap` to Content/Record).\r\n\r\nI'm going to enable auto-merge. If you have anything else to add (I assume you don't), let me know before the tests pass. Thanks!",
  "created_at":"2022-01-17T18:49:29Z",
  "id":1014812357,
  "issue":1225,
  "node_id":"IC_kwDODBCWws48fM7F",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-01-17T18:49:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This and #1226 conflicted in a test (because #1226 got committed while this PR was still testing), so I had to resolve the conflict and start a new test-merge cycle.",
  "created_at":"2022-01-17T19:23:41Z",
  "id":1014831912,
  "issue":1225,
  "node_id":"IC_kwDODBCWws48fRso",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-01-17T19:23:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"`ak.num` also has the possibility of returning a number, rather than a Content/Record/Array, so it failed the new `wrap` type-check as well. 92eee96ddd6c28f08b5e95503b869c2e26e2bac5 fixes it.\r\n\r\nEven though this is starting to look like an annoyance, I'd rather have it work this way: `wrap` is acting as a (non-static) type-check, ensuring that we really know whether the output is always an array or can sometimes be scalar. Not all uses of `wrap` have to be guarded\u2014most functions return arrays for all inputs. The ones that had to be updated were reducers, `__getitem__`, `__iter__`, and now `num`, which have known cases that can return scalars. The guard makes that more apparent, and it could be a stepping-stone to someday typing the whole codebase. Someday.",
  "created_at":"2022-01-17T19:41:40Z",
  "id":1014841260,
  "issue":1225,
  "node_id":"IC_kwDODBCWws48fT-s",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:41:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1226](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d8f24c5) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `1.09%`.\n> The diff coverage is `78.24%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `79.43% <\u00f8> (+0.28%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.74% <23.07%> (-1.45%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `64.62% <33.33%> (-0.37%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `81.99% <80.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3doZXJlLnB5) | `87.50% <86.11%> (+7.50%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_ravel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3JhdmVsLnB5) | `91.66% <87.50%> (+11.66%)` | :arrow_up: |\n| ... and [21 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1226/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-17T13:28:28Z",
  "id":1014540850,
  "issue":1226,
  "node_id":"IC_kwDODBCWws48eKoy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T13:28:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm wondering why all the tests are failing in the build. I'm checking out a fresh copy of the repo and rebuilding it myself.\r\n\r\nI'm also running the whole test suite on main: https://dev.azure.com/jpivarski/Scikit-HEP/_build/results?buildId=8717&view=results",
  "created_at":"2022-01-17T18:11:56Z",
  "id":1014790665,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fHoJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T18:11:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> I'm also running the whole test suite on main: https://dev.azure.com/jpivarski/Scikit-HEP/_build/results?buildId=8717&view=results\r\n\r\nThe main branch is okay. I wonder what...\r\n\r\nAha! This PR is reverting the old pybind11. That's one thing I don't like about submodules; they don't version control the same way as other files. Since this is a tiny PR, would you mind if I just replace it with a new one that only makes your two intended changes?",
  "created_at":"2022-01-17T18:52:54Z",
  "id":1014814082,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fNWC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T18:52:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> would you mind if I just replace it with a new one\r\n\r\nCertainly. On Thursday you van tell me when the difference was :)",
  "created_at":"2022-01-17T18:57:07Z",
  "id":1014816198,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fN3G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T18:57:07Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"It's just this (no need to take time out of next Thursday's meeting for it):\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/149824787-cfed8ef2-ad42-4639-bb9f-4d5cd2da9c3d.png)\r\n\r\nYou had a local git repo of awkward with pybind11 in it from before the submodule was updated, and then even if you `git pull` on main, everything will be updated except the submodules. When you checked in your changes, you checked in the old submodule, thereby downgrading it. @ioanaif did it earlier this week and I've done it on numerous occasions. The way I avoid it now is to redo a `git clone --recursive ...` whenever a submodule changes. (I did one just now to make sure that I had a clean slate to test compilation.)\r\n\r\nThus, I don't like submodules, but they're still the best solution we have for C++ header-only dependencies, and they're not too bad if we hardly ever update them (which is the case).",
  "created_at":"2022-01-17T19:05:45Z",
  "id":1014820892,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fPAc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:05:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Replaced by #1228.",
  "created_at":"2022-01-17T19:10:13Z",
  "id":1014823692,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fPsM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:10:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Reopening just to see if I successfully updated submodules - do not merge.\r\nMay I suggest we include the submodule update in a commit hook?",
  "created_at":"2022-01-17T19:13:56Z",
  "id":1014825982,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fQP-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:13:56Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"hm, can't reopen - never mind",
  "created_at":"2022-01-17T19:14:23Z",
  "id":1014826284,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fQUs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:14:23Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"I could reopen, so that you can test.\r\n\r\nBut updating a submodule (without simply re-cloning the whole repo) is an annoying process: it involves `cd` into the submodule, `git checkout` _of the submodule, using its repo's commit numbers_, `cd` back out, and an unqualified `git commit`. It's a procedure I have to look up every time, so I try to avoid doing it.\r\n\r\nCatching accidental changes to submodules in a pre-commit could be a good idea, though they really do change rarely. Soon, we'll be dropping dlpack and will only have two of them: pybind11 and RapidJSON.",
  "created_at":"2022-01-17T19:19:49Z",
  "id":1014829713,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fRKR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:19:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Something like\r\n```\r\ngit submodule update --recursive --remote --force\r\n```\r\n\r\n(question)",
  "created_at":"2022-01-17T19:21:16Z",
  "id":1014830587,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fRX7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:21:30Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Apparently it's a \"no\". Closing anyway :)",
  "created_at":"2022-01-17T19:28:33Z",
  "id":1014834755,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fSZD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:28:33Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"Maybe, but like I said, I have to look it up each time. (That would be true of anything I do less frequently than once a week.)\r\n\r\nThinking about the pre-commit check to prevent accidental submodule reversions, which is the biggest issue: git sees the submodule as a detached head\u2014I don't think it would be able to distinguish \"less up-to-date\" from \"more up-to-date.\" It would only see \"different.\" Then, having such a pre-commit could make it hard to legitimately update the submodule.\r\n\r\nUnless the issue happens more frequently, it might be better to not create a solution for it that might have other problems. Currently, it's still the case that I'm the \"single point of merge bottlenecks,\" so I can just be more vigilant about checking for that when I do a review. (The reason this hasn't come up before is because previously, I was also the one doing most of the commits as well. Now that we've moved into a phase where there's multiple contributors, but I'm still reviewing everything, I have to be on the watch for stale submodules. We don't yet need to incorporate that into formal review checklists, though, because that would be something for the phase, with multiple reviewers.)",
  "created_at":"2022-01-17T19:32:24Z",
  "id":1014836814,
  "issue":1227,
  "node_id":"IC_kwDODBCWws48fS5O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:32:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1228](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fcbfd1e) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `1.09%`.\n> The diff coverage is `78.24%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <\u00f8> (-0.79%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `79.43% <\u00f8> (+0.28%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.74% <\u00f8> (+0.98%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.74% <23.07%> (-1.45%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `64.62% <33.33%> (-0.37%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `81.99% <80.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| ... and [23 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1228/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-17T19:27:37Z",
  "id":1014834226,
  "issue":1228,
  "node_id":"IC_kwDODBCWws48fSQy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-17T19:27:37Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1229](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e72c41a) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `0.86%`.\n> The diff coverage is `82.04%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <\u00f8> (-0.79%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `82.81% <\u00f8> (+3.66%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.74% <\u00f8> (+0.98%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.74% <\u00f8> (+0.96%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.57% <28.57%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `65.02% <60.00%> (+0.03%)` | :arrow_up: |\n| [...c/awkward/\\_v2/operations/reducers/ak\\_linear\\_fit.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfbGluZWFyX2ZpdC5weQ==) | `85.71% <66.66%> (-1.52%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYWxsLnB5) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| ... and [41 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1229/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-18T15:35:13Z",
  "id":1015531391,
  "issue":1229,
  "node_id":"IC_kwDODBCWws48h8d_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T19:18:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This is a good idea: #489!\r\n\r\nI think a nice way to do it would be to put the implementations in a submodule the same way that `ak.operations.*` (and `ak._v2.operations.*`) are, but then exposed the functions as a submodule, rather than merging names in a common namespace, the way that the others are. NumPy has established a tradition of randomization functions being in a submodule. (Many of these would be NEP-18 overloads of NumPy functions, anyway.)",
  "created_at":"2022-01-18T22:26:41Z",
  "id":1015890688,
  "issue":1230,
  "node_id":"IC_kwDODBCWws48jUMA",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-01-18T22:26:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I agree that we should use a separate submodule, that would be an aesthetically familiar choice.",
  "created_at":"2022-01-18T22:28:23Z",
  "id":1015891706,
  "issue":1230,
  "node_id":"IC_kwDODBCWws48jUb6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-18T22:28:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I won't be working on this for a little bit, but I wanted to think about it up-front.\r\n\r\nIn NumPy, the preferred API is to use a `Generator`, whose methods the user can call to generate random values. Given that we currently support NumPy `>=1.13.1`, we would also need to implement the top-level legacy API. \r\n\r\nTo implement the new generator API, I propose implementing the class `ak.random.Generator` which accepts an RNG from CuPy/NumPy,.  I think it will be necessary for the user to pass in the RNG instance from CuPy/NumPy: unlike most of the other Awkward highlevel functions, random generators in some cases are not required to accept any array-like arguments, e.g. `np.random.random(size=10)`, which means we cannot use `nplike` to determine the array implementation transparently.\r\n\r\nnplike should gain a `default_rng()` method, that passes through to `np.default_rng()` or `cupy.default_rng()`. Maybe we will want to implement a `GeneratorLike` proxy that ensures we can only call a subset of methods, which would currently be:\r\n- `random`\r\n- `permutation`\r\n- `randint`\r\n\r\n",
  "created_at":"2022-01-19T10:19:22Z",
  "id":1016288315,
  "issue":1230,
  "node_id":"IC_kwDODBCWws48k1Q7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T10:19:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This sounds good. Random number generators are different from other kinds of functions because they can have zero arguments (and yet return different values). Adding methods to nplike is fine\u2014that's what it's there for. It shouldn't be too hard to make a `default_rng` for TypeTracer and JAX as well.\r\n\r\n-----------------\r\n\r\nWhat minimal version of NumPy could we instead take so that we don't have to maintain a legacy API?\r\n\r\nThe current minimum of 1.13.1 (Jul 6, 2017) was chosen because this is when [NEP 13](https://numpy.org/neps/nep-0013-ufunc-overrides.html) was introduced. Without that, innocent-looking expressions would return unexpected results, so it's a hard minimum.\r\n\r\nAnother meaningful point would be 1.17.0 (Jul 26, 2019), when [NEP 18](https://numpy.org/neps/nep-0018-array-function-protocol.html) was added. Currently, people can use Awkward Array with NumPy < 1.17.0, but they have to explicitly choose things like `ak.concatenate` instead of `np.concatenate`. If they use the latter, it would probably just be slow: I think NumPy would iterate over the ak.Array and create a corresponding np.ndarray, then use that. If there are any non-NumPy features, it would fail with an error message. I considered that to be not as catastrophic as returning wrong results.\r\n\r\nIf supporting randomization functions gets easier after some NumPy version number and it's not much newer than 3 years old, we can increase our minimum NumPy version.\r\n\r\n(If there's ever reason to increase our minimum NumPy to 1.20 (Jan 30, 2021) or above, we'll need to drop Python 3.6 support. But requiring NumPy to only be 1 year old is too narrow of a window; it would make Awkward hard to install in some places.)",
  "created_at":"2022-01-19T18:56:53Z",
  "id":1016771431,
  "issue":1230,
  "node_id":"IC_kwDODBCWws48mrNn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T18:56:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It seems as though 1.16 was the final minor version for the legacy random API:\r\n> The RandomState provides access to legacy generators. This generator is considered frozen and will have no further improvements. It is guaranteed to produce the same values as the final point release of NumPy v1.16.\r\n\r\n1.17 still contains the legacy API, but importantly introduces this new API. There were some bugfixes in the 1.17 series, but I think the case for supporting 1.17.0 vs 1.17.x is that the end-user should determine whether they need those fixes.\r\n\r\nI think Awkward could (and perhaps should) be opinionated enough to only implement the Generator interface. \r\n",
  "created_at":"2022-01-19T19:12:23Z",
  "id":1016783971,
  "issue":1230,
  "node_id":"IC_kwDODBCWws48muRj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T19:12:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"A constraint of 1.17.0 versus 1.17.5 or something is probably not too different from a user's point of view. Typically, a system will have or have access to the latest minor release in a major sequence. If the new API wasn't \"right\" until 1.17.x for some x, then it would probably simplify people's lives by cutting on the right x.\r\n\r\nSo if we require NumPy >= 1.17.x, then implementing randomization functions will only need a Generator interface? If I understand correctly that setting this minimum NumPy means less work, then let's do it! I'm going to start a discussion on Deprecations about increasing this minimum.",
  "created_at":"2022-01-19T19:24:58Z",
  "id":1016794279,
  "issue":1230,
  "node_id":"IC_kwDODBCWws48mwyn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T19:24:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"#1238",
  "created_at":"2022-01-19T19:35:05Z",
  "id":1016802146,
  "issue":1230,
  "node_id":"IC_kwDODBCWws48myti",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T19:35:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Pinging @Duchstf here because I'm closing #489 in favor of this one. (Technically, this one is the duplicate because it came later, but I've already put it in a priority list.)",
  "created_at":"2022-04-15T19:49:13Z",
  "id":1100329624,
  "issue":1230,
  "node_id":"IC_kwDODBCWws5BlbKY",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-04-15T19:49:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1231](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (18f81f6) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5f5687fde4bd15ba67707c12370b7cc15bcdae43?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5f5687f) will **increase** coverage by `0.12%`.\n> The diff coverage is `n/a`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/operations/reducers/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYWxsLnB5) | `91.66% <0.00%> (-8.34%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYW55LnB5) | `91.66% <0.00%> (-8.34%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_prod.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfcHJvZC5weQ==) | `91.66% <0.00%> (-8.34%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnQucHk=) | `91.66% <0.00%> (-8.34%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/reducers/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnRfbm9uemVyby5weQ==) | `91.66% <0.00%> (-8.34%)` | :arrow_down: |\n| [...c/awkward/\\_v2/operations/reducers/ak\\_linear\\_fit.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfbGluZWFyX2ZpdC5weQ==) | `85.71% <0.00%> (-1.52%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.57% <0.00%> (-0.17%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_sum.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfc3VtLnB5) | `100.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_flatten.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZsYXR0ZW4ucHk=) | `91.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `78.01% <0.00%> (+0.21%)` | :arrow_up: |\n| ... and [12 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1231/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-19T10:40:05Z",
  "id":1016305349,
  "issue":1231,
  "node_id":"IC_kwDODBCWws48k5bF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T10:40:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"(First question: is this meant to be a draft? I don't know if the changes here are intended to be final. The tests pass! `:)`)\r\n\r\nAs I said in Slack, this script is not intended to have a long lifetime. Pretty soon, we'll generate the CUDA source code one last time and then check it into git for maintenance by hand. Then the script will just be removed. Therefore, it doesn't need to run in all versions of Python; just get it to run in the most convenient version of Python, probably 3.10 because that's the one you're using on your laptop. (I'm using 3.9, but I think all the changes to the ast module are between 3.7 and 3.8.)",
  "created_at":"2022-01-19T19:01:36Z",
  "id":1016775062,
  "issue":1231,
  "node_id":"IC_kwDODBCWws48msGW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T19:01:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is it! You can go ahead and merge it. The script works on my machine which has Python 3.10. And I'll try to check in the auto-generated kernels by the end of next week so this script would have served it's purpose by then. ",
  "created_at":"2022-01-20T13:02:03Z",
  "id":1017484052,
  "issue":1231,
  "node_id":"IC_kwDODBCWws48pZMU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T13:02:03Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1232](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a66570c) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `0.99%`.\n> The diff coverage is `77.86%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <\u00f8> (-0.79%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.57% <28.57%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.79% <75.47%> (-2.48%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.66% <80.00%> (+0.07%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.74% <81.81%> (+0.98%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `83.82% <95.45%> (+0.42%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `79.43% <100.00%> (+0.28%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.07% <100.00%> (+0.17%)` | :arrow_up: |\n| ... and [40 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1232/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-19T12:37:13Z",
  "id":1016426163,
  "issue":1232,
  "node_id":"IC_kwDODBCWws48lW6z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T17:27:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - there was a bug in a cpu kernel. It did not manifest itself in v1 because the kernel was not used there. Now, I'm running the tests with a higher statistic to see if the segfault is indeed gone - there are no crashes so far.",
  "created_at":"2022-01-19T12:37:49Z",
  "id":1016426604,
  "issue":1232,
  "node_id":"IC_kwDODBCWws48lXBs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T12:37:49Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I'm done with this PR. There are no crashes reproduced so far..",
  "created_at":"2022-01-19T15:49:27Z",
  "id":1016602258,
  "issue":1232,
  "node_id":"IC_kwDODBCWws48mB6S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T15:49:27Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm also running https://github.com/scikit-hep/awkward-1.0/actions/runs/1719297682 to make sure that the deployment process won't run into any segfaults (as it did last time).",
  "created_at":"2022-01-19T17:18:37Z",
  "id":1016689079,
  "issue":1232,
  "node_id":"IC_kwDODBCWws48mXG3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T17:18:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@henryiii, this PR definitely fixes a segfault and it seems to be the one @ianna saw on her Mac. (She could reproduce the segfault before fixing the bug, but not after, so that looks good.) So it was good to merge the PR.\r\n\r\nHowever, the wheels.yml test failed, this time in Windows 32-bit: https://github.com/scikit-hep/awkward-1.0/runs/4871371245?check_suite_focus=true\r\n\r\nIf I'm reading this log correctly, it failed to install NumPy. It doesn't look like a segfault. (I also looked at the raw logs, in case the formatting is hiding something.) Is that your interpretation of it as well? Is it just another case that we should exclude because NumPy is not supporting the platform/Python version combination?",
  "created_at":"2022-01-19T18:39:26Z",
  "id":1016757703,
  "issue":1232,
  "node_id":"IC_kwDODBCWws48mn3H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T18:39:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"NumPy does not ship windows 32-bit wheels for Python 3.10: https://pypi.org/project/numpy/1.22.1/#files ",
  "created_at":"2022-01-19T18:53:03Z",
  "id":1016768213,
  "issue":1232,
  "node_id":"IC_kwDODBCWws48mqbV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T18:53:03Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, thanks! I'm following up on #1237.",
  "created_at":"2022-01-19T19:18:07Z",
  "id":1016788664,
  "issue":1232,
  "node_id":"IC_kwDODBCWws48mva4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T19:18:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski Since I believe we changed the printing layout, should the following two test also be updated?: \r\n   \r\n```def test():\r\n        behavior = {}\r\n        behavior[\"__typestr__\", \"Point\"] = \"P\"\r\n        behavior[\"Point\"] = Point\r\n        array = ak._v2.highlevel.Array(\r\n            [\r\n                [{\"x\": 1, \"y\": [1.1]}, {\"x\": 2, \"y\": [2.0, 0.2]}],\r\n                [],\r\n                [{\"x\": 3, \"y\": [3.0, 0.3, 3.3]}],\r\n            ],\r\n            with_name=\"Point\",\r\n            behavior=behavior,\r\n            check_valid=True,\r\n        )\r\n       assert repr(array[0, 0]) == \"<1 [1.1]>\"\r\n```\r\n**E       assert \"<Record {x: 1, y: [1.1]} type='P'>\" == '<1 [1.1]>'**\r\n\r\n\r\n ```def test():\r\n        one = ak._v2.highlevel.Array([[{\"x\": 1}], [], [{\"x\": 2}]], with_name=\"One\")\r\n        two = ak._v2.highlevel.Array([[{\"x\": 1.1}], [], [{\"x\": 2.2}]], with_name=\"Two\")\r\n        assert (\r\n            str(ak._v2.operations.structure.with_name(ak.operations.structure.concatenate([one, two], axis=1), \"All\").type)\r\n            == '3 * var * All[\"x\": float64]'\r\n        )\r\n```\r\n**E       assert '3 * var * var * string' == '3 * var * All[\"x\": float64]'**\r\n",
  "created_at":"2022-01-19T13:26:43Z",
  "id":1016464736,
  "issue":1233,
  "node_id":"IC_kwDODBCWws48lgVg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T13:27:21Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1233](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6a1eb76) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `0.74%`.\n> The diff coverage is `82.49%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <\u00f8> (-0.79%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `82.81% <\u00f8> (+3.66%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.74% <0.00%> (+0.98%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.57% <28.57%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `65.21% <60.00%> (+0.22%)` | :arrow_up: |\n| [...c/awkward/\\_v2/operations/reducers/ak\\_linear\\_fit.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfbGluZWFyX2ZpdC5weQ==) | `85.71% <66.66%> (-1.52%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYWxsLnB5) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYW55LnB5) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| ... and [42 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1233/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-19T14:07:17Z",
  "id":1016499002,
  "issue":1233,
  "node_id":"IC_kwDODBCWws48los6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T11:42:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> Since I believe we changed the printing layout, should the following two test also be updated?\r\n\r\nIn the first one, the custom behavior is supposed to override the `ak._v2.Array.__repr__`. Here's the whole test:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/4d77f519b6aebb6555fea3c73c73a1fe62b41a6f/tests/test_0049-distinguish-record-and-recordarray-behaviors.py#L10-L33\r\n\r\nThe fact that the Point class has a `__repr__` should matter. I'm not surprised that `Point.__repr__` is getting ignored here because `ak.Array.__repr__` was completely rewritten from [this implementation](https://github.com/scikit-hep/awkward-1.0/blob/358375adfbdbd22d3f4cc5f612824286fc48b34c/src/awkward/_util.py#L1562-L1778) to [this implementation](https://github.com/scikit-hep/awkward-1.0/blob/358375adfbdbd22d3f4cc5f612824286fc48b34c/src/awkward/_v2/_prettyprint.py#L12-L239) because of #838. The new implementation probably does not include a check for overridden `__repr__`.\r\n\r\nMaybe just skip this one and we'll get back to it in the final clean-up phase.",
  "created_at":"2022-01-19T19:49:07Z",
  "id":1016812394,
  "issue":1233,
  "node_id":"IC_kwDODBCWws48m1Nq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T19:49:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> ```\r\n>        one = ak._v2.highlevel.Array([[{\"x\": 1}], [], [{\"x\": 2}]], with_name=\"One\")\r\n>        two = ak._v2.highlevel.Array([[{\"x\": 1.1}], [], [{\"x\": 2.2}]], with_name=\"Two\")\r\n>        assert (\r\n>            str(ak._v2.operations.structure.with_name(ak.operations.structure.concatenate([one, two], axis=1), \"All\").type)\r\n>            == '3 * var * All[\"x\": float64]'\r\n>        )\r\n> ```\r\n> \r\n> **E assert '3 * var * var * string' == '3 * var * All[\"x\": float64]'**\r\n\r\nAs for this one, it looks like something is going terribly wrong. We know that record names are being used in type strings already:\r\n\r\n```python\r\n>>> ak._v2.highlevel.Array(\r\n...     ak._v2.contents.RecordArray([\r\n...         ak._v2.contents.NumpyArray([1, 2, 3])],\r\n...         [\"field\"],\r\n...         parameters={\"__record__\": \"SeeThisName\"},\r\n...     )\r\n... )\r\n<Array [{field: 1}, {field: 2}, {field: 3}] type='3 * SeeThisName[field: in...'>\r\n```\r\n\r\nand that's what `ak._v2.operations.structure.with_name` is supposed to do: add the `\"__record__\"` parameter.\r\n\r\nBut you're getting a type string that says `\"3 * var * var * string\"`; it's probably the array that's wrong and not just the type string. Somewhere along the line, some argument was probably misunderstood and then it got iterated over as a string, maybe even one character per string (because of the `var * var`).",
  "created_at":"2022-01-19T19:57:07Z",
  "id":1016818305,
  "issue":1233,
  "node_id":"IC_kwDODBCWws48m2qB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T19:57:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> As described above, the tests/v2/test_0049-distinguish-record-and-recordarray-behaviors.py test can be skipped with a note to come back later and implement overridden `__repr__` in `_prettyprint.valuestr`.\r\n> \r\n> Something wrong is happening in tests/v2/test_0788-indexedarray-carrying-recordarray-parameters.py that will require more investigation.\r\n> \r\n> tests/v2/test_1233-ak-with_name.py should be a clear-cut case. I'm assuming that none of the test failures are due to that one, but I haven't checked.\r\n\r\nThank you for the clarifications! \r\nI believe everything is fixed now. For tests/v2/test_0788-indexedarray-carrying-recordarray-parameters.p there was a bug where the parameters were not getting passed along.",
  "created_at":"2022-01-20T13:27:28Z",
  "id":1017503903,
  "issue":1233,
  "node_id":"IC_kwDODBCWws48peCf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T13:27:28Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"MEMBER",
  "body":"> For tests/v2/test_0788-indexedarray-carrying-recordarray-parameters.p there was a bug where the parameters were not getting passed along.\r\n\r\nThat makes sense, actually. Now that you've reminded me of that issue, is one that we should check when something like this happens. (Arrays containing strings may be an easy way to catch \"parameters not being passed\" bugs.)",
  "created_at":"2022-01-20T16:55:08Z",
  "id":1017712387,
  "issue":1233,
  "node_id":"IC_kwDODBCWws48qQ8D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T16:55:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1234](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5816e05) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `0.49%`.\n> The diff coverage is `78.51%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <\u00f8> (-0.79%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `82.81% <\u00f8> (+3.66%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.74% <\u00f8> (+0.98%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.57% <28.57%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdHlwZS5weQ==) | `45.71% <38.70%> (-34.29%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `65.59% <60.00%> (+0.60%)` | :arrow_up: |\n| [...c/awkward/\\_v2/operations/reducers/ak\\_linear\\_fit.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfbGluZWFyX2ZpdC5weQ==) | `85.71% <66.66%> (-1.52%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYWxsLnB5) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| ... and [50 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1234/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-19T17:18:51Z",
  "id":1016689275,
  "issue":1234,
  "node_id":"IC_kwDODBCWws48mXJ7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T17:47:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1237](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3b7372f) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/0a0e9be87e101e2d5ee045ad05b270f0b9fa0825?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a0e9be) will **decrease** coverage by `0.86%`.\n> The diff coverage is `83.05%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.45% <\u00f8> (-0.79%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.54% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `68.94% <33.33%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.57% <33.33%> (-1.62%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `65.02% <60.00%> (+0.03%)` | :arrow_up: |\n| [...c/awkward/\\_v2/operations/reducers/ak\\_linear\\_fit.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfbGluZWFyX2ZpdC5weQ==) | `85.71% <66.66%> (-1.52%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYWxsLnB5) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYW55LnB5) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnQucHk=) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/reducers/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnRfbm9uemVyby5weQ==) | `91.66% <75.00%> (-8.34%)` | :arrow_down: |\n| ... and [42 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1237/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-19T19:55:41Z",
  "id":1016817281,
  "issue":1237,
  "node_id":"IC_kwDODBCWws48m2aB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T05:24:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Testing the deployment here, by the way: https://github.com/scikit-hep/awkward-1.0/actions/runs/1719986605",
  "created_at":"2022-01-19T20:02:57Z",
  "id":1016822760,
  "issue":1237,
  "node_id":"IC_kwDODBCWws48m3vo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T20:02:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"You could skip it instead (or also) in pyproject.toml; the benefit of the skip is that it works locally too. Technically, we don't really support local Windows runs yet... But the next cibuildwheel release should. Quite minor, this is fine.",
  "created_at":"2022-01-19T21:41:58Z",
  "id":1016893039,
  "issue":1237,
  "node_id":"IC_kwDODBCWws48nI5v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T21:41:58Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Now the MacOS build [gets this far before failing](https://pipelines.actions.githubusercontent.com/ErlVSyz7hapZD5oDnavYEewPSZubvgO3c79oCbrFWfDzi2sAj4/_apis/pipelines/1/runs/858/signedlogcontent/11?urlExpires=2022-01-19T22%3A20%3A38.4990933Z&urlSigningMethod=HMACV1&urlSignature=3gcX1tCu56ANRYConwgqhMHIq2gerdZfelrIIt5G2cw%3D):\r\n\r\n```\r\n2022-01-19T21:11:38.4243380Z   build/lib.macosx-10.9-x86_64-3.9/awkward/libawkward-cpu-kernels.dylib\r\n2022-01-19T21:11:38.4243790Z   build/lib.macosx-10.9-x86_64-3.9/_ext.cpython-39-darwin.so\r\n2022-01-19T21:11:38.4244150Z   build/lib.macosx-10.9-x86_64-3.9/libawkward.dylib\r\n2022-01-19T21:11:38.4244530Z   build/lib.macosx-10.9-x86_64-3.9/libawkward-cpu-kernels.dylib\r\n2022-01-19T21:11:38.4244930Z   --- copying includes ------------------------------------------\r\n2022-01-19T21:11:38.4245350Z   error: [Errno 17] File exists: 'build/lib.macosx-10.9-x86_64-3.8/awkward/include'\r\n2022-01-19T21:11:38.4245790Z   Building wheel for awkward (pyproject.toml): finished with status 'error'\r\n2022-01-19T21:11:38.4246070Z   ERROR: Failed building wheel for awkward\r\n2022-01-19T21:11:38.4246280Z Failed to build awkward\r\n2022-01-19T21:11:38.4246500Z ERROR: Failed to build one or more wheels\r\n```\r\n\r\nI suppose we don't really need any includes, now that we're not supporting downstream dependencies of the C++ part.\r\n\r\nThey'd be needed in the SDist, but not in wheels.\r\n\r\nI'm going to try this:\r\n\r\n```diff\r\n--- a/setup.py\r\n+++ b/setup.py\r\n@@ -193,11 +193,6 @@ class Install(setuptools.command.install.install):\r\n         print(\"--- build directory -------------------------------------------\")\r\n         tree(\"build\")\r\n \r\n-        print(\"--- copying includes ------------------------------------------\")\r\n-        shutil.copytree(\r\n-            os.path.join(\"include\"), os.path.join(outerdir, \"awkward\", \"include\")\r\n-        )\r\n-\r\n         print(\"--- outerdir after copy ---------------------------------------\")\r\n         tree(outerdir)\r\n```\r\n\r\nBy the same logic, we also don't need to bundle any static libraries, just the dynamic ones. I'll start with this, though.",
  "created_at":"2022-01-19T22:26:51Z",
  "id":1016929433,
  "issue":1237,
  "node_id":"IC_kwDODBCWws48nRyZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T22:26:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Here's the next one: https://github.com/scikit-hep/awkward-1.0/actions/runs/1720551239",
  "created_at":"2022-01-19T22:28:28Z",
  "id":1016930450,
  "issue":1237,
  "node_id":"IC_kwDODBCWws48nSCS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T22:28:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I think the problem is setuptools doesn't understand that PyPy and CPython are different. If you split the CPython and PyPy jobs, I think it will be fine. Not sure why PyPy 3.7 doesn't show that problem, and 3.8 does, though - but it might be \"better\" (more CPython-like) handling of build paths for PyPy 3.8.\r\n\r\nSee https://github.com/pypa/setuptools/issues/2912",
  "created_at":"2022-01-19T22:30:17Z",
  "id":1016931614,
  "issue":1237,
  "node_id":"IC_kwDODBCWws48nSUe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T22:33:45Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"I keep doing other things and then coming back to check up on this. You have something specific in mind\u2014could you set it up the way you're thinking?",
  "created_at":"2022-01-19T23:32:20Z",
  "id":1016967410,
  "issue":1237,
  "node_id":"IC_kwDODBCWws48nbDy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-19T23:32:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I've reverted the include file removal to verify my suspicion was correct, but if it's not useful, the static files should be removed, as they make the wheels larger (libs much more than include).",
  "created_at":"2022-01-20T13:23:23Z",
  "id":1017500505,
  "issue":1237,
  "node_id":"IC_kwDODBCWws48pdNZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T13:23:23Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Great, **thank you very much**! I see that it has been tested here: https://github.com/scikit-hep/awkward-1.0/actions/runs/1721784145 (the commit hex matches), so we know that it will work in a real release. I'll get started on that release right now.",
  "created_at":"2022-01-20T16:24:27Z",
  "id":1017681529,
  "issue":1237,
  "node_id":"IC_kwDODBCWws48qJZ5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T16:24:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> if it's not useful, the static files should be removed, as they make the wheels larger (libs much more than include).\r\n\r\nThe static libraries are not useful, but the next release will be a prerelease. The frequency of non-prereleases has gone down considerably in the past year, so that alleviates some of the disk space pressure. Nevertheless, before 1.8.0, I'll try removing the static libraries.",
  "created_at":"2022-01-20T16:27:15Z",
  "id":1017684665,
  "issue":1237,
  "node_id":"IC_kwDODBCWws48qKK5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T16:27:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Ah I think it fails to test because numpy doesn't have ppc64le wheels (when I tested numpy was already installed so I didn't notice). It seems it's on [the roadmap](https://numpy.org/neps/roadmap.html#platform-support) but I guess it'll have to wait for now unless you'd consider releasing untested ppc64le wheels?",
  "created_at":"2022-01-20T20:38:13Z",
  "id":1017908009,
  "issue":1239,
  "node_id":"IC_kwDODBCWws48rAsp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T20:38:13Z",
  "user":"MDQ6VXNlcjUyMjA1MzM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, that explains it. If NumPy doesn't have PowerPC wheels, I don't think it helps much for Awkward to have PowerPC wheels because PowerPC users would have to compile _something_, anyway. (I'm assuming that it's at least as hard to compile NumPy as Awkward.) When they do, we can reinstate this, though.",
  "created_at":"2022-01-20T20:53:29Z",
  "id":1017918429,
  "issue":1239,
  "node_id":"IC_kwDODBCWws48rDPd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T20:53:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> If NumPy doesn't have PowerPC wheels, I don't think it helps much for Awkward to have PowerPC wheels because PowerPC users would have to compile something, anyway.\r\n\r\nNumpy is a fairly standard thing to find pre-installed so I think in most cases it's probably not an issue.",
  "created_at":"2022-01-20T21:24:09Z",
  "id":1017940347,
  "issue":1239,
  "node_id":"IC_kwDODBCWws48rIl7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T21:24:09Z",
  "user":"MDQ6VXNlcjUyMjA1MzM="
 },
 {
  "author_association":"MEMBER",
  "body":"I see\u2014you're thinking it would come from the OS distribution's package manager. (I used to do that, but now I always get it from pip or conda. I don't trust my OS distribution's package manager for any Python packages.)\r\n\r\nIf it's reintroduced into the Awkward build, then GitHub Actions would have to compile NumPy, which isn't terrible, but it's a slow-down. It's not something we'd want to have happen in regular CI builds, though maybe a CD release.",
  "created_at":"2022-01-20T21:26:47Z",
  "id":1017942258,
  "issue":1239,
  "node_id":"IC_kwDODBCWws48rJDy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-20T21:26:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1240](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (06b933e) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.70%`.\n> The diff coverage is `79.39%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `81.09% <9.09%> (-1.96%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `59.17% <10.00%> (-1.47%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `55.25% <20.00%> (-0.83%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fanNvbl9maWxlLnB5) | `47.05% <43.75%> (-27.95%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.14% <50.00%> (-0.23%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `77.35% <50.00%> (-1.08%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.59% <58.33%> (-0.47%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `81.97% <58.82%> (-0.88%)` | :arrow_down: |\n| ... and [37 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1240/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-20T22:47:04Z",
  "id":1017993949,
  "issue":1240,
  "node_id":"IC_kwDODBCWws48rVrd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-05T00:36:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this is probably expected behaviour. When you call `ak.sum` with `axis=None`, it flattens the array and then calls the NumPy sum function. Only if you pass a non-None axis does Awkward use its own kernel. In this case, unlike NumPy, Awkward does not do anything special in the sum routine. We can mimic this by using a scalar float32 array:\r\n\r\nConsider a naive sum:\r\n```python\r\ndef sum_t(x):\r\n    tot = np.array(0, dtype=x.dtype)\r\n    for y in x:\r\n        tot += y\r\n    return tot\r\n```\r\nEvaluating this for your array gives me:\r\n```pycon\r\n>>> sum_t(x) - np.sum(x)\r\n0.0001373291\r\n```\r\n\r\nNow, with a pairwise sum with `N=128`:\r\n```python3\r\ndef pairwise_t(x):\r\n    if len(x) < 128:\r\n        return sum_t(x)\r\n    m = math.floor(len(x)/2)\r\n    return pairwise_t(x[:m])+pairwise_t(x[m:])\r\n```\r\nEvaluating this for your array gives me\r\n```pycon\r\n>>> pairwise_t(x) - np.sum(x)\r\n1.5258789e-05\r\n```\r\nwhich is a factor of ten closer. I suspect the rest of the difference might be due to the fact that NumPy does _more_ here with vectorization that effectively reduces `N`. Incidentally, I wonder @jpivarski if we've considered something like pairwise summing for Awkward?",
  "created_at":"2022-01-21T12:52:37Z",
  "id":1018478962,
  "issue":1241,
  "node_id":"IC_kwDODBCWws48tMFy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T12:53:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"I see, so this is a speed vs accuracy trade-off.\r\nFound this [old numpy discussion](https://github.com/numpy/numpy/issues/2448) and a [related project - accupy](https://github.com/nschloe/accupy).\r\n\r\nI guess from a science perspective it is more important to understand the uncertainty of a given method - accuracy is key (sometimes).",
  "created_at":"2022-01-21T14:29:58Z",
  "id":1018553133,
  "issue":1241,
  "node_id":"IC_kwDODBCWws48teMt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T14:29:58Z",
  "user":"MDQ6VXNlcjEyMTMyNzY="
 },
 {
  "author_association":"MEMBER",
  "body":"It's not a bug. I'm not 100% sure whether the NumPy discussion about `np.math.fsum` is relevant here, since this code path uses `np.ndarray.sum`, and I don't know whether those two are the same. (`np.math.fsum` is not the same function as `np.sum`, for instance.)\r\n\r\n`axis=None` and `axis=-1` do take completely different code paths:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/a1a03dbe95c6b53607d1c8d4b40b5848f007b6b6/src/awkward/operations/reducers.py#L334-L349\r\n\r\nFundamentally, they would never be exactly the same because this is explicitly adding the numbers in a different order and [floating point addition is not associative](https://en.wikipedia.org/wiki/Associative_property#Nonassociativity_of_floating_point_calculation). The `axis=None` code path takes every separate array buffer within the ak.Array, sums each buffer separately, and then adds together those results. The `axis=-1` code path goes linearly from the beginning to the end in the currently-implemented cpu-kernels. The future cuda-kernels would add them in parallel, using [this completely different algorithm](https://github.com/jpivarski/jupyter-performance-studies/blob/master/2018-09-10-jagged-reduction.ipynb), which is a bit closer to tree-reduce than left-to-right.\r\n\r\nHowever, there's more going on because your values are all `np.float32`. The arrays are internally added by NumPy, which uses the available 32 bits of precision, but the sum over arrays is done by Python (`reduce` and `+`). This might be adding the numbers as Python `float`, which is 64-bit. That would definitely change the precision.\r\n\r\nThe Awkward 2.0 implementation of this uses only NumPy:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/3af8b016140f3ed02cd2f933dee675c6e115e1b0/src/awkward/_v2/operations/reducers/ak_sum.py#L189-L202\r\n\r\nbut I just got notified (_while writing this comment_) that it's about 2\u00d7 slower than the v1 implementation, so I'll be looking into that. We might revert to using `reduce` if there's a factor of 2 involved.",
  "created_at":"2022-01-21T18:13:58Z",
  "id":1018747538,
  "issue":1241,
  "node_id":"IC_kwDODBCWws48uNqS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T18:13:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> it's about 2\u00d7 slower than the v1 implementation, so I'll be looking into that. We might revert to using `reduce` if there's a factor of 2 involved.\r\n\r\nWhich is now fixed: https://github.com/scikit-hep/awkward-1.0/pull/1245\r\n\r\nSo\u2014no performance issues, but the floating point accuracy is unchanged. I replaced the `+` with explicit `np.add`, though it turns out that Python was adding them as `np.float32` objects, anyway.",
  "created_at":"2022-01-21T19:33:45Z",
  "id":1018801147,
  "issue":1241,
  "node_id":"IC_kwDODBCWws48uav7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T19:33:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski yes, `fsum` is a method less vulnerable to loss of significance, and I don't believe it is related to the issue here.\r\n\r\nIIRC that reduction is just over the separate parts of the array. In this case, Awkward shouldn't perform a reduction because `completely_flatten` returns the array for a NumPy array. In this case, only the none `axis=None` paths differ, which is where the kernel reducer is used. The example code above which performs a naive float32 sum produces the same result, which makes it clear that this difference between numpy and Awkward is from naive summation (I'm pretty sure NumPy's reduction is using float32 too). I checked and the Awkward kernel is also using float32 until it casts the result to 64 bits.\r\n\r\nEvidence for this being a loss of significance problem (to me) is that when one uses a less naive sum, the difference approaches the order of the float precision rather than 1e-4.  If we use `np.sum` but shuffle the order, we get the same result.\r\n",
  "created_at":"2022-01-21T20:27:06Z",
  "id":1018835252,
  "issue":1241,
  "node_id":"IC_kwDODBCWws48ujE0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T20:36:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Evidence for this being a loss of significance problem (to me) is that when one uses a less naive sum, the difference approaches the order of the float precision rather than 1e-4.\r\n\r\nWhat do you mean by that? Is there something that we could be doing differently that would handle the precision better?\r\n\r\nAs an updated pointer, this is now the state of the art (in v2 after #1245):\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/b20413193caa2dd1b75272753f8680ba4cd9dd92/src/awkward/_v2/operations/reducers/ak_sum.py#L189-L204\r\n\r\nwhere `completely_flatten` just returns the underlying arrays (only one here), without modification.",
  "created_at":"2022-01-21T22:07:32Z",
  "id":1018899262,
  "issue":1241,
  "node_id":"IC_kwDODBCWws48uys-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T22:07:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> What do you mean by that? Is there something that we could be doing differently that would handle the precision better?\r\n\r\nThe loss of significance that I'm referring to above is in the kernel, where we are currently just using a `for` loop over the indices, and accumulating a running total. \r\n```cpp\r\nfor (int64_t i = 0;  i < lenparents;  i++) {\r\n    toptr[parents[i]] += (OUT)fromptr[i];\r\n}\r\n```\r\n\r\nObviously this is slightly more complicated than a single sum as we perform multiple sums here.\r\n\r\nThere are methods like [Kahan summation](https://en.wikipedia.org/wiki/Kahan_summation_algorithm) whose theoretical worst case is relatively independent of the number of values to be added, but this particular example is reasonably slower than the naive (simple) sum. NumPy uses a middle-of-the-road solution that performs [pair-wise summation](https://en.wikipedia.org/wiki/Pairwise_summation#:~:text=In%20particular%2C%20pairwise,pairwise%20summation.%5B2%5D) - diving the array into chunks, with the idea being that the error is bounded by the error of summing naively within one chunk:\r\nhttps://github.com/numpy/numpy/blob/c30876f6411ef0c5365a8e4cf40cc3d4ba41196c/numpy/core/src/umath/loops_utils.h.src#L77-L138\r\n\r\nI think that we could reasonably update our sum kernels to do this without much loss of performance.",
  "created_at":"2022-01-22T23:19:50Z",
  "id":1019375414,
  "issue":1241,
  "node_id":"IC_kwDODBCWws48wm82",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T13:43:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Hi @agoose77 and @jpivarski,\r\n\r\nThank you for the illuminating discussion. I think I understand the discrepancy now.\r\nIt seems whatever the solution, we will need to see how to best attribute and uncertainty to any operation performed.\r\n\r\nIn the meantime, @jpivarski, you mentioned the v2 - I've seen references to it in the code. Is there an easy way to switch between `v1`  and `v2` implementations?",
  "created_at":"2022-01-24T12:30:32Z",
  "id":1020050623,
  "issue":1241,
  "node_id":"IC_kwDODBCWws48zLy_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T12:30:32Z",
  "user":"MDQ6VXNlcjEyMTMyNzY="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77 Oh, I see! I was just considering the fact that non-associativity of floating point addition implies that different algorithms will give different results, but you were talking about using associativity to get closer to the correct result. I've seen something similar to Kahan summation for computing variances and standard deviations, where the numerical stability is a bigger issue. ([Histogrammar uses it.](https://github.com/histogrammar/histogrammar-python/blob/75eeaf2c74eb6b47b770b5ede5d12c524474e50e/histogrammar/primitives/deviate.py#L145-L181)) The reductions that we do in Awkward Array's cpu-kernels,\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/71b0a16ccf093fadc7892bd59362e43f0979e904/src/cpu-kernels/awkward_reduce_sum.cpp#L7-L21\r\n\r\nmight be able to benefit from that. The fact that NumPy doesn't do a naive, left-to-right sum would explain why `axis=None` (which uses NumPy) is different from `axis=0` (which uses the above, with `parents[i] = 0` for all `i`). If the fact that this has to be a _jagged_ reducer (general `parents`) prevents a Kahan version of it, at least `axis=0` might be implemented that way, as a special case.\r\n\r\n@kreczko, the central place for talking about v2, so far, is #1151. You can switch between v1 and v2 with\r\n\r\n```python\r\nimport awkward._v2 as ak\r\n```\r\n\r\nbut it's [not all there yet](https://github.com/scikit-hep/awkward-1.0/projects/4). All of the functions for creating arrays exist (so that we can run the tests), and some of the functions exist. It's enough for https://github.com/continuumIO/dask-awkward/ to be able to develop, so far.\r\n\r\nP.S. If you create a v2 Array, call `.show()` on it.",
  "created_at":"2022-01-24T21:24:50Z",
  "id":1020563355,
  "issue":1241,
  "node_id":"IC_kwDODBCWws481I-b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T21:24:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1242](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d0898d5) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.20%`.\n> The diff coverage is `61.11%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.89% <\u00f8> (+0.31%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <\u00f8> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <\u00f8> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <\u00f8> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.85% <\u00f8> (+0.18%)` | :arrow_up: |\n| [...c/awkward/\\_v2/operations/describe/ak\\_parameters.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfcGFyYW1ldGVycy5weQ==) | `41.66% <22.22%> (-38.34%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `83.79% <100.00%> (+1.55%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `89.74% <100.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `80.86% <100.00%> (+1.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `84.08% <100.00%> (+0.07%)` | :arrow_up: |\n| ... and [144 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1242/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-21T14:19:16Z",
  "id":1018544075,
  "issue":1242,
  "node_id":"IC_kwDODBCWws48tb_L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-27T20:27:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1243](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bc7f978) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/operations/describe/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdHlwZS5weQ==) | `44.11% <0.00%> (-35.89%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_argmin.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYXJnbWluLnB5) | `52.63% <0.00%> (-16.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_sum.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfc3VtLnB5) | `93.33% <0.00%> (-6.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvdy5weQ==) | `60.00% <0.00%> (-6.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYWxsLnB5) | `86.66% <0.00%> (-5.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYW55LnB5) | `86.66% <0.00%> (-5.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (-5.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_prod.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfcHJvZC5weQ==) | `86.66% <0.00%> (-5.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (-5.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnQucHk=) | `86.66% <0.00%> (-5.00%)` | :arrow_down: |\n| ... and [133 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1243/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-21T15:55:05Z",
  "id":1018634170,
  "issue":1243,
  "node_id":"IC_kwDODBCWws48tx-6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T19:25:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It's good that you cc'ed Anish. Anish, have you started work on this file? Would it be easy or difficult to merge in these changes? This looks to me like a much-improved style, and a good point to start from.",
  "created_at":"2022-01-21T17:00:24Z",
  "id":1018690289,
  "issue":1243,
  "node_id":"IC_kwDODBCWws48t_rx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T17:00:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is a good start, I can work with this. I have run the script on my laptop (Python 3.10 CUDA 11.5) and the build works after fixing the minor `issue` I raised in the code review! \r\nPS: I am currently reading up on GitHub Actions and Python Wheels. I would love some article recommendations on best practices. Thanks!",
  "created_at":"2022-01-24T10:06:52Z",
  "id":1019925221,
  "issue":1243,
  "node_id":"IC_kwDODBCWws48ytLl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T10:16:00Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "author_association":"MEMBER",
  "body":"https://scikit-hep.org/developer is a good start, IMO, though I'm biased. :)",
  "created_at":"2022-01-24T15:06:40Z",
  "id":1020197168,
  "issue":1243,
  "node_id":"IC_kwDODBCWws48zvkw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T15:06:40Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Is there something I should be addressing? I don't see a code comment.",
  "created_at":"2022-01-24T15:07:21Z",
  "id":1020197865,
  "issue":1243,
  "node_id":"IC_kwDODBCWws48zvvp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T15:07:21Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"![image](https://user-images.githubusercontent.com/88289086/150823596-58f7b825-5090-4be4-9b99-41d891aaec35.png)\r\nThis is weird. It shows up in my page but not yours. But I'll put the concerned thing down here:\r\n\r\nRegarding Line 101 in cuda-build.sh: \r\n> This line raises an ``sed: -e expression #1, char 54: unterminated `s' command``. Here's the fixed line:\r\n> ```sh\r\n> sed \"s/Root-Is-Purelib: true/Root-Is-Purelib: false/\" < tmp_WHEEL | sed \"s/Tag: py3-none-any/Tag: py3-none-$PLATFORM/\" > > \"awkward_cuda_kernels-$AWKWARD_VERSION.dist-info/WHEEL\"\r\n> ```\r\n\r\nAlso, thanks for the developer page link!",
  "created_at":"2022-01-24T16:33:02Z",
  "id":1020291611,
  "issue":1243,
  "node_id":"IC_kwDODBCWws480Gob",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T16:33:02Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "author_association":"MEMBER",
  "body":"There's a (pending); you need to \"submit\" the review after you start one (it does that so it doesn't notify multiple times).",
  "created_at":"2022-01-24T18:19:55Z",
  "id":1020402512,
  "issue":1243,
  "node_id":"IC_kwDODBCWws480htQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T18:19:55Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"And you can use the \"suggest changes\" button to make it easier to see the difference and apply it. ;)",
  "created_at":"2022-01-24T18:21:51Z",
  "id":1020404407,
  "issue":1243,
  "node_id":"IC_kwDODBCWws480iK3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T18:21:51Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"This looks done. @swishdiff, if you're happy with it in its current state, you may squash-and-merge it. (I get the impression that @henryiii considers it done, so I'm asking you because it affects your work.)",
  "created_at":"2022-01-27T20:15:31Z",
  "id":1023601996,
  "issue":1243,
  "node_id":"IC_kwDODBCWws49Au1M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-27T20:15:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yup, I am actually building on this version of the script in my branch, so getting it merged into main would ease my job.",
  "created_at":"2022-01-27T20:17:44Z",
  "id":1023603637,
  "issue":1243,
  "node_id":"IC_kwDODBCWws49AvO1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-27T20:17:44Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, then let's do it. Not just now, but in general let me know if an outstanding PR is a blocker.",
  "created_at":"2022-01-27T20:34:49Z",
  "id":1023616885,
  "issue":1243,
  "node_id":"IC_kwDODBCWws49Ayd1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-27T20:34:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1244](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (43b8c89) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.01%`.\n> The diff coverage is `57.73%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.24% <0.00%> (-0.22%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `83.72% <0.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.54% <0.00%> (+0.30%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.31% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `82.76% <0.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| ... and [143 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1244/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-21T16:33:52Z",
  "id":1018669270,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48t6jW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T22:34:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"From what I see, these are a lot of good updates. I like what it has done with the format strings, but they could be hard to merge with other PRs that are currently in development. From my scan, it looks like the non-format string changes would be easy to merge, so maybe non-format string and format string updates can be two PRs?\r\n\r\n**These are the currently outstanding PRs:**\r\n\r\n   * #1242 (@ioanaif): mostly touches test files, which are not heavily affected by the style upgrade. I think this one would be compatible.\r\n   * #1240 (@jpivarski): mostly creates new files (well, filling in placeholders). This would be compatible, too\u2014if this were in main and I pulled that into my PR, the update to .pre-commit-config.yaml would beautify the code that I'm working on, and that would be fine.\r\n   * #1234 (@ioanaif): requested a review from me, so this one should probably merge into main _first_, before the style updates (and then this branch should bring in those changes and beautify them).\r\n   * #1214 (@agoose77): this one was done, but failed an auto merge. It was a MacOS timeout\u2014I bet it was related to the segfault. I'm updating that to main to fix the segfault and trying again.\r\n   * #1207 (@ianna): this is almost entirely C++, so it's safe.\r\n   * #1200 (@ianna): also entirely C++.\r\n   *#1040 (@agoose77 and me): this only touches a couple of files. I don't think it would be too hard to merge.\r\n   * #1039 (@agoose77 and me): this was an old proposal that got forgotten. @agoose77 and I should reconsider whether we want it, and if so, reimplement it starting from a more recent base. If not, it should be closed. (Discussion should be on #1039, not here.)\r\n   * #990 (@agoose77 and me): same as above.\r\n\r\nSo after going through all the open PRs, it looks like we _will_ be able to do this style upgrade in one PR, **though the \"almost there\" and \"should we drop it?\" questions need to be dealt with first.**\r\n\r\nGetting back to this PR, here's a list of the things that I noticed were changed:\r\n\r\n   * `from __future__ import absolute_import` removed from every file, which totally makes sense and should happen all at once.\r\n   * Inheritance from `object` is now implicit, naturally. Also easy to merge because it doesn't affect that many lines.\r\n   * `open` arguments, such as `\"r\"` looks like a good thing.\r\n   * `super` arguments; it will be easy to get used to this style. I always had to look up the argument order in the past. Now there aren't any!\r\n   * `yield from` is an old Python feature that I just hadn't known about until recently (late last year). It's good to do all of those consistently.\r\n   * `set` constructors with curly brackets make me a little nervous because it's hard to see that they're not dicts, at a glance. But okay.\r\n   * dict comprehensions were something that I avoided because the syntax would absolutely break Python 2.6 (as opposed to just being a runtime error). But we shouldn't even be thinking about such things anymore.\r\n   * The use of `\"{0} {1} {2}\"` in format strings instead of `\"{} {} {}\"` was also for Python 2.6 friendliness. It was because I had to go through a huge codebase once, turning all the `\"{} {} {}\"` into `\"{0} {1} {2}\"` to make it run on some system, and that was such a painful memory. But again, we shouldn't even be thinking about such things anymore.\r\n   * The format strings, even though the changes are conservative, are much better, particularly when they make code fit onto one line. Even though it affects a huge number of lines, it's a very positive change and worth doing.\r\n\r\nSome things that didn't get _automatically_ changed:\r\n\r\n   * I didn't see all of the `try ... except ImportError` blocks get simplified to just the `try` clause, but all of them are there to handle changed module or class names in Python 3. The `try` block (the spelling that is tried first) is the Python 3 version. These would be easy to fix by hand.\r\n   * The format strings that require `repr`, rather than `str` conversion of an object should all be expressed with the `!r` syntax instead of explicitly using the `repr` function. These will be easy to find and fix, too (assuming `!r` is Python 3.6 compatible, but I bet it is). I only used the `repr` function because I couldn't remember the `!r` syntax (the fact that it's an exclamation point), but we can just memorize that and use it from here on out.",
  "created_at":"2022-01-21T16:56:01Z",
  "id":1018686958,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48t-3u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T16:56:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I can split it up if you'd like - pyupgrade `--py3-plus` will skip the f-strings, then we can do a second pass with `--py36-plus` to get the f-strings.\r\n\r\nPyupgrade has a \"garbage-in, garbage-out\" policy (yes, I've asked Anthony about at least the repr cleanup). `try`/`except`'s should have been `sys.version_info` comparisons - these tell both the tool and the reader exactly _why_ this is being done, which side is new/old, and are also understood by mypy.\r\n\r\nSame is true for `\"{x}\".format(x=repr(x))`, this should have been `\"{x:!r}\".format(x=x)`. This is really a cleanup, not a python upgrade, since the first version of `.format` supported this (in Python 2.6). It's just more noticeable with f-strings, since extra brackets are uglier inline. I _think_ I have a sed expression somewhere that cleans these up that I used in something like Particle.\r\n\r\nIt is completely trivial to rerun this branch after PRs get merged, as it's entirely automated (except for the change to .pre-commit-config.yaml, of course). I can break it into commits to make it easier to see the non-f-string changes, and possibly apply them either as two PRs or as a rebase and merge PR when ready.",
  "created_at":"2022-01-21T17:14:13Z",
  "id":1018703997,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48uDB9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T17:21:33Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Let's rerun it (with f-strings and everything\u2014same settings that it has now) after #1214 and #1234 merge into main. The other outstanding PRs are\r\n\r\n   * easy to adjust after this goes into main (#1242, #1240, #1040), or\r\n   * completely transparent to it because they are editing C++ (#1207, #1200), or\r\n   * should probably be closed, anyway (#1039, #990).\r\n\r\nAs for the things that didn't automatically convert, they'll be easy to do by hand, too. I just mentioned them because it's what I noticed while scanning over the changes.",
  "created_at":"2022-01-21T17:41:03Z",
  "id":1018724784,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48uIGw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T17:41:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, ping me here when that happens. :)",
  "created_at":"2022-01-21T18:06:37Z",
  "id":1018742336,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48uMZA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T18:06:37Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"It has happened! The little icons next to the bullet points are useful:\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/150579310-ff943ee9-b6cd-4aa9-8891-768f03826a73.png)\r\n\r\nHowever, I should resolve this conflict before you start that.",
  "created_at":"2022-01-21T18:17:01Z",
  "id":1018749795,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48uONj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T18:17:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Hopefully, I haven't introduced any errors in that merge conflict resolution.\r\n\r\nOr maybe it doesn't matter? If you pull from main and re-run from scratch... Yeah, I didn't need to resolve that by hand.\r\n\r\nAnyway, @henryiii, it's all yours.",
  "created_at":"2022-01-21T18:26:32Z",
  "id":1018756614,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48uP4G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T18:26:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Every change is automatically generated, conflicts don't matter, I can just rerun. I can do this in about an hour (in mtg).",
  "created_at":"2022-01-21T18:26:53Z",
  "id":1018756856,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48uP74",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T18:26:53Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"@jpivarski The ball in your court now. :) I have a followup ready that does the (somewhat) by-hand edits that I would normally do.",
  "created_at":"2022-01-21T20:15:16Z",
  "id":1018827623,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48uhNn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T20:15:16Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Although this happened in the European evening on a Friday, I know that @ioanaif and @agoose77 have been active and have seen this discussion. Also our PRs (mine included) don't look like they'll have difficulty merging with it. I don't know whether @ianna was online and I wouldn't assume so for this time of day, but all of her PRs are completely independent because they only modify C++ files.\r\n\r\nI didn't check with @swishdiff, for whom it's even later, but he's working on CUDA compilation and although there are some Python files involved in that, they are developer scripts that never had Python 2 as a constraint. (The dev/generate-cuda.py file only has format-string updates, nothing else. If he's working on a copy of that file offline, he could overwrite the git copy with his own, then let pre-commit apply the formats to his copy\u2014if it's even an issue.)\r\n\r\nI don't think this is going to be a problem for anybody, so I'm going to merge it.",
  "created_at":"2022-01-21T22:32:50Z",
  "id":1018912722,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48u1_S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T22:32:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Just to keep an eye on everything, to catch any conceivable problems: https://github.com/scikit-hep/awkward-1.0/actions/runs/1731094339",
  "created_at":"2022-01-21T22:35:12Z",
  "id":1018913815,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48u2QX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T22:35:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"If anyone needs help rebasing/merging with this, please let me know!",
  "created_at":"2022-01-21T22:51:11Z",
  "id":1018921440,
  "issue":1244,
  "node_id":"IC_kwDODBCWws48u4Hg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T22:51:11Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1245](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1e45797) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.25%`.\n> The diff coverage is `66.97%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `82.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `80.60% <\u00f8> (+0.86%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_argmin.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYXJnbWluLnB5) | `55.00% <0.00%> (-13.75%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdHlwZS5weQ==) | `45.71% <38.70%> (-34.29%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYWxsLnB5) | `87.50% <80.00%> (-4.17%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYW55LnB5) | `87.50% <80.00%> (-4.17%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnQucHk=) | `87.50% <80.00%> (-4.17%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/reducers/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnRfbm9uemVyby5weQ==) | `87.50% <80.00%> (-4.17%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_prod.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfcHJvZC5weQ==) | `87.50% <80.00%> (-4.17%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_sum.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfc3VtLnB5) | `93.75% <80.00%> (-6.25%)` | :arrow_down: |\n| ... and [22 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1245/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-21T19:53:55Z",
  "id":1018814104,
  "issue":1245,
  "node_id":"IC_kwDODBCWws48ud6Y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-21T19:53:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1246](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d9a8fb9) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.23%`.\n> The diff coverage is `60.48%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.31% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `82.76% <0.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| ... and [143 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1246/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-21T23:16:45Z",
  "id":1018935311,
  "issue":1246,
  "node_id":"IC_kwDODBCWws48u7gP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T20:01:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Should be done. I'll make a new PR if I think of anything else to check for.\r\n\r\nThere shouldn't be any variations; `sys.version_info >= (3, 8)` is The Standard, as used in python/typeshed, like here: https://github.com/python/typeshed/blob/fabd8428572dcc20b7ae7919e16d9b4c87cf3da2/stdlib/__future__.pyi#L19 \r\n\r\nUsing an AST, it's possible to include some of the variations - but I'd not use them, just `sys.version_info`, easier to quickly search.",
  "created_at":"2022-01-24T22:37:53Z",
  "id":1020620941,
  "issue":1246,
  "node_id":"IC_kwDODBCWws481XCN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T22:37:53Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1248](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b26770a) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.23%`.\n> The diff coverage is `60.48%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.31% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `82.76% <0.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| ... and [143 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1248/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-24T13:39:02Z",
  "id":1020111125,
  "issue":1248,
  "node_id":"IC_kwDODBCWws48zakV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-25T09:20:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> You're right about the issue and this is the right way to address it. The one comment below is stylistic.\r\n> \r\n> You're also pulling in `pybind11` again. (Personally, I do a new `git clone --recursive` when a submodule version changes, which is not very often.) I've written a recipe for fixing a PR branch here: [#1207 (comment)](https://github.com/scikit-hep/awkward-1.0/pull/1207#issuecomment-1018670709).\r\n\r\nUgh, I didn't see this in my changelist, yikes. Will fix",
  "created_at":"2022-01-25T00:46:48Z",
  "id":1020695849,
  "issue":1248,
  "node_id":"IC_kwDODBCWws481pUp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-25T00:46:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"NB - I haven't enabled any tests that currently skip due to missing `is_none` - I noticed that one failed, and this is all the time I have to look at this for now.",
  "created_at":"2022-01-24T15:38:49Z",
  "id":1020232177,
  "issue":1249,
  "node_id":"IC_kwDODBCWws48z4Hx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-24T15:38:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1249](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8814309) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.76%`.\n> The diff coverage is `79.72%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `81.09% <9.09%> (-1.96%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `59.17% <10.00%> (-1.47%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `55.25% <20.00%> (-0.83%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fanNvbl9maWxlLnB5) | `47.05% <43.75%> (-27.95%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.14% <50.00%> (-0.23%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `77.35% <50.00%> (-1.08%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.59% <58.33%> (-0.47%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `81.97% <58.82%> (-0.88%)` | :arrow_down: |\n| ... and [39 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1249/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-24T15:58:10Z",
  "id":1020252511,
  "issue":1249,
  "node_id":"IC_kwDODBCWws48z9Ff",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T14:58:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> To implement this feature, I introduce a temporary union. Let me know if there's a more elegant way to do this! Given that, unlike most other layout transformers, we need to modify several layers, I've split the transformation process into two different transforms - one to locate the first layout, another to actually perform the transformation.\r\n\r\nTemporary UnionArrays are fine; they're used in a few other cases.\r\n\r\nOne transformation/action invoking another is also precedented. In fact, if we know that it can go exactly two levels of transforming deep, then I think it's more readable this way than trying to feed it into itself with a different parameter, just because having different states in a finite state machine be laid out as different code on the screen is easier on human brains. \"Action 1: locate, action 2: transform\" is very clear.\r\n\r\n> I also wondered whether it would be possible to write the new recursive `getfunction`s with an early-return style instead of explicitly handling each case? In the past, the return value had a lot of interpretation modes, so it was more dangerous. With v2, I wonder if we could re-consider this position?\r\n\r\nEarly return is fine. I tend to not use it because of FP influences, but avoiding stuff like this:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/6638fc7d6ad082c4441598a803d93f0687ecfba1/src/awkward/_v2/operations/structure/ak_is_none.py#L57-L60\r\n\r\nis worthwhile, I agree. On the other hand, for something like this:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/6638fc7d6ad082c4441598a803d93f0687ecfba1/src/awkward/_v2/operations/structure/ak_is_none.py#L66-L69\r\n\r\nI'd invert the predicate and only explicitly return the non-trivial case:\r\n\r\n```python\r\n        if depth_context[\"posaxis\"] == depth - 1:\r\n            return layout.recursively_apply(getfunction_inner)\r\n```\r\n\r\nAs you noticed, information for the next level is passed through `depth_context` and `lateral_context`, and the returned data is either the transformed Content or None. My intent with that was to make \"action\" functions be ignore the cases they don't care about (implicitly return None) instead of the `pass_user` stuff, where the user data might end up being None in such a case.\r\n\r\n> NB - I haven't enabled any tests that currently skip due to missing `is_none` - I noticed that one failed, and this is all the time I have to look at this for now.\r\n\r\nOkay! Let me know when that changes and I'll review it.",
  "created_at":"2022-01-27T20:32:29Z",
  "id":1023615105,
  "issue":1249,
  "node_id":"IC_kwDODBCWws49AyCB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-27T20:32:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The broken test is caused by #1260, I believe",
  "created_at":"2022-01-28T10:15:50Z",
  "id":1024072281,
  "issue":1249,
  "node_id":"IC_kwDODBCWws49ChpZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T10:15:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I think this is also good to merge! ",
  "created_at":"2022-02-10T22:42:21Z",
  "id":1035606636,
  "issue":1249,
  "node_id":"IC_kwDODBCWws49uhps",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T22:42:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Huh, I wonder if \"performance\" is an appropriate label, since we're talking about numerical precision, not speed of computation. I guess it depends on how broadly you define it.\r\n\r\n--------------\r\n\r\nSomething to consider here is that error growth for summations only matters if there is a large number of addends; `n` has to be large. In a jagged reduction, only addends in the same list get added together; addends in different lists enter into distinct sums. If you have a large number of small lists, this accuracy issue is not relevant because _each_ `n` is small. If you have a small number of large lists, Awkward Array would not be a significantly faster choice than a Python collection (e.g. list) of NumPy arrays, though the syntax would be nicer.\r\n\r\nThe extreme case, where this came up (#1241), had `axis=0` for a depth-1 array. That could be a specialized code path implementing Kahan or pairwise summation. But it could also be a specialized code path that swaps the Awkward Array for a NumPy array, where this is already implemented. After all, `axis=None` is a specialized code path that defers to NumPy.",
  "created_at":"2022-01-25T22:44:15Z",
  "id":1021678522,
  "issue":1250,
  "node_id":"IC_kwDODBCWws485ZO6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-25T22:44:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I just noticed that this is the same as #663. It still needs to be done, but here I'm linking the two issues so that they both get closed when it is done.",
  "created_at":"2022-02-02T15:37:19Z",
  "id":1028066788,
  "issue":1253,
  "node_id":"IC_kwDODBCWws49Rw3k",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-02T15:37:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm deleting the duplicate issue, now that the original (#663) is in a prioritized list.",
  "created_at":"2022-04-15T19:41:48Z",
  "id":1100320613,
  "issue":1253,
  "node_id":"IC_kwDODBCWws5BlY9l",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:41:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1254](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (faccafe) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.23%`.\n> The diff coverage is `60.48%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.31% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `82.76% <0.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| ... and [143 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1254/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-27T05:55:25Z",
  "id":1022873002,
  "issue":1254,
  "node_id":"IC_kwDODBCWws48982q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-27T05:55:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1255](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (be39f13) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.20%`.\n> The diff coverage is `60.52%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.31% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `82.76% <0.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| ... and [144 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1255/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-27T13:46:40Z",
  "id":1023226912,
  "issue":1255,
  "node_id":"IC_kwDODBCWws48_TQg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-27T21:37:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm fine with this when you are, I'll play with the numpy import issue later in a new PR. It sounds like some large libraries can trigger this (like PyTorch), so it's probably not our fault.",
  "created_at":"2022-01-27T22:42:15Z",
  "id":1023708626,
  "issue":1255,
  "node_id":"IC_kwDODBCWws49BI3S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-27T22:42:15Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"It's not the desired behavior (though I wavered on that in https://github.com/scikit-hep/awkward-1.0/issues/1189#issuecomment-1005164448). It was reported in #1189 and fixed in PR #1197. There have been releases since then, but all pre-releases so far: [1.8.0rc1](https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0rc1), [1.8.0rc2](https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0rc2), [1.8.0rc3](https://github.com/scikit-hep/awkward-1.0/releases/tag/1.8.0rc3). The fixed version is pip-installable, but you have to ask for it:\r\n\r\n```bash\r\npip install 'awkward>=1.8.0rc3'\r\n```",
  "created_at":"2022-01-27T20:54:03Z",
  "id":1023629762,
  "issue":1256,
  "node_id":"IC_kwDODBCWws49A1nC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-27T20:54:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1257](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4922eb1) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.24%`.\n> The diff coverage is `61.11%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `65.09% <0.00%> (+0.64%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `83.05% <0.00%> (+0.23%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| ... and [149 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1257/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-27T19:59:15Z",
  "id":1023589277,
  "issue":1257,
  "node_id":"IC_kwDODBCWws49Arud",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T17:42:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski thanks for the mention. This is my ORCID Number - 0000-0003-0153-9748\r\n",
  "created_at":"2022-01-28T13:42:53Z",
  "id":1024237408,
  "issue":1257,
  "node_id":"IC_kwDODBCWws49DJ9g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T13:42:53Z",
  "user":"MDQ6VXNlcjUyNjM1Nzcz"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"My ORCID is https://orcid.org/0000-0003-0788-3814 :)",
  "created_at":"2022-01-28T13:57:50Z",
  "id":1024248733,
  "issue":1257,
  "node_id":"IC_kwDODBCWws49DMud",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T13:57:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"You could use a [GitHub citation file](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files)? Zenodo picks those up too though I think there were some limitations.",
  "created_at":"2022-01-28T14:30:12Z",
  "id":1024277674,
  "issue":1257,
  "node_id":"IC_kwDODBCWws49DTyq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T14:30:12Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - Thanks!. Mine is https://orcid.org/0000-0002-6955-1033",
  "created_at":"2022-01-28T14:42:46Z",
  "id":1024288416,
  "issue":1257,
  "node_id":"IC_kwDODBCWws49DWag",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T14:42:46Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks for the ORCIDs! \r\n\r\n> You could use a [GitHub citation file](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files)? Zenodo picks those up too though I think there were some limitations.\r\n\r\nSince I don't have a reason to prefer .zenodo.json and CITATION.cff sounds more vendor-independent, I switched to that. The CITATION.cff doesn't seem to have a section for description or license type, but that information is already available in the repo in standardized ways.\r\n\r\nIt does, however, have the option to add email addresses for everyone. _I only added an email address if I could find it publicly online._ If you'd rather not have your email listed here, or would rather a different address from the one I found, I can change it.\r\n\r\nAwkward Array didn't have a clear release date, since I put a package on PyPI before it even had any code. For future reference, the date of \"2018-10-12\" comes from the [0.2.0 release](https://github.com/scikit-hep/awkward-0.x/releases/tag/0.2.0), which has release notes, \"Finished a basic implementation of all planned awkward array classes,\" and the [earliest issues not written by me](https://github.com/scikit-hep/awkward-0.x/issues?q=is%3Aissue+created%3A%3C2018-11-01+-author%3Ajpivarski) come from around this date (October 15, 2018). This CITATION.cff looks like YAML; presumably I could add this information directly in the file as a comment, but I'd rather not risk it.",
  "created_at":"2022-01-28T16:34:20Z",
  "id":1024393579,
  "issue":1257,
  "node_id":"IC_kwDODBCWws49DwFr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T16:34:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"A benefit of the citation file is it shows up in the GitHub rendering of the main page, in the side bar.",
  "created_at":"2022-01-28T16:45:44Z",
  "id":1024406112,
  "issue":1257,
  "node_id":"IC_kwDODBCWws49DzJg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T16:45:44Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm enabling auto-merge, so in a half-hour or so this will be merged. If anyone has any future changes they'd like to make, just edit it and open a PR. Thanks!",
  "created_at":"2022-01-28T17:28:41Z",
  "id":1024444827,
  "issue":1257,
  "node_id":"IC_kwDODBCWws49D8mb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T17:28:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1258](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (00cee02) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.20%`.\n> The diff coverage is `60.52%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `64.31% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `82.76% <0.00%> (-0.05%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| ... and [144 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1258/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-28T00:05:57Z",
  "id":1023754298,
  "issue":1258,
  "node_id":"IC_kwDODBCWws49BUA6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T00:05:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1259](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (56312ea) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.24%`.\n> The diff coverage is `60.78%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `79.68% <0.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.85% <0.00%> (+0.18%)` | :arrow_up: |\n| ... and [146 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1259/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-28T10:16:26Z",
  "id":1024072827,
  "issue":1259,
  "node_id":"IC_kwDODBCWws49Chx7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T10:16:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It's not a planned change. Failing to include `simplify_optiontype` is a bug, and the symptom would be that the operation that's missing the `simplify_optiontype` has any of the following node types as a direct `content` of any of the following node types:\r\n\r\n   * UnmaskedArray\r\n   * BitMaskedArray\r\n   * ByteMaskedArray\r\n   * IndexedOptionArray\r\n   * IndexedArray\r\n\r\nThat is, any of the 25 combinations like `UnmaskedArray(UnmaskedArray(XYZ))`, `UnmaskedArray(BitMaskedArray(XYZ))`, ... `IndexedArray(IndexedArray(XYZ))` are all not allowed in arrays that return to the user: they must be eliminated by a call to `simplify_optiontype` before that happens. (They can't be excluded in the constructors of these types because they're allowed as temporary states in the midst of a calculation, before being returned to the user.)\r\n\r\nI can't think of any situation where having an unnecessary `simplify_optiontype` does harm, but missing one is bad. If we need to implement a generic\r\n\r\n```python\r\nclass Content:\r\n    ...\r\n    def simplify_optiontype(self):\r\n        return self\r\n```\r\n\r\nso that node types other than the above 5 don't complain about the method not existing, then that's fine. It would be better from a code maintenance point of view to not call `simplify_optiontype` where we know it's useless, because then the code would be suggesting something false.\r\n\r\nAlso, there are no situations where we'd want `simplify_optiontype` in v1 but not v2 or in v2 but not v1. If one of the two versions has this as a bug, the other should get it fixed. We may not be adding major new features to v1, but we _are_ fixing bugs.\r\n\r\n(Also also, it might seem strange that IndexedArray is included in the set of node types that `simplify_optiontype` should be applied to, even though IndexedArray does not have option type. It's because of the way that it mixes with IndexedOptionArray. We don't want arrays with `ByteMaskedArray(IndexedArray(XYZ))` because it would use less memory and suffer less indirection to be `IndexedOptionArray(XYZ)`. IndexedArray has the cost of extra indirection, but the benefit of delaying expensive calculations or minimizing memory use or both, but `ByteMaskedArray(IndexedArray(XYZ))` doesn't have either of these two advantages.)\r\n\r\nIs there a minimal reproducer that demonstrates it, showing a different layout in v1 and v2? (Maybe in #1249 that I haven't looked at yet...)",
  "created_at":"2022-01-28T15:42:00Z",
  "id":1024340672,
  "issue":1260,
  "node_id":"IC_kwDODBCWws49DjLA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T15:42:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, uncommenting a ported v1 test in #1249 led me to report this, and fix it in #1259",
  "created_at":"2022-01-28T17:09:38Z",
  "id":1024429190,
  "issue":1260,
  "node_id":"IC_kwDODBCWws49D4yG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T17:09:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I was just looking at that, trying to type it up. I was disturbed by this output:\r\n\r\n```\r\narr1       = <Array [{a: 1, b: 1}, {a: 2, b: None}] type='2 * {a: int64, b: ?int64}'>\r\narr2       = <Array [{a: 1, b: 1}, {a: 2, b: None}] type='2 * ?{a: int64, b: ?int64}'>\r\n```\r\n\r\nbecause those are supposed to be different types; a failure of `simplify_optiontype` would show up as double question marks (`??`), not this. But now I realize that's not what the test is complaining about, it's just useful information about two variables that are defined at the time of the test\u2014the test is not asserting that they are the same or that they should be.",
  "created_at":"2022-01-28T17:19:50Z",
  "id":1024437664,
  "issue":1260,
  "node_id":"IC_kwDODBCWws49D62g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T17:19:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Here's the reproducer:\r\n\r\n```python\r\n>>> v1 = ak.Array(ak.layout.ByteMaskedArray(\r\n...     ak.layout.Index8(np.array([True, True])),\r\n...     ak.Array({\"a\": [1, 2], \"b\": [1, None]}).layout,\r\n...     valid_when=True)\r\n... )\r\n>>> v1\r\n<Array [{a: 1, b: 1}, {a: 2, b: None}] type='2 * ?{\"a\": int64, \"b\": ?int64}'>\r\n>>> v1.b\r\n<Array [1, None] type='2 * ?int64'>\r\n\r\n>>> v2 = ak._v2.Array(ak._v2.contents.ByteMaskedArray(\r\n...     ak._v2.index.Index8(np.array([True, True])),\r\n...     ak._v2.Array({\"a\": [1, 2], \"b\": [1, None]}).layout,\r\n...     valid_when=True)\r\n... )\r\n>>> v2\r\n<Array [{a: 1, b: 1}, {a: 2, b: None}] type='2 * ?{a: int64, b: ?int64}'>\r\n>>> v2.b\r\n<Array [1, None] type='2 * ??int64'>\r\n```\r\n\r\nv1 is right and v2 is wrong (double `??`).",
  "created_at":"2022-01-28T17:24:37Z",
  "id":1024441576,
  "issue":1260,
  "node_id":"IC_kwDODBCWws49D7zo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T17:24:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I made #1324 and mentioned @lukasheinrich in it, but that's a duplicate of this one, so I'll close that and prioritize this.",
  "created_at":"2022-04-15T19:04:05Z",
  "id":1100296828,
  "issue":1261,
  "node_id":"IC_kwDODBCWws5BlTJ8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:04:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is harder than we thought and should be deferred beyond the next release.\r\n\r\n`np.matmul` on Awkward Arrays should raise `NotImplementedError` for now.",
  "created_at":"2022-11-10T22:32:24Z",
  "id":1310986350,
  "issue":1261,
  "node_id":"IC_kwDODBCWws5OJBBu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-10T22:32:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1262](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e907155) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.24%`.\n> The diff coverage is `60.78%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `79.68% <0.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.85% <0.00%> (+0.18%)` | :arrow_up: |\n| ... and [146 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1262/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-28T17:50:26Z",
  "id":1024465425,
  "issue":1262,
  "node_id":"IC_kwDODBCWws49EBoR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-29T19:49:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1263](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2fe0b96) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.24%`.\n> The diff coverage is `60.52%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `65.09% <0.00%> (+0.64%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `83.05% <0.00%> (+0.23%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| ... and [147 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1263/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-28T18:23:34Z",
  "id":1024492897,
  "issue":1263,
  "node_id":"IC_kwDODBCWws49EIVh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T18:23:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1264](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eb350d8) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.24%`.\n> The diff coverage is `60.78%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `79.68% <0.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.85% <0.00%> (+0.18%)` | :arrow_up: |\n| ... and [146 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1264/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-28T18:57:10Z",
  "id":1024515939,
  "issue":1264,
  "node_id":"IC_kwDODBCWws49EN9j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T18:57:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1265](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0b78d68) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.24%`.\n> The diff coverage is `60.78%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `79.68% <0.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.85% <0.00%> (+0.18%)` | :arrow_up: |\n| ... and [146 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1265/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-28T19:20:04Z",
  "id":1024532451,
  "issue":1265,
  "node_id":"IC_kwDODBCWws49ER_j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-28T19:20:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not yet familiar enough with how we use `_reduce_next` to understand _why_ we run the kernel routines, but I am able to see that `awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64` is misbehaving. The `outstarts` and `outstops` arguments should have the same length as `outlength`, but if you use a Python implementation of this kernel, it raises an `IndexError` when an out-of-bounds index is accessed:\r\n\r\n```python3\r\noutstarts = np.zeros(4, dtype=np.int64)\r\noutstops = np.zeros(4, dtype=np.int64)\r\n\r\ndistincts, distincts_length, gaps, outlength = (\r\n    np.array([0, 0, 0, 2, 2, 2, 1, 1, 1, 3, 3, 3], dtype=np.int64),\r\n    12,\r\n    np.array([1, 2, 1, 140187859207408], dtype=np.int64),\r\n    4,\r\n)\r\n\r\ndef awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64(\r\n    outstarts, outstops, distincts, lendistincts, gaps, outlength\r\n):\r\n    maxcount = lendistincts if outlength == 0 else lendistincts // outlength\r\n\r\n    j = 0\r\n    k = 0\r\n    maxdistinct = -1\r\n    lasti = -1\r\n    for i in range(lendistincts):\r\n        j_0 = j\r\n        if maxdistinct < distincts[i]:\r\n            maxdistinct = distincts[i]\r\n\r\n            extra = (i - lasti) // maxcount\r\n            lasti = i\r\n            numgappy = gaps[j]\r\n            if numgappy < extra:\r\n                numgappy = extra\r\n\r\n            # Create gaps for blank sublists with start=stop\r\n            for gappy in range(numgappy):\r\n                outstarts[k] = i\r\n                outstops[k] = i\r\n                k = k + 1\r\n\r\n            j = j + 1\r\n\r\n        if distincts[i] != -1:\r\n            outstops[k - 1] = i + 1\r\n\r\n    # Fill the remaining start-stops to produce empty lists\r\n    for k in range(k, outlength):\r\n        outstarts[k] = lendistincts + 1\r\n        outstops[k] = lendistincts + 1\r\n        \r\n\r\n\r\nawkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64(\r\n    outstarts, outstops, distincts, distincts_length, gaps, outlength\r\n)\r\n```",
  "created_at":"2022-01-29T16:32:25Z",
  "id":1024943033,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49F2O5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-29T16:32:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I don't think this is actually the cause of *this* problem though (because we never read these o-o-b values). Instead, something looks funky with the distincts (`[0, 0, 0, 2, 2, 2, 1, 1, 1, 3, 3, 3]`) and the algorithm that uses them here.",
  "created_at":"2022-01-29T16:44:08Z",
  "id":1024944990,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49F2te",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-29T16:44:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Calling `ak.sum(x, axis=0)` does not match (in structure) the NumPy result:\r\n> \r\n> ```\r\n> >>> ak._v2.to_numpy(x).sum(axis=0).tolist()\r\n> [[[10, 12, 14], [16, 0, 0]], [[18, 20, 22], [24, 0, 0]]]\r\n> >>> ak._v2.sum(x, axis=0).tolist()\r\n> [[[10, 12, 14], []], [[16, 0, 0, 18, 20, 22], []]]\r\n> ```\r\n\r\nThis does look wrong. Does it work in v1? Cases like this were extensively tested (and I thought I had ported all of those tests to v2). Since it's a structure thing, it shouldn't matter which reducer we use, and I find that `prod` with prime numbers is a good diagnostic, since there's only one way to obtain a given product. (WIth `sum`, you'd have to use powers of 2.)\r\n\r\nIf it is a v1/v2 difference, the issue wouldn't be _in_ the kernel itself, since that's the same for both. It would be a matter of how it's called and what Indexes it's writing into.",
  "created_at":"2022-01-30T13:50:29Z",
  "id":1025147997,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49GoRd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-30T13:50:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski it doesn't work in v1 either. As I understand our reducers, and based upon what you've said, the `_reduce_next` ultimately assembles the elements in such a way that the reducer only has to walk over a array of monotonically increasing parents. It doesn't look like this is true in this case: in a simpler example, the result of `awkward_ListOffsetArray_reduce_nonlocal_preparenext_64` is \r\n```\r\n nextparents=[0 0 2 2 1 1 3 3], nextcarry=[0 2 4 6 1 3 5 7]\r\n```\r\nwhich means that later kernel functions that appear to assume parents are monotonic fails (which is why I suspected `awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64` at first).",
  "created_at":"2022-01-30T14:37:14Z",
  "id":1025156861,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49Gqb9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-30T14:45:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This simpler example is \r\n```python\r\nimport awkward as ak\r\nx = ak._v2.Array([\r\n    [\r\n        [\r\n            [1],\r\n            [4]\r\n        ],\r\n        [\r\n            [5],\r\n            [8]\r\n        ]\r\n    ],\r\n    [\r\n        [\r\n            [9],\r\n            [12]\r\n        ],\r\n        [\r\n            [13],\r\n            [16]\r\n        ]\r\n        \r\n    ]\r\n])\r\n\r\nprint(ak._v2.sum(x, axis=1))\r\nprint(ak._v2.to_numpy(x).sum(axis=1))\r\n```",
  "created_at":"2022-01-30T14:37:48Z",
  "id":1025156971,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49Gqdr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-30T14:37:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I modified `listoffsetarray.py` https://github.com/scikit-hep/awkward-1.0/blob/da762fa814531806d7d95a4ac93b43bccefe9dfe/src/awkward/_v2/contents/listoffsetarray.py#L867 locally to order `carry` such that `nextparents` was monotonic:\r\n```python3\r\nif depth == 3:\r\n    nextparents[:] = [0, 0, 1, 1, 2, 2, 3, 3]\r\n    nextcarry[:] = [0, 2, 1, 3, 4, 6, 5, 7]\r\n```\r\n\r\nand this then produces the correct result, making me think it's the aforementioned kernel computing `nextparents` and `nextcarry` incorrectly.",
  "created_at":"2022-01-30T14:43:42Z",
  "id":1025158031,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49GquP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-30T14:44:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> ```\r\n> nextparents=[0 0 2 2 1 1 3 3]\r\n> ```\r\n\r\n~~It's more likely that I'm misremembering the monotonicity of `parents` than that the code that generated the above is wrong.~~ It's possible that I'm misremembering the monotonicity of `parents`. Maybe the above is right.\r\n\r\nLet me backpedal on that statement: at least integer values are guaranteed to be contiguous\u2014i.e. the second `2` can't appear at the end of that array. The whole thing was designed around making sure that [parallel jagged reduction](https://github.com/jpivarski/jupyter-performance-studies/blob/master/2018-09-10-jagged-reduction.ipynb) would work, and it wouldn't work unless values in the `parents` are contiguous. In fact, this cpu-kernel is \"sequential algorithm 2: scatter from parents\" in the linked notebook, which also relies on the `parents` being value-contiguous.\r\n\r\nArgmin and argmax need a `starts` to go along with this, and it's possible to deal with non-contiguous `parents` with `starts` that are out of order. In the above case, the `starts` could be\r\n\r\n```\r\n[0 4 2 6]\r\n```\r\n\r\n**Edit:** for the moment, I'm going to be non-committal about whether `parents` and `starts` need to be monotonic, in addition to `parents` needing to be value-contiguous.",
  "created_at":"2022-01-31T20:59:40Z",
  "id":1026203568,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49Kp-w",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-31T21:08:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The `_reduce_next` method, [here in v1](https://github.com/scikit-hep/awkward-1.0/blob/8e682003331d0bbe493f4a8b3446f8cc081878b8/src/libawkward/array/ListOffsetArray.cpp#L1359-L1554) and [here in v2](https://github.com/scikit-hep/awkward-1.0/blob/8e682003331d0bbe493f4a8b3446f8cc081878b8/src/awkward/_v2/contents/listoffsetarray.py#L1446-L1687), has two main cases: the recursion depth is above the level chosen by `axis`, and the recursion depth is below the level chosen by `axis`. The case `axis=-1` is \"below\" all the way down to the NumpyArray. The \"above\" case is selected by `if not branch and negaxis == depth` [here in v1](https://github.com/scikit-hep/awkward-1.0/blob/8e682003331d0bbe493f4a8b3446f8cc081878b8/src/libawkward/array/ListOffsetArray.cpp#L1379) and [here in v2](https://github.com/scikit-hep/awkward-1.0/blob/8e682003331d0bbe493f4a8b3446f8cc081878b8/src/awkward/_v2/contents/listoffsetarray.py#L1475). The \"below\" case is selected by `else` [here in v1](https://github.com/scikit-hep/awkward-1.0/blob/8e682003331d0bbe493f4a8b3446f8cc081878b8/src/libawkward/array/ListOffsetArray.cpp#L1502) and [here in v2](https://github.com/scikit-hep/awkward-1.0/blob/8e682003331d0bbe493f4a8b3446f8cc081878b8/src/awkward/_v2/contents/listoffsetarray.py#L1630), to help with navigation. It looks like I used the words \"nonlocal\" for \"above\" and \"local\" for \"below\" in the kernel names.\r\n\r\nThe \"below\" case is the easier one, and for `axis=-1`, the `parents` will definitely be monatonic. Here, the problem is just one of reducing together (e.g. adding up) array elements that are next to each other, though there's an arbitrary number of them in each group. [np.ufunc.reduceat](https://numpy.org/doc/stable/reference/generated/numpy.ufunc.reduceat.html) does this using only `starts`, and that's how it was implemented in Awkward 0. In Awkward 1, it was implemented with `parents` because (a) the \"sequential algorithm 2: scatter from parents\" was found to be faster, (b) it's the only way to do it on a vectorized/parallel device like a GPU, and (c) because this mixes better with the \"above\" case.\r\n\r\nThe \"above\" case was motivated by https://github.com/scikit-hep/awkward-0.x/issues/166. The implementation strategy started by just trying to reproduce NumPy for fixed list lengths by reordering the next level down (reordering Index is `nextcarry`; reordered data is `nextcontent`) and keeping track of where each element came from with the next `parents`. Here is where I _thought_ the `nextparents` would be monotonic, because the `nextcontent` is rearranged in such a way as to make it so. As I said above, I'm not entirely sure about that.\r\n\r\nThings like \"maxcount,\" \"findgaps,\" and \"offsetscopy\" are complications for dealing with variable list lengths, beyond NumPy. Since you saw an error in a purely NumPy-like case, those aren't relevant to the problem. Similarly, the kernels that manage the `starts` are not relevant because `starts` are only needed for `argmin` and `argmax`.\r\n\r\nThe testing started in [tests/test_0115-generic-reducer-operation.py](https://github.com/scikit-hep/awkward-1.0/blob/main/tests/test_0115-generic-reducer-operation.py). Notice that they start by dealing with the NumPy-like case before moving on to issues with \"gaps\" and such. The NumPy-like tests all work on a 3D array\r\n\r\n```python\r\n>>> np.array(primes)[:2*3*5].reshape(2, 3, 5)\r\narray([[[  2,   3,   5,   7,  11],\r\n        [ 13,  17,  19,  23,  29],\r\n        [ 31,  37,  41,  43,  47]],\r\n\r\n       [[ 53,  59,  61,  67,  71],\r\n        [ 73,  79,  83,  89,  97],\r\n        [101, 103, 107, 109, 113]]])\r\n```\r\n\r\nand test all possible `axis` depths: `0`, `1`, `2`. Your minimal reproducer is a 4D array, and I can't get a reproducer with only 3 dimensions. I would have thought that tests that include \"all below,\" \"all above,\" and \"one below, one above\" would have exhausted the possibilities. However, your reproducer fails for `axis=0` and `axis=1`, which is to say, all cases with \"at least two below.\"\r\n\r\n```python\r\n>>> ak.sum(ak.Array([[[[1], [4]], [[5], [8]]], [[[9], [12]], [[13], [16]]]]), axis=0).tolist()\r\n[[[10], []], [[16, 18], []]]\r\n>>> ak.sum(ak.Array([[[[1], [4]], [[5], [8]]], [[[9], [12]], [[13], [16]]]]), axis=1).tolist()\r\n[[[6], []], [[12, 22], []]]\r\n```\r\n\r\nThe `axis=2` and `axis=3` cases are fine.\r\n\r\nReduction [does not treat RegularArrays any differently from List/ListOffsetArrays](https://github.com/scikit-hep/awkward-1.0/blob/8e682003331d0bbe493f4a8b3446f8cc081878b8/src/awkward/_v2/contents/regulararray.py#L886-L911), except inasmuch as they preserve regularity in the output (a later correction, #447).\r\n\r\nFor what it's worth, the reducer algorithms were first developed outside the context of Awkward Arrays, in [studies/reducers.py](https://github.com/scikit-hep/awkward-1.0/blob/main/studies/reducers.py), to be able to make tests rapidly and avoid the formality of defining kernels right away. This file might be useful to see how the kernels work together without the special cases that have accumulated over the years. See, for instance,\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/8e682003331d0bbe493f4a8b3446f8cc081878b8/studies/reducers.py#L964-L1050\r\n\r\nfor a straight-through implementation of `ListOffsetArray._reduce_next` without kernel indirection.\r\n\r\nOne last thing: the only kernel that updates a specially prepared Index is [awkward_ListOffsetArray_reduce_nonlocal_preparenext](https://github.com/scikit-hep/awkward-1.0/blob/main/src/cpu-kernels/awkward_ListOffsetArray_reduce_nonlocal_preparenext_64.cpp), which uses and changes-in-place `offsetscopy`. (That's why it's a copy.) The studies file shows why we want that.",
  "created_at":"2022-01-31T21:59:18Z",
  "id":1026253402,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49K2Ja",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-31T21:59:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've looked into this some more, and I now understand that this bug is a manifestation of parents having non well-defined semantics. Some kernels (`findgaps` and `nonlocal_outstartstops`) seem to assume that the parent array will only every increase or remain constant.\r\n\r\nIt looks like these kernels are computing `gaps` and `distincts` are incorrectly. If I patch the code here to set `gaps[:] = [1, 1, 1, 1]`, and modify `nonlocal_outstartstops` to detect list boundaries with `lastdistinct != distinct[i]` then the result is correct.\r\n\r\nI'd like to just clarify my understanding of what these arrays mean:\r\n- `distincts`: compute densely mapped parents, e.g. `[0, 1, 3, 4] -> [0, 1, -1, 2, 3]`\r\n- `gaps`: compute missing sublists, where `1` is a list boundary, `2` is a missing sublist, etc, e.g. `[0, 1, 3, 4] -> [1, 1, 2, 1]`\r\n\r\nAs far as the actual reduction is concerned, the order of parents doesn't matter - it just reduces and writes to the output. It's only when rebuilding the structure that we care about this order. \r\n\r\nMore concretely, consider this example:\r\n\r\n```python3\r\nx = ak._v2.Array([\r\n    [\r\n        [\r\n            [1],\r\n            [4]\r\n        ],\r\n        [\r\n            [5],\r\n            [8]\r\n        ],\r\n        [\r\n            [6],\r\n            [7]\r\n        ]\r\n    ],\r\n    [\r\n        [\r\n            [9],\r\n            [12]\r\n        ],\r\n        [\r\n            [13],\r\n            [16]\r\n        ]\r\n\r\n    ]\r\n])\r\n```\r\n\r\nAssume this layout is only `ListOffsetArray`s and a final `NumpyArray`, then we have at the deepest level:\r\n```python\r\ndata = [1, 4, 5, 8, 6, 7, 9, 12, 13, 16]\r\n```\r\nAt the nonlocal level, we want to produce a `carry` and `nextparents` such that the reducer can act in a single pass:\r\n```python\r\ncarry = [0, 2, 4, 1, 3, 5, 6, 8, 7, 9]\r\nnextparents = [0, 0, 0, 1, 1, 1, 2, 2, 3, 3]\r\n```\r\nWhereas right now we have\r\n```python\r\ncarry = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]\r\nnextparents = [0, 0, 0, 2, 2, 1, 1, 1, 3, 3]\r\n```\r\n\r\nIf this is the case, I *think* we need `parents` to be ordered. We currently use that information to identify empty sub-lists, and we can't do that if this assumption does not hold. Requiring this ordering would also simplify the kernel used to compute the output start/stops, because we could use `ListOffsetArray` instead of `ListArray`",
  "created_at":"2022-02-01T12:19:09Z",
  "id":1026783938,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49M3rC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T12:19:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Especially given the fact that I don't remember now, it's entirely possible that I had different ideas about the monotonicity of `parents` at different points in the development process. I'm still surprised that 3D tests weren't enough to catch that, but maybe this only comes about with dual application of \"above\" plus at least one \"below\"...\r\n\r\nA way to test this idea, and possibly as a long-term fix, is to put a `nextparents`, `nextcarry` reordering step right after those two Indexes are first created and before `nextparents` is assumed to be monotonic. (It would be better to do this at the level of reordering `nextcarry` than by carrying twice.) They don't have to be reordered in place, and probably shouldn't be.\r\n\r\nThe studies script should still run as-is. If you put one of your reproducing examples into it, you should see the same error there because it's a flaw in the logic, and that script never tested a 4D regular array. Adding the reordering step would be a lot faster and hackable in that script than it would be in the real thing\u2014you'd get a confirmation that it works before spending the time needed to create a new kernel. What do you think?",
  "created_at":"2022-02-01T12:44:43Z",
  "id":1026803743,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49M8gf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T12:44:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> A way to test this idea, and possibly as a long-term fix, is to put a `nextparents`, `nextcarry` reordering step right after those two Indexes are first created and before `nextparents` is assumed to be monotonic.\r\n\r\nThis would work as a band-aid, I tested it earlier :) \r\n\r\n```python3\r\nj = self._nplike.argsort(nextparents)\r\nnextcarry = ak._v2.index.Index64(self._nplike.asarray(nextcarry)[j])\r\nnextparents = ak._v2.index.Index64(self._nplike.asarray(nextparents)[j])\r\n```\r\n\r\nI think we probably can avoid this by re-writing `prepare_next` so that it outputs `nextcarry` in ascending nextparents order. If `parents` is always in order, then it is possible to iterate such that we produce `nextparents` in order. I need to spend some time to implement this, but I'm not able to do that just at the moment!",
  "created_at":"2022-02-01T13:17:48Z",
  "id":1026833757,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49ND1d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T13:17:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"There are so many index-rewrites in this code-path that adding one more as a band-aid wouldn't disturb the performance much. If the question is whether that would _obfuscate_ the code more, that's a more serious concern, but I think a kernel that only reorders could be easier to read. It has the advantage that we can guarantee that it is not wrong only by reading it\u2014in isolation, unconnected to anything else. Certainly none of the other kernels are going to _break_ by having monotonic `parents` instead of non-monotonic `parents`, and C code that only permutes two array buffers should be easy to verify for correctness by eye.\r\n\r\nIf the band-aid can be applied in short order (within your time constraints), then that would be more valuable than doing a more thorough job later, with the risk of it not happening at all. Things do fall through the cracks, and this is a bug-fix. Bug-fixes are important! `:)`\r\n\r\nIf you can write down, here perhaps, what that kernel should look like, another one of us can implement the kernel (i.e. adding to YAML and cpu-kernels). @ianna and I have experience in that workflow. Oh! I see that the code you wrote is a complete v2 fix. We might even have an equivalent of `np.argsort` as a kernel for v1 already. (@ianna, are any of the kernels you created usable here?) At what point in the code do you insert it? [Here in v1](https://github.com/scikit-hep/awkward-1.0/blob/8e682003331d0bbe493f4a8b3446f8cc081878b8/src/libawkward/array/ListOffsetArray.cpp#L1424) and [here in v2](https://github.com/scikit-hep/awkward-1.0/blob/8e682003331d0bbe493f4a8b3446f8cc081878b8/src/awkward/_v2/contents/listoffsetarray.py#L1521)?",
  "created_at":"2022-02-01T17:03:17Z",
  "id":1027068590,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49N9Ku",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T17:03:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> At what point in the code do you insert it? Here in v1 and here in v2?\r\n\r\nYes to both! \r\n\r\nYeah, if we put a todo to just fix the `prepare_next` kernel then I think this would fix the bug for now :)\r\n\r\nI understand `prepare_next` well enough to know that it's wrong, but I need to spend more time on it in order to reason about what it should look like in order to return nicer parents. I'm sure it's not too tricky, but just a bit out of my time right now!\r\n\r\n",
  "created_at":"2022-02-01T17:24:22Z",
  "id":1027097744,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49OESQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T17:24:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hmm... I managed to crash v1 with the following test:\r\n```python\r\n    array = np.array([\r\n        [\r\n            [\r\n                [1],\r\n                [4]\r\n            ],\r\n            [\r\n                [5],\r\n                [8]\r\n            ]\r\n        ],\r\n        [\r\n            [\r\n                [9],\r\n                [12]\r\n            ],\r\n            [\r\n                [13],\r\n                [16]\r\n            ]\r\n\r\n        ]\r\n    ])\r\n    nplike = ak.nplike.of(array)\r\n\r\n    ak_array = ak.from_numpy(array)\r\n    assert ak.to_list(ak.sum(ak_array, axis=1)) == ak.to_list(array.sum(axis=1))\r\n\r\n```",
  "created_at":"2022-02-04T17:51:52Z",
  "id":1030216070,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49Z9mG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-04T17:51:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna did this segfault or raise an Exception? I see only a `ValueError` in master & 1.7.0 on my machine.",
  "created_at":"2022-02-10T14:35:40Z",
  "id":1034994320,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49sMKQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T14:35:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna did this segfault or raise an Exception? I see only a `ValueError` in master & 1.7.0 on my machine.\r\n\r\nyep, the first :-(",
  "created_at":"2022-02-10T14:51:40Z",
  "id":1035012127,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49sQgf",
  "performed_via_github_app":null,
  "reactions":{
   "confused":1,
   "total_count":1
  },
  "updated_at":"2022-02-10T14:51:40Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think, I need some help here. It seems to me, I miss some extra information - `starts`? The `starts` can help in ordering the parents, but I'm not sure how to efficiently sort the `distincts` if the `parents` are ordered. Especially if the `distincts` have missing values (e.g. -1)..\r\n\r\n[This kernel](https://github.com/scikit-hep/awkward-1.0/blob/500e0dd06fa4aa542ac0226da24851fb730e5042/src/cpu-kernels/awkward_ListOffsetArray_reduce_nonlocal_preparenext_64.cpp#L20-L48) calculates the `distincts` and does not assume that the `parents` are ordered. Then, [this kernel](https://github.com/scikit-hep/awkward-1.0/blob/500e0dd06fa4aa542ac0226da24851fb730e5042/src/cpu-kernels/awkward_ListOffsetArray_reduce_nonlocal_findgaps_64.cpp#L11-L20) calculates `gaps` (between the parents?) and either assumes(?) that the `parents` are ordered or is it intentionally(?) produces unordered gaps as a result? Finally, [this kernel ](https://github.com/scikit-hep/awkward-1.0/blob/500e0dd06fa4aa542ac0226da24851fb730e5042/src/cpu-kernels/awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64.cpp#L14-L48) needs ordered `gaps`, I think.\r\n",
  "created_at":"2022-02-10T15:17:25Z",
  "id":1035041535,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49sXr_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T15:17:25Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna Yes, I'm pretty sure that `findgaps` and `nonlocal_outstartstops` are both assuming that the parents are ordered, because the `<` operator doesn't yield much meaningful information if this isn't true. Maybe a better way of putting it is that the currently behaviour is *broken* for non-monotonic increasing parents, so it reinforces my belief that these kernels assume monotonic increasing parents. \r\n\r\nPlease stop me if I am telling you things that you already know! This is just from my attempts to understand this logic:\r\n\r\nThe `gaps` is used to identify missing sublists in ordered parents (see [my above comment](https://github.com/scikit-hep/awkward-1.0/issues/1266#issuecomment-1026783938)). I haven't looked into why we don't just use `parents` (compute gaps directly in the kernel(s) that need it), but it is used by `nonlocal_outstartstops` to mark the break between sublists:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/500e0dd06fa4aa542ac0226da24851fb730e5042/src/cpu-kernels/awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64.cpp#L32-L36 \r\nThis is always at least one (each entry in `gaps` corresponds to a sublist), but can be more where we have gaps between parents (empty sublists)\r\n\r\nHowever, I made an assumption about `distincts` that I think may not be true, and would explain why the fix doesn't work in some cases. Let me look.",
  "created_at":"2022-02-10T15:23:27Z",
  "id":1035048361,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49sZWp",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-02-10T15:31:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm looking at this further. Your test case is interesting @ianna , because it seems like the truly jagged case is not fixed by ordering the parents, which is why I missed it with the regular test case.",
  "created_at":"2022-02-10T15:45:55Z",
  "id":1035075733,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49sgCV",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-02-10T15:45:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"## How Jagged Reduction Works\r\n\r\nThis is for my benefit in referencing how we do jagged reduction.\r\n\r\nThere are two types of information running through jagged reduction:\r\n- context for _this_ content \r\n- context for _child_ content\r\n\r\nSome of the context for _this_ content is passed from the parent. In the case of the root content, the parent does not exist, so this information is given by the assumption of an outer list of length `len(this)`.\r\n\r\nI'm ignoring `starts` as it's only used by position-aware reducers.\r\n\r\nFrom the *parent* (pertaining to *this* layout), we have:\r\n- `parents` - the index of the _parent_ sublist that each item in _this_ list belongs to. For the top-level content,`parents = [0, 0, ...]` where `len(parents) = len(content)`\r\n- `outlength` - the length of the return value at this level (1 for the root)\r\n\r\nFrom *this* content, we compute the following for the reduction of our child:\r\n- `nextcarry` - To ensure reducers act over adjacent values, we re-index the child content to guarantee this.\r\n- `nextparents` - We want to ensure that the values to be reduced over are adjacent. `nextparents` is used to keep track of which reduction each child content item belongs to. I'll mention later why there are jumps in this sometimes.\r\n\r\nFrom *this* content, we compute the following for our wrapped reduction result:\r\n- `outstarts` - The start indices into the reduction result of our sublists\r\n- `outstops` - The stop indices into the reduction result of our sublists\r\n- `gaps` - An array of length `outlength`\r\n- `distincts` - An array of length `N` (given by `outlength` * max sublist length `M`). I'm still figuring this out. \r\n\r\n\r\n## `depth==1`\r\nFor a list:\r\n```xml\r\n<ListOffsetArray len='4'>\r\n    <offsets><Index dtype='int64' len='5'>[0 2 4 6 8]</Index></offsets>\r\n    <content><ListOffsetArray len='8'>\r\n        <offsets><Index dtype='int64' len='9'>[ 0  1  3  4  6  7  9 10 12]</Index></offsets>\r\n        <content><NumpyArray dtype='int64' len='12'>\r\n            [ 1  2  3  5  7 11 13 17 19 23 29 31]\r\n        </NumpyArray></content>\r\n    </ListOffsetArray></content>\r\n</ListOffsetArray>\r\n```\r\n```python\r\n    [\r\n        # axis 0\r\n        [\r\n            # axis 1\r\n            [1], [2, 3]\r\n        ],\r\n        [\r\n            [5], [7, 11]\r\n        ],\r\n        [\r\n            [13], [17, 19]\r\n        ],\r\n        [\r\n            [23], [29, 31]\r\n        ]\r\n    ]\r\n```\r\nwe have two items. As this is the outermost list, they all have the same parent (`parents = [0, 0, 0, 0]`).\r\n\r\nIf we want to compute `np.prod(array, axis=0)`, then we want to take the product over each column, i.e. `[1], [5], [13], [23]`. \r\nClearly we place our first column sublist indices together (`0, 2, 4, 6`) and give them the same parent (`0, 0, 0, 0`). The same holds for the second column, i.e. we go from:\r\n```python\r\n[\r\n      [1], [2, 3]\r\n      [5], [7, 11]\r\n      [13], [17, 19]\r\n      [23], [29, 31]\r\n]\r\n```\r\nto \r\n```python\r\n[\r\n    # 0    2     4      6                         (carry)\r\n      [1], [5], [13], [23], # parent 0\r\n    #   1         3        5        7       (carry)\r\n      [2, 3], [7, 11], [17, 19], [20, 31] # parent 1\r\n]\r\n```\r\n\r\nSo, we have\r\n- `nextcarry = [0, 2, 4, 6, 8, 1, 3, 5, 7]` - group columns together (`1, 5, 13, ...`) and (`(2, 3), (7, 11), ...`)\r\n- `nextparents = [0, 0, 0, 0, 1, 1, 1, 1]` (see above)\r\nand\r\n- `distincts = [0, 0]` ??\r\n- `gaps = [1]` ??\r\n\r\nWe can recurse into the child with this same procedure: We first pass in `nextparents` and `nextstarts` to the child content (another list!)\r\n\r\n## `depth==2`\r\nSo, we have this list:\r\n```xml\r\n<ListOffsetArray len='8'>\r\n    <offsets><Index dtype='int64' len='9'>[ 0  1  2  3  4  6  8 10 12]</Index></offsets>\r\n    <content><NumpyArray dtype='int64' len='12'>\r\n        [ 1  5 13 23  2  3  7 11 17 19 29 31]\r\n    </NumpyArray></content>\r\n</ListOffsetArray>\r\n```\r\n```python\r\n[\r\n      [1], [5], [13], [23], # parent 0\r\n      [2, 3], [7, 11], [17, 19], [20, 31] # parent 1\r\n]\r\n```\r\n\r\nWith\r\n- `parents = [0, 0, 0, 0, 1, 1, 1, 1]`\r\n\r\nIn order to maintain the adjacency of reduced elements, we have to split our sublists to pull out the columns for the next reduction, i.e.\r\n```python\r\n[\r\n      1, 5, 13, 23, # column 0\r\n      2, 7, 17, 29, # column 1\r\n      3, 11, 19, 31 # column 2\r\n]\r\n```\r\nAgain, this is because once the reducer acts on adjacent elements, we will be left with three distinct values which correspond to the reduction result.\r\n\r\nTo obtain this ordering, we need a `carry`:\r\n- `nextcarry = [0, 1, 2, 3, 4, 6, 8, 10, 5, 7, 9, 11]`\r\nAnd these sublists have unique parents\r\n- `nextparents = [0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3]`\r\n\r\nSo, why is there a jump in `nextparents` between 0 and 2? Well, the reducer behaviour for jagged arrays is to treat all sublists as having `len(sublist)=maxlen`. This is visually represented as though this current array were:\r\n```python\r\n[\r\n    [1, \u00d8], [5, \u00d8], [13, \u00d8], [23, \u00d8],\r\n    [2, 3], [7, 11], [17, 19], [29, 31],\r\n]\r\n```\r\nThis would then look like:\r\n```python\r\n[\r\n      1, 5, 13, 23, # column 0\r\n      \u00d8, \u00d8, \u00d8, \u00d8  # column 1 (missing)\r\n      2, 7, 17, 29, # column 2\r\n      3, 11, 19, 31 # column 3\r\n]\r\n```\r\ni.e. we behave as though there is a second column between (1,5,13,23) and (2, 7, 17, 29) that needs to be accounted for\r\n\r\nSo we have \r\n- `distincts = [0, -1, 1, 0]` - ??\r\n- `gaps = [1, 1]` - ??\r\n\r\n## `depth == 3`\r\nFinally, we have a `NumpyArray` with the following contents after carry'ing:\r\n```python\r\n[ 1,  5, 13, 23,  2,  7, 17, 29,  3, 11, 19, 31]\r\n```\r\nAnd the reducer simply walks over the array and reduces within the same sublists (using parents).\r\nWe're then left with\r\n\r\n```python\r\n[ 1495 , 1, 6902, 19437]\r\n```",
  "created_at":"2022-02-10T23:06:23Z",
  "id":1035623709,
  "issue":1266,
  "node_id":"IC_kwDODBCWws49ul0d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T09:38:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1267](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f9a4edf) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.24%`.\n> The diff coverage is `60.57%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `79.68% <0.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.85% <0.00%> (+0.18%)` | :arrow_up: |\n| ... and [146 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1267/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-29T22:28:25Z",
  "id":1024998397,
  "issue":1267,
  "node_id":"IC_kwDODBCWws49GDv9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-29T22:28:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"(I think it's increasing test coverage because the more compact representation means fewer lines of code to test!)",
  "created_at":"2022-01-31T20:13:54Z",
  "id":1026167208,
  "issue":1267,
  "node_id":"IC_kwDODBCWws49KhGo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-31T20:13:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Just as a note, this will involve adding a function to `ak.behavior[np.add, \"string\", \"string\"]`. Here's what it looks like to add a broken function to that behavior:\r\n\r\n```python\r\n>>> def broken(x, y):\r\n...     raise Exception(\"broken!\")\r\n... \r\n>>> ak.behavior[np.add, \"string\", \"string\"] = broken\r\n\r\n>>> ar + \"a\"\r\nTraceback (most recent call last):\r\n...\r\n  File \"<stdin>\", line 2, in broken\r\nException: broken!\r\n```\r\n\r\nWriting a non-broken function will involve removing the `\"__array__\": \"string\"` parameters from `x` and `y`, [ak.concatenate](https://awkward-array.readthedocs.io/en/latest/_auto/ak.concatenate.html) on `axis=-1` (because they're just arrays of lists of uint8 now), and repackaging the result with an `\"__array__\": \"string\"` parameter (to make the concatenated lists of uint8 into strings).\r\n\r\nThe addition case is straightforward because we already have a function for concatenation. But for subtraction? That's a pretty sophisticated function. It might be in line with what @martindurant is thinking about.",
  "created_at":"2022-02-01T01:59:29Z",
  "id":1026405264,
  "issue":1269,
  "node_id":"IC_kwDODBCWws49LbOQ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-02-01T01:59:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"I do concur that the subtraction case may seem to be not intitive and it may be subject to the interpretation. However, from my point of view, the substration case is not very different than the addition case and as it can be defined via the four following rules:\r\n1.`f(A,B)  = A` (because  `B not in A`)\r\n2. `f(AB,B) = A` (because ` B in A`)\r\n3.`f(B,A) = B` if A not in B ( see rule 1 )\r\n4.`f(ABA,A) = AB` (see rule 2. However, one may  argue that the result should be `BA`. It depends on the starting point.\r\n",
  "created_at":"2022-02-01T08:27:32Z",
  "id":1026587627,
  "issue":1269,
  "node_id":"IC_kwDODBCWws49MHvr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T08:27:32Z",
  "user":"MDQ6VXNlcjEzNDA1NjY3"
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I am not entirely sure of the usefulness of arithmetic string operations - python provides only for equality, `in` (contains), addition (concat) and multiplication (repeat concat). \r\n\r\nI actually wish for a pandas-like accessor model, a set of functions that explicitly need to be given string-behaviour array(s) to work on. Maybe it could actually as an accessor (arr.str.upper(), arr.str.index(\"needle\"), ...) or as a module ak.str. The latter fits the layout of ak better; either way, we have an explicit namespace of things that work on string and rely on strings not being just a list of uint8.\r\nI was thinking maybe to code it in Rust, which has native utf8 support. ",
  "created_at":"2022-02-01T14:03:19Z",
  "id":1026876665,
  "issue":1269,
  "node_id":"IC_kwDODBCWws49NOT5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T14:03:19Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"> 4.f(ABA,A) = AB (see rule 2. However, one may argue that the result should be BA. It depends on the starting point.\r\n\r\nI do not have any use cases for string subtraction in mind, so the following could very well not be too useful in practice: I could also see `f(ABA,A) = B` as a potential outcome, removing all matches. That would lead to the question whether `f(ABABA, ABA)` should be `AB` or `BA` though, depending on the starting point again.",
  "created_at":"2022-02-03T07:15:28Z",
  "id":1028673176,
  "issue":1269,
  "node_id":"IC_kwDODBCWws49UE6Y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-03T07:15:28Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1270](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (73951b3) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/ab65e2046b044ea77997ce9f7673429bb5e79244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ab65e20) will **increase** coverage by `0.24%`.\n> The diff coverage is `61.18%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `58.63% <0.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `71.42% <\u00f8> (+16.88%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.64% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `85.40% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `87.95% <0.00%> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `79.68% <0.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `82.85% <0.00%> (+0.18%)` | :arrow_up: |\n| ... and [147 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1270/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-01-31T13:03:41Z",
  "id":1025716346,
  "issue":1270,
  "node_id":"IC_kwDODBCWws49IzB6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-02T17:47:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I've got a PR to wheel that would add a utility to do this (https://github.com/pypa/wheel/pull/422), but it's on hold for other changes in wheel. However, you can do it in the setup.py directly (which is probably better for this sort of case): see https://github.com/scikit-build/ninja-python-distributions/pull/85/files",
  "created_at":"2022-01-31T15:32:23Z",
  "id":1025900649,
  "issue":1270,
  "node_id":"IC_kwDODBCWws49JgBp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-01-31T15:32:23Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for links Henry! I made the changes and this should be ready after the tests pass.",
  "created_at":"2022-02-02T11:33:16Z",
  "id":1027849159,
  "issue":1270,
  "node_id":"IC_kwDODBCWws49Q7vH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-02T11:33:16Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1274](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2d24309) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.61%`.\n> The diff coverage is `75.86%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `78.18% <\u00f8> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdHlwZS5weQ==) | `44.11% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `58.62% <37.14%> (-2.03%)` | :arrow_down: |\n| ... and [69 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1274/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-01T18:27:21Z",
  "id":1027155455,
  "issue":1274,
  "node_id":"IC_kwDODBCWws49OSX_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T03:16:22Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, clearly this isn't as simple a fix as I had first hoped. Maybe I've just missed something, but I'll take another look at some point :)",
  "created_at":"2022-02-04T22:03:11Z",
  "id":1030385242,
  "issue":1274,
  "node_id":"IC_kwDODBCWws49am5a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-04T22:03:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This fails on the positional reducers, I believe, because `argsort` isn't guaranteed to preserve the order between equal elements. A quick check with `sorter = np.argsort(nextparents, kind=\"mergesort\")` seems to confirm this.\r\n\r\nI'd quite like to try re-writing the kernel(s) in `listoffsetarray` so that we can make use of the guarantee that `parents` is ordered, but that's a bigger task than I have time for right now. ",
  "created_at":"2022-02-11T22:37:28Z",
  "id":1036698860,
  "issue":1274,
  "node_id":"IC_kwDODBCWws49ysTs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-11T22:41:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Now the test-failures are just typetracer failures (I think, I haven't run all the tests locally).",
  "created_at":"2022-02-11T22:57:43Z",
  "id":1036718926,
  "issue":1274,
  "node_id":"IC_kwDODBCWws49yxNO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-11T22:57:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"All the tests pass!\r\n\r\nWait\u2014is it the case that the only thing we needed was to sort the `parents` with a stable sort? That's all that was wrong?",
  "created_at":"2022-02-11T23:10:05Z",
  "id":1036735569,
  "issue":1274,
  "node_id":"IC_kwDODBCWws49y1RR",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-02-11T23:10:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Wait\u2014is it the case that the only thing we needed was to sort the `parents` with a stable sort? That's all that was wrong?\r\n\r\nYep! I was thinking about it whilst trying to redesign the kernel to compute nextparents and nextcarry directly, and realised that there was probably no guarantee of stability in the sort that we were using. It was the fact that it only failed for positional reducers that made me suspicious though.",
  "created_at":"2022-02-11T23:12:59Z",
  "id":1036739436,
  "issue":1274,
  "node_id":"IC_kwDODBCWws49y2Ns",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-11T23:12:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Note to self - if we do merge this, then we should definitely explain _why_ we are using `mergesort`.",
  "created_at":"2022-02-11T23:16:24Z",
  "id":1036743755,
  "issue":1274,
  "node_id":"IC_kwDODBCWws49y3RL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-11T23:16:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"No kidding\u2014so that somebody doesn't just say, \"Oh, here's a faster sorting algorithm; I'll use that\" (and maybe doesn't get segfaults because they're not on a Mac...).\r\n\r\nThis is definitely a faceplam moment. I'm still astonished.\r\n\r\nSo yes, we should think about merging this. I'm still keeping in mind your initial assessment that it's a band-aid on a system that's grown pretty complicated. I was talking with @ianna earlier today\u2014she has a different solution so we should take a look at that.\r\n\r\nAlso, all of these intermediate arrays have a noticeable impact on performance (`ak.sum` is significantly slower than `np.sum`), and I've been thinking for a while that we should perhaps have a separate code path for the `axis=-1` case. In #579, I was thinking that some of these arrays could be skipped without a separate code path, but we could skip a lot more of them with one. The downside is that looks like more complexity, having two ways to do something, but that all-important `axis=-1` case would be less difficult to understand if it's handled in isolation. (If, for instance, someone is looking at it with a profiling tool, trying to see what can be trimmed.)\r\n\r\nThen we'd be presenting only the `axis != -1` case as something unavoidably complex and slow. As we've learned this week, it takes great effort to understand what it's doing.",
  "created_at":"2022-02-11T23:36:08Z",
  "id":1036768311,
  "issue":1274,
  "node_id":"IC_kwDODBCWws49y9Q3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-11T23:36:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This is definitely a faceplam moment. I'm still astonished.\r\n\r\nI don't think this is a facepalm moment! There is a *lot* going on here, and it's not always clear what our invariants are. \r\n\r\n>  (and maybe doesn't get segfaults because they're not on a Mac...).\r\n\r\nThankfully I think even if the sorter were changed, this would only break positional reducer results, rather than any allocation-related intermediary arrays. It just so happens that if the sorter isn't stable, the values in the reduction groups are visited in different orders, so positional reducers produce incorrect results. I never expected to care about sort stability!\r\n\r\nI agree about performance. I was thinking about it abstractly that each kernel is doing an allocation and some work, and as we get larger and deeper arrays this will add up. If we can do things in one (or fewer) passes then it means we can claw back some performance. \r\n\r\nRE optimising `axis=-1` reductions. I suspect these are _very_ common. It would be interesting to see how much faster they are than the slow path. My only worry is *more* code to debug (e.g. this reduction bug that only shows up at n>=4), but I am also cognizant of how even a 10% perf gain is substantial. This is certainly more your area of experience in the Awkward domain, so I'm not going to try and push my opinion around!",
  "created_at":"2022-02-11T23:43:14Z",
  "id":1036776771,
  "issue":1274,
  "node_id":"IC_kwDODBCWws49y_VD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-11T23:45:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Great! Well done @agoose77 ! Thanks!",
  "created_at":"2022-02-14T09:13:26Z",
  "id":1038835948,
  "issue":1274,
  "node_id":"IC_kwDODBCWws4962Ds",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-14T09:13:26Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"I think we're all happy about this fix. There might be a more efficient solution, but this one is correct. I'll be merging it.",
  "created_at":"2022-02-18T02:21:51Z",
  "id":1043749541,
  "issue":1274,
  "node_id":"IC_kwDODBCWws4-Nlql",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T02:21:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks all! Note that we didn't fix v1 here, but maybe that's another PR.",
  "created_at":"2022-02-19T00:06:15Z",
  "id":1045394870,
  "issue":1274,
  "node_id":"IC_kwDODBCWws4-T3W2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-19T00:06:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I missed that. Now the title is less misleading.\r\n\r\nOf course: to do v1, we'd need to run a sorting algorithm in C++. Maybe one of the `argsort` kernels can be used for that.",
  "created_at":"2022-02-19T01:02:54Z",
  "id":1045472314,
  "issue":1274,
  "node_id":"IC_kwDODBCWws4-UKQ6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-19T01:02:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"But yes, another PR. Not this one.",
  "created_at":"2022-02-19T01:03:04Z",
  "id":1045472545,
  "issue":1274,
  "node_id":"IC_kwDODBCWws4-UKUh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-19T01:03:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I also put in several TODO's for things that needed some input; I went with matching the old code technically, even if something else might have been meant.",
  "created_at":"2022-02-01T23:04:14Z",
  "id":1027373120,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49PHhA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T23:04:14Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"These are generally good improvements (the diffs I've seen so far). In many of them, I'd be on the fence:\r\n\r\n   * between a standard for loop filling an array with `append` versus a list comprehension (I make the choice based on the obfuscation that black's line width limit causes),\r\n   * between `for i in range(len(...))` and `enumerate(...)` (I go for the dummy variable `i` if there's a symmetry between the things that are being selected with square brackets),\r\n   * between `x == this or x == that` and `x in (this, that)` (I usually choose equality, especially if the set is small, because I don't want Python building data structures in tight loops; a performance consideration)\r\n\r\nBut if the linter says, \"do this, not that,\" then sure.",
  "created_at":"2022-02-01T23:13:13Z",
  "id":1027379624,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49PJGo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T23:16:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"In some languages, it's faster to do the comprehension, because the language knows you are not done filling the loop, and can even sometimes take length hints, while appending has to just keep making new larger arrays. I don't know how true that is in Python, but I tend to highly favor comprehensions if you are making a new structure or changing every element, and can reasonably write one. It also used to be much better for static typing to do the comprehension, because then the checker knows what the type in the list is. Though checkers are getting smart enough to backtrack in many cases.\r\n\r\nIf a loop has `x[i] = f(x[i])`, _and `x[i]` can change inside the loop_, then this is best. Most of the time, `x[i]` on the right will not change inside the loop; then it's much, much better to use `for i, x_i = enumerate(x)` and `x[i] = f(x_i)`, because you are conveying that fact to the reader. Otherwise, the reader has check every assignment and see if `x[i]` could change (I know, because I had to do this!)",
  "created_at":"2022-02-01T23:21:10Z",
  "id":1027384932,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49PKZk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T23:24:00Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"> I usually choose equality, especially if the set is small, because I don't want Python building data structures in tight loops; a performance consideration\r\n\r\nPython explicitly optimizes the `in` case with a literal set, list, or tuple on the right. It's both better, and avoids repeating the left hand side. Also, `thing == 'x' or thimg == 'y'` visually takes more effort than `thing in {'x', 'y'}`, you have to read and think about more conditions, and you have to visually check to see if the condition really is over the same variable each time.\r\n\r\nCorrection: it only optimizes for literals. So there might be a small cost for a tuple of numpy types.",
  "created_at":"2022-02-01T23:23:13Z",
  "id":1027386423,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49PKw3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T23:55:34Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1275](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7de6da1) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.62%`.\n> The diff coverage is `75.92%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `63.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `78.18% <\u00f8> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdHlwZS5weQ==) | `44.11% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| ... and [76 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1275/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-01T23:23:55Z",
  "id":1027386899,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49PK4T",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T03:31:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> Python explicitly optimizes the `in` case with a literal set, list, or tuple on the right.\r\n\r\nThat does it for me\u2014I'm always going to do that from now on. Of my three bullet points, this one was the least-well justified because it's purely a performance consideration. But since the Python compiler is smart enough to catch that case, I'll use that pattern all the time, now.\r\n\r\nFor the list comprehensions, they can get unreadable if they're wide enough for black to split onto many lines. It is true that a list comprehension gives more information to Python about the size, though so would\r\n\r\n```python\r\nbig_list = [None] * known_size\r\nfor i, x in enumerate(some_input):\r\n    big_list[i] = f(x)\r\n```",
  "created_at":"2022-02-01T23:52:59Z",
  "id":1027402703,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49POvP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-01T23:52:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Here's a few examples to illustrate my note above:\r\n\r\n```pycon\r\n>>> x = 2\r\n\r\n>>> # OR chains\r\n>>> %timeit x == 1 or x == 2 or x == 3\r\n49.1 ns \u00b1 1.34 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\r\n\r\n>>> # Compared to a a list of literals\r\n>>> %timeit x in (1, 2, 3)\r\n32.8 ns \u00b1 0.828 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\r\n\r\n>>> # Or a set of literals\r\n>>> %timeit x in {1, 2, 3}\r\n27.9 ns \u00b1 0.748 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\r\n\r\n>>> # However, if these are not literals, you lose the optimization:\r\n>>> y = 1\r\n>>> %timeit x in {y, 2, 3}\r\n93.7 ns \u00b1 4.15 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\r\n>>> # Sets are expensive, but you gain if it grows - while tuples are cheap but linear\r\n>>> %timeit x in (y, 2, 3)\r\n58.3 ns \u00b1 1.19 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\r\n>>> # In fact, you lose a LOAD_CONST even for the if chain:\r\n>>> %timeit x == y or x == 2 or x == 3\r\n53.9 ns \u00b1 0.775 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\r\n```\r\n\r\nPersonally, I'd err toward readability in all but the hottest loops. And those can have a note about being hot loops, and a comment.\r\n",
  "created_at":"2022-02-02T03:06:42Z",
  "id":1027531836,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49PuQ8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-02T03:06:42Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Anyway, let me know what you like / don't like and we can can turn off any linting rules you I added that you don't like, etc.\r\n\r\nAlso please check the TODO's, those are things you likely can quickly answer.",
  "created_at":"2022-02-02T03:07:23Z",
  "id":1027532118,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49PuVW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-02T03:07:23Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"(The _new_ TODO's on code, not the TODOs in the linting list, that's just what I intend to do eventually)",
  "created_at":"2022-02-02T03:08:07Z",
  "id":1027532446,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49Puae",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-02T03:08:07Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"I've addressed (most ?) comments in 250ba00.",
  "created_at":"2022-02-02T21:05:41Z",
  "id":1028357350,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49S3zm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-02T21:05:41Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"PS: I'm quite happy to revert or change anything you want changed, after I make my point, anyway. ;)",
  "created_at":"2022-02-02T21:27:48Z",
  "id":1028373983,
  "issue":1275,
  "node_id":"IC_kwDODBCWws49S73f",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-02T21:27:48Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"I think we discussed everything here. I'd better merge it before it gets too out of date (already a little hard to merge).",
  "created_at":"2022-02-18T02:28:35Z",
  "id":1043755586,
  "issue":1275,
  "node_id":"IC_kwDODBCWws4-NnJC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T02:28:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"If `pyarrow` is installed, you get a lot of warnings about objects not existing in `pyarrow.lib` (though they do). However, these are green warnings, not yellow warnings, and so they aren't blockers. It's just a lot of noise when running it locally.",
  "created_at":"2022-02-18T02:54:01Z",
  "id":1043785795,
  "issue":1275,
  "node_id":"IC_kwDODBCWws4-NuhD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T02:54:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Hmm, that sounds like a compiled extension. There's supposed to be a way to have load the compiled extension and detect the contents, but I haven't been able to get it working properly.\r\n\r\nGenerally, I'd recommend always running pylint via nox; nox will create and control the environment so it is consistent.",
  "created_at":"2022-02-18T03:51:26Z",
  "id":1043841612,
  "issue":1275,
  "node_id":"IC_kwDODBCWws4-N8JM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T03:51:26Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1276](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (47c5e8b) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.27%`.\n> The diff coverage is `74.82%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| [...c/awkward/\\_v2/operations/describe/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdG9fYmFja2VuZC5weQ==) | `37.50% <37.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `58.62% <38.23%> (-2.03%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fanNvbl9maWxlLnB5) | `47.05% <43.75%> (-27.95%)` | :arrow_down: |\n| ... and [49 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1276/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-03T12:45:16Z",
  "id":1028953505,
  "issue":1276,
  "node_id":"IC_kwDODBCWws49VJWh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-14T15:29:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The functions `_getitem_next*`(many `_getitem_next_jagged`) are passing mixed `nplike` because I think they are passing slices and slices are `Numpy nplike` through and through, but when the `typetracers` tests come in, these two `nplikes` get mixed and hence they raise the assertion errors introduced in Wednesday's refactoring. \r\n\r\nFor now, I have commented out the assertions and they should be easy to find by doing a ``fgrep -rl \"# assert\" src``. \r\n\r\nAlso, now `to` has been replaced by `raw` and `ak.to_cupy` and `ak.from_cupy` functions have also have been implemented.",
  "created_at":"2022-02-11T11:54:41Z",
  "id":1036138863,
  "issue":1276,
  "node_id":"IC_kwDODBCWws49wjlv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-11T11:54:41Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1277](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e3cf38) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.70%`.\n> The diff coverage is `79.39%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `81.09% <9.09%> (-1.96%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `59.17% <10.00%> (-1.47%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `55.25% <20.00%> (-0.83%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fanNvbl9maWxlLnB5) | `47.05% <43.75%> (-27.95%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.14% <50.00%> (-0.23%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `77.35% <50.00%> (-1.08%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.59% <58.33%> (-0.47%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `81.97% <58.82%> (-0.88%)` | :arrow_down: |\n| ... and [37 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1277/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-07T20:05:15Z",
  "id":1031869249,
  "issue":1277,
  "node_id":"IC_kwDODBCWws49gRNB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-07T20:42:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The reason for this error is that Awkward 1.0 doesn't implement 0-d arrays: it returns the appropriate Python scalar type instead. This means that `ak.zeros_like` _technically_ doesn't have an Array-returning equivalent. Maybe we should return a scalar Python value here, but I'm not sure; in any case, not duplicating NumPy behaviour by returning a 0-d array is a significant behavioural difference.\r\n\r\n@jpivarski knows more of the history here. In the upcoming v2, we return NumPy scalars instead, which retain their dtype.",
  "created_at":"2022-02-08T09:36:07Z",
  "id":1032401027,
  "issue":1278,
  "node_id":"IC_kwDODBCWws49iTCD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-08T20:57:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It's correct that Awkward version 2 will return NumPy scalars instead of Python scalars, and NumPy scalars retain their bitwidth (as well as datetimes being distinct from Python datetimes, etc.).\r\n\r\n```python\r\n>>> type(ak.Array([1.1, 2.2, 3.3])[0])\r\n<class 'float'>\r\n>>> type(ak._v2.Array([1.1, 2.2, 3.3])[0])\r\n<class 'numpy.float64'>\r\n```\r\n\r\nHowever, this is yet another thing, coming from the fact that in addition to bitwidth-typed scalars, NumPy also has zero-dimensional arrays:\r\n\r\n```python\r\n>>> type(np.float64(3.14))\r\n<class 'numpy.float64'>\r\n>>> type(np.array(3.14))\r\n<class 'numpy.ndarray'>\r\n>>> np.array(3.14).shape\r\n()\r\n```\r\n\r\nI've always thought zero-dimensional arrays are pretty nutty. (It's an exception to the rule that `itemsize * prod(shape)` equals the number of bytes for C-contiguous arrays\u2014does that mean a zero-dimensional array \"is not C-contiguous?\" What an odd thing to say about a single integer or float: that it's not contiguous in memory!)\r\n\r\nConsequently, Awkward Array doesn't have them. I guess it could have\u2014this design decision wasn't put to any kind of a vote, it was just my feeling at the time. Different array systems have made different choices here: R, being even more array-oriented than NumPy, _only_ has zero-dimensional arrays, instead of numbers. So in R, there's only one type, arrays; in Awkward, there's two, arrays and scalars (Python scalars in v1 and NumPy scalars in v2); and in NumPy, there's three, arrays, zero-dimensional arrays, and scalars.\r\n\r\nSo when it comes to what the output of `ak.zeros_like(3.14)` should be,\r\n\r\n   * we have no equivalent of `np.array(3.14)`,\r\n   * returning `np.float64(3.14)` would be _silently_ different from NumPy, since NumPy would return `np.array(3.14)` and this difference is hard to notice,\r\n   * continuing to raise an exception at least calls out the fact that you can't do what you were trying to do.\r\n\r\nIn the scheme of things, the last option seems the safest to me.\r\n\r\nI'm going to close this issue; if you think I'm wrong, speak up and I'll see it. I'm open to changing my mind.",
  "created_at":"2022-02-08T20:55:15Z",
  "id":1033052960,
  "issue":1278,
  "node_id":"IC_kwDODBCWws49kyMg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-08T20:55:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> However, this is yet another thing\r\n\r\nOops, I've edited my post to reflect my intended meaning.\r\n\r\n> I've always thought zero-dimensional arrays are pretty nutty.\r\n\r\nYes, they are also the source of *some* headaches (conversely, here's a place where _not_ having 0-d arrays is a headache... sort of!)",
  "created_at":"2022-02-08T20:59:03Z",
  "id":1033055907,
  "issue":1278,
  "node_id":"IC_kwDODBCWws49ky6j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-08T20:59:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1279](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e96d396) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.72%`.\n> The diff coverage is `79.39%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `81.09% <9.09%> (-1.96%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `59.17% <10.00%> (-1.47%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `55.25% <20.00%> (-0.83%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fanNvbl9maWxlLnB5) | `47.05% <43.75%> (-27.95%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `69.14% <50.00%> (-0.23%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `77.35% <50.00%> (-1.08%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.59% <58.33%> (-0.47%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `81.97% <58.82%> (-0.88%)` | :arrow_down: |\n| ... and [37 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1279/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-08T10:29:48Z",
  "id":1032453078,
  "issue":1279,
  "node_id":"IC_kwDODBCWws49ifvW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-08T10:29:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I think this is good to go!",
  "created_at":"2022-02-10T14:04:05Z",
  "id":1034959573,
  "issue":1279,
  "node_id":"IC_kwDODBCWws49sDrV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T14:04:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm on a phone right now, so I can't test this directly yet, but Python will use all the memory it has available until it reaches a limit before calling the garbage collector. The above code should show a linear increase in memory consumption until it gets to that limit, then I think it plateaus (instead of a sawtooth shape, which is the other conceptual possiblity). If this eventually stops increasing in memory use, even if that's at the limit of your computer's resources, or at the process's ulimit, then that is correct behavior for a garbage-collected language.\r\n\r\nWhat it comes down to, though, is that this is an antipattern: you don't want to iterate over all elements of a large array with a Python for loop, since that creates Python objects for each element in the array (here, ak.Arrays of length 1 or 2). You want to do:\r\n\r\n```python\r\nmy_sum = ak.sum(A, axis=-1)\r\n```\r\n\r\nand possibly send that through ak.to_numpy if you need that to be NumPy, rather than Awkward. That does the sum entirely in compiled code\u2014no Python objects for each short list, and no waiting on the garbage collector to bring memory use under control.\r\n\r\nThese should be thought of as techniques to avoid using Python for anything large (memory or time). You get the computational result, but without representing all the intermediate steps in Python objects. (Same philosophy as NumPy.)",
  "created_at":"2022-02-09T13:23:07Z",
  "id":1033756942,
  "issue":1280,
  "node_id":"IC_kwDODBCWws49neEO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-09T13:23:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Thanks for the detailed explanation Jim! We were seeing it use up all the memory available and then promptly crash the lxplus/SWAN node it was running on. ",
  "created_at":"2022-02-09T16:52:56Z",
  "id":1033976359,
  "issue":1280,
  "node_id":"IC_kwDODBCWws49oTon",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-09T16:52:56Z",
  "user":"MDQ6VXNlcjI2MDgwMjU="
 },
 {
  "author_association":"MEMBER",
  "body":"I didn't do this question justice at all. I missed this, for instance:\r\n\r\n> A (much faster) solution without the leak to do the sum on the awkward array directly\r\n> \r\n> ```\r\n> my_sum = np.sum(A, axis=1) \r\n> ```\r\n\r\nwhere you were pretty clear that you know how it's _supposed_ to be done.\r\n\r\nI tested the sample code and the extra memory used after the loop doesn't seem to go away with `gc.collect()`, though it's hard to set up a clean experiment on this computer that also has Zoom running (since `psutil.virtual_memory()` returns total RAM usage). I think it could really be a memory leak, most likely in the \"handle\" objects that point to the arrays, rather than the arrays themselves.\r\n\r\nIf we weren't porting all of these \"handle\" objects from C++ to Python, that would be something we'd have to fix. As it is, the new Python version of this should be automatically memory-clean. I just tried it by replacing `ak.Array` with `ak._v2.Array` and `np.sum` with `ak._v2.sum` and the memory use vs `i` was a lot flatter. So, just because it seems to be a v1-only thing and we'll be replacing that, I'll be labeling this as \"won't fix.\" Thanks for reporting it, though!",
  "created_at":"2022-02-09T17:24:52Z",
  "id":1034010818,
  "issue":1280,
  "node_id":"IC_kwDODBCWws49ocDC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-09T17:24:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"At the moment, we don't support NumPy operations on Awkward Arrays inside of Numba jitted functions. @jpivarski might correct me here, but we _do_ support converting 1D Awkward arrays to NumPy arrays inside of numba functions, i.e\r\n```python\r\n@nb.njit\r\ndef sum_1d(x):\r\n    y = np.asarray(x)\r\n    return np.sum(y)\r\n\r\nsum_1d(ak.Array([1, 2, 3]))\r\n```\r\n\r\nI took a quick look, and I don't think we support `asarray` for regular n-dim arrays; we only [implement the typer for the 1D case](https://github.com/scikit-hep/awkward-1.0/blob/4c5fa98a585ec84b149ff9fbb8d9ff2e713d21f1/src/awkward/_connect/_numba/arrayview.py#L1183)\r\n\r\nThe solution for your problem really depends upon the algorithm that you're trying to implement. In general, it's better to use bare loops in Numba, because IIRC NumPy operations (even in Numba) create temporary arrays that Numba is unable to elide. \r\n\r\nNote that the `ArrayBuilder` is a useful helper, but will slow your code down vs the \"most performant approaches\". This is only something to worry about if your code is *too* slow (however that is defined)! In general, the way to use Numba with Awkward is to do the structure preparation _outside_, and the tight-loops _inside_ the Numba function. This includes handling _structure_ (e.g. `ak.unflatten`) outside of Numba. In the ideal case, you can pass in the result array(s) _directly_, and handle the structure later on, e.g.\r\n\r\n```python3\r\n@nb.njit\r\ndef _sum_last_2d(array, result):\r\n    for i, inner in enumerate(array):\r\n        x = 0.0\r\n        for y in inner:\r\n            x += y\r\n        result[i] = x\r\n\r\nmy_jagged_array = ak.Array([\r\n    [\r\n        [\r\n            1, 2, 3, 4\r\n        ]\r\n    ],\r\n    [\r\n    ]\r\n])\r\n\r\n# Flatten array to make a 2D array of arrays (with varying lengths)\r\n_sum_2d_input = ak.flatten(my_jagged_array, axis=1)\r\n_sum_2d_output = np.empty(len(_sum_2d_input))\r\n\r\n# Perform sum over last axis\r\n_sum_last_2d(_sum_2d_input, _sum_2d_output)\r\n\r\n# Unflatten result to restore jagged structure\r\nresult = ak.unflatten(_sum_2d_output, ak.num(my_jagged_array, axis=1))\r\n```\r\n\r\nOf course, you could avoid first flattening the array by having three nested loops in your Numba function, but then you have to start handling list offsets inside the Numba function, which is error prone. It's much more convenient to simplify the structure before calling Numba, and then rebuild it after the Numba function has run.\r\n\r\nFor posterity, a mechanism for doing this is to use the `ak._util.recursively_apply` helper to run your array logic at a particular array depth. This is easier than using `ak.flatten` and `unflatten` if you want to support arrays of varying dimensionality, e.g.\r\n\r\n```python\r\n@nb.njit\r\ndef _sum_last_2d(array, result):\r\n    for i, inner in enumerate(array):\r\n        x = 0.0\r\n        for y in inner:\r\n            x += y\r\n        result[i] = x\r\n\r\nmy_jagged_array = ak.Array([\r\n    [\r\n        [\r\n            1, 2, 3, 4\r\n        ]\r\n    ],\r\n    [\r\n    ]\r\n])\r\n\r\ndef sum_last(array):\r\n    layout = ak.to_layout(array)\r\n    \r\n    # The \"depth\" of an Array Content starts at 1 (`axis=0`) and increases.\r\n    # So, we want to act at `axis=-2`, which is equal to `axis=1`\r\n    # This corresponds to `depth=2`. Clearly, the depth is always `axis + 1`.\r\n    target_depth = layout.axis_wrap_if_negative(-2) + 1\r\n    def getfunction(layout, depth):\r\n        # If we're at the right depth\r\n        if depth == target_depth:\r\n            # Create our 1D output\r\n            output = np.empty(len(layout))\r\n            \r\n            # Perform a sum over the final dimension of the current 2D (jagged) array\r\n            _sum_last_2d(\r\n                ak.Array(layout),\r\n                output\r\n            )\r\n            \r\n            # Wrap the NumPy array in an Awkward Content type, so it knows\r\n            # How to handle it.\r\n            new_layout = ak.layout.NumpyArray(output)\r\n            \r\n            # Use a special return type (callable) to indicate we changed the layout at this depth\r\n            return lambda: new_layout\r\n            \r\n    new_layout = ak._util.recursively_apply(layout, getfunction)\r\n    return ak._util.wrap(new_layout, ak._util.behaviorof(array))\r\n    \r\nresult = sum_last(my_jagged_array)\r\n```\r\n\r\nThis is not *easy*, and is rarely something you'll need. I use this approach most often when writing functions that other users call, as it gets rid of the `flatten`/`unflatten` logic.",
  "created_at":"2022-02-10T12:44:09Z",
  "id":1034879085,
  "issue":1282,
  "node_id":"IC_kwDODBCWws49rwBt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T13:02:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Thanks for the quick answer!\r\n\r\nI just realised I had copied the wrong MWE, I just corrected it.\r\n\r\nIndeed the `np.asarray()` is a good workaround, so turning the (corrected) MWE:\r\n\r\n```python\r\n@nb.njit\r\ndef foo(arr):\r\n    return np.sum(arr.a)\r\n```\r\n\r\ninto \r\n\r\n```python\r\n@nb.njit\r\ndef foo(arr):\r\n    y = np.asarray(arr.a)\r\n    return np.sum(y)\r\n```\r\n\r\nI feel a bit dumb that I have not tried that ;)\r\n\r\nAnyways, yes I am aware of the suggested workflow to try to do as much as possible outside of Numba (I do this already) but as always , the real use-case is difficult to describe and it felt a bit more natural to access the fields of the records directly instead of writing low-level loops or doing array conversions inside the Numba context. I cannot really do it outside due to the huge number of records and record fields I need to iterate over. Our data is really not in a good shape `;D`\r\n\r\nYes, I already saw https://github.com/scikit-hep/awkward-1.0/blob/4c5fa98a585ec84b149ff9fbb8d9ff2e713d21f1/src/awkward/_connect/_numba/arrayview.py#L1183 but thought I am missing some other magic behind the scenes `;)`\r\n\r\nAlright, I'll have a look and figure out how to restructure it. I'll close this now and come back if I hit a wall.\r\n",
  "created_at":"2022-02-10T13:18:19Z",
  "id":1034912720,
  "issue":1282,
  "node_id":"IC_kwDODBCWws49r4PQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T13:18:19Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "author_association":"MEMBER",
  "body":"Yeah, getting NumPy functions to just recognize Awkward Arrays as being arrays in Numba is tricky. There's an open issue about that: #509. One part of that might be to make Awkward Arrays as \"ArrayLike\" objects in Numba, but not all of Numba's NumPy overrides check for that abstract type: some directly check for concrete `np.ndarray`. I brought that up in the Numba weekly meeting and I think there's an issue about it. I think the issue is more general than just extension arrays that want to emulate NumPy arrays: I think it also doesn't work for arbitrary sequences. NumPy's `np.sum` would happily take a list, but I think it doesn't in a Numba-compiled function.",
  "created_at":"2022-02-10T13:53:46Z",
  "id":1034948325,
  "issue":1282,
  "node_id":"IC_kwDODBCWws49sA7l",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T13:53:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Ah, I totally missed your answer. Yes I kind of see where the problems are now. It felt like this should naturally be possible since the types are all well-defined but of course the devil's in the details. Anyways, I successfully converted that part with some dead simple `np.asarray(...)` calls and a bit of restructuring and now the data processing runs super fast on deeply nested jagged record arrays. I have a C++ counter-part to compare to and the performance is the same.\r\n\r\nThanks again, this library is so incredibly useful and necessary `:)`",
  "created_at":"2022-02-15T18:26:12Z",
  "id":1040626249,
  "issue":1282,
  "node_id":"IC_kwDODBCWws4-BrJJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-15T18:26:12Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@alexander-held thanks for reporting it! @jpivarski - I think, this is related to https://github.com/scikit-hep/awkward-1.0/issues/1266 ",
  "created_at":"2022-02-10T13:56:13Z",
  "id":1034950909,
  "issue":1283,
  "node_id":"IC_kwDODBCWws49sBj9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T13:56:13Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I can't reproduce this locally on Linux with:\r\n-  `ak.__version__ == '1.7.0'` (PyPI) and Python `3.10.0` (Conda) and `np.__version__ == '1.21.5'` (PyPI)\r\n- `ak.__version__ == '1.7.0'` (Conda) and Python `3.10.0` (Conda) and `np.__version__ == '1.22.2'` (Conda)\r\n- `ak.__version__ == '1.7.0'` (Conda) and Python `3.9.10` (Conda) and `np.__version__ == '1.22.2'` (Conda) :star:\r\n\r\nWhere :star: matches your first specification.\r\n\r\nThe fact that it doesn't fail for you with the container, and it doesn't fail for me with the same environment (besides host) as your first failure makes me wonder whether this is a MacOS-specific failure.\r\n\r\n",
  "created_at":"2022-02-10T13:57:26Z",
  "id":1034952193,
  "issue":1283,
  "node_id":"IC_kwDODBCWws49sB4B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T14:00:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - I think it's the same as in the case you've reported  - the `parents `are not ordered:\r\n```python\r\n<ListArray64>\r\n    <starts><Index64 i=\"[0 15 30 5 20 35 10 25 40 3 18 33 8 23 38 13 28 43]\" offset=\"0\" length=\"18\" at=\"0x7ff1f6023e30\"/></starts>\r\n    <stops><Index64 i=\"[3 18 33 8 23 38 13 28 43 5 20 35 10 25 40 15 30 45]\" offset=\"0\" length=\"18\" at=\"0x7ff1f6023ee0\"/></stops>\r\n    <content><NumpyArray format=\"d\" shape=\"45\" data=\"1 4 9 16 25 ... 25 36 49 64 81\" at=\"0x7ff1f600a630\"/></content>\r\n</ListArray64>\r\nListArrayOf::reduce_next negaxis = 2, starts = (0 ,9 ,3 ,12 ,6 ,15 ,), shifts = (), parents = (0, 0, 0, 2, 2, 2, 4, 4, 4, 1, 1, 1, 3, 3, 3, 5, 5, 5, )\r\n```\r\nbut the algorithms calculating `gaps` and `distincts` assume they are - the `nextstarts` and `gaps` may get corrupted:\r\n```python\r\nnextstarts:\r\n<Index64 i=\"[0 18 36 9 27 902837359883296 3 21 39 12 30 3828118095694672928 6 24 42 15 33]\" offset=\"0\" length=\"17\" at=\"0x7ff1f6024270\"/>\r\ngaps:\r\n<Index64 i=\"[1 2 2 1 3756056159110504499 3828118095694672928]\" offset=\"0\" length=\"6\" at=\"0x7ff1f60245e0\"/>\r\n```\r\nThe memory allocated on Linux might be already initialised... but not on MacOS. ",
  "created_at":"2022-02-10T14:15:40Z",
  "id":1034972182,
  "issue":1283,
  "node_id":"IC_kwDODBCWws49sGwW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T14:15:40Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Sometimes segfaulting is hard to catch, but if this is an error in the logic of reduction, then it would be more obvious in [studies/reducers.py](https://github.com/scikit-hep/awkward-1.0/blob/main/studies/reducers.py). Set the initial lists to be full of `999` and if there are any `999` left after the kernel, it's uninitialized (in a non-platform-dependent way). Also, out-of-bounds errors would be caught because reducers.py is Python.\r\n\r\nThis is a 3D sample with variable lengths, but if it's related to the 4D sample without variable lengths, one or the other may be easier to diagnose. I wonder if this 3D sample could be modified to have fixed lengths and still be an issue?\r\n\r\nAlso as a reminder, switching `sum` with `prod` and using all prime numbers makes it possible to trace back where each number came from\u2014i.e. you can infer the `carry` index from the carried `content`. (With `sum`, you'd need powers of n, which get big faster than primes.)",
  "created_at":"2022-02-10T14:30:25Z",
  "id":1034988355,
  "issue":1283,
  "node_id":"IC_kwDODBCWws49sKtD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T14:30:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I can reproduce the segfault with v1 (in master and with Jim's branch `jpivarski-ianna/fix-4D-reducers`):\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nv = ak.from_iter([[[1, 2, 3], [4, 5]], [[3, 4, 5], [6, 7]], [[5, 6, 7], [8, 9]]])\r\nM = np.asarray([[1, 1.4, -0.3], [1.4, 1, 1.2], [-0.3, 1.2, 1]])\r\nM_times_v = M[..., np.newaxis, np.newaxis] * v[np.newaxis, ...]\r\nv_times_M_times_v = v[:, np.newaxis, ...] * M_times_v\r\n\r\n# frequently (not always) segfaults with axis=0 or 1\r\nnp.sum(v_times_M_times_v, axis=0)\r\n```\r\n```\r\n<Array [[[3.7, 11.6, 23.7], ... 84.7], []]] type='3 * var * var * float64'>\r\n```\r\n```python\r\narray = ak.from_iter([[[[1], [4, 9]], [[5.6], [14, 25.2]]], [[[5.6], [14, 25.2]], [[16], [25, 36]]]])\r\n# always(?) segfaults with axis=0 or 1, also when using np.sum\r\nak.sum(array, axis=1)\r\n```\r\n```python\r\nzsh: segmentation fault  python\r\n```\r\nbut not with v2:\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nv = ak._v2.operations.convert.from_iter([[[1, 2, 3], [4, 5]], [[3, 4, 5], [6, 7]], [[5, 6, 7], [8, 9]]])\r\nM = np.asarray([[1, 1.4, -0.3], [1.4, 1, 1.2], [-0.3, 1.2, 1]])\r\nM_times_v = M[..., np.newaxis, np.newaxis] * v[np.newaxis, ...]\r\nv_times_M_times_v = v[:, np.newaxis, ...] * M_times_v\r\n\r\nak._v2.sum(v_times_M_times_v, axis=0)\r\narray = ak._v2.operations.convert.from_iter([[[[1], [4, 9]], [[5.6], [14, 25.2]]], [[[5.6], [14, 25.2]], [[16], [25, 36]]]])\r\nak._v2.sum(array, axis=1)\r\n```\r\n```\r\n<Array [[[6.6], [18, 34.2]], [[21.6], [...]]] type='2 * var * var * float64'>\r\n```",
  "created_at":"2022-02-10T14:39:08Z",
  "id":1034998238,
  "issue":1283,
  "node_id":"IC_kwDODBCWws49sNHe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T14:39:08Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Sometimes segfaulting is hard to catch, but if this is an error in the logic of reduction, then it would be more obvious in [studies/reducers.py](https://github.com/scikit-hep/awkward-1.0/blob/main/studies/reducers.py). Set the initial lists to be full of `999` and if there are any `999` left after the kernel, it's uninitialized (in a non-platform-dependent way). Also, out-of-bounds errors would be caught because reducers.py is Python.\r\n> \r\n> This is a 3D sample with variable lengths, but if it's related to the 4D sample without variable lengths, one or the other may be easier to diagnose. I wonder if this 3D sample could be modified to have fixed lengths and still be an issue?\r\n> \r\n> Also as a reminder, switching `sum` with `prod` and using all prime numbers makes it possible to trace back where each number came from\u2014i.e. you can infer the `carry` index from the carried `content`. (With `sum`, you'd need powers of n, which get big faster than primes.)\r\n\r\nI've added a 4D test in the [studies/reducers.py](https://github.com/scikit-hep/awkward-1.0/pull/1274/files#diff-2ec274bb36bc5642768a4754a5c8b569e70bfb39b6acd3417e72c64856baab3eR1510-R1556) that fails.\r\n",
  "created_at":"2022-02-10T14:43:43Z",
  "id":1035003335,
  "issue":1283,
  "node_id":"IC_kwDODBCWws49sOXH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-10T14:43:43Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"We've got 3.5 months before v2 comes out and not a lot of clamor about this issue. Unless somebody says, \"This is affecting my workflow, please fix it!\" I think we can just ignore it. That request-for-fix could be after the 2.0 release, we _will_ be providing bug-fixes on demand (through a `main-v1` git branch).",
  "created_at":"2022-08-15T18:33:13Z",
  "id":1215590435,
  "issue":1283,
  "node_id":"IC_kwDODBCWws5IdHAj",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-15T18:33:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi @jrueb, thanks for the report!\r\n\r\nCould you elaborate on your last point? Namely:\r\n> Slicing an array that doesn't have a mask with an array of values type float works, but doing the same with a masked array raises an error.\r\n\r\nI assume you've seen this during your debugging, but if I take your statement to the simplest case of a floating point index array, then I can't reproduce it.\r\n\r\nRE `ak.argsort(empty)`, this is an artefact of returning `shallow_copy` where the length is 0:  \r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/aaded1ccee9bbe24048d084a2141fe410a576ff7/src/libawkward/array/ListOffsetArray.cpp#L1920\r\n\r\nI assume that we do this to preserve the dimensionality of the result in this case. However, we should not be returning the array with the original dtype.\r\n\r\n@jpivarski this is a wider policy issue that I'm not clear on. We have the following behaviour for `len(this) == 0` in v1 and v2, for these layouts:\r\n- `ak.layout.ListOffsetArray` \r\n  ```python\r\n  <ByteMaskedArray valid_when=\"true\">\r\n    <mask><Index8 i=\"[]\" offset=\"0\" length=\"0\" at=\"0x55a45347bca0\"/></mask>\r\n    <content><NumpyArray format=\"d\" shape=\"0\" data=\"\" at=\"0x55a45335fe60\"/></content>\r\n  </ByteMaskedArray>\r\n  ```\r\n- `ak.layout.RegularArray` - `<NumpyArray format=\"l\" shape=\"0\" data=\"\" at=\"0x000000000000\"/>`\r\n- `ak._v2.contents.ListOffsetArray` - `<NumpyArray dtype='int64' len='0'>[]</NumpyArray>`\r\n- `ak._v2.contents.RegularArray` - `<NumpyArray dtype='int64' len='0'>[]</NumpyArray>`\r\n\r\nSo, currently only `ak.layout.ListOffsetArray` tries to preserve the structure of the array. Personally I think this makes the most sense - I would intuitively expect the `argsort` result to have the same number of dimensions as the array upon which it operates. This would mean changing v2, and v1 `ak.layout.RegularArray`. Do you agree here?",
  "created_at":"2022-02-15T10:56:53Z",
  "id":1040132599,
  "issue":1288,
  "node_id":"IC_kwDODBCWws49_yn3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-15T11:01:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> I assume you've seen this during your debugging, but if I take your statement to the simplest case of a floating point index array, then I can't reproduce it.\r\n\r\nI just noticed it's a bit more specific than I thought. What I saw was that\r\n```python\r\nempty2 = array[[False, False]]\r\nempty2[ak.argsort(empty2)]\r\n```\r\nworks. `empty2` has value type `float` and so does `ak.argsort(empty2)`. From the error message \"only arrays of integers or booleans may be used as a slice\" I would expect this not to work. However, looking at this now, it only happens with one dimensional empty array slices. So this might also be meant as a corner case, where it's fine not to raise an error?\r\n",
  "created_at":"2022-02-15T13:03:10Z",
  "id":1040246560,
  "issue":1288,
  "node_id":"IC_kwDODBCWws4-AOcg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-15T13:03:19Z",
  "user":"MDQ6VXNlcjMwMDQxMDcz"
 },
 {
  "author_association":"MEMBER",
  "body":"> I would intuitively expect the `argsort` result to have the same number of dimensions as the array upon which it operates. This would mean changing v2, and v1 `ak.layout.RegularArray`. Do you agree here?\r\n\r\n@agoose77, you're right: `ak.argsort` (and `ak._v2.argsort`) should return an array with the same dimensions as the input, even if it's empty. Especially now that we're requiring the output Form of every operation to be independent of any buffer values or shapes, so that a Dask DAG can be examined independently of any concrete arrays. Short-circuits like\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/aaded1ccee9bbe24048d084a2141fe410a576ff7/src/libawkward/array/ListOffsetArray.cpp#L1912-L1921\r\n\r\nor even\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/5e49baf2f20fb52a66aaa121d521932f5980cd27/src/awkward/_v2/contents/listoffsetarray.py#L1030-L1045\r\n\r\nmight result in different Forms for length 0 arrays than any other length, and when building a Dask DAG, we don't know if the length will be 0. (Even if `self._offsets.length` returns `UnknownLength`, [any comparison operator on this returns false](https://github.com/scikit-hep/awkward-1.0/blob/5e49baf2f20fb52a66aaa121d521932f5980cd27/src/awkward/_v2/_typetracer.py#L28-L81), so the DAG-building step wouldn't enter into the `if` statement, but the real array might.)",
  "created_at":"2022-02-15T21:18:57Z",
  "id":1040803198,
  "issue":1288,
  "node_id":"IC_kwDODBCWws4-CWV-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-15T21:18:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> `empty2` has value type `float` and so does `ak.argsort(empty2)`. From the error message \"only arrays of integers or booleans may be used as a slice\" I would expect this not to work.\r\n\r\n@jrueb, what might be confusing is the distinction between an array with zero length and an [EmptyArray](https://awkward-array.readthedocs.io/en/latest/ak.layout.EmptyArray.html), which has zero length and unknown type.\r\n\r\n```python\r\n>>> array = ak.Array([\"This\", \"is\", \"not\", \"empty\", \"or\", \"unknown\", \"type.\"])\r\n>>> array[[]]\r\n<Array [] type='0 * string'>\r\n\r\n>>> ak.Array([])\r\n<Array [] type='0 * unknown'>\r\n```\r\n\r\nIf you get an array of type `0 * float64` by slicing, you shouldn't be able to use that as a slicer because it has type floating point\u2014it's unclear how you intend for it to work as a slicer.\r\n\r\nIf you have an array of type `0 * unknown`, the type it gets can be determined from how it's used.\r\n\r\n```python\r\n>>> ak.Array([\"To\", \"be\", \"sliced.\"])[unknown_empty]\r\n<Array [] type='0 * string'>\r\n```\r\n\r\nThat might be why you got a different result in two cases. Be sure to check the `.type`!",
  "created_at":"2022-02-15T21:30:54Z",
  "id":1040813621,
  "issue":1288,
  "node_id":"IC_kwDODBCWws4-CY41",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-15T21:30:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I think this is the issue I was thinking of!",
  "created_at":"2022-03-29T21:50:49Z",
  "id":1082406623,
  "issue":1288,
  "node_id":"IC_kwDODBCWws5AhDbf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-29T21:50:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks, @agoose77, this _is_ the same issue as #1386, and it's fixed by the same PR #1387.\r\n\r\nI just verified that the initial problem is gone:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak.Array([[5.,6.],[7.]])\r\n>>> masked = array.mask[[[True, True], [True]]]\r\n>>> empty = masked[[False, False]]\r\n>>> array[ak.argsort(array)]\r\n<Array [[5, 6], [7]] type='2 * var * float64'>\r\n>>> masked[ak.argsort(masked)]\r\n<Array [[5, 6], [7]] type='2 * var * ?float64'>\r\n>>> empty[ak.argsort(empty)]\r\n<Array [] type='0 * option[var * ?float64]'>\r\n```\r\n\r\n(Also for v2.)\r\n\r\nSo I'll mark this as one of the issues that will get closed by the PR.",
  "created_at":"2022-03-29T22:01:08Z",
  "id":1082413656,
  "issue":1288,
  "node_id":"IC_kwDODBCWws5AhFJY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-29T22:01:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1289](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f380e49) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.48%`.\n> The diff coverage is `75.22%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdHlwZS5weQ==) | `44.11% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| [...c/awkward/\\_v2/operations/describe/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdG9fYmFja2VuZC5weQ==) | `37.50% <37.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `58.62% <38.23%> (-2.03%)` | :arrow_down: |\n| ... and [56 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1289/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-15T17:50:18Z",
  "id":1040591350,
  "issue":1289,
  "node_id":"IC_kwDODBCWws4-Bin2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-17T22:27:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1290](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8caabc8) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.27%`.\n> The diff coverage is `75.05%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `58.62% <37.14%> (-2.03%)` | :arrow_down: |\n| [...c/awkward/\\_v2/operations/describe/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdG9fYmFja2VuZC5weQ==) | `37.50% <37.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fanNvbl9maWxlLnB5) | `47.05% <43.75%> (-27.95%)` | :arrow_down: |\n| ... and [49 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1290/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-15T19:47:58Z",
  "id":1040723424,
  "issue":1290,
  "node_id":"IC_kwDODBCWws4-CC3g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-15T19:47:58Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1291](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (51a7591) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.27%`.\n> The diff coverage is `75.05%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `58.62% <37.14%> (-2.03%)` | :arrow_down: |\n| [...c/awkward/\\_v2/operations/describe/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdG9fYmFja2VuZC5weQ==) | `37.50% <37.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fanNvbl9maWxlLnB5) | `47.05% <43.75%> (-27.95%)` | :arrow_down: |\n| ... and [49 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1291/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-16T12:03:29Z",
  "id":1041419132,
  "issue":1291,
  "node_id":"IC_kwDODBCWws4-Est8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-16T12:03:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closing this PR because this comes after the performance benchmarks.",
  "created_at":"2022-02-20T07:52:03Z",
  "id":1046182722,
  "issue":1291,
  "node_id":"IC_kwDODBCWws4-W3tC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-20T07:52:03Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1292](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1d7a934) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.40%`.\n> The diff coverage is `75.65%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `58.62% <37.14%> (-2.03%)` | :arrow_down: |\n| [...c/awkward/\\_v2/operations/describe/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdG9fYmFja2VuZC5weQ==) | `37.50% <37.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fanNvbl9maWxlLnB5) | `47.05% <43.75%> (-27.95%)` | :arrow_down: |\n| ... and [52 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1292/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-16T22:47:21Z",
  "id":1042383667,
  "issue":1292,
  "node_id":"IC_kwDODBCWws4-IYMz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-17T16:47:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1293](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0e4a6d5) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.65%`.\n> The diff coverage is `75.35%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `78.18% <\u00f8> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `58.62% <37.14%> (-2.03%)` | :arrow_down: |\n| [...c/awkward/\\_v2/operations/describe/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdG9fYmFja2VuZC5weQ==) | `37.50% <37.50%> (\u00f8)` | |\n| ... and [75 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1293/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-17T13:43:57Z",
  "id":1042963499,
  "issue":1293,
  "node_id":"IC_kwDODBCWws4-Klwr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T17:42:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1294](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (32362e2) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.60%`.\n> The diff coverage is `76.69%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvdy5weQ==) | `60.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `58.62% <37.14%> (-2.03%)` | :arrow_down: |\n| [...c/awkward/\\_v2/operations/describe/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdG9fYmFja2VuZC5weQ==) | `37.50% <37.50%> (\u00f8)` | |\n| ... and [76 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1294/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-17T16:00:27Z",
  "id":1043118579,
  "issue":1294,
  "node_id":"IC_kwDODBCWws4-LLnz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T02:26:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"> Any thoughts, ideas, and early requests are welcome!\r\n\r\nadding link to the gitter  and root forum:\r\n* https://gitter.im/Scikit-HEP/awkward-array?at=620e534eb8b08244823c0978\r\n* use case example:\r\n  * https://gitter.im/Scikit-HEP/awkward-array?at=620e78413e52f56a260c7780\r\n* https://root-forum.cern.ch/t/rdataframe-asnumpy-as-jagged-arrays/48835\r\n",
  "created_at":"2022-02-17T18:33:57Z",
  "id":1043283227,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-Lz0b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-17T18:33:57Z",
  "user":"MDQ6VXNlcjIxOTYyNzY1"
 },
 {
  "author_association":"NONE",
  "body":"I can do some alpha testing on this as well. Regarding whether it should be presented as std::vector, RVec, or a subclass of one of these, what are the current pros and cons of each?",
  "created_at":"2022-02-17T21:50:51Z",
  "id":1043491820,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-Mmvs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-17T21:50:51Z",
  "user":"MDQ6VXNlcjM4MjE3Mjc0"
 },
 {
  "author_association":"MEMBER",
  "body":"On the user side, the pros and cons are determined by what you expect. If all list-like data in ROOT (dynamic arrays like `Muon_pt[nMuon]`, as well as `std::vector`, `TClonesArray`, etc.) are presented in RDataFrame as `rvec`, then that's a strong argument for presenting Awkward lists (`ListArray`, `ListOffsetArray`, `RegularArray`) as `rvec`, too. If the type in RDataFrame depends on the type in ROOT I/O, then we're more free to say what our lists are, because this is a different source.\r\n\r\nOn the technical side, we want the list and record types to be views/proxies as much as possible. In the Numba implementation, we were able to take this all the way: the runtime objects representing lists and records in Numba JIT-compiled code are all nothing more than pointers into the original array data: the same kind of [48-byte ArrayView](https://github.com/scikit-hep/awkward-1.0/blob/d695720972c3a18d1cb072f82b68d12571321401/src/awkward/_connect/_numba/arrayview.py#L409-L420) ([40-bytes in version 2](https://github.com/scikit-hep/awkward-1.0/blob/d695720972c3a18d1cb072f82b68d12571321401/src/awkward/_v2/_connect/numba/arrayview.py#L241-L251)) object can be allocated on the stack, regardless of how many elements the list has or how many fields the record has. It works because we can inject any code in the equivalent of `__getitem__` or `__getattr__`.\r\n\r\nFor C++, this means that we'd have to be able to override `operator[]` and have a lot of `fieldname() const` methods for records to yield the data upon request, rather than upon construction. I know that we'll be able to make record proxies in C++: we can define a new class for each RecordArray with a new set of (field name, field type) pairs and that class can be full of `fieldname() const` methods that generate the appropriate proxy for each field type. For the lists, we could have this much freedom if we created our own collection type (with `const_iterator` and all that) because then we could define `operator[]` however we like. If it has to be `std::vector` or `rvec`, or even a subclass of one of these, that might not be possible.\r\n\r\nThe reason that views/proxies are ideal is because user code might, for example, extract a list (by calling `fieldname()` on the record that contains it) for the sole purpose of getting its length, or for getting only the first item, or maybe just iterating through it until finding something, then breaking out of the loop. We don't want list construction to also have to construct all the elements that don't get looked at. We especially don't want the runtime list objects to live on the heap, to call `malloc` and `free` every time one gets created or destroyed. If the `std::vector` or `rvec` types require the data they contain to exist as allocated C++ objects when the `std::vector` or `rvec` is constructed with full `size`, then we get all of these undesirable performance constraints that we won't be able to relax later.\r\n\r\nSo from a technical point of view, a ranking from best to worst is:\r\n\r\n   1. C++ runtime objects for Awkward lists and records are proxies that generate sub-proxies or numerical data when `operator[]` or `fieldname()` is called. All of these proxies would have the same size, a handful of bytes, that can be stack-allocated.\r\n   2. C++ runtime objects for Awkward lists are concrete list objects that need to contain `N` real objects in memory to have size `N`. This comes with a runtime cost of constructing `N` objects when the C++ view of the Awkward list is created with size `N`, though those objects might themselves be small proxies. Only the current level in an Awkward node hierarchy has to be instantiated\u2014not all the way down.\r\n   3. No proxies at all; the whole structure has to be constructed before it appears as an entity in user code. This is tantamount to a full columnar \u2192 rowwise conversion before any computation potentially happens.\r\n\r\n-------------\r\n\r\nFor anyone who is totally confused at this point, I probably should have mentioned that data in an Awkward Array is organized in a completely different way from `std::vector<struct>` in C++. Data with type like\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/154583142-d07074d0-3769-4b0a-9399-75bce059e195.png)\r\n\r\nbut, say, length 1 billion, is represented by a single 5-node tree with 4 attached, 1-dimensional arrays whose lengths are _O(1 billion)_. See https://arxiv.org/abs/2001.06307\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/154583240-804f7df6-be19-4282-ab0d-16b536061666.png)\r\n\r\nThe worst case, number 3 above, would be to turn an entire entry into C++ `std::vector<struct {int x; std::vector<double> y;}>` before any calculations are done.\r\n\r\nThe best case, number 1 above, would be to turn it into some `ListProxy`, and then when `operator[]` is called, produce the `RecordProxy`, and then when `x()` is called, fetch an `int` from the original Awkward Array. Or if `y()` is called, produce another `ListProxy` that has its own `operator[]` overload. If it's all fixed-size proxies, there's no reason to ever (implicitly) call `malloc`.\r\n\r\n--------\r\n\r\nBut if the above is incompatible with user expectations because creating our own C++ collection type goes against the grain of expectation, then we'll have to think about priorities.\r\n\r\n(If you're thinking that thinking about this is [premature optimization](https://bukrate.com/set_images/images?id=988315&author=325000&type=2), Awkward Arrays in Numba started out with a straightforward, non-proxy implementation, and the result was so bad that it had to be laboriously rewritten, PR #118 (87 commits, 32 kLoC). This needs to be an up-front design decision.)",
  "created_at":"2022-02-17T23:04:56Z",
  "id":1043590755,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-M-5j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-17T23:04:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Here is [a Numpy RDataFrame example](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) that uses [this RDataSource implementation](https://root.cern/doc/master/RNumpyDS_8hxx_source.html#l00129) \r\nIt takes a collection of RVecs adopting the Numpy array data:\r\n```python\r\nimport ROOT\r\nimport numpy as np\r\nx = np.array([1, 2, 3], dtype=np.int32)\r\ny = np.array([4, 5, 6], dtype=np.float64)\r\n# Read the data with RDataFrame\r\n# The column names in the RDataFrame are defined by the keys of the dictionary.\r\n# Please note that only fundamental types (int, float, ...) are supported and\r\n# the arrays must have the same length.\r\ndf = ROOT.RDF.MakeNumpyDataFrame({'x': x, 'y': y})\r\ndf.Display().Print()\r\n```\r\n```\r\nx | y         | \r\n1 | 4.0000000 | \r\n2 | 5.0000000 | \r\n3 | 6.0000000 | \r\n```\r\n```python\r\n>>> x\r\narray([1, 2, 3], dtype=int32)\r\n>>> df.__data__['x'][0]\r\n1\r\n>>> df.__data__['x'][2]\r\n3\r\n>>> df.__data__['x'][5]\r\n32650\r\n>>> df.__data__['x']\r\n<cppyy.gbl.ROOT.VecOps.RVec<int> object at 0x7f8a7b498420>\r\n>>> x[0]\r\n1\r\n>>> x[0]=222\r\n>>> df.__data__['x'][0]\r\n222\r\n```",
  "created_at":"2022-02-18T10:18:32Z",
  "id":1044278899,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-Pm5z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T10:18:32Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"Hi, thank you for working on this! Just a runaway comment that:\r\n\r\n- RVec is indeed the catch-all type with which all collections are represented in RDF (C-style arrays, std::vectors etc. are all represented as RVecs in RDF)\r\n- RVec can act as a view on an existing contiguous memory buffer, it's sufficient to construct the object as `RVec<T>(pointer, size)` and you get a view instead of a copy. The data will be copied if the RVec ever reallocates, e.g. because of a `push_back`, and performing selections of elements creates a copy of the original RVec with the elements selected. However a small vector optimization guarantees that small-enough RVecs use fast stack memory rather than slow heap allocations, so copying small-enough RVecs is cheap the same way that copying small-enough std::strings is cheap\r\n\r\nI hope this helps you in making the decision.\r\nCheers,\r\nEnrico",
  "created_at":"2022-02-18T13:09:52Z",
  "id":1044505473,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-QeOB",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2022-02-18T13:24:51Z",
  "user":"MDQ6VXNlcjEwOTk5MDM0"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1295](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2d5cff8) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `1.36%`.\n> The diff coverage is `50.70%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `81.87% <0.00%> (-8.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `81.95% <0.00%> (-1.64%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [...kward/\\_v2/operations/convert/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| ... and [169 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1295/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-18T17:14:18Z",
  "id":1044863477,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-R1n1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T10:00:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> * RVec is indeed the catch-all type with which all collections are represented in RDF (C-style arrays, std::vectors etc. are all represented as RVecs in RDF)\r\n\r\nThat's good to know! I just asked the same question in a ROOT I/O meeting (because I'm out of order and didn't see your message until now). So users will expect RVec from any source.\r\n\r\n> * RVec can act as a view on an existing contiguous memory buffer, it's sufficient to construct the object as `RVec<T>(pointer, size)` and you get a view instead of a copy.\r\n\r\nThe trouble is that we don't have preexisting data in a contiguous memory buffer unless it happens to be a list of a primitive type, such as numbers, booleans, or dates. If it's a list of lists or a list of records\u2014i.e. at least two levels deep\u2014then the proxies representing the nested lists or nested records are things that have to be created. If we have a data type like\r\n\r\n```c++\r\nlist<list<list<float>>>\r\n```\r\n\r\nwhat we _want_ to be able to do is leave our three `offsets` buffers where they are, in the original Awkward Array, and make some C++ instance with a type like `ListProxy<ListProxy<ListProxy<float>>>` (better name TBD). The `ListProxy` object is a fixed-size struct, probably 32 bytes (8-byte `start`, `stop`, `which_array`, `array_pointers`). There is no preexisting buffer of `ListProxy<ListProxy<float>>` instances anywhere. Then the overloaded `operator[]` (and `const_iterator`, etc.) make each `ListProxy<ListProxy<float>>` on demand. Each one of these is just another 32 bytes; everything can easily be stack-allocated, no `malloc`. (Everything here applies equally to `RecordProxy`, `OptionProxy`, etc., but these will have named methods, like field names, and that's not as problematic as overloading `operator[]` and I guess also `size`.)\r\n\r\nBy the time we've navigated down to the `ListProxy<float>`, _that one_ can be a wrapped buffer because we do have a contiguous buffer of numeric `contents` that we can just point to. Maybe only _that_ one should be an RVec, because most of those VecOps operations assume that you have a collection of numbers or booleans.\r\n\r\nOn the one hand, we want our `ListProxy` to be an `RVec` so that it's not surprising to users. Regarding your first point, users are expecting to get `RVec` as a container for any kind of list. Getting a different thing when the source is an Awkward Array would be a pain point. On the other hand, if making it an `RVec` means that we need to point to a contiguous buffer of its contents, then\r\n\r\n   1. constructing the `ListProxy<ListProxy<ListProxy<float>>>` means that we need to allocate a variable-sized memory buffer (with `malloc`) to fill with all of the `<ListProxy<ListProxy<float>>` instances,\r\n   2. constructing each `<ListProxy<ListProxy<float>>` means allocating a variable-sized memory buffer to fill with all the `<ListProxy<float>` instances,\r\n   3. but each `<ListProxy<float>` instance can just be a pointer to the numeric data in the Awkward `content`.\r\n\r\nThat's a lot of instantiation at the beginning of an entry, it requires heap memory management, and it really slowed down the first implementation of Awkward-in-Numba. (The stack-only, late instantiation approach is why some early performance plots showed iteration over Awkward Arrays outperforming `std::vector`-based code, because constructing and populating the `std::vectors` were counted as part of the cost.) In this approach, there is an opportunity to consolidate all of the `mallocs` into one big `malloc` at the beginning of an entry, since that is a special point in the workflow that can have specialized code. But then it would involve running over all of the nested lists to find out how many of them there will be, to put them all in the one big `malloc`, and they do have different types, so `reinterpret_casting` would be necessary.\r\n\r\nIt just occurred to me that RNTuple-to-RDataFrame would have the same problem. Its memory representation is a bunch of `offsets` and `content` buffers, just like Awkward Array. RNTuple doesn't have the historical constraint of going through `TTreeReader`, so how is RNTuple-to-RDataFrame implemented? Does it create in-memory entities for all lists in a `list<list<list<float>>>` at the beginning of each entry? If so, it could benefit from this approach, too.\r\n\r\nMaybe the thing we could do, from Awkward, is to create `ListProxy<ListProxy<ROOT::RVec<float>>>` when we have `list<list<list<float>>>` data? The ROOT::VecOps would only be available for the lists of numeric and boolean types, but those are the only ones that make sense, right? This solution would involve zero `mallocs`, all stack-based, and also provide users with familiar types in the very common `list<float>` case. The downside is that it's introducing a distinction between two different kinds of lists.\r\n\r\nOr/also we could provide a `ListProxy::to_RVec` method. That makes the performance cost opt-in.",
  "created_at":"2022-02-18T17:27:33Z",
  "id":1044879784,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-R5mo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T17:27:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This problem comes apart into four pieces. These are the responsibilities @ianna and I agreed on earlier today.\r\n\r\n|   | from Awkward | to Awkward |\r\n|:--|:--|:--|\r\n| pure data translation | @jpivarski | @ianna |\r\n| fitting into RDataFrame | @ianna | @ianna |\r\n\r\nFor my piece, I've opened PR #1300. It would be a blocker for @ianna's work on the **from Awkward** part, but not the **to Awkward** part, so she's not currently blocked. The **to Awkward** part would involve the `LayoutBuilder` because the type is known before iteration starts.\r\n\r\nIf it's only ever used in a context that has a JIT compiler available (like this one), then perhaps `LayoutBuilder` could itself be JIT'ed instead of going through AwkwardForth. But even if that work is done someday, it would be with the same API that exists now, so we can ratchet up to that in multiple steps. For the entirety of this PR, `LayoutBuilder` would be used as-is.",
  "created_at":"2022-02-19T00:59:21Z",
  "id":1045467512,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-UJF4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-19T00:59:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The pure data translation from Awkward to C++ is done. It doesn't have a great interface, but that's something that can be fixed. See [tests/v2/test_1300-awkward-to-cpp-converter-with-cling.py](https://github.com/scikit-hep/awkward-1.0/blob/main/tests/v2/test_1300-awkward-to-cpp-converter-with-cling.py) for usage. At the moment, [awkward._v2._connect.cling](https://github.com/scikit-hep/awkward-1.0/blob/main/src/awkward/_v2/_connect/cling.py) doesn't actually `import ROOT`, but that will probably change.\r\n\r\nThe current, clunky interface takes a `compiler` function as an argument. Normally, this would be `ROOT.gInterpreter.Declare`, but in the first examples below, it will be `print`. I did that for debugging, and to isolate the external dependency so that we know exactly when it's needed.\r\n\r\nHere's an example array from https://arxiv.org/abs/2001.06307:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak._v2.Array(\r\n...     [[{\"x\": 1, \"y\": [1.1]}, {\"x\": 2, \"y\": [2.0, 0.2]}], [], [{\"x\": 3, \"y\": [3.0, 0.3, 3.3]}]]\r\n... )\r\n>>> array.show()\r\n[{x: 1, y: [1.1]}, {x: 2, y: [2, 0.2]}],\r\n[],\r\n[{x: 3, y: [3, 0.3, 3.3]}]]\r\n```\r\n\r\nI picked that one so that I could show a figure for its structure:\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/155328289-79897182-32a4-433b-b3ab-62aede699b43.png)\r\n\r\nTo turn this into a C++ iterable, we need to make a Generator and a Layout. (The fact that this is multiple steps is the \"clunkiness.\" That would be easy to wrap up in a single function call, but all of this is probably going to be hidden in @ianna's code anyway, so there's not much need to make it user-friendly.)\r\n\r\n```python\r\n>>> import awkward._v2._connect.cling\r\n>>> generator = ak._v2._connect.cling.togenerator(array.layout.form)\r\n>>> lookup = ak._v2._lookup.Lookup(array.layout)\r\n```\r\n\r\nHere's what its code looks like. There's a C++ class for each node in the figure.\r\n\r\n```python\r\n>>> generator.generate(print)\r\n```\r\n```c++\r\nnamespace awkward {\r\n  class ArrayView {\r\n  public:\r\n    ArrayView(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : start_(start), stop_(stop), which_(which), ptrs_(ptrs) { }\r\n\r\n    size_t size() const noexcept {{\r\n      return stop_ - start_;\r\n    }}\r\n\r\n    bool empty() const noexcept {{\r\n      return start_ == stop_;\r\n    }}\r\n\r\n  protected:\r\n    ssize_t start_;\r\n    ssize_t stop_;\r\n    ssize_t which_;\r\n    ssize_t* ptrs_;\r\n  };\r\n}\r\nnamespace awkward {\r\n  class RecordView {\r\n  public:\r\n    RecordView(ssize_t at, ssize_t which, ssize_t* ptrs)\r\n      : at_(at), which_(which), ptrs_(ptrs) { }\r\n\r\n  protected:\r\n    ssize_t at_;\r\n    ssize_t which_;\r\n    ssize_t* ptrs_;\r\n  };\r\n}\r\nnamespace awkward {\r\n  class NumpyArray_int64_9vlCxRnT3oc: public ArrayView {\r\n  public:\r\n    NumpyArray_int64_9vlCxRnT3oc(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef int64_t value_type;\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    value_type at(size_t at) const {\r\n      if (at >= stop_ - start_) {\r\n        throw std::out_of_range(std::to_string(at) + \" is out of range\");\r\n      }\r\n      else {\r\n        return (*this)[at];\r\n      }\r\n    }\r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      return reinterpret_cast<int64_t*>(ptrs_[which_ + 1])[start_ + at];\r\n    }\r\n  };\r\n}\r\nnamespace awkward {\r\n  class NumpyArray_float64_O1I50DFDJTY: public ArrayView {\r\n  public:\r\n    NumpyArray_float64_O1I50DFDJTY(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef double value_type;\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    value_type at(size_t at) const {\r\n      if (at >= stop_ - start_) {\r\n        throw std::out_of_range(std::to_string(at) + \" is out of range\");\r\n      }\r\n      else {\r\n        return (*this)[at];\r\n      }\r\n    }\r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      return reinterpret_cast<double*>(ptrs_[which_ + 1])[start_ + at];\r\n    }\r\n  };\r\n}\r\nnamespace awkward {\r\n  class ListArray_BgI9cDJVCAw: public ArrayView {\r\n  public:\r\n    ListArray_BgI9cDJVCAw(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef NumpyArray_float64_O1I50DFDJTY value_type;\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    value_type at(size_t at) const {\r\n      if (at >= stop_ - start_) {\r\n        throw std::out_of_range(std::to_string(at) + \" is out of range\");\r\n      }\r\n      else {\r\n        return (*this)[at];\r\n      }\r\n    }\r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      ssize_t start = reinterpret_cast<int64_t*>(ptrs_[which_ + 1])[start_ + at];\r\n      ssize_t stop = reinterpret_cast<int64_t*>(ptrs_[which_ + 2])[start_ + at];\r\n      return value_type(start, stop, ptrs_[which_ + 3], ptrs_);\r\n    }\r\n  };\r\n}\r\nnamespace awkward {\r\n  class Record_gGZVr7BbK4: public RecordView {\r\n  public:\r\n    Record_gGZVr7BbK4(ssize_t at, ssize_t which, ssize_t* ptrs)\r\n      : RecordView(at, which, ptrs) { }\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    int64_t x() const noexcept {\r\n      return NumpyArray_int64_9vlCxRnT3oc(at_, at_ + 1, ptrs_[which_ + 2], ptrs_)[0];\r\n    }\r\n    NumpyArray_float64_O1I50DFDJTY y() const noexcept {\r\n      return ListArray_BgI9cDJVCAw(at_, at_ + 1, ptrs_[which_ + 3], ptrs_)[0];\r\n    }\r\n  };\r\n}\r\nnamespace awkward {\r\n  class RecordArray_AUBUNrlJjX8: public ArrayView {\r\n  public:\r\n    RecordArray_AUBUNrlJjX8(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef Record_gGZVr7BbK4 value_type;\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    value_type at(size_t at) const {\r\n      if (at >= stop_ - start_) {\r\n        throw std::out_of_range(std::to_string(at) + \" is out of range\");\r\n      }\r\n      else {\r\n        return (*this)[at];\r\n      }\r\n    }\r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      return value_type(start_ + at, which_, ptrs_);\r\n    }\r\n  };\r\n}\r\nnamespace awkward {\r\n  class ListArray_HTIOlVcPIAU: public ArrayView {\r\n  public:\r\n    ListArray_HTIOlVcPIAU(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef RecordArray_AUBUNrlJjX8 value_type;\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    value_type at(size_t at) const {\r\n      if (at >= stop_ - start_) {\r\n        throw std::out_of_range(std::to_string(at) + \" is out of range\");\r\n      }\r\n      else {\r\n        return (*this)[at];\r\n      }\r\n    }\r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      ssize_t start = reinterpret_cast<int64_t*>(ptrs_[which_ + 1])[start_ + at];\r\n      ssize_t stop = reinterpret_cast<int64_t*>(ptrs_[which_ + 2])[start_ + at];\r\n      return value_type(start, stop, ptrs_[which_ + 3], ptrs_);\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nThe only classes with data members are `ArrayView` and `RecordView`. They are superclasses for all the specialized classes for each node, and only those specialized classes should ever get instantiated. Methods like `get` are copy-pasted into each class (by `_generate_common()` in `cling.py`), which could have been avoided by templatizing `ArrayView` on `value_type`, but it hardly matters: either C++'s templating language copy-pastes those methods or the Python that generates these classes does. That would only improve the readability of the above strings, which are something someone would rarely look at.\r\n\r\nThe class names all include a base64 hash to distinguish, say, a ListArray of NumpyArray from a ListArray of RecordArray. This hash depends on the deep contents of the Awkward node and any parameters they have, as well as any options used during the generation, such as `flatlist_as_rvec`, which changes the above to:\r\n\r\n```python\r\n>>> generator.generate(print, flatlist_as_rvec=True)\r\n```\r\n```c++\r\nnamespace awkward {\r\n  class ArrayView {\r\n  public:\r\n    ArrayView(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : start_(start), stop_(stop), which_(which), ptrs_(ptrs) { }\r\n\r\n    size_t size() const noexcept {{\r\n      return stop_ - start_;\r\n    }}\r\n\r\n    bool empty() const noexcept {{\r\n      return start_ == stop_;\r\n    }}\r\n\r\n  protected:\r\n    ssize_t start_;\r\n    ssize_t stop_;\r\n    ssize_t which_;\r\n    ssize_t* ptrs_;\r\n  };\r\n}\r\nnamespace awkward {\r\n  class RecordView {\r\n  public:\r\n    RecordView(ssize_t at, ssize_t which, ssize_t* ptrs)\r\n      : at_(at), which_(which), ptrs_(ptrs) { }\r\n\r\n  protected:\r\n    ssize_t at_;\r\n    ssize_t which_;\r\n    ssize_t* ptrs_;\r\n  };\r\n}\r\nnamespace awkward {\r\n  class NumpyArray_int64_cRhHHLKAiXY: public ArrayView {\r\n  public:\r\n    NumpyArray_int64_cRhHHLKAiXY(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef int64_t value_type;\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    value_type at(size_t at) const {\r\n      if (at >= stop_ - start_) {\r\n        throw std::out_of_range(std::to_string(at) + \" is out of range\");\r\n      }\r\n      else {\r\n        return (*this)[at];\r\n      }\r\n    }\r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      return reinterpret_cast<int64_t*>(ptrs_[which_ + 1])[start_ + at];\r\n    }\r\n  };\r\n}\r\nnamespace awkward {\r\n  class ListArray_EhxjPFyWKf8: public ArrayView {\r\n  public:\r\n    ListArray_EhxjPFyWKf8(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef ROOT::RVec<double> value_type;\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    value_type at(size_t at) const {\r\n      if (at >= stop_ - start_) {\r\n        throw std::out_of_range(std::to_string(at) + \" is out of range\");\r\n      }\r\n      else {\r\n        return (*this)[at];\r\n      }\r\n    }\r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      ssize_t start = reinterpret_cast<int64_t*>(ptrs_[which_ + 1])[start_ + at];\r\n      ssize_t stop = reinterpret_cast<int64_t*>(ptrs_[which_ + 2])[start_ + at];\r\n      ssize_t which = ptrs_[which_ + 3];\r\n      double* content = reinterpret_cast<double*>(ptrs_[which + 1]) + start;\r\n      return value_type(content, stop - start);\r\n    }\r\n  };\r\n}\r\nnamespace awkward {\r\n  class Record_gtaz2QTTPs: public RecordView {\r\n  public:\r\n    Record_gtaz2QTTPs(ssize_t at, ssize_t which, ssize_t* ptrs)\r\n      : RecordView(at, which, ptrs) { }\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    int64_t x() const noexcept {\r\n      return NumpyArray_int64_cRhHHLKAiXY(at_, at_ + 1, ptrs_[which_ + 2], ptrs_)[0];\r\n    }\r\n    NumpyArray_float64_Jw2edUDvrA y() const noexcept {\r\n      return ListArray_EhxjPFyWKf8(at_, at_ + 1, ptrs_[which_ + 3], ptrs_)[0];\r\n    }\r\n  };\r\n}\r\nnamespace awkward {\r\n  class RecordArray_39Ik7hb1TXs: public ArrayView {\r\n  public:\r\n    RecordArray_39Ik7hb1TXs(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef Record_gtaz2QTTPs value_type;\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    value_type at(size_t at) const {\r\n      if (at >= stop_ - start_) {\r\n        throw std::out_of_range(std::to_string(at) + \" is out of range\");\r\n      }\r\n      else {\r\n        return (*this)[at];\r\n      }\r\n    }\r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      return value_type(start_ + at, which_, ptrs_);\r\n    }\r\n  };\r\n}\r\nnamespace awkward {\r\n  class ListArray_zdlkE7xbFoY: public ArrayView {\r\n  public:\r\n    ListArray_zdlkE7xbFoY(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef RecordArray_39Ik7hb1TXs value_type;\r\n\r\n    const std::string parameter(const std::string& parameter) const noexcept {\r\n      return \"null\";\r\n    }\r\n\r\n    value_type at(size_t at) const {\r\n      if (at >= stop_ - start_) {\r\n        throw std::out_of_range(std::to_string(at) + \" is out of range\");\r\n      }\r\n      else {\r\n        return (*this)[at];\r\n      }\r\n    }\r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      ssize_t start = reinterpret_cast<int64_t*>(ptrs_[which_ + 1])[start_ + at];\r\n      ssize_t stop = reinterpret_cast<int64_t*>(ptrs_[which_ + 2])[start_ + at];\r\n      return value_type(start, stop, ptrs_[which_ + 3], ptrs_);\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nNow the flat lists have types like `ROOT::RVec<double>` instead of `NumpyArray_float64_O1I50DFDJTY`.\r\n\r\nThose hashes are not good for naming types, because although they're stable for a given set of nested types and options, a little change in the Awkward code could produce radically different hashes. Users should (as in \"ought to\") rely on `auto`.\r\n\r\nTo turn an Awkward Array into one of these types, use the C++ generated by\r\n\r\n```python\r\n>>> generator.entry(flatlist_as_rvec=True)\r\n'awkward::ListArray_zdlkE7xbFoY(0, length, 0, ptrs)'\r\n```\r\n\r\nIt is necessary to pass the same options to `generator.entry` as `generator.generate`. Somehow, the `length` of the original array and `ptrs`, an array that serves as navigation in C++, must be passed in. It's generally pretty easy to pass a `ssize_t` and a `ssize_t*` from Python into C++.\r\n\r\n```python\r\n>>> length = len(array)\r\n>>> length\r\n3\r\n\r\n>>> ptrs = lookup.arrayptrs\r\n>>> ptrs\r\narray([            -1, 94864433929152, 94864433929160,              4,\r\n                   -1,              3,              8,             10,\r\n                   -1, 94864441259584,             -1, 94864440548752,\r\n       94864440548760,             14,             -1, 94864440292080])\r\n>>> ptrs.ctypes.data\r\n94864440446608\r\n```\r\n\r\nIn this, C++ is _always_ seeing borrowed references, so the `lookup` object must be kept in scope while the C++ is running. The `lookup` holds Python references to everything else, keeping it all alive.\r\n\r\nThe real magic of what's going on happens in the `operator[]` methods, which as `const noexcept`. They either fetch single values from the original array or create more `ArrayView`/`RecordView` instances, which are 32 and 24 bytes, respectively. All of these can live on the stack\u2014no `malloc` anywhere. It might even be a little better if the return values were `value_type&`, rather than `value_type` (saving a 32-byte copy), but I'm not very familiar/comfortable with these aspects of C++ and I'll let others make those performance adjustments.\r\n\r\nUsers will probably want all of the `const_iterator` stuff, which should be easy to add to `_generate_common()` or (if `ArrayType` gets templated with `value_type`) directly in `ArrayType`. These can be defined in terms of the `operator[]`, which should be where the optimization effort goes.\r\n\r\nThat's all I can think of to say. Comments? Questions?",
  "created_at":"2022-02-23T13:50:55Z",
  "id":1048802279,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-g3Pn",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-02-23T13:50:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, I forgot to mention that Awkward's option-type goes to C++ `std::optional`, and union-type goes to `std::variant`, so in general, this requires C++17. The required headers are in a list in `cling.py`. I didn't do any tests of complex numbers and dates would probably have to be explicitly handled\u2014they probably don't work yet.\r\n\r\nEvery Awkward type has a C++ iterable. (Implementing this even revealed a bug in the Numba iterators, which are very similar, apart from generating LLVM IR instead of C++.)",
  "created_at":"2022-02-23T13:54:36Z",
  "id":1048805465,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-g4BZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T13:54:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I run into a `RuntimeError: could not load cppyy_backend library` with the following command :\r\n\r\n`python localbuild.py --pytest tests/v2/test_1300-awkward-to-cpp-converter-with-cling.py`\r\n\r\nwhile this one works just fine:\r\n\r\n`python -m pytest tests/v2/test_1300-awkward-to-cpp-converter-with-cling.py`\r\n\r\nI think, it's related to `@rpath`:\r\n```\r\n% otool -L /Users/yana/Projects/ROOT/ROOT-master/23.02.2022/root_install/lib/libcppyy_backend3_10.so \r\n/Users/yana/Projects/ROOT/ROOT-master/23.02.2022/root_install/lib/libcppyy_backend3_10.so:\r\n\t@rpath/libcppyy_backend3_10.so (compatibility version 0.0.0, current version 0.0.0)\r\n\t@rpath/libCore.so (compatibility version 0.0.0, current version 0.0.0)\r\n\t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\r\n```",
  "created_at":"2022-02-23T14:15:42Z",
  "id":1048824852,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-g8wU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T14:41:33Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"> @jpivarski That's all I can think of to say. Comments? Questions?\r\n\r\nReading text above you are implementing point 1 from the original comment: \r\nhttps://github.com/scikit-hep/awkward-1.0/pull/1295#issuecomment-1043590755\r\n\r\nWhen do you expect the first prototype (of Awkward to C++) to be ready for testing? Based on what was written above, I can not estimate that.",
  "created_at":"2022-02-23T14:22:25Z",
  "id":1048831751,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-g-cH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T14:22:25Z",
  "user":"MDQ6VXNlcjIxOTYyNzY1"
 },
 {
  "author_association":"MEMBER",
  "body":"@ianna, do you know if `localbuild.py` vs `pytest` is using a different compilation of Awkward? All that the test does is call `ROOT.gInterpreter.Declare` and then call the function that ROOT has created. If you're having problems with rpath and error messages like \"could not load cppyy_backend library\", I would suspect your ROOT installation.\r\n\r\nWhile working on this, I discovered that ROOT installed from source does not have C++17 enabled unless you explicitly pass `-DCMAKE_CXX_STANDARD=17`. If you get [ROOT from conda-forge](https://root.cern/install/#conda), you should be okay for C++17.\r\n\r\nAlthough if the problem was that ROOT is compiled without C++17, then the error messages would be different: it would be saying that `optional` is not in namespace `std`...",
  "created_at":"2022-02-23T18:03:35Z",
  "id":1049060645,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-h2Ul",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T18:03:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@miranov25, it depends on what you want to test. If you want to do an initial test outside of RDataFrame (even if you plan on using RDataFrame in the future), you could use the examples I gave above right now. They're in Awkward's `main` branch, and they use v2 arrays (that's what the examples construct). This covers the Awkward \u2192 C++ direction, not the other way, and it should permit you to iterate over the data using `operator[]` syntax.\r\n\r\nIf you want to test RDataFrame access, that will depend on @ianna's developments, and I would guess that it would take until next week or so to have estimates. @ianna, based on what you've seen of the RDataSource infrastructure so far, what would it take to build something that @miranov25 can at least test?",
  "created_at":"2022-02-23T18:04:17Z",
  "id":1049061284,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-h2ek",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T18:04:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":" @jpivarski, @ianna , thank you. O(weeks) is enough, so I will not try a temporary solution\r\nFor the Root  C++, I assume the default CVMS  version should be fine: \r\n```\r\nSingularity> root-config --cflag\r\n-pthread -std=c++17 -m64 -I/cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-24-06-62/include\r\n```\r\n",
  "created_at":"2022-02-23T18:22:37Z",
  "id":1049078111,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-h6lf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T18:22:37Z",
  "user":"MDQ6VXNlcjIxOTYyNzY1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @jpivarski, @ianna , thank you. O(weeks) is enough, so I will not try a temporary solution For the Root C++, I assume the default CVMS version should be fine:\r\n> \r\n> ```\r\n> Singularity> root-config --cflag\r\n> -pthread -std=c++17 -m64 -I/cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-24-06-62/include\r\n> ```\r\n\r\nYes, I'm basing the code on ROOT 6.24/06 and C++17. Though, I have a local build following the recipe:\r\n```\r\ngit clone --branch latest-stable https://github.com/root-project/root.git root_src\r\nmkdir root_build root_install && cd root_build\r\ncmake -DCMAKE_INSTALL_PREFIX=../root_install -Dbuiltin_glew=ON -Dclad=OFF -Dtmva-pymva=OFF -DCMAKE_CXX_STANDARD=17 ../root_src\r\ncmake --build . -- install -j4\r\n\r\nsource ../root_install/bin/thisroot.sh\r\n```",
  "created_at":"2022-02-24T08:10:37Z",
  "id":1049595146,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-j40K",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T08:10:37Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna, do you know if `localbuild.py` vs `pytest` is using a different compilation of Awkward? All that the test does is call `ROOT.gInterpreter.Declare` and then call the function that ROOT has created. If you're having problems with rpath and error messages like \"could not load cppyy_backend library\", I would suspect your ROOT installation.\r\n> \r\n> While working on this, I discovered that ROOT installed from source does not have C++17 enabled unless you explicitly pass `-DCMAKE_CXX_STANDARD=17`. If you get [ROOT from conda-forge](https://root.cern/install/#conda), you should be okay for C++17.\r\n> \r\n> Although if the problem was that ROOT is compiled without C++17, then the error messages would be different: it would be saying that `optional` is not in namespace `std`...\r\n\r\n@jpivarski - it looks like `localbuild.py` sets `LD_LIBRARY_PATH` to `awkward:` and does not pick up the existing value... that is defined by the ROOT install script, but it is not in the `env` virtual environment... I think, need to fix it on my side or use the following patch:\r\n```diff\r\ndiff --git a/localbuild.py b/localbuild.py\r\nindex d3626ae5..615bae7e 100755\r\n--- a/localbuild.py\r\n+++ b/localbuild.py\r\n@@ -163,6 +163,8 @@ if args.buildpython:\r\n     # localbuild must be in the library path for some operations.\r\n     env = dict(os.environ)\r\n     reminder = False\r\n+    if env.get(\"ROOTSYS\") is not None and env.get(\"SHLIB_PATH\") is not None:\r\n+        env[\"LD_LIBRARY_PATH\"] = env.get(\"SHLIB_PATH\", \"\") + \":\" + env.get(\"LD_LIBRARY_PATH\", \"\")\r\n     if \"awkward\" not in env.get(\"LD_LIBRARY_PATH\", \"\"):\r\n         env[\"LD_LIBRARY_PATH\"] = \"awkward:\" + env.get(\"LD_LIBRARY_PATH\", \"\")\r\n         reminder = True\r\n```",
  "created_at":"2022-02-24T10:05:04Z",
  "id":1049687850,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-kPcq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T10:53:24Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"@ianna The `localbuild.py` script is adding the `awkward` directory to `LD_LIBRARY_PATH`, but it is neither adding nor removing ROOT from it. I'd rather not add the `ROOTSYS` check to it because it has nothing to do with installing ROOT.\r\n\r\nAnyway, this is probably moot because if @henryiii fixes editable installation (`pip install -e .`) and compilation times get much shorter when we drop v1, we probably won't need `localbuild.py` anymore.",
  "created_at":"2022-02-24T13:48:55Z",
  "id":1049878726,
  "issue":1295,
  "node_id":"IC_kwDODBCWws4-k-DG",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-02-24T13:48:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The discussion started here informed quite a few PRs: Awkward \u2192 C++ generation in #1300, #1359, #1372, #1376, #1383, #1398, and now Awkward \u2192 RDataFrame in #1374, which is just about ready to be merged.\r\n\r\nThere's still the RDataFrame \u2192 Awkward direction, but that will be new PRs. I can close this one now.",
  "created_at":"2022-04-26T19:04:35Z",
  "id":1110149224,
  "issue":1295,
  "node_id":"IC_kwDODBCWws5CK4ho",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-04-26T19:04:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"FYI, both `ak._v2.to_rdataframe` and `ak._v2.from_rdataframe` are now in a pre-release. You can pick it up with\r\n\r\n```\r\npip install --pre awkward\r\n```\r\nHere is an example how to use it:\r\n\r\n```python\r\ndef test_data_frame_vec_of_real():\r\n    ak_array_in = ak._v2.Array([[1.1, 2.2], [3.3], [4.4, 5.5]])\r\n\r\n    data_frame = ak._v2.to_rdataframe({\"x\": ak_array_in})\r\n\r\n    assert data_frame.GetColumnType(\"x\") == \"ROOT::VecOps::RVec<double>\"\r\n\r\n    ak_array_out = ak._v2.from_rdataframe(\r\n        data_frame,\r\n        column=\"x\",\r\n    )\r\n    assert ak_array_in.to_list() == ak_array_out[\"x\"].to_list()\r\n```\r\n\r\nPlease, let me know if there are any issues, or requests. Thanks!",
  "created_at":"2022-06-23T11:56:58Z",
  "id":1164317246,
  "issue":1295,
  "node_id":"IC_kwDODBCWws5FZhI-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T11:56:58Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"Dear @ianna and @jpivarski \r\n\r\nThank you. I will try to use it. During the first blind test I got some errors that could be due to my ROOT configuration. \r\nThe first part of the test is fine, in the second part of the test it crashes. Is there some test where I can check ROOT/awkward compatibility?\r\n\r\n\r\n\r\n### defining test function \r\n```\r\nIn [1]: import awkward as ak                                                                                                                                                                                \r\nIn [2]: def test_data_frame_vec_of_real(): \r\n   ...:     ak_array_in = ak._v2.Array([[1.1, 2.2], [3.3], [4.4, 5.5]]) \r\n   ...:     data_frame = ak._v2.to_rdataframe({\"x\": ak_array_in}) \r\n   ...:  \r\n   ...:     assert data_frame.GetColumnType(\"x\") == \"ROOT::VecOps::RVec<double>\" \r\n   ...:  \r\n   ...:     ak_array_out = ak._v2.from_rdataframe( \r\n   ...:         data_frame, \r\n   ...:         column=\"x\", \r\n   ...:     ) \r\n   ...:     assert ak_array_in.to_list() == ak_array_out[\"x\"].to_list() \r\n```\r\n-->\r\n### error - stacktrace\r\n```\r\n\r\nIn [3]: test_data_frame_vec_of_real()                                                                                                                                                                       \r\n---------------------------------------------------------------------------\r\nOSError                                   Traceback (most recent call last)\r\n<ipython-input-3-cb35a82c7e49> in <module>\r\n----> 1 test_data_frame_vec_of_real()\r\n\r\n<ipython-input-2-b6ba8aa26f13> in test_data_frame_vec_of_real()\r\n      6     assert data_frame.GetColumnType(\"x\") == \"ROOT::VecOps::RVec<double>\"\r\n      7 \r\n----> 8     ak_array_out = ak._v2.from_rdataframe(\r\n      9         data_frame,\r\n     10         column=\"x\",\r\n\r\n/alicesw/sw/ubuntu2004_x86-64/Python/v3.8.10-local1/lib/python/site-packages/awkward/_v2/operations/ak_from_rdataframe.py in from_rdataframe(data_frame, column)\r\n     22         ),\r\n     23     ):\r\n---> 24         return _impl(\r\n     25             data_frame,\r\n     26             column,\r\n\r\n/alicesw/sw/ubuntu2004_x86-64/Python/v3.8.10-local1/lib/python/site-packages/awkward/_v2/operations/ak_from_rdataframe.py in _impl(data_frame, column)\r\n     32     column,\r\n     33 ):\r\n---> 34     import awkward._v2._connect.rdataframe.from_rdataframe  # noqa: F401\r\n     35 \r\n     36     return ak._v2._connect.rdataframe.from_rdataframe.from_rdataframe(\r\n\r\n/alicesw/sw/ubuntu2004_x86-64/ROOT/v6-26-04-patches-alice1-local1/lib/ROOT/_facade.py in _importhook(name, *args, **kwds)\r\n    151                 except Exception:\r\n    152                     pass\r\n--> 153             return _orig_ihook(name, *args, **kwds)\r\n    154         __builtin__.__import__ = _importhook\r\n    155 \r\n\r\n/alicesw/sw/ubuntu2004_x86-64/Python/v3.8.10-local1/lib/python/site-packages/awkward/_v2/_connect/rdataframe/from_rdataframe.py in <module>\r\n     23 \r\n     24 \r\n---> 25 cppyy.add_include_path(\r\n     26     os.path.abspath(\r\n     27         os.path.join(\r\n\r\n/alicesw/sw/ubuntu2004_x86-64/ROOT/v6-26-04-patches-alice1-local1/lib/cppyy/__init__.py in add_include_path(path)\r\n    219     \"\"\"Add a path to the include paths available to Cling.\"\"\"\r\n    220     if not os.path.isdir(path):\r\n--> 221         raise OSError(\"no such directory: %s\" % path)\r\n    222     gbl.gInterpreter.AddIncludePath(path)\r\n    223 \r\n\r\nOSError: no such directory: /alicesw/sw/ubuntu2004_x86-64/Python/v3.8.10-local1/lib/python3.8/site-packages/awkward/_v2/cpp-headers\r\n```\r\n\r\n### directory mentioned in the error is indeed not existing\r\n```\r\nSingularity> ls -a /alicesw/sw/ubuntu2004_x86-64/Python/v3.8.10-local1/lib/python3.8/site-packages/awkward/_v2/\r\n.   __init__.py  _broadcasting.py  _lookup.py       _reducers.py  _typetracer.py  behaviors  forms         identifier.py  numba.py    record.py           types\r\n..  __pycache__  _connect          _prettyprint.py  _slicing.py   _util.py        contents   highlevel.py  index.py       operations  tmp_for_testing.py\r\n```\r\n### awkward description\r\n\r\n```\r\nSingularity> pip show awkward\r\nName: awkward\r\nVersion: 1.9.0rc6\r\nSummary: Manipulate JSON-like data with NumPy-like idioms.\r\nHome-page: https://github.com/scikit-hep/awkward-1.0\r\nAuthor: Jim Pivarski\r\nAuthor-email: pivarski@princeton.edu\r\nLicense: BSD-3-Clause\r\nLocation: /alicesw/sw/ubuntu2004_x86-64/Python/v3.8.10-local1/lib/python3.8/site-packages\r\nRequires: numpy, setuptools\r\nRequired-by: \r\n```\r\n",
  "created_at":"2022-06-23T16:20:19Z",
  "id":1164617443,
  "issue":1295,
  "node_id":"IC_kwDODBCWws5Faqbj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T16:24:25Z",
  "user":"MDQ6VXNlcjIxOTYyNzY1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@miranov25 I took a cursory glance at the RC wheel - it looks like we're not packaging the headers for consumption. I'll look into this",
  "created_at":"2022-06-23T17:42:11Z",
  "id":1164694109,
  "issue":1295,
  "node_id":"IC_kwDODBCWws5Fa9Jd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T17:42:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @miranov25 I took a cursory glance at the RC wheel - it looks like we're not packaging the headers for consumption. I'll look into this\r\n\r\nThanks! Indeed, the C++ header-only directory is something new and was not needed before.",
  "created_at":"2022-06-23T17:49:01Z",
  "id":1164700531,
  "issue":1295,
  "node_id":"IC_kwDODBCWws5Fa-tz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T17:49:01Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@miranov25 - thanks for a quick feedback! Indeed, the header file https://github.com/scikit-hep/awkward/blob/main/src/awkward/_v2/cpp-headers/rdataframe_jagged_builders.h is needed. I think, you could try to copy it by hand to the mentioned directory or wait for the next pre-release. Thanks again!",
  "created_at":"2022-06-23T17:53:30Z",
  "id":1164704622,
  "issue":1295,
  "node_id":"IC_kwDODBCWws5Fa_tu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T17:53:30Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"@ianna \r\n\r\nI tried it before via Github master and it failed (I do not know why). Now I tried it via your link https://github.com/scikit-hep/awkward/blob/main/src/awkward/_v2/cpp-headers/rdataframe_jagged_builders.h and **the test ran until the end without problems.**\r\n",
  "created_at":"2022-06-23T20:31:11Z",
  "id":1164846024,
  "issue":1295,
  "node_id":"IC_kwDODBCWws5FbiPI",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-06-23T20:31:11Z",
  "user":"MDQ6VXNlcjIxOTYyNzY1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@miranov25 - thanks! A new pre-release is available.",
  "created_at":"2022-06-24T04:47:27Z",
  "id":1165191708,
  "issue":1295,
  "node_id":"IC_kwDODBCWws5Fc2oc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-24T04:47:27Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1296](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d22a6d6) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.64%`.\n> The diff coverage is `77.46%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `63.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvdy5weQ==) | `60.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/describe/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdHlwZS5weQ==) | `44.11% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| ... and [81 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1296/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-18T14:49:38Z",
  "id":1044642063,
  "issue":1296,
  "node_id":"IC_kwDODBCWws4-Q_kP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T14:49:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1297](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c9d3624) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.65%`.\n> The diff coverage is `77.47%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `63.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvdy5weQ==) | `60.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/describe/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdHlwZS5weQ==) | `44.11% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `54.95% <25.00%> (-1.12%)` | :arrow_down: |\n| ... and [81 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1297/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-18T16:25:48Z",
  "id":1044789028,
  "issue":1297,
  "node_id":"IC_kwDODBCWws4-Rjck",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T16:25:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1298](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1a064bb) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.68%`.\n> The diff coverage is `77.62%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `63.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvdy5weQ==) | `60.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/describe/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfdHlwZS5weQ==) | `44.11% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2lzY2xvc2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [.../awkward/\\_v2/operations/structure/ak\\_nan\\_to\\_num.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX25hbl90b19udW0ucHk=) | `75.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `8.19% <3.44%> (-66.81%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `9.52% <9.52%> (\u00f8)` | |\n| ... and [86 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1298/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-18T23:16:36Z",
  "id":1045332377,
  "issue":1298,
  "node_id":"IC_kwDODBCWws4-ToGZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-18T23:16:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1299](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1afee82) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.68%`.\n> The diff coverage is `77.62%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `63.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `84.43% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <\u00f8> (\u00f8)` | |\n| [.../awkward/\\_v2/operations/convert/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2J1ZmZlcnMucHk=) | `85.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `92.30% <\u00f8> (\u00f8)` | |\n| ... and [163 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1299/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-19T00:05:14Z",
  "id":1045393459,
  "issue":1299,
  "node_id":"IC_kwDODBCWws4-T3Az",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-19T00:05:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1300](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (509a3f0) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **decrease** coverage by `0.39%`.\n> The diff coverage is `66.89%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `84.34% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `63.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `84.43% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <\u00f8> (\u00f8)` | |\n| [.../awkward/\\_v2/operations/convert/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2J1ZmZlcnMucHk=) | `85.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| ... and [168 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1300/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-19T01:14:06Z",
  "id":1045486897,
  "issue":1300,
  "node_id":"IC_kwDODBCWws4-UN0x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T04:14:58Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1301](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (63587ae) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **decrease** coverage by `0.19%`.\n> The diff coverage is `78.32%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `84.34% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `63.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `84.43% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <\u00f8> (\u00f8)` | |\n| [.../awkward/\\_v2/operations/convert/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2J1ZmZlcnMucHk=) | `85.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `92.30% <\u00f8> (\u00f8)` | |\n| ... and [175 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1301/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-21T15:16:57Z",
  "id":1046983867,
  "issue":1301,
  "node_id":"IC_kwDODBCWws4-Z7S7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T15:26:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I was just going to suggest @ianna to review this. But you've got everything all set here, so I'll just leave it to you two!",
  "created_at":"2022-02-21T15:17:34Z",
  "id":1046984473,
  "issue":1303,
  "node_id":"IC_kwDODBCWws4-Z7cZ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2022-02-21T15:17:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1303](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b31fee7) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.68%`.\n> The diff coverage is `77.62%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `63.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `84.43% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <\u00f8> (\u00f8)` | |\n| [.../awkward/\\_v2/operations/convert/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2J1ZmZlcnMucHk=) | `85.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `92.30% <\u00f8> (\u00f8)` | |\n| ... and [163 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1303/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-21T15:40:44Z",
  "id":1047008544,
  "issue":1303,
  "node_id":"IC_kwDODBCWws4-aBUg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-21T17:04:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, looks like it was a bug with the index wrapping.\r\nHere, when `field_index_ == contents_size_ - 1`, both the returned value and the \"next index\" (`field_index_`) have the same value:\r\n```cpp\r\nreturn (field_index_ < contents_size_ - 1) ?\r\n      field_index_++ : (field_index_ = 0);\r\n```\r\nI think we just want to do something like\r\n```cpp\r\nauto result = field_index_;\r\nfield_index_ = (field_index_ + 1) % contents_size_;\r\nreturn result;\r\n```\r\nwhich is done in b31fee7, with a common-case shortcut.",
  "created_at":"2022-02-21T17:22:34Z",
  "id":1047095618,
  "issue":1303,
  "node_id":"IC_kwDODBCWws4-aWlC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-21T17:22:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1304](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (929920e) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/8e682003331d0bbe493f4a8b3446f8cc081878b8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e68200) will **increase** coverage by `1.71%`.\n> The diff coverage is `77.65%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.24% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `87.01% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `63.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `84.43% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <\u00f8> (\u00f8)` | |\n| [.../awkward/\\_v2/operations/convert/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2J1ZmZlcnMucHk=) | `85.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `25.00% <0.00%> (-50.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `92.30% <\u00f8> (\u00f8)` | |\n| ... and [165 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1304/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-21T17:55:14Z",
  "id":1047117174,
  "issue":1304,
  "node_id":"IC_kwDODBCWws4-ab12",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-21T23:16:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"That's right. This has reached some unconsidered code path. It is faithfully reproduced in v2:\r\n\r\n```python\r\nimport awkward as ak\r\nx = ak._v2.Array([[5.]])\r\ny = ak._v2.Array([True])\r\nx[ak._v2.mask(y, [True]), 0]\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/highlevel.py\", line 1010, in __getitem__\r\n    out = self._layout[where]\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/content.py\", line 486, in __getitem__\r\n    out = next._getitem_next(nextwhere[0], nextwhere[1:], None)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/regulararray.py\", line 590, in _getitem_next\r\n    return self._getitem_next_missing(head, tail, advanced)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/content.py\", line 406, in _getitem_next_missing\r\n    nextcontent = self._getitem_next(headcontent, tail, advanced)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/regulararray.py\", line 492, in _getitem_next\r\n    out = nextcontent._getitem_next(nexthead, nexttail, nextadvanced)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/listarray.py\", line 511, in _getitem_next\r\n    assert advanced is None\r\nAssertionError\r\n```\r\n\r\nand it would probably be easier to debug in v2, as that's Python code.\r\n\r\nThe \"`advanced`\" Index is for passing down information needed in advanced indexing, which is to say, slicing more than one dimension by an array. That happens here because the integer `0` gets promoted to an array because it's in a tuple (NumPy rules: arrays and integers in a slice tuple get broadcasted together, which promotes integers into arrays).\r\n\r\nWhen descending through a layout tree, we might have an `advanced` Index at some level or we might not. (When we first hit an array or index that has been broadcasted to one, we create the `advanced` Index and pass it to the whole subtree.) Early on, this was represented in v1 as an empty Index, but there were valid cases in which an `advanced` Index can exist and have zero length. So in v1, the `is_empty_advanced` boolean keeps track of whether this Index represents an existing Index or not.\r\n\r\nIn v2, we use `None` to say it isn't there. (Yay, Python!)\r\n\r\nThe slice of `x` has two dimensions, one of which is an Awkward Array with nullable data (`y.mask[[True]]`) and the other is an integer, promoted to an array. Whereas NumPy expresses slices on multiple dimensions as multiple arrays in a tuple,\r\n\r\n```python\r\narray[slice_dimension_1, slice_dimension_2]\r\n```\r\n\r\nAwkward Array supports this as much as it has to and extends it in a different way: by requiring the nested structure of the slicer and the sliced to match (broadcastable):\r\n\r\n```python\r\njagged_jagged_array[another_jagged_jagged_array]\r\n```\r\n\r\nWhat happens when you mix the two is minimally tested:\r\n\r\n```python\r\njagged_jagged_array[a_jagged_array, deeper_index]\r\n```\r\n\r\nA semantics has been defined: the `deeper_index` continues the recursion in the layout tree from the point where `a_jagged_array` stops. The case you described may or may not be allowed (I'd have to think hard about that), but this is unquestionably a bug in the sense that if you weren't supposed to do that, you'd get a ValueError, IndexError, or TypeError with an informative message, not a RuntimeError (v1's C++) or AssertionError (v2), indicating a programming error.",
  "created_at":"2022-02-21T19:38:05Z",
  "id":1047178523,
  "issue":1305,
  "node_id":"IC_kwDODBCWws4-aq0b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-21T19:38:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The assertions in `_getitem_next` were all built around the assumption that multiple tuple items in the slice have all been broadcasted, and there's a preprocessing step that guarantees that it has been broadcasted _for NumPy-like slices_. There were zero test cases of mixing Awkward-like and NumPy-like slices in the test suite: it's just something we hadn't considered.\r\n\r\nTherefore, it's also something we don't support. The code written above now raises an intentional error, and hopefully it would be clear what's going on and how to proceed if you run into it again:\r\n\r\n```python\r\n\r\n>>> array = ak._v2.Array([[3.14]])\r\n>>> first_slice = ak._v2.Array([True, None])[:1]   # type: 1 * ?bool\r\n>>> first_slice\r\n<Array [True] type='1 * ?bool'>\r\n>>> second_slice = 0\r\n>>> array[first_slice, second_slice]\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/highlevel.py\", line 959, in __getitem__\r\n    out = self._layout[where]\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/contents/content.py\", line 485, in __getitem__\r\n    return self._getitem(where)\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/contents/content.py\", line 512, in _getitem\r\n    nextwhere = ak._v2._slicing.getitem_broadcast(items)\r\n  File \"/home/jpivarski/irishep/awkward/awkward/_v2/_slicing.py\", line 46, in getitem_broadcast\r\n    raise ak._v2._util.error(\r\nTypeError: while attempting to slice (from <stdin>, line 1)\r\n\r\n    <Array [[3.14]] type='1 * var * float64'>\r\n\r\nwith\r\n\r\n    (<Array [True] type='1 * ?bool'>, 0)\r\n\r\nError details: cannot mix Awkward slicing (using an array with missing or variable-length lists in the\r\nslice) with NumPy advanced slicing (using more than one broadcastable array or integer in the slice),\r\nthough you can perform multiple slices\r\n```",
  "created_at":"2022-08-15T19:28:33Z",
  "id":1215656823,
  "issue":1305,
  "node_id":"IC_kwDODBCWws5IdXN3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T19:28:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1306?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1306](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1306?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ac5e17e) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **increase** coverage by `0.02%`.\n> The diff coverage is `100.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1306?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1306/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1306/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ3NvcnQucHk=) | `100.00% <100.00%> (+25.00%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1306/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.63% <0.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1306/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `86.77% <0.00%> (+0.16%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1306/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `88.23% <0.00%> (+0.21%)` | :arrow_up: |\n",
  "created_at":"2022-02-22T14:47:59Z",
  "id":1047872163,
  "issue":1306,
  "node_id":"IC_kwDODBCWws4-dUKj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-22T14:47:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1307](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (589b4e7) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **increase** coverage by `0.07%`.\n> The diff coverage is `77.77%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...ard/\\_v2/operations/structure/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NvbWJpbmF0aW9ucy5weQ==) | `76.92% <70.00%> (+1.92%)` | :arrow_up: |\n| [...wkward/\\_v2/operations/structure/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NvbWJpbmF0aW9ucy5weQ==) | `90.90% <87.50%> (+15.90%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.55% <0.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `86.77% <0.00%> (+0.16%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `88.23% <0.00%> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.78% <0.00%> (+0.31%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `83.81% <0.00%> (+0.81%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1307/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ3NvcnQucHk=) | `100.00% <0.00%> (+25.00%)` | :arrow_up: |\n",
  "created_at":"2022-02-22T15:14:02Z",
  "id":1047898444,
  "issue":1307,
  "node_id":"IC_kwDODBCWws4-dalM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-22T15:14:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1308](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (38c2fc1) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `2.01%`.\n> The diff coverage is `38.17%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.55% <\u00f8> (+0.13%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <97.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (+0.51%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `84.34% <100.00%> (-2.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ3NvcnQucHk=) | `100.00% <100.00%> (+25.00%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_zip.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3ppcC5weQ==) | `89.58% <100.00%> (+0.45%)` | :arrow_up: |\n| ... and [8 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1308/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-23T10:16:00Z",
  "id":1048628979,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-gM7z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T20:42:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> implies a temporal sequence\r\nAgreed, this was my main concern with the name. If it occurs to you too, then I think it's clearly a bad name. \r\n\r\nI *like* the explicitness of `optiontype_outside_record`, though I'm unsure about how verbose it is. I suppose there isn't really a better name that comes to mind, so I'm going to squash and merge it once I've made the necessary changes and copied the implementation (subject to changes) to v2",
  "created_at":"2022-02-23T20:27:21Z",
  "id":1049184450,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-iUjC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T20:27:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Long argument and function names is a cultural thing, maybe coming from languages that don't have modularization and namespaces in class types. In particular, I'm thinking about function names in Emacs Lisp `which-are-often-six-words-long`! For years, this appalled me, but I've started using it more, particularly in Uproot 4. Any identifiers with connectives like \"`_and_`\" in them are guilty of this. But maybe it's alright, especially if there's tab-complete...",
  "created_at":"2022-02-23T20:37:36Z",
  "id":1049192379,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-iWe7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T20:37:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Long argument and function names is a cultural thing, maybe coming from languages that don't have modularization and namespaces in class types. In particular, I'm thinking about function names in Emacs Lisp `which-are-often-six-words-long`! For years, this appalled me, but I've started using it more, particularly in Uproot 4. Any identifiers with connectives like \"`_and_`\" in them are guilty of this. But maybe it's alright, especially if there's tab-complete...\r\n\r\nI'm generally in favour of this - I prefer descriptive names given that we mainly read code rather than write it. Exploratory code is perhaps an exception to this rule but I can also think of cases where short parameters are just meaningless without reading the docs. \ud83e\udd37",
  "created_at":"2022-02-23T20:48:40Z",
  "id":1049202984,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-iZEo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T20:48:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This empty file in the tests directory was probably unintended, right?\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/38c2fc1fdd50d7ea3b56fa49702f19517fed43b7/tests/.tmpHaXt1g",
  "created_at":"2022-02-23T21:39:58Z",
  "id":1049240570,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-iiP6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T21:39:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Er, I didn't see that in the commit; I'm not sure how I managed to do that! Would you prefer a revert or separate commit? ",
  "created_at":"2022-02-23T22:08:53Z",
  "id":1049262247,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-inin",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T08:33:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"No reason to do that! I'll just remove it in #1312. It can go under the category of \"general cleanup.\"",
  "created_at":"2022-02-23T23:16:48Z",
  "id":1049311777,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-izoh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T23:16:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski digging this up again, I realised that I didn't handle the case of `IndexedArray(..., IndexedOptionArray)`, which we definitely want to support. :facepalm: \r\n\r\nI think the simplest solution here is to replace\r\n```python3\r\nif optiontype_outside_record and any(\r\n    isinstance(x, ak._util.optiontypes) for x in inputs\r\n):\r\n    return None\r\n```\r\nwith\r\n```python3\r\nif optiontype_outside_record and any(\r\n    isinstance(x, ak._util.optiontypes + ak._util.indexedtypes) for x in inputs\r\n):\r\n    return None\r\n```\r\n\r\nBut, this makes me wonder if there's more to do here - what about Union types? Does this warrant another flag `uniontype_outside_record`?\r\n```python3\r\nif optiontype_outside_record and any(\r\n    isinstance(x, ak._util.optiontypes + ak._util.indexedtypes) for x in inputs\r\n):\r\n    return None\r\nif uniontype_outside_record and any(\r\n    isinstance(x, ak._util.uniontype + ak._util.indexedtypes) for x in inputs\r\n):\r\n    return None\r\n```\r\n\r\nIn other words, we treat `indexedtypes` as invisible, which aligns with their behaviour in most (all) user-facing routines.\r\n\r\nPerhaps the most explicit behaviour is \r\n```python3\r\nif optiontype_outside_record and not all(\r\n    isinstance(x, ak._util.listtypes + (ak.layout.NumpyArray,)) for x in inputs\r\n):\r\n    return None\r\n```\r\n\r\nBut this aggregates both options under a single flag, and also would mean reverting this PR. Thoughts?",
  "created_at":"2022-03-01T19:31:50Z",
  "id":1055785624,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-7gKY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T19:32:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Furthermore, what is our policy on non-functional unions? E.g. `union[int64, int64]`? \r\nI would _perhaps_ imagine that we want to support these being passed in as input, and defensively simplify them before testing for `UnionArray`. \r\n\r\nIn counterpoint to this, we *do* show them in the type string, e.g.\r\n\r\n```pycon\r\n>>> array = ak.Array(\r\n...     ak.layout.UnionArray8_64(\r\n...         ak.layout.Index8(np.r_[0, 0, 1, 1]),\r\n...         ak.layout.Index64(np.r_[0, 1, 0, 1]),\r\n...         [\r\n...             ak.layout.NumpyArray(np.r_[0,1,2,3]),\r\n...             ak.layout.NumpyArray(np.r_[0,1,2,3]*2),\r\n...         ]\r\n...     \r\n...     )\r\n... )\r\n>>> array.type\r\n4 * union[int64, int64]\r\n```\r\n\r\nSo I think this is *really* a policy question",
  "created_at":"2022-03-01T19:46:19Z",
  "id":1055796531,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-7i0z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T19:46:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I realised that I didn't handle the case of IndexedArray(..., IndexedOptionArray), which we definitely want to support.\r\n\r\nIndexedArray and IndexedOptionArray shouldn't be nested directly within each other. If you're encountering that, then there's a missing `simplify_optiontype` somewhere.\r\n\r\nDo you mean IndexedArray \u2192 ListArray \u2192 IndexedOptionArray or similar?\r\n\r\nOr do you mean that IndexedArrays should be considered equivalent to IndexedOptionArray when deciding whether to `ak.zip` through them? IndexedArrays are supposed to be invisible: it's a Form-level detail, not a Type-level detail. So it would be acceptable to not have any user option for this and always `project` the IndexedArrays away.\r\n\r\nWhy not decide whether to `project` them or collect a common IndexedArray around a RecordArray if all the fields being zipped have the same IndexedArray? Because then, the Form would depend on values observed in data and type-tracers wouldn't be able to predict Forms for Dask. So, whereas I might have considered such an optimization in the past, we can't do that sort of thing anymore because we need Forms to be predictable without looking at data. (For the same reason that compilers make such a distinction between types and values.)",
  "created_at":"2022-03-01T19:51:36Z",
  "id":1055800363,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-7jwr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T19:51:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> But, this makes me wonder if there's more to do here - what about Union types? Does this warrant another flag uniontype_outside_record?\r\n\r\nWe don't need a lot of support for manipulating unions, only as much as users ask for. They turn out to be very limited in how they can be used. It might have been a reasonable choice at the beginning of Awkward Array to have ignored them entirely.\r\n\r\nUnions and records are the two types that can have lots of children. Thinking along these lines would probably make the combinatorics explode. Let's just leave the unions-in-`ak.zip` behavior naive unless forced otherwise.",
  "created_at":"2022-03-01T19:54:47Z",
  "id":1055802736,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-7kVw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T19:54:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Unions whose children are mergeable are not fully valid, in the sense that our functions should not be returning such things to users. If a function is returning such a thing, then it's missing a `simplify_uniontype` call.\r\n\r\n```python\r\n>>> array.layout\r\n<UnionArray8_64>\r\n    <tags><Index8 i=\"[0 0 1 1]\" offset=\"0\" length=\"4\" at=\"0x55d886a12130\"/></tags>\r\n    <index><Index64 i=\"[0 1 0 1]\" offset=\"0\" length=\"4\" at=\"0x55d887155a80\"/></index>\r\n    <content tag=\"0\">\r\n        <NumpyArray format=\"l\" shape=\"4\" data=\"0 1 2 3\" at=\"0x55d886f9d370\"/>\r\n    </content>\r\n    <content tag=\"1\">\r\n        <NumpyArray format=\"l\" shape=\"4\" data=\"0 2 4 6\" at=\"0x55d886dc6f30\"/>\r\n    </content>\r\n</UnionArray8_64>\r\n>>> array.layout.simplify()\r\n<NumpyArray format=\"l\" shape=\"4\" data=\"0 1 0 2\" at=\"0x55d886f8c870\"/>\r\n```\r\n\r\nAfter flip-flopping around on this question in the early days, I've decided it's better to leave expressions like `union[int64, int64]` in the type string because it helps us spot these cases where the `simplify_uniontype` is missing.\r\n\r\nWhy allow unions whose children are mergeable to exist at all? They're needed as intermediate states in calculations. If the UnionArray constructor raised an error when it sees them, there are some operations that would be difficult or impossible to implement. The same is true of `simplify_optiontype` and the set {IndexedArray, IndexedOptionArray, ByteMaskedArray, BitMaskedArray, UnmaskedArray}.",
  "created_at":"2022-03-01T19:59:25Z",
  "id":1055806056,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-7lJo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T19:59:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Is the IndexedArray change significant enough to stop the 1.8.0 release? If this were going into v2, I would say, \"no,\" but it's affecting v1, which people are using. Does it introduce the wrong behavior, which we would then have to backtrack?",
  "created_at":"2022-03-01T20:02:18Z",
  "id":1055808386,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-7luC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T20:02:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for the detailed replies!\r\n\r\n> IndexedArray and IndexedOptionArray shouldn't be nested directly within each other. If you're encountering that, then there's a missing simplify_optiontype somewhere.\r\n\r\nI think this gets to the crux of the issue - do we *want* to support \"quirky\" user-crafted layouts? I *can* construct `IndexedArray\u2192IndexedOptionArray`, so do we want to support that, or blame the user?\r\n\r\nIf we *do* want to support \"quirky\" layouts, then yes, we could also `simplify_optiontype`, although in this instance I think it's simpler to just broadcast _through_ the indexed type, and let the Awkward code handle this.\r\n\r\n> Why not decide whether to project them or collect a common IndexedArray around a RecordArray if all the fields being zipped have the same IndexedArray?\r\n\r\nYes, agreed. That's too brittle! And, for posterity, I haven't proposed it :)\r\n\r\n> Is the IndexedArray change significant enough to stop the 1.8.0 release? \r\n\r\nw.r.t the need to test `indexedtypes`, I think the current state of master is probably *fine* if we assume that Awkward doesn't produce these quirky layouts. However, I also didn't handle virtual arrays (I initially thought about this w.r.t v2, so I didn't consider them). Given that we want to support these, I'll need to materialise any virtual arrays too.",
  "created_at":"2022-03-01T20:43:34Z",
  "id":1055841260,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-7tvs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T20:43:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Well, if the user is constructing things with `ak.layout.*`, then yeah. They could also make an IndexedArray with negative `index` values or a `ListArray` with `stops` that precede `starts`. Maybe we need better documentation (e.g. a nice view-graphic) on which parts are more internal than others: the high-level tier for data analysts (`ak.Array` and `ak.whatever`), the mid-level tier for downstream libraries (`ak.Array.layout` and `ak.layout.*`), and the low-level tier for Awkward developers (anything starting with an underscore, kernels, etc.). If there were only two tiers, then underscore-prefixing would be enough.\r\n\r\nWe're not supporting quirky layouts in the sense of doing reasonable things if we encounter them. This is also related to the \"inside Awkward/outside Awkward\" boundary in #1327. It somehow needs to be a less permeable boundary than there is between any other function calls, though I don't think any language has such a concept built-in. In addition to highlighting that edge in the stack trace, we'd also like to allow \"semi-invalid\" IndexedArray states inside and not outside.\r\n\r\nMaybe that's something the `ak.Array` wrapper could do: when an `ak.Array` is constructed, it could crawl over the whole layout and verify that none of the nodes are \"semi-invalid,\" but that's probably too much processing for something as common as wrapping a layout with the high-level layer.\r\n\r\nMaybe instead, layouts could note whether they're \"semi-invalid\" when they're constructed\u2014just an extra boolean for each node\u2014and `ak.Array` should complain if the top node has such a flag set? (That's something we could only consider in v2, since it would involve a lot of extra C++ code in v1.)\r\n\r\nActually, the closest to this concept of \"temporarily invalid\" that I've seen is in Clojure, which is a strictly functional language that [allows temporarily mutable data within the scope of a function](https://clojure.org/reference/transients).\r\n\r\n> I think the current state of master is probably fine if we assume that Awkward doesn't produce these quirky layouts.\r\n\r\nOkay, we do assume (not just here) that there are no quirky/semi-invalid layouts. So I'll continue with the 1.8.0 release.\r\n\r\nVirtual arrays are another thing. You know, Awkward 0.x had more node types that caused even more troubles than these. It's a slow whittling process of finding a set that play nicely with each other.",
  "created_at":"2022-03-01T21:19:31Z",
  "id":1055868110,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-70TO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T21:19:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Virtual arrays are another thing. You know, Awkward 0.x had more node types that caused even more troubles than these. It's a slow whittling process of finding a set that play nicely with each other.\r\n\r\nI can only imagine.\r\n\r\n> Virtual arrays are another thing. \r\n\r\nDoes this mean that we just ignore virtual arrays here? The user will only notice this is they pass this new flag and all option-containing arrays are virtual.",
  "created_at":"2022-03-01T21:28:13Z",
  "id":1055878206,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-72w-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T21:28:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  This is also related to the \"inside Awkward/outside Awkward\" boundary \r\n\r\nYes, it sounds like we're discussing safe and unsafe layouts which, for the most part, corresponds to \"inside\" or \"outside\" awkward. I think something like this would be quite useful actually. Given that layouts are immutable, we could just use a flag to determine whether the layout was generated by Awkward or by a user. In the latter case, we would need to validate the structure (like packing, but not so concerned about the packing part) whenever Awkward touches such a layout.\r\n\r\nIs this what you're thinking of? ",
  "created_at":"2022-03-01T21:34:06Z",
  "id":1055882638,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-732O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T21:42:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Does this mean that we just ignore virtual arrays here?\r\n\r\nIgnoring them probably means they'll be materialized, right? That was always the problem with VirtualArrays, that the least thing would cause them to materialize unintentionally.\r\n\r\nThis would only come up if someone uses the new `optiontype_outside_record` argument and has VirtualArrays, and if something actually failed in this case, we'd consider that as a bug report. The thing is, it's not going to cause someone's currently working workflow to stop working because their Awkward version updated.\r\n\r\n> Given that layouts are immutable, we could just use a flag to determine whether the layout was generated by Awkward or by a user.\r\n\r\nRight: the value of the flag at the top node tells you whether there are any interior nodes that are not correctly constructed, regardless of whether it was made by us (a function returns without calling `simplify_optiontype`/`simplify_uniontype`) or a user. The flag turns an _O(log n)_ time check (where _n_ is the number of nodes in the tree) into an _O(1)_ check by adding _O(n)_ more flags everywhere: trading time for memory (neither of which scales with the number of elements in an array). With such a thing, we'd find more of our `simplify_optiontype`/`simplify_uniontype` bugs and inform users that they're constructing invalid arrays.\r\n\r\nEvery option-type and IndexedArray constructor would contain:\r\n\r\n```python\r\n    self._quirky = content._quirky or content.is_OptionType or content.is_IndexedType\r\n```\r\n\r\nand the `ak._v2.highlevel.Array` constructor can raise an exception if the given `layout` is quirky.\r\n\r\nI'm not saying that this is something that we should do. As I said, there are other ways to construct invalid arrays by filling Indexes with bad data, and there is no way to check these that isn't _O(N)_ in the length of the array (big _N_). The `check_valid` argument controls whether a `ak._v2.highlevel.Array` performs that expensive check, and I think that checks for quirkiness, too.\r\n\r\nYes, it does: here's `IndexedOptionArray._validityerror`:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/a108ed61894d3ad5fe2e575f38f2c237cd5b330b/src/awkward/_v2/contents/indexedoptionarray.py#L1646-L1675\r\n\r\nThe last test checks for this condition.",
  "created_at":"2022-03-01T22:09:14Z",
  "id":1055908023,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-7-C3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T22:09:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Ignoring them probably means they'll be materialized, right\r\n\r\nOnly if one of inputs is an option. Otherwise, no inputs are an option, and so the record is built with the current set of inputs as contents.\r\n\r\nRE quirkiness (forgive me for a terrible name, I'm going to call it \"trust\" from now on, though it's really just a question of does 'simplify' return the same layout), my motivation is simplifying layout visiting code (I.e most of awkward). If we don't need to handle cases like this and the recent nested option type `is_none` issue (by enforcing rules like an option can never contain another option/index), we make our lives easier. In fact, the `is_none` issue makes this even more desirable. I feel like I've run into this in a few places, come to think of it. \r\n\r\nIndeed this is something we can compute on the fly, but given that most users should never encounter such layouts (awkward should never produce them itself), it makes sense to keep trust around rather than recomputing.\r\n\r\nIt's out of scope for this PR of course, but are you comfortable with imposing such constraints on layouts (I.e you can't just nest any content inside any other)? ",
  "created_at":"2022-03-01T22:41:29Z",
  "id":1055931514,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-8Dx6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T22:45:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Most of this is outside the scope of the PR.\r\n\r\nWe can already _assume_ that option-types and IndexedArrays are not directly nested within each other. It is the responsibility of operations to return valid layouts, not to check incoming layouts for validity, because the latter (defensive programming) would require the same checks to be performed repeatedly.\r\n\r\nReading what you and I wrote on #1193, I'm not sure that I recognized that the error only occurred when `ak.is_none` was given invalid inputs. It might not have been necessary to handle that case. (It's also not a problem that the code is more robust now, and that particular check only has to descend one level of depth beyond the node it's concerned with\u2014the error checking is bounded.)\r\n\r\nIf we're going to check it at all, the internal booleans is the least expensive in time. The flag should be completely transient, not taken as an argument (as nplike is), exposed as a property, pickled, etc. because it can always be recreated. It's like a kind of cache. I think \"trust\" is also an unclear word for describing what it is\u2014how about `redundant_optiontype`?\r\n\r\nThe equivalent `redundant_uniontype` is when any of a UnionArray's `contents` are `mergeable` or are themselves UnionArrays. When passing these flags up, it's not important to distinguish them, just to know that there's an error, so it can be a single boolean (`nested_redundancy`?).",
  "created_at":"2022-03-01T23:33:12Z",
  "id":1055969970,
  "issue":1308,
  "node_id":"IC_kwDODBCWws4-8NKy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T23:33:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1309](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d70bf5a) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `2.06%`.\n> The diff coverage is `38.26%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <97.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (+0.51%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `84.34% <100.00%> (-2.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ3NvcnQucHk=) | `100.00% <100.00%> (+25.00%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_sort.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3NvcnQucHk=) | `100.00% <100.00%> (+25.00%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.63% <0.00%> (+0.15%)` | :arrow_up: |\n| ... and [3 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1309/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-23T12:52:45Z",
  "id":1048751422,
  "issue":1309,
  "node_id":"IC_kwDODBCWws4-gq0-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T12:52:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1310](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (58289da) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `2.07%`.\n> The diff coverage is `37.98%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3VuemlwLnB5) | `75.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <97.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (+0.51%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `84.34% <100.00%> (-2.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ3NvcnQucHk=) | `100.00% <100.00%> (+25.00%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.63% <0.00%> (+0.15%)` | :arrow_up: |\n| ... and [3 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1310/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-23T17:43:16Z",
  "id":1049042287,
  "issue":1310,
  "node_id":"IC_kwDODBCWws4-hx1v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T17:43:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"What JSON data did `x` come from and what Awkward operations get applied to do the `x.map_partitions(len)`? I'm trying to reproduce this with Awkward-only, so that I can narrow down to find out what's putting an `UnknownLength` on the typetracer.",
  "created_at":"2022-02-23T20:39:46Z",
  "id":1049195297,
  "issue":1311,
  "node_id":"IC_kwDODBCWws4-iXMh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T20:39:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"`x` is created by loading [this line delimited JSON data](https://github.com/ContinuumIO/dask-awkward/blob/5a36e9155a6e508099e46834b81d3f7d1b724742/src/dask_awkward/testutils.py#L116-L136) twice. (I have a dumb [utility function](https://github.com/ContinuumIO/dask-awkward/blob/5a36e9155a6e508099e46834b81d3f7d1b724742/src/dask_awkward/testutils.py#L287) that I use to play with some made up data where the string is written to a temp file and loaded; dask_awkward's from_json is lazily calling `ak.from_iter` on the bytes of the temp file).",
  "created_at":"2022-02-23T20:50:44Z",
  "id":1049204553,
  "issue":1311,
  "node_id":"IC_kwDODBCWws4-iZdJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T20:50:44Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"MEMBER",
  "body":"I still don't know how to reproduce your issue, but I did find some cases that resulted in `UnknownLength`, just due to the fact that typetracer arrays were initialized with `UnknownLength` and that propagated up.\r\n\r\nPR #1312 changed the policy to use length information wherever possible, though it will always be the case that some typetracers won't know their lengths. (E.g. `nplike.arange(typetracer_has_no_data[-1])`.) That exposed a lot of places where we were checking lengths\u2014previously, typetracers skipped over the test because `UnknownLength == integer` is always False, but now those checks all need to be guarded by `if nplike.known_shape` (which is False for typetracers; they don't know their shape).\r\n\r\nIt might unblock you, but you need to be prepared for partitions that don't know their lengths.",
  "created_at":"2022-02-23T23:09:05Z",
  "id":1049304973,
  "issue":1311,
  "node_id":"IC_kwDODBCWws4-ix-N",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T23:09:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> It might unblock you, but you need to be prepared for partitions that don't know their lengths.\r\n\r\nOh yes absolutely! Sorry for creating a little confusion here (I now see my wording was pretty bad), I'm not looking to try to keep or know length information, but to have the typetracer usage give back something like `UnknownScalar` when `len` is called. Here's a better description I hope:\r\n\r\nMy reason for calling `x.map_partitions(len)` was experimenting with implementing `dak.num(x, axis=0)`,\r\n\r\n```python\r\ndef num(array, axis=..., ...):\r\n    # in the case where we don't know the divisions we will need to create a task graph\r\n    if axis == 0 and not array.known_divisions:\r\n        all_lens = array.map_partitions(len)\r\n        return dak.sum(all_lens)\r\n    # if we know the divisions this is trivial\r\n    elif axis == 0\r\n        # return a lazy scalar wrapping the value of  array.divisions[-1]\r\n````\r\n\r\nWriting this code led me to create this issue because `array.map_partitions(f)` is calling `f(array.meta)`; here `f` is `len` which caused the `TypeError`. This was just some experimentation which led to something I thought may be a bug. \r\n\r\nEven more details: I went down this route after running into another typetracer issue with `ak.num` (was planning on opening another issue for that so to not spin this one out of control!)",
  "created_at":"2022-02-24T14:27:06Z",
  "id":1049914316,
  "issue":1311,
  "node_id":"IC_kwDODBCWws4-lGvM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T14:27:06Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"MEMBER",
  "body":"> to have the typetracer usage give back something like `UnknownScalar` when `len` is called\r\n\r\nUnfortunately, that's not going to work because Python has forbidden it:\r\n\r\n```python\r\n>>> class Something:\r\n...     def __len__(self):\r\n...         return ak._v2._typetracer.UnknownLength\r\n... \r\n>>> len(Something())\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: 'UnknownLengthType' object cannot be interpreted as an integer\r\n```\r\n\r\nand\r\n\r\n```python\r\n>>> class Something:\r\n...     def __len__(self):\r\n...         return ak._v2._typetracer.UnknownScalar(int)\r\n... \r\n>>> len(Something())\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: 'UnknownScalar' object cannot be interpreted as an integer\r\n```\r\n\r\nActually, the typetracer does return `UnknownLength` when its `len` is called (if it _is_ unknown, and now that will happen less often, but it still can happen), and that's why you get the TypeError.\r\n\r\nThroughout the Awkward codebase, we've replaced `len(something)` with `something.length`, where `length` is a property that might return `UnknownLength`, as a way of avoiding this problem.",
  "created_at":"2022-02-24T14:48:27Z",
  "id":1049934820,
  "issue":1311,
  "node_id":"IC_kwDODBCWws4-lLvk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T14:48:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> Unfortunately, that's not going to work because Python has forbidden it:\r\n\r\n\ud83e\udd26 ah yes huge brain-lapse for me. Had I remembered this I never would have opened this issue! Sorry for this noise",
  "created_at":"2022-02-24T14:59:08Z",
  "id":1049945988,
  "issue":1311,
  "node_id":"IC_kwDODBCWws4-lOeE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T14:59:20Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, and I'm going to keep this open until you tell me your opinion on it. It has some general cleanup, so I'll want to merge something very much like it.\r\n\r\nSo let me know!",
  "created_at":"2022-02-23T23:09:58Z",
  "id":1049305543,
  "issue":1312,
  "node_id":"IC_kwDODBCWws4-iyHH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-23T23:09:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1312](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a310c58) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `1.63%`.\n> The diff coverage is `45.56%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3VuemlwLnB5) | `75.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `59.49% <62.50%> (+0.87%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `87.13% <66.66%> (+0.52%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.52% <70.00%> (+0.10%)` | :arrow_up: |\n| [...ard/\\_v2/operations/structure/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NvbWJpbmF0aW9ucy5weQ==) | `76.92% <70.00%> (+1.92%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <73.68%> (+0.31%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `67.50% <83.33%> (+0.47%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.74% <83.33%> (+0.27%)` | :arrow_up: |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `83.59% <83.33%> (-0.02%)` | :arrow_down: |\n| ... and [36 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1312/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-23T23:21:28Z",
  "id":1049316267,
  "issue":1312,
  "node_id":"IC_kwDODBCWws4-i0ur",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T19:59:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"To do: add a method to \"un-know\" the length of a typetracer (both low-level and high-level), so that a length derived from the first partition is not incorrectly imputed to be the length of each partition (or the array as a whole).",
  "created_at":"2022-02-24T15:04:48Z",
  "id":1049951611,
  "issue":1312,
  "node_id":"IC_kwDODBCWws4-lP17",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T15:04:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> To do: add a method to \"un-know\" the length of a typetracer (both low-level and high-level), so that a length derived from the first partition is not incorrectly imputed to be the length of each partition (or the array as a whole).\r\n\r\n@martindurant and @douglasdavis, this adds a method so that you can\r\n\r\n```python\r\nak._v2.Array(array.layout.forget_length())\r\n```\r\n\r\nto forget a typetracer's length. It only applies one level deep. If need be, we can add a `recursive=True` option, but I assume that this is what you want.\r\n\r\nThis PR will merge after the tests pass.",
  "created_at":"2022-02-24T19:47:58Z",
  "id":1050204529,
  "issue":1312,
  "node_id":"IC_kwDODBCWws4-mNlx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T19:47:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Correct, it's only the outer-most length that we are concerned with. Keeping the other ones is probably useful.",
  "created_at":"2022-02-24T19:49:06Z",
  "id":1050205299,
  "issue":1312,
  "node_id":"IC_kwDODBCWws4-mNxz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T19:49:06Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1313](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9bf16c8) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `2.01%`.\n> The diff coverage is `39.47%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.55% <\u00f8> (+0.13%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3VuemlwLnB5) | `75.00% <\u00f8> (\u00f8)` | |\n| [...ard/\\_v2/operations/structure/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NvbWJpbmF0aW9ucy5weQ==) | `76.92% <70.00%> (+1.92%)` | :arrow_up: |\n| [...wkward/\\_v2/operations/structure/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NvbWJpbmF0aW9ucy5weQ==) | `90.90% <87.50%> (+15.90%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <97.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (+0.51%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `84.34% <100.00%> (-2.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ3NvcnQucHk=) | `100.00% <100.00%> (+25.00%)` | :arrow_up: |\n| ... and [9 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1313/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-24T03:58:22Z",
  "id":1049470216,
  "issue":1313,
  "node_id":"IC_kwDODBCWws4-jaUI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T03:58:22Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1314](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (174258f) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `2.01%`.\n> The diff coverage is `39.47%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.55% <\u00f8> (+0.13%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3VuemlwLnB5) | `75.00% <\u00f8> (\u00f8)` | |\n| [...ard/\\_v2/operations/structure/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NvbWJpbmF0aW9ucy5weQ==) | `76.92% <70.00%> (+1.92%)` | :arrow_up: |\n| [...wkward/\\_v2/operations/structure/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NvbWJpbmF0aW9ucy5weQ==) | `90.90% <87.50%> (+15.90%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <97.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (+0.51%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `84.34% <100.00%> (-2.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ3NvcnQucHk=) | `100.00% <100.00%> (+25.00%)` | :arrow_up: |\n| ... and [9 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1314/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-24T04:42:51Z",
  "id":1049490018,
  "issue":1314,
  "node_id":"IC_kwDODBCWws4-jfJi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T04:42:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1315](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9366698) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `2.01%`.\n> The diff coverage is `39.47%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.55% <\u00f8> (+0.13%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3VuemlwLnB5) | `75.00% <\u00f8> (\u00f8)` | |\n| [...ard/\\_v2/operations/structure/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NvbWJpbmF0aW9ucy5weQ==) | `76.92% <70.00%> (+1.92%)` | :arrow_up: |\n| [...wkward/\\_v2/operations/structure/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NvbWJpbmF0aW9ucy5weQ==) | `90.90% <87.50%> (+15.90%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <97.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (+0.51%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `84.34% <100.00%> (-2.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ3NvcnQucHk=) | `100.00% <100.00%> (+25.00%)` | :arrow_up: |\n| ... and [9 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1315/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-24T04:55:48Z",
  "id":1049494612,
  "issue":1315,
  "node_id":"IC_kwDODBCWws4-jgRU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T04:55:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1316](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6a6c1c9) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `2.01%`.\n> The diff coverage is `39.47%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.55% <\u00f8> (+0.13%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3VuemlwLnB5) | `75.00% <\u00f8> (\u00f8)` | |\n| [...ard/\\_v2/operations/structure/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NvbWJpbmF0aW9ucy5weQ==) | `76.92% <70.00%> (+1.92%)` | :arrow_up: |\n| [...wkward/\\_v2/operations/structure/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NvbWJpbmF0aW9ucy5weQ==) | `90.90% <87.50%> (+15.90%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <97.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (+0.51%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2xheW91dC5weQ==) | `84.34% <100.00%> (-2.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/structure/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ3NvcnQucHk=) | `100.00% <100.00%> (+25.00%)` | :arrow_up: |\n| ... and [9 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1316/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-24T05:13:11Z",
  "id":1049501758,
  "issue":1316,
  "node_id":"IC_kwDODBCWws4-jiA-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T05:13:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1317](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4e143f7) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `1.81%`.\n> The diff coverage is `47.08%`.\n\n> :exclamation: Current head 4e143f7 differs from pull request most recent head 9682cf0. Consider uploading reports for the commit 9682cf0 to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.55% <\u00f8> (+0.13%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3VuemlwLnB5) | `75.00% <\u00f8> (\u00f8)` | |\n| [...wkward/\\_v2/operations/structure/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NhcnRlc2lhbi5weQ==) | `70.58% <64.28%> (-4.42%)` | :arrow_down: |\n| [...ard/\\_v2/operations/structure/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NvbWJpbmF0aW9ucy5weQ==) | `76.92% <70.00%> (+1.92%)` | :arrow_up: |\n| [...wkward/\\_v2/operations/structure/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NvbWJpbmF0aW9ucy5weQ==) | `90.90% <87.50%> (+15.90%)` | :arrow_up: |\n| [...c/awkward/\\_v2/operations/structure/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NhcnRlc2lhbi5weQ==) | `89.34% <89.07%> (+14.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <97.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (+0.51%)` | :arrow_up: |\n| ... and [15 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1317/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-24T11:03:32Z",
  "id":1049742244,
  "issue":1317,
  "node_id":"IC_kwDODBCWws4-kcuk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T18:24:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I forgot to add @martindurant, who suggested this, and @philippemiron, whose example raised it.",
  "created_at":"2022-02-24T16:07:09Z",
  "id":1050012982,
  "issue":1319,
  "node_id":"IC_kwDODBCWws4-le02",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T16:07:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Hi,\r\n\r\nI did this reproducible example:\r\n\r\n```python\r\nimport numpy as np\r\nimport numba as nb\r\nimport awkward as ak\r\n\r\ndef randomList(n, m):\r\n    v = np.zeros(n, dtype='int')\r\n    # n increments by 1\r\n    for i in range(m):\r\n        v[np.random.randint(0, n)] += 1\r\n    return v\r\n\r\nnp.random.seed(42)\r\n\r\nn = 10000\r\nm = 10000000\r\nx = np.random.rand(m)\r\ny = np.random.rand(m)\r\nrowsize = randomList(n, m) # list[n] that sum to m\r\nassert(np.sum(rowsize) == m)\r\n```\r\n\r\n```python\r\nx_ak = ak.unflatten(x, rowsize)\r\ny_ak = ak.unflatten(y, rowsize)\r\n\r\n@nb.vectorize([nb.float64(nb.float64, nb.float64, nb.float64, nb.float64)])\r\ndef distance(x1, x2, y1, y2):\r\n    return np.sqrt((x1 - x2)**2 + (y1 - y2)**2)\r\n```\r\n\r\n\r\n```python\r\n%%timeit\r\n\r\ntt = distance(\r\n    x_ak[:, 1:], x_ak[:, :-1],\r\n    y_ak[:, 1:], y_ak[:, :-1],\r\n)\r\n```\r\n148 ms \u00b1 2.69 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\r\n\r\n```python\r\nidx = np.insert(np.cumsum(rowsize), 0, 0)\r\ndistance_traj = np.zeros_like(x)\r\n```\r\n\r\n```python\r\n%%timeit\r\n\r\nfor i in range(0, n):\r\n    r = np.arange(idx[i], idx[i+1])\r\n    distance_traj[r[:-1]] = distance(\r\n                                x[r[1:]], x[r[:-1]],\r\n                                y[r[1:]], y[r[:-1]]\r\n                            )\r\n```\r\n74.6 ms \u00b1 141 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\r\n\r\nI played a bit with the parameter (m,n) and as you can imagine if n gets larger, than awkward array seems to perform as fast as the python version. For example n=50000, m=10000000, gets 153ms/163ms.\r\n\r\n\r\n",
  "created_at":"2022-02-24T16:44:57Z",
  "id":1050049048,
  "issue":1319,
  "node_id":"IC_kwDODBCWws4-lnoY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-24T16:51:46Z",
  "user":"MDQ6VXNlcjM4NzYyNA=="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1322](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9155422) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `1.67%`.\n> The diff coverage is `48.21%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.55% <\u00f8> (+0.13%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3VuemlwLnB5) | `75.00% <\u00f8> (\u00f8)` | |\n| [...wkward/\\_v2/operations/structure/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NhcnRlc2lhbi5weQ==) | `73.33% <66.66%> (-1.67%)` | :arrow_down: |\n| [...ard/\\_v2/operations/structure/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NvbWJpbmF0aW9ucy5weQ==) | `76.92% <70.00%> (+1.92%)` | :arrow_up: |\n| [...wkward/\\_v2/operations/structure/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NvbWJpbmF0aW9ucy5weQ==) | `90.90% <87.50%> (+15.90%)` | :arrow_up: |\n| [...c/awkward/\\_v2/operations/structure/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NhcnRlc2lhbi5weQ==) | `89.34% <89.07%> (+14.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <97.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (+0.51%)` | :arrow_up: |\n| ... and [21 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1322/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-25T19:14:15Z",
  "id":1051123520,
  "issue":1322,
  "node_id":"IC_kwDODBCWws4-pt9A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-25T19:14:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Not sure this is any different than #1315 ?",
  "created_at":"2022-02-25T19:45:19Z",
  "id":1051156560,
  "issue":1322,
  "node_id":"IC_kwDODBCWws4-p2BQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-25T19:45:19Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"(And I noticed it wouldn't match, as I stared with an all-repos grep, which is why I did that manually. It's particularly bad to specify versions, as setuptools's PEP 517 hook also does this, which can cause conflicts).",
  "created_at":"2022-02-25T19:46:31Z",
  "id":1051162119,
  "issue":1322,
  "node_id":"IC_kwDODBCWws4-p3YH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-25T19:46:43Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"This is completely identical to #1315; sorry I missed it! You can merge either one of these and close the other.",
  "created_at":"2022-02-25T19:52:31Z",
  "id":1051179214,
  "issue":1322,
  "node_id":"IC_kwDODBCWws4-p7jO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-25T19:52:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is a duplicate of #1261, which _does_ have examples of broken behavior.",
  "created_at":"2022-02-26T21:22:34Z",
  "id":1052634422,
  "issue":1324,
  "node_id":"IC_kwDODBCWws4-ve02",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-26T21:22:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Closing because this is a duplicate. Just sending the better title over to #1261.",
  "created_at":"2022-04-15T19:04:32Z",
  "id":1100297039,
  "issue":1324,
  "node_id":"IC_kwDODBCWws5BlTNP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:04:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"When [1.9.0rc2](https://github.com/scikit-hep/awkward-1.0/actions/runs/2193146418) is uploaded, you'll be able to\r\n\r\n```bash\r\npip install 'awkward>=1.9.0rc2'\r\n```\r\n\r\nand\r\n\r\n```python\r\nimport awkward._v2 as ak\r\nak.nanmean(...)\r\n```",
  "created_at":"2022-04-20T02:12:00Z",
  "id":1103381403,
  "issue":1325,
  "node_id":"IC_kwDODBCWws5BxEOb",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-04-20T02:12:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1326](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (859daf9) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/5613d4401acefb1747a70e72312a60585366adfe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5613d44) will **decrease** coverage by `1.63%`.\n> The diff coverage is `48.21%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.52% <\u00f8> (+0.10%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_unzip.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3VuemlwLnB5) | `75.00% <\u00f8> (\u00f8)` | |\n| [...wkward/\\_v2/operations/structure/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NhcnRlc2lhbi5weQ==) | `73.33% <66.66%> (-1.67%)` | :arrow_down: |\n| [...ard/\\_v2/operations/structure/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NvbWJpbmF0aW9ucy5weQ==) | `76.92% <70.00%> (+1.92%)` | :arrow_up: |\n| [...wkward/\\_v2/operations/structure/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NvbWJpbmF0aW9ucy5weQ==) | `90.90% <87.50%> (+15.90%)` | :arrow_up: |\n| [...c/awkward/\\_v2/operations/structure/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NhcnRlc2lhbi5weQ==) | `89.34% <89.07%> (+14.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <97.50%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (+0.51%)` | :arrow_up: |\n| ... and [28 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1326/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-02-28T14:07:03Z",
  "id":1054291911,
  "issue":1326,
  "node_id":"IC_kwDODBCWws4-1zfH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T10:02:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, please drop references to the `extend` method, since that's an old one that was _removed_. It used to have a different meaning than just calling `append` many times, now it wouldn't, if it were to exist.",
  "created_at":"2022-02-28T16:56:15Z",
  "id":1054460380,
  "issue":1326,
  "node_id":"IC_kwDODBCWws4-2cnc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-02-28T16:56:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I should have realised that it was just as likely that it was _removed_ as added!",
  "created_at":"2022-03-01T09:54:45Z",
  "id":1055239025,
  "issue":1326,
  "node_id":"IC_kwDODBCWws4-5atx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T09:54:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"How error contexts are implemented:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/813b46234f727e271a5e50e3df7b5195b874d522/src/awkward/_v2/_util.py#L98-L302\r\n\r\nHow they are used:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/813b46234f727e271a5e50e3df7b5195b874d522/src/awkward/_v2/operations/convert/ak_to_numpy.py#L35-L52\r\n\r\nSimilarly, for slicing:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/813b46234f727e271a5e50e3df7b5195b874d522/src/awkward/_v2/contents/content.py#L474-L478\r\n\r\nThis replaces some gunky exception-chaining in the main branch (below), which I previously wasn't happy with, as it complicated the stack trace.\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/963b9f4b2530e8a56f84fadec39fefda4c26d110/src/awkward/_v2/contents/content.py#L569-L618\r\n\r\nNow we don't do exception-chaining within the Awkward library (we do still try-catch errors from other libraries, and of course StopIteration); it only raises the exception at the site of the error\u2014it just has more information when it gets there.",
  "created_at":"2022-03-01T02:48:46Z",
  "id":1054937292,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-4RDM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T02:48:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1327](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f962184) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.33%`.\n> The diff coverage is `50.22%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `90.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2JpdG1hc2tlZGZvcm0ucHk=) | `78.04% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2J5dGVtYXNrZWRmb3JtLnB5) | `77.33% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `79.62% <0.00%> (-0.38%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| ... and [141 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1327/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-01T03:09:55Z",
  "id":1054951352,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-4Ue4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T21:16:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Can you show what they look like now (as in \"before\" the pr) for comparison? This seems like a lot of specialized, custom handling that is fragile & likely to be hard to remember to include in the future (unless you implement a custom flake8[^1] or pylint check, for example). I'm not sure I know exactly what this is solving - is it solving several things? This might be the best solution, but want to make sure other options have been exhausted. :)\r\n\r\nNote that error handling is changing a lot in Python 3.11; they have added a new way to add a note field (`.add_note()` on `BaseException` that fills `__note__: Tuple[str, ...]`), and they are also introducing error groups. IPython and Rich both implement a \"hide\" feature to hide parts of the traceback, too. You also have access to chained exceptions, etc. Just want to make sure this is really the best way to implement whatever you are trying to solve, and that it won't muddle with things like the ability to use a traceback formatter like Rich.\r\n\r\n[^1]: I believe this is actually pretty easy, FYI.",
  "created_at":"2022-03-01T03:52:41Z",
  "id":1054977905,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-4a9x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T04:17:07Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'd also benefit from learning a bit more about the wider context here, and wanted to write a comment rather than just +1 :)",
  "created_at":"2022-03-01T09:36:21Z",
  "id":1055217432,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-5VcY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T09:36:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> This seems like a lot of specialized, custom handling that is fragile & likely to be hard to remember to include in the future\r\n\r\n### Implementation\r\n\r\nAvoiding fragility is a high priority. This implementation doesn't adjust the stack trace in any way\u2014all it does is it constructs the error message in a standardized way, in a central place. I'll expand on the wider motivation below, but the thing we're trying to have happen is for the error message, however deeply in the Awkward codebase it occurs, say something in its text about the `ak.something`/slice/ufunc that it came from, since this is the most useful information to a user of Awkward Array or developer of a library on top of Awkward Array. For Awkward developers, the full stack trace is still there, unmodified, so it's just as useful as it's ever been for debugging Awkward. It's just that the last message emphasizes information for Awkward users.\r\n\r\nFrom the sound of the word \"error groups,\" core Python may be addressing the same thing: not all parts of the stack trace are equally important to all users/developers. In particular, the boundaries between calls within a library and calls between libraries are important in general, not just Awkward. When that feature becomes available, it would hurt nothing to use both.\r\n\r\nSimilarly, `.add_note()` could structure this block text message in a better way, and with our error-handling being centralized by this implementation, that would be easier to add in the future.\r\n\r\n### Previous implementations\r\n\r\nUsers' problems detangling their indexing errors from Awkward internals started in Awkward 0, and one of the reasons I was looking forward to putting the internals into C++ in Awkward 1 was to hide a lot of it from the stack trace. My thinking then was that the Python stack trace would terminate on a user call, like `my_array[my_complicated_slice]` with the user's line number not far from the bottom, making it easier to pick out. As it turned out, we did a lot of the implementation of Awkward 1 in Python anyway, and that which was done in Awkward 0 wasn't an asset because there was _no_ debugging information for us developers. Later, I added the `__LINE__` to every C++ exception to get more of this debugging information, walking backward on that initial hope.\r\n\r\nMeanwhile, I'm still hearing that\r\n\r\n```python\r\nak.Array([[1, 2, 3], [], [4, 5]])[[[True, False, True], [], [False, True, True]]]\r\n```\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/highlevel.py\", line 991, in __getitem__\r\n    tmp = ak._util.wrap(self.layout[where], self._behavior)\r\nValueError: in ListArray64 attempting to get 2, index out of range\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.8.0rc3/src/cpu-kernels/awkward_ListArray_getitem_jagged_apply.cpp#L43)\r\n```\r\n\r\nis not useful information for users to figure out their indexing problems. At the depth where the indexing error actually occurs, we don't know what the original slice/`ak.whatever`/ufunc was, which is what they really want to know.\r\n\r\nIn Awkward 2, I made slice errors look like this:\r\n\r\n```python\r\nak._v2.Array([[1, 2, 3], [], [4, 5]])[[[True, False, True], [], [False, True, True]]]\r\n```\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/highlevel.py\", line 1018, in __getitem__\r\n    out = self._layout[where]\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/content.py\", line 476, in __getitem__\r\n    return self._getitem(where)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/content.py\", line 582, in _getitem\r\n    return self._getitem(layout)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/content.py\", line 573, in _getitem\r\n    return self._getitem((where,))\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/content.py\", line 514, in _getitem\r\n    out = next._getitem_next(nextwhere[0], nextwhere[1:], None)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/regulararray.py\", line 590, in _getitem_next\r\n    down = self._content._getitem_next_jagged(\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/listoffsetarray.py\", line 324, in _getitem_next_jagged\r\n    return out._getitem_next_jagged(slicestarts, slicestops, slicecontent, tail)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/listarray.py\", line 352, in _getitem_next_jagged\r\n    self._handle_error(\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/contents/content.py\", line 212, in _handle_error\r\n    raise ak._v2._util.error(ValueError(message))\r\nValueError: cannot slice\r\n\r\n    <Array [[1, 2, 3], [], [4, 5]] type='3 * var * int64'>\r\n\r\nwith\r\n\r\n    [[True, False, True], [], [False, True, True]]\r\n\r\nError details: index out of range while attempting to get index 2 (in compiled code:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/1.8.0rc3/src/cpu-kernels/awkward_ListArray_getitem_jagged_apply.cpp#L43)\r\n```\r\n\r\nbut I did it by introducing `NestedIndexError`, which `Content.__getitem__` catches, annotates as an `IndexError`, and re-raises. That's what's currently in `main`, and I don't like what it does to the stack trace\u2014when debugging, we have to follow the chained exception. Catching other library's exceptions is a useful tool because we can't control what other libraries do, and maybe some of the things they think should stop the world shouldn't. But _within_ a library, there's got to be a better way to do it.\r\n\r\nBesides, some uses of the internal `Content._carry` method were part of slicing and some weren't, so they took a third argument to indicate whether they should raise `NestedIndexError` or not. That was ugly.\r\n\r\nBesides besides, some slicing errors still weren't raising `NestedIndexError` and weren't participating in this error-message handling.\r\n\r\nBesides besides besides, this only addresses slicing, not `ak.whatever` or ufuncs.\r\n\r\n### This implementation\r\n\r\nThe problem is that we have information at an important level of granularity when we first enter an Awkward operation (slice, `ak.whatever`, ufunc) from the outside (end-user or downstream library call) and we want that information in the final error message. I had considered passing that information down in an `error_context` object\u2014but that would mean that _every internal function needs another argument_, which seemed like a bad idea.\r\n\r\nOne feature of this \"outside Awkward\" \u2192 \"inside Awkward\" concept is that it is global (per thread). A stack trace can only pass through such a boundary once. If an internal Awkward function calls another public API function, it doesn't count as another boundary cross\u2014only the first one is the one we want to report. Although I avoid global state in almost every situation, this seems like the one-in-a-hundred exception. The global state is in `ErrorContext._slate`, a class object attribute, and this is a `threading.local()` object.\r\n\r\nWhen the boundary is crossed the first time (`ErrorContext._slate` is clean), it gets set with the information about that boundary crossing. If we ever enter a public API from another internal function (not forbidden, but I'd try to avoid it), the slate is left as-is. It's important to clean the slate after the public API call, and that is implemented using a context manager, so that all public API calls look like this:\r\n\r\n```python\r\ndef public_ak_function(args):\r\n    with ak._v2._util.SomeErrorContext(args):\r\n        do_the_function(args)\r\n```\r\n\r\nThe logic that I've described about crossing the boundary only once is implemented by the context manager.\r\n\r\nThe things that need to be adhered to are\r\n\r\n   1. public API functions should use the context manager on entry\r\n   2. internal exceptions should be wrapped with `ak._v2._util.error(ExceptionConstructor(...))` to postprocess the exception messages in a centralized place\r\n   3. it would be nice to not have internal Awkward functions call Awkward API functions, but not necessary as the context manager takes care of that.\r\n\r\nIf any of these rules are not followed, nothing disastrous happens\u2014we just don't get the pretty error message. Rule (1) isn't hard to enforce via code review, and any fly-by contributors who add a new function by copying an existing one would copy that context manager along with the rest of the formalism (like the way that all of these functions go in a particular submodule and are exposed to `ak.*` in a standardized way). Rule (2) could be hard to enforce by eye (bare exceptions would be hard to spot), but not hard to write an AST-checker for. I don't know how to write flake8 checkers, but I can write a Python AST crawler that would do it if you want to collaborate. There might be a few other local Awkward rules that we're following informally that can get formalized in this way.\r\n\r\n> I'm not sure I know exactly what this is solving - is it solving several things?\r\n\r\n### Motivation\r\n\r\nThis is an important section, but I've just run out of time to write it. I'll follow up with another comment here in a few hours.\r\n",
  "created_at":"2022-03-01T13:57:37Z",
  "id":1055467644,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-6Sh8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T14:17:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Quick comment:\r\n\r\n> flake8 checkers, but I can write a Python AST crawler\r\n\r\nThat's exactly what they are. :) - https://www.youtube.com/watch?v=OjPT15y2EpE \r\n\r\nIt seems like at least the post-error message could be added via `sys.excepthook`; and maybe computing the truncation of the stack as well. But then you'd not mix well with other error formatters (IPython, Rich) - but those both support frame hiding.",
  "created_at":"2022-03-01T14:45:05Z",
  "id":1055520221,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-6fXd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T14:45:05Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"(I still intend to give a fuller motivation here.)\r\n\r\n> It seems like at least the post-error message could be added via `sys.excepthook`; and maybe computing the truncation of the stack as well. But then you'd not mix well with other error formatters (IPython, Rich) - but those both support frame hiding.\r\n\r\nYeah, that's what would make me uncomfortable: modifying something that could interact poorly with IPython, Rich, or even some plain Python modes that I don't know about. What we have here is just plain exception-throwing, without even as much as chaining.",
  "created_at":"2022-03-01T16:30:51Z",
  "id":1055626910,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-65ae",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T16:30:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"## On this PR:\r\nMy understanding of what you've written is:\r\n- When high-level operations fail (`ak.xxx`, `array[...]`), the error messages are currently hard to read (especially for beginners)\r\n- This PR adds machinery to make the raised Exception more readable by rewriting the content to include mention of the top-level context.\r\n\r\nI can see the benefit to solving the problem of traceback clarity. Tools like `rich` and `IPython` install their own traceback formatters, and can shorten long tracebacks, but don't really tackle the problem of \"the last exception should be the most relevant\". For experienced users of Awkward, maybe the leaf exception *is* the most important, but understanding why some kernel failed is not *as* important as \"this slice failed\".\r\n\r\nI want to prefix this with \"I don't have a good idea of the best solution\". What we're trying to solve here isn't just an Awkward problem (hence PEP-678)! My gut instinct is that this is a \"Python problem\" rather than a \"library problem\", because unless users are doing something awful with `repr` on the exception objects, this *shouldn't* affect the runtime behaviour.\r\n\r\n## Implementation Details\r\nI'm not sure whether the exception-rewriting solution is ideal, though. On the one hand, it's a thorny issue - without PEP 678, there is no way to modify the printed exception without either\r\n1. Creating a generic `AwkwardError` exception, and raising it from the actual error.\r\n2. Creating a new exception of the same type, and modifying the message\r\n3. Creating a mixin `AwkwardExplainedException`, and overriding the `repr`/`str`\r\n4. Installing a custom traceback handler\r\n\r\n(1) is the most foolproof - we explicitly impose an error signature of `AwkwardError` on all operations. However, this is pretty terrible UX - now users need to unwrap exceptions if they want to handle them. \r\n\r\nThe issue with rewriting (2) is that it makes some assumptions:\r\n- the `args` value of the exception can be modified & types changed\r\n- the metadata associated with the exception is not important\r\n\r\nMaybe within the context of builtin exceptions these assumptions are acceptable, but this feels slightly fragile if, e.g. an external library implements their own exceptions (e.g. a custom container that raises an `IndexError` subclass) that are ultimately raised inside the awkward context. \r\n\r\n(3) might be slightly more robust - we can effectively copy `args` and `__dict__` to make fewer assumptions about the underlying exception than (2), but it's still pretty unpleasant to be creating a new exception object.\r\n\r\n(4) would be the \"safest\", but pretty incompatible with other tools.\r\n\r\nI suppose the questions that come to mind are:\r\n1. How important is this vs the status quo?\r\n2. Should this be opt-in/opt-out?\r\n\r\nIf the answer to (1) is \"very important\", then I think one of \"duck-like wrapper exception\" or \"re-create exception\" are the most foolproof for most users. \r\n\r\nWith the existing PR, I wonder whether `ak._util.error` should leave the responsibility of the exception formatting to the context object rather than switching with `isinstance` inline?\r\n\r\nIn addition to _how_ we attach this information to exceptions, there is also the associated change to each function that wants to implement this behaviour. My first impression is that we need a lot of boilerplate code in *every* Awkward function in order to handle this. Would it be acceptable just to create a decorator that captures the args and wraps any raised exceptions? I.e.\r\n```python3\r\ndef nice_function(func):\r\n    @wraps(func)\r\n    def wrapper(*args, **kwargs):\r\n        try:\r\n            return func(*args, **kwargs)\r\n        except BaseException as exc:\r\n            sig = signature(func)\r\n            params = sig.bind(*args, **kwargs)\r\n            parts = [\"(\"]\r\n            for p in params.args:\r\n                parts.append(repr(p))\r\n            for k,v in params.kwargs.items():\r\n                parts.append(f\"{k}={v!r}\")\r\n            parts.append(\")\")\r\n            call_msg = \"\".join(parts)\r\n            msg = f\"Call to {func.__qualname__}{call_msg} failed!\"\r\n            raise annotate(exc, msg)\r\n    return wrapper\r\n    \r\n@nice_function\r\ndef sort(...):\r\n    layout.sort(...)\r\n    \r\n```\r\nExcuse the ugly pseudo code, this is just from my playing around with (3)\r\n\r\n## Looking Forward\r\nSo, I can see the benefit of this PR despite being  slightly reluctant to start modifying exceptions (even if we are most likely the same entity that actually instantiated said exception).\r\n\r\nAnother thought that occurs to me is that PEP 678 is a clear standard that would mostly solve this problem (in my opinion). Maybe, instead of rolling our own solution, we could encourage Rich & IPython to support 678 (once it is accepted) without testing the Python version. Then, Awkward could use `exception.__dict__` to set `__notes__` and work on old Python versions that use relatively recent IPython or Rich. This would only leave pure-Python unsupported, which we could perhaps handle separately, with our own opt-in handler? This is not foolproof either - someone *could* raise an exception that sets `__slots__`.\r\n\r\nMy purist suggestion is just to use PEP 678 and let users of newer Python's benefit, but I can see that this is probably a rather extreme suggestion :wink: ",
  "created_at":"2022-03-01T17:43:51Z",
  "id":1055694382,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-7J4u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T17:52:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think we can install an exception handler only if it's set to the default, which would cover the pure Python case. The \"poor interaction\" with other tools that have exception handlers is just because you'd have to pick one, they can't be combined. I'd _expect_ libraries would pick up support for this for all Python versions. I didn't realize this was pulled out of [PEP 654](https://www.python.org/dev/peps/pep-0654) into it's own PEP, though I remember the worries about it being added to an existing accepted PEP.\r\n\r\nI'm rather sad that IPython's `__tracebackhide__` hasn't made it into a PEP.",
  "created_at":"2022-03-01T18:01:16Z",
  "id":1055709286,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-7Nhm",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-03-01T18:01:16Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"On the motivation (which I have yet to write), better error messages, which have been a recurrent issue throughout Awkward's history and a general library problem, is not the only issue. The other motivation\u2014the \"why now?\" question\u2014has to do with #1321, handling errors if Awkward functions in a GPU context are asynchronous. Then a user error in `ak.whatever` could be raised long after `ak.whatever` has returned, and @swishdiff and I were thinking about how to tell users that their inputs to `ak.whatever` were wrong when `ak.whatever` isn't even in the call stack. I had an idea about how to support async Awkward as an alternate mode of operation, and this error tracking is a prerequisite for that.\r\n\r\n(If we keep this PR open now to discuss it, then I'll have to develop the async prototype as a PR into this PR.)\r\n\r\n-------\r\n\r\n@agoose77, you have some great points, but in a few detail points I think you're assuming this does more than it does.\r\n\r\n> Maybe within the context of builtin exceptions these assumptions are acceptable, but this feels slightly fragile if, e.g. an external library implements their own exceptions (e.g. a custom container that raises an `IndexError` subclass) that are ultimately raised inside the awkward context.\r\n\r\nIn this implementation, if our code calls a third-party library and that library raises an exception, it will not be rewritten. This annotates our own exceptions only, and all of the exceptions that we raise have no associated data other than the message. (I had the pleasure of reviewing them all last night!)\r\n\r\nIdeally, our code doesn't use much from third-party libraries (only when we're converting or interoperating with them, such as `ak.to_pandas` or JAX autodiff), and when we do use third-party libraries, NumPy mostly, we check conditions that would lead to exceptions (within reason). For an example of the latter, if we do some complex NumPy gymnastics to implement an Awkward operation\u2014let's say one of the steps is to slice an array by an array\u2014we probably don't want the NumPy exception to pass to the user as-is, since that exception would be complaining about indexes being out of bounds for intermediary arrays that users would ordinarily never see.\r\n\r\nSo the code that we've already written generally checks to ensure that NumPy isn't going to be raising exceptions, and those checks raise ValueErrors, IndexErrors, etc. with Awkward-meaningful messages. This PR replaces\r\n\r\n```python\r\nif check_for_bad_condition(intermediary_array):\r\n    raise ValueError(\"your Awkward input is invalid in such-and-such a way\")\r\nelse:\r\n    do_calculation(intermediary_array)\r\n```\r\n\r\nwith\r\n\r\n```python\r\nif check_for_bad_condition(intermediary_array):\r\n    raise ak._v2._util.error(ValueError(\"your Awkward input is invalid in such-and-such a way\"))\r\nelse:\r\n    do_calculation(intermediary_array)\r\n```\r\n\r\nIf `do_calculation` can raise an exception that we don't know about because it's a third-party exception, then before this PR it would be confusing to users and after this PR it would be confusing to users and also not get a banner with the `ak.whatever` function arguments. In either case, it's something that I hope users would report as a bug that we could fix by checking for the bad condition. The value of the banner is to tell users how to fix their code. If they don't get a banner, then the problem is not in their code.\r\n\r\n> With the existing PR, I wonder whether `ak._util.error` should leave the responsibility of the exception formatting to the context object rather than switching with `isinstance` inline?\r\n\r\nYou're totally right about that\u2014I agree it would be cleaner to do so. But it's also centralized code that can be fixed on one spot. Most of the changes in this PR are all the individual `raise Something(...)` to `raise ak._v2._util.error(Something(...))`.\r\n\r\nAlso, notice that there's an `ak._v2._util.indexerror(arguments, of, indexerror)` function, which is replacing the try-except of the old `NestedIndexError`. I was going to write a function for each type of error (`ValueError`, `IndexError`, `np.AxisError`), taking the arguments of each and building it in the function, rather than rewriting them after they've been built. But every exception we raise is constructed with the error message as its only argument. If we ever deal with exception types that have more complex arguments, we can create a handler function for that, just as we have a special one for `indexerror`.\r\n\r\n> My first impression is that we need a lot of boilerplate code in _every_ Awkward function in order to handle this. Would it be acceptable just to create a decorator that captures the args and wraps any raised exceptions?\r\n\r\nI'd rather have boilerplate inside our codebase than have functions modify our functions. Having everything be visibly laid out, so you can see what it all does, is better for maintenance, though understandably more effort to type. (Parts of Awkward 0 were decorator-based, and it caused more harm than good. We'd want to be careful with that.) Also, the decorator you describe would annotate all exceptions, chaining them with the try-except, and I only _intended_ to annotate the exceptions we raise with Awkward-meaningful messages in them.\r\n\r\n> This is not foolproof either - someone could raise an exception that sets `__slots__`.\r\n\r\nI think this is illustrating the main thing: we're talking about annotating exceptions we raise, and we know how we raise them. I'd like to backtrack from this generality.",
  "created_at":"2022-03-01T18:56:46Z",
  "id":1055754914,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-7Yqi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T18:56:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> but in a few detail points I think you're assuming this does more than it does.\r\n\r\nRight, I crossed some wires in my head w.r.t _where_ this PR actually calls `ak._util.error`. My mistake!\r\n\r\nGiven your explanations, it seems like we're not worrying about the case where an unexpected exception is raised - we're only worried about exceptions that are explicitly raised in the Awkward code-path (known ahead-of-time). That simplifies the scope of the problem a bit\r\n\r\nThis is a big PR, and I am going in circles trying to write out a full reply :face_with_head_bandage: \r\n\r\nI have two separate axes of concern:\r\n- How we set the exception context\r\n- How we annotate the exceptions\r\n\r\nGiven the explicit, opt-in approach, I think the rewriting approach here is the simplest. `ak._util.error` can make assumptions about exceptions it receives. When/if PEP 678 lands, it looks like all we'd be doing is using `__notes__` instead of overwriting the exception message. That's a much less important change.\r\n\r\nThis just leaves the boilerplate of the exception context. With\r\n```python3\r\nwith ak._v2._util.OperationErrorContext(\r\n    \"ak._v2.from_arrow_schema\",\r\n    dict(schema=schema),\r\n):\r\n    return _impl(schema)\r\n```\r\nwhat this is mainly doing AFAICT is capturing the arguments to the high-level operation, so that the formatted traceback can guide the user as to what went wrong. This is quite similar in motivation to Rich's `locals` rendering in tracebacks, but targetted for Awkward.\r\n\r\nIf we want to implement this (if we're dealing with async stuff, I'm guessing this becomes more important), then I would think that a simple decorator would remove most of the boilerplate:\r\n```python\r\ndef operation(func):\r\n    signature = inspect.signature(func)\r\n    @wraps(func)\r\n    def wrapper(*args, **kwargs):\r\n        context = signature.bind_partial(*args, **kwargs)\r\n        context.apply_defaults()\r\n        push_context(func.__module__, func.__name__, context)\r\n        try:\r\n            return func(*args, **kwargs)\r\n        finally:\r\n            pop_context()\r\n        \r\n    return wrapper\r\n```\r\n\r\nIs this something you'd be on board with?\r\n\r\nRE \r\n>  handling errors if Awkward functions in a GPU context are asynchronous\r\n\r\nThis immediately sounds like `ExceptionGroup`s (similar to Trio's `MultiError`), but it's late and the topic probably warrants a longer reply :)\r\n\r\n",
  "created_at":"2022-03-01T21:24:55Z",
  "id":1055872578,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-71ZC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T21:57:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> This is quite similar in motivation to Rich's `locals` rendering in tracebacks, but targetted for Awkward.\r\n\r\nI'm not surprised that it's been done before. We may want to take control of the `repr` of `behavior`, since this is either `None` or a dict with dozens or hundreds of entries. Right now, the `repr` of all arguments are truncated at 80 characters.\r\n\r\n> If we want to implement this (if we're dealing with async stuff, I'm guessing this becomes more important), then I would think that a simple decorator would remove most of the boilerplate:\r\n> \r\n> ...\r\n> \r\n> Is this something you'd be on board with?\r\n\r\nThis one, yes! The boilerplate of raising all exceptions like `raise ak._v2._util.error(ActualException(...))` is better than the alternative of decorating every function in our codebase with something that catches and reraises exceptions. However, this one would only decorate high-level operations (all the `ak.*` functions), which should be called out as being special.\r\n\r\nI'm assuming that a decorator like this would then make them look like\r\n\r\n```python\r\n@ak._v2._util.operation\r\ndef whatever(arguments, with_some=\"defaults\"):\r\n    \"\"\"\r\n    Really long docstring.\r\n    \"\"\"\r\n    return _impl(arguments, with_some)\r\n```\r\n\r\nAnother reason that I had for wanting to move the implementations out to `_impl` is because pytest prints the whole function source up to the error, and that includes the really long docstring. I was looking forward to it only printing source code and letting the operation functions be primarily holders of docstrings. But I could go either way on that.",
  "created_at":"2022-03-01T21:47:15Z",
  "id":1055892410,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4-76O6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T21:47:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"How does everyone feel about this now? Let me know if you object to merging it in its current state. (Silence is assumed to be consent!)\r\n\r\n@agoose77's idea of using a decorator to reduce boilerplate in src/awkward/_v2/operations/**/*.py is a good one, but I think it can be applied at a later date. The harder-to-merge part is all of the `ak._v2._util.error` function calls in the codebase. I'd like to merge this PR so that there will be fewer adjustments to other PRs that touch the same lines.\r\n\r\n@henryiii suggested writing a flake8 check for the `ak._v2._util.error` function calls. I'll write an AST-crawler and post it here before I forget, so that we'll have a foot-in-the-door toward writing that flake8 check.\r\n\r\nWith this PR merged into main, #1331 can be turned to target main instead of this branch.\r\n\r\nOh! And I never did write up that motivation in terms of delayed processing. I'll do that now because having #1331 to point to would make it easier to talk about.",
  "created_at":"2022-03-03T16:01:13Z",
  "id":1058196928,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_Es3A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T16:01:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> @henryiii suggested writing a flake8 check for the `ak._v2._util.error` function calls. I'll write an AST-crawler and post it here before I forget, so that we'll have a foot-in-the-door toward writing that flake8 check.\r\n\r\nThis does it:\r\n\r\n```python\r\nimport ast\r\n\r\nparsed = ast.parse(open(filename).read())\r\n\r\nfor node in ast.walk(parsed):\r\n    if isinstance(node, ast.Raise):\r\n        if not isinstance(node.exc, ast.Call) or ast.unparse(node.exc.func) not in (\r\n                \"ak._v2._util.error\", \"ak._v2._util.indexerror\"\r\n        ):\r\n            raise ValueError(\r\n                f\"{filename} line {node.lineno} needs exception to be wrapped in ak._v2._util.*error\"\r\n            )\r\n```\r\n\r\nalthough there should be a way of opting-out of some files (src/awkward/_v2/_connect/numba/**/*.py are excluded because those errors are not in Awkward operations and Numba does its own manipulation of error messages), and there should be a way to opt-out of individual lines, like with a `# noqa: ???` number.",
  "created_at":"2022-03-03T17:10:15Z",
  "id":1058273367,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_E_hX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T17:10:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"## Motivation (as promised)\r\n\r\nApart from the long-standing issues with appropriateness of error messages for users, there's a new one regarding eagerness/laziness and error messages. @swishdiff and I talked about CUDA occupancy at length on Monday: the CUDA backend exists only for speeding things up, so keeping a GPU fully occupied is its raison d'\u00eatre. Picking a concurrency model is not a premature optimization. We expanded this conversation to potential Awkward-CUDA users in Discussion #1321.\r\n\r\nThe details are on that Discussion, but two things came out: (1) users are already dissatisfied with error messages and find the primary value to be one of locating the line number in their code, and (2) Awkward's current eagerness strategy would ensure that either the CPU is busy or the GPU is busy, never both. That's bad.\r\n\r\n(There's a secondary part to that story that @swishdiff brought up, that in addition to keeping both the CPU and GPU busy, you also have to keep all the processors on the GPU busy. With our strict data dependencies between subsequent Awkward-kernels in an Awkward-operation and unknown data dependencies between Awkward-operations (it depends on user code), it would be very difficult for us to run multiple Awkward-kernels, and hence CUDA-kernels, at the same time. The only way we could do this well is by letting the user put independent work on CUDA streams, so everything I say below about a \"background worker\" applies _per CUDA stream_.)\r\n\r\nWe need to run our Awkward-kernels in a particular order to handle data dependencies, but the result does not need to be ready when an operation like `ak.whatever` returns control to Python. It needs to be ready when a user looks at values in the array. Ideally, we want all of the work to happen in the same order that it would happen in eager, CPU-bound Awkward Array, but let the evaluation lag behind the user's thread. That way, CUDA-kernel calls can be \"packed tightly,\" since there would be a workload waiting for it, a queue filled by the user thread because the user thread didn't have to wait for numeric calculations to finish.\r\n\r\nThe CUDA tools we looked at for doing this are (a) unaware of the Python steps we need to perform between CUDA-kernels and (b) don't seem to apply to `cudaMalloc`, which is every other step in our workflow. That's okay, we can do the \"lagging behind\" in Python, and moving it there frees us to use all the blocking CUDA calls we want. I would call this \"asynchronous,\" but after a deep-dive into Python's `asyncio`, I see that Python's use of \"asynchronous\" is different. We don't want to do coroutines because the order of operations matters very much, and this order isn't entirely encoded in functional dependencies, either, since kernels act purely through side-effects.\r\n\r\nBelow is (the beginning of) an implementation of a \"lagging\"/\"foot-dragging\"/\"delayed\" executor as an `nplike`. The idea is that the NumPy-like arrays in the Indexes and NumpyArrays of some Awkward Arrays can be built out of futures. The array object's data might still be in the process of being computed, and it would have to wait for that computation to finish if and only if you ask for that information. Values in the array are always subject to delay, the shape of the array is sometimes subject to delay (it might depend on a value in another, uncomputed array), but the dtype and such information as number of dimensions and contiguousness are always known.\r\n\r\nThis delayed array is similar to v1's VirtualArray, except that it is low-level (Indexes and buffers, not a Content node), it's completely invisible to users, has no evictable cache (it runs once and fills a permanent result), and would never be used for I/O. Its only intended use is for CUDA, but we can separate that part out and just have this `nplike` point to a `nested_nplike`, which can be NumPy or CuPy.\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/22b8184da46bc50b35a8b31dc4166c16bad76cf2/src/awkward/_v2/_delayed.py#L12-L150\r\n\r\nThe threading model is important to get right and keep simple, since \"hanging\"/\"deadlock\" is as hard to debug as segfaults. The worker has three states:\r\n\r\n  1. waiting for a task\r\n  2. processing a task\r\n  3. a task raised an exception, worker is dead\r\n\r\nState 1 \u2192 2 when a task appears on its queue, 2 \u2192 1 when it completes, and 2 \u2192 3 if it raises an exception. An exception in a task ruins the worker (3 is an absorbing state); a new worker needs to be made to replace it. A future has three states:\r\n\r\n  1. computation in progress and worker is not dead\r\n  2. computation is done and it is a good value\r\n  3. computation failed or a previous task in the sequence failed\r\n\r\nAttempting to view the `result` in state 1 blocks until it leaves that state. State 1 can go to 2 or 3, which are both absorbing states. In state 1, `result()` returns the result, and in state 2, `result()` raises the exception from the first task that failed.\r\n\r\nIf anything goes wrong in a task, it will be reported on the user's thread, either when trying to add a task to a dead worker or when trying to access the `result()` of the future that failed or a later one in the sequence. **The key thing, the whole reason I made this PR, is that this exception is necessarily happening at a different point in time from the scheduling of the task. It was when the task was _scheduled_ that the stack trace included the call from outside Awkward Array into Awkward Array.**\r\n\r\nIf you read the code above, you'll see that the stack trace the user sees is a relevant one for debugging the task itself\u2014in other words, Awkward internals\u2014but it's decoupled from the stack trace at the time when it was scheduled\u2014in other words, how the user called `ak.whatever`. That's why it was important to add that information into the error message.\r\n\r\n  * In normal, eager Awkward Array, the information about `ak.whatever` is in the stack trace, though it may be buried. Annotating the error message highlights that information.\r\n  * In delayed Awkward Array, that information is not in the stack trace. Annotating the error message is essential.\r\n\r\nThe thread-local ErrorContext is a way of getting that information from the time when a task is scheduled to the time when the exception is raised. Here are some examples showing how that works.\r\n\r\nFirst, a demo of how the delayed processing works when there are no exceptions.\r\n\r\n```python\r\n>>> import time\r\n>>> from awkward._v2._delayed import *\r\n>>> def task():\r\n...     print(\"begin\")\r\n...     time.sleep(10)\r\n...     print(\"end\")\r\n...     return 123\r\n... \r\n>>> worker = Worker(); worker.start()\r\n>>> future = worker.schedule(task)\r\nbegin\r\n>>> future.result()  # processing has already begun; wait for it to end\r\nend\r\n123\r\n```\r\n\r\nNow if the future is _scheduled_ in an OperationErrorContext, it will be able to talk about that context in its error message, even though the exception is raised long after `ak_whatever` has returned and the OperationErrorContext is no longer operative on the main thread.\r\n\r\n```python\r\n>>> from awkward._v2._util import OperationErrorContext, error\r\n>>> def task():\r\n...     print(\"begin\")\r\n...     time.sleep(10)\r\n...     raise error(ValueError(\"oops\"))\r\n... \r\n>>> def ak_whatever(**kwargs):\r\n...     with OperationErrorContext(\"ak.whatever\", kwargs):\r\n...         future = worker.schedule(task)\r\n...     return future\r\n... \r\n>>> future = ak_whatever(args=123)\r\nbegin\r\n>>> future.result()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/_delayed.py\", line 62, in result\r\n    raise exception_value.with_traceback(traceback)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/_delayed.py\", line 45, in run\r\n    self._result = self._task()\r\n  File \"<stdin>\", line 4, in task\r\nValueError: while calling (from <stdin>, line 1)\r\n\r\n    ak.whatever(\r\n        args = 123\r\n    )\r\n\r\nError details: oops\r\n```\r\n\r\nThe worker does sequential work: if there's an exception anywhere in the sequence, it's the only exception because nothing can be scheduled or executed after that. In the following, we put two tasks onto the worker:\r\n\r\n```python\r\n>>> worker = Worker(); worker.start()\r\n>>> future1 = ak_whatever(args=1)\r\nbegin\r\n>>> future2 = ak_whatever(args=2)\r\n```\r\n\r\nthen wait a long time (more than 10 seconds), then try to put another one on:\r\n\r\n```python\r\n>>> future3 = ak_whatever(args=3)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<stdin>\", line 3, in ak_whatever\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/_delayed.py\", line 102, in schedule\r\n    self._futures.put(future)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/_delayed.py\", line 73, in put\r\n    raise exception_value.with_traceback(traceback)\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/_v2/_delayed.py\", line 45, in run\r\n    self._result = self._task()\r\n  File \"<stdin>\", line 4, in task\r\nValueError: while calling (from <stdin>, line 1)\r\n\r\n    ak.whatever(\r\n        args = 1\r\n    )\r\n\r\nError details: oops\r\n```\r\n\r\nNote that the error message has `args = 1` from the first task that failed. The line number would also point to the first `ak.whatever` call that failed, though here everything is on the prompt and the file and line number aren't informative.\r\n\r\nIf you try to evaluate `future2.result()` or `future1.result()`, you get the same error message: that the _first_ task failed, and how it was called.\r\n\r\nOther than the fact that these stack traces are full stack traces from the worker thread (reported on the main thread), they are not being manipulated. The file and line number are part of the final error message.\r\n\r\nThat's why this PR was written.",
  "created_at":"2022-03-03T19:29:01Z",
  "id":1058409361,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_FguR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T19:29:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"```ini\r\nper-file-ignores =\r\n    tests/*: T, AK1\r\n    dev/*: T, AK1\r\n    setup.py: T\r\n    localbuild.py: T\r\n    src/awkward/__init__.py: E402, F401, F403\r\n    ./awkward/__init__.py: E402, F401, F403\r\n    src/awkward/_v2/_connect/numba/*: AK1\r\n```\r\n\r\n\r\nThis check might still be grabbing a tiny bit too much:\r\n\r\n```\r\nsrc/awkward/_connect/_jax/__init__.py:17:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_jax/__init__.py:30:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:154:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:368:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:382:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:414:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:590:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:734:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:792:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:847:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:951:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:984:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:1496:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:1523:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:1530:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:1688:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:1772:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:1816:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:2058:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:2062:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:2066:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:2076:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:2092:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:2144:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:2170:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:2404:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3047:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3061:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3318:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3323:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3336:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3357:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3444:25: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3474:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3493:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3599:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3852:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3967:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:3986:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:4265:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:4323:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:4344:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:4368:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:4379:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:4395:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:4406:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/structure.py:4673:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_v2/_util.py:43:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/behaviors/mixins.py:86:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/nplike.py:36:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/nplike.py:449:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/nplike.py:480:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/nplike.py:497:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/nplike.py:506:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/nplike.py:519:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/nplike.py:526:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/nplike.py:564:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_typeparser/parser.py:82:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_typeparser/parser.py:102:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_typeparser/parser.py:120:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_typeparser/parser.py:283:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/describe.py:64:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/describe.py:72:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/describe.py:175:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/describe.py:190:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:150:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:160:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:174:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:188:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:202:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:212:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:222:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:236:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:250:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:260:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:276:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:290:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:300:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:337:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/builder.py:561:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:548:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:608:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:630:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:789:25: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:909:29: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:1049:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:1058:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:1071:25: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:1081:25: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:1114:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:1301:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:1500:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_util.py:1800:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numpy.py:240:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numpy.py:268:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numpy.py:281:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numpy.py:290:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_v2/operations/structure/ak_broadcast_arrays.py:10:5: AK101 exception must be wrapped in ak._v2._util.*error\r\nsetup.py:68:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numexpr.py:19:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numexpr.py:125:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:256:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:264:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:302:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:334:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:367:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:376:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:457:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:472:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:509:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:526:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:535:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:544:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:612:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:632:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:647:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:667:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:683:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:700:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:709:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:718:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:884:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:931:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1002:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1011:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1108:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1125:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1224:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1562:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1578:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1587:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1606:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1623:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1633:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1638:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1683:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1749:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1844:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1847:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1902:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1920:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1968:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:1982:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:2502:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:2727:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:2852:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:2936:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3076:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3113:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3260:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3292:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3414:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3458:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3461:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3557:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3578:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3652:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3702:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3731:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3814:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:3818:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4144:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4182:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4379:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4386:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4405:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4486:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4517:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4544:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4567:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4586:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4618:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4656:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4663:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4702:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4739:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4754:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4790:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4840:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4847:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:4927:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:5068:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:5076:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:5124:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/operations/convert.py:5249:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/behaviors/string.py:42:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/behaviors/string.py:48:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/behaviors/string.py:83:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/behaviors/string.py:89:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_v2/_connect/numpy.py:13:5: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/partition.py:182:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/partition.py:185:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/partition.py:192:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/partition.py:211:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/partition.py:259:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/partition.py:393:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/partition.py:442:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/partition.py:526:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/arrayview.py:224:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/arrayview.py:265:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/arrayview.py:337:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/arrayview.py:589:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/arrayview.py:877:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/arrayview.py:1505:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:44:5: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:123:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:137:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:238:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:243:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:275:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:292:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:316:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:337:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:523:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:539:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:567:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:899:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:1065:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:1236:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2021:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2028:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2045:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2052:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2066:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2073:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2366:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2371:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2394:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2401:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2408:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2426:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2444:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2451:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2497:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2520:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2536:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2546:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2608:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2644:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2653:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2840:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2882:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/layout.py:2926:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_cuda_kernels.py:11:5: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_cuda_kernels.py:16:5: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_cuda_kernels.py:24:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_jax/jax_utils.py:42:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_jax/jax_utils.py:71:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_jax/jax_utils.py:87:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_jax/jax_utils.py:110:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_jax/jax_utils.py:130:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_jax/jax_utils.py:160:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_jax/jax_utils.py:185:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_jax/jax_utils.py:207:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_jax/jax_utils.py:285:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/__init__.py:17:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/__init__.py:30:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_connect/_numba/__init__.py:97:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:207:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:236:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:255:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:328:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:358:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1058:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1067:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1117:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1123:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1489:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1545:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1560:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1569:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1638:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1668:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1795:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1839:21: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:1845:17: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:2083:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:2267:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/highlevel.py:2414:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_v2/_connect/pyarrow.py:38:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_v2/_connect/pyarrow.py:44:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_v2/numba.py:15:13: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_v2/numba.py:29:13: AK101 exception must be wrapped in ak._v2._util.*error\r\n```",
  "created_at":"2022-03-03T20:09:23Z",
  "id":1058438966,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_Fn82",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T20:10:37Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"It should be applied to files within `src/awkward/_v2`, excluding `src/awkward/_v2/_connect/numba`.\r\n\r\nNone of this applies to v1.\r\n\r\nLooking at the `_v2` output, `_util` should probably be excluded, too, because it would refer to this function as `error`, not `ak._v2._util.error`.\r\n\r\nThen the rest of these are actual surprises that I can investigate:\r\n\r\n```\r\nsrc/awkward/_v2/operations/structure/ak_broadcast_arrays.py:10:5: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_v2/_connect/numpy.py:13:5: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_v2/_connect/pyarrow.py:38:9: AK101 exception must be wrapped in ak._v2._util.*error\r\nsrc/awkward/_v2/_connect/pyarrow.py:44:9: AK101 exception must be wrapped in ak._v2._util.*error\r\n```",
  "created_at":"2022-03-03T20:14:55Z",
  "id":1058443073,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_Fo9B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T20:19:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"### src/awkward/_v2/operations/structure/ak_broadcast_arrays.py:10:5: AK101 exception must be wrapped in ak._v2._util.*error\r\n\r\n```python\r\ndef broadcast_arrays(*arrays, **kwargs):\r\n    raise NotImplementedError\r\n```\r\n\r\nOkay, I could wrap that.\r\n\r\n### src/awkward/_v2/_connect/numpy.py:13:5: AK101 exception must be wrapped in ak._v2._util.*error\r\n\r\n```python\r\nif not numpy_at_least(\"1.13.1\"):\r\n    raise ImportError(\"NumPy 1.13.1 or later required\")\r\n```\r\n\r\nThis is one that I'd want to write a `# noqa:` for.\r\n\r\n### src/awkward/_v2/_connect/pyarrow.py:38:9: AK101 exception must be wrapped in ak._v2._util.*error\r\n\r\n```python\r\ndef import_pyarrow(name):\r\n    if pyarrow is None:\r\n        raise ImportError(error_message.format(name))\r\n    return pyarrow\r\n```\r\n\r\nSame here.\r\n\r\n### src/awkward/_v2/_connect/pyarrow.py:44:9: AK101 exception must be wrapped in ak._v2._util.*error\r\n\r\n```python\r\ndef import_pyarrow_parquet(name):\r\n    if pyarrow is None:\r\n        raise ImportError(error_message.format(name))\r\n```\r\n\r\nAnd here.\r\n",
  "created_at":"2022-03-03T20:18:54Z",
  "id":1058446201,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_Fpt5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T20:18:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Pushed the custom check. It triggers only on the NotImplementedError, though we could allow NotImplementedErrors if you want. I avoided the unparse step just in case it was slow (flake8 is pretty slow on such a large amount of code), though you can add it back if you want. I'm assuming that wrapping it in `something.else.error` is okay to pass on.",
  "created_at":"2022-03-03T20:55:26Z",
  "id":1058487836,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_Fz4c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T20:55:26Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for the explanation @jpivarski, the additional motivation is much clearer now.\r\n\r\n>  I would call this \"asynchronous,\" but after a deep-dive into Python's asyncio, I see that Python's use of \"asynchronous\" is different.\r\n\r\nI think async is a reasonable description. Given the fact that we're communicating with a remote executor, and tasks can operate out of order (independent streams), it seems like a good label. I suspect many workloads will not involve large numbers of concurrent streams, because analyses tend to evolve forwards rather than sideways, but that's by-the-by! \r\n\r\nAlso, I don't think \"async\" in Python makes the async label unusable.\r\n\r\n> The worker does sequential work: if there's an exception anywhere in the sequence, it's the only exception because nothing can be scheduled or executed after that. In the following, we put two tasks onto the worker:\r\n\r\nI suppose that this is a reasonable limitation - if any user operation fails, we need to blow up *at some point* to report the exception. Unlike fully-fledged async executors, we don't really need a recovery mechanism: errors are likely to be deterministic errors (bad data) or semi-deterministic (OOM).\r\n\r\nOverall this sounds like a reasonable direction to me, though I confess I've not spent a lot of time thinking about it yet. The executor support would be interesting - we could even use it to add threading support to Awkward CPU by releasing the GIL. It would probably be quite easy[^iwish] once the CUDA work is done. I'm not sure how much benefit this would bring, because again, this would only speed up concurrent kernels, whereas CUDA does this in addition to running different algorithms. \r\n\r\n\r\n[^iwish]: Don't quote me on this!\r\n",
  "created_at":"2022-03-03T20:58:20Z",
  "id":1058489852,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_F0X8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T20:58:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> The executor support would be interesting - we could even use it to add threading support to Awkward CPU by releasing the GIL. It would probably be quite easy once the CUDA work is done.\r\n\r\nWith v2 reducing the amount of C++ code, we'll be releasing the GIL on all of that C++ code. So, AwkwardForth, ArrayBuilders working on parsing large JSON, etc.\r\n\r\n-------------\r\n\r\nKeep in mind that this delayed thread (one per CUDA stream) is a very restricted model of concurrency\u2014not even as general as Python's Executors. Since it runs everything in order, just one of these background threads is technically not \"concurrent,\" though the value we're looking for is to have one attached to each CUDA stream, and the multiple CUDA streams would be concurrent with each other (and parallel).\r\n\r\nAnother thing to keep in mind about a background thread attached to a CUDA stream is that it doesn't have to be fast! It's a bit like an I/O thread, in that the CPU part is just waiting on the GPU as an external resource.",
  "created_at":"2022-03-03T21:17:01Z",
  "id":1058503045,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_F3mF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T21:17:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Since it looks like all of the tests are going to pass, I'm going to squash-and-merge. Is everybody ready (nothing more to add)?",
  "created_at":"2022-03-03T21:18:06Z",
  "id":1058503828,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_F3yU",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-03-03T21:18:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  not even as general as Python's Executors. ... just one of these background threads is technically not \"concurrent\"\r\n\r\nFor sure, just as having one proc/thread is a mostly useless kind of concurrency in conventional threading models :smile:  This reminds me of Dask's `concurrent.futures` interface to `Client` \u00ad \u2014 IIRC it tracks data dependencies and promotes locality (and therefore doesn't block workers that depend upon other workers)\r\n\r\nCould you clarify what you mean by this being _less_ general than Python's executors? AFAICR these all assign work to a pool of sequential executors, which seems to map well to the model you've set out above.\r\n\r\n> Another thing to keep in mind about a background thread attached to a CUDA stream is that it doesn't have to be fast!\r\n\r\nRight, and to clarify, I mean that a \"multiple, sequential worker\" executor could provide a lightweight mechanism for multiple-CPU execution of Awkward kernels (i.e., with performance boost as an explicit goal). Clearly, this parallelism would be limited - users would only gain any performance benefits on multi-core PCs where they are operating on independent arrays in the same program (assuming that these are assigned to different workers).\r\n\r\nMoreover, I don't know why I'm suggesting making _any_ more work for ourselves :laughing: ",
  "created_at":"2022-03-03T22:24:20Z",
  "id":1058566261,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_GHB1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T22:35:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> For sure, just as having one proc/thread is a mostly useless kind of concurrency in conventional threading models\r\n\r\nI meant in the sense that even though we have a main thread and a background thread, there's no concurrency in the non-error behavior. Those two threads don't count as concurrency. If you take the pair of them as one unit and have multiple units, then you can get concurrent behavior among the units, but that would also happen with regular threads, and these are thread pairs.\r\n\r\n> Could you clarify what you mean by this being _less_ general than Python's executors? AFAICR these all assign work to a pool of sequential executors, which seems to map well to the model you've set out above.\r\n\r\nA Python ThreadPoolExecutor (or a TBB executor, etc.) is a pool of threads that do the tasks they've been given in an arbitrary order. With a ThreadPoolExecutor, you don't know which thread is going to run a given task, if it's going to be before or after or at the same time as another task, etc. Our background thread (singular, always only one of these per main thread) executes its tasks in exactly the order given and one does not begin until the previous one ends. All it buys is looseness between the main thread (controlled by the user's Python process) and the background thread, which is a \"GPU shepherd\" that keeps the GPU busy. (The GPU runs a bunch of concurrent sub-tasks, but that's another story.)\r\n\r\n> I mean that a \"multiple, sequential worker\" executor could provide a lightweight mechanism for multiple-CPU execution of Awkward kernels (i.e., with performance boost as an explicit goal).\r\n\r\nWe gain that in a different way, from Dask. This \"background thread\" mechanism is useful for dealing with an external resource (quite a lot like an I/O thread, if you count controlling a GPU as \"I/O\"), which isn't what we have when trying to accelerate work on a CPU: the cpu-kernels compete with Python for the same resource (CPU cores). Dask will scale out threads, processes, and remote processes running ordinary single-threaded Awkward tasks. For _that_ purpose, these background threads are an unnecessary complication.\r\n\r\nMaybe a different word would help (other than \"asynchronous\" and \"delayed,\" the two I've used so far): maybe we can call it a \"shadow thread\" because there's only one of them behind a user thread and it mimics what the user thread could have done on its own, possibly offset in time.",
  "created_at":"2022-03-03T23:43:41Z",
  "id":1058673559,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_GhOX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T23:43:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> If you take the pair of them as one unit and have multiple units, then you can get concurrent behavior among the units\r\n\r\nI think I see what you're saying. I believe we're using slightly different interpretations of \"thread\", which your point on \"thread pairs\" clarified - I am referring to a wheel-hub model, where we have (background) threads, and a single main thread (hence multiple threads = multiple _background_ (concurrent) threads). \r\n\r\n>  With a ThreadPoolExecutor, you don't know which thread is going to run a given task, if it's going to be before or after or at the same time as another task, \r\n\r\nRight, I ended up deleting this from my last comment, but that's where I draw the distinction - in the normal futures executor, tasks are consumed eagerly rather than scheduled.\r\n\r\n>  Our background thread (singular, always only one of these per main thread) executes its tasks in exactly the order given and one does not begin until the previous one ends. \r\n\r\nOh! Are you referring to a \r\n```mermaid\r\ngraph LR;\r\nPython --> shepherd\r\nshepherd -->  w1(worker 1)\r\nshepherd --> w2(worker 2)\r\n```\r\nmodel? I.e. there is a single \"shepherd\" thread that blockingly manages the GPU, the main thread that _doesn't_ block (unless the user tries to resolve a future), and then N workers? That would explain why we're crossing wires!\r\n\r\n> We gain that in a different way, from Dask. \r\n\r\nYes, of course. I was thinking about this finer grained parallelism having benefits, but on second thoughts there's no compelling case for it.\r\n\r\n> Maybe a different word would help \r\n\r\nYes, if we only have one shepherd, then we're not concurrent. Shadow thread works pretty well to make the important features known. I'm :+1: on that.",
  "created_at":"2022-03-04T00:24:37Z",
  "id":1058695509,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_GmlV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-04T00:24:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's it! (And that graph is really cool!) There's only one shepherd/shadow per user thread (and Dask can make multiple of those). The shepherd/shadow is controlling a CUDA stream, which internally has a lot of workers, though that's something that we only see through CUDA tools.\r\n\r\nThis is helping to improve the nomenclature. (@swishdiff, feel free to rename \"Worker\" as \"Shepherd\" or \"Shadow.\" In the generality of src/awkward/_v2/_delayed.py, there's no \"shepherding\" because there's no GPU yet, but its main application will be pairing it with a GPU. Given that generality, maybe \"Shadow\" is best?)",
  "created_at":"2022-03-04T00:34:18Z",
  "id":1058706254,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_GpNO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-04T00:34:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski and I discussed this a little offline, and I realised that we still had slightly different ideas about how the shadow thread system would work.\r\n\r\nI was picturing something like this,\r\n```mermaid\r\ngraph LR;\r\nPython <--> Shepherd\r\nShepherd <-->  w1(Worker 1)\r\nShepherd <--> w2(Worker 2)\r\n```\r\nall localised to the host. In my understanding, GPU streams would be communicated with from the workers, and the shepherd's role was something like a supervisor/scheduler.\r\n\r\nBut actually the \"worker\" here is the GPU stream. The worker-stream pair represents the mapping of each stream to a CPU thread:\r\n\r\n```mermaid\r\ngraph LR;\r\nPython --> w1\r\nPython --> w2\r\nw1(\"Worker 1 [Host]\") -->  s1(\"Stream 1 [GPU]\")\r\nw2(\"Worker 2 [Host]\") --> s2(\"Stream 2 [GPU]\")\r\n```\r\n\r\nI don't want to put words into Jim's mouth, but I think the endpoint of our conversation is that Python (the main thread) can talk to multiple workers (shepherds) that keep GPU streams busy. These streams (and therefore workers) offer concurrency between one another, so we can (where data relationships permit) compute independent array operations in parallel.",
  "created_at":"2022-03-04T09:34:06Z",
  "id":1058995992,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_Hv8Y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-04T09:34:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I don't want to put words into Jim's mouth, but I think the endpoint of our conversation is that Python (the main thread) can talk to multiple workers (shepherds) that keep GPU streams busy. These streams (and therefore workers) offer concurrency between one another, so we can (where data relationships permit) compute independent array operations in parallel.\r\n\r\nYes, that's right, and what I said about the main thread only having one worker/shadow/shepherd was me flaking out: I just hadn't thought of the fact that a main thread can run multiple of these without any problems. It has to send independent tasks to each (and maybe we'll need some way to make sure of that... maybe through the `nplikes`). But also, there must be exactly one GPU stream per worker/shadow/shepherd thread.",
  "created_at":"2022-03-04T18:12:22Z",
  "id":1059402054,
  "issue":1327,
  "node_id":"IC_kwDODBCWws4_JTFG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-04T18:12:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1329](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2ce230b) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.05%`.\n> The diff coverage is `69.04%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `55.30% <0.00%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `80.92% <75.00%> (-0.21%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `74.03% <75.00%> (-0.42%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `59.36% <75.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `86.99% <75.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `88.31% <75.00%> (-0.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.41% <75.00%> (-0.12%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `89.87% <75.00%> (-0.17%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `83.73% <75.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `84.79% <75.00%> (-0.16%)` | :arrow_down: |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1329/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-01T20:53:55Z",
  "id":1055847941,
  "issue":1329,
  "node_id":"IC_kwDODBCWws4-7vYF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-01T20:53:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Awesome, thanks!",
  "created_at":"2022-03-02T14:27:28Z",
  "id":1056989525,
  "issue":1329,
  "node_id":"IC_kwDODBCWws4_AGFV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T14:27:28Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1331](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (22b8184) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.87%`.\n> The diff coverage is `40.23%`.\n\n> :exclamation: Current head 22b8184 differs from pull request most recent head faaa9f8. Consider uploading reports for the commit faaa9f8 to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_delayed.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19kZWxheWVkLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `90.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2JpdG1hc2tlZGZvcm0ucHk=) | `78.04% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2J5dGVtYXNrZWRmb3JtLnB5) | `77.33% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `79.62% <0.00%> (-0.38%)` | :arrow_down: |\n| ... and [133 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1331/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-02T01:17:55Z",
  "id":1056033814,
  "issue":1331,
  "node_id":"IC_kwDODBCWws4-8cwW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-07T10:56:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Could we use `concurrent.futures.Future` instead of rolling our own? We'd split the Awkward-specific code from the existing `Future` into a `_WorkItem` which holds a reference to the future, and sets the exception / completed status. The future would then just be a standard interface into the executing task.\r\n\r\nThe benefit of this is a standard `Future` API, which I think is worth supporting despite the fact that this is going to be a fairly internal detail.",
  "created_at":"2022-03-04T09:54:09Z",
  "id":1059010603,
  "issue":1331,
  "node_id":"IC_kwDODBCWws4_Hzgr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-04T09:54:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Could we use `concurrent.futures.Future` instead of rolling our own?\r\n\r\nI thought about that (just as I looked into asyncio), and we do use a method of the same name for the same concept, `result()` (so it's duck-type friendly!). However, if we use the Future that is built into Python's Executors, then we get a lot of other concepts along for the ride that we have no intention of implementing, like `cancel`/`cancelled`, `add_done_callback`, `set_running_or_notify_cancel`, ... Using `concurrent.futures.Future` has the advantage of parsimony (not inventing a second thing when a first thing exists) and the disadvantage of having to decide what to do with these other methods (should they all raise exceptions?) and possible bugs because `concurrent.futures.Future` does some things that we don't know about yet.\r\n\r\n\"Use vs make anew\" is always a trade-off, and usually in favor of anew (why we have a nice, modular ecosystem). But I think it should always be reevaluated in each context. In this one, I don't see how the trade-off is in our favor. At the end of stubbing out all of the methods we don't use and understanding `concurrent.futures.Future`'s details well enough to know that it's not going to bite us, we'll be at the same place where we are now, with a simple `Future` we know how to use.\r\n\r\n(The trade-off would be different if these were public objects, because it would add into the mix the possibility that users would confuse this `Future` with `concurrent.futures.Future`. If we're worried about developers making that mistake, we could rename our Future. This kind of thing is also called a \"[Promise](https://en.wikipedia.org/wiki/Futures_and_promises).\")",
  "created_at":"2022-03-04T18:50:57Z",
  "id":1059428171,
  "issue":1331,
  "node_id":"IC_kwDODBCWws4_JZdL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-04T18:50:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This message is mostly for @agoose77's information, since @swishdiff and I have just been talking about it for the last two hours: we're not going to follow this route of background workers tied to CUDA streams. He's been trying to make it work since last week, and there are a lot of hard problems like how to decide which CUDA stream to run an Awkward kernel on: the one attached to the background thread that launched it or the one assigned by [CuPy's context manager](https://docs.cupy.dev/en/stable/reference/generated/cupy.cuda.Stream.html)? Why wouldn't they be the same? Well, our background thread delays Python code execution, so an operation could get executed after CuPy's context manager exits. It's becoming clear that this approach has Awkward Array and CuPy fighting for control, which is not what we want.\r\n\r\nWhy did we start on the idea of a background thread in the first place? Because every Awkward kernel allocates memory for its output\u2014nothing is in-place. Calling cuMalloc is a blocking operation, so if we did it naively, all of our work on GPUs would effectively be synchronizing every step of the way, which is not a good way to use a parallel device (and there's no point in having a _slow_ CUDA backend). The idea was that, with a background thread, we could do all the CUDA-blocking operations and users could fill up the GPU by running multiple such threads.\r\n\r\nHowever, CuPy needs to do this, too. How did we think CuPy manged it without a background thread? My first thought was that CuPy users are more careful to do in-place operations. While that might be the case, @swishdiff informed me that CuPy also avoids cuMalloc: calling `cp.empty(1000000)` does not call cuMalloc to get a big array; it preallocates for all the arrays it thinks it's going to need and `cp.empty(1000000)` draws from its own allocation. (That is, CuPy has its own, internal \"malloc,\" what's sometimes called an \"[arena](https://en.wikipedia.org/wiki/Region-based_memory_management).\")\r\n\r\nSo... CuPy avoids blocking operations if you use its API. We want to avoid blocking operations without reinventing the wheel, and especially without having to make our wheel work with CuPy's wheel. (To extend the analogy: you really don't want to add wheels to a car that are different sizes or rotate at different rates! That's analogous to the confusion that would come if Awkward-CUDA streams were somehow different from CuPy streams.) We can ensure that every time we want a new Index or NumpyArray, we use a CuPy call to get it, which we were planning on doing, anyway. As long as Awkward-CUDA is implemented entirely in terms of CuPy API, code wrapped in `with cp.cuda.Stream():` would behave as users expect, as this would control which streams both CuPy and Awkward use.\r\n\r\nThe only trouble then is that we have device kernels that CuPy doesn't know about\u2014CuPy wouldn't know that one of our kernels is finished processing and it is allowed to use the output of an array. @swishdiff then introduced me to [cp.RawKernel](https://docs.cupy.dev/en/stable/reference/generated/cupy.RawKernel.html): if we put the CUDA/C++ source code of our kernels into a RawKernel, CuPy compiles it and then treats it as one of its own operations\u2014presumably using the right stream, device, and aware of when it finishes. This would be a way for us to use the CuPy API _exclusively_.\r\n\r\nIt also solves another problem: we won't need a second Python package named `awkward-cuda-kernels`. CuPy comes with a just-in-time compiler of CUDA code. Source code is much more portable than compiled code. Using CuPy's JIT also eliminates the problem of needing different Python modules compiled for different CUDA versions (9.x, 10.x, 11.x, ...), which is also a problem I'd rather not have. So this approach of doing everything through CuPy, which includes using it for JIT compilation, solves _two_ major problems.\r\n\r\nTherefore, I'm very pleased to close this PR and give up on the background thread idea. I'm fully acknowledging how much time @swishdiff spent in trying to make it work, in how much time @agoose77 and I have talked about it, as well as the time I put into it. But in software design, it's good to recognize a sunk cost early. (The whole v1 \u2192 v2 transition is a case of recognizing a simplification late.)\r\n\r\n--------\r\n\r\nBeyond GPUs, @agoose77 did point out that these background threads can be useful for parallelizing on the CPU, a use-case that hadn't occurred to me when I started this direction. But we will also be using dask-awkward to parallelize on the CPU, and I'd rather not have more than one way of doing a thing. The background thread (as I mentioned when first introducing it) is like v1 VirtualArray (in some but not all aspects). VirtualArray-style laziness allows for parallelization to be transparent: users don't know when a computation happens, but if they ask for the result, it will happen before they get the result. Dask-style laziness makes parallelization a little more visible: there's an explicit `compute` method that makes the computation happen. As I said in [my talk at the Dask summit](https://github.com/jpivarski-talks/2021-05-21-dasksummit-awkward-collection/blob/main/degrees-of-transparency-2.pdf), the transparency of VirtualArrays was a liability. Users wanted more control over when (and if) computations happen.\r\n\r\nSo we'll keep in mind that there's this potential method of transparent parallelization, in case we find that the dask-awkward pattern, with a `compute` method, does not fit all problems. We can always come back to this and put the relevant bits into a new PR.\r\n\r\n------\r\n\r\nSince this PR also motivated #1327, we might ask if that should be reverted, too. Although #1327 became more urgent when the possibility of background threads was raised, it's still useful to have error messages reported at the granularity of `ak.*` operations and I wouldn't want to go back to not having that feature. And really, most of what #1327 did is it put exception handling in a centralized place so that we can more easily revisit the question of what error messages look like. @henryiii's flake8 check ensures that it's used consistently. These are all good things.",
  "created_at":"2022-03-07T16:46:57Z",
  "id":1060898039,
  "issue":1331,
  "node_id":"IC_kwDODBCWws4_PAT3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-07T16:46:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"What a journey! To be honest, this sounds like a good conclusion to the problem of CuPy integration. Background threads would be really interesting, but I am sure we all anticipated a new frontier of headaches that would better be avoided if possible. In particular, I anticipate far fewer benefits from local CPU task parallelism than distributed parallelism via Dask, given that Dask also solves the memory problem at the same time. Adding code solely to solve that problem would probably be a long-term footgun.\r\n\r\nSolving another problem of packaging is also a big win, and given that we're already planning on jitting with RDataFrame, a little _jit_ more can't hurt :laughing: \r\n\r\n#1327 is absolutely still relevant - it will be useful when/if the other exception PEP is landed to be able to formally move notes into the exception, which with #1327 we can do in a single place. Furthermore, as we often discuss, it's an internal API that we can be fairly blas\u00e9 about changing down the road.\r\n\r\n",
  "created_at":"2022-03-07T18:26:10Z",
  "id":1060994723,
  "issue":1331,
  "node_id":"IC_kwDODBCWws4_PX6j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-07T18:26:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We discussed the idea of a per-layout flag that determines whether a layout is in its simplest form. This would add a reasonable amount of code to check something that internally should never happen. \r\n\r\nA less robust approach would be to tackle #516 at the same time and create a mid-level API that resembles `ak._util`, e.g.\r\n```python3\r\ndef wrap(layout, behavior):\r\n    assert_simplified(layout)\r\n    return ak._v2._util.wrap(layout, behavior)\r\n\r\n...\r\n```\r\n\r\nThe issue with *this* approach is that it only checks for validity at `wrap` time, and doesn't remember layouts it has visited before. Users that pass a layout to `ak.XXX` functions with `highlevel=True` would then receive Arrays that have not been checked.\r\n\r\nThe more I think about it, the less confident I am that we *want* to go to all this trouble. We don't enforce `check_valid` by default, and that is the same class of error. *Maybe* we should include a simplification check when `check_valid` is set to `True`, and call it a day. Perhaps this is just a documentation problem?\r\n\r\nI appreciate that I've gone round in a few circles here, thanks for coming for the ride!",
  "created_at":"2022-03-02T11:25:10Z",
  "id":1056816360,
  "issue":1333,
  "node_id":"IC_kwDODBCWws4-_bzo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T11:25:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> The more I think about it, the less confident I am that we _want_ to go to all this trouble. We don't enforce `check_valid` by default, and that is the same class of error. _Maybe_ we should include a simplification check when `check_valid` is set to `True`, and call it a day.\r\n\r\nAt least in the two Content subclasses I checked yesterday, the `check_valid` implementation also checks for this redundancy. So if a user is concerned about the validity of a layout, this option will fix it.\r\n\r\nAll in all, there are three ways for a layout to be invalid:\r\n\r\n   1. Invalid metadata: property types, property value ranges\u2014any state depending on the Content instance itself that is not in any arrays (Indexes or NumpyArray data). Examples: BitMaskedArray `lsb_order` must be boolean; RegularArray `size` must be non-negative.\r\n   2. Invalid data: values in Indexes that are out of range, inconsistent with each other, or inconsistent with `len(content)`. Examples: IndexedArray `index` with values that are negative or greater than or equal to `len(content)`; ListArray `stops[i] < starts[i]`.\r\n   3. Invalid nesting: any two directly nested {IndexedArray, IndexedOptionArray, ByteMaskedArray, BitMaskedArray, UnmaskedArray} or directly nested UnionArray or a UnionArray containing `mergeable` contents.\r\n\r\nAll of this discussion is about (3), which could be caught in _O(1)_ time with _O(n)_ flags where _n_ is the number of nodes in a tree (not very large).\r\n\r\nHowever, just as a mid-level user (someone going into the `ak.layout.*` module) can make a layout that is invalid in way (3), they can make a layout that is invalid in way (2). Making an `ak.Array` with `check_valid=True` checks for types (2) and (3) errors. This is opt-in because checking for type (2) is _O(N)_ where _N_ is the number of elements in the array (more expensive).\r\n\r\nType (1) errors are always checked by Content subclass constructors, so it's never possible to make one without knowing about the error. This checking is _O(1)_ in time and memory use.\r\n\r\nSo it comes down to how much we care about this: we'd be able to check for type (3) errors without requiring user opt-in at the cost of adding _O(n)_ flags (not a big cost). But the layouts could still have type (2) errors. The current policy is that if an operation relies on some type (2) error not being wrong, it has to check for those errors just before using them: for example, checking `stops[i] >= starts[i]` inside a kernel just before using `starts[i]` or `stops[i]`, and it should check for a type (3) error just before using it, too. For instance, if an operation needs to assume that two option-type nodes are not nested, it can do the _O(1)_ check for the `content` directly inside the option-type node in question and raise an error if it is. It does not need to \"deal\" with it as though it were a valid state.\r\n\r\nThis PR is about a change in policy to detect type (3) errors more proactively: to raise an error when constructing the `ak.Array` in a way that users don't have to opt into, because the cost is small and there may be erroneous cases in the wild. There's a positive value to that\u2014it would be better to have this than not have this\u2014but I don't see it as a high priority. If you have other, more pressing items, I'd put this on pause in favor of those.",
  "created_at":"2022-03-02T16:04:40Z",
  "id":1057095860,
  "issue":1333,
  "node_id":"IC_kwDODBCWws4_AgC0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T16:04:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> At least in the two Content subclasses I checked yesterday, the `check_valid` implementation also checks for this redundancy. So if a user is concerned about the validity of a layout, this option will fix it.\r\n\r\n(:facepalm:)<sup>\u221e</sup>\r\n\r\nYou're completely right. I don't know *what* I was looking at yesterday.\r\n\r\nYes, this issue is about if/when to check (3). The easiest solution is to check this when constructing Array vs doing this in the layout constructor. Whilst users could then have erroneous layouts, they will nearly always end up converting them to Array at some point and then discover the error.\r\n\r\nSo, this is a wishlist item for when we get around to splitting the structure checking into its own routine.",
  "created_at":"2022-03-02T19:29:13Z",
  "id":1057299390,
  "issue":1333,
  "node_id":"IC_kwDODBCWws4_BRu-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T19:29:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ideally to test whether one layout is simplified, I'd check whether the _form_ is simplified, rather than the array. Let's implement that for `ak._v2.forms.IndexedForm`. ",
  "created_at":"2022-03-02T10:19:52Z",
  "id":1056754706,
  "issue":1334,
  "node_id":"IC_kwDODBCWws4-_MwS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T10:19:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1334](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ed9d89c) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.09%`.\n> The diff coverage is `76.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/forms/indexedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2luZGV4ZWRmb3JtLnB5) | `75.30% <16.66%> (-4.70%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/describe/ak\\_is\\_simplified.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfaXNfc2ltcGxpZmllZC5weQ==) | `94.44% <94.44%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/describe/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvX19pbml0X18ucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `80.80% <0.00%> (+0.27%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `87.45% <0.00%> (+0.32%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `90.40% <0.00%> (+0.36%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `84.31% <0.00%> (+0.40%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `85.50% <0.00%> (+0.55%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `60.18% <0.00%> (+0.68%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/numpyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL251bXB5Zm9ybS5weQ==) | `90.47% <0.00%> (+0.95%)` | :arrow_up: |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1334/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-02T10:39:24Z",
  "id":1056774885,
  "issue":1334,
  "node_id":"IC_kwDODBCWws4-_Rrl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T10:39:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"As you can see, I thought that it would be useful to build out the `simplify_` methods for `Form` so that one does not need to actually simplify the array to test whether it *can* be simplified. This would require a number of functions that we currently implement on `ak._v2.contents.Content` to be duplicated for `ak._v2.forms.Form`. \r\n\r\nHowever, by doing this we end up with a lot of duplicated code between `Form` and `Content`. Furthermore, most of these methods do not depend upon their contents, hence `TypeTracer`. It would therefore seem that `ak._v2.forms.Form` is most useful in representing the form of an array, whereas the typetracer is more useful in performing transformations of the array. \r\n\r\nI think I'm going to close this, and further discuss in #1333 ",
  "created_at":"2022-03-02T11:14:04Z",
  "id":1056806256,
  "issue":1334,
  "node_id":"IC_kwDODBCWws4-_ZVw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T11:14:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Oh dear, this is still not right - we actually need the existing complex solution because of Union arrays, which can themselves contain options.",
  "created_at":"2022-03-02T12:04:33Z",
  "id":1056853738,
  "issue":1335,
  "node_id":"IC_kwDODBCWws4-_k7q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T12:04:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't think it's necessary to revert #1249. It may be overly cautious, but it doesn't do anything beyond _O(1)_ to do so. I'd just leave it be (since there's so much else that needs to be done...).",
  "created_at":"2022-03-02T15:28:37Z",
  "id":1057058928,
  "issue":1335,
  "node_id":"IC_kwDODBCWws4_AXBw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T15:28:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski right, and also we *need* this to support `IndexedOptionArray->UnionArray->IndexedOptionArray` (a valid case for where we need to look at the content of an option type at the same time) :smile: ",
  "created_at":"2022-03-02T15:30:19Z",
  "id":1057060657,
  "issue":1335,
  "node_id":"IC_kwDODBCWws4_AXcx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T15:30:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> we _need_ this to support `IndexedOptionArray->UnionArray->IndexedOptionArray`\r\n\r\nThat's definitely something I hadn't considered.\r\n\r\nWe don't necessarily need to support it in the sense of ensuring that every function can deal with it. We could, instead, expand the set of node-nestings that are considered invalid. The above could become one of the cases `simplify_optiontype` checks for and squashes.\r\n\r\nArrow, for instance, doesn't consider \"option-type of union-type\" to be valid, which was a surprise to me because Arrow puts option-type on absolutely every node in their system (missing data is a node attribute, rather than a separate node). The argument is that if you want `Option(Union(X, Y, Z))`, you can write `Union(Option(X), Option(Y), Option(Z))`, and that's something that `ak.to_arrow` does. As long as Indexes can be shared, the latter doesn't use any more memory. Also, this distinction is not visible: whereas it would make a difference for records:\r\n\r\n```python\r\n{x: None, y: None, z: None}\r\n```\r\n\r\nis different from\r\n\r\n```python\r\nNone\r\n```\r\n\r\nit does not make a difference for unions:\r\n\r\n```python\r\nNone   # happens to be content 2, rather than content 0, but we don't know that\r\n```\r\n\r\nis the same as\r\n\r\n```python\r\nNone   # for the whole union, all contents together\r\n```\r\n\r\nWe could define a rule that turns every\r\n\r\n   * `Union(X, Y, Option(Z))` (at least one of the UnionArray `contents` is option-type)\r\n   * `Option(Union(X, Y, Z))`\r\n   * `Option(Union(X, Y, Option(Z)))`\r\n\r\ninto a canonical form. The best optimum of memory and time (so, excluding BitMaskedArray) would be this:\r\n\r\n```\r\nByteMaskedArray(UnionArray([X, Y, Z]))\r\n```\r\n\r\nwhere all of the UnionArray's `contents` are non-option-type. UnionArrays are already indirecting through an `index`, so if `Option(Z)` was an IndexedOptionArray, the `Z` could be left as-is and the `index` could be composed with the UnionArray `index`, sliced for `tags == 2` (`Z` is `contents` item 2 in this example). The `-1`s of an IndexedOptionArray or the invalid matches of a Bit/ByteMaskedArray can be sliced through array manipulations to become the ByteMaskedArray that wraps the canonical form.\r\n\r\nUsually, we do option-type with IndexedOptionArray because it's the most general; you don't have to create fake data for missing values in RecordArrays (as Arrow does). In this case, a ByteMaskedArray makes more sense because the UnionArray's `index` can already take up the slack that IndexedOptionArray would have been needed for. There's no sense in nesting index indirection within index indirection. (Because [array-slicing is function composition](https://github.com/scikit-hep/awkward-1.0/blob/4d79a75b7d1680fd67bd90fba35b9a1aefc58c21/docs/theory/arrays-are-functions.pdf).)\r\n\r\nThat would tend to make the `simplify_optiontype` more complex (or would the `simplify_optiontype` and `simplify_uniontype` have to be combined?), in such a way that it would make sense to replace the Form implementation with using the TypeTracer.\r\n\r\nThis could be a new project, if you're interested.",
  "created_at":"2022-03-02T20:05:58Z",
  "id":1057330714,
  "issue":1335,
  "node_id":"IC_kwDODBCWws4_BZYa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T20:05:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm going to move this to a new issue!",
  "created_at":"2022-03-02T21:51:44Z",
  "id":1057427644,
  "issue":1335,
  "node_id":"IC_kwDODBCWws4_BxC8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T21:51:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think we do reimplement the v1 helper, it's just hidden in the base class:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d977b04facb196a4c8584f256b36280a4e105b14/src/awkward/_v2/contents/content.py#L1030-L1125\r\n\r\nOn `main`, I can see that both the `NumpyArray` and `char` conditions are checked for a `RegularArray`. I don't test this for any other layouts, but it should all use the same base class impl.",
  "created_at":"2022-03-02T19:44:39Z",
  "id":1057310817,
  "issue":1336,
  "node_id":"IC_kwDODBCWws4_BUhh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T19:44:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Aha! Thanks for finding this. Then the thing that's wrong is that it's only applied at top-level:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d977b04facb196a4c8584f256b36280a4e105b14/src/awkward/_v2/contents/content.py#L1127-L1131\r\n\r\nThe recursive `_validityerror` does not check it. This test would miss invalid strings inside of some list or records. I can do a quick fix.",
  "created_at":"2022-03-02T20:12:47Z",
  "id":1057335679,
  "issue":1336,
  "node_id":"IC_kwDODBCWws4_Bal_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T20:12:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Nope: I'm wrong. The recursive functions are named `_validityerror`, but they recurse on `validityerror` (no underscore). This is performing all the checks it's supposed to.\r\n\r\nSo, no bug\u2014false alarm\u2014sorry!\r\n\r\n(It tripped me up because my expectation was that the entry function would have no underscore and the recursive one would have an underscore and recurse on itself, the one with the underscored name. It's a _pattern_ I was expecting and this is different from that pattern. However, that may just be a personal pattern. It's not good to go against design patterns, for exactly the reason that it's quicker to scan code for correctness that way, but those design patterns need to be known to everybody writing the code. I don't know that this one is. If it's breaking an established design pattern, then we should flag it with comments or straighten it out.)",
  "created_at":"2022-03-02T20:22:41Z",
  "id":1057343130,
  "issue":1336,
  "node_id":"IC_kwDODBCWws4_Bcaa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T20:22:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It tripped me up because my expectation was that the entry function would have no underscore and the recursive one would have an underscore and recurse on itself, the one with the underscored name.\r\n\r\n@jpivarski to be fair, I did find the naming convention surprising too: normally the non-underscored name is public (and the entrypoint), but here it is the _underscored_ name is the entry-point.\r\n\r\nI.E., I'd be in favour of changing the naming to suit both our expectations ;) I believe that this would involve renaming `validityerror_parameters` to `_validityerror_parameters`",
  "created_at":"2022-03-02T21:06:47Z",
  "id":1057387366,
  "issue":1336,
  "node_id":"IC_kwDODBCWws4_BnNm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-02T21:26:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1338](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (97ab44c) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.82%`.\n> The diff coverage is `47.31%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `83.59% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_pandas.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19wYW5kYXMucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [143 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1338/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-03T01:11:00Z",
  "id":1057560575,
  "issue":1338,
  "node_id":"IC_kwDODBCWws4_CRf_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T18:31:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@martindurant, I've hit a dead-end with the pyarrow Dataset API: it can't read nested columns.\r\n\r\nHere's an example of something that works:\r\n\r\n```python\r\nimport fsspec\r\nimport pyarrow.parquet\r\n\r\nfilename = \"s3://pivarski-princeton/millionsongs/millionsongs-A-zstd.parquet\"\r\nfs, _, _ = fsspec.get_fs_token_paths(filename, mode=\"rb\")\r\nf = fs.open(filename, \"rb\")\r\n\r\nq = pyarrow.parquet.ParquetFile(f)\r\nt = q.read([\"hdf5_filename\", \"analysis.bars.list.item.confidence\"])\r\n```\r\n\r\nNow `t` is\r\n\r\n```\r\npyarrow.Table\r\nhdf5_filename: string not null\r\nanalysis: struct<bars: list<item: struct<confidence: double not null>> not null> not null\r\n  child 0, bars: list<item: struct<confidence: double not null>> not null\r\n      child 0, item: struct<confidence: double not null>\r\n          child 0, confidence: double not null\r\n```\r\n\r\nin which `hdf5_filename` was a non-nested column and `confidence` was drawn from variable-length lists of the `bars` field of the `analysis` column. This allowed us to avoid reading all of the other `analysis` and `bars` substructure.\r\n\r\nSuppose I want to do that with the Dataset API.\r\n\r\n```python\r\nimport pyarrow.dataset\r\nfs, _, paths = fsspec.get_fs_token_paths(filename, mode=\"rb\")\r\nq = pyarrow.dataset.dataset(paths[0], format=\"parquet\", filesystem=fs)\r\n```\r\n\r\nNow `q` is a FileSystemDataset ([Dataset docs](https://arrow.apache.org/docs/python/generated/pyarrow.dataset.Dataset.html)) that can give me the `schema` (and it's an Arrow schema, not Parquet, so I can run `ak._v2._connect.pyarrow.form_handle_arrow` on it), but it doesn't have a function like `read` where I can give it Parquet column names.\r\n\r\nIt has a `scanner()` ([Scanner docs](https://arrow.apache.org/docs/python/generated/pyarrow.dataset.Scanner.html)), which takes a list of columns, but these are not Parquet column names.\r\n\r\nI have no problem asking for a non-nested column:\r\n\r\n```python\r\nq.scanner(columns=[\"hdf5_filename\"]).to_table()\r\n```\r\n\r\nbut if I want a nested column, I seem to be out of luck:\r\n\r\n```python\r\nq.scanner(columns=[\"analysis.bars.list.item.confidence\"])\r\n```\r\n\r\nfails with\r\n\r\n```\r\npyarrow.lib.ArrowInvalid: No match for FieldRef.Name(analysis.bars.list.item.confidence) in\r\n... (whole schema)\r\n```\r\n\r\nIt has wrapped the whole string `\"analysis.bars.list.item.confidence\"` in `FieldRef.Name`, and that's wrong: only `\"analysis\"` is the field name in the Arrow schema. (The long string is a Parquet column name.)\r\n\r\n```python\r\nq.scanner(columns=[\"analysis.bars.item.confidence\"])  # and\r\nq.scanner(columns=[\"analysis.bars.confidence\"])\r\n```\r\n\r\ndon't work, either.\r\n\r\nThis works:\r\n\r\n```python\r\nq.scanner(columns=[\"analysis\"])\r\n```\r\n\r\nbut it's the whole `\"analysis\"` subtree, which is a _lot_ of columns. I can't seem to find any \r\n\r\nI could go back to the `pyarrow.parquet.ParquetFile` class, since it does take a file-like object as a source. That's why it accepted the `fs.open(filename, \"rb\")`, even though `fs` was on S3. But if it's going through a file-like interface, then every seek + read is a remote round-trip, and I assume that the Dataset API is doing something better, like batching requests.\r\n\r\n**Do you have any ideas? I'm stuck.**\r\n\r\nLast-ditch attempt: maybe I can construct a `pyarrow.compute` function? There's a `struct_field` function ([docs](https://arrow.apache.org/docs/python/generated/pyarrow.compute.struct_field.html)), but it doesn't seem to exist in 6.0.1. If that's a pyarrow 7.0.0 thing and that's the only way to get this feature, then so be it. But it would be a big pain to construct those compute expressions! And I just wrote a whole nested-column-selecting thing for Forms based on the dot syntax (with or without the spurious `\"list.item.\"` infixes).",
  "created_at":"2022-03-04T03:08:32Z",
  "id":1058782343,
  "issue":1338,
  "node_id":"IC_kwDODBCWws4_G7yH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-04T03:08:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"There's quite a lot here, I will try to answer what I can.\r\n\r\nFirstly, yes, arrow does a little magic in the dataset API, but not as much as you might think. In particular, arrow only implements FS interfaces for local, hdfs and s3. For everything else, you use fsspec and the same file-like API with seeks.\r\n\r\nfsspec, however, does provide caching of bytes. The normal operation for a file is read-ahead mode (other strategies are available), so you drastically reduce the number of reads depending on the configured blocksize. This works well when you are reading all the columns, so scanning through the file linearly, but it's still a serial process. This performs really badly when you want disparate few columns amongst many.\r\n\r\n... but we were ahead of you, you should see [fsspec.parquet](https://github.com/fsspec/filesystem_spec/blob/master/fsspec/parquet.py). This takes a parquet file's metadata and selection of columns, and prospectively fetches all of the pieces concurrently (merging neighbouring ranges) before constructing a file-like which will not need to fetch any more bytes from remote. In some cases, this can provide a 5x speedup over pyarrow/fastparquet. It does not allow for dotted columns, but the code is simple and we can easily change it.",
  "created_at":"2022-03-04T15:02:39Z",
  "id":1059239406,
  "issue":1338,
  "node_id":"IC_kwDODBCWws4_IrXu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-04T15:02:39Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"I guess, then, I should design around `fsspec.parquet`! The PyarrowEngine uses `pyarrow.parquet.ParquetFile`, which has all the interface I need, so it should recognize my `columns` specification:\r\n\r\nhttps://github.com/fsspec/filesystem_spec/blob/732caa0591937152ae6793220df1a2cab6d25297/fsspec/parquet.py#L504\r\n\r\nI have fsspec version 2022.02.0. Is anything that I need too new to develop with that?\r\n\r\nWould it be reasonable/unreasonable for me to provide an interface that necessarily fetches the Form (converted from Parquet Schema) as a separate function, and therefore a separate round-trip? If the schema is coming from a `_metadata` file, I think it might be a separate round-trip anyway. The reason I'd rather provide two functions is because a user is going to need a way to find out what columns exist in order to know which ones to ask for. Doing that while maintaining an open connection means introducing an OpenParquetFile object that users have to know isn't the same thing as an Array object. Providing separate\r\n\r\n```python\r\nak.form_from_parquet(...)\r\nak.from_parquet(...)\r\n```\r\n\r\nfunctions simplifies that at the expense of always needing two round-trips and maybe losing some of the caching you're putting into `fsspec.parquet`. (dask-awkward will be a user of these functions, just as single-threaded Awkward users will be.)",
  "created_at":"2022-03-04T19:15:51Z",
  "id":1059444299,
  "issue":1338,
  "node_id":"IC_kwDODBCWws4_JdZL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-04T19:15:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Yes, the separate call to get the metadata and therefore the form is probably unavoidable, and the dask variant would use this standalone anyway (because the data loading is deferred to tasks in the graph). You would want to keep hold of the file footer bytes or metadata object get the bytes ranges for the specifically selected columns. Again, this needs some development in fsspec, but something similar is already possible in the dask parquet engines.",
  "created_at":"2022-03-04T19:28:50Z",
  "id":1059452470,
  "issue":1338,
  "node_id":"IC_kwDODBCWws4_JfY2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-04T19:28:50Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"@martindurant I think this is a pretty good interface/implementation. Let me know what you think!\r\n\r\nFirst, a function named \"`form_from_parquet`\" is likely to be misspelled, and we'd probably want more than just the Form, anyway, so `ak._v2.metadata_from_parquet` returns the Awkward Form and the Parquet metadata.\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> form, metadata = ak._v2.metadata_from_parquet(\"s3://pivarski-princeton/millionsongs\")\r\n/home/jpivarski/mambaforge/lib/python3.9/site-packages/fsspec/parquet.py:225: UserWarning: Not enough data was used to sample the parquet footer. Try setting footer_sample_size >= 10218222.\r\n  warnings.warn(\r\n```\r\n\r\n(I like that warning; it's almost good enough to copy-paste into the command.)\r\n\r\n```python\r\n>>> form, metadata = ak._v2.metadata_from_parquet(\r\n...     \"s3://pivarski-princeton/millionsongs\",\r\n...     footer_sample_size=10218222,\r\n... )\r\n```\r\n\r\nThe metadata is just the standard metadata object, and this Form has a lot of columns.\r\n\r\n```python\r\n>>> metadata\r\n<pyarrow._parquet.FileMetaData object at 0x7fc196651c70>\r\n  created_by: parquet-cpp version 1.5.1-SNAPSHOT\r\n  num_columns: 72\r\n  num_rows: 1000000\r\n  num_row_groups: 1015\r\n  format_version: 1.0\r\n  serialized_size: 10218214\r\n\r\n>>> for x in form.columns(): print(x)\r\n... \r\nhdf5_filename\r\nanalysis.bars.confidence\r\nanalysis.bars.start\r\nanalysis.beats.confidence\r\nanalysis.beats.start\r\nanalysis.sections.confidence\r\nanalysis.sections.start\r\nanalysis.segments.confidence\r\nanalysis.segments.start\r\nanalysis.segments.loudness_start\r\nanalysis.segments.loudness_max\r\nanalysis.segments.loudness_max_time\r\nanalysis.segments.pitches\r\nanalysis.segments.timbre\r\nanalysis.tatums.confidence\r\nanalysis.tatums.start\r\nanalysis.analysis_sample_rate\r\nanalysis.audio_md5\r\nanalysis.danceability\r\nanalysis.duration\r\nanalysis.energy\r\nanalysis.key\r\nanalysis.key_confidence\r\nanalysis.loudness\r\nanalysis.mode\r\nanalysis.mode_confidence\r\nanalysis.end_of_fade_in\r\nanalysis.start_of_fade_out\r\nanalysis.tempo\r\nanalysis.time_signature\r\nanalysis.time_signature_confidence\r\nanalysis.track_id\r\nanalysis.idx_bars_confidence\r\nanalysis.idx_bars_start\r\nanalysis.idx_beats_confidence\r\nanalysis.idx_beats_start\r\nanalysis.idx_sections_confidence\r\nanalysis.idx_sections_start\r\nanalysis.idx_segments_confidence\r\nanalysis.idx_segments_start\r\nanalysis.idx_segments_loudness_start\r\nanalysis.idx_segments_loudness_max\r\nanalysis.idx_segments_loudness_max_time\r\nanalysis.idx_segments_pitches\r\nanalysis.idx_segments_timbre\r\nanalysis.idx_tatums_confidence\r\nanalysis.idx_tatums_start\r\nmetadata.song_id\r\nmetadata.title\r\nmetadata.release\r\nmetadata.hotttnesss\r\nmetadata.artist_id\r\nmetadata.artist_name\r\nmetadata.artist_mbid\r\nmetadata.artist_playmeid\r\nmetadata.artist_familiarity\r\nmetadata.artist_hotttnesss\r\nmetadata.artist_location\r\nmetadata.artist_latitude\r\nmetadata.artist_longitude\r\nmetadata.artist_terms.term\r\nmetadata.artist_terms.freq\r\nmetadata.artist_terms.weight\r\nmetadata.artist_idx_artist_terms\r\nmetadata.artist_idx_similar_artists\r\nmetadata.artist_7digitalid\r\nmetadata.track_7digitalid\r\nmetadata.release_7digitalid\r\nmusicbrainz.artist_mbtags\r\nmusicbrainz.artist_mbtags_count\r\nmusicbrainz.idx_artist_mbtags\r\nmusicbrainz.year\r\n```\r\n\r\nWe can now make subforms by passing a selector (glob patterns, brace expansion, and a list is taken to mean \"or\"):\r\n\r\n```python\r\n>>> subform = form.select_columns(\"analysis.sections.*\")\r\n\r\n>>> subform.columns()\r\n['analysis.sections.confidence', 'analysis.sections.start']\r\n\r\n>>> print(subform)\r\n{\r\n    \"class\": \"RecordArray\",\r\n    \"contents\": {\r\n        \"analysis\": {\r\n            \"class\": \"BitMaskedArray\",\r\n            \"mask\": \"u8\",\r\n            \"valid_when\": true,\r\n            \"lsb_order\": true,\r\n            \"content\": {\r\n                \"class\": \"RecordArray\",\r\n                \"contents\": {\r\n                    \"sections\": {\r\n                        \"class\": \"ListOffsetArray\",\r\n                        \"offsets\": \"i32\",\r\n                        \"content\": {\r\n                            \"class\": \"RecordArray\",\r\n                            \"contents\": {\r\n                                \"confidence\": \"float64\",\r\n                                \"start\": \"float64\"\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis selector is used by `ak._v2.from_parquet`.\r\n\r\n```python\r\n>>> array = ak._v2.from_parquet(\r\n...     \"s3://pivarski-princeton/millionsongs\",\r\n...     footer_sample_size=10218222,\r\n...     columns=\"analysis.sections.*\",\r\n... )\r\n```\r\n\r\nAbout 2 minutes later, we get an array. (It's a big file, and we're slicing across all million songs.)\r\n\r\n```python\r\n>>> array\r\n<Array [{analysis: {sections: [...]}}, {...}, ..., {...}] type='1000000 * {...'>\r\n\r\n>>> print(array.type)\r\n1000000 * {analysis: {sections: var * {confidence: float64, start: float64}}}\r\n\r\n>>> array.show()\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n...,\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}},\r\n{analysis: {sections: [{confidence: 1, start: 0}, ..., {...}]}}]\r\n\r\n>>> array.analysis.sections.show()\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.268, start: 203}],\r\n[{confidence: 1, start: 0}, {...}, ..., {...}, {confidence: 0.768, start: 96}],\r\n[{confidence: 1, start: 0}, {...}, ..., {...}, {confidence: 0.62, start: 198}],\r\n[{confidence: 1, start: 0}, {...}, ..., {...}, {confidence: 0.52, start: 188}],\r\n[{confidence: 1, start: 0}, {...}, ..., {...}, {confidence: 1, start: 140}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.426, start: 238}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.366, start: 194}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.161, start: 377}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.457, start: 143}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.363, start: 169}],\r\n...,\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.767, start: 184}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.022, start: 438}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.805, start: 300}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.425, start: 315}],\r\n[{confidence: 1, start: 0}, {...}, ..., {...}, {confidence: 0.87, start: 220}],\r\n[{confidence: 1, start: 0}, {...}, ..., {...}, {confidence: 1, start: 247}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.707, start: 114}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.938, start: 197}],\r\n[{confidence: 1, start: 0}, {...}, ..., {confidence: 0.678, start: 470}]]\r\n```\r\n\r\nAt no point did we need to specify that nested lists are represented by `\"list.item\"` in this Parquet file. That's an option (`list_indicator`), and hopefully, we can get its value from the metadata somehow. The brute force approach would be to try `\"list.item\"` and `\"element\"` and any other standards, seeing if applying them to the Form results in matches in the Parquet metadata's column list. Or just by looking up a known list type and seeing what's there.",
  "created_at":"2022-03-11T21:44:55Z",
  "id":1065558925,
  "issue":1338,
  "node_id":"IC_kwDODBCWws4_gyON",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-11T21:44:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually, that metadata function should also return the list of matched paths.\r\n\r\nAnd maybe the selector for row groups should take a single list of global integers, instead of a list of lists of row groups in each file.",
  "created_at":"2022-03-11T21:52:13Z",
  "id":1065565597,
  "issue":1338,
  "node_id":"IC_kwDODBCWws4_gz2d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-11T21:52:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I'll have a look early next week.\r\n\r\n> At no point did we need to specify that nested lists are represented by \"list.item\" in this Parquet file. That's an option (list_indicator), and hopefully, we can get its value from the metadata somehow. The brute force approach would be to try \"list.item\" and \"element\" and any other standards\r\n\r\nSince this extra nesting level is ALWAYS a \"repeated\" type and the only member of an \"optional list\" type, we probably don't need to guess. I seem to recall that we've come across one other besides item/element.",
  "created_at":"2022-03-11T22:20:23Z",
  "id":1065583781,
  "issue":1338,
  "node_id":"IC_kwDODBCWws4_g4Sl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-11T22:20:23Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"Just a couple of interface improvements before merging:\r\n\r\n  * `ak._v2.metadata_from_parquet` returns a namedtuple with `form`, `fs`, `paths`, and Parquet `metadata`, leaving open the possibility that we'll want to add more items.\r\n  * `ak._v2.from_parquet` takes `row_groups` as a simple list (or set, because order is ignored) of global values.\r\n  * `list_indicator` is still hard-coded as `\"list.item\"`. That's a FIXME for after this PR.\r\n\r\nExamples:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> meta = ak._v2.metadata_from_parquet(\"s3://pivarski-princeton/millionsongs\")\r\n/home/jpivarski/mambaforge/lib/python3.9/site-packages/fsspec/parquet.py:225: UserWarning: Not enough data was used to sample the parquet footer. Try setting footer_sample_size >= 10218222.\r\n  warnings.warn(\r\n>>> meta.paths\r\n['pivarski-princeton/millionsongs/millionsongs-A-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-B-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-C-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-D-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-E-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-F-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-G-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-H-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-I-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-J-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-K-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-L-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-M-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-N-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-O-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-P-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-Q-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-R-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-S-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-T-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-U-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-V-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-W-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-X-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-Y-zstd.parquet', 'pivarski-princeton/millionsongs/millionsongs-Z-zstd.parquet']\r\n>>> meta.metadata\r\n<pyarrow._parquet.FileMetaData object at 0x7f9e4316e220>\r\n  created_by: parquet-cpp version 1.5.1-SNAPSHOT\r\n  num_columns: 72\r\n  num_rows: 1000000\r\n  num_row_groups: 1015\r\n  format_version: 1.0\r\n  serialized_size: 10218214\r\n>>> array = ak._v2.from_parquet(\"s3://pivarski-princeton/millionsongs\", columns=\"analysis.sections.*\", row_groups={41, 40, 39})\r\n>>> array\r\n<Array [{analysis: {sections: [...]}}, {...}, ..., {...}] type='2100 * {ana...'>\r\n```\r\n\r\nNow I'll be merging this because I need to be able to read Parquet files for a performance study.",
  "created_at":"2022-03-15T18:22:56Z",
  "id":1068315767,
  "issue":1338,
  "node_id":"IC_kwDODBCWws4_rTR3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T18:22:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"https://github.com/scikit-hep/awkward-1.0/blob/97ab44c37da96776b09fab1936326b02ccf1f85d/src/awkward/_v2/operations/convert/ak_from_parquet.py#L130-L131",
  "created_at":"2022-03-15T18:24:05Z",
  "id":1068317084,
  "issue":1338,
  "node_id":"IC_kwDODBCWws4_rTmc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T18:24:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"```python\r\nassert isinstance(out, tuple) and all(isinstance(x, np.ndarray) for x in out)\r\n```\r\n\r\nThe output of `completely_flatten` is a tuple of `nplike.ndarray`, not `np.ndarray` unless `nplike is ak.nplike.Numpy.instance()`.\r\n\r\n#1340 fixes it.",
  "created_at":"2022-03-03T20:08:04Z",
  "id":1058438065,
  "issue":1339,
  "node_id":"IC_kwDODBCWws4_Fnux",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T20:08:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1340?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1340](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1340?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6159651) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1340?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/operations/structure/ak\\_flatten.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1340/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZsYXR0ZW4ucHk=) | `91.42% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_ravel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1340/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX3JhdmVsLnB5) | `90.90% <100.00%> (\u00f8)` | |\n",
  "created_at":"2022-03-03T20:17:21Z",
  "id":1058444990,
  "issue":1340,
  "node_id":"IC_kwDODBCWws4_Fpa-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T20:17:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski Not sure if this is helpful, but I did a quick grep and found a few other places in `v2` where we reference `np.ndarray`, e.g. `ak.type`. I didn't check whether they're actually resolving against `numpy.ndarray`, or if the usage is acceptable. ",
  "created_at":"2022-03-03T20:19:04Z",
  "id":1058446337,
  "issue":1340,
  "node_id":"IC_kwDODBCWws4_FpwB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T20:19:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Do you mean these two?\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/61596516352066437e602040f0e89eb2d8a78a79/src/awkward/_v2/operations/structure/ak_fill_none.py#L54-L74\r\n\r\nActually, these are the `fill_value` for `ak.fill_none`, and they're coming from the user\u2014NumPy arrays are one of the possible input types. The other cases I came across are similar.\r\n\r\nWhich cases are you talking about?",
  "created_at":"2022-03-03T20:25:42Z",
  "id":1058451177,
  "issue":1340,
  "node_id":"IC_kwDODBCWws4_Fq7p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T20:25:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"`ak.type` is also just checking possible user inputs, which includes `np.ndarray`.\r\n\r\nThe thing that had to be fixed here is that these arrays are coming out of a layout (`layout.completely_flatten(...)`), and so they'd have whatever array type the `nplike` says. That's a different context from data that comes from a user.",
  "created_at":"2022-03-03T20:26:53Z",
  "id":1058452382,
  "issue":1340,
  "node_id":"IC_kwDODBCWws4_FrOe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T20:26:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Sure, I might be missing the obvious here. Is it possible that a user will knowingly call `ak.XXX` functions on `TypeTracerArray`? Is that a useful thing that a keen user might wish to do?",
  "created_at":"2022-03-03T21:00:57Z",
  "id":1058491731,
  "issue":1340,
  "node_id":"IC_kwDODBCWws4_F01T",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T21:00:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It shouldn't be possible. The TypeTracer was created just to support Dask, though you may have found another good use for it in avoiding duplication between Content methods and Form methods.\r\n\r\nIt's in a module named with an underscore\u2014there's no way to make one without invoking private code (so not even \"mid-level,\" really \"low-level\"!). A user might get one from a Dask Awkward Array's `meta`, but hopefully this is considered private, too.\r\n\r\nThat doesn't preclude the possibility of accidents (bugs), but users aren't _supposed_ to be able to see them.",
  "created_at":"2022-03-03T21:24:07Z",
  "id":1058508177,
  "issue":1340,
  "node_id":"IC_kwDODBCWws4_F42R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T21:24:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"It looks like this is safe for me to merge (no more work to do).",
  "created_at":"2022-03-03T21:24:27Z",
  "id":1058508436,
  "issue":1340,
  "node_id":"IC_kwDODBCWws4_F46U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-03T21:24:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I know we talked about this somewhere (Gitter?). In light of all the things that have to get done, I'm going to mark this as \"wontfix\" because baking the size information into the type is what a RegularArray is. That makes it not quite the same as a NumPy array in a precompiled context.\r\n\r\nIt does have consequences for performance: different regular sizes force Numba to recompile functions, as you point out, but it also injects a constant into loops for LLVM to optimize, whereas Numba's NumPy handling can't perform that optimization. So you gain on runtime and lose in compilation time. Interestingly, the Numba team was discussing the possibility of going the other way with their NumPy handling (as an option, not a requirement).\r\n\r\nWhat we're talking about here should be considered a new type.\r\n\r\n   * ListType has list lengths that vary from item to item,\r\n   * this would have list lengths that are all the same in an array, but not part of the Form or Type and not used to compile code in Numba, and\r\n   * RegularArray, which has list lengths that are all the same in an array and it is part of the Form/Type and is used to compile.\r\n\r\nThat middle case would have to store its `size` somewhere in an array buffer (of length 1?) because it can't be in the Form/Type object. Conflating the last two bullet points, i.e. making a RegularType in which the `size` is in the Form/Type but is compiled in Numba with runtime `size`, rather than compile-time `size`, would be possible but it feels to me like mixing concepts.\r\n\r\nAdding a new node type is a big project, and it would differ from an existing node in a subtle way. And on top of that, we just have so much to do.",
  "created_at":"2022-04-15T19:02:05Z",
  "id":1100295731,
  "issue":1343,
  "node_id":"IC_kwDODBCWws5BlS4z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:02:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Definitely not proposing a new node type, particularly not when it would only be required to support Numba! \r\n\r\n> making a RegularType in which the size is in the Form/Type but is compiled in Numba with runtime size, rather than compile-time size, would be possible but it feels to me like mixing concepts\r\n\r\nThis was what I was thinking of. However, it might be that we just accept that users need to be aware of these cases. Where users have layouts that change in regular size, they would need to convert the layout to jagged lists ahead-of-time. \r\n\r\n>  the Numba team was discussing the possibility of going the other way with their NumPy handling\r\n\r\nHuh, I hadn't seen that. Interesting. The motivation for filing this issue was that we differ from Numba, so when a user has a `ak.from_numpy` array, it behaves differently to the pure NumPy array, (at least, I assume that we don't have a special case for the `Regular(Numpy)` case in our Numba interface. Maybe that's acceptable, with the right docs.\r\n\r\nThe other issues that we have to work on certainly take precedence over this one. Maybe we'll revisit it in the future if we find it is a pressing concern.\r\n",
  "created_at":"2022-04-16T11:31:53Z",
  "id":1100644952,
  "issue":1343,
  "node_id":"IC_kwDODBCWws5BmoJY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-16T11:31:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1344](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7e85894) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.33%`.\n> The diff coverage is `50.26%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `90.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2JpdG1hc2tlZGZvcm0ucHk=) | `78.04% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2J5dGVtYXNrZWRmb3JtLnB5) | `77.33% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `79.62% <0.00%> (-0.38%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| ... and [133 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1344/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-07T13:08:53Z",
  "id":1060668978,
  "issue":1344,
  "node_id":"IC_kwDODBCWws4_OIYy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-07T13:08:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1345?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1345](https://codecov.io/gh/scikit-hep/awkward/pull/1345?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cc5e15c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `1.35%`.\n> The diff coverage is `7.17%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1345?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2F2cm8ucHk=) | `5.51% <5.51%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2F2cm8ucHk=) | `38.88% <38.88%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_std.py](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfc3RkLnB5) | `64.70% <0.00%> (-22.80%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfbWVhbi5weQ==) | `63.63% <0.00%> (-13.29%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_var.py](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfdmFyLnB5) | `68.00% <0.00%> (-13.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `77.24% <0.00%> (-12.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_argmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfYXJnbWF4LnB5) | `90.00% <0.00%> (-10.00%)` | :arrow_down: |\n| ... and [150 more](https://codecov.io/gh/scikit-hep/awkward/pull/1345/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-07T14:24:32Z",
  "id":1060742527,
  "issue":1345,
  "node_id":"IC_kwDODBCWws4_OaV_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-09T10:29:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I was *not* expecting a pure python implementation! Have you seen https://github.com/martindurant/uavro ?",
  "created_at":"2022-03-23T18:34:39Z",
  "id":1076685581,
  "issue":1345,
  "node_id":"IC_kwDODBCWws5ALOsN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-23T18:34:39Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"The pure Python implementation is a stepping-stone.",
  "created_at":"2022-03-23T18:50:45Z",
  "id":1076701466,
  "issue":1345,
  "node_id":"IC_kwDODBCWws5ALSka",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-23T18:50:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Is this an early draft of what became #1491? If so, let's close this one, since you're finished `ak.from_avro_file`.",
  "created_at":"2022-06-30T13:01:18Z",
  "id":1171191224,
  "issue":1345,
  "node_id":"IC_kwDODBCWws5FzvW4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-30T13:01:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yep this is the branch where I got the version with generated Python to work. Then I started a new branch from this to incorporate Forth generation. I'll close it up.",
  "created_at":"2022-06-30T13:09:24Z",
  "id":1171199420,
  "issue":1345,
  "node_id":"IC_kwDODBCWws5FzxW8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-30T13:09:45Z",
  "user":"MDQ6VXNlcjUwNTc3ODA5"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1346](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4c99fc7) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.33%`.\n> The diff coverage is `50.26%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `90.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2JpdG1hc2tlZGZvcm0ucHk=) | `78.04% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2J5dGVtYXNrZWRmb3JtLnB5) | `77.33% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `79.62% <0.00%> (-0.38%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| ... and [133 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1346/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-07T21:11:48Z",
  "id":1061140640,
  "issue":1346,
  "node_id":"IC_kwDODBCWws4_P7ig",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-07T21:11:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1347](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (23a3ef4) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.42%`.\n> The diff coverage is `52.72%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2JpdG1hc2tlZGZvcm0ucHk=) | `78.04% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2J5dGVtYXNrZWRmb3JtLnB5) | `77.33% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `79.62% <0.00%> (-0.38%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/indexedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2luZGV4ZWRmb3JtLnB5) | `80.00% <0.00%> (\u00f8)` | |\n| ... and [135 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1347/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-08T09:49:10Z",
  "id":1061593375,
  "issue":1347,
  "node_id":"IC_kwDODBCWws4_RqEf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-08T09:49:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1348](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (64badbd) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.28%`.\n> The diff coverage is `47.84%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `90.36% <\u00f8> (+0.36%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2JpdG1hc2tlZGZvcm0ucHk=) | `78.82% <0.00%> (+0.77%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2J5dGVtYXNrZWRmb3JtLnB5) | `78.20% <0.00%> (+0.87%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `78.94% <0.00%> (-1.06%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| ... and [162 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1348/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-08T10:34:48Z",
  "id":1061634421,
  "issue":1348,
  "node_id":"IC_kwDODBCWws4_R0F1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T13:21:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closing for now as not a priority. Implementation is mostly there, will revisit in near future.",
  "created_at":"2022-05-02T15:16:21Z",
  "id":1115023147,
  "issue":1348,
  "node_id":"IC_kwDODBCWws5Cdecr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T15:16:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah drat. I knew I was getting confused somewhere: we do different things for v1 and v2, and I was referencing v2 /v1 interchangably.\r\n\r\nv2 now does (4), which makes it more obvious that `slot1` is just syntactic sugar for `\"1\"`. I'm happy that this is clear enough for the user.",
  "created_at":"2022-03-08T12:07:32Z",
  "id":1061709355,
  "issue":1350,
  "node_id":"IC_kwDODBCWws4_SGYr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-08T14:13:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1351](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5672200) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.54%`.\n> The diff coverage is `52.17%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `90.36% <\u00f8> (+0.36%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `83.59% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [140 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1351/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-08T15:22:35Z",
  "id":1061893803,
  "issue":1351,
  "node_id":"IC_kwDODBCWws4_Szar",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T18:36:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Actually, I'm going to use the form for this, so that we aren't arbitrarily restricted to contents",
  "created_at":"2022-03-08T15:54:55Z",
  "id":1061929864,
  "issue":1351,
  "node_id":"IC_kwDODBCWws4_S8OI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-08T15:54:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"(Internal) methods like `purelist_depth` and `fields` can also be implemented using only Form information, too, but rather than construct an entire Form tree just to get the answer to a simple question, these methods are duck-typed between the concrete Form and corresponding Content. Like all of these:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/2e8ce81763bfd263ff55e79838c221658ae9a4c0/src/awkward/_v2/contents/content.py#L1201-L1223\r\n\r\nA similar pattern would work for `is_tuple` here.\r\n\r\nActually, instead of making a function for `recursively_apply`, what I would do is open all the src/awkward/_v2/forms/*.py files and put an `is_tuple` right after every `fields`, then add the duck-typed entry point in src/awkward/_v2/contents/content.py (next to `fields`).\r\n\r\nThere are competing advantages between the \"put a method in every subclass\" and \"write a function that knows about all classes\" techniques. Arguably, it's better to have the information associated with the subclass itself (making it easier to create a new subclass), and arguably, it's better to have the information for all subclasses in one place, for a particular function. Basically, we have a 2D table of classes and functionality, and sometimes it seems better to have whole rows together (all information about one class in one place) and sometimes it seems better to have whole columns together (all information about one function in one place). Since we have to make a choice, the choice for v2 has been to put it in the classes wherever possible, and in a function when it is not possible, which usually means more than one array. This is why `recursively_apply` is a method on all classes and `broadcast_and_apply` is a standalone function. `is_tuple` is very similar to `fields`, so I would do the same thing with it.",
  "created_at":"2022-03-08T16:07:59Z",
  "id":1061943475,
  "issue":1351,
  "node_id":"IC_kwDODBCWws4_S_iz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-08T16:07:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Right, the same thought occurred to me. I quite like the high-level separation of \"core\" vs \"extra\" traits & methods, but I can also see the benefit from a maintenance/style perspective of doing this in-line. I'll take your preference into account in future! :)\r\n\r\n",
  "created_at":"2022-03-08T16:13:06Z",
  "id":1061948878,
  "issue":1351,
  "node_id":"IC_kwDODBCWws4_TA3O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-08T16:20:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've implemented this per-form now, and added a `Content` property that refers to the `Form`.",
  "created_at":"2022-03-09T12:17:52Z",
  "id":1062862548,
  "issue":1351,
  "node_id":"IC_kwDODBCWws4_Wf7U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T12:17:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski it is done, and it's v2 only. Is it reasonable to only target v2 for new features? I can't recall where we stand on this.",
  "created_at":"2022-03-09T15:42:10Z",
  "id":1063055551,
  "issue":1351,
  "node_id":"IC_kwDODBCWws4_XPC_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T15:42:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It's a small feature and there's no reason to _stop_ ourselves from adding v1 features if they're easy. The \"new features in v2 only\" is a policy that saves us from having to do twice the work. @masonproffitt's use-case is in v1 (I'm pretty sure).",
  "created_at":"2022-03-09T15:54:40Z",
  "id":1063074874,
  "issue":1351,
  "node_id":"IC_kwDODBCWws4_XTw6",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-03-09T15:54:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski could you give a once-over for this PR with its v1 changes?",
  "created_at":"2022-03-09T17:17:47Z",
  "id":1063165748,
  "issue":1351,
  "node_id":"IC_kwDODBCWws4_Xp80",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T17:17:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The implementations of `Union*::is_tuple` appear to be correct now. Whenever you're done with the PR, go ahead and squash-and-merge!",
  "created_at":"2022-03-09T18:21:17Z",
  "id":1063223721,
  "issue":1351,
  "node_id":"IC_kwDODBCWws4_X4Gp",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-03-09T18:21:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1352](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (290c830) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.40%`.\n> The diff coverage is `52.17%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `90.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2JpdG1hc2tlZGZvcm0ucHk=) | `78.04% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2J5dGVtYXNrZWRmb3JtLnB5) | `77.33% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `79.62% <0.00%> (-0.38%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| ... and [133 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1352/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-08T14:42:44Z",
  "id":1061850784,
  "issue":1352,
  "node_id":"IC_kwDODBCWws4_So6g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-08T14:42:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed in favor of https://github.com/scikit-hep/awkward/issues/1738",
  "created_at":"2022-10-06T16:27:29Z",
  "id":1270368986,
  "issue":1353,
  "node_id":"IC_kwDODBCWws5LuEra",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T16:27:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1354](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6823f0f) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.57%`.\n> The diff coverage is `55.06%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2JpdG1hc2tlZGZvcm0ucHk=) | `78.04% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2J5dGVtYXNrZWRmb3JtLnB5) | `77.33% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `79.62% <0.00%> (-0.38%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/indexedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2luZGV4ZWRmb3JtLnB5) | `80.00% <0.00%> (\u00f8)` | |\n| ... and [138 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1354/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-09T09:33:44Z",
  "id":1062727380,
  "issue":1354,
  "node_id":"IC_kwDODBCWws4_V-7U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T09:33:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1355](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (51e97ad) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.97%`.\n> The diff coverage is `52.14%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [145 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1355/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-09T13:20:51Z",
  "id":1062914709,
  "issue":1355,
  "node_id":"IC_kwDODBCWws4_WsqV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-20T12:03:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1356](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c562ce5) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.54%`.\n> The diff coverage is `55.87%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `83.59% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [137 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1356/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-09T19:36:52Z",
  "id":1063287975,
  "issue":1356,
  "node_id":"IC_kwDODBCWws4_YHyn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-09T19:36:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi @dr-stringfellow, thanks for filing a bug report! \r\n\r\nThis is actually a design decision, and not a bug, but I can appreciate that it very much looks like a bug at first glance! You did help me discover a bug in our next version v2, though!\r\n\r\nAwkward Array builds upon the advanced indexing of NumPy. In NumPy, if you index with a boolean array, the result is a flat array. Because your second `arr` is NumPy-like (totally regular) layout, Awkward uses the NumPy indexing behavior, not Awkward's extension.\r\n\r\nIf you were to convert your array to a _jagged_ array, then it would index properly. A jagged array is any array with `var` in the `type`, even if every sublist has the same length.\r\n\r\nThere are some discussions about making this nicer, but for now you need to ensure that `arr > 0` is jagged. You can do this with multiple calls to `ak.from_regular` on `arr`, or on `arr > 0`. In either case, the result will be a jagged array.\r\n\r\nI think this does demonstrate that we need to improve the docs here. I was looking for any mention of this behavior, but it is currently missing (at least, in an obvious sense)!\r\n\r\nhttps://awkward-array.readthedocs.io/en/latest/_auto/ak.Array.html#nested-indexing\r\n",
  "created_at":"2022-03-09T21:36:20Z",
  "id":1063395877,
  "issue":1357,
  "node_id":"IC_kwDODBCWws4_YiIl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T15:42:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"What should `array[EmptyArray()]` return? Currently it is returning a `NumpyArray` with `int64`. This seems wrong to me, but there is no clear idea of what would be right. Maybe this should be an error?",
  "created_at":"2022-12-03T12:46:36Z",
  "id":1336153800,
  "issue":1358,
  "node_id":"IC_kwDODBCWws5PpBbI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T12:46:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"```python\r\narray[[]]\r\n```\r\n\r\nshould interpret the typeless list as though it were an array of integers, and the return value would be an empty array with the same type as `array`.\r\n\r\nIf the slicer has a type, then we use that: boolean, integers, strings.",
  "created_at":"2022-12-03T21:37:11Z",
  "id":1336262553,
  "issue":1358,
  "node_id":"IC_kwDODBCWws5Ppb-Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T21:37:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1359](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b8fe8e6) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.04%`.\n> The diff coverage is `51.21%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `83.59% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [145 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1359/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-10T01:18:49Z",
  "id":1063553107,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_ZIhT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T01:39:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@lukasheinrich, I should include you here, as this will be relevant for my talk to ATLAS, just as #1295 is.",
  "created_at":"2022-03-10T18:37:56Z",
  "id":1064373494,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_cQz2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T18:37:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"@jpivarski, is the C++ code available somewhere?",
  "created_at":"2022-03-10T18:49:10Z",
  "id":1064382666,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_cTDK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T18:49:10Z",
  "user":"MDQ6VXNlcjY1MTYzMDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The code you gave me is not included in this PR. I haven't figured out how to distribute it, yet, or even how much will be in clangdev itself.\r\n\r\nThe C++ samples I showed you yesterday (in Slack) were generated. I can copy them here.",
  "created_at":"2022-03-10T18:55:16Z",
  "id":1064387927,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_cUVX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T18:55:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Although you can't test it without @vgvassilev's InterpreterUtils.cpp (and maybe I can integrate that into Awkward's compiled code? no, not without depending on Cling...), this version is able to do the following:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> from awkward._v2._connect.cling import CppStatements\r\n>>> \r\n>>> a = ak._v2.Array([[0.0, 1.1, 2.2], [], [3.3, 4.4]])\r\n>>> \r\n>>> f = CppStatements(\"\"\"\r\n... \r\n... for (int i = 0; i < array.size(); i++) {\r\n...   printf(\"[\\\\n\");\r\n...   for (int j = 0; j < array[i].size(); j++) {\r\n...     printf(\"  %g\\\\n\", array[i][j]);\r\n...   }\r\n...   printf(\"]\\\\n\");\r\n... }\r\n... \"\"\", array=a)\r\n>>> \r\n>>> f(array=a)\r\n[\r\n  0\r\n  1.1\r\n  2.2\r\n]\r\n[\r\n]\r\n[\r\n  3.3\r\n  4.4\r\n]\r\n```\r\n\r\nThe `array=a` passed to the CppStatements constructor could instead be a Form, like `array=a.layout.form` (or more likely, something derived from a Parquet schema).\r\n\r\nBehind the scenes, this is the C++ code that was generated and JIT-compiled:\r\n\r\n```c++\r\n#include<sys/types.h>\r\nextern \"C\" int printf(const char*, ...);\r\n\r\nnamespace awkward {\r\n  class ArrayView {\r\n  public:\r\n    ArrayView(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : start_(start), stop_(stop), which_(which), ptrs_(ptrs) { }\r\n\r\n    size_t size() const noexcept {{\r\n      return stop_ - start_;\r\n    }}\r\n\r\n    bool empty() const noexcept {{\r\n      return start_ == stop_;\r\n    }}\r\n\r\n  protected:\r\n    ssize_t start_;\r\n    ssize_t stop_;\r\n    ssize_t which_;\r\n    ssize_t* ptrs_;\r\n  };\r\n}\r\nnamespace awkward {\r\n  class NumpyArray_float64_bdYFlthWcck: public ArrayView {\r\n  public:\r\n    NumpyArray_float64_bdYFlthWcck(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef double value_type;\r\n\r\n    \r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      return reinterpret_cast<double*>(ptrs_[which_ + 1])[start_ + at];\r\n    }\r\n  };\r\n}\r\nnamespace awkward {\r\n  class ListArray_ms7qTHCb7Ik: public ArrayView {\r\n  public:\r\n    ListArray_ms7qTHCb7Ik(ssize_t start, ssize_t stop, ssize_t which, ssize_t* ptrs)\r\n      : ArrayView(start, stop, which, ptrs) { }\r\n\r\n    typedef NumpyArray_float64_bdYFlthWcck value_type;\r\n\r\n    \r\n\r\n    value_type operator[](size_t at) const noexcept {\r\n      ssize_t start = reinterpret_cast<int64_t*>(ptrs_[which_ + 1])[start_ + at];\r\n      ssize_t stop = reinterpret_cast<int64_t*>(ptrs_[which_ + 2])[start_ + at];\r\n      return value_type(start, stop, ptrs_[which_ + 3], ptrs_);\r\n    }\r\n  };\r\n}\r\n\r\nvoid awkward_function_0(ssize_t awkward_argument_1_length, ssize_t awkward_argument_1_ptrs) {\r\nauto array = awkward::ListArray_ms7qTHCb7Ik(0, awkward_argument_1_length, 0, reinterpret_cast<ssize_t*>(awkward_argument_1_ptrs));\r\n\r\n\r\nfor (int i = 0; i < array.size(); i++) {\r\n  printf(\"[\\n\");\r\n  for (int j = 0; j < array[i].size(); j++) {\r\n    printf(\"  %g\\n\", array[i][j]);\r\n  }\r\n  printf(\"]\\n\");\r\n}\r\n\r\n}\r\n```\r\n\r\nThe user code is the last part, in the function with the generated name. Still thinking about interface...\r\n\r\nThanks to @vgvassilev for all the help in getting this to work! (It involved quite a lot of compiler details I didn't know about.)",
  "created_at":"2022-03-10T22:26:22Z",
  "id":1064567947,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_dASL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T22:26:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"For future reference (so that the information exists somewhere other than my hard drive), we needed\r\n\r\n```c++\r\n  std::vector<const char *> ClangArgv = {\"-Xclang\", \"-emit-llvm-only\",\r\n                                         \"-fPIC\", \"-fno-rtti\", \"-fno-exceptions\"};\r\n```\r\n\r\nto get this to work because the clangdev package that ships in conda-forge has exceptions turned off.\r\n\r\nAlso, it seems to me that this is the place to put `\"-O3\"`, unless it can also be controlled by a `#pragma`.",
  "created_at":"2022-03-10T22:29:32Z",
  "id":1064571838,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_dBO-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T22:29:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> For future reference (so that the information exists somewhere other than my hard drive)\r\n\r\nThis is the sign of someone who has been burned by this before :smile: ",
  "created_at":"2022-03-10T22:35:07Z",
  "id":1064577433,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_dCmZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T22:38:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> For future reference (so that the information exists somewhere other than my hard drive), we needed\r\n> \r\n> ```c++\r\n>   std::vector<const char *> ClangArgv = {\"-Xclang\", \"-emit-llvm-only\",\r\n>                                          \"-fPIC\", \"-fno-rtti\", \"-fno-exceptions\"};\r\n> ```\r\n> \r\n> to get this to work because the clangdev package that ships in conda-forge has exceptions turned off.\r\n> \r\n> Also, it seems to me that this is the place to put `\"-O3\"`, unless it can also be controlled by a `#pragma`.\r\n\r\nMaybe we do not need `fPIC` and sure, we can add `-O3`, I think `-O2` is safer.",
  "created_at":"2022-03-11T08:49:11Z",
  "id":1064900504,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_eReY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-11T08:49:11Z",
  "user":"MDQ6VXNlcjY1MTYzMDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Now we can use ArrayBuilder in C++ (pure Cling; adopted from @ianna's implementation in RDataFrame).\r\n\r\nFor example,\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> from awkward._v2._connect.cling import CppStatements\r\n>>> \r\n>>> a = ak._v2.Array([[0.0, 1.1, 2.2], [], [3.3, 4.4]])\r\n>>> b = ak._v2.ArrayBuilder()\r\n>>> \r\n>>> f = CppStatements(\"\"\"\r\n... for (int i = 0; i < array.size(); i++) {\r\n...   builder.begin_list();\r\n...   for (int j = 0; j < array[i].size(); j++) {\r\n...     builder.real(array[i][j]);\r\n...     builder.real(array[i][j]);\r\n...   }\r\n...   builder.end_list();\r\n... }\r\n... \"\"\", builder=b, array=a)\r\n>>> \r\n>>> f(array=a, builder=b)\r\n>>> \r\n>>> b.snapshot().show()   # all of the numbers have been inserted twice\r\n[0, 0, 1.1, 1.1, 2.2, 2.2],\r\n[],\r\n[3.3, 3.3, 4.4, 4.4]]\r\n```",
  "created_at":"2022-03-14T23:45:03Z",
  "id":1067417092,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_n34E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-14T23:45:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"With iterators and ArrayBuilder `append` methods, now the following works:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> from awkward._v2._connect.cling import CppStatements\r\n>>> \r\n>>> a = ak._v2.Array([[0.0, 1.1, 2.2], [], [3.3, 4.4]])\r\n>>> b = ak._v2.ArrayBuilder()\r\n>>> \r\n>>> f = CppStatements(\"\"\"\r\n... for (auto inner : array) {\r\n...   builder.begin_list();\r\n...   for (auto x : inner) {\r\n...     builder.append(x);\r\n...     builder.append(x);\r\n...   }\r\n...   builder.end_list();\r\n... }\r\n... \"\"\", builder=b, array=a)\r\n>>> \r\n>>> f(array=a, builder=b)\r\n>>> \r\n>>> b.snapshot().show()   # all of the numbers have been inserted twice\r\n[0, 0, 1.1, 1.1, 2.2, 2.2],\r\n[],\r\n[3.3, 3.3, 4.4, 4.4]]\r\n```\r\n\r\n@ianna, we should get together to talk about converging our PRs. I've taken your ArrayBuilder and reimplemented it with all the methods and pure C style function invocation (i.e. without bringing in `std::invoke`). The iterators I've implemented are rather different from yours\u2014they seem to be a lot more minimal. I don't know if there will be any unexpected effects from calling ROOT's `ProcessLine`, but if we're going to point at free-standing header files like src/awkward/_v2/_connect/_cling/is_iterable.h, we'll have to use Python `resources` to find them, or else it likely won't work in the package we distribute (they'll be in all sorts of different locations, and I don't know if ROOT will know what to take as the right local path). I'm not sure why we need an `is_iterable` compile-time function.\r\n\r\nFrom https://stackoverflow.com/a/36606852/1623645, I saw that the minimum we need for a class to be usable in a for-each loop is `begin` and `end` methods that return a type with `operator*`, `operator++`, and `operator!=`, so that's what the `Iterator<ARRAY, VALUE>` is. (Yeah, I used templates to define it when I could have generated it with Python, but in this case, the template is easier because it's just setting the array type, nothing more. Also, if somebody looks at the generated C++, they won't have to scroll past a bunch of Python-generated iterator classes; the C++ templates are written once, though the effective code-generation is the same.)\r\n\r\nThese iterators make a stack-bound copy of the ArrayView (32 bytes, better than trying to ensure that an iterator doesn't outlive the array it was made from) and an `at` integer (8 more bytes, total of 40), which is the only thing that gets incremented in the loop. We can't, in general, represent the iterator with a single pointer and increment it because not all Awkward types have a _single_ buffer of data to point to.\r\n\r\n...\r\n\r\nAlthough I did just think of a way to make it a bit more efficient. One moment...",
  "created_at":"2022-03-15T01:18:04Z",
  "id":1067462661,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_oDAF",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-03-15T01:18:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This last commit puts the data that used to be in `at_` into `start_` and constructs ArrayViews on the fly to produce values. So now Iterators are 32 bytes, rather than 40. The `operator!=` should be faster, too, because most of the comparisons will be in the `start_`.\r\n\r\nI'm not sure how much of the `operator[](size_t at)` with `at=0` the compiler will optimize, but it wouldn't be too ridiculous to add a code-path for `operator_at_zero()` (no arguments). This is auto-generated code, after all.\r\n\r\nBut more importantly, this last commit establishes an API for the Iterator that we can later optimize. It has exactly the same member content as the ArrayViews themselves (but it has to be separate because ArrayViews are immutable and Iterators walk).",
  "created_at":"2022-03-15T01:35:30Z",
  "id":1067470913,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_oFBB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T01:35:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually, we could also drop the `which` from all the ArrayViews, RecordViews, and Iterators by moving the `ptrs` when we descend into nested structure. ArrayViews and Iterators could be 24 bytes and RecordViews could be 16 bytes.\r\n\r\nI won't look at that, though, until I have a large-scale performance test set up.",
  "created_at":"2022-03-15T01:59:05Z",
  "id":1067481447,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_oHln",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T01:59:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Thinking about optimization derailed me. The main thing is, we have to figure out a merge strategy between this and #1295. If this one merges with main first, #1295 will need to adjust before it can merge.",
  "created_at":"2022-03-15T02:20:12Z",
  "id":1067491929,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_oKJZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T02:20:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Thinking about optimization derailed me. The main thing is, we have to figure out a merge strategy between this and #1295. If this one merges with main first, #1295 will need to adjust before it can merge.\r\n\r\n@jpivarski - It looks great! I really like it. If it\u2019s ready to be merged, please, go ahead. I\u2019ll either cherry pick from this PR or rebase mine.",
  "created_at":"2022-03-15T07:21:46Z",
  "id":1067651220,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_oxCU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T07:21:46Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, as long as it's not going to be difficult to merge later. Having this in main would let me try those variations.",
  "created_at":"2022-03-15T13:11:11Z",
  "id":1067971434,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_p_Nq",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-03-15T13:11:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Okay, as long as it's not going to be difficult to merge later. Having this in main would let me try those variations.\r\n\r\nI like difficult :-)",
  "created_at":"2022-03-15T13:13:26Z",
  "id":1067973539,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_p_uj",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":2,
   "total_count":2
  },
  "updated_at":"2022-03-15T13:13:26Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"> Actually, we could also drop the `which` from all the ArrayViews, RecordViews, and Iterators by moving the `ptrs` when we descend into nested structure. ArrayViews and Iterators could be 24 bytes and RecordViews could be 16 bytes.\r\n\r\nFor posterity: I looked into that, and hadn't remembered that the values in the \"Lookup\" array are absolute, not relative. I'd have to change a lot of things\u2014including Numba, because it uses the same lookup\u2014just to perform the test.\r\n\r\nAlso, I'm going to guess that it won't make much of a difference if I did. Numba ArrayViews are 40 bytes and C++ ArrayViews are 32 bytes (because Numba needs an extra pointer to allow for the possibility of returning an array slice as a Python object), but **they can be iterated over in nearly identical time**, probably dominated by CPU cache misses.\r\n\r\nUsing the `zlib9-jagged3.parquet` from [here](https://github.com/scikit-hep/awkward-1.0/blob/cd661ecf7546e63f647c6f444c07c4cbc643d532/studies/awkward-forth-performance/pyarrow-read-jaggedN-parquet.py#L12) (the \"triply nested\" data in [this paper](https://arxiv.org/abs/2102.13516)),\r\n\r\n```python\r\narray = ak._v2.from_parquet(\"zlib9-jagged3.parquet\")\r\nbuilder = ak._v2.ArrayBuilder()\r\n\r\n@nb.njit\r\ndef f_numba(array, builder):\r\n    out = 0.0\r\n    for inner1 in array:\r\n        for inner2 in inner1:\r\n            for inner3 in inner2:\r\n                for inner4 in inner3:\r\n                    out += inner4\r\n    builder.real(out)\r\n\r\nstarttime = time.time()\r\nf_numba(array, builder)\r\nprint(\"Numba time\", time.time() - starttime)\r\n\r\nprint(\"result\", builder.snapshot()[0])\r\n```\r\n\r\nconsistently takes 1.72 seconds (standard deviation of 0.01 seconds in 10 trials, without re-reading the array), and\r\n\r\n```python\r\narray = ak._v2.from_parquet(\"zlib9-jagged3.parquet\")\r\nbuilder = ak._v2.ArrayBuilder()\r\n\r\nf_cpp = CppStatements(\"\"\"\r\ndouble out = 0.0;\r\nfor (auto inner1 : array) {\r\n  for (auto inner2 : inner1) {\r\n    for (auto inner3 : inner2) {\r\n      for (auto inner4 : inner3) {\r\n        out += inner4;\r\n      }\r\n    }\r\n  }\r\n}\r\nbuilder.real(out);\r\n\"\"\", array=array, builder=builder)\r\n\r\nstarttime = time.time()\r\nf_cpp(array=array, builder=builder)\r\nprint(\"C++ time\", time.time() - starttime)\r\n\r\nprint(\"result\", builder.snapshot()[0])\r\n```\r\n\r\nconsistently takes 1.78 seconds (standard deviation of 0.01 seconds in 10 trials). That's with `-O3`, which is the equivalent of what Numba uses.\r\n\r\nFor scale, a tenth of the dataset, converted into Python builtin types (lists and floats), takes 2.93 seconds (standard deviation of 0.03 seconds in 10 trials), so both the C++ and Numba are about 17\u00d7 faster than pure Python here. (Python is particularly fast with its builtin types.)\r\n\r\nBy contrast, iterating through a (already filled!) `std::vector<std::vector<std::vector<std::vector<float>>>>` of the same data takes 12.69 seconds (standard deviation of 0.08 seconds in 10 trials), which is 2.3\u00d7 faster than Python but 7.2\u00d7 slower than the ArrayView iterators. This is an `-O3`-compiled, standalone program. Although the cause of the difference between ArrayView iterators and `std::vector` hasn't been narrowed down conclusively, there are at least two contenders:\r\n\r\n  * `std::vector` has a per-vector header that would be 24 bytes if [this SO answer](https://stackoverflow.com/a/52337100/1623645) is correct, and more data to ship from RAM into CPU cache costs time.\r\n  * The buffer associated with a `std::vector` is heap-allocated, so the data aren't even sequential in memory. That sounds like the biggest issue.\r\n\r\nBoth of the above apply to Python lists as well as `std::vector`, and a Python list (in Python 3) has 56 bytes of overhead. That could account for why Python lists and `std::vector` are in the same ballpark (differ by a factor of 2.3\u00d7), with the remaining slowdown in Python going to per-item type-checking. (Conjecture!)\r\n\r\nThe bottom line is that ArrayView iterators, whether in Numba or C++, are about equally fast and probably optimal. The fact that Numba's iterators are 8 bytes larger doesn't seem to make any perceptible difference, so I won't even go through the effort of making the C++ iterators another 8 bytes smaller.",
  "created_at":"2022-03-15T22:39:53Z",
  "id":1068534763,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_sIvr",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-03-15T22:39:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"By contrast, _writing_ data with ArrayBuilders is expensive.\r\n\r\nWriting 1/10th of the data, copying all of its nested structure in C++:\r\n\r\n```python\r\nf_cpp = CppStatements(\"\"\"\r\nfor (auto inner1 : array) {\r\n  builder.begin_list();\r\n  for (auto inner2 : inner1) {\r\n    builder.begin_list();\r\n    for (auto inner3 : inner2) {\r\n      builder.begin_list();\r\n      for (auto inner4 : inner3) {\r\n        builder.real(inner4);\r\n      }\r\n      builder.end_list();\r\n    }\r\n    builder.end_list();\r\n  }\r\n  builder.end_list();\r\n}\r\n\"\"\", array=array, builder=builder)\r\n```\r\n\r\nis consistently 21.8 seconds. (Remember, that's 1/10th of the data, so if I had enough memory for two whole copies of this array, the second would take 218 seconds to write. It took 1.78 seconds to read: 122\u00d7 faster.)\r\n\r\nWithout structure is faster:\r\n\r\n```python\r\nq_cpp = CppStatements(\"\"\"\r\nfor (auto inner1 : array) {\r\n  for (auto inner2 : inner1) {\r\n    for (auto inner3 : inner2) {\r\n      for (auto inner4 : inner3) {\r\n        builder.real(inner4);\r\n      }\r\n    }\r\n  }\r\n}\r\n\"\"\", array=array, builder=builder)\r\n```\r\n\r\nis consistently 6.9 seconds. (Still, 1/10th of the data.)\r\n\r\nSomehow, we managed to make this faster in Numba, although it's also going through external library function pointers, unable to optimize through the ArrayBuilder calls.\r\n\r\n```python\r\n@nb.njit\r\ndef f_numba(array, builder):\r\n    for inner1 in array:\r\n        builder.begin_list()\r\n        for inner2 in inner1:\r\n            builder.begin_list()\r\n            for inner3 in inner2:\r\n                builder.begin_list()\r\n                for inner4 in inner3:\r\n                    builder.real(inner4)\r\n                builder.end_list()\r\n            builder.end_list()\r\n        builder.end_list()\r\n```\r\n\r\nis consistently 4.8 seconds. (Still 1/10th of the data.)\r\n\r\n```python\r\n@nb.njit\r\ndef q_numba(array, builder):\r\n    for inner1 in array:\r\n        for inner2 in inner1:\r\n            for inner3 in inner2:\r\n                for inner4 in inner3:\r\n                    builder.real(inner4)\r\n```\r\n\r\nis consistently 2.0 seconds. (Still 1/10th of the data.)\r\n\r\nThe ArrayBuilder is dynamically typed, evaluating whether it should change its type model with every insertion. I don't expect it to be fast. It would be interesting to see what the LayoutBuilder can do here, since the LayoutBuilder is specialized to a given type, but the big difference between Numba and C++ makes me think that there's a bigger bottleneck before we get to the internals of ArrayBuilder vs LayoutBuilder.\r\n\r\nIn Numba, we put the function pointer from the external .so into a \"dynamic addresses\" part of Numba's infrastructure: `context.add_dynamic_addr` in\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/413f02a01027f8b2ec8b3168c021dd61db8b1c12/src/awkward/_v2/_connect/numba/builder.py#L14-L23\r\n\r\nIn C++, we JIT-compile a `reinterpret_cast<FunctionPointerType>(RAW_INTEGER_IN_SOURCE_CODE)` into the source:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/413f02a01027f8b2ec8b3168c021dd61db8b1c12/src/awkward/_v2/_connect/cling.py#L211-L396\r\n\r\nThe single-curly expressions like `{ctypes.cast(ak._libawkward.ArrayBuilder_length, ctypes.c_voidp).value}` evaluate (in Python) to literal integers, and those literal integers go into the code to be reinterpret-casted as function pointers, then called.\r\n\r\nAn ideal thing to do, since we have a JIT-compiler on hand, would be to generate specialized LayoutBuilder code (in C++, not Forth) that the compiler can optimize into the surrounding code that calls it. That would bypass whatever's wrong with the C++ function pointer calling, above, and function pointer calling in general (as well as the fact that Forth isn't as fast as C++). But _writing_ such a thing would take a lot of time, before we ever know if it's going to pay off.",
  "created_at":"2022-03-15T23:21:18Z",
  "id":1068557291,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_sOPr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T23:21:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I wonder, if dropping an ArrayBuilder shim class makes any difference: \r\nhttps://github.com/scikit-hep/awkward-1.0/pull/1295/files#diff-a48bdafeba779feab0a7581cdabf4d98ad62952bb52eec7ae76870ddda2f6641R131-R246\r\n\r\nI haven't dropped this code from the PR yet. There is a test:\r\n```python\r\n    rdf = ROOT.RDataFrame(10).Define(\"x\", \"gRandom->Rndm()\")\r\n\r\n    builder = ak._v2.highlevel.ArrayBuilder()\r\n    func = ak._v2._connect.rdataframe.from_rdataframe.connect_ArrayBuilder(\r\n        compiler, builder\r\n    )\r\n    compiler(\r\n        f\"\"\"\r\n    uint8_t\r\n    my_x_record(double x) {{\r\n        {func[\"beginrecord\"]}();\r\n        {func[\"field_fast\"]}(\"one\");\r\n        {func[\"real\"]}(x);\r\n        return {func[\"endrecord\"]}();\r\n    }}\r\n    \"\"\"\r\n    )\r\n\r\n    rdf.Foreach[\"std::function<uint8_t(double)>\"](ROOT.my_x_record, [\"x\"])\r\n\r\n    array = builder.snapshot()\r\n```",
  "created_at":"2022-03-16T11:44:22Z",
  "id":1069037550,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_uDfu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T11:44:22Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"You mean just go through functions, without having a class instance to organize it? I would have thought that generates the same bytecode.\r\n\r\nActually, perhaps I ought to play with godbolt and find out what bytecode the function pointer generates.\r\n\r\nMeanwhile, I've been thinking about adding an interface in which arrays and `std::vector` in the user code can be exported as a container for `ak._v2.from_buffers`. Using that would require more expertise from the user, but it's the fastest way to generate an array. (I need to demonstrate on Friday that it's _possible_ to get data into and out of ATLAS at a reasonable rate, even if only by experts.)",
  "created_at":"2022-03-16T12:21:16Z",
  "id":1069067861,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_uK5V",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-03-16T12:21:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"What if we extend an `ArrayBuilder` API with an `append_range<T>`?  We'd not need to update its `builder`, just copy the range of the `n` values (or append a contiguous buffer) to its `GrowableBuffer`.\r\n\r\nThe following loop:\r\n\r\n```python\r\n@nb.njit\r\ndef q_numba(array, builder):\r\n    for inner1 in array:\r\n        for inner2 in inner1:\r\n            for inner3 in inner2:\r\n                for inner4 in inner3:\r\n                    builder.real(inner4)\r\n```\r\n would become:\r\n```python\r\n@nb.njit\r\ndef q_numba(array, builder):\r\n    for inner1 in array:\r\n        for inner2 in inner1:\r\n            for inner3 in inner2:\r\n                builder.append_range_real(inner3.begin(), inner3.end()):\r\n```",
  "created_at":"2022-03-16T13:45:56Z",
  "id":1069148596,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_uem0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T13:45:56Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"That would reduce the number of external function pointer calls, but it's only applicable to data of primitive type (like `append_range_real`). Lists in HEP tend to be small, such as leptons with an average number of 1.0 or even 0.1 per event: calling a range-fill for a lot of empty events can actually be worse than not calling it in a loop. But then again, a user could add an if statement to avoid calling it on a loop, so yeah: having that range-fill function and users who know how to use it would be a net positive.\r\n\r\nBut rather than just work around the slow external function pointer, I'd like to understand why it's so slow in C++ and not in Numba. Numba provides an existence proof that external functions can be called a lot faster than they are with the `reinterpret_cast`. Something is a bottleneck in the C++. And for all we know at present, it might only be the incremental parser I'm using here, not the one you get in ROOT.\r\n\r\nFYI: I've also put `zlib9-jagged3.parquet` in a publicly accessible place, for repeatability: https://pivarski-princeton.s3.amazonaws.com/chep-2021-jagged-jagged-jagged/zlib9-jagged3.parquet",
  "created_at":"2022-03-16T15:49:42Z",
  "id":1069282733,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_u_Wt",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-03-16T15:49:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Cc: @sudo-panda, @wlav. I think both of them would be interested to follow this work here. ",
  "created_at":"2022-03-16T16:58:55Z",
  "id":1069354715,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_vQ7b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T16:58:55Z",
  "user":"MDQ6VXNlcjY1MTYzMDc="
 },
 {
  "author_association":"NONE",
  "body":"> But rather than just work around the slow external function pointer, I'd like to understand why it's so slow in C++\r\n> and not in Numba.\r\n\r\nJust a guess, but a straight-up function pointer is considerably faster than a relocation through the PLT (I saw `-fPIC` way up in this thread) in a tight loop, especially if you have lots of relocatable functions and two or more of them used in the inner loop are some distance in the table: the function pointer allows prediction, the jump through the PLT does not.\r\n\r\nI also saw `ProcessLine` mentioned, which I think enables the null checker pass. I actually don't know whether it applies to function pointers (Vassil?) but it's trouble in tight loops for two reasons: 1) it introduces a branch, and 2) it kills pattern-based optimizations (more of a problem for arrays than single pointers, though).",
  "created_at":"2022-03-16T17:24:30Z",
  "id":1069380024,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_vXG4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T17:24:30Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"MEMBER",
  "body":"The above doesn't use `ProcessLine`: this is directly through Clang Incremental, not ROOT.\r\n\r\nThere are two approaches being developed in parallel: @ianna is going through RDataFrame, which JIT-compiles strings through ROOT and Cling, in PR #1295.\r\n\r\nThis PR is about Clang Incremental, using a ctypes-enabled library (a prototype\u2014not for production). The performance plots above are all Clang Incremental vs Numba, and both of them access ArrayBuilder through external function pointers. The fact that the performance is so different is a clue that it's being done in a different way\u2014there's some source of overhead in the Clang Incremental set-up that isn't present in the Numba.",
  "created_at":"2022-03-16T17:45:50Z",
  "id":1069392966,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_vaRG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T17:45:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Hm, I suppose we can dump the llvm IR for both and compare them to see what gets optimized and how? @sudo-panda, do you want to take a look?",
  "created_at":"2022-03-16T17:57:33Z",
  "id":1069399359,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_vb0_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T17:57:33Z",
  "user":"MDQ6VXNlcjY1MTYzMDc="
 },
 {
  "author_association":"NONE",
  "body":"> Hm, I suppose we can dump the llvm IR for both and compare them to see what gets optimized and how? @sudo-panda, do you want to take a look?\r\n\r\nYeah!",
  "created_at":"2022-03-16T17:59:06Z",
  "id":1069400128,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_vcBA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T17:59:06Z",
  "user":"MDQ6VXNlcjE2NjkwNzYw"
 },
 {
  "author_association":"NONE",
  "body":"There must be more to it than just the IR. A single function pointer dispatch (of type `double(*)(double)` from Numba looks like this after disasm:\r\n\r\n```\r\n    vmovsd   6(%rsp), %xmm0\r\n    movabsq  $_ZN8__main__11go_fast_241B42c8tJTIeFCjyCbUFRqqOAK_2f6h0kCng1maAA_3d_3dEd, %rax\r\n    leaq     8(%rsp), %rdi\r\n    movq     $0, 8(%rsp)\r\n    callq    *%rax\r\n    vmovsd   8(%rsp), %xmm0\r\n```\r\n\r\nSo Numba is using absolute addressing for the call through the function pointer. I don't have \"clang incremental\" handy to try, but `clang++` actually generates relative addressing starting from `-O1` (i.e. no load and using a single instruction, albeit with `%rax` pushed on the stack for some reason, which is gone by `-O2`). Iow., Numba is actually not being optimally efficient here ...\r\n\r\nWhat about the loops themselves? As seen in this disasm, Numba enables `-mavx` by default. I don't see that argument listed in the set above in this thread for Clang?",
  "created_at":"2022-03-16T18:26:08Z",
  "id":1069420205,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_vg6t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T18:26:08Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"MEMBER",
  "body":"The loops themselves are (equally) fast: https://github.com/scikit-hep/awkward-1.0/pull/1359#issuecomment-1068534763.",
  "created_at":"2022-03-16T18:45:30Z",
  "id":1069460272,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_vqsw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T18:46:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Not convinced that that is comparable ... there the operation \"`+=` on native type `double`\" is fully visible (i.e. the compiler can deduce it has no side-effects). It can thus e.g. re-order the loops if that improves the memory layout (needs `-O3`, though). With the function pointer, it has to assume a worst case of the call having side-effects. I'd figure that with `-mavx` in both cases the inner loop could be unrolled and if so, I'd be curious to see whether the compiler reloads the function pointer in between invocations (I presume Numba can declare it const, in which case it would not need to).",
  "created_at":"2022-03-16T19:08:54Z",
  "id":1069508895,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_v2kf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T19:08:54Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, so here's a loop that fills output (assigning to an output array; pure side-effect) and the iteration through the whole dataset takes 2.04 seconds (standard deviation of 0.01 seconds in 10 trials). Iterating over the input without writing output (just summing the values with `+=`) took 1.78 seconds. We can see the difference, but it's small.\r\n\r\nTo do that, I added another interface to CppStatements, so that it accepts NumPy arrays as well as Awkward Arrays (PR #1372). Quick demo:\r\n\r\n```python\r\n>>> import numpy as np\r\n>>> import awkward as ak\r\n>>> from awkward._v2._connect.cling import CppStatements\r\n>>> \r\n>>> a = ak._v2.Array([[0.0, 1.1, 2.2], [], [3.3, 4.4]])\r\n>>> b = np.zeros(3, dtype=np.float64)\r\n>>> \r\n>>> f = CppStatements(\"\"\"\r\n... \r\n... for (int i = 0;  i < input.size();  i++) {\r\n...   output[i] = 0.0;\r\n...   for (auto x : input[i]) {\r\n...     output[i] += x;\r\n...   }\r\n... }\r\n... \r\n... \"\"\", input=a.layout.form, output=b.dtype)\r\n>>> \r\n>>> f(input=a, output=b)\r\n>>> \r\n>>> b\r\narray([3.3, 0. , 7.7])\r\n```\r\n\r\nNumPy arrays can be used as output because they're mutable (unlike Awkward Arrays). Unfortunately, they're also unstructured, but I can use them to make a structured object with the [ak.from_buffers](https://awkward-array.readthedocs.io/en/latest/_auto/ak.from_buffers.html) function.\r\n\r\nUsing the same input array,\r\n\r\n```python\r\narray = ak._v2.from_parquet(\"zlib9-jagged3.parquet\")\r\n```\r\n\r\nI make all the buffers I'll need to pass to [ak.from_buffers](https://awkward-array.readthedocs.io/en/latest/_auto/ak.from_buffers.html) by copying the shape and dtype of the original (not the contents).\r\n\r\n```python\r\noffsets1 = np.zeros_like(array.layout.offsets)\r\noffsets2 = np.zeros_like(array.layout.content.offsets)\r\noffsets3 = np.zeros_like(array.layout.content.content.offsets)\r\ndata = np.zeros_like(array.layout.content.content.content.data)\r\n```\r\n\r\nHere's a sequence of statements that puts the right values into `offsets1`, `offsets2`, `offsets3`, and `data` to copy the original `array`.\r\n\r\n```python\r\nf = CppStatements(\"\"\"\r\n\r\noffsets1[0] = 0;\r\noffsets2[0] = 0;\r\noffsets3[0] = 0;\r\n\r\nint i1 = 0;\r\nint i2 = 0;\r\nint i3 = 0;\r\nint i4 = 0;\r\n\r\nfor (auto inner1 : array) {\r\n  offsets1[i1 + 1] = offsets1[i1] + inner1.size();\r\n  i1++;\r\n  for (auto inner2 : inner1) {\r\n    offsets2[i2 + 1] = offsets2[i2] + inner2.size();\r\n    i2++;\r\n    for (auto inner3 : inner2) {\r\n      offsets3[i3 + 1] = offsets3[i3] + inner3.size();\r\n      i3++;\r\n      for (auto inner4 : inner3) {\r\n        data[i4] = inner4;\r\n        i4++;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\"\"\", array=array, offsets1=offsets1, offsets2=offsets2, offsets3=offsets3, data=data)\r\n```\r\n\r\nThe following line runs in 2.04 seconds, consistently:\r\n\r\n```python\r\nf(array=array, offsets1=offsets1, offsets2=offsets2, offsets3=offsets3, data=data)\r\n```\r\n\r\nTo put the NumPy arrays together into an Awkward Array with the original structure, we need a Form, labeled by `\"form_key\"` at each node, the `len(array)`, and a dict mapping `\"form_key\"` strings to the NumPy arrays. This operation is a view, not a copy.\r\n\r\n```python\r\noutput = ak._v2.from_buffers(\r\n  ak._v2.forms.from_json(\r\n    \"\"\"\r\n    {\r\n        \"class\": \"ListOffsetArray\",\r\n        \"offsets\": \"i32\",\r\n        \"content\": {\r\n            \"class\": \"ListOffsetArray\",\r\n            \"offsets\": \"i32\",\r\n            \"content\": {\r\n                \"class\": \"ListOffsetArray\",\r\n                \"offsets\": \"i32\",\r\n                \"content\": {\r\n                    \"class\": \"NumpyArray\",\r\n                    \"primitive\": \"float32\",\r\n                    \"form_key\": \"data\"\r\n                },\r\n                \"form_key\": \"offsets3\"\r\n            },\r\n            \"form_key\": \"offsets2\"\r\n        },\r\n        \"form_key\": \"offsets1\"\r\n    }\r\n    \"\"\"\r\n  ),\r\n  len(array),\r\n  {\r\n    \"offsets1\": offsets1,\r\n    \"offsets2\": offsets2,\r\n    \"offsets3\": offsets3,\r\n    \"data\": data,\r\n  },\r\n  buffer_key=\"{form_key}\",\r\n)\r\n```\r\n\r\nAnd now `output` is identical to the input `array`.\r\n\r\nThe time for this sequence of C++ statements, **2.04 seconds**, is close to a run without output of **1.78 seconds**, and it's very different from the **218 seconds** of writing to the ArrayBuilder through external pointers. Behind those external pointers, the ArrayBuilder does some dynamically typed stuff, so we could also compare it to the **69 seconds** of only filling the inmost `data` through a single external pointer per datum.\r\n\r\nAnd if you're thinking it's the ArrayBuilder itself, not the external pointers in Clang Incremental, filling just the inmost `data` with an ArrayBuilder through external pointers in Numba takes **20 seconds**. It could be that ArrayBuilder's overhead accounts for 20 \u2012 2 = 18 seconds, but then external pointers in Clang Incremental take 69 \u2012 20 = 49 seconds. I wouldn't be surprised by ArrayBuilder having this 18 seconds of overhead, but I _am_ surprised that Clang Incremental has this 49 seconds of overhead over Numba: they're doing very similar things.",
  "created_at":"2022-03-16T20:18:10Z",
  "id":1069583963,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_wI5b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T20:21:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Well, color me puzzled. I'll need to get a hand on \"clang incremental\" then to try it out or someone should post the disasm.\r\n\r\nJust as some more data points, I compared `cppyy.cppdef()` which is (from PyPI, not the ancient stuff that ROOT distributes!) my optimized equivalent of Cling's `declare()`. (Aside, it JITs about 10x faster than Numba, as it does not run the expensive loop optimizations, of all things!)\r\n\r\nFastest by far is passing a function pointer on the stack (i.e. as an argument; this outperforms Numba, too, but obviously no surprise as this removes the load), slowest is when JITted in but through a relocation. But even then, the spread is only ~16%.",
  "created_at":"2022-03-16T21:35:41Z",
  "id":1069659025,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_wbOR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T21:35:41Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"MEMBER",
  "body":"@vgvassilev, I hope it's alright: I've posted the code you sent me on https://gist.github.com/jpivarski/aad015ac893a0d9cca6c6f42a90a9505 with instructions for reproducing the above. I think all the warnings that I put there (and the fact that it's a gist, not a regular repo) should prevent anyone from taking it too seriously as production code.",
  "created_at":"2022-03-16T22:14:25Z",
  "id":1069687983,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_wiSv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T22:14:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"I am fine posting that code. ",
  "created_at":"2022-03-17T05:35:39Z",
  "id":1070344384,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_zCjA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T05:35:39Z",
  "user":"MDQ6VXNlcjY1MTYzMDc="
 },
 {
  "author_association":"NONE",
  "body":"How to get the parquet file? Closest I seem to get when following the white rabbit is [this script](https://github.com/scikit-hep/awkward-1.0/blob/cd661ecf7546e63f647c6f444c07c4cbc643d532/studies/awkward-forth-performance/make-data/make_jagged3_parquet.py), but it still needs inputs that don't seem to be available?",
  "created_at":"2022-03-17T18:21:56Z",
  "id":1071183155,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_2PUz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T18:21:56Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"NONE",
  "body":"Ah, found it in the thread above. :)",
  "created_at":"2022-03-17T18:43:36Z",
  "id":1071204000,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_2Uag",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T18:43:36Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"NONE",
  "body":"I can't get the Numba example to work yet:\r\n\r\n```def f_numba(array, builder):\r\n    out = 0.0\r\n    ^ \r\n\r\nThis error may have been caused by the following argument(s):\r\n- argument 0: Cannot determine Numba type of <class 'awkward._v2.highlevel.Array'>\r\n- argument 1: Cannot determine Numba type of <class 'awkward._v2.highlevel.ArrayBuilder'>\r\n```\r\n\r\nmight be obvious, but I'm still new to Numba.\r\n\r\nHowever, when checking with top (yay for simple tools :) ), I find that both slow Cpp examples are massive memory hogs: the 6.9s one runs up to 8GB, then jumps to ~17GB at the end. The other increases slowly up to ~14GB, then jumps to ~19GB at the end.\r\n\r\nI still see a rough 3x difference just like you do (more like 2.6x, from 57s and 22s, but I don't think I restricted the data set), and it can't be swapping, so smells to me that there are superfluous copies being made? With the slower one, which uses more memory, making more copies?\r\n\r\nJust putting that out there in case it rings a bell? Will check in more detail once I get the Numba code to work ...",
  "created_at":"2022-03-17T19:24:29Z",
  "id":1071247719,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_2fFn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T19:24:29Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"MEMBER",
  "body":"Sorry about the issue with the Numba examples. Run this:\r\n\r\n```python\r\nak._v2.numba.register()\r\n```\r\n\r\nIt's because everything in the `ak._v2` submodule is a second implementation of the library, with the intention of replacing it when Awkward 2.0 is released (somewhat like the `ROOT::Experimental` namespace). The Numba extensions for Awkward v1 are automatically registered, but v2 is opt-in to make sure that there are no conflicts that break it for existing Numba users. (There shouldn't be\u2014the type names are different\u2014but I'm paranoid about breaking things for production users.)\r\n\r\nWith that, Numba should recognize these `_v2` arrays as things that can be in an `@nb.njit` function.\r\n\r\n------\r\n\r\nI would _not_ expect any changes in memory when going through the external function pointer, other than the fact that the ArrayBuilder contains [GrowableBuffers](https://awkward-array.readthedocs.io/en/latest/_static/classawkward_1_1GrowableBuffer.html) that fill up like `push_back` on `std::vector`\u2014i.e. replaces its buffer with another 1.5\u00d7 larger every time the limit is reached. The memory use should jump exponentially larger, logarithmically less often. That effect would be clearest to see in the example without `builder.begin_list()`/`end_list()`. If it only has one `builder.real(...)` call, then it only has one GrowableBuffer, and you wouldn't see different GrowableBuffers expanding at different times.\r\n\r\nIf there's a large memory use when `snapshot()` happens, that can be the final transfer from ArrayBuilder to the new Array.",
  "created_at":"2022-03-17T19:41:22Z",
  "id":1071283297,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_2nxh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T19:41:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Thanks! With that the Numba example works! It doesn't spike in memory like the other ones. Yes, growing with 1.5x will cause lots of memory copying all around and is the most likely culprit. Yes, the number of jumps slows down logarithmically with size, but the amount of copying needed on each jump grows exponentially (okay `exp(n-1)`).\r\n\r\nA q&d profiling with perf checks the whole program, not just the timed portion, but total time scaling is pretty close to the load/store count scaling.\r\n\r\nA q&d profiling with operf, also whole program, unequivocally puts the blame on `_ext.cpython-38-x86_64-linux-gnu.so`. Doesn't show symbols, I guess no `-g` used, but it is indeed the home of `GrowableBuffer`, per `nm -D`.\r\n\r\nIs there any way you can use the semantic equivalent of `reserve()` somewhere?\r\n\r\nAside, mixing Numba and AArrayclangInterpreter in the same file results in a segfault in `llvm::TargetPassConfig::addPass(llvm::Pass*)`.",
  "created_at":"2022-03-17T20:57:25Z",
  "id":1071464905,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_3UHJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T20:57:25Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"MEMBER",
  "body":"Since the ArrayBuilder is used in both the Numba and C++ demos, they should show the same memory growth and copying, though the C++ demo still takes longer than the Numba one. As for the copying, we're slowly moving to a model that requires less copying: since `snapshot()` is rare, we no longer require that to be a view, and so the accumulated data no longer needs to be contiguous. It could be a linked list of large buffers (or similar), with the discontiguous pieces concatenated in a single copy in `snapshot()`.\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/pull/1359#issuecomment-1069583963 is the semantic equivalent of \"reserve\": the arrays that get filled in this example are preallocated with a given size. In general use-cases, we won't know the size, so we can't always use this technique. That's the one that's 2.04 seconds instead of 218 seconds (with 1.78 seconds to iterate without producing output).\r\n\r\nTo really zero in on the external function pointer, instead of ArrayBuilder's memory usage, how about\r\n\r\n```python\r\nimport numpy as np\r\nimport awkward as ak\r\nfrom awkward._v2._connect.cling import CppStatements\r\n\r\nbuilder = ak._v2.ArrayBuilder()\r\n\r\nf = CppStatements(\"\"\"\r\nfor (int i = 0;  i < 1000000000;  i++) {\r\n  int64_t result;\r\n  builder.length(&result);\r\n}\r\n\"\"\", builder=builder)\r\n\r\nf(builder=builder)\r\n```\r\n\r\nversus\r\n\r\n```python\r\ndummy = np.array([0])\r\n\r\ng = CppStatements(\"\"\"\r\nfor (int i = 0;  i < 1000000000;  i++) {\r\n  dummy[0] = dummy[0] * 2 - 1;   // complicated enough that the optimizer can't remove it?\r\n}\r\n\"\"\", dummy=dummy)\r\n\r\ng(dummy=dummy)\r\n```\r\n\r\nbecause `builder.length` has to go through an external pointer, but does not fill anything. `f` takes 8.1 seconds and `g` takes 0.06 seconds for me.\r\n\r\nThe Numba equivalent of `f`:\r\n\r\n```python\r\nimport numba as nb\r\nimport awkward as ak\r\nak._v2.numba.register()\r\n\r\n@nb.njit\r\ndef f(builder):\r\n    for i in range(1000000000):\r\n        len(builder)\r\n\r\nf(builder)\r\n```\r\n\r\ntakes 3.0 seconds, which is noticeably less than 8.1 seconds. That's the odd thing: that they're both external function calls, but Numba is faster. I would have thought they'd be the same. It's an indication that _something_ is slowing down Clang Incremental's use of external function pointers.\r\n\r\n> Aside, mixing Numba and AArrayclangInterpreter in the same file results in a segfault in `llvm::TargetPassConfig::addPass(llvm::Pass*)`.\r\n\r\nI noticed that, too, and forgot to report it to @vgvassilev! (I didn't narrow it down, though, just noticed that I needed separate conda environments for Numba and clangdev.) Thanks for doing so.",
  "created_at":"2022-03-17T21:25:57Z",
  "id":1071514340,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_3gLk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T22:36:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Not sure what `dummy` is above, but if an array of `double`, then that 2nd example's loop gets unrolled (at `-O3`) using AVX (16x) and FMA (2x), giving a 32x speedup. That's not from 8.1s -> 0.06, though, but then, there's also zero memory access (not even the cache) until final write as both constants `2` and `1` are powers of two ...\r\n\r\nAs for the first and last, on my system, they are basically the same speed, both ~4.7s.",
  "created_at":"2022-03-17T21:54:59Z",
  "id":1071576590,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_3vYO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T21:54:59Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"NONE",
  "body":"Aside, I just took the examples as-is, but if I add a warmup call, then Clang easily outperfoms by ~20%.",
  "created_at":"2022-03-17T22:05:26Z",
  "id":1071601500,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_31dc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T22:05:26Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"MEMBER",
  "body":"I forgot to copy in\r\n\r\n```python\r\ndummy = np.array([0])\r\n```\r\n\r\nso you were right (integers, though). I fixed the comment above.\r\n\r\n---------------\r\n\r\nWhat's the \"warmup\"? Repeated application? Because with `f` defined using Clang:\r\n\r\n```python\r\n>>> s = time.time(); f(builder=builder); time.time() - s\r\n8.109642505645752\r\n>>> s = time.time(); f(builder=builder); time.time() - s\r\n8.104896306991577\r\n>>> s = time.time(); f(builder=builder); time.time() - s\r\n8.123145818710327\r\n>>> s = time.time(); f(builder=builder); time.time() - s\r\n8.121228694915771\r\n>>> s = time.time(); f(builder=builder); time.time() - s\r\n8.182328701019287\r\n```\r\n\r\nand with `f` defined using Numba:\r\n\r\n```python\r\n>>> s = time.time(); f(builder=builder); time.time() - s\r\n3.039454460144043\r\n>>> s = time.time(); f(builder=builder); time.time() - s\r\n3.0041792392730713\r\n>>> s = time.time(); f(builder=builder); time.time() - s\r\n3.0177931785583496\r\n>>> s = time.time(); f(builder=builder); time.time() - s\r\n3.0152335166931152\r\n>>> s = time.time(); f(builder=builder); time.time() - s\r\n3.0572359561920166\r\n```\r\n\r\nThis is hitting the same external pointer one billion times per call but not doing anything beyond that.\r\n\r\nIf you're getting different results on repeated application, then we might have different hardware and that would be a clue to the origin of this effect. On the other hand, if this effect is something that even changes direction with hardware (Clang being eventually faster on your computer by 20%), then it's probably not something to deep-dive into, since we wouldn't be able to control for it in a product. Regardless of Clang or Numba, external pointers should be avoided if possible.",
  "created_at":"2022-03-17T22:46:55Z",
  "id":1071718108,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_4R7c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T22:46:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Yes, is what I meant. It's not directly clear to me what Clang is still doing on lookup, although the code as written doesn't look free, parsing is already done at that point. Numba, however, doesn't JIT until first use (where types become known).\r\n\r\nAs for hardware, I'm using a Linux box with an AMD EPYC 7702P and 1TB of RAM.\r\n\r\n> Regardless of Clang or Numba, external pointers should be avoided if possible.\r\n\r\nYes, absolutely agree with that generally speaking. For cppyy/numba, that is what I want to achieve, too: place the IR from Cling C++ into the IR from Numba Python, effectively inlining it. Not only gets rid of the indirections, but also adds further optimization opportunities.",
  "created_at":"2022-03-17T23:29:55Z",
  "id":1071821505,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_4rLB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T23:29:55Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"NONE",
  "body":"One more quick note: yes, with an `int` array for `dummy`, that whole loop gets optimized out of existence already at `-O1`.\r\n\r\nEdit: no, I messed up. My example code didn't take `dummy` as an argument so there was no side-effect. Still, for the actual example as written, the loop body does not access (cache) memory, which should easily explain the difference in overall performance:\r\n\r\n```\r\n  10:\t48 c1 e1 08          \tshl    $0x8,%rcx\r\n  14:\t48 81 c1 01 ff ff ff \tadd    $0xffffffffffffff01,%rcx\r\n  1b:\t83 c2 f8             \tadd    $0xfffffff8,%edx\r\n  1e:\t75 f0                \tjne    10 <_Z3fffPl+0x10>\r\n```",
  "created_at":"2022-03-17T23:38:27Z",
  "id":1071841572,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_4wEk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-18T00:22:54Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"NONE",
  "body":"> >   Aside, mixing Numba and AArrayclangInterpreter in the same file results in a segfault in llvm::TargetPassConfig::addPass(llvm::Pass*).\r\n\r\n> I noticed that, too, and forgot to report it to @vgvassilev! (I didn't narrow it down, though, just noticed that I needed separate conda environments for Numba and clangdev.) Thanks for doing so.\r\n\r\nCan you set me up with a minimal reproducer?",
  "created_at":"2022-03-18T06:37:12Z",
  "id":1072074699,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_5o_L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-18T06:37:12Z",
  "user":"MDQ6VXNlcjY1MTYzMDc="
 },
 {
  "author_association":"NONE",
  "body":"@vgvassilev This seems to be the most minimal example (note that there's another bug with the arguments of the C++ function). The basic point is to do \"something\" with Numba which creates its setup (doesn't need to run the full JIT by having the `nb_noop()` call execute), then do have to perform the function call through Clang incremental (which goes back to my earlier question, regarding warmup, how much is deferred to the actual call).\r\n\r\n```\r\nfrom numba import jit\r\nfrom all_call_fn import InteractiveCppEnv\r\n\r\n@jit(nopython=True)\r\ndef nb_noop():\r\n    pass\r\n\r\nCppEnv = InteractiveCppEnv()\r\nCppEnv.cpp_compile(\"void c_noop() {}\")\r\nCppEnv.Cpp.c_noop(0)   # <- arg required? (bug)\r\n```",
  "created_at":"2022-03-18T15:02:25Z",
  "id":1072496307,
  "issue":1359,
  "node_id":"IC_kwDODBCWws4_7P6z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-18T15:02:25Z",
  "user":"MDQ6VXNlcjYzNzIxOTg="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1360](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f8dac2f) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.66%`.\n> The diff coverage is `59.54%`.\n\n> :exclamation: Current head f8dac2f differs from pull request most recent head 1174b6a. Consider uploading reports for the commit 1174b6a to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2JpdG1hc2tlZGZvcm0ucHk=) | `77.52% <0.00%> (-0.53%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2J5dGVtYXNrZWRmb3JtLnB5) | `76.82% <0.00%> (-0.51%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `74.60% <0.00%> (-5.40%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `81.87% <0.00%> (-8.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/indexedform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2luZGV4ZWRmb3JtLnB5) | `79.26% <0.00%> (-0.74%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/indexedoptionform.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2luZGV4ZWRvcHRpb25mb3JtLnB5) | `79.01% <0.00%> (-0.72%)` | :arrow_down: |\n| ... and [171 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1360/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-10T09:46:16Z",
  "id":1063860981,
  "issue":1360,
  "node_id":"IC_kwDODBCWws4_aTr1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T19:02:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In v2 sorting was a subject of debate for `RecordArrays` and `Records`, the consensus was to remove the sorting facility as we do not have any order defined for records. Thus, sorting across record boundaries would destroy the identities of those records. (see discussion #1451 ) \r\n\r\nAs of now, if no fields are present, `sort` will output an empty array. However, do we want to keep sorting if there are no `fields` present and throw a `TypeError` if `fields` is not None? \r\n\r\n@jpivarski \r\n@ianna \r\n@agoose77 \r\n\r\n",
  "created_at":"2022-07-08T07:39:45Z",
  "id":1178661412,
  "issue":1361,
  "node_id":"IC_kwDODBCWws5GQPIk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-08T07:39:45Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @ioanaif! I revisited the discussion that you linked, and [my personal preference has shifted](https://github.com/scikit-hep/awkward/discussions/1451#discussioncomment-3105892) towards fixing the sort to be lexicographic, and extending the API to `ak.sort` and `ak.argsort` so that users don't use the new behaviour silently.\r\n\r\nI.e.\r\n\r\n```python\r\nak.sort(\r\n    array,\r\n    axis=-1,\r\n    ascending=True,\r\n    stable=True,\r\n    highlevel=True,\r\n    behavior=None,\r\n    allow_records=False,  # < -- new, temporary, flag\r\n)\r\n```",
  "created_at":"2022-07-08T08:06:12Z",
  "id":1178685338,
  "issue":1361,
  "node_id":"IC_kwDODBCWws5GQU-a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-08T08:07:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Lexicographic is the most reasonable definition for a sort order for records, but I think that defining it will be a big job. I'm thinking of the \"removal of record-sorting\" as a temporary solution, to make sure that people don't silently get the wrong behavior, or, worse yet, rely on it. That's a necessary prerequisite for coming back and implementing it properly in the future.\r\n\r\nSince record fields can also contain lists, we'd need a sort order for lists as well. This project is a rabbit hole.",
  "created_at":"2022-07-08T12:13:17Z",
  "id":1178918809,
  "issue":1361,
  "node_id":"IC_kwDODBCWws5GRN-Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-08T12:13:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, as it looks like @ioanaif is working on this, I'm not going to push any significant amount of extra work their way! \r\nI was thinking of defining sorting for primitive fields, but that just makes it fragile with lists.\r\n\r\nLet's do the simplest option first, as you say.",
  "created_at":"2022-07-08T13:45:27Z",
  "id":1179007685,
  "issue":1361,
  "node_id":"IC_kwDODBCWws5GRjrF",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2022-07-08T13:46:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1362](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8123c90) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.48%`.\n> The diff coverage is `58.93%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `83.59% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [142 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1362/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-10T14:50:27Z",
  "id":1064144447,
  "issue":1362,
  "node_id":"IC_kwDODBCWws4_bY4_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-12T21:10:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Rebased onto https://github.com/scikit-hep/awkward-1.0/pull/1365",
  "created_at":"2022-03-12T20:25:58Z",
  "id":1065957123,
  "issue":1362,
  "node_id":"IC_kwDODBCWws4_iTcD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-12T20:25:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is functionally mostly there, but I'm closing it for now as it's not a priority. I'll revisit in the near future!",
  "created_at":"2022-05-02T15:15:48Z",
  "id":1115022531,
  "issue":1362,
  "node_id":"IC_kwDODBCWws5CdeTD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T15:15:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Good point\u2014there's a difference between \"iterable\" and \"sized iterable,\" and I was always assuming the latter. The fix is in PR #1364.",
  "created_at":"2022-03-10T14:56:46Z",
  "id":1064150921,
  "issue":1363,
  "node_id":"IC_kwDODBCWws4_baeJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T14:56:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1364](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (82760b6) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.63%`.\n> The diff coverage is `56.66%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `83.59% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [140 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1364/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-10T15:21:31Z",
  "id":1064176870,
  "issue":1364,
  "node_id":"IC_kwDODBCWws4_bgzm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T15:21:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Looking good so far. A definition of `_prepare_next` wasn't included (so I don't see how the tests could pass). Should the name of that helper function be so generic? (I saw what you said on Gitter about naming things!) Is it just for reducers and operations that handle `axis` in the same way as reducers but don't change the number of dimensions (e.g. sort, cumsum, ...)?\r\n\r\nOn naming things, \"reducers\" and \"rearrangers\"? \"Rearrange\" sounds like it's only permutations/sorting, which cumsum is not, but it's in the same spirit.",
  "created_at":"2022-03-10T18:44:38Z",
  "id":1064378491,
  "issue":1365,
  "node_id":"IC_kwDODBCWws4_cSB7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T18:44:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1365](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9d289b8) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.73%`.\n> The diff coverage is `52.51%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [144 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1365/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-10T19:03:01Z",
  "id":1064394120,
  "issue":1365,
  "node_id":"IC_kwDODBCWws4_cV2I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T19:44:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Looking good so far. A definition of `_prepare_next` wasn't included\r\n\r\nWeird, I wonder why we can't see it from the UI? It's here: https://github.com/scikit-hep/awkward-1.0/blob/bf25bee5a2e8b66c41cfb7a5d8b9681acd5c5fdd/src/awkward/_v2/contents/indexedoptionarray.py#L1172-L1214\r\n",
  "created_at":"2022-03-10T19:30:13Z",
  "id":1064416875,
  "issue":1365,
  "node_id":"IC_kwDODBCWws4_cbZr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T19:30:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"At this stage, I'm mainly just pulling things here and there to see what's fundamental vs a variation. It's tricky to fully refactor this because a lot of the SLOC are just kernel calls which are bulky but \"primitive\"",
  "created_at":"2022-03-10T19:31:03Z",
  "id":1064417570,
  "issue":1365,
  "node_id":"IC_kwDODBCWws4_cbki",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T19:31:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  naming things, \"reducers\" and \"rearrangers\"? \"Rearrange\" sounds like it's only permutations/sorting, which cumsum is not, but it's in the same spirit.\r\n\r\nI like this name!\r\n",
  "created_at":"2022-03-10T19:39:22Z",
  "id":1064424267,
  "issue":1365,
  "node_id":"IC_kwDODBCWws4_cdNL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-10T19:39:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, I've addressed `IndexedOptionArray`. I *think* we can really only factor out the _preparatory_ logic into its own function. The rest of the routines are either sufficiently bespoke or terse that it doesn't add much to make a new function. \r\n\r\nI have *not* replicated the original logic. It looks like we had some branches that would never be visited (e.g., anything in the rearranger routines would only a non-`IndexedOptionArray` if `depth != 1`, because we explicitly have `out = IndexedOptionArray(...)`). These changes pass the test suite, but reducer logic is non-trivial, so I would not be surprised if somewhere I've missed something. Now that I understand this logic a bit better, I think it should be easier to extend to other layout types.",
  "created_at":"2022-03-12T18:23:52Z",
  "id":1065936113,
  "issue":1365,
  "node_id":"IC_kwDODBCWws4_iOTx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-12T18:23:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> That's a lot of changes, and it's hard to tell from this altitude that they're right.\r\n> \r\n> This is one of those times when you wish you had 100% test coverage. `:(`\r\n> \r\n> I scanned through it a second time, more carefully, and noted the things that bothered me most, but in each case, I could convince myself that what you've written is correct.\r\n> \r\n> Thanks a lot\u2014these are some deep and detailed edits!\r\n\r\nThanks Jim. I noticed a couple of docs typos while reading the diff again (it's amazing what coming back to something can do for perspective), but I can fix those up in a later PR. \r\n\r\nI agree that this is not something that we can grep by the diffs alone. I did make some (albeit reasoned) big changes here, so I hope we've not introduced any new bugs. Still, the tests passing suggests we might be OK, and we can be suspicious of this PR as a default position if anything does come up!",
  "created_at":"2022-03-17T21:24:54Z",
  "id":1071513660,
  "issue":1365,
  "node_id":"IC_kwDODBCWws4_3gA8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T21:24:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I've been looking at my inability to write much documentation in the past 2 years and thinking that the best way to fix it is to promise less. The [Sphinx/readthedocs site](https://awkward-array.readthedocs.io/en/latest/index.html) is complete and has all of this information in it; the purpose of the [JupyterBooks/Netlify site](https://awkward-array.org/quickstart.html) was to provide more conversational, introductory tutorials. Part of the reason I can never find time to write tutorials here is because I'm presenting [live tutorials](https://github.com/orgs/jpivarski-talks/repositories?q=tutorial) in various places (13 so far, ranging in lengths from 1 hour to 3 days). These have notebooks with conversational intros, maybe I should just link to them.\r\n\r\nSo, this is what I've had in mind for the documentation, an idea I've been thinking about in the past few months:\r\n\r\n  1. Have the https://awkward-array.org address point to readthedocs, the complete site: what is currently https://awkward-array.readthedocs.io (as a synonym; both would work).\r\n  2. Shut down the Netlify site and the JupyterBooks-to-HTML generation that breaks with every new version of JupyterBooks.\r\n  3. Copy the tutorial-like documentation that does exist into readthedocs, separating the \"tutorials\" section from the \"reference\" section as it is separated in the left-bar of the [Uproot readthedocs](https://uproot.readthedocs.io/en/latest/).\r\n  4. Also include links to the notebooks and videos of the live tutorials I've given, and keep that list updated.\r\n\r\nWhat this would drop is the split between two sites (and the third site, the C++ doxygen, which is becoming less and less relevant\u2014it would continue to exist but be downplayed) and that list of promised-but-not-written tutorials on the left-bar of the current Netlify site (awkward-array.org).\r\n\r\nI think what's happening is that people click to them, see that they're not written, and then assume that the information is not available, when actually it's just somewhere else. (The top two comments in [Hacker News](https://news.ycombinator.com/item?id=29576323) were about the broken and missing documentation. It might have been different if the website channeled them to the Sphinx references and all the completed tutorials.)\r\n\r\nAs a \"user\" of documentation, what do you think of this plan?",
  "created_at":"2022-03-11T16:08:32Z",
  "id":1065256551,
  "issue":1366,
  "node_id":"IC_kwDODBCWws4_foZn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-11T16:08:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"I absolutely agree that something has to be done about the documentation as I've experienced the exact scenario you mention - \"see that they're not written, and then assume that the information is not available, when actually it's just somewhere else\". \r\n\r\nMerging the tutorials into the existing readthedocs seems like a good idea to me. Including links to the live tutorials as you suggest would be useful too.",
  "created_at":"2022-04-11T18:33:13Z",
  "id":1095410579,
  "issue":1366,
  "node_id":"IC_kwDODBCWws5BSqOT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T18:33:13Z",
  "user":"MDQ6VXNlcjIzMDUyMDU0"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I don't think we want to lose the \"best practices\" Netlify content unless we really have no choice. I found it initially tricky to identify best practices, and in the programming space I feel that tutorials are less common than in HEP. The real issue here is writing and updating the docs, and I sympathise (& empathise!) with you on that front. Once my time frees up in the future, I would be happy to work on filling out these docs. \r\n\r\nI agree that the C++ docs will be much less important in future. I'd propose that we have single top-level domain (`awkward-array.org`), and we have two sections as you propose (`reference`, `tutorials`). I'd be happy to do most of the work here, particualrly the JupyterBooks side of things. It intersects with my interests in the Jupyter space, and I think it would be useful. On the tutorials side, I think we'd benefit from condensing the https://github.com/jpivarski-talks/ notebooks into a series of examples (with open-data where possible, rather than requiring a git clone), where we can bring in the full JupyterBook suite of features.\r\n\r\nMy availability for this *right now* is not high, but in future this will change.",
  "created_at":"2022-04-11T18:56:32Z",
  "id":1095437459,
  "issue":1366,
  "node_id":"IC_kwDODBCWws5BSwyT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T18:59:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'd be gracious for the help, and also for the different perspective. My problem when writing tutorials is that they start looking like the references I've already written\u2014there's no benefit to a long page describing one function, because those already exist.\r\n\r\nFor the organization, I still think it's necessary to have both Tutorials (which focus on getting started and best practices) and Reference (long page on one function), but I was thinking of collapsing the two websites into one website, with https://awkward-array.org pointing to it. Doxygen would still exist (and still be generated by Sphinx, as we have it now), but it would be buried. In fact, the growing three-level distinction in interface: end-user (high-level), downstream developer (mid-level), and internal (low-level) could further subdivide the Reference into three sections. [This page](https://awkward-array.readthedocs.io/en/latest/_auto/kernels.html), for instance, is deeply internal, as are all those pages with underscores, and the [AwkwardForth documentation](https://github.com/scikit-hep/awkward-1.0/wiki/AwkwardForth-documentation) that I intend to move into the common docs. The distinction \"this is public API, but not something you, a data analyst, should be getting into\" is a hard one to make, and it would be easier if the awkward-array.org landing page was clearly split into such sections.\r\n\r\nI point to https://uproot.readthedocs.io/ as an example of what that subdivision could look like on a single readthedocs site (the left-bar is subdivided in a useful way), though Uproot's not a great example because it doesn't have enough tutorials.\r\n\r\nAs for the technical point of generating tutorials from Jupyter notebooks, this has been a giant hassle. It's supposed to ensure that our documentation is up-to-date by executing it before it goes online, but not all errors are caught in the commands that are supposed to stop the build if executing the notebook fails:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/87cf5792e474d6886aaa3baddc9cf2d87d895deb/.ci/azure-doctest-awkward.yml#L81-L93\r\n\r\nI would be willing to turn the notebooks into ordinary pages, even though they're not checked, because the check is ineffective, anyway. Reducing this complexity would hopefully free up time to write documentation. (Also note that JupyterBooks isn't as stable as I thought it would be: they're still frequently changing their API in ways that we need to adapt to, particularly in the table of contents YAML.)\r\n\r\nOn the whole, the documentation would be in better shape if I could stop thinking about it as a book that must be polished and well-organized and let it just be a bunch of responses to questions. When asked, I seem to have no trouble answering a specific question, but then all of these answers become hard to find. At one point (PyHEP 2018), I tried to encourage everyone to direct their questions to StackOverflow because then it would just be a searchable database of solutions, not something that would need to be explicitly organized. (That turned out to not be a good idea because newcomers were not treated well by the StackOverflow community, and random StackOverflow members didn't realize that users asking about Awkward Array need their solutions to be scalable, e.g. why `ak.num(array)` is better than `[len(x) for x in array]`.)\r\n\r\nFor data, any of the scikit-hep-testdata files can be accessed through the GitHub \"raw data\" URL. That HTTP server doesn't support multi-GET, but it's fine for small files. The big files that some of these\r\n\r\nhttps://github.com/orgs/jpivarski-talks/repositories?q=tutorial\r\n\r\nare based on are all online, too, some of them in S3, which (if I remember right) does support multi-GET.",
  "created_at":"2022-04-11T19:30:40Z",
  "id":1095475720,
  "issue":1366,
  "node_id":"IC_kwDODBCWws5BS6II",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T19:30:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I like the `uproot` example, and might be tempted to take it further. I like the way that NumPy's docs have different sections: https://numpy.org/doc/stable/user/index.html\r\n\r\n![image](https://user-images.githubusercontent.com/1248413/162816647-60a5e082-956d-49bb-956d-9c503e5daa95.png)\r\n![image](https://user-images.githubusercontent.com/1248413/162816662-5ec3eaa0-e827-4696-b9b7-abfbe5051223.png)\r\n\r\nI struggle with the fact that we have the entire API namespace in the left sidebar, and although it's compounded by internals & the v2 namespace, I still think it's better to move that into a separate API reference like NumPy does.\r\n\r\nJupyterBooks has been changing a lot recently (v2), but I hope it is stabilising more now. Equally, we could choose to pin at a particular version and do incremental upgrades (if we don't already?).\r\n\r\nBig :+1:  on bringing in the AwkwardForth docs too. In itself AwkwardForth is something that we could advertise more as it very much sits on its own outside of Awkward Array in terms of use cases.\r\n\r\nRE JupyterBook - leave it with me as a future milestone. I think we can get it to a good place, but right now there are so many things that are going on in Awkward CI that will simplify once v2 is released etc, that it's probably worth holding fire for now?\r\n\r\n> On the whole, the documentation would be in better shape if I could stop thinking about it as a book that must be polished and well-organized and let it just be a bunch of responses to questions. \r\n\r\nYes, this is tough. I think that the tutorials should do a good-enough job of showcasing how to use Awkward, especially as our API evolves to an improving level of self-consistency and features. That said, the existing Netlify site is useful, and I anticipate being able to further it. If we look at Jupyter Book here too, we can ensure that it actually stays up to date (or at least, that the code that it recommends actually works). \r\n\r\nIn my mind, tutorials are \"analysis workflows\", whereas the Netlify equivalent is \"snippets\". \r\n\r\n> newcomers were not treated well by the StackOverflow community,\r\n\r\nRight, I noticed that a lot of replies just completely ignored the \"Awkward\" part :/ Thankfully I do think GitHub discussions is a useful solution here. We can signpost to it from the documentation once things are reshuffled.\r\n\r\n> any of the scikit-hep-testdata files can be accessed through the GitHub \"raw data\" URL.\r\n\r\nFab!\r\n\r\nPerhaps we should create a new Project in the Projects tab?",
  "created_at":"2022-04-11T19:46:42Z",
  "id":1095493144,
  "issue":1366,
  "node_id":"IC_kwDODBCWws5BS-YY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T19:49:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"FYI: this is now on the Roadmap: https://github.com/scikit-hep/awkward-1.0/wiki#documentation-revamp",
  "created_at":"2022-04-18T19:29:34Z",
  "id":1101692051,
  "issue":1366,
  "node_id":"IC_kwDODBCWws5BqnyT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-18T19:29:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1367](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9711b3d) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.04%`.\n> The diff coverage is `56.75%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_pandas.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19wYW5kYXMucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [146 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1367/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-13T20:36:18Z",
  "id":1066177566,
  "issue":1367,
  "node_id":"IC_kwDODBCWws4_jJQe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T15:13:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1368](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (768b292) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.07%`.\n> The diff coverage is `56.89%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `83.59% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [146 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1368/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-13T23:41:44Z",
  "id":1066209035,
  "issue":1368,
  "node_id":"IC_kwDODBCWws4_jQ8L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T14:34:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1369](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (621f346) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.24%`.\n> The diff coverage is `59.86%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `91.39% <0.00%> (+1.32%)` | :arrow_up: |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `83.59% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [143 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1369/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-14T10:53:23Z",
  "id":1066638717,
  "issue":1369,
  "node_id":"IC_kwDODBCWws4_k519",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-15T14:01:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1370](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b9e6779) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **increase** coverage by `0.63%`.\n> The diff coverage is `56.66%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `85.74% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `90.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `83.59% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [140 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1370/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-14T22:03:55Z",
  "id":1067346933,
  "issue":1370,
  "node_id":"IC_kwDODBCWws4_nmv1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-14T22:03:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I can confirm this in both v2 and v1, and I can't find a particular commit that introduces it within `1.5 \u2192 HEAD`",
  "created_at":"2022-03-16T20:02:54Z",
  "id":1069563091,
  "issue":1371,
  "node_id":"IC_kwDODBCWws4_wDzT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T20:02:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1372](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4ae8bae) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.73%`.\n> The diff coverage is `50.62%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [144 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1372/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-16T20:32:35Z",
  "id":1069597656,
  "issue":1372,
  "node_id":"IC_kwDODBCWws4_wMPY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-16T20:32:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1373](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6d62e2f) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.72%`.\n> The diff coverage is `50.62%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [144 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1373/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-17T16:11:21Z",
  "id":1071029553,
  "issue":1373,
  "node_id":"IC_kwDODBCWws4_1p0x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-17T16:11:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1374](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (57ede36) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **increase** coverage by `0.65%`.\n> The diff coverage is `52.66%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `82.26% <\u00f8> (+0.76%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/convert/ak\\_to\\_arrow\\_table.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| ... and [77 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1374/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-18T17:24:37Z",
  "id":1072628243,
  "issue":1374,
  "node_id":"IC_kwDODBCWws4_7wIT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-26T18:08:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I think, this is pretty much done. I'm still not quite sure how to select the range for the different length `ak.Arrays`. So far it's defined by the length of the first column's `ak.Array`:\r\nhttps://github.com/scikit-hep/awkward-1.0/pull/1374/files#diff-2e47d1ea25ddbe4f77fe23a2e0cc5897d74b5389c659e527d7c6b07a8166588bR254-R256 ",
  "created_at":"2022-04-20T15:29:51Z",
  "id":1104069281,
  "issue":1374,
  "node_id":"IC_kwDODBCWws5BzsKh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-20T15:29:51Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"I managed to get a fully working example by modifying the \"WonkyDS\" from https://github.com/scikit-hep/awkward-1.0/issues/588#issue-760794731. It's emulating a two-column Awkward RDataSource, in which one column contains a primitive type and the other contains records.\r\n\r\n```python\r\nimport json\r\n\r\nimport ROOT\r\nimport awkward as ak\r\nimport awkward._v2._connect.cling\r\n\r\nexample1 = ak._v2.Array([1.1, 2.2, 3.3, 4.4, 5.5])\r\nexample2 = ak._v2.Array([{\"x\": 1.1}, {\"x\": 2.2}, {\"x\": 3.3}, {\"x\": 4.4}, {\"x\": 5.5}])\r\n\r\nassert len(example1) == len(example2)\r\n```\r\n\r\nIt's essential that they have the same lengths, something that `ak.to_rdataframe` should check.\r\n\r\nFirst, I'll generate the ArrayViews and RecordViews and get the data types for them as strings. RDataFrame is not involved yet.\r\n\r\n```python\r\ngenerator1 = ak._v2._connect.cling.togenerator(example1.layout.form)\r\nlookup1 = ak._v2._lookup.Lookup(example1.layout)\r\ngenerator1.generate(ROOT.gInterpreter.Declare, flatlist_as_rvec=True)\r\n\r\ngenerator2 = ak._v2._connect.cling.togenerator(example2.layout.form)\r\nlookup2 = ak._v2._lookup.Lookup(example2.layout)\r\ngenerator2.generate(ROOT.gInterpreter.Declare, flatlist_as_rvec=True)\r\n\r\ndataset_type_one = generator1.class_type((True,))\r\nentry_type_one = generator1.entry_type(flatlist_as_rvec=True)\r\ndataset_type_two = generator2.class_type((True,))\r\nentry_type_two = generator2.entry_type(flatlist_as_rvec=True)\r\n```\r\n\r\nThe following code is going to be generated in the `awkward` namespace to ensure that it doesn't collide with anything else. The type strings above are unqualified, so they'll work in the namespace, but they won't work in the RDataFrame code, when it tries to cast the column values. To be concrete, here's what the dataset type names look like:\r\n\r\n```python\r\n>>> dataset_type_one, dataset_type_two\r\n('NumpyArray_float64_S3W7Jysru0Y', 'RecordArray_TdrfhV0YO8')\r\n```\r\n\r\nand here's what the entry type names look like:\r\n\r\n```python\r\n>>> entry_type_one, entry_type_two\r\n('double', 'Record_SlxdvzA8mjY')\r\n```\r\n\r\nWhen providing RDataFrame with these type names (i.e. the string that `GetTypeName` returns), the Record will need to be qualified with `\"awkward::\"` but the double must not. You can tell which to qualify by checking the Python type of the generators: `generator1` is a `NumpyArrayGenerator`, so its entry type will always be a primitive (must not qualify) and `generator2` is a `RecordArrayGenerator`, so its entry type will be something in the `awkward` namespace (must qualify). Since we're using `flatlist_as_rvec=True` everywhere (and it's important to do that consistently), a `ListArrayGenerator` whose `content` is a `NumpyArrayGenerator` also must not be qualified because it will be an `RVec`, rather than an `ArrayView`. There should be tests in which the top-level type is a list of primitive and in which the top-level type is a list of records.\r\n\r\n(Also, note that the hashes aren't the same in different Python processes.)\r\n\r\nThe following is almost entirely hard-coded, but it should be clear how to generate the parts that depend on \"one\" and \"two\".\r\n\r\n```python\r\nROOT.gInterpreter.Declare(f\"\"\"\r\nnamespace awkward {{\r\n\r\nclass RWonkyDS final : public ROOT::RDF::RDataSource {{\r\nprivate:\r\n   unsigned int fNSlots = 0U;\r\n   std::vector<std::pair<ULong64_t, ULong64_t>> fEntryRanges;\r\n\r\n   ULong64_t fSize = 0ULL;\r\n   ULong64_t fPtrs_one = 0;\r\n   ULong64_t fPtrs_two = 0;\r\n\r\n   std::vector<std::string> fColNames{{\"one\", \"two\"}};\r\n   std::vector<{entry_type_one}>  slots_one;\r\n   std::vector<{entry_type_one}*> addrs_one;\r\n   std::vector<{entry_type_two}>  slots_two;\r\n   std::vector<{entry_type_two}*> addrs_two;\r\n\r\n   std::vector<void *> GetColumnReadersImpl(std::string_view name, const std::type_info &);\r\n\r\nprotected:\r\n   std::string AsString() {{ return \"trivial data source\"; }};\r\n\r\npublic:\r\n   RWonkyDS(ULong64_t size, ULong64_t ptrs_one, ULong64_t ptrs_two);\r\n   RWonkyDS();\r\n   ~RWonkyDS();\r\n   const std::vector<std::string> &GetColumnNames() const;\r\n   bool HasColumn(std::string_view colName) const;\r\n   std::string GetTypeName(std::string_view) const;\r\n   std::vector<std::pair<ULong64_t, ULong64_t>> GetEntryRanges();\r\n   bool SetEntry(unsigned int slot, ULong64_t entry);\r\n   void SetNSlots(unsigned int nSlots);\r\n   void Initialise();\r\n   std::string GetLabel();\r\n}};\r\n\r\n// Make a RDF wrapping a RWonkyDS with the specified amount of entries\r\nROOT::RDF::RInterface<ROOT::RDF::RDFDetail::RLoopManager, RWonkyDS> MakeWonkyDataFrame(ULong64_t size, ULong64_t ptrs_one, ULong64_t ptrs_two);\r\n// Make a RDF wrapping a broken RWonkyDS... because we need a zero-argument constructor?\r\nROOT::RDF::RInterface<ROOT::RDF::RDFDetail::RLoopManager, RWonkyDS> MakeWonkyDataFrame();\r\n\r\nstd::vector<void *> RWonkyDS::GetColumnReadersImpl(std::string_view colName, const std::type_info &ti) {{\r\n   std::vector<void *> ret;\r\n\r\n   if (colName == \"one\") {{\r\n      for (auto i : ROOT::TSeqU(fNSlots)) {{\r\n         addrs_one[i] = &slots_one[i];\r\n         ret.emplace_back((void *)(&addrs_one[i]));\r\n      }}\r\n   }}\r\n   else if (colName == \"two\") {{\r\n      for (auto i : ROOT::TSeqU(fNSlots)) {{\r\n         addrs_two[i] = &slots_two[i];\r\n         ret.emplace_back((void *)(&addrs_two[i]));\r\n      }}\r\n   }}\r\n   else {{\r\n      for (auto i : ROOT::TSeqU(fNSlots)) {{\r\n         ret.emplace_back(nullptr);\r\n      }}\r\n   }}\r\n\r\n   return ret;\r\n}}\r\n\r\nRWonkyDS::RWonkyDS(ULong64_t size, ULong64_t ptrs_one, ULong64_t ptrs_two) : fSize(size), fPtrs_one(ptrs_one), fPtrs_two(ptrs_two) {{\r\n}}\r\n\r\nRWonkyDS::RWonkyDS() : fSize(0), fPtrs_one(0), fPtrs_two(0) {{\r\n}}\r\n\r\nRWonkyDS::~RWonkyDS() {{\r\n}}\r\n\r\nconst std::vector<std::string> &RWonkyDS::GetColumnNames() const {{\r\n   return fColNames;\r\n}}\r\n\r\nbool RWonkyDS::HasColumn(std::string_view colName) const {{\r\n   for (auto name : fColNames) {{\r\n      if (colName == name) {{\r\n         return true;\r\n      }}\r\n   }}\r\n   return false;\r\n}}\r\n\r\nstd::string RWonkyDS::GetTypeName(std::string_view colName) const {{\r\n   if (colName == \"one\") {{\r\n      return {json.dumps(entry_type_one)};\r\n   }}\r\n   else if (colName == \"two\") {{\r\n      return {json.dumps(\"awkward::\" + entry_type_two)};\r\n   }}\r\n   else {{\r\n      return \"no such column\";   // should break whatever tries to use it as a type\r\n   }}\r\n}}\r\n\r\nstd::vector<std::pair<ULong64_t, ULong64_t>> RWonkyDS::GetEntryRanges() {{\r\n   // empty fEntryRanges so we'll return an empty vector on subsequent calls\r\n   auto ranges = std::move(fEntryRanges);\r\n   return ranges;\r\n}}\r\n\r\nbool RWonkyDS::SetEntry(unsigned int slot, ULong64_t entry) {{\r\n\r\n   slots_one[slot] = {dataset_type_one}(0, fSize, 0, reinterpret_cast<ssize_t*>(fPtrs_one))[entry];\r\n   slots_two[slot] = {dataset_type_two}(0, fSize, 0, reinterpret_cast<ssize_t*>(fPtrs_two))[entry];\r\n\r\n   return true;\r\n}}\r\n\r\nvoid RWonkyDS::SetNSlots(unsigned int nSlots) {{\r\n   R__ASSERT(0U == fNSlots && \"Setting the number of slots even if the number of slots is different from zero.\");\r\n   fNSlots = nSlots;\r\n\r\n   slots_one.resize(fNSlots);\r\n   addrs_one.resize(fNSlots);\r\n   slots_two.resize(fNSlots);\r\n   addrs_two.resize(fNSlots);\r\n\r\n}}\r\n\r\nvoid RWonkyDS::Initialise() {{\r\n   // initialize fEntryRanges\r\n   const auto chunkSize = fSize / fNSlots;\r\n   auto start = 0UL;\r\n   auto end = 0UL;\r\n   for (auto i : ROOT::TSeqUL(fNSlots)) {{\r\n      start = end;\r\n      end += chunkSize;\r\n      fEntryRanges.emplace_back(start, end);\r\n      (void)i;\r\n   }}\r\n   // TODO: redistribute reminder to all slots\r\n   fEntryRanges.back().second += fSize % fNSlots;\r\n}}\r\n\r\nstd::string RWonkyDS::GetLabel() {{\r\n   return \"WonkyDS\";\r\n}}\r\n\r\nROOT::RDF::RInterface<ROOT::RDF::RDFDetail::RLoopManager, RWonkyDS> MakeWonkyDataFrame(ULong64_t size, ULong64_t ptrs_one, ULong64_t ptrs_two) {{\r\n   auto lm = std::make_unique<ROOT::RDF::RDFDetail::RLoopManager>(std::make_unique<RWonkyDS>(size, ptrs_one, ptrs_two), ROOT::RDF::RDFInternal::ColumnNames_t{{}});\r\n   return ROOT::RDF::RInterface<ROOT::RDF::RDFDetail::RLoopManager, RWonkyDS>(std::move(lm));\r\n}}\r\n\r\n}} // namespace awkward\r\n\"\"\")\r\n\r\nrdf = ROOT.awkward.MakeWonkyDataFrame(\r\n    len(example1), lookup1.arrayptrs.ctypes.data, lookup2.arrayptrs.ctypes.data\r\n)\r\n```\r\n\r\nNow we can use this `rdf` as an RDataFrame.\r\n\r\n```python\r\n>>> rdf.Display().Print()\r\none       | two             | \r\n1.1000000 | @0x564bafb68100 | \r\n2.2000000 | @0x564bafb68100 | \r\n3.3000000 | @0x564bafb68100 | \r\n4.4000000 | @0x564bafb68100 | \r\n5.5000000 | @0x564bafb68100 | \r\n```\r\n\r\nThe \"one\" column has readable numbers. It seems that RDataFrame always prints objects as pointers. It's the same pointer in each entry because RDataFrame gets an entry by overwriting memory. The above implementation _should_ work with multiple slots (parallel processing), but I haven't tested it. With two ROOT threads, the entries should get divided among the threads with one pointer for half the entries and another pointer for the other half of the entries, and the two threads only modify their own data in place.\r\n\r\nNow let's try calculating some new variables on these columns. Column \"one\" really ought to work because we can see that the numbers are properly represented in the display above, but let's do it anyway:\r\n\r\n```python\r\n>>> rdf.Define(\"newvar1\", \"one * 10\").AsNumpy([\"newvar1\"])\r\n{'newvar1': ndarray([11., 22., 33., 44., 55.])}\r\n```\r\n\r\nOkay, good. Now for column \"two\", we can't pass the record-valued data into NumPy (unless it makes PyROOT objects? I'll try that next), but we can get numbers from it through its `x` method:\r\n\r\n```python\r\n>>> rdf.Define(\"newvar2\", \"two.x()\").AsNumpy([\"newvar2\"])\r\n{'newvar2': ndarray([1.1, 2.2, 3.3, 4.4, 5.5])}\r\n```\r\n\r\nLet's be adventurous and try actually sending the record objects to NumPy. In principle, it should know how to make PyROOT objects for our ArrayViews and RecordViews because they were compiled by Cling.\r\n\r\n```python\r\n>>> will_it_crash = rdf.AsNumpy([\"two\"])\r\n>>> will_it_crash\r\n{'two': ndarray([<cppyy.gbl.awkward.Record_dlJfZCDGSwY object at 0x564bb4fac690>,\r\n         <cppyy.gbl.awkward.Record_dlJfZCDGSwY object at 0x564bb4fac6a8>,\r\n         <cppyy.gbl.awkward.Record_dlJfZCDGSwY object at 0x564bb4fac6c0>,\r\n         <cppyy.gbl.awkward.Record_dlJfZCDGSwY object at 0x564bb4fac6d8>,\r\n         <cppyy.gbl.awkward.Record_dlJfZCDGSwY object at 0x564bb4fac6f0>],\r\n        dtype=object)}\r\n>>> will_it_crash[\"two\"][2]\r\n<cppyy.gbl.awkward.Record_dlJfZCDGSwY object at 0x564bb4fac6c0>\r\n>>> will_it_crash[\"two\"][2].x()\r\n3.3\r\n```\r\n\r\nIt works! However, we'll probably need some significant disclaimers on these objects because they're based on borrowed references. If the lookups ever go out of scope, `will_it_crash[\"two\"][2].x()` will definitely crash.\r\n\r\nIn fact, that reminds me, the outgoing RDataFrame that `ak.to_rdataframe` returns will have to maintain a reference to the lookups. Fortunately, this is Python and we can just stash them in the object:\r\n\r\n```python\r\nrdf._lookups = (lookup1, lookup2)\r\n```\r\n\r\nAs long as this `rdf` object (which `ak.to_rdataframe` returns) is alive, the ArrayViews and RecordViews it makes in internal calculations and PyROOT objects in `dtype=object` NumPy arrays will be valid. As soon as the `rdf` goes out of scope, the lookups will be deleted and there are no memory leaks. That covers all of the cases in which a user interacts with it through the `rdf` methods (which is the _proper_ way, and the only way that runs at compiled speed), but it doesn't cover cases in which the user extracted a `dtype=object` NumPy array, then deleted the `rdf`, then interacts with the data in the NumPy array. If that ever comes up, we'll tell them not to do that.\r\n\r\nAnyway, I think the above example should help. As you can see, there was no need to define any wrappers, only the single RWonkyDS class and its \"Make\" function. There are no templates anywhere. The class and function names need to be generated with hashes so that a different set of column names and types don't try to reuse this one. The hash should be based on a tuple of name, generator pairs:\r\n\r\n```python\r\n>>> hash(((\"one\", generator1), (\"two\", generator2)))\r\n6386967581103326234\r\n```\r\n\r\nwhich is unchanged when we recreate them with the same Forms (but not different Forms, and not in a different Python process):\r\n\r\n```python\r\n>>> generator1 = ak._v2._connect.cling.togenerator(example1.layout.form)\r\n>>> generator2 = ak._v2._connect.cling.togenerator(example2.layout.form)\r\n>>> hash(((\"one\", generator1), (\"two\", generator2)))\r\n6386967581103326234\r\n```\r\n\r\nBe sure to use the helper functions to generate the code, so that the code-generator remains readable:\r\n\r\n```python\r\n>>> generator1.entry(length=\"fSize\", ptrs=\"fPtrs_one\", entry=\"entry\", flatlist_as_rvec=True)\r\n'awkward::NumpyArray_float64_uXYDMncQqaw(0, fSize, 0, reinterpret_cast<ssize_t*>(fPtrs_one))[entry]'\r\n>>> generator2.entry(length=\"fSize\", ptrs=\"fPtrs_two\", entry=\"entry\", flatlist_as_rvec=True)\r\n'awkward::RecordArray_nd3xGJcxmAg(0, fSize, 0, reinterpret_cast<ssize_t*>(fPtrs_two))[entry]'\r\n```\r\n\r\nPreparing generated code parts before the big f-string and inserting them with single-curly brackets will help to keep the code-generator readable. Inline expressions when they're simple enough is better than following names.\r\n\r\nA good process would be to reproduce the example described in this comment, with all its hard-codedness, and slowly replace the hard-coded parts with auto-generated parts, testing between every invocation. Segfaults can usually be debugged by inserting `std::cout` in the right places, including the code generators in cling.py, since the code generated by cling.py is used in the RDataFrame loop, and you can get closer to the actual error.\r\n\r\nLet me know if there's anything else I can help with.",
  "created_at":"2022-04-21T00:25:14Z",
  "id":1104576638,
  "issue":1374,
  "node_id":"IC_kwDODBCWws5B1oB-",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-04-21T00:25:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - please, have a look when you have time. The `flatlist_as_rvec` is a property of the generators now, so there should not be possible to mix `RVecs` and `vectors`. I did not test this change with numba, but I did not see explicit use of the flag there. The default value of it is still the same.\r\nI've removed the `ArrayWrapper` and `ArrayReader` classes. The column dependent code is generated in a Python loop. These extra fragments can be implemented as functions, though, I hope, it is more or less readable.\r\nI've finished for today, please, feel free to modify the PR. Thanks.",
  "created_at":"2022-04-25T16:19:18Z",
  "id":1108779810,
  "issue":1374,
  "node_id":"IC_kwDODBCWws5CFqMi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-25T16:19:18Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - thanks! I have automated the test checks and will add the changes to this PR.",
  "created_at":"2022-04-26T21:10:53Z",
  "id":1110252591,
  "issue":1374,
  "node_id":"IC_kwDODBCWws5CLRwv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-26T21:10:53Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Note that until this gets fixed, users will need some way to add up arbitrary numbers of vectors per list in an Awkward Array. This example code does that with Numba:\r\n\r\n```python\r\nimport time\r\n\r\nimport numpy as np\r\nimport awkward as ak\r\nimport numba as nb\r\nimport vector\r\n\r\nvector.register_awkward()\r\n\r\nfake_o = {\"pt\": 1.1, \"phi\": 2.2, \"eta\": 3.3, \"mass\": 10}\r\n\r\narray = ak.Array(\r\n    [\r\n        [fake_o, fake_o, fake_o],\r\n        [],\r\n        [fake_o, fake_o],\r\n        [fake_o, fake_o, fake_o, fake_o],\r\n    ],\r\n    with_name=\"Momentum4D\",\r\n)\r\n\r\n@nb.jit\r\ndef add_lists_of_vectors(array):\r\n    output_px = np.empty(len(array))\r\n    output_py = np.empty(len(array))\r\n    output_pz = np.empty(len(array))\r\n    output_E = np.empty(len(array))\r\n\r\n    for index, single_list in enumerate(array):\r\n        sum_of_vectors = vector.obj(px=0.0, py=0.0, pz=0.0, E=0.0)\r\n\r\n        for input_vector in single_list:\r\n            sum_of_vectors = sum_of_vectors + input_vector\r\n            pass\r\n\r\n        output_px[index] = sum_of_vectors.px\r\n        output_py[index] = sum_of_vectors.py\r\n        output_pz[index] = sum_of_vectors.pz\r\n        output_E[index] = sum_of_vectors.E\r\n\r\n    return output_px, output_py, output_pz, output_E\r\n\r\nstarttime = time.time()\r\noutput_px, output_py, output_pz, output_E = add_lists_of_vectors(array)\r\nprint(\"compilation + runtime:\", time.time() - starttime)\r\n\r\noutput = ak.zip(\r\n    {\"px\": output_px, \"py\": output_py, \"pz\": output_pz, \"E\": output_E},\r\n    with_name=\"Momentum4D\",\r\n)\r\n\r\nprint(output)\r\n```\r\n\r\nThe use of Numba (or some compilation somewhere) is necessary. In some tests, I found that Numba compilation time is 1.5 seconds and runtime begins to dominate when you multiply the length of the `fake_o` example by ten million. Then the runtime is 0.6 microseconds per fake-o group.\r\n\r\nBut the pure Python runtime per fake-o group (i.e. drop the `@nb.jit`) is 0.1 seconds, which is 187000\u00d7 slower. That's staggering, but there are a lot of culprits for the difference: indirection in Awkward Array `__getitem__`, changes of coordinates in Vector, ... Python itself (if you were to streamline it by replacing the Awkward Arrays and Vectors with builtin lists and class instances with `__slots__`) shouldn't be much more than 100\u00d7 or 1000\u00d7 slower.\r\n\r\nThe reason the output is given as NumPy arrays for each component (`output_px`, etc.) is because of https://github.com/scikit-hep/vector/issues/43. If you want the output as an array of non-Cartesian vectors, substitute `sum_of_vectors.pt`, etc. for `sum_of_vectors.px`, etc.",
  "created_at":"2022-04-05T16:58:14Z",
  "id":1089038165,
  "issue":1375,
  "node_id":"IC_kwDODBCWws5A6WdV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-05T16:58:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"We implement this vector sum as a mixin method in coffea vector classes: `array.sum(axis=1)` simply sums each cartesian component: e.g. this 2-vector implementation [copied from here](https://github.com/CoffeaTeam/coffea/blob/b644bcf2b48e272e6c78e4b1ddee3c233a67022d/coffea/nanoevents/methods/vector.py#L156-L166)\r\n```python\r\n\r\n    def sum(self, axis=-1):\r\n        \"\"\"Sum an array of vectors elementwise using `x` and `y` components\"\"\"\r\n        out = awkward.zip(\r\n            {\r\n                \"x\": awkward.sum(self.x, axis=axis),\r\n                \"y\": awkward.sum(self.y, axis=axis),\r\n            },\r\n            with_name=\"TwoVector\",\r\n            highlevel=False,\r\n        )\r\n        return awkward.Array(out, behavior=self.behavior)\r\n```\r\nUnless I am missing something, I don't see why it would need to be done in numba.",
  "created_at":"2022-04-06T13:41:38Z",
  "id":1090287810,
  "issue":1375,
  "node_id":"IC_kwDODBCWws5A_HjC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-06T13:41:38Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "author_association":"MEMBER",
  "body":"You're not missing anything; I just didn't think of that yesterday when I was talking with @kpedro88. What you have here works just as well.\r\n\r\nThis issue is to prevent `ak.sum` from doing misleading computations with non-Cartesian vectors, and v2 would eventually make it possible for Vector to override `ak._v2.sum` to do the right thing. The only difference between that and your solution is that it would be in `ak._v2.sum`, rather than a `.sum` method. (That distinction could be called \"cosmetic\" if it were not for the fact that the `ak._v2.sum` function still exists and we don't want them to do different things, one correct and the other incorrect.)\r\n\r\nIn your uses, is `axis != -1` ever meaningful? Actually, I guess it may be:\r\n\r\n```python\r\narray = [\r\n    [vector_A, vector_B, vector_C],\r\n    [vector_D,     None, vector_E],\r\n    [vector_F],\r\n]\r\n```\r\n\r\nI guess there are cases when you'd want to get\r\n\r\n```python\r\n[vector_A + vector_D + vector_F, vector_B, vectorC + vector_E]\r\n```\r\n\r\nI had been thinking of having the reducer-overload exclude `axis != -1`, but I guess we shouldn't, just as you don't.",
  "created_at":"2022-04-06T16:12:35Z",
  "id":1090451434,
  "issue":1375,
  "node_id":"IC_kwDODBCWws5A_vfq",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-04-06T16:12:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"The other difference is that the Numba solution adds the vectors in their native representation, while the Coffea solution requires converting to Cartesian, correct?",
  "created_at":"2022-04-06T16:32:27Z",
  "id":1090470688,
  "issue":1375,
  "node_id":"IC_kwDODBCWws5A_0Mg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-06T16:32:27Z",
  "user":"MDQ6VXNlcjQ2NzI4MDg="
 },
 {
  "author_association":"MEMBER",
  "body":"That's true, though I'm pretty sure that all of Vector's `+` operations convert to Cartesian. The Numba solution leaves open the possibility of Vector adding more optimized `+` in the future.\r\n\r\nNope! I'm wrong! If two vectors both have rho-phi azimuthal coordinates, they will be added in rho-phi that system and the result will be rho-phi.\r\n\r\nhttps://github.com/scikit-hep/vector/blob/6553752691fd41120ab095e2a5c875e894e475cf/src/vector/_compute/planar/add.py#L45-L53\r\n\r\nSo, for instance, these vectors stay in rho-phi:\r\n\r\n```python\r\n>>> vector.obj(rho=1.1, phi=0.3) + vector.obj(rho=2.2, phi=-0.4)\r\nvector.obj(rho=3.122793010504687, phi=-0.17108096774473536)\r\n```\r\n\r\nBut anything else will go to x-y:\r\n\r\n```python\r\n>>> vector.obj(rho=1.1, phi=0.3) + vector.obj(x=2.2, y=4.4)\r\nvector.obj(x=3.2508701380381666, y=4.725072227327474)\r\n```\r\n\r\nLongitudinal and temporal coordinates always convert to Cartesian before adding. (Currently. Changing that shouldn't break anything downstream if you always get coordinates from properties, rather than field values.)",
  "created_at":"2022-04-06T17:52:26Z",
  "id":1090561564,
  "issue":1375,
  "node_id":"IC_kwDODBCWws5BAKYc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-06T17:52:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"If you're summing a bunch then doing the cartesian conversion once is more efficient anyway",
  "created_at":"2022-04-06T19:37:26Z",
  "id":1090688449,
  "issue":1375,
  "node_id":"IC_kwDODBCWws5BApXB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-06T19:37:26Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "author_association":"MEMBER",
  "body":"The two issues described here have been split: the part about adding the ability to override reducers in v2 is now issue #1423.",
  "created_at":"2022-04-15T18:44:05Z",
  "id":1100286958,
  "issue":1375,
  "node_id":"IC_kwDODBCWws5BlQvu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T18:44:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1376](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4ae8bae) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.20%`.\n> The diff coverage is `51.52%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [147 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1376/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-18T00:45:19Z",
  "id":1071908707,
  "issue":1376,
  "node_id":"IC_kwDODBCWws4_5Adj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-18T00:45:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It should, though: `ak.ravel` changes the type, and so the old parameters are not necessarily going to be applicable to the new array. Parameters are used to determine whether a given `ak.Array` subclass applies, which has methods that assume some type, and parameters are also used to determine whether stand-alone operators (e.g. particular implementations of `+`) apply, which also assume some type.\r\n\r\nIn particular, `ak.ravel` turns the array into a NumpyArray with no other structure. `parameters={\"__array__\": \"string\"}` can only be applied to List-type arrays of uint8. After `ak.ravel`, it can't be strings because there are no List-type arrays.",
  "created_at":"2022-03-21T19:15:44Z",
  "id":1074318863,
  "issue":1377,
  "node_id":"IC_kwDODBCWws5ACM4P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-21T19:15:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this is a question of what to expect from `np.ravel` / `ak.ravel`. Fundamentally, I see a string as an atomic type, even though it is in reality composed of `uint8` characters. I don't see there being many uses for the average user in dropping the string abstraction, in the same way that I don't think dropping the record abstraction (#984) is often that useful.\r\n\r\nIf the user did want to drop this abstraction, then maybe we add an option to `ravel` to opt-in ignore the string behavior. \r\n\r\nSo, perhaps a clearer summary of this issue and #984 is that I think we should be more conservative with what `ak.ravel` as an implementation of `np.ravel` does, namely that it preserves record-ness and string-ness. Of course, what that actually looks like for records is more complex, which is why I've not actually made a PR just yet ;)\r\n",
  "created_at":"2022-03-21T20:29:30Z",
  "id":1074388441,
  "issue":1377,
  "node_id":"IC_kwDODBCWws5ACd3Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-27T11:33:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski in light of the recent work on strings and parameters during broadcasting, has your opinion on this changed? I.e., are you now in favour of treating strings as a mostly fundamental type by making it harder to lose string-ness?\r\n\r\nI believe that users are much more likely to want to flatten `10 * var * var * string` to `10 * string` than to `N * uint8`. If users *do* want integers, it's still possible to do this by stripping off parameters:\r\n```python\r\nak.ravel(ak.without_parameters(my_array_of_strings))\r\n```",
  "created_at":"2022-09-24T14:35:19Z",
  "id":1256983947,
  "issue":1377,
  "node_id":"IC_kwDODBCWws5K7A2L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T14:35:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I guess there are a lot of exceptions for strings this is somewhat like having custom broadcasting for strings. A deeper question is whether we want to maintain the standard that all of the string type's customizations are things that one could do through `ak.behavior`. I think that's not currently the case; the question is whether we want to get back to that state.\r\n\r\nSo the proposal is for `ak.ravel` to stop when it encounters a string node, so that the output of `ak.ravel` maintains both a list structure and the identification of that list as a string? Then strings would be considered atomic, a thing that can't be split up, which is what users would intuitively expect. However, it would remove a property from `ak.ravel` that users might expect: right now, `ak.ravel` makes an array into something that could be a NumPy array (not just rectilinear, but completely flat). That would not be the case if it could output an array of strings. The question is which feature\u2014not breaking strings or always outputting a NumPy-like array\u2014is more important. We can't have both.",
  "created_at":"2022-09-24T20:20:24Z",
  "id":1257058498,
  "issue":1377,
  "node_id":"IC_kwDODBCWws5K7TDC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T20:20:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Coming back to this, \r\n\r\n> `ak.ravel` makes an array into something that could be a NumPy array (not just rectilinear, but completely flat). That would not be the case if it could output an array of strings.\r\n\r\n`ak.to_numpy` already produces a flat array with `U` dtype for strings:\r\n```python\r\n>>> ak.to_numpy(ak.flatten(ak.Array([[\"this\",\"that\"]])))\r\narray(['this', 'thast'], dtype='<U5')\r\n```\r\n\r\nI think we *can* have both! ",
  "created_at":"2022-09-28T11:20:30Z",
  "id":1260759221,
  "issue":1377,
  "node_id":"IC_kwDODBCWws5LJai1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T11:21:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That would be to say that `ak.ravel` stops at strings and doesn't ravel within them, outputting a ListType array with string parameters (the first of the two choices).\r\n\r\nBut you're right, `ak.to_numpy` is ready to take it the rest of the way, padding those ListType arrays to make NumPy `dtype=\"U\"`. (For this to be Unicode-aware enough to turn UTF-8 into UTF-32, it must be going through a Python for loop, but that can be fixed with the functions Martin is looking at.)\r\n\r\nSo yes, because of what `ak.to_numpy` does, I guess `ak.ravel` can be made to stop at strings and bytestrings.\r\n\r\nWhat does `ak.flatten(ak.Array([\"one\", \"two\", \"three\"]))` do? That might also rip the strings apart because it considers `axis=1` to be the axis of lists-that-are-strings. Maybe they both need to be stopped. Or all functions? Does it need to be a codebase-wide `axis`-interpretation rule that lists-that-are-strings don't count as an axis?",
  "created_at":"2022-09-28T20:54:27Z",
  "id":1261454175,
  "issue":1377,
  "node_id":"IC_kwDODBCWws5LMENf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T20:54:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Since 1.8.0, `ak.ravel` just flat-out refuses to operate on strings (which is clearly not what we want):\r\n```pycon\r\n>>> import awkward as ak\r\n>>> ak.ravel(ak.Array([\"hi\", \"bye\"]))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/angus/Git/awkward/awkward/operations/ak_ravel.py\", line 48, in ravel\r\n    return _impl(array, highlevel, behavior)\r\n  File \"/home/angus/Git/awkward/awkward/operations/ak_ravel.py\", line 61, in _impl\r\n    out = ak.contents.NumpyArray(nplike.concatenate(out))\r\n  File \"/home/angus/Git/awkward/awkward/contents/numpyarray.py\", line 49, in __init__\r\n    ak.types.numpytype.dtype_to_primitive(self._data.dtype)\r\n  File \"/home/angus/Git/awkward/awkward/types/numpytype.py\", line 47, in dtype_to_primitive\r\n    raise ak._util.error(\r\nTypeError: while calling (from <stdin>, line 1)\r\n\r\n    ak.ravel(\r\n        array = <Array ['hi', 'bye'] type='2 * string'>\r\n        highlevel = True\r\n        behavior = None\r\n    )\r\n\r\nError details: unsupported dtype: dtype('<U3'). Must be one of\r\n\r\n    bool, int8, uint8, int16, uint16, int32, uint32, int64, uint64, float32, float64, complex64, complex128, datetime64, timedelta64, float16, float128, complex256\r\n\r\nor a datetime64/timedelta64 with units (e.g. 'datetime64[15us]')\r\n```\r\nThis looks like a bug in which we produce the NumPy dtype, and then try to build a `NumpyArray` out of it (which is not correct; we don't handle strings this way).\r\n\r\nMeanwhile, `ak.flatten` does behave as you expected:\r\n```pycon\r\n>>> import awkward as ak\r\n>>> ak.flatten(ak.Array([\"hi\", \"bye\"]))\r\n'hibye'\r\n```\r\n\r\nI think it _does_ need to be a rule that `axis=-1` means \"the axis in which each element is a list of characters, i.e. a string\". We already partially handle this. It would also help protect from attempting any ufunc operations on char-codes, which is no bad thing.\r\n\r\nMaybe we need a task to track all of the string-related changes that need to be made.",
  "created_at":"2022-09-29T06:32:18Z",
  "id":1261828200,
  "issue":1377,
  "node_id":"IC_kwDODBCWws5LNfho",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T06:36:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1378](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3a0045f) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.97%`.\n> The diff coverage is `52.14%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `69.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [145 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1378/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-22T20:01:11Z",
  "id":1075584268,
  "issue":1378,
  "node_id":"IC_kwDODBCWws5AHB0M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-22T20:01:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1380](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (771c28e) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.85%`.\n> The diff coverage is `54.42%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [152 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1380/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-22T21:42:23Z",
  "id":1075672672,
  "issue":1380,
  "node_id":"IC_kwDODBCWws5AHXZg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-22T21:42:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1381](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d5acfce) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.91%`.\n> The diff coverage is `54.14%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [152 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1381/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-23T10:42:39Z",
  "id":1076217164,
  "issue":1381,
  "node_id":"IC_kwDODBCWws5AJcVM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-24T22:05:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR should be done with the cleanups discussed in the Wednesday meeting. ",
  "created_at":"2022-03-24T12:25:14Z",
  "id":1077572804,
  "issue":1381,
  "node_id":"IC_kwDODBCWws5AOnTE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-24T12:25:14Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "author_association":"MEMBER",
  "body":"Oh: your ROOT wasn't compiled with C++17 support, so when this test tries to JIT-compile `std::optional`, it's not in ROOT.\r\n\r\n(I'm only recognizing this as the error because it happened to me before I recompiled my ROOT, then it didn't occur to me that having these in as tests would run into the same problem for somebody else.)\r\n\r\nOffhand, do you know of a way to determine from ROOT which C++ revision it uses?",
  "created_at":"2022-03-23T21:55:44Z",
  "id":1076858362,
  "issue":1382,
  "node_id":"IC_kwDODBCWws5AL436",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-23T21:55:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't think that's possible - I enforce C++17 on the Arch Linux ROOT package - you can find the PKGBUILD [here](https://github.com/archlinux/svntogit-community/tree/packages/root/trunk).\r\n\r\nOn your second question - I think you can ask the root compiler to spit out `__cplusplus` or get it from some ROOT header. Also, the CMake config files should contain the relevant info (at least they do on Arch). Otherwise, I'd have to dig in.",
  "created_at":"2022-03-23T22:03:41Z",
  "id":1076864538,
  "issue":1382,
  "node_id":"IC_kwDODBCWws5AL6Ya",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-23T22:03:41Z",
  "user":"MDQ6VXNlcjMxNjQ5NTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@kgizdov, in your ROOT environment (PyROOT, actually), what do you get when you try this:\r\n\r\n```python\r\n>>> import ROOT\r\n>>> hasattr(ROOT.std, \"optional\")\r\nTrue\r\n```\r\n\r\nI don't know how to ask for `__cplusplus`. (I have to get this in Python to make a decision to skip those tests.)",
  "created_at":"2022-03-23T22:04:45Z",
  "id":1076865292,
  "issue":1382,
  "node_id":"IC_kwDODBCWws5AL6kM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-23T22:04:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"So this line should ensure C++17:\r\n\r\nhttps://github.com/archlinux/svntogit-community/blob/a6014d2660207c8a3dfba61c5df18404f90d4bf2/trunk/settings.cmake#L10\r\n\r\nIn mine, I had to pass `-DCMAKE_CXX_STANDARD=17` as a CMake commandline argument, which looks like it's equivalent to your line.\r\n\r\nAnyway, what's failing in the tests is that it can't find `optional` in namespace `std`, so I'm adding\r\n\r\n```python\r\n@pytest.mark.skipif(not cpp17, reason=\"ROOT was compiled without C++17 support\")\r\n```\r\n\r\nto those four tests with\r\n\r\n```python\r\ncpp17 = hasattr(ROOT.std, \"optional\")\r\n```\r\n\r\nEven if it's a misnomer, if PyROOT doesn't find `\"optional\"` in `ROOT.std`, then it would have the same trouble finding `optional` in namespace `std`. At least it should be cutting on the symptom.\r\n\r\nBut I'd really like to know, on your system that doesn't find `optional` in namespace `std` in `gInterpreter.Declare`, whether `\"optional\"` is in `ROOT.std` in PyROOT. That would demonstrate that this fix is going to work.",
  "created_at":"2022-03-23T22:14:12Z",
  "id":1076872346,
  "issue":1382,
  "node_id":"IC_kwDODBCWws5AL8Sa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-23T22:14:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Indeed, `optional` is not found, however, the reason for this is yet unknown - I can confirm that in all the places `C++17` is selected and listed correctly at compile-time.",
  "created_at":"2022-03-23T22:29:06Z",
  "id":1076884286,
  "issue":1382,
  "node_id":"IC_kwDODBCWws5AL_M-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-23T22:29:06Z",
  "user":"MDQ6VXNlcjMxNjQ5NTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Then it might be a misnomer, but the important thing is whether `std::optional` exists.\r\n\r\nI had thought that ROOT would take the latest C++ standard available by a compiler, because it's only limiting what code can be compiled with that ROOT (since C++ standards are backward-compatible, so far). I was surprised that I had to explicitly tell it.",
  "created_at":"2022-03-23T22:33:47Z",
  "id":1076887093,
  "issue":1382,
  "node_id":"IC_kwDODBCWws5AL_41",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-23T22:33:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1383](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (56c49ba) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.85%`.\n> The diff coverage is `54.42%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [152 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1383/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-23T22:41:25Z",
  "id":1076891522,
  "issue":1383,
  "node_id":"IC_kwDODBCWws5AMA-C",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-23T22:41:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1384](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1b02d5b) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.85%`.\n> The diff coverage is `54.30%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [152 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1384/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-24T21:35:11Z",
  "id":1078407209,
  "issue":1384,
  "node_id":"IC_kwDODBCWws5ARzAp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-24T21:35:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I tried to watch for this, I know I avoided converting at least 1-2 because this side effect was being used. It's quite subtle - the new version is much better, IMO, since the reader can immediately see it's being intentionally reassigned.",
  "created_at":"2022-03-24T21:45:27Z",
  "id":1078414550,
  "issue":1384,
  "node_id":"IC_kwDODBCWws5AR0zW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-24T21:45:27Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1385](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f2ff870) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.91%`.\n> The diff coverage is `54.02%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [152 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1385/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-28T19:58:46Z",
  "id":1081079397,
  "issue":1385,
  "node_id":"IC_kwDODBCWws5Ab_Zl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-28T19:58:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> ak.argsort does not return an index-type in the case that the input list array is full of None values.\r\n\r\nYou're right about that qualifier: it does work if they're not _all_ None:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> x = ak.Array([[13.2, 14], [67.8]])\r\n>>> masked = ak.mask(x, [True, False])\r\n>>> masked[ak.argsort(masked)]\r\n<Array [[13.2, 14], None] type='2 * option[var * float64]'>\r\n```\r\n\r\nJust if every value is None:\r\n\r\n```python\r\n>>> masked = ak.mask(x, [False, False])\r\n>>> masked[ak.argsort(masked)]\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/irishep/awkward-1.0/awkward/highlevel.py\", line 991, in __getitem__\r\n    tmp = ak._util.wrap(self.layout[where], self._behavior)\r\nValueError: only arrays of integers or booleans may be used as a slice\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.8.0/src/libawkward/array/NumpyArray.cpp#L3136)\r\n```\r\n\r\nMoreover, this is something that version 2 gets right:\r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> x = ak.Array([[13.2, 14], [67.8]])\r\n>>> masked = ak.mask(x, [True, False])\r\n>>> masked[ak.argsort(masked)]\r\n<Array [[13.2, 14], None] type='2 * option[var * float64]'>\r\n>>> masked = ak.mask(x, [False, False])\r\n>>> masked[ak.argsort(masked)]\r\n<Array [None, None] type='2 * option[var * float64]'>\r\n```\r\n\r\nBut we're still fixing bugs in version 1, so I'm looking into it now.",
  "created_at":"2022-03-29T20:40:06Z",
  "id":1082352757,
  "issue":1386,
  "node_id":"IC_kwDODBCWws5Ag2R1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-29T20:40:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Ah, I missed an important bit of information that you gave me:\r\n\r\n> ```python\r\n> >>> ak.argsort(masked)\r\n> <Array [None, None] type='2 * option[var * float64]'>\r\n> ```\r\n\r\nSince this is the output of an `argsort`, it should have integer type. I bet the original floating-point type got passed through because something (an array of non-Nones) was empty. We've been cracking down on such \"optimizations\" in v2 because they can get the types wrong, like this. (In v2, it comes up because it makes Dask predict the wrong type.)",
  "created_at":"2022-03-29T20:45:31Z",
  "id":1082356983,
  "issue":1386,
  "node_id":"IC_kwDODBCWws5Ag3T3",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-03-29T20:45:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this is linked to the case I mentioned the other day, where we have a fast-path in the return. ",
  "created_at":"2022-03-29T21:32:08Z",
  "id":1082393360,
  "issue":1386,
  "node_id":"IC_kwDODBCWws5AhAMQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-29T21:32:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Could you link that here? I don't remember it and I don't want to miss an issue.\r\n\r\nFast-path returns are bad, especially now with the type-tracer.",
  "created_at":"2022-03-29T21:34:20Z",
  "id":1082394863,
  "issue":1386,
  "node_id":"IC_kwDODBCWws5AhAjv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-29T21:34:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I can't remember if we ever opened an issue for it, but it looks like you've found it :) https://github.com/scikit-hep/awkward-1.0/blob/80579c7b67d508ea0c916b7b62a7dfe5826fe981/src/libawkward/array/ListOffsetArray.cpp#L1931\r\n",
  "created_at":"2022-03-29T21:49:47Z",
  "id":1082405931,
  "issue":1386,
  "node_id":"IC_kwDODBCWws5AhDQr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-29T21:49:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's that this PR fixes. So if that was causing problems elsewhere, they'll be gone now.",
  "created_at":"2022-03-29T21:50:58Z",
  "id":1082406714,
  "issue":1386,
  "node_id":"IC_kwDODBCWws5AhDc6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-29T21:50:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1387](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9856c7d) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.89%`.\n> The diff coverage is `54.02%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [152 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1387/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-29T21:54:01Z",
  "id":1082408768,
  "issue":1387,
  "node_id":"IC_kwDODBCWws5AhD9A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-29T21:54:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Right: it fails because #1274 fixes v2 without fixing v1. I just wanted to confirm that this is where it stands for now.",
  "created_at":"2022-03-29T22:41:46Z",
  "id":1082440356,
  "issue":1388,
  "node_id":"IC_kwDODBCWws5AhLqk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-29T22:41:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1388](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1d47b9c) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.89%`.\n> The diff coverage is `55.42%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [156 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1388/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-29T22:42:24Z",
  "id":1082440700,
  "issue":1388,
  "node_id":"IC_kwDODBCWws5AhLv8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-29T22:42:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This PR is included within #1389 and doesn't need to stay open. #1389 takes over its role as the one to close #1283.",
  "created_at":"2022-04-26T18:57:46Z",
  "id":1110143516,
  "issue":1388,
  "node_id":"IC_kwDODBCWws5CK3Ic",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-26T18:57:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1389](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9884cf8) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/b2fd2be5a6ce601f9fdd1098e49895637b7257f1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b2fd2be) will **decrease** coverage by `0.89%`.\n> The diff coverage is `54.02%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `66.09% <0.00%> (+2.29%)` | :arrow_up: |\n| [src/awkward/\\_v2/identifier.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2lkZW50aWZpZXIucHk=) | `55.69% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfZnJvbV9wYXJxdWV0LnB5) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/io/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vYWtfdG9fcGFycXVldC5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/structure/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2ZpcnN0cy5weQ==) | `75.00% <0.00%> (\u00f8)` | |\n| ... and [152 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1389/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-30T10:17:39Z",
  "id":1082899728,
  "issue":1389,
  "node_id":"IC_kwDODBCWws5Ai70Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-30T16:55:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"That's true: we won't be supporting the GPU in v1 (the experimental support has been removed), so a direct call to `std::stable_sort` is a perfectly acceptable solution (and a good idea!).",
  "created_at":"2022-03-30T14:56:17Z",
  "id":1083244884,
  "issue":1389,
  "node_id":"IC_kwDODBCWws5AkQFU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-30T14:56:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I naively expected this to fix the MacOS tests. It *seems* like it _maybe_ fixes 3.6, but not 3.7+. Perhaps this is a fluke, or maybe it reveals that there is more than one contributing bug here. \r\n\r\nFirst, I'll re-run the 3.6 test.",
  "created_at":"2022-03-30T16:41:45Z",
  "id":1083373509,
  "issue":1389,
  "node_id":"IC_kwDODBCWws5AkvfF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-03-30T18:45:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We talked about this at today's meeting; it's old, addresses v1 only, and there haven't been any complaints about it not being done. I'm closing it. If need be, it can be reopened as a bug-fix in the 1.10.x series (v1 bug-fixes).",
  "created_at":"2022-09-08T16:23:26Z",
  "id":1240941421,
  "issue":1389,
  "node_id":"IC_kwDODBCWws5J90Nt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T16:23:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1390](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9ab29f6) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/a8c37b917db5da3abf10f41c61721c43ed0b166d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a8c37b9) will **increase** coverage by `0.33%`.\n> The diff coverage is `73.62%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `93.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `90.80% <\u00f8> (+2.62%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX21hc2sucHk=) | `95.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `74.31% <65.90%> (+1.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19sYXlvdXQucHk=) | `81.81% <75.00%> (-2.06%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `62.24% <80.00%> (+0.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `83.33% <86.40%> (+4.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `83.69% <87.50%> (+0.16%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `70.55% <89.28%> (+4.46%)` | :arrow_up: |\n| ... and [11 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1390/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-03-31T14:23:22Z",
  "id":1084657561,
  "issue":1390,
  "node_id":"IC_kwDODBCWws5Apo-Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-04T21:06:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I was thinking about this, and the per-field attributes could be implemented using `parameters`; we just need to provide the appropriate high-level API for this. I imagine this in the same way that the string abstraction is a specialisation of the behaviour system, we could do the same for attrs. However, a drawback of this method is that we don't retain the benefits of field-association, i.e. `with_field(array, None, 'field')` wouldn't update the attr `metadata` unless we implemented logic for this. \r\n\r\nSaying this, in general, I prefer the idea of a dedicated per-field metadata object rather than piggybacking an existing mechanism. If we redesigned awkward from scratch, I'd be tempted to do the same for the `__array__` behavior mechanism such that parameters only contains user-metadata. \r\n\r\nMaybe the name of this mechanism is `field_parameters`? I'll give it some more thought...",
  "created_at":"2022-11-12T14:09:14Z",
  "id":1312488274,
  "issue":1391,
  "node_id":"IC_kwDODBCWws5OOvtS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-12T14:10:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Jim and I discussed this - we'll move this to another release in favour of more pressing issues. This will some require some thought.",
  "created_at":"2022-11-15T17:35:29Z",
  "id":1315652605,
  "issue":1391,
  "node_id":"IC_kwDODBCWws5Oa0P9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T17:35:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1392?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1392](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1392?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (57b8c56) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/a8c37b917db5da3abf10f41c61721c43ed0b166d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a8c37b9) will **decrease** coverage by `0.04%`.\n> The diff coverage is `59.09%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1392?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1392/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `93.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1392/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.62% <52.77%> (-1.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1392/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `62.24% <80.00%> (+0.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1392/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `79.28% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1392/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `73.59% <0.00%> (-0.57%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1392/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `57.14% <0.00%> (+1.33%)` | :arrow_up: |\n",
  "created_at":"2022-04-01T13:34:44Z",
  "id":1085907730,
  "issue":1392,
  "node_id":"IC_kwDODBCWws5AuaMS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-01T13:34:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1393](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cad9f90) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/a8c37b917db5da3abf10f41c61721c43ed0b166d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a8c37b9) will **increase** coverage by `0.39%`.\n> The diff coverage is `78.90%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `93.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `90.80% <\u00f8> (+2.62%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX21hc2sucHk=) | `95.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `74.31% <65.90%> (+1.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19sYXlvdXQucHk=) | `81.81% <75.00%> (-2.06%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `62.24% <80.00%> (+0.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `83.33% <86.40%> (+4.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `83.69% <87.50%> (+0.16%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `70.55% <89.28%> (+4.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `82.04% <100.00%> (-0.03%)` | :arrow_down: |\n| ... and [10 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1393/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-01T20:59:13Z",
  "id":1086317665,
  "issue":1393,
  "node_id":"IC_kwDODBCWws5Av-Rh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-01T20:59:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1394](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (53d3876) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/a8c37b917db5da3abf10f41c61721c43ed0b166d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a8c37b9) will **increase** coverage by `0.39%`.\n> The diff coverage is `78.90%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `93.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `90.80% <\u00f8> (+2.62%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX21hc2sucHk=) | `95.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `74.31% <65.90%> (+1.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19sYXlvdXQucHk=) | `81.81% <75.00%> (-2.06%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `62.24% <80.00%> (+0.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `83.33% <86.40%> (+4.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `83.69% <87.50%> (+0.16%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `70.55% <89.28%> (+4.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `82.04% <100.00%> (-0.03%)` | :arrow_down: |\n| ... and [10 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1394/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-04T18:11:28Z",
  "id":1087862335,
  "issue":1394,
  "node_id":"IC_kwDODBCWws5A13Y_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-04T18:11:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1395](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6b2ec74) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/a8c37b917db5da3abf10f41c61721c43ed0b166d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a8c37b9) will **increase** coverage by `0.39%`.\n> The diff coverage is `78.90%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `93.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `90.80% <\u00f8> (+2.62%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX21hc2sucHk=) | `95.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `74.31% <65.90%> (+1.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19sYXlvdXQucHk=) | `81.81% <75.00%> (-2.06%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `62.24% <80.00%> (+0.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `83.33% <86.40%> (+4.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `83.69% <87.50%> (+0.16%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `70.55% <89.28%> (+4.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `82.04% <100.00%> (-0.03%)` | :arrow_down: |\n| ... and [10 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1395/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-04T19:37:27Z",
  "id":1087938785,
  "issue":1395,
  "node_id":"IC_kwDODBCWws5A2KDh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-04T19:37:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It's a good factorization. Be aware that your git submodules are out of date, and that's why they're being counted as diffs in this PR. @agoose77 also suggested turning the ErrorContext manager into a decorator, which is something we should do across all the functions, not in this PR.",
  "created_at":"2022-04-04T21:35:46Z",
  "id":1088036221,
  "issue":1397,
  "node_id":"IC_kwDODBCWws5A2h19",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-04T21:35:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> your git submodules are out of date\r\n\r\nRemind me how to make this go away?\r\n\r\n> something we should do across all the functions, not in this PR.\r\n\r\nAgreed - it's here because it helped me reason about what the code was doing.",
  "created_at":"2022-04-04T21:37:11Z",
  "id":1088037226,
  "issue":1397,
  "node_id":"IC_kwDODBCWws5A2iFq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-04T21:37:11Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"> > your git submodules are out of date\r\n> \r\n> Remind me how to make this go away?\r\n\r\nI don't remember the git commands, so I always just clone a new repo.\r\n\r\nI just [looked it up](https://stackoverflow.com/a/10916398/1623645): you `cd` into the submodule directory and then `git checkout` using the submodule's commit hash. It will be a detached HEAD; that's fine.\r\n\r\n  * dlpack: e1e11e0d555c08bec08a6c7773aa777dfcaae9da\r\n  * pybind11: ffa346860b306c9bbfb341aed9c14c067751feb8\r\n  * rapidjson: f54b0e47a08782a6131cc3d60f94d038fa6e0a51",
  "created_at":"2022-04-04T22:22:30Z",
  "id":1088070470,
  "issue":1397,
  "node_id":"IC_kwDODBCWws5A2qNG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-04T22:22:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1397](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (34e04c3) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.68%`.\n> The diff coverage is `45.76%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.91% <0.00%> (-0.13%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnQucHk=) | `95.83% <\u00f8> (\u00f8)` | |\n| ... and [55 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1397/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-18T20:34:05Z",
  "id":1101739423,
  "issue":1397,
  "node_id":"IC_kwDODBCWws5BqzWf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-19T20:59:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"OK, @jpivarski , this actually runs. It still does not handle _metadata or directory partitioning, but there should be enough here for dask-awkward to use.\r\n\r\n(cc @douglasdavis , since we talked about this)",
  "created_at":"2022-04-18T21:05:41Z",
  "id":1101767310,
  "issue":1397,
  "node_id":"IC_kwDODBCWws5Bq6KO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-18T21:05:41Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"I'll be looking it over more carefully soon. In the meantime, I just want to make sure that this PR wouldn't change the pybind11 version.",
  "created_at":"2022-04-19T02:53:21Z",
  "id":1101941268,
  "issue":1397,
  "node_id":"IC_kwDODBCWws5BrkoU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-19T02:53:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1398](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c1627b1) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/a8c37b917db5da3abf10f41c61721c43ed0b166d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a8c37b9) will **increase** coverage by `0.33%`.\n> The diff coverage is `73.62%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `93.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `90.80% <\u00f8> (+2.62%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX21hc2sucHk=) | `95.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `74.31% <65.90%> (+1.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19sYXlvdXQucHk=) | `81.81% <75.00%> (-2.06%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `62.24% <80.00%> (+0.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `83.33% <86.40%> (+4.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `83.69% <87.50%> (+0.16%)` | :arrow_up: |\n| ... and [12 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1398/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-06T04:31:17Z",
  "id":1089808452,
  "issue":1398,
  "node_id":"IC_kwDODBCWws5A9ShE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-06T04:31:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1399](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d0d7b9c) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.07%`.\n> The diff coverage is `31.29%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `75.11% <37.06%> (-8.22%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `90.42% <50.00%> (-0.15%)` | :arrow_down: |\n| [...rc/awkward/\\_v2/operations/convert/ak\\_from\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX251bXB5LnB5) | `100.00% <100.00%> (+27.77%)` | :arrow_up: |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1399/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-06T11:09:16Z",
  "id":1090143888,
  "issue":1399,
  "node_id":"IC_kwDODBCWws5A-kaQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-12T09:02:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1401](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dce33c4) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/a8c37b917db5da3abf10f41c61721c43ed0b166d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a8c37b9) will **increase** coverage by `0.34%`.\n> The diff coverage is `73.74%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `93.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `90.80% <\u00f8> (+2.62%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX21hc2sucHk=) | `95.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `74.31% <65.90%> (+1.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19sYXlvdXQucHk=) | `81.81% <75.00%> (-2.06%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `62.24% <80.00%> (+0.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `80.48% <80.00%> (+0.82%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `83.33% <86.40%> (+4.12%)` | :arrow_up: |\n| ... and [14 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1401/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-06T20:46:05Z",
  "id":1090776870,
  "issue":1401,
  "node_id":"IC_kwDODBCWws5BA-8m",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-08T16:07:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ioanaif I've tagged you here because I think this is your area of expertise?\r\n\r\nHere's an initial implementation of `recursively_apply` for `ak._v2.Record`.  I think that we want to support the `recursively_apply` interface, because (a) it's useful, and (b) it's currently supported (via `ak._util`) in v1. \r\n\r\nHowever, whilst 3c79afd nearly passes the simple test that I've added, existing code does not (in many places) expect a non-Content argument in `apply`. So, if you are happy that we want to implement this function for `Record`, I think we'd also need to address how to fix these other functions. \r\n\r\nOn this note, @jpivarski my main concern is what to do about the `is_OptionType` etc. flags. Right now, users can pass a `Record` object to a high level function that does not expect a non-Content, and it will throw an Exception if it attempts to lookup these flags. Some `apply` functions check `isinstance(..., Content)`, but I haven't looked into whether that is to handle some other non-content case besides `Record` or not.\r\n\r\n<details> \r\n<summary>Rambling about types</summary>\r\n\r\nAs we've touched on before, `ak._v2.Record` and `ak._v2.Content` are a bit strange because they are really specialised implementations of a more abstract interface, but we never formally define this via inheritance / protocols (in the same way that we don't for `Form` and `Content`). \r\n\r\nIt's funny, I am in general not a fan of strict inheritance hierarchies, but I hadn't realised how much nicer structural subtyping is when there are formal mechanisms to check them (e.g. mypy). I think you already raised the goal of implementing mypy support at a future date, so that's something to look forward to working on. \r\n\r\n</details>\r\n\r\nMy first instinct here is that `Record` already partially quacks like a `Content`, so we should also implement these `is_` flags. It would then require us to decide whether to add an `is_RecordItem` (terrible name), or leave this type omitted.\r\n",
  "created_at":"2022-04-06T21:18:20Z",
  "id":1090817875,
  "issue":1401,
  "node_id":"IC_kwDODBCWws5BBI9T",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-06T21:20:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is my first impression, so take it with that in mind, but I _don't_ think we want Record to look too much like Content. The thing about the Content hierarchy is that any Content subclass can be a `content` or one of the `contents` of any other\u2014not so with Record. (Specifically, I mean `ak._v2.contents.Content` and `ak._v2.record.Record`.) A Record can only ever be at the root of a tree, and the `array` that it contains must be a RecordArray.\r\n\r\nAs such, the value of getting Record into a `recursively_apply` call is limited: it can avoid a special case in the first step, before descent, but that's it. The value of the Content subclasses having a `recursively_apply` call is much stronger: it's the _only_ way to address the case of Content subclass \"XYZArray\" at some deep node in the hierarchy. A Record's `recursively_apply` saves one special case, XYZArray's `recursively_apply` saves infinitely many.\r\n\r\nIt would save that one special case. Implementations of `ak.*` functions that can take either an array or a record get a little simpler by not having to check `isinstance(layout, ak._v2.record.Record)` and doing something with that. Are there a lot of such `ak.*` functions? They can be identified by the fact that they pass `allow_record=True` when they internally call `to_layout`. If they're rare (I think they might be rare), then having _more_ ceremony to call them out might actually be a benefit.\r\n\r\nStreamlining is not always a good idea. If we minimize the differences between Content and Record enough, Records might start getting _accidentally_ passed through as Contents in places where we don't want them to be. The symptom of that would be exceptions getting raised downstream of where the actual mistake happens, and those can be hard to trace back.\r\n\r\nI can say that some of the connection between low-level Record and Content is historical: in C++, some functions could return arrays or scalars, such as `getitem`. To pass the type-checker, these functions had to return something like `std::variant<numbers, None, Record, Content>`, but the C++ was C++11, not 17. (Also, what's \"`numbers`\"?) So scalars returned from C++ had to be implemented as Content subclasses even when they logically aren't: numbers are NumpyArray with zero dimensions, a case that has to be forbidden as input to many functions, None is a Content subclass with almost all methods unimplemented, and Record is a subclass of Content, but only on the C++ side. pybind11 makes it out to be not a subclass of Content on the Python side. So, some of the method names being the same were because of this undesired constraint.\r\n\r\n-------------------------\r\n\r\nIt takes so long to write a response that sometimes I'll have a change of heart while writing it. It might be alright for Record to have a `recursively_apply` (to save that one case, mentioned above), but its `recursively_apply` may need to be implemented in an entirely different way. I don't think the `action` function should ever match it. If `action` is going to specially check for the Record case, that case could just as easily be checked outside of `action` and `recursively_apply`.\r\n\r\nThe main benefit of Record's `recursively_apply` is to get through that one layer, which is always on the root of the layout tree, into the part that the `action` actually cares about. This `recursively_apply` could probably be written as a short-circuit to passing the `action` down to the Record's `array`.",
  "created_at":"2022-04-06T22:04:06Z",
  "id":1090855013,
  "issue":1401,
  "node_id":"IC_kwDODBCWws5BBSBl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-06T22:04:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> but I _don't_ think we want Record to look too much like Content.\r\n\r\nHa, this was my first thought too. Then I flip-flopped after looking at v1. \r\n\r\n> As such, the value of getting Record into a recursively_apply call is limited ...\r\n\r\nAgreed. It mainly replaces the burden of checking for `isinstance(layout, Record)` with the need to support `Record` and `Content` in the `apply` function...\r\n\r\n>  Implementations of ak.* functions that can take either an array or a record get a little simpler by not having to check \r\n\r\nas you put in the this paragraph!\r\n\r\n> It might be alright for Record to have a recursively_apply ...  I don't think the action function should ever match it. \r\n\r\nI considered this solution earlier, but I wasn't sure whether this conditional skip would be a bad thing. On balance, I think this *might* be the best solution - the `to_layout` caller determines whether they wish to support `Record`s or not, and the `apply` function is guaranteed only to receive a `Content`.\r\n\r\n> It takes so long to write a response that sometimes I'll have a change of heart while writing it.\r\n\r\nI'm glad it's not just me. Sometimes I'll write the same answer three or four times before removing half the text in favour of reading the replies!\r\n",
  "created_at":"2022-04-06T22:12:29Z",
  "id":1090865307,
  "issue":1401,
  "node_id":"IC_kwDODBCWws5BBUib",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-06T22:12:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Without `mask_identity`, empty arrays or lists result in the \"identity\" of the reducer's semigroup operation. For maximization, the identity is minus infinity. For integer types, which don't have infinite values, the identity is the smallest possible value.\r\n\r\n```python\r\nnp.iinfo(np.int64).min   \u2192   -9223372036854775808\r\n```\r\n\r\nTry it with `np.uint64`; it should be `0`. So, strange as it may seem, it's the `axis=None` case that's wrong here: it should not be returning None. It should be returning `-9223372036854775808`.\r\n\r\nSame for the handling of `initial`. It was added because it's an argument that NumPy defines.\r\n\r\nYou're right that the special-casing is responsible for this bug. However, I don't see how we can remove the special-casing. Maybe the whole array can be put inside of a length-1 RegularArray and the reducer can be applied to it, but that wouldn't handle RecordArrays the way that our chosen behavior for `axis=None` does\u2014flattening all the fields of the records. For that, you need `completely_flatten`, which is completely distinct from the `reduce_next` formalism. It would be easier to apply this fix to the special cases.",
  "created_at":"2022-04-07T16:04:02Z",
  "id":1091918473,
  "issue":1402,
  "node_id":"IC_kwDODBCWws5BFVqJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-07T16:04:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, I realise that I didn't put the issue title in the body text\r\n\r\n> So, strange as it may seem, it's the axis=None case that's wrong here\r\n\r\nI understood the significance of `-9223372036854775808` (and indeed, I wanted an integer result when I stumbled into this bug),  and this identity for `max` makes sense. The bug(s) that I was trying to report was the `axis=None` case ignores both `identity` and `mask_identity`.\r\n\r\nAs discussed, this happens simply because we don't pass these options to the `nplike` special case block.\r\n\r\nThe solution that I was proposing was to take the flat array \"parts\" that are returned by `completely_flatten` and invoke the Awkward reduction mechanism to reduce them, followed by a null-aware outer reducer. I.E., replace the `nplike.min` call with `layout.min`.\r\n",
  "created_at":"2022-04-07T21:24:20Z",
  "id":1092212945,
  "issue":1402,
  "node_id":"IC_kwDODBCWws5BGdjR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-08T09:06:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The outer reducer would have to be a special path, regardless. This would be a better thing to fix with minimal changes, I think. I don't see a way to remove its specialness",
  "created_at":"2022-04-07T22:21:01Z",
  "id":1092264379,
  "issue":1402,
  "node_id":"IC_kwDODBCWws5BGqG7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-07T22:21:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, we need a special path (unless we implement a partitioned array again, though I assume that just concatenated the memory anyway, which we could do if it were actually desirable!).\r\n\r\nI was going to propose a two-stage reduction, which would have simplified the code, but this would only work for reducers that form a group (`add`, `prod`).[^footnote] This doesn't hold for all reducers, e.g. `count`, which maps _to_ a different set (the counts).\r\n\r\n[^footnote]: your use of the group terminology was a useful reminder that it's a good concise language here",
  "created_at":"2022-04-08T10:03:16Z",
  "id":1092693922,
  "issue":1402,
  "node_id":"IC_kwDODBCWws5BIS-i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-08T11:09:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Additionally, for when we fix this issue, I think the logic in `argmax` is not quite right at the moment. Here we store the best `argmax` result within each sublist. This will not correctly index into the ravelled array if any part besides the first one wins:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/278dccee86046f7b92505c6f725ff8574235ecf6/src/awkward/_v2/operations/reducers/ak_argmax.py#L84\r\n\r\nWe just need to add \r\n```python\r\nif best_index is None:\r\n    best_index = out\r\n    best_value = tmp[out]\r\nelif tmp[out] > best_value:\r\n    best_index = best_index + out\r\n    best_value = tmp[out]\r\n```\r\n\r\nReproducer:\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\n\r\narray = ak._v2.zip({\r\n    \"this\": np.arange(10),\r\n    \"that\": np.arange(10) + 10\r\n})\r\n\r\nprint(ak._v2.argmax(array, axis=None, flatten_records=True))\r\n```\r\n\r\nThe same bug is in `argmin`",
  "created_at":"2022-04-08T11:44:35Z",
  "id":1092775562,
  "issue":1402,
  "node_id":"IC_kwDODBCWws5BIm6K",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-08T11:47:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Avoiding concatenation was intentional: it's a performance thing, but it's a big one. Taking a set of buffers as-is, reducing over each one of them separately, and then reducing those results, is much better than concatenating them all into a contiguous memory buffer and then reducing that once. (I think even if we had PartitionedArray, it would still be a separate code-path from that, but anyway, it's moot: there's no PartitionedArray.)\r\n\r\nI just checked NumPy and the argmin/argmax index is the _first_ index when the extreme value is repeated, and that's what happens without records, but not with records (i.e. when `completely_flatten` returns more than one buffer). There's some policy decision about what argmin/argmax should even mean when you have to linearize the fields into one sequence, but the simplest interpretation (the one I would assume) is that they get flattened into depth-first order.\r\n\r\nSo\r\n\r\n```python\r\n>>> array = ak._v2.zip({\r\n...     \"this\": np.arange(10),\r\n...     \"that\": np.arange(10) + 10\r\n... })\r\n>>> array.show()\r\n[{this: 0, that: 10},\r\n {this: 1, that: 11},\r\n {this: 2, that: 12},\r\n {this: 3, that: 13},\r\n {this: 4, that: 14},\r\n {this: 5, that: 15},\r\n {this: 6, that: 16},\r\n {this: 7, that: 17},\r\n {this: 8, that: 18},\r\n {this: 9, that: 19}]\r\n>>> ak._v2.argmax(array, axis=None, flatten_records=True)\r\n9\r\n```\r\n\r\nshouldn't be `9`, it should be `19`, and\r\n\r\n```python\r\n>>> array = ak._v2.zip({\r\n...     \"this\": np.arange(10) + 10,\r\n...     \"that\": np.arange(10)\r\n... })\r\n>>> array.show()\r\n[{this: 10, that: 0},\r\n {this: 11, that: 1},\r\n {this: 12, that: 2},\r\n {this: 13, that: 3},\r\n {this: 14, that: 4},\r\n {this: 15, that: 5},\r\n {this: 16, that: 6},\r\n {this: 17, that: 7},\r\n {this: 18, that: 8},\r\n {this: 19, that: 9}]\r\n>>> ak._v2.argmin(array, axis=None, flatten_records=True)\r\n0\r\n```\r\n\r\nshouldn't be `0`, it should be `10`.",
  "created_at":"2022-04-08T14:29:57Z",
  "id":1092924292,
  "issue":1402,
  "node_id":"IC_kwDODBCWws5BJLOE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-08T14:29:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Avoiding concatenation was intentional: it's a performance thing, but it's a big one. \r\n\r\nAbsolutely, if concatenation were cheap we'd not need any of this code! Again, to clarify, I'm really saying \"which we would have  done if it were actually desirable!\"\r\n\r\n> There's some policy decision about what argmin/argmax should even mean when you have to linearize the fields into one sequence, but the simplest interpretation (the one I would assume) is that they get flattened into depth-first order.\r\n\r\nRight, that's my interpretation too. By \"first wins\" I was referring to the \"part\" (partition) not the unique value. In our existing implementation, we store the per-partition index, not the ravelled index.",
  "created_at":"2022-04-08T14:40:27Z",
  "id":1092934222,
  "issue":1402,
  "node_id":"IC_kwDODBCWws5BJNpO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-08T14:40:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I changed the title to make a firm decision on this. Although it was designed to return `None` on empty arrays (note the explicit type-tracer code for that), this is not what NumPy does. As annoying as I consider NumPy's behavior, we should reproduce it:\r\n\r\n```python\r\n>>> np.max([])\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<__array_function__ internals>\", line 180, in amax\r\n  File \"/home/jpivarski/mambaforge/lib/python3.9/site-packages/numpy/core/fromnumeric.py\", line 2791, in amax\r\n    return _wrapreduction(a, np.maximum, 'max', axis, None, out,\r\n  File \"/home/jpivarski/mambaforge/lib/python3.9/site-packages/numpy/core/fromnumeric.py\", line 86, in _wrapreduction\r\n    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\r\nValueError: zero-size array to reduction operation maximum which has no identity\r\n```\r\n\r\nSimilarly, `initial` should be passed to the NumPy function, since NumPy (nplike) handles that already.\r\n\r\nThis one should be pretty quick, though I've just run out of time in my Day of Fixing Bugs.",
  "created_at":"2022-08-15T20:30:14Z",
  "id":1215758724,
  "issue":1402,
  "node_id":"IC_kwDODBCWws5IdwGE",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-15T20:30:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #2020",
  "created_at":"2022-12-23T14:14:52Z",
  "id":1363987905,
  "issue":1402,
  "node_id":"IC_kwDODBCWws5RTM3B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-23T14:14:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1404](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b58e02f) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/a8c37b917db5da3abf10f41c61721c43ed0b166d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a8c37b9) will **increase** coverage by `0.41%`.\n> The diff coverage is `73.82%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `93.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `90.80% <\u00f8> (+2.62%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/structure/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX21hc2sucHk=) | `95.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `74.31% <65.90%> (+1.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19sYXlvdXQucHk=) | `81.81% <75.00%> (-2.06%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `62.24% <80.00%> (+0.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `83.33% <86.40%> (+4.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `83.69% <87.50%> (+0.16%)` | :arrow_up: |\n| ... and [14 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1404/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-08T11:55:10Z",
  "id":1092782843,
  "issue":1404,
  "node_id":"IC_kwDODBCWws5BIor7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-08T11:55:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This is \"in progress\" because of PR #1408.",
  "created_at":"2022-08-15T20:19:24Z",
  "id":1215747823,
  "issue":1405,
  "node_id":"IC_kwDODBCWws5Idtbv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T20:19:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This also fails in v2. The path that I took to determine this is a bit circular, but I'm confident that the fix/bug is the same for v1 and v2, as it seems to occur in code that is mostly 1:1.\r\n\r\nIt looks like the issue is probably rooted somewhere in `awkward_ListArray_getitem_jagged_shrink`, which prepares `nextcarry`, or ``awkward_ListArray_getitem_jagged_numvalid`` which prepares the inputs for this kernel. \r\n\r\nThis test case undergoes the wrong carry in `ListArray`:\r\n\r\n```python3\r\narray = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([1, 3], dtype=np.int64)),\r\n        ak.layout.ListOffsetArray64(\r\n            ak.layout.Index64(np.array([0, 2, 2, 3], dtype=np.int64)),\r\n            ak.layout.NumpyArray(np.array([2, 2, 2], dtype=np.int64)),\r\n        ),\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\narray_good = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([0, 2], dtype=np.int64)),\r\n        ak.layout.ListOffsetArray64(\r\n            ak.layout.Index64(np.array([0, 0, 1, 3], dtype=np.int64)),\r\n            ak.layout.NumpyArray(np.array([2, 2, 2], dtype=np.int64)),\r\n        ),\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\nindex = ak.Array(\r\n    ak.layout.ListOffsetArray64(\r\n        ak.layout.Index64(np.array([0, 2], dtype=np.int64)),\r\n        ak.layout.IndexedOptionArray64(\r\n            ak.layout.Index64(np.array([0, 1], dtype=np.int64)),\r\n            ak.layout.ListOffsetArray64(\r\n                ak.layout.Index64(np.array([0, 0, 1], dtype=np.int64)),\r\n                ak.layout.NumpyArray(np.array([0], dtype=np.int64)),\r\n            ),\r\n        )\r\n    ),\r\n    check_valid=True,\r\n)\r\n\r\ndef as_v2(array):\r\n    layout = ak.to_layout(array)\r\n    layout_v2 = ak._v2.tmp_for_testing.v1_to_v2(layout)\r\n    return ak._v2.Array(layout_v2)\r\n\r\nprint(array_good, index)\r\nas_v2(array_good)[as_v2(index)]\r\nprint(\"-\"*64)\r\nprint(array, index)\r\nas_v2(array)[as_v2(index)]\r\n```",
  "created_at":"2022-04-11T13:19:39Z",
  "id":1095042592,
  "issue":1406,
  "node_id":"IC_kwDODBCWws5BRQYg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T13:52:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Upon further digging, I think it's `awkward_ListArray_getitem_jagged_shrink`. This builds `nextcarry` that is used to slice the `ListArray` content. As such, we know that `nextcarry` needs to account for the sliced content's `starts` and `stops`. The `awkward_ListArray_getitem_jagged_shrink` kernel doesn't accept any arguments that (in)directly refer to `stops` or `starts`. It only looks at the slice indices. Hence, we see an Exception when slicing a `ListArray` with a non-zero start.\r\n\r\nMore concretely, in the above reproducer, at some point we end up in `ListArray._getitem_next_jagged(self, ...)`, where `self` is the `array` that is being sliced (converted from a `ListOffsetArray`):\r\n```\r\n<ListArray len='1'>\r\n    <starts><Index dtype='int64' len='1'>[1]</Index></starts>\r\n    <stops><Index dtype='int64' len='1'>[3]</Index></stops>\r\n    <content><ListOffsetArray len='3'>\r\n        <offsets><Index dtype='int64' len='4'>[0 2 2 3]</Index></offsets>\r\n        <content><NumpyArray dtype='int64' len='3'>[2 2 2]</NumpyArray></content>\r\n    </ListOffsetArray></content>\r\n</ListArray>\r\n```\r\n\r\nOur `slicestarts` and `slicestops` are \r\n```\r\n<Index dtype='int64' len='1'>[0]</Index>\r\n<Index dtype='int64' len='1'>[2]</Index>\r\n```\r\n\r\nThe `missing` array is actually the wrapped `IndexedOptionArray` index, so it indicates where the `None` values (sublists, in this case) are. Using this, the `awkward_ListArray_getitem_jagged_numvalid` kernel determines that we have `2` valid values between `slicestarts` and `slicestops`.\r\n\r\nNow we move onto `awkward_ListArray_getitem_jagged_shrink`, which builds the `carry` index for the `ListArray's` contents. Approximately, this just places `range(slicestarts, slicestops)` into the `nextcarry` array.\r\n\r\nJust like with https://github.com/scikit-hep/awkward-1.0/issues/910, I believe the problem is that we're then applying this `carry` that indexes into the slicer's `IndexedOptionArray` to the sliced-array's content (which is unrelated):\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/edfce3800ccd1f8b90734cf9594c3b5c117441ff/src/awkward/_v2/contents/listarray.py#L452-L476\r\n\r\n",
  "created_at":"2022-04-11T13:47:57Z",
  "id":1095075538,
  "issue":1406,
  "node_id":"IC_kwDODBCWws5BRYbS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T13:53:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77, you and other core developers can call any bug you find \"verified\".",
  "created_at":"2022-06-13T18:00:28Z",
  "id":1154218000,
  "issue":1406,
  "node_id":"IC_kwDODBCWws5Ey_gQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-13T18:00:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1407?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1407](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1407?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7463625) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-04-11T13:54:31Z",
  "id":1095083321,
  "issue":1407,
  "node_id":"IC_kwDODBCWws5BRaU5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T14:38:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@henryiii FYI: it looks like setuptools (or some similar part of the process) updated and changed the working directory name on Windows, but not the other platforms. The reason I say that is because Windows builds started failing due to not finding a directory, and our print-outs show a different from expected name, on all except Python 3.6. Probably what happened is that the newly updated build tool only has releases for Python 3.7 and up, so that acts as a good indicator.\r\n\r\nThe `temp-...` directory now has a longer platform name, it includes \"`cpython`\" in its name, and it has removed the dot between major and minor Python version numbers. If this PR succeeds, I'll merge it into main and all of the affected PRs can merge from main to get it.",
  "created_at":"2022-04-11T14:36:08Z",
  "id":1095132940,
  "issue":1407,
  "node_id":"IC_kwDODBCWws5BRmcM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T14:36:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"FYI @swishdiff: this is done and merged.",
  "created_at":"2022-04-11T14:56:59Z",
  "id":1095158391,
  "issue":1407,
  "node_id":"IC_kwDODBCWws5BRsp3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T14:56:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This was an important fix I was pushing for (and it should have affected all systems, not just Windows); before PyPy 3.x would try to reuse CPython 3.x'd cached build (or vice versa) and break all sorts of things. It really started hitting us when PyPy was added to manylinux and cibuildwheel would build all in one job.",
  "created_at":"2022-04-11T22:08:41Z",
  "id":1095622827,
  "issue":1407,
  "node_id":"IC_kwDODBCWws5BTeCr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T22:08:41Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"And it's in distutils which is vendored into setuptools, so yes.",
  "created_at":"2022-04-11T22:09:09Z",
  "id":1095623241,
  "issue":1407,
  "node_id":"IC_kwDODBCWws5BTeJJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T22:09:09Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1408?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1408](https://codecov.io/gh/scikit-hep/awkward/pull/1408?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4045c8d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.46%`.\n> The diff coverage is `63.84%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1408?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [63 more](https://codecov.io/gh/scikit-hep/awkward/pull/1408/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-04-11T16:21:45Z",
  "id":1095266860,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BSHIs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T23:12:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Is this addressing both #1405 and #1406? If so, adding them to the Development thing on the right-bar would be a good idea, to ensure that we don't forget to close the issues when this PR fixes them.\r\n\r\nIt is entirely plausible that a kernel is missing the `starts[0] != 0` case, since `starts[0] == 0` is so common. If that's what it is, it can also be relatively easy to diagnose. Once you've narrowed it down to a particular kernel (it looks like you have), print out the data going into and coming out of that kernel and manually increase all of the `starts` and `stops` by 1, 2, 3, etc.\r\n\r\nI usually debug such things with a command-line one-liner, like this:\r\n\r\n```bash\r\npython -c 'import awkward as ak, numpy as np; a = ak._v2.Array([[1, 2, 3], [], [4, 5]]); a.layout.content._data = np.tile(a.layout.content._data, 2); a.layout.offsets._data += 1; print(a.layout)'\r\n```\r\n\r\nwith `print(a.layout)` replaced by the call that triggers the kernel, and the handle on 1, 2, 3, etc. is on the right-hand side of the `+=`. Then up-arrow, modify, up-arrow, modify.\r\n\r\nThis is hacking, pure and simple, using private accessors to modify things in place and print-outs in the source code, but it narrows down on the issue a lot faster than a debugging library. (Which is why it's great that Python discourages hacking without disallowing it. It would take much longer to understand what's wrong if this were in Java...)\r\n\r\nWhat you should expect to see is values going into or coming from the kernel not moving up and down as you vary the offset (or maybe going up and down when they shouldn't be).",
  "created_at":"2022-04-11T16:31:17Z",
  "id":1095276775,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BSJjn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T16:31:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Right now, this is really just a staging ground for looking at the issue in #1405 / #1406. I think that there are several bugs going on here, some that are v2 specific, and some that are v1-v2. My plan would be to separate these into different PRs. So, this PR is really more about centralising a proof-of-bug ahead of actually fixing anything :)\r\n\r\nThe issue as I see it is not actually the kernel. I have no reason to believe that the kernel isn't doing what it is supposed to be. In #1406 I explored my early findings that it seems we are just doing the wrong thing, namely that we're taking the carry of one array and applying it to another. Certain implementation details / invariants mean that we don't see the bug that often, but I think fundamentally we need to extend it.\r\n\r\nOften in these kernel bugfixing journeys I find one can go down a rabbit hole, but I am fairly confident we've narrowed down at least one problem-site.\r\n",
  "created_at":"2022-04-11T17:58:54Z",
  "id":1095359404,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BSdus",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T17:58:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski OK, I've added a first set of tests that isolate one jagged slicing bug -> inner contents might not be mapped onto by the outer list/index types, but we currently raise an Exception in the `ListArray` `_getitem_next_jagged` if the list has a different length to the index.",
  "created_at":"2022-04-11T18:06:18Z",
  "id":1095370684,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BSge8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T18:06:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, next set of tests look at a separate (though likely not independent) bug on the `ListArray::_getitem_next_jagged(slicecontent=IndexedOptionArray(ListOffsetArray` codepath:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/edfce3800ccd1f8b90734cf9594c3b5c117441ff/src/awkward/_v2/contents/listarray.py#L472-L476\r\n\r\nAs explained in my above comment (#1406), we're just taking the indices that map into the `slicecontent` and applying them to the `IndexedOptionArray` content. I believe this is wrong - in my debugging we end up with a `ListArray` with `starts/stops` equal to the offsets `0, 2, 2`, rather than `2, 2, 3`. This means that when Awkward tries to pull the 0th item of the second sublist, it fails as it has length 0.",
  "created_at":"2022-04-11T18:30:35Z",
  "id":1095407636,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BSpgU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T18:30:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This commit (d652c81) fixes #1406 by first computing the `carry` that would be required to convert the `ListArray` into a `ListOffsetArray` starting at 0. We definitely have a kernel for this, but it was easy just to write a `nplike` to do this for a proof of concept.",
  "created_at":"2022-04-11T19:29:23Z",
  "id":1095474360,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BS5y4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T19:29:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It is an explicit goal to replace kernels with nplike calls if there are no correctness or performance issues in doing so. That would make the v2 code different from the v1 code (which does still rely on kernels), but if you can reduce dependence on kernels in v2, more of them will be removed when we remove v1 support. That will be less code to maintain, test, and port to CUDA.\r\n\r\nThe \"performance\" exception cited above is if the nplike calls require more passes over the data. If one kernel is replaced by multiple nplike function applications, it might not be a good replacement. (It's likely that some algorithms implemented entirely in nplike will be going the other way, if they can be fewer passes/faster in a single kernel call.)",
  "created_at":"2022-04-11T19:36:18Z",
  "id":1095481891,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BS7oj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T19:36:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I have noticed the odd kernel to which this applies, so I will keep that in mind! Here I'm not familiar enough with the slicing code to understand whether this is a symptom of a larger problem or not, hence the \"HACK\" commit message. I'm putting this down for now, as I think I've identified some of the bugs / solutions and I've run out of time!",
  "created_at":"2022-04-11T19:48:57Z",
  "id":1095495773,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BS_Bd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T19:48:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Added small fix to convert the index to the appropriate array type. At present, the typetracer code does not support the magic methods for addition/subtraction, so this doesn't work. I haven't looked at the existing typetracer usage enough to know whether I need to handle this with a special case, or whether we should add support for these operations to typetracer (e.g. if that even makes sense in the context of what typetracer does). I've noticed that we have a number of places where we special case typetracer. I suspect that we will always need a bit of this, but perhaps we can further develop the abstraction to hide it?",
  "created_at":"2022-04-16T11:43:30Z",
  "id":1100646317,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5Bmoet",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-16T11:47:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm getting this out of context, but the TypeTracer is usually used wrapped in a high-level ak._v2.Array, which has those magic methods and passes them on to the underlying layout (containing TypeTracerArrays in this case), which eventually goes to the TypeTracer nplike's ufuncs. Maybe the latter are not implemented\u2014it would be easy to add that, since it would only need to pass on whatever shape it gets and predict a dtype\u2014but no new methods like `__add__` and `__sub__` should be implemented.",
  "created_at":"2022-04-16T20:42:18Z",
  "id":1100752096,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BnCTg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-16T20:42:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski in this context, I'm referring to the `TypeTracerArray` that we see as the data associated with a layout, e.g. the `starts` of a `ListArray`.\r\n\r\nIn this trial PR, I've followed the convention of taking `stops` (an `Index`) and extracting the underlying array with `nplike.asarray`.  There is precedence for assuming that this result is `ndarray`-like, e.g.,  `ak_where` where we anticipate that the array has `__eq__`\r\nhttps://cs.github.com/scikit-hep/awkward-1.0/blob/6ff41fb299167333d2715cae7c0904d8cd5dba7e/src/awkward/_v2/operations/structure/ak_where.py?q=asarray#L116\r\n\r\nIn this PR, when one tries to compute `nplike.asarray(stops) - ...` for a `TypeTracerArray`, they will see an error as we do not implement `TypeTracerArray.__sub__`.\r\n\r\nI think the reason that this is at all apparent is that with v2 there is a much softer boundary between what should be done by a kernel, and what should be done with the nplike interface. Practically speaking, the `nplike + ndarray` interface is a well-tested, well known subset of useful kernels. Because we can now use `nplike` to do things that would have previously taken a kernel, we need to define this boundary.\r\n\r\nI think we currently have an assumed \"narrow\" interface for nplike which is a subset of useful functions (in particular, `searchsorted` and friends) + the basic `NDArrayOperatorsMixin` interface on the array object. The question that I raised earlier is, I suppose:\r\n> how much like an `ndarray` should the `TypeTracerArray` behave, and in defining this, how should we define this interface so that Awkward code does not accidentally use unsupported methods? \r\n\r\nThe latter sentence is not a huge problem - we should pick this up in our tests, but in general I like to have the semantics / API well defined.\r\n\r\nCurrently, `TypeTracerArray` is much more restrictive than the other `ndarray`-likes, so we would need special-case code testing for `TypeTracerArray`. Whilst we cannot entirely eliminate this code in cases where we would require a concrete result (e.g. taking the length of an array), I think we can minimise the need for such code by providing the basic suite of `ndarray`-like operations for `TypeTracerArray`",
  "created_at":"2022-04-16T21:22:57Z",
  "id":1100756702,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BnDbe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-16T21:34:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's true! I stand corrected\u2014the TypeTracerArray will need to have `__add__` and `__sub__` methods, as well as a few others that might be needed by the codebase, like `array.any()`. We managed to eliminate all explicit uses of NumPy in favor of nplike, which channels the code path through the nplike functions that we control, but the codebase does still include method calls on the array objects, including those like `__add__`. Fortunately, for a completely artificial type like TypeTracerArray (as opposed to pre-existing libraries like CuPy), we can control that code path as well.\r\n\r\nBut you're right that `TypeTracerArray.__add__` and `TypeTracerArray.__sub__` will need to be written. (That's already the case for `UnknownScalar`, in the same library. The good news is that these are simple: `__add__` and `__sub__` are probably not even going to be different from each other.)\r\n\r\nChanneling everything through nplike was an attempt to define an API\u2014the complete set of functions used in our codebase on the arrays backing Index and NumpyArray are or should be in the list in nplike.py. Unfortunately, methods, and especially operators, are not as well controlled. To make the list of functions in nplike.py, I could do a text-based search (with the assumption that we never `import X from numpy`). To find all of the methods and operators used, in an automated way, we'd need a type-checker like mypy, as well as all the annotations (and no `typing.Any`!). We don't have that.\r\n\r\nHowever, just adding the methods whenever we hit them in testing does work. All it misses is the certainty of knowing that we got them all ",
  "created_at":"2022-04-16T23:10:29Z",
  "id":1100768430,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BnGSu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-16T23:10:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The good news is that these are simple: __add__ and __sub__ are probably not even going to be different from each other.\r\n\r\nAbsolutely, these functions will all be identical apart from `__truediv__` (and maybe any others I've forgotten?)\r\n\r\n> [nplike] was an attempt to define an API\r\n> ...\r\n> However, just adding the methods whenever we hit them in testing does work. All it misses is the certainty of knowing that we got them all\r\n\r\nYes, I don't think this is a pressing concern yet. Once we add type hints, we can implement a protocol for the `ndarray` interface that we expect. ",
  "created_at":"2022-04-17T09:43:33Z",
  "id":1100842115,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5BnYSD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-17T09:43:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I modernized this PR because it's addressing a bug in the Prioritized Issues list.\r\n\r\nAs it is, the only tests that fail are\r\n\r\n```\r\ntests/v2/test_1405-slicing-untested-cases.py::test_index_unmapped\r\ntests/v2/test_1502-getitem-jagged-issue1406.py::test_success_nonempty_list\r\n```\r\n\r\nwhich are directly intended to test #1405 and #1406, so at least this PR does no harm. (It can't be merged because it doesn't fix the issue it's intended to, but not breaking other things is a big plus.)",
  "created_at":"2022-08-15T20:18:22Z",
  "id":1215746785,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5IdtLh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T20:18:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, so the reason that v2 doesn't agree with v1 for this test case is that we don't use the same kernel in `ListArray` to traverse a jagged slice. [`ListArray.cpp` uses `ListArray_getitem_jagged_apply_64`](https://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/libawkward/array/ListArray.cpp#L1850-L1877) whilst [`listarray.py` uses `awkward_ListArray_getitem_jagged_descend`](https://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/contents/listarray.py#L322-L359)\r\n\r\nClearly, we then use different logic to traverse the slices, with v1 performing a carry, and v2 computing the dense offsets (i.e. ensuring the offsets match after calling `self.toListOffsetArray(True)`). Crucially, no carry is performed in the latter case.\r\n\r\nExplicitly, jagged slicing is failing when we try to slice the entire inner `ListOffsetArray`:\r\n\r\n```python\r\nak._v2.contents.ListOffsetArray(\r\n        ak._v2.index.Index64(np.array([0, 1, 2, 3], dtype=np.int64)),\r\n        ak._v2.contents.NumpyArray(np.array([2, 2, 2], dtype=np.int64)),\r\n)\r\n```\r\n\r\nRather than the projected one, i.e.\r\n\r\n```python\r\nak._v2.contents.ListOffsetArray(\r\n        ak._v2.index.Index64(np.array([0, 1, 2], dtype=np.int64)),\r\n        ak._v2.contents.NumpyArray(np.array([2, 2, 2], dtype=np.int64)),\r\n)\r\n```\r\n\r\nWe have code that ensures that the content length matches the length of the slice, which fails without this projection.\r\n\r\nMy \"fix\" (ugly though it is) for `listarray.py` in d7a1d53 handled this for the option-type slicing, by `carry`ing only the mapped items. @ioanaif do you know why we changed the kernel here? I'm trying to get up to speed. It seems as though do need to carry, but it might be better to do it with a proper kernel rather than lots of `nplike` code.",
  "created_at":"2022-08-30T11:12:47Z",
  "id":1231518632,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5JZ3uo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T11:17:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I just remembered that Ioanna is working on CLAD this week, so perhaps I'm better pinging you to ask about the kernel change in my above comment?",
  "created_at":"2022-08-30T20:11:42Z",
  "id":1232117526,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5JcJ8W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T20:11:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think there's no reason that v1 and v2 should ever differ on what kernels they use. In some cases, v2 replaces trivial kernels with the corresponding `nplike` call, but I don't think it should ever replace one kernel for another. The \"I don't think\" is based on the fact that we didn't _rethink_ any of the getitem logic from v1 to v2; it was _ported_.\r\n\r\nHowever, in this case, you're looking at the wrong function. C++ can dispatch by argument type but Python can't, so there was some subtlety in the porting. The `getitem_next_jagged` function that you point to:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/libawkward/array/ListArray.cpp#L1827-L1832\r\n\r\nis actually the specialization of that function in which the third argument is `SliceArray64` (would be `Index64` in v2).\r\n\r\nThere's also one in which the third argument is `SliceMissing64` (would be `IndexedOptionArray` in v2):\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/libawkward/array/ListArray.cpp#L1887-L1892\r\n\r\nand one in which the third argument is `SliceJagged64` (would be `ListOffsetArray` in v2):\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/libawkward/array/ListArray.cpp#L1975-L1980\r\n\r\nThe equivalent in Python is to do the dispatching manually within the function, in if statements. The implementation you pointed to is\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/contents/listarray.py#L322\r\n\r\nbut there's also\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/contents/listarray.py#L365\r\n\r\n(huh? not `Index64`?) and\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/contents/listarray.py#L434-L436\r\n\r\nand\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/contents/listarray.py#L556\r\n\r\n(huh? slices can't be EmptyArray, thanks to the normalization described in https://github.com/scikit-hep/awkward/pull/1597#issuecomment-1227754769).\r\n\r\nBoth v1 and v2 use `awkward_ListArray_getitem_jagged_descend` on the `SliceJagged64`/`ListOffsetArray` case. But if you were debugging, following the wrong code path, that could have something to do with an error that you see, and maybe this code checking for the wrong slice types accounts for it. It certainly looks suspicious.",
  "created_at":"2022-08-30T22:58:29Z",
  "id":1232254954,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5Jcrfq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T22:58:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm going to try to collect a complete list of getitem calls and what slice types they're assuming. Any line numbers correspond to `main` right now, which is commit dd2a3f400e29fc9ea908fc7d8267f592091457bb.\r\n\r\n- `Content` (content.py)\r\n  - `_getitem_next_field(self, head, tail, advanced)`\r\n  - `_getitem_next_fields(self, head, tail, advanced)`\r\n  - `_getitem_next_newaxis(self, tail, advanced)`\r\n  - `_getitem_next_ellipsis(self, tail, advanced)`\r\n    - `tail` may contain `Index64`\r\n  - `_getitem_next_regular_missing(self, head, tail, advanced, raw, length)`\r\n    - `head` is `Index64`\r\n  - `_getitem_next_missing_jagged(self, head, tail, advanced, that)`\r\n    - `head` has `content` (is `IndexedOptionArray`)\r\n  - `_getitem_next_missing(self, head, tail, advanced)`\r\n    - `head` asserted to be `IndexedOptionArray`\r\n  - `_getitem(self, where)`\r\n    - `where` dispatched based on type (wide open to any user input)\r\n- `BitMaskedArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - `where` assumed to be `int`\r\n  - `_getitem_range(self, where)`\r\n    - passed to `ByteMaskedArray`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - passed to `ByteMaskedArray`\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched by `()`, `int`, `Index64`, `ListOffsetArray`, `str`, `list` (of `str`), `newaxis`, `Ellipsis`, `IndexedOptionArray`\r\n- `ByteMaskedArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - `where` assumed to be `int`\r\n  - `_getitem_range(self, where)`\r\n    - `where` assumed to be `slice`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_next_jagged_generic(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - no assumptions made about `slicecontent` (used as duck-typing)\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - passed to `self._getitem_next_jagged_generic` (following v1 C++ constraints)\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched by `()`, `int`, `Index64`, `ListOffsetArray`, `str`, `list` (of `str`), `newaxis`, `Ellipsis`, `IndexedOptionArray`\r\n- `EmptyArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n  - `_getitem_range(self, where)`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - `where` assumed to be a `list`\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - no assumptions (errors out)\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched by `()`, `int`, `slice`, `str`, `list` (of `str`), `newaxis`, `Ellipsis`, `Index64`, `ListOffsetArray`, `IndexedOptionArray`\r\n- `IndexedArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - `where` assumed to be `int`\r\n  - `_getitem_range(self, where)`\r\n    - `where` assumed to be `slice`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_next_jagged_generic(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - no assumptions made on `slicecontent` (duck typed)\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - passed to `self._getitem_next_jagged_generic`\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched by `()`, `int`, `Index64`, `ListOffsetArray`, `str`, `list` (of `str`), `newaxis`, `Ellipsis`, `IndexedOptionArray`\r\n- `IndexedOptionArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - `where` assumed to be `int`\r\n  - `_getitem_range(self, where)`\r\n    - `where` assumed to be `slice`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_next_jagged_generic(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - no assumptions made on `slicecontent` (duck typed)\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - passed to `self._getitem_next_jagged_generic`\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched as `()`, `int`, `slice`, `Index64`, `ListOffsetArray`, `str`, `list` (of `str`), `newaxis`, `Ellipsis`, `IndexedOptionArray`\r\n- `ListArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - `where` assumed to be `int`\r\n  - `_getitem_range(self, where)`\r\n    - `where` assumed to be `slice`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - `slicecontent` dispatched by `ListOffsetArray`, `NumpyArray` (!?!), `IndexedOptionArray`, `EmptyArray` (!?!)\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched by `()`, `int`, `slice`, `str`, `list` (of `str`), `newaxis`, `Ellipsis`, `Index64`, `ListOffsetArray`, `IndexedOptionArray`\r\n- `ListOffsetArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - `where` assumed to be `int`\r\n  - `_getitem_range(self, where)`\r\n    - `where` assumed to be `slice`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - passed to `ListArray._getitem_next_jagged`\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched as `()`, `int`, `slice`, `str`, `list` (of `str`), `newaxis`, `Ellipsis`, `Index64`, `ListOffsetArray`, `IndexedOptionArray`\r\n- `NumpyArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - `where` assumed to be `int`\r\n  - `_getitem_range(self, where)`\r\n    - `where` assumed to be `slice`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - errors out\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - errors out\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - may pass `slicecontent` to `RegularArray._getitem_next_jagged`\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched as `()`, `int`, `slice`, `newaxis`, `Ellipsis`, `str`, `list` (of `str`), `Index64`, `ListOffsetArray`, `IndexedOptionArray`\r\n- `RecordArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - `where` assumed to be `int`\r\n  - `_getitem_range(self, where)`\r\n    - `where` assumed to be `slice`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - `where` assumed to be `str`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - `where` assumed to be `list` (of `str`)\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - passed to each item of `contents`\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched as `()`, `str`, `list` (of `str`), `IndexedOptionArray`, or passed to the `_getitem_next` of each item of `contents`\r\n- `RegularArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - `where` assumed to be `int`\r\n  - `_getitem_range(self, where)`\r\n    - `where` assumed to be `slice`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - passed to `ListOffsetArray._getitem_next_jagged`\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched as `()`, `int`, `slice`, `str`, `list` (of `str`), `newaxis`, `Ellipsis`, `Index64`, `ListOffsetArray`, `IndexedOptionArray`\r\n- `UnionArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - `where` assumed to be `int`\r\n  - `_getitem_range(self, where)`\r\n    - `where` assumed to be `slice`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - passed to each item of `contents`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - passed to each item of `contents`\r\n  - `_getitem_next_jagged_generic(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - raises error if can't be simplified, otherwise passed to `simplified._getitem_next_jagged`\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - passed to `_getitem_next_jagged_generic`\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched to `()`, `int`, `slice`, `Index64`, `ListOffsetArray`, `str`, `list` (of `str`), `newaxis`, `Ellipsis`, `IndexedOptionArray`\r\n- `UnmaskedArray`\r\n  - `_getitem_nothing(self)`\r\n  - `_getitem_at(self, where)`\r\n    - passed to `content`\r\n  - `_getitem_range(self, where)`\r\n    - `where` assumed to be `slice`\r\n  - `_getitem_field(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_fields(self, where, only_fields=())`\r\n    - passed to `content`\r\n  - `_getitem_next_jagged(self, slicestarts, slicestops, slicecontent, tail)`\r\n    - passed to `content`\r\n  - `_getitem_next(self, head, tail, advanced)`\r\n    - `head` dispatched as `()`, `int`, `slice`, `Index64`, `ListOffsetArray`, `str`, `list` (of `str`), `newaxis`, `Ellipsis`, `IndexedOptionArray`\r\n\r\nThe only red flags (labeled by \"!?!\") are the ones you found in `ListArray`. The rest all look correct.\r\n\r\nYou can use this, by the way, as a step into typing all the getitem methods. These are all of them (they all have \"getitem\" in their names, and that's what I searched for to make this).",
  "created_at":"2022-08-30T23:51:37Z",
  "id":1232286520,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5JczM4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T23:51:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski thank you for such a thorough investigation. I did a visual trace-through by eye, and clearly mistook the execution pathway. I like using the CLion debugger, but it's less convenient to run both CLion and PyCharm from the same location. Once I reconfigured my editors, it was clear that indeed I was looking at the wrong method. Additionally, I must have included the kernel prefix that is missing in C++, so I really did lead us on a wild goose chase!\r\n\r\nI've found the cause of the difference between v1 and v2 - https://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/contents/listarray.py#L190-L205 is a new pathway that ultimately produces a `ListOffsetArray` with a length that exceeds the offsets. Allowing un-trimmed layouts is a common feature in the codebase, so I'm assuming that the best way to handle this is to explicitly trim the content ourselves.",
  "created_at":"2022-08-31T12:51:30Z",
  "id":1232897523,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5JfIXz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T12:51:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This isn't ready for review just yet. I've fixed a slicing issue in `ListArray._getitem_next_jagged`, and corrected an older test that is asserting the wrong output. In addition, I've copied this older v2 test into v1 to show that the bug exists in both versions. We'll need to skip that until it's fixed in turn.\r\n\r\nThere is also an ugly hack in `ListArray._getitem_next_jagged` that I added at the start of this PR. I'll need to rethink that, hence moving to draft status.",
  "created_at":"2022-08-31T14:52:10Z",
  "id":1233043976,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5JfsII",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T14:52:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, that was surprisingly easy. It's the same fix in two places.",
  "created_at":"2022-08-31T15:09:29Z",
  "id":1233066312,
  "issue":1408,
  "node_id":"IC_kwDODBCWws5JfxlI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T15:09:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1409?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1409](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1409?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f09f773) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-04-11T20:24:13Z",
  "id":1095530220,
  "issue":1409,
  "node_id":"IC_kwDODBCWws5BTHbs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-11T20:24:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1410](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (37b0225) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.02%`.\n> The diff coverage is `45.59%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `62.32% <0.00%> (+0.43%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `75.26% <37.06%> (-8.07%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `90.42% <50.00%> (-0.15%)` | :arrow_down: |\n| ... and [21 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1410/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-12T14:22:34Z",
  "id":1096796519,
  "issue":1410,
  "node_id":"IC_kwDODBCWws5BX8ln",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-14T21:44:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1412](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c01473f) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.07%`.\n> The diff coverage is `31.29%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `75.11% <37.06%> (-8.22%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `90.42% <50.00%> (-0.15%)` | :arrow_down: |\n| [...rc/awkward/\\_v2/operations/convert/ak\\_from\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX251bXB5LnB5) | `100.00% <100.00%> (+27.77%)` | :arrow_up: |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1412/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-12T19:33:47Z",
  "id":1097134967,
  "issue":1412,
  "node_id":"IC_kwDODBCWws5BZPN3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-12T19:33:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1413](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a463e91) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.07%`.\n> The diff coverage is `32.21%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `75.11% <37.06%> (-8.22%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `90.42% <50.00%> (-0.15%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2J1aWxkZXIucHk=) | `81.60% <100.00%> (\u00f8)` | |\n| ... and [3 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1413/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-13T02:42:33Z",
  "id":1097493062,
  "issue":1413,
  "node_id":"IC_kwDODBCWws5BampG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-13T03:05:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Thank you very much for taking this on!\r\n\r\nI see that you've added the import for `llvmlite.ir`, and you've correctly done it only in scopes (function-scope or module-scope, but in your case, just function-scopes) in which we already know that Numba is installed.\r\n\r\nWhat's missing is the replacement of\r\n\r\n   * `llvmlite.llvmpy.core.Type.int` \u2192 `llvmlite.ir.IntType`\r\n   * `llvmlite.llvmpy.core.Type.pointer` \u2192 `llvmlite.ir.PointerType`\r\n\r\nThis is a good issue to get started on because these can be string-substitutions: the arguments to these functions are the same in both interfaces, so just the fully-qualified names of the functions (i.e. with all the dots) need to be replaced. Also, I can tell you that these functions were never imported using Python's `from` (e.g. `from llvmlite.llvmpy.core import Type`), so you don't need to worry about them appearing in places as \"`Type.int`\" without qualification.\r\n\r\nThese are all the files where the old functions appear:\r\n\r\n```bash\r\n% fgrep -rl llvmpy src/\r\nsrc/awkward/_connect/_numba/builder.py\r\nsrc/awkward/behaviors/string.py\r\nsrc/awkward/_v2/_connect/numba/builder.py\r\nsrc/awkward/_v2/behaviors/string.py\r\n```\r\n\r\nAlthough your imports are in the right scope, I don't think they're in exactly the right places, since they should be replacing imports for `llvmlite.llvmpy.core`. Instead of the two additional imports, I think you want to replace these imports:\r\n\r\n   * `import llvmlite.llvmpy.core` \u2192 `import llvmlite.ir`\r\n\r\nAgain, string substitution is good enough because they're always fully qualified.\r\n\r\nWhen pre-commit changes the branch, you'll have to `git pull` those changes into your local git repo. Oh wait, it looks like you've done that already.\r\n\r\nIn fact, you've made a lot of the changes I described above while I was typing them. (I should have just waited!)",
  "created_at":"2022-04-13T13:37:23Z",
  "id":1098061638,
  "issue":1413,
  "node_id":"IC_kwDODBCWws5BcxdG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-13T13:37:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Glad to be of help. Thank you for the detailed breakdown of the issue. I'm still learning the details of using Git and it's workflow.\r\n\r\n`% fgrep -rl llvmpy src/` returns nothing now.\r\n\r\nand all\r\n`import llvmlite.llvmpy.core \u2192 import llvmlite.ir`\r\n\r\nI haven't added any new import calls. Unless something else come up, this issue should be closed?",
  "created_at":"2022-04-13T17:17:26Z",
  "id":1098296591,
  "issue":1413,
  "node_id":"IC_kwDODBCWws5Bdq0P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-13T17:17:26Z",
  "user":"MDQ6VXNlcjMyMzQzMzY1"
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Yup its all done. And thank you for being patient with me. Hopefully I can help contribute more.",
  "created_at":"2022-04-13T18:49:35Z",
  "id":1098374579,
  "issue":1413,
  "node_id":"IC_kwDODBCWws5Bd92z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-13T18:49:35Z",
  "user":"MDQ6VXNlcjMyMzQzMzY1"
 },
 {
  "author_association":"MEMBER",
  "body":"@all-contributors please add @Ahmad-AlSubaie for code",
  "created_at":"2022-04-13T19:04:38Z",
  "id":1098386255,
  "issue":1413,
  "node_id":"IC_kwDODBCWws5BeAtP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-13T19:04:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski \n\nI've put up [a pull request](https://github.com/scikit-hep/awkward-1.0/pull/1416) to add @Ahmad-AlSubaie! :tada:",
  "created_at":"2022-04-13T19:04:46Z",
  "id":1098386364,
  "issue":1413,
  "node_id":"IC_kwDODBCWws5BeAu8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-13T19:04:46Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "author_association":"MEMBER",
  "body":"That's because ak.Record is a Python Mapping. The idea was that ak.Array would be a Sequence and ak.Record would be a Mapping, but if that's causing confusion, then we could remove that protocol from ak.Record (in v2).",
  "created_at":"2022-04-13T17:22:17Z",
  "id":1098300927,
  "issue":1414,
  "node_id":"IC_kwDODBCWws5Bdr3_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-13T17:22:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think that might be a sensible proposal. It's not a huge problem, but having `iter(ak.layout.Record)` do something fundamentally different to `iter(ak.layout.RecordArray)` is likely to confuse some people, and indeed I've run into problems with passing `ak.Record` into other Awkward functions (even if by accident) and seeing surprising results.",
  "created_at":"2022-04-13T18:42:16Z",
  "id":1098368538,
  "issue":1414,
  "node_id":"IC_kwDODBCWws5Bd8Ya",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-13T18:42:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"At the mid-level (`ak.layout.*` or `ak._v2.contents.*`/`ak._v2.record`), we can assume more expertise. But also, these mid-level objects don't need to be iterable at all, unless the `ak._v2.Array.__iter__` implementation goes through the `ak._v2.contents.Content.__iter__` implementation or something. We can definitely remove any `__iter__` on the mid-level Record.\r\n\r\nAt high-level (`ak.Array`/`ak.Record` or `ak._v2.Array`/`ak._v2.Record`), I still slightly refer having them be a Sequence and a Mapping, respectively, because ak.Array is like a list and ak.Record is like a dict. One user might be confused about `iter(record)` yielding strings and another user might be confused about not being able to duck-type a `record` in a function that expects a dict.\r\n\r\nYou're right to have labeled this \"policy.\"",
  "created_at":"2022-04-13T19:03:27Z",
  "id":1098385265,
  "issue":1414,
  "node_id":"IC_kwDODBCWws5BeAdx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-13T19:03:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Right, I'm being lazy :zzz: I am referring to the high level API here!\r\n\r\n> You're right to have labeled this \"policy.\"\r\n\r\nIt's tricky indeed. Sometimes I really want records to behave like atoms, other times it is useful to decompose them. Fitting that into the Pythonic protocols is not trivial. \r\n\r\nI've made my position known, but I'm fairly confident it may well reverse in future, so I'm not pushing anything further!",
  "created_at":"2022-04-13T19:12:56Z",
  "id":1098392802,
  "issue":1414,
  "node_id":"IC_kwDODBCWws5BeCTi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-13T19:12:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think we can close this: `Record` is no longer iterable.",
  "created_at":"2022-10-06T16:25:59Z",
  "id":1270366582,
  "issue":1414,
  "node_id":"IC_kwDODBCWws5LuEF2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T16:25:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1415](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fc7f9ec) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.03%`.\n> The diff coverage is `47.23%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `62.32% <0.00%> (+0.43%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/structure/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NhcnRlc2lhbi5weQ==) | `78.94% <\u00f8> (\u00f8)` | |\n| ... and [23 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1415/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-13T17:46:45Z",
  "id":1098322171,
  "issue":1415,
  "node_id":"IC_kwDODBCWws5BdxD7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-14T21:02:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1418](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5e83f11) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.05%`.\n> The diff coverage is `43.54%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `62.32% <0.00%> (+0.43%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `75.11% <37.06%> (-8.22%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `90.42% <50.00%> (-0.15%)` | :arrow_down: |\n| ... and [10 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1418/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-14T00:12:53Z",
  "id":1098590277,
  "issue":1418,
  "node_id":"IC_kwDODBCWws5BeyhF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-14T00:12:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1419](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b777c7f) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.05%`.\n> The diff coverage is `43.85%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `62.32% <0.00%> (+0.43%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `75.11% <37.06%> (-8.22%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `90.42% <50.00%> (-0.15%)` | :arrow_down: |\n| ... and [10 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1419/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-14T01:24:57Z",
  "id":1098620843,
  "issue":1419,
  "node_id":"IC_kwDODBCWws5Be5-r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-14T01:24:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Currently we only handle literal strings in the Numba implementation:\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/d977b04facb196a4c8584f256b36280a4e105b14/src/awkward/_connect/_numba/builder.py#L490-L502\r\n\r\nYou can work around this (with limitations) by using `numba.literal_unroll`:\r\n```python\r\nimport numba\r\nimport awkward as ak\r\nfrom numba import literal_unroll\r\n\r\n\r\nbuilder = ak.ArrayBuilder()\r\n\r\n@numba.njit\r\ndef build():\r\n    builder.begin_list()\r\n    builder.begin_record()\r\n    for field_name in literal_unroll((\"x\", \"y\", \"z\")):\r\n        builder.field(field_name)\r\n        builder.integer(5)\r\n    builder.end_record()\r\n    builder.end_list()\r\n\r\n\r\nbuild()\r\nprint(builder.snapshot())\r\n```\r\n\r\nBe warned, for some reason you need to import the `literal_unroll` into the global namespace (or rather, `numba.literal_unroll` [doesn't seem to work](https://github.com/numba/numba/issues/5344))",
  "created_at":"2022-04-14T14:17:28Z",
  "id":1099234443,
  "issue":1420,
  "node_id":"IC_kwDODBCWws5BhPyL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-14T14:17:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's right, and it was on purpose, so that the Numba `builder.field` implementation can use the C++ [ArrayBuilder::field_fast](https://awkward-array.readthedocs.io/en/latest/_static/classawkward_1_1ArrayBuilder.html#a950563074bc8987b63196de7d9066041), which only checks to see if a string has the same pointer as the one for a given field, rather than checking whole strings in the loop.\r\n\r\nI didn't know about Numba's `nb.literal_unroll`: that's a neat trick, and it certainly solves this case (in which the field names are known at compile time).\r\n\r\nThis could be a feature request for handling the case in which the string is not a literal, implemented by calling the C++ [ArrayBuilder::field_check](https://awkward-array.readthedocs.io/en/latest/_static/classawkward_1_1ArrayBuilder.html#a81883f6d746612b422a32b7990b9450f) function.\r\n\r\nI think that would not be too difficult. Looking at a Numba-extension can be bewildering, but the change would be rather small; the person doing it wouldn't need to understand everything. I'll label this as a \"good first issue,\" though it probably _looks_ more difficult than other \"good first issues.\"\r\n\r\n--------------\r\n\r\nFor symmetry, note that when iterating over an input array, the string passed to `ak.Array.__getitem__` has to be a literal string. We can handle the non-literal case for ArrayBuilder because ArrayBuilder presents itself as a single, unchanging type to Numba, but when iterating over input arrays, the type presented to Numba is specialized to the Awkward type (actually, the full Form, which is even more precise). If you could pass a runtime string to `ak.Array.__getitem__`, the Numba type of the return value would be a variant. I haven't seen much support for variants in Numba (and couldn't implement Awkward UnionArray for that reason, #174).",
  "created_at":"2022-04-14T17:30:34Z",
  "id":1099448623,
  "issue":1420,
  "node_id":"IC_kwDODBCWws5BiEEv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-14T17:30:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I changed the name because this could apply to record names as well as field names.",
  "created_at":"2022-04-15T19:14:37Z",
  "id":1100302092,
  "issue":1420,
  "node_id":"IC_kwDODBCWws5BlUcM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T19:14:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Tried to do something similar with ArrayBuilder:\r\n```python\r\nimport numba as nb\r\nimport awkward as ak\r\n\r\n@nb.njit\r\ndef numba_build(array, output):\r\n    for evt in range(len(array)):\r\n        output.append(array[evt])\r\n    return output\r\n\r\narray = ak.Array(['a', 'b', 'c'])\r\nout = numba_build(array, ak.ArrayBuilder())\r\nprint(out.snapshot())\r\n```\r\nAnd got a similar error, must be because it's a non-literal string:\r\n<details>\r\n<summary>Error Traceback</summary>\r\n<br>\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nTypingError                               Traceback (most recent call last)\r\n<ipython-input-42-1b6adf46919b> in <module>\r\n     12 # array = ak.Array([1, 2, 3, 4, 5])\r\n     13 array = ak.Array(['a', 'b', 'c'])\r\n---> 14 out = numba_build(array, ak.ArrayBuilder())\r\n     15 print(out.snapshot())\r\n\r\n~/.conda/envs/LZ_Python_Kernel/lib/python3.8/site-packages/numba/core/dispatcher.py in _compile_for_args(self, *args, **kws)\r\n    466                 e.patch_message(msg)\r\n    467 \r\n--> 468             error_rewrite(e, 'typing')\r\n    469         except errors.UnsupportedError as e:\r\n    470             # Something unsupported is present in the user code, add help info\r\n\r\n~/.conda/envs/LZ_Python_Kernel/lib/python3.8/site-packages/numba/core/dispatcher.py in error_rewrite(e, issue_type)\r\n    407                 raise e\r\n    408             else:\r\n--> 409                 raise e.with_traceback(None)\r\n    410 \r\n    411         argtypes = []\r\n\r\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\n- Resolution failure for literal arguments:\r\nunicode_type\r\n- Resolution failure for non-literal arguments:\r\nNone\r\n\r\nDuring: resolving callee type: BoundFunction(append for ak.ArrayBuilderType(None))\r\nDuring: typing of call at <ipython-input-42-1b6adf46919b> (8)\r\n\r\n\r\nFile \"<ipython-input-42-1b6adf46919b>\", line 8:\r\ndef numba_build(array, output):\r\n    <source elided>\r\n    for evt in range(len(array)):\r\n        output.append(array[evt])\r\n        ^\r\n```\r\n\r\n</details>\r\n\r\nI tried to just put in a literal string:\r\n```python\r\n\r\nimport numba as nb\r\nimport awkward as ak\r\n\r\n@nb.njit\r\ndef numba_build(output):\r\n    for evt in range(3):\r\n        output.append(\"x\")\r\n    return output\r\n\r\nout = numba_build(ak.ArrayBuilder())\r\nprint(out.snapshot())\r\n```\r\n\r\nAnd i'm also seeing an error:\r\n```python\r\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\n- Resolution failure for literal arguments:\r\nLiteral[str](x)\r\n- Resolution failure for non-literal arguments:\r\nunicode_type\r\n```\r\n<details>\r\n<summary>Full Error Traceback</summary>\r\n<br>\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nTypingError                               Traceback (most recent call last)\r\n<ipython-input-46-f6a014884374> in <module>\r\n     10 \r\n     11 array = ak.Array(['a', 'b', 'c'])\r\n---> 12 out = numba_build(array, ak.ArrayBuilder())\r\n     13 print(out.snapshot())\r\n\r\n~/.conda/envs/LZ_Python_Kernel/lib/python3.8/site-packages/numba/core/dispatcher.py in _compile_for_args(self, *args, **kws)\r\n    466                 e.patch_message(msg)\r\n    467 \r\n--> 468             error_rewrite(e, 'typing')\r\n    469         except errors.UnsupportedError as e:\r\n    470             # Something unsupported is present in the user code, add help info\r\n\r\n~/.conda/envs/LZ_Python_Kernel/lib/python3.8/site-packages/numba/core/dispatcher.py in error_rewrite(e, issue_type)\r\n    407                 raise e\r\n    408             else:\r\n--> 409                 raise e.with_traceback(None)\r\n    410 \r\n    411         argtypes = []\r\n\r\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\n- Resolution failure for literal arguments:\r\nLiteral[str](x)\r\n- Resolution failure for non-literal arguments:\r\nunicode_type\r\n\r\nDuring: resolving callee type: BoundFunction(append for ak.ArrayBuilderType(None))\r\nDuring: typing of call at <ipython-input-46-f6a014884374> (8)\r\n\r\n\r\nFile \"<ipython-input-46-f6a014884374>\", line 8:\r\ndef numba_build(array, output):\r\n    <source elided>\r\n    for evt in range(3):\r\n        output.append(\"x\")\r\n        ^\r\n```\r\n</details>\r\n\r\n---\r\n\r\n## Versions\r\n\r\n```\r\nawkward==1.8.0 \r\nnumba==0.55.1\r\npython==3.8.12\r\n```",
  "created_at":"2022-04-21T16:39:09Z",
  "id":1105453569,
  "issue":1420,
  "node_id":"IC_kwDODBCWws5B4-IB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T16:44:15Z",
  "user":"MDQ6VXNlcjMyNTIyNTk0"
 },
 {
  "author_association":"MEMBER",
  "body":"The original issue was about literal/non-literal strings in selecting record field names, which is relevant because that's usually compiled in. (In a compiled language, the field of a struct is not quoted. In ArrayBuilder, it's only quoted because it's making a new type that didn't exist at compile-time.)\r\n\r\nYour issue, @asnaylor, is not related to literalness, which is why it doesn't work in either case. But you're not trying to access or create a record field named \"x\", you're trying to add \"x\" as data to an array of strings. That case should absolutely work for non-literal strings, since we'd want to fill an array with different strings in different array elements. You're using [ArrayBuilder.append](https://awkward-array.readthedocs.io/en/latest/_auto/ak.ArrayBuilder.html#ak-arraybuilder-append), which is a convenience method that selects between different methods based on the type of its argument (including string). I bet I didn't include that among the overloads in Numba, that I simply forgot that `append` includes strings as well as `integer`, `real`, etc.\r\n\r\nYes, that's what happened:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/ec9eec9aa5fae80dac44c300c6a48e3766afd1cc/src/awkward/_connect/_numba/builder.py#L303-L335\r\n\r\nThe Numba implementation of `append` accepts `numba.types.Boolean`, `numba.types.Integer`, and `numba.types.Float`, but not the others.\r\n\r\nYour immediate problem can be fixed by just using the [ArrayBuilder.string](https://awkward-array.readthedocs.io/en/latest/_auto/ak.ArrayBuilder.html#ak-arraybuilder-string) method, but I really need to make the Numba implementation consistent with the Python!",
  "created_at":"2022-04-21T16:53:47Z",
  "id":1105466775,
  "issue":1420,
  "node_id":"IC_kwDODBCWws5B5BWX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T16:53:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We also don't seem to support `ArrayBuilder.string` either!",
  "created_at":"2022-04-21T16:54:50Z",
  "id":1105467696,
  "issue":1420,
  "node_id":"IC_kwDODBCWws5B5Bkw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T16:54:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Ah that makes sense about the literalness. Yeah when i try with `.string` instead of `append` for the ArrayBuilder in the numba function i still get a `TypingError`: `Unknown attribute 'string' of type ak.ArrayBuilderType(None)`.",
  "created_at":"2022-04-21T16:59:16Z",
  "id":1105471562,
  "issue":1420,
  "node_id":"IC_kwDODBCWws5B5ChK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T16:59:16Z",
  "user":"MDQ6VXNlcjMyNTIyNTk0"
 },
 {
  "author_association":"MEMBER",
  "body":"I'm astonished: it's weird that I would just forget that. But it does explain why `append` isn't overloaded to cover it. Probably the feature was added later and the ArrayBuilder-in-Numba implementation is just behind the times?\r\n\r\n```python\r\n>>> import numba as nb\r\n>>> import awkward as ak\r\n>>> @nb.njit\r\n... def add_a_string(builder, string):\r\n...     builder.string(string)\r\n...     return builder\r\n... \r\n>>> builder = add_a_string(ak.ArrayBuilder(), \"hello\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jpivarski/mambaforge/lib/python3.9/site-packages/numba/core/dispatcher.py\", line 468, in _compile_for_args\r\n    error_rewrite(e, 'typing')\r\n  File \"/home/jpivarski/mambaforge/lib/python3.9/site-packages/numba/core/dispatcher.py\", line 409, in error_rewrite\r\n    raise e.with_traceback(None)\r\nnumba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nUnknown attribute 'string' of type ak.ArrayBuilderType(None)\r\n\r\nFile \"<stdin>\", line 3:\r\n<source missing, REPL/exec in use?>\r\n\r\nDuring: typing of get attribute at <stdin> (3)\r\n\r\nFile \"<stdin>\", line 3:\r\n<source missing, REPL/exec in use?>\r\n```\r\n\r\nIndeed: it's missing. Also, I don't see it in either the v1 or the v2 implementation.\r\n\r\nThis should be a separate issue: ArrayBuilder-in-Numba is missing `string` and `bytestring`, and possibly other new methods (`complex`? `datetime`?). Fortunately, we know what the interface is _supposed_ to be: it's supposed to be the same as outside of Numba, the ArrayBuilder Python interface.\r\n\r\n(BTW: ArrayBuilder-in-Numba's lack of context managers `list`, `record`, and `tuple` is known because it's waiting on context managers as a feature from Numba, but it sounds like this will be implemented soon, and Awkward Array will be a first use-case.)",
  "created_at":"2022-04-21T17:04:57Z",
  "id":1105476531,
  "issue":1420,
  "node_id":"IC_kwDODBCWws5B5Duz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T17:04:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, and if you need an interim solution for filling strings in Numba, Awkward strings are really just lists of `np.uint8` with parameters attached: `__array__: \"char\"` for the NumpyArray and `__array__: \"string\"` for the ListOffsetArray. If you build it from two NumPy arrays (`np.uint8` characters and `np.int64` offsets) that you later construct into an Awkward Array, your implementation will be faster than ArrayBuilder will be, when the feature does get added.\r\n\r\n```python\r\n>>> ak.Array([\"These\", \"are\", \"some\", \"strings.\"]).layout\r\n<ListOffsetArray64>\r\n    <parameters>\r\n        <param key=\"__array__\">\"string\"</param>\r\n    </parameters>\r\n    <offsets><Index64 i=\"[0 5 8 12 20]\" offset=\"0\" length=\"5\" at=\"0x55c407ed2e10\"/></offsets>\r\n    <content><NumpyArray format=\"B\" shape=\"20\" data=\"84 104 101 115 101 ... 105 110 103 115 46\" at=\"0x55c407bbd870\">\r\n        <parameters>\r\n            <param key=\"__array__\">\"char\"</param>\r\n        </parameters>\r\n    </NumpyArray></content>\r\n</ListOffsetArray64>\r\n```",
  "created_at":"2022-04-21T17:08:29Z",
  "id":1105479254,
  "issue":1420,
  "node_id":"IC_kwDODBCWws5B5EZW",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-04-21T17:08:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1421](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0592a1c) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.48%`.\n> The diff coverage is `42.89%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.91% <0.00%> (-0.13%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/structure/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NhcnRlc2lhbi5weQ==) | `78.94% <\u00f8> (\u00f8)` | |\n| ... and [31 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1421/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-14T22:18:36Z",
  "id":1099674518,
  "issue":1421,
  "node_id":"IC_kwDODBCWws5Bi7OW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-19T17:34:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"AwkwardForth undocumented features to document before merging:\r\n\r\n  - [x] case\r\n  - [x] enum\r\n  - [x] peek\r\n  - [x] skipws\r\n  - [x] printing strings\r\n  - [x] printing the stack\r\n",
  "created_at":"2022-04-15T00:10:45Z",
  "id":1099733168,
  "issue":1422,
  "node_id":"IC_kwDODBCWws5BjJiw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T15:17:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1422](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (400eeb3) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.02%`.\n> The diff coverage is `43.24%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `62.32% <0.00%> (+0.43%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `75.26% <37.06%> (-8.07%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `90.42% <50.00%> (-0.15%)` | :arrow_down: |\n| ... and [21 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1422/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-15T16:42:12Z",
  "id":1100219485,
  "issue":1422,
  "node_id":"IC_kwDODBCWws5BlARd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-15T16:42:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77 I was prioritizing your issue when I came across this. Point you to it because you're doing the documentation, though I think if you came across a comment about Uproot 4 not being able to write TTrees, you'd see that it's out of date. (Actually, any mention of Uproot 3 can now be purged...)",
  "created_at":"2022-08-23T14:48:12Z",
  "id":1224182445,
  "issue":1424,
  "node_id":"IC_kwDODBCWws5I94qt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T14:48:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The documentation doesn't even mention Uproot anymore. There should at least be a pointer to the Uproot documentation site for users interested in ROOT files.\r\n\r\nAt least it's no longer wrong.",
  "created_at":"2022-10-31T20:41:35Z",
  "id":1297659697,
  "issue":1424,
  "node_id":"IC_kwDODBCWws5NWLcx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T20:41:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We technically link to reading via uproot in the toctree:\r\nhttps://uproot.readthedocs.io/en/latest/basic.html#reading-a-tbranch-as-an-array\r\n\r\n![image](https://user-images.githubusercontent.com/1248413/199107870-a5a4eafd-ab9a-48e4-8ad6-7d2546ca6176.png)\r\n\r\nWe might want to do more here, but this was a stop-gap in the meantime",
  "created_at":"2022-10-31T20:50:26Z",
  "id":1297669506,
  "issue":1424,
  "node_id":"IC_kwDODBCWws5NWN2C",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T20:50:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I wonder why I didn't find it with a search.",
  "created_at":"2022-10-31T20:56:29Z",
  "id":1297675504,
  "issue":1424,
  "node_id":"IC_kwDODBCWws5NWPTw",
  "performed_via_github_app":null,
  "reactions":{
   "confused":1,
   "total_count":1
  },
  "updated_at":"2022-10-31T20:56:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1425?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1425](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1425?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (03b960d) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/a0c9331343c2673120a18351dadf8cbea21f57d6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a0c9331) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1425?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1425/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `82.02% <100.00%> (+0.05%)` | :arrow_up: |\n",
  "created_at":"2022-04-19T01:12:49Z",
  "id":1101897770,
  "issue":1425,
  "node_id":"IC_kwDODBCWws5BraAq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-19T01:12:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR aims to fix the following failling test: \r\n\r\n```python\r\n  array = ak._v2.highlevel.Array([\"1chchc\", \"1chchc\", \"2sss\", \"3\", \"4\", \"5\"])\r\n  categorical = ak._v2.behaviors.categorical.to_categorical(array)\r\n  assert categorical.layout.is_unique() is False\r\n```\r\n\r\nThe error comes from the `awkward_unique_copy` kernel in [IndexedArray](https://github.com/scikit-hep/awkward-1.0/blob/3135804202d54b2cefcd68fd2d7f9d2966e67892/src/awkward/_v2/contents/indexedarray.py#L708). This kernel removes duplicates of indexes if present which makes this assert to return `True`. \r\n\r\nIn the previous approach, the `IndexedArray_ranges_carry_next_64` kernel was selecting indexes based on a start and stop, without removing duplicates. \r\n\r\nMy fix of the kernel, although it passes the tests, it basically renders the kernel useless as if no range is selected, then it's just a copy of the existing `index` array. \r\n\r\n@ianna  Could please have a look as well ",
  "created_at":"2022-04-19T18:08:08Z",
  "id":1102940546,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5BvYmC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-19T18:08:08Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1429](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (45ec4f7) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **increase** coverage by `0.88%`.\n> The diff coverage is `62.44%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/structure/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2FyZ2NhcnRlc2lhbi5weQ==) | `78.94% <\u00f8> (\u00f8)` | |\n| [...c/awkward/\\_v2/operations/structure/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvc3RydWN0dXJlL2FrX2NhcnRlc2lhbi5weQ==) | `89.68% <\u00f8> (\u00f8)` | |\n| ... and [90 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1429/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-19T18:54:06Z",
  "id":1102979293,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5BviDd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T14:34:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"If @ianna signs off on this, then I do too. It does change awkward_unique_copy.cpp and I don't know what the consequences of that are, but @ianna would.\r\n\r\nOh, and if you change the kernel definition, change kernel-specificaiton.yml, too.",
  "created_at":"2022-04-21T13:08:44Z",
  "id":1105185753,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5B38vZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T13:08:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ioanaif - the purpose of the kernel is to return unique values. The length before and after -if eval - would be an indicator that the values are unique.",
  "created_at":"2022-04-23T21:31:21Z",
  "id":1107652480,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5CBW-A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-23T21:31:21Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I think, the `tolength` in line 22 should be considered as an indicator of the unique values. For example, to determine if the following data is unique: `[2,6,3,9,4,2]` they are firstly, sorted: `[2,2,3,4,6,9]`, then passed via `awkward_unique_copy`: `[2,3,4,6,9]`. Since the final length is not equal to the original one, the data is not unique.\r\n\r\nAh, indeed. I changed back the kernel and added the check of indexes length comparison (returns False if the indexes are not unique) \r\n",
  "created_at":"2022-04-25T10:12:57Z",
  "id":1108368526,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5CEFyO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-25T10:12:57Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > I think, the `tolength` in line 22 should be considered as an indicator of the unique values. For example, to determine if the following data is unique: `[2,6,3,9,4,2]` they are firstly, sorted: `[2,2,3,4,6,9]`, then passed via `awkward_unique_copy`: `[2,3,4,6,9]`. Since the final length is not equal to the original one, the data is not unique.\r\n> \r\n> Ah, indeed. I changed back the kernel and added the check of indexes length comparison (returns False if the indexes are not unique)\r\n\r\nI think, the indices do not need to be unique. The content does. Say, an indexed array can have duplicate indices `[0,0,0,1,2,3]` and be unique if its content is unique: `[0.1,1.1,2.1,3.1]`",
  "created_at":"2022-04-25T16:10:21Z",
  "id":1108769712,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5CFnuw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-25T16:10:21Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"@ioanaif and @ianna, let me know when this is settled so I can review it. (I can't tell from the discussion.) Thanks!",
  "created_at":"2022-04-26T18:53:35Z",
  "id":1110140163,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5CK2UD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-26T18:53:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ioanaif and @jpivarski - I think, check on `is_unique` for the following `IndexedArray` should be `True`, but I'm fine with the PR if this is expected behaviour.\r\n```python\r\n>>> content = ak._v2.contents.NumpyArray([1.1, 2.2, 3.3, 4.4])\r\n>>> content\r\n<NumpyArray dtype='float64' len='4'>[1.1 2.2 3.3 4.4]</NumpyArray>\r\n>>> index = ak._v2.index.Index64([0, 0, 0, 0, 0, 2, 2, 2])\r\n>>> iarr = ak._v2.contents.IndexedArray(index, content)\r\n>>> iarr\r\n<IndexedArray len='8'>\r\n    <index><Index dtype='int64' len='8'>[0 0 0 0 0 2 2 2]</Index></index>\r\n    <content><NumpyArray dtype='float64' len='4'>[1.1 2.2 3.3 4.4]</NumpyArray></content>\r\n</IndexedArray>\r\n>>> harr = ak._v2.Array(iarr)\r\n>>> harr\r\n<Array [1.1, 1.1, 1.1, 1.1, 1.1, 3.3, 3.3, 3.3] type='8 * float64'>\r\n>>> harr.layout.is_unique()\r\nFalse\r\n>>> harr.layout\r\n<IndexedArray len='8'>\r\n    <index><Index dtype='int64' len='8'>[0 0 0 0 0 2 2 2]</Index></index>\r\n    <content><NumpyArray dtype='float64' len='4'>[1.1 2.2 3.3 4.4]</NumpyArray></content>\r\n</IndexedArray>\r\n```",
  "created_at":"2022-04-27T07:46:08Z",
  "id":1110662190,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5CM1wu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-27T07:46:08Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It follows the same behaviour as v1, thus maybe @jpivarski can weigh in\r\n\r\n```python\r\n>>> content = ak.layout.NumpyArray([1.1, 2.2, 3.3, 4.4])\r\n>>> index = ak.layout.Index64([0, 0, 0, 0, 0, 2, 2, 2])\r\n>>> iarr = ak.layout.IndexedArray64(index, content)\r\n>>> iarr\r\n<IndexedArray64>\r\n    <index><Index64 i=\"[0 0 0 0 0 2 2 2]\" offset=\"0\" length=\"8\" at=\"0x7f9eba404210\"/></index>\r\n    <content><NumpyArray format=\"d\" shape=\"4\" data=\"1.1 2.2 3.3 4.4\" at=\"0x7f9eba4040b0\"/></content>\r\n</IndexedArray64>\r\n>>> harr = ak.Array(iarr)\r\n>>> harr.layout.is_unique()\r\nFalse\r\n>>> harr.layout\r\n<IndexedArray64>\r\n    <index><Index64 i=\"[0 0 0 0 0 2 2 2]\" offset=\"0\" length=\"8\" at=\"0x7f9eba404210\"/></index>\r\n    <content><NumpyArray format=\"d\" shape=\"4\" data=\"1.1 2.2 3.3 4.4\" at=\"0x7f9eba4040b0\"/></content>\r\n</IndexedArray64>\r\n>>> \r\n\r\n```\r\n\r\n",
  "created_at":"2022-04-27T08:51:12Z",
  "id":1110737178,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5CNIEa",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-04-27T08:51:12Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It follows the same behaviour as v1\r\n\r\nyes, I worry it was wrong there...",
  "created_at":"2022-04-27T13:30:59Z",
  "id":1111006601,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5COJ2J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-27T13:30:59Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"The layout methods, such as `layout.is_unique()`, are not high-level functions: they do whatever we need to do to support the high-level functions, which have large docstrings saying what they're supposed to do. Which high-level function(s) is `layout.is_unique()` used in? That's what will determine if this behavior is right or wrong.",
  "created_at":"2022-04-27T16:31:05Z",
  "id":1111211023,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5CO7wP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-27T16:31:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  Which high-level function(s) is `layout.is_unique()` used in? That's what will determine if this behavior is right or wrong.\r\n\r\n`ak.validity_error` -> `layout.validityerror_parameters()` -> `layout.is_unique()` : ___array__ = \"categorical\" requires contents to be unique_",
  "created_at":"2022-04-27T16:47:24Z",
  "id":1111226465,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5CO_hh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-27T16:47:24Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"MEMBER",
  "body":"If that's the only one, then it should do what's appropriate for checking the categorical data. Categorical data is an IndexedArray (or maybe IndexedOptionArray) in which the `index` is allowed to have a lot of duplicates, but the nested `content` is not.\r\n\r\n`layout.validityerror` needs a way of saying that the following is okay\r\n\r\n```python\r\n<IndexedArray64>\r\n    <index><Index64 i=\"[0 0 0 0 0 2 2 2]\" offset=\"0\" length=\"8\" at=\"0x7f9eba404210\"/></index>\r\n    <content><NumpyArray format=\"d\" shape=\"4\" data=\"1.1 2.2 3.3 4.4\" at=\"0x7f9eba4040b0\"/></content>\r\n</IndexedArray64>\r\n```\r\n\r\nbecause the NumpyArray doesn't have any duplicated elements. If `layout.is_unique()` does exactly what its name sounds like it does and complains about the IndexedArray having many `0`s and `2`s in its `index`, then perhaps `layout.valididtyerror` should only be applying it to the IndexedArray's `content`.\r\n\r\nIf `layout.is_unique()` is somehow IndexedArray-aware and only looks inside of the IndexedArray's `content`, then perhaps its name should be changed because it's misleading.\r\n\r\nI'd prefer the function to be simple, that `layout.is_unique()` just checks to see if there are any duplicated entries in `layout`, and have `layout.validityerror` be aware of the fact that if an IndexedArray/IndexedOptionArray is labeled categorical, only its `content` must pass `is_unique()`.",
  "created_at":"2022-04-27T17:24:53Z",
  "id":1111280132,
  "issue":1429,
  "node_id":"IC_kwDODBCWws5CPMoE",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-04-27T17:24:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1430](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7f733d5) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.66%`.\n> The diff coverage is `50.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.91% <0.00%> (-0.13%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnQucHk=) | `95.83% <\u00f8> (\u00f8)` | |\n| ... and [54 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1430/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-19T20:24:23Z",
  "id":1103103750,
  "issue":1430,
  "node_id":"IC_kwDODBCWws5BwAcG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-19T20:24:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1431](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7794842) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.67%`.\n> The diff coverage is `48.01%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.91% <0.00%> (-0.13%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/convert/ak\\_to\\_arrow\\_table.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| ... and [59 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1431/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-19T23:21:48Z",
  "id":1103254659,
  "issue":1431,
  "node_id":"IC_kwDODBCWws5BwlSD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-19T23:21:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1432](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b311af2) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.67%`.\n> The diff coverage is `48.01%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.91% <0.00%> (-0.13%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/convert/ak\\_to\\_arrow\\_table.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| ... and [59 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1432/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-19T23:51:04Z",
  "id":1103268635,
  "issue":1432,
  "node_id":"IC_kwDODBCWws5Bwosb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-20T00:24:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1433](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0775dbe) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.74%`.\n> The diff coverage is `47.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `81.91% <0.00%> (-0.13%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/convert/ak\\_to\\_arrow\\_table.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| ... and [59 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1433/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-20T01:03:36Z",
  "id":1103318670,
  "issue":1433,
  "node_id":"IC_kwDODBCWws5Bw06O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-20T01:03:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1434](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (971e6d7) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.18%`.\n> The diff coverage is `58.57%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/convert/ak\\_to\\_arrow\\_table.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/reducers/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvcmVkdWNlcnMvYWtfY291bnQucHk=) | `95.83% <\u00f8> (\u00f8)` | |\n| ... and [66 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1434/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-20T10:46:47Z",
  "id":1103790596,
  "issue":1434,
  "node_id":"IC_kwDODBCWws5ByoIE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-20T10:46:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Perhaps this PR should also remove the `ak_from_parquet.py` and `ak_to_parquet.py` files in the `io` module?",
  "created_at":"2022-04-20T15:19:56Z",
  "id":1104058482,
  "issue":1435,
  "node_id":"IC_kwDODBCWws5Bzphy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-20T15:19:56Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"MEMBER",
  "body":"> Perhaps this PR should also remove the `ak_from_parquet.py` and `ak_to_parquet.py` files in the `io` module?\r\n\r\nYes, that would be helpful, thank you! This PR illustrates the fact that the \"io\" submodule has to be removed because I forgot and created `from_parquet`/`to_parquet` in two places. When I revamp the `from_json`/`to_json`, I'll move them to \"convert\" also.\r\n\r\n(There's not enough mental distinction between \"io\" and \"convert\" to be clear on which should go where. Users don't see it, anyway\u2014everything is just `ak.*`\u2014it was just for our internal organization. Maybe the whole level of hierarchy should be reduced by one, so that all of those `ak_*` submodules are directly in \"operations\". Almost everything is in \"structure\", anyway. I may do that at the same time as internal renaming, to get the layout method names consistent with the high-level function names, but that would be a separate PR, timed to not interfere with other work.)",
  "created_at":"2022-04-20T15:43:21Z",
  "id":1104083873,
  "issue":1435,
  "node_id":"IC_kwDODBCWws5Bzvuh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-20T15:43:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1435](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (518397c) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.18%`.\n> The diff coverage is `58.57%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/convert/ak\\_to\\_arrow\\_table.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/io/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvaW8vX19pbml0X18ucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| ... and [67 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1435/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-20T15:57:05Z",
  "id":1104101372,
  "issue":1435,
  "node_id":"IC_kwDODBCWws5Bzz_8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-20T18:11:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Sounds good! this narrow focused PR should be good to go then",
  "created_at":"2022-04-20T17:54:03Z",
  "id":1104245998,
  "issue":1435,
  "node_id":"IC_kwDODBCWws5B0XTu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-20T17:54:03Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"MEMBER",
  "body":"Without digging into it, I would guess that this is because `lazy` has to make a separate HTTP request for each basket of each branch, whereas `arrays` can request all of the byte ranges upfront in a single request, if the server supports multi-part GETs. Even if the server doesn't support multi-part GETs, the `lazy` requests have to be sequential and the `arrays` can use the multiple workers of the fallback MultithreadedHTTPSource.\r\n\r\nWith lazy arrays fetching data \"as soon as they're needed,\" there is no way to fix this problem: it has to discover, one by one, that each basket of each branch will be needed when `ak.to_parquet` requests it. There is no coordination between `ak.to_parquet` and Uproot, such that Uproot can know that `ak.to_parquet` is going to require all baskets of all branches, eventually. (`ak.to_parquet` walks sequentially over partitions of a partitioned virtual (i.e. lazy) array, so that only one has to be in memory at a time, writing them to separate row groups in the output file.) That's a fundamental computer science/\"how much information is available at a given time\" issue.\r\n\r\n> Notably, I don't see this behavior with local files or `root:` URLs.\r\n\r\nThis effect still happens with local files and XRootD, but local files have much less latency. For XRootD, maybe it's recognizing the pattern and pre-fetching baskets? That's a guess. By the way, it's also a guess that this effect is the dominant one in your case.\r\n\r\nSwitching to Dask will fix the above problem because nothing is computed until `compute` is explicitly called, and then we can scan the Dask DAG for which branches/entry ranges are touched and fetch them all in one request, as in `arrays`. The reason this requires Dask is because of the extra information we get from the `compute` call, which we currently lack.\r\n\r\n--------------------------\r\n\r\nI guess the reason you're using lazy arrays at all (which aren't recommended for performance, because of the above) is to prevent the whole array from being loaded into memory at once, so that the ROOT \u2192 Parquet conversion can be done in small steps? I'll be working on a v2 `ak._v2.to_parquet` soon, which will have to have some iterator solution for writing chunks and controlling the row group size because PartitionedArray won't be there. For the time being, we could arrange to build a PartitionedArray of VirtualArray manually to take all branches in larger-than-basket chunks for this process? Or just wait for `ak._v2.to_parquet` because we can write round-trip-safe arrays in Parquet in v2?",
  "created_at":"2022-04-20T16:06:56Z",
  "id":1104113812,
  "issue":1436,
  "node_id":"IC_kwDODBCWws5Bz3CU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-20T16:06:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"This came up in the context of the Uproot transformer in ServiceX, which uses `lazy` because FuncADL doesn't currently have a way to determine which branches will be needed until a query is run. For my purposes here, I don't care about row chunking (I'm always loading an entire branch); I just don't want to load every branch in the tree. In this case, the entire file is only 200 MB, so I don't think there's any chunking happening anyway. The problem seems to be that there are sequential requests for each branch. Is there a way around that?",
  "created_at":"2022-04-21T11:32:51Z",
  "id":1105090907,
  "issue":1436,
  "node_id":"IC_kwDODBCWws5B3llb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T11:32:51Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@masonproffitt could you perhaps add a little more detail with regards to \r\n\r\n> FuncADL doesn't currently have a way to determine which branches will be needed until a query is run\r\n\r\nIs it that you support non-trivial methods of e.g. accessing record fields (e.g. a dynamic string) such that the AST needs to be executed in order to determine which fields are in use?\r\n\r\nIf this is the case, then it will not be trivial to predict which branches will be loaded by the routine in order to batch-load them. Most expressions that operate on a lazy array also end up materialising it, which is not what you want here! \r\n\r\nThere is a fundamental conflict between \"invisible\" laziness and optimization, which is a strong motivation for Awkward-Dask. Awkward only realises that you need a particular lazy array to be materialized at the point that its data is required. There is no mechanism for optimising this whilst we are required to run sequentially and synchronously.\r\n\r\nIf one had concrete knowledge of which branches were going to be used before any of the analysis code were invoked, then one could inspect the array layout and (hackily) its virtual layouts in order to build a single call to `uproot.open`. However, I imagine if this were possible that it would also be possible to do it before the user analysis code is invoked (i.e. don't use `uproot.lazy` to begin with) which you've stated isn't possible.\r\n\r\nIf this is a UX thing, perhaps there could be a way to add metadata that would allow you to optimize the case where this information is known at an early stage?",
  "created_at":"2022-04-21T11:56:10Z",
  "id":1105109942,
  "issue":1436,
  "node_id":"IC_kwDODBCWws5B3qO2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T12:15:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> Is it that you support non-trivial methods of e.g. accessing record fields (e.g. a dynamic string) such that the AST needs to be executed?\r\n\r\nExactly. There's no way to know exactly what needs to be loaded until the point of the `ak.to_parquet` call. In many cases, part or all of the output array has already been materialized by the query (which is perfectly fine), but this particular case is an example in which nothing has been materialized, but all of the knowledge needed to make a much more efficient `arrays()` call exists. Maybe I can just write some code to detect this case and extract the information from the PartitionedArray to do exactly that?",
  "created_at":"2022-04-21T12:27:57Z",
  "id":1105148474,
  "issue":1436,
  "node_id":"IC_kwDODBCWws5B3zo6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T12:27:57Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Of the possible solutions, I'd generally argue in favour of an explicit early-as-possible solution (e.g. the metadata approach I mentioned earlier). Only special-casing `to_parquet` means that a general analysis will not benefit from this optimisation.\r\n\r\nI don't know enough to know whether these options would work, but some possible avenues:\r\n\r\n- Allow the user to add metadata as to which branches will be loaded. Process the lazy array and replace the known parts with their eagerly loaded contents.\r\n- Implement a trivial optimisation pass in the AST transformer that looks for `array.field` and `array['field']` cases, and keeps track of these (then apply above optimisation)\r\n- Special-case only the `to_parquet` as you outline above.\r\n\r\nIn all three of these, you'd need to rip apart the `uproot` lazy array, and work backwards to perform the single `uproot.open` call. This is obviously not ideal (I'm picturing looking at `virtual.generator.callable.__self__` to get the `TBranch` :vomiting_face:) but it would *work* and be hidden away from user-facing code.",
  "created_at":"2022-04-21T12:39:27Z",
  "id":1105158716,
  "issue":1436,
  "node_id":"IC_kwDODBCWws5B32I8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T12:41:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"The first option isn't tenable, as it breaks one of the primary goals of the interface. Even the significant performance penalty I've seen here is preferable to that. The second option is closer to the idea I've had for a long-term solution, but it is highly non-trivial, as the array and various slices of it can be assigned to new variables within a query, and there are non-field attributes. For now the special case should be fine, although I'll certainly be interested in the v2 Dask solutions.",
  "created_at":"2022-04-21T14:56:40Z",
  "id":1105334700,
  "issue":1436,
  "node_id":"IC_kwDODBCWws5B4hGs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T14:56:40Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "author_association":"MEMBER",
  "body":"I think there isn't anything that can or should be done to the Awkward or Uproot codebases to address this, though there are ways of dealing with it in downstream dependencies (ServiceX). Arguably, it's complicating things to put that fix in ServiceX, but there isn't a good way to do it in the non-Dask model of laziness (no way to propagate information about what `to_parquet` needs to `uproot.lazy` because we don't have a DAG that can be examined), but all of the Awkward+Uproot code that handles PartitionedArrays and VirtualArrays will be superseded (to address exactly this issue, actually). So unfortunately, ServiceX has to be complicated to deal with the way v1 laziness is working, but it will be simpler in v2.\r\n\r\nI'm getting long-winded, but really what I'm saying is that this issue should be closed, since we can't do anything about it that we're not already doing (the whole v2 thing).",
  "created_at":"2022-04-22T15:37:58Z",
  "id":1106634069,
  "issue":1436,
  "node_id":"IC_kwDODBCWws5B9eVV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-22T15:37:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1437](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (702ee34) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.08%`.\n> The diff coverage is `60.83%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `82.26% <\u00f8> (+0.76%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/convert/ak\\_to\\_arrow\\_table.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| ... and [74 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1437/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-21T13:28:56Z",
  "id":1105206831,
  "issue":1437,
  "node_id":"IC_kwDODBCWws5B4B4v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-21T20:38:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - it looks like it's implemented in v2:\r\n```python\r\n>>> import numba as nb\r\n>>> import awkward._v2 as ak\r\n>>> import awkward._v2._connect.numba.arrayview\r\n>>> import awkward._v2._connect.numba.builder\r\n>>> def add_a_string(builder, string):\r\n...     builder.string(string)\r\n...     return builder\r\n... \r\n>>> builder = add_a_string(ak.ArrayBuilder(), \"hello\")\r\n>>> builder.snapshot()\r\n<Array ['hello'] type='1 * string'>\r\n```\r\n",
  "created_at":"2022-09-02T14:43:26Z",
  "id":1235588786,
  "issue":1438,
  "node_id":"IC_kwDODBCWws5JpZay",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-02T14:43:26Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, that's nice! I must have done that while porting from v1 to v2 and forgot to close this issue. I guess this wasn't needed. Are all of v2 ArrayBuilder's Python methods available in Numba? (Excluding the ones that require a context manager, since that hasn't been implemented in Numba yet.) If so, then you can close this issue.\r\n\r\nThe other starter issue, #1420, has not been implemented in v2. Looking at it now, it gets a little more into the internals of Numba, since you have to distinguish between Numba's string type and Numba's literal string type, but that's still not a very deep rabbithole.",
  "created_at":"2022-09-02T17:50:28Z",
  "id":1235764691,
  "issue":1438,
  "node_id":"IC_kwDODBCWws5JqEXT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-02T17:50:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Done in #1677.",
  "created_at":"2022-10-31T20:40:10Z",
  "id":1297657901,
  "issue":1438,
  "node_id":"IC_kwDODBCWws5NWLAt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T20:40:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1440](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2ae5205) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **increase** coverage by `0.08%`.\n> The diff coverage is `63.40%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `82.26% <\u00f8> (+0.76%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| ... and [92 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1440/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-22T21:17:53Z",
  "id":1106873395,
  "issue":1440,
  "node_id":"IC_kwDODBCWws5B-Ywz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-26T20:07:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Please see [here](https://github.com/ContinuumIO/dask-awkward/pull/17/files#diff-bf79a4484bcf34c6d87028ba90c927882a42e496555b824ae2f368d588bd6c58R398) for the list of options we thought would be important when we talked this through.",
  "created_at":"2022-04-25T21:32:04Z",
  "id":1109061659,
  "issue":1440,
  "node_id":"IC_kwDODBCWws5CGvAb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-25T21:32:04Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"> compression per data type or per leaf column (\"path.to.leaf\": \"zstd\" format)\r\n\r\nPer leaf column is implemented: all ParquetWriter arguments that accept a dict or list can be selected via a dict of Awkward column selectors. Selectors are strings or iterables of strings that get passed to `Form.select_columns` (which slice through Forms to make new Forms):\r\n\r\n```python\r\n>>> array = ak._v2.Array([[{\"x\": 1.1, \"y\": [1], \"z\": \"one\"}, {\"x\": 2.2, \"y\": [1, 2], \"z\": \"two\"}], [], [{\"x\": 3.3, \"y\": [1, 2, 3], \"z\": \"three\"}]])\r\n>>> print(array.layout.form.select_columns(\"x\"))\r\n{\r\n    \"class\": \"ListOffsetArray\",\r\n    \"offsets\": \"i64\",\r\n    \"content\": {\r\n        \"class\": \"RecordArray\",\r\n        \"contents\": {\r\n            \"x\": \"float64\"\r\n        }\r\n    }\r\n}\r\n>>> print(array.layout.form.select_columns(\"y\"))\r\n{\r\n    \"class\": \"ListOffsetArray\",\r\n    \"offsets\": \"i64\",\r\n    \"content\": {\r\n        \"class\": \"RecordArray\",\r\n        \"contents\": {\r\n            \"y\": {\r\n                \"class\": \"ListOffsetArray\",\r\n                \"offsets\": \"i64\",\r\n                \"content\": \"int64\"\r\n            }\r\n        }\r\n    }\r\n}\r\n>>> print(array.layout.form.select_columns(\"z\"))\r\n{\r\n    \"class\": \"ListOffsetArray\",\r\n    \"offsets\": \"i64\",\r\n    \"content\": {\r\n        \"class\": \"RecordArray\",\r\n        \"contents\": {\r\n            \"z\": {\r\n                \"class\": \"ListOffsetArray\",\r\n                \"offsets\": \"i64\",\r\n                \"content\": {\r\n                    \"class\": \"NumpyArray\",\r\n                    \"primitive\": \"uint8\",\r\n                    \"parameters\": {\r\n                        \"__array__\": \"char\"\r\n                    }\r\n                },\r\n                \"parameters\": {\r\n                    \"__array__\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n>>> print(array.layout.form.select_columns([\"x\", \"y\"]))\r\n{\r\n    \"class\": \"ListOffsetArray\",\r\n    \"offsets\": \"i64\",\r\n    \"content\": {\r\n        \"class\": \"RecordArray\",\r\n        \"contents\": {\r\n            \"x\": \"float64\",\r\n            \"y\": {\r\n                \"class\": \"ListOffsetArray\",\r\n                \"offsets\": \"i64\",\r\n                \"content\": \"int64\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThey're wildcard-friendly and don't have the \"`list.item`/`list.element`\" baggage.\r\n\r\nOnce sliced, `column_types` gives you Parquet-relevant types for the columns:\r\n\r\n```python\r\n>>> array.layout.form.column_types()\r\n(dtype('float64'), dtype('int64'), 'string')\r\n```\r\n\r\nAgain, it ignores whatever lists or option-types it encountered on the way down to the leaves, and this `\"string\"` means string or bytestring, distinct from any dtypes.\r\n\r\nThey were to be used here:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/6286e29ec769e95ef882f7f4a79eb43212bf0b53/src/awkward/_v2/operations/convert/ak_to_parquet.py#L123-L145\r\n\r\nBut Arrow is saying that nested column buffers made this way are too short, that the file is possibly corrupted. If I'm not misunderstanding something, this looks like a bug in pyarrow.\r\n\r\n> byte stream split for floats if compression is not None or lzma\r\n\r\nSee above.\r\n\r\n> partitioning\r\n\r\nIf the `data` is an iterator _without len_, then it will iterate over everything in it and make one row-group per item.\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/6286e29ec769e95ef882f7f4a79eb43212bf0b53/src/awkward/_v2/operations/convert/ak_to_parquet.py#L41-L50\r\n\r\n> parquet 2 for full set of time and int types\r\n> v2 data page (for possible later fastparquet implementation)\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/6286e29ec769e95ef882f7f4a79eb43212bf0b53/src/awkward/_v2/operations/convert/ak_to_parquet.py#L25-L26\r\n\r\nI haven't tried it out yet.\r\n\r\n> dict encoding always off\r\n\r\nThat would be `use_dictionary=False` (though I think you'd want it on some string-valued fields).\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/6286e29ec769e95ef882f7f4a79eb43212bf0b53/src/awkward/_v2/operations/convert/ak_to_parquet.py#L172\r\n\r\nBut the apparent bug I mentioned above is making me hesitate about that.",
  "created_at":"2022-04-25T21:56:47Z",
  "id":1109080123,
  "issue":1440,
  "node_id":"IC_kwDODBCWws5CGzg7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-25T21:56:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is pretty much done. I think the options might change; in particular, I think it would be much better to be writing compliant list types, but there's [an issue with that](https://issues.apache.org/jira/browse/ARROW-16348).",
  "created_at":"2022-04-26T19:57:08Z",
  "id":1110192781,
  "issue":1440,
  "node_id":"IC_kwDODBCWws5CLDKN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-26T19:57:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> If the data is an iterator without len, then it will iterate over everything in it and make one row-group per item.\r\n\r\nI meant directory name partitioning, ie., following group-by.\r\n\r\n> Per leaf column compression is implemented\r\n\r\n(I forgot to mention that we discussed what decent defaults might be, per data type)\r\n\r\n\r\nI know nothing about the possible pyarrow bug.",
  "created_at":"2022-04-26T20:09:38Z",
  "id":1110202840,
  "issue":1440,
  "node_id":"IC_kwDODBCWws5CLFnY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-26T20:09:38Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"The variable named `row_group_number` is not strictly right because the writer might write more than one row group in a call. It should be named `iteration_number`.",
  "created_at":"2022-04-28T15:11:19Z",
  "id":1112329220,
  "issue":1440,
  "node_id":"IC_kwDODBCWws5CTMwE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T15:11:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This was already done in v2: https://github.com/scikit-hep/awkward-1.0/issues/838#issuecomment-949042273\r\n\r\nIt's a completely different algorithm that has the property of always closing any open brackets, with the trade-off that there may be many \"`...`\" instead of just one.\r\n\r\nThis kind of major change is appropriate for a 1 \u2192 2 version boundary, and if it's better, at least it will be a draw to use the new system. (Which is [available now](https://github.com/scikit-hep/awkward-1.0/wiki#current-status), by the way.)\r\n\r\n```python\r\nfrom awkward._v2.tmp_for_testing import v1_to_v2, v2_to_v1\r\n\r\nv2array = ak._v2.Array(v1_to_v2(v1array.layout))\r\n# use ak._v2.* functions on v2array\r\n\r\nv1array = ak.Array(v2_to_v1(v2array.layout))\r\n# ak.* functions on v1array\r\n```\r\n\r\nIf the v2 repr is sufficient, I think we can close this issue.",
  "created_at":"2022-04-23T23:47:51Z",
  "id":1107666823,
  "issue":1441,
  "node_id":"IC_kwDODBCWws5CBaeH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-23T23:47:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The repr in the link looks great, I think this perfectly addresses what I had in mind. Thank you!",
  "created_at":"2022-04-23T23:50:19Z",
  "id":1107667088,
  "issue":1441,
  "node_id":"IC_kwDODBCWws5CBaiQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-23T23:50:19Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "author_association":"MEMBER",
  "body":"Great!",
  "created_at":"2022-04-24T00:46:43Z",
  "id":1107674723,
  "issue":1441,
  "node_id":"IC_kwDODBCWws5CBcZj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-24T00:46:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1442](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (da53c3a) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.00%`.\n> The diff coverage is `60.02%`.\n\n> :exclamation: Current head da53c3a differs from pull request most recent head 5761246. Consider uploading reports for the commit 5761246 to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `83.09% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...\\_v2/operations/convert/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19tZXRhZGF0YV9mcm9tX3BhcnF1ZXQucHk=) | `31.57% <0.00%> (\u00f8)` | |\n| [...wkward/\\_v2/operations/convert/ak\\_to\\_arrow\\_table.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| ... and [76 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1442/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-25T21:07:10Z",
  "id":1109041098,
  "issue":1442,
  "node_id":"IC_kwDODBCWws5CGp_K",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T17:49:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Is this superseded by #1476?",
  "created_at":"2022-06-30T13:00:08Z",
  "id":1171190087,
  "issue":1442,
  "node_id":"IC_kwDODBCWws5FzvFH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-30T13:00:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks!",
  "created_at":"2022-06-30T17:46:37Z",
  "id":1171507289,
  "issue":1442,
  "node_id":"IC_kwDODBCWws5F08hZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-30T17:46:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1443](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3994511) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.07%`.\n> The diff coverage is `61.34%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `82.26% <\u00f8> (+0.76%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/convert/ak\\_to\\_arrow\\_table.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| ... and [73 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1443/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-26T11:50:51Z",
  "id":1109699687,
  "issue":1443,
  "node_id":"IC_kwDODBCWws5CJKxn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-26T11:50:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1444](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (51b6cc7) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **decrease** coverage by `0.02%`.\n> The diff coverage is `61.83%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `82.26% <\u00f8> (+0.76%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/convert/ak\\_to\\_arrow\\_table.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19hcnJvd190YWJsZS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| ... and [74 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1444/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-26T12:43:20Z",
  "id":1109749487,
  "issue":1444,
  "node_id":"IC_kwDODBCWws5CJW7v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-26T12:43:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"To implement an axis, maybe use `:, :, :, np.newaxis` (if nonnegative) or `..., np.newaxis, :, :, :` (if negative) and then `drop_none`?\r\n\r\nAs for whether singletons should include Nones, I think it shouldn't, because otherwise it would be completely identical to the above slide (and it wouldn't be doing what singletons was invented to do: to switch between a token-based and a 0/1-length list-based representation of missing data).",
  "created_at":"2022-04-28T13:23:32Z",
  "id":1112199170,
  "issue":1444,
  "node_id":"IC_kwDODBCWws5CStAC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T13:23:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"`drop_none` is #832.",
  "created_at":"2022-04-28T13:24:07Z",
  "id":1112199837,
  "issue":1444,
  "node_id":"IC_kwDODBCWws5CStKd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T13:24:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1445](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (72dee09) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **increase** coverage by `1.24%`.\n> The diff coverage is `59.04%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `82.47% <\u00f8> (+0.97%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| ... and [105 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1445/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-26T12:20:44Z",
  "id":1109727357,
  "issue":1445,
  "node_id":"IC_kwDODBCWws5CJRh9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T14:37:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1446](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (19f92b5) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **increase** coverage by `0.85%`.\n> The diff coverage is `55.84%`.\n\n> :exclamation: Current head 19f92b5 differs from pull request most recent head 765eb76. Consider uploading reports for the commit 765eb76 to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `82.26% <\u00f8> (+0.76%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| ... and [100 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1446/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-27T10:49:05Z",
  "id":1110855721,
  "issue":1446,
  "node_id":"IC_kwDODBCWws5CNlAp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T19:48:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I've added a reference to the associated lookups to the C++ source class. This guarantees that the memory does not go out of scope. I did not remove the lookups attribute attached to the Python rdf to test a no-copy array creation after filtering. I hope, there is no harm in keeping it for a while.",
  "created_at":"2022-04-28T08:36:49Z",
  "id":1111904943,
  "issue":1446,
  "node_id":"IC_kwDODBCWws5CRlKv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T08:36:49Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - the build fails with  `unable to access 'https://github.com/pybind/pybind11.git/'`",
  "created_at":"2022-04-29T19:53:58Z",
  "id":1113669836,
  "issue":1446,
  "node_id":"IC_kwDODBCWws5CYUDM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T19:53:58Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski - the build fails with `unable to access 'https://github.com/pybind/pybind11.git/'`\r\n\r\nThat must be an intermittent GitHub outage. The URL does work\u2014now, anyway.\r\n\r\nI restarted the failed jobs. Also, I'm pleased that GitHub Actions now has that option\u2014for a long time, it was a drop-down menu with only the option to restart all jobs. They must have been planning it for a while (hence the drop-down menu).",
  "created_at":"2022-04-29T20:29:55Z",
  "id":1113699140,
  "issue":1446,
  "node_id":"IC_kwDODBCWws5CYbNE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T20:29:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1447?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1447](https://codecov.io/gh/scikit-hep/awkward/pull/1447?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (00bd449) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.01%`.\n> The diff coverage is `71.25%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1447?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <\u00f8> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvdy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow\\_schema.py](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvd19zY2hlbWEucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9idWZmZXJzLnB5) | `86.13% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jdXB5LnB5) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qYXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uX25ldy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9udW1weS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| ... and [124 more](https://codecov.io/gh/scikit-hep/awkward/pull/1447/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-27T13:34:25Z",
  "id":1111010685,
  "issue":1447,
  "node_id":"IC_kwDODBCWws5COK19",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-18T14:35:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Do you have an \"Enable auto-merge (squash)\" button?\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/169064618-b65958d5-5d5d-4d4d-a222-e25b3b338ebd.png)\r\n\r\nIf so, you can press that and not have to watch it run the tests. If not, I'll press it and try to figure out why you don't see it.",
  "created_at":"2022-05-18T14:23:24Z",
  "id":1130084296,
  "issue":1447,
  "node_id":"IC_kwDODBCWws5DW7fI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-18T14:23:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I just enabled it.",
  "created_at":"2022-05-18T14:49:30Z",
  "id":1130115031,
  "issue":1447,
  "node_id":"IC_kwDODBCWws5DXC_X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-18T14:49:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1448?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1448](https://codecov.io/gh/scikit-hep/awkward/pull/1448?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (db498f1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.57%`.\n> The diff coverage is `67.67%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1448?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `26.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <\u00f8> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvdy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow\\_schema.py](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvd19zY2hlbWEucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9idWZmZXJzLnB5) | `86.13% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jdXB5LnB5) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qYXgucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| ... and [113 more](https://codecov.io/gh/scikit-hep/awkward/pull/1448/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-27T14:23:55Z",
  "id":1111067654,
  "issue":1448,
  "node_id":"IC_kwDODBCWws5COYwG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-17T12:07:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - would the following guarantee that the result does not go away? It's in ROOT src/bindings/pyroot_legacy/_rdf_utils.py\r\n```python\r\nimport numpy\r\n\r\n\r\nclass ndarray(numpy.ndarray):\r\n    \"\"\"\r\n    A wrapper class that inherits from numpy.ndarray and allows to attach the\r\n    result pointer of the `Take` action in an `RDataFrame` event loop to the\r\n    collection of values returned by that action. See\r\n    https://docs.scipy.org/doc/numpy/user/basics.subclassing.html for more\r\n    information on subclassing numpy arrays.\r\n    \"\"\"\r\n    def __new__(cls, numpy_array, result_ptr):\r\n        \"\"\"\r\n        Dunder method invoked at the creation of an instance of this class. It\r\n        creates a numpy array with an `RResultPtr` as an additional\r\n        attribute.\r\n        \"\"\"\r\n        obj = numpy.asarray(numpy_array).view(cls)\r\n        obj.result_ptr = result_ptr\r\n        return obj\r\n\r\n    def __array_finalize__(self, obj):\r\n        \"\"\"\r\n        Dunder method that fills in the instance default `result_ptr` value.\r\n        \"\"\"\r\n        if obj is None: return\r\n        self.result_ptr = getattr(obj, \"result_ptr\", None)\r\n\r\n```",
  "created_at":"2022-04-29T08:05:05Z",
  "id":1113000620,
  "issue":1448,
  "node_id":"IC_kwDODBCWws5CVwqs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T08:05:05Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"That class doesn't do anything to attach itself to a RDataSource by itself, but presumably NumPy arrays require special handling because `np.ndarray` is an extension type. By subclassing it, they've made an equivalent of an `np.ndarray` that would work around any issues due to `np.ndarray` not being an ordinary Python type. Our arrays and Lookup are ordinary Python classes.\r\n\r\nBut you're right that [RNumpyDS](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/inc/RNumpyDS.hxx) is going to have exactly the same problem that we do: the data is owned by a NumPy object, so that NumPy object has to be kept in scope as long as the RNumpyDS is. Here's the pointer:\r\n\r\nhttps://github.com/root-project/root/blob/4f9759c604d05a8304bf0b55f5738a479441e151/bindings/pyroot/pythonizations/inc/RNumpyDS.hxx#L60-L63\r\n\r\nand maybe that `PyObject*` is actually an `ndarray` subclass, rather than NumPy's own `np.ndarray`, for technical reasons, but what's important for us is that they do hold such an object.\r\n\r\nThe RNumpyDS does `Py_INCREF` and `Py_DECREF` the `fPyRVecs` with no special handling for the Python GIL:\r\n\r\nhttps://github.com/root-project/root/blob/4f9759c604d05a8304bf0b55f5738a479441e151/bindings/pyroot/pythonizations/inc/RNumpyDS.hxx#L129-L150\r\n\r\nThere are no other references to `fPyRVecs` in the RNumpyDS implementation. _If_ this is the right way to do it, _then_ we should do the same. Our RDataSources run under the same conditions as RNumpyDS; we should be doing the same memory management.\r\n\r\nIf this is right, then I think that means that ROOT functions that might create or delete RNumpyDS instances are holding the Python GIL. That surprises me, since it would prevent speed-ups in parallel processing. Maybe it's okay because the parallel processing only happens in a fork-join pattern in which the RNumpyDS is never created or destroyed?\r\n\r\n~~It's still worth asking~~ As it turns out, @etejedor has already answered my question here: https://github.com/scikit-hep/awkward-1.0/pull/1446#discussion_r861564862. I'm just getting the messages out of order. Okay, so it is safe to `Py_INCREF` and `Py_DECREF` freely in the constructor and destructor, without any special GIL-handling, because they aren't called from `__release_gil__` functions.",
  "created_at":"2022-04-29T17:12:36Z",
  "id":1113540363,
  "issue":1448,
  "node_id":"IC_kwDODBCWws5CX0cL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T17:12:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - it looks like the failing pre-commit is unrelated to this PR;\r\n```bash\r\nflake8...................................................................Failed\r\n- hook id: flake8\r\n- exit code: 1\r\n\r\nsrc/awkward/config.py:99:5: T201 print found.\r\nsrc/awkward/_v2/_connect/numba/arrayview.py:16:9: T201 print found.\r\nsrc/awkward/_v2/_connect/numba/arrayview.py:17:9: T201 print found.\r\nsrc/awkward/_connect/_numba/arrayview.py:20:9: T201 print found.\r\nsrc/awkward/_connect/_numba/arrayview.py:21:9: T201 print found.\r\n```\r\n",
  "created_at":"2022-05-04T14:08:52Z",
  "id":1117359649,
  "issue":1448,
  "node_id":"IC_kwDODBCWws5CmY4h",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-04T14:08:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"> ```shell\r\n> src/awkward/config.py:99:5: T201 print found.\r\n```\r\n\r\nWe should get rid of anything related to \"config.py\". It's for compiling dependents, which is something we're giving up on on v2.\r\n\r\n> ```shell\r\n> src/awkward/_v2/_connect/numba/arrayview.py:16:9: T201 print found.\r\n> src/awkward/_v2/_connect/numba/arrayview.py:17:9: T201 print found.\r\n> src/awkward/_connect/_numba/arrayview.py:20:9: T201 print found.\r\n> src/awkward/_connect/_numba/arrayview.py:21:9: T201 print found.\r\n> ```\r\n\r\nThere shouldn't be print statements in these files. Remove them.\r\n\r\nHow did they get there and why is this showing up now? I have no idea.",
  "created_at":"2022-05-04T15:04:51Z",
  "id":1117442623,
  "issue":1448,
  "node_id":"IC_kwDODBCWws5CmtI_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-04T15:04:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> ```shell\r\n> ```shell\r\n> src/awkward/config.py:99:5: T201 print found.\r\n> ```\r\n> \r\n> \r\n>     \r\n>       \r\n>     \r\n> \r\n>       \r\n>     \r\n> \r\n>     \r\n>   \r\n> \r\n> \r\n> We should get rid of anything related to \"config.py\". It's for compiling dependents, which is something we're giving up on on v2.\r\n> \r\n> > ```shell\r\n> > src/awkward/_v2/_connect/numba/arrayview.py:16:9: T201 print found.\r\n> > src/awkward/_v2/_connect/numba/arrayview.py:17:9: T201 print found.\r\n> > src/awkward/_connect/_numba/arrayview.py:20:9: T201 print found.\r\n> > src/awkward/_connect/_numba/arrayview.py:21:9: T201 print found.\r\n> > ```\r\n> \r\n> There shouldn't be print statements in these files. Remove them.\r\n> \r\n> How did they get there and why is this showing up now? I have no idea.\r\n> ```\r\nI think, print [here](https://github.com/scikit-hep/awkward-1.0/blob/main/src/awkward/_v2/_connect/numba/arrayview.py#L14-L17) is not ignored anymore:\r\n```python\r\ndef code_to_function(code, function_name, externals=None, debug=False):\r\n    if debug:\r\n        print(\"################### \" + function_name)  # noqa: T001\r\n        print(code)  # noqa: T001\r\n```",
  "created_at":"2022-05-04T17:08:52Z",
  "id":1117597058,
  "issue":1448,
  "node_id":"IC_kwDODBCWws5CnS2C",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-04T17:12:15Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Apparently, what happened is that the number changed from T001 to T201. I would have thought that those numbers wouldn't change\u2014why else would they be short codes like that? Oh well. Since this might be run under different versions of flake8-print, it's probably safest to ignore both:\r\n\r\n```python\r\n# noqa: T001,T201\r\n```\r\n\r\nI don't know what the new \"T001\" is, but we're only losing the protection of this test on a few isolated lines, so it's probably fine.",
  "created_at":"2022-05-04T17:12:42Z",
  "id":1117600365,
  "issue":1448,
  "node_id":"IC_kwDODBCWws5CnTpt",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-05-04T17:12:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Long term, I'd specify `flake8-print>=5` in the `.pre-commit-config.yaml` file, and then drop the `T001` specifier in the ignore - yesqa would detect this and removing it, I think. I'd also think flake8 should warn about an unused ignore, perhaps.",
  "created_at":"2022-05-05T16:10:40Z",
  "id":1118753414,
  "issue":1448,
  "node_id":"IC_kwDODBCWws5CrtKG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T16:10:40Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"In #1464, I'm doing what @henryiii suggested, so the flake8-print comments will need to be \"`T201`\" to be mergeable.",
  "created_at":"2022-05-07T06:43:46Z",
  "id":1120147748,
  "issue":1448,
  "node_id":"IC_kwDODBCWws5CxBkk",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-05-07T06:43:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"replaced by #1474",
  "created_at":"2022-05-17T14:05:12Z",
  "id":1128914545,
  "issue":1448,
  "node_id":"IC_kwDODBCWws5DSd5x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-17T14:05:12Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1449](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2f86ae5) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **increase** coverage by `0.42%`.\n> The diff coverage is `54.62%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [...wkward/\\_v2/operations/convert/ak\\_from\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pzb25fZmlsZS5weQ==) | `76.59% <\u00f8> (\u00f8)` | |\n| [...awkward/\\_v2/operations/convert/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pzb25fbmV3LnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| ... and [108 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1449/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-27T19:08:58Z",
  "id":1111378932,
  "issue":1449,
  "node_id":"IC_kwDODBCWws5CPkv0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T13:13:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski just dropping in after reading the main description.\r\n\r\n`to_json_schema` is a fantastic idea for an addition!\r\n\r\nIs there much precedent / use case for customising `to_list` / `to_json` via behaviors? I assume so if it's important enough to handle during writing, but I'm used to dealing with serialisation cases (non Awkward) where a symmetric to/from pre/post processor is required, rather than a one way transformation.\r\n\r\nAlso, is there a particular reason to choose rapidjson? I recalled seeing a number of benchmarks suggesting `orjson` was reasonably faster for both ser/deser - here are there own numbers, for whatever they're worth https://github.com/ijl/orjson#performance\r\nFWIW I haven't benchmarked to see how much of the `from_json` process is consumed by the JSON parsing vs Awkward Array building, so performance here might not be the most important factor of choosing a JSON lib.\r\n\r\n",
  "created_at":"2022-04-28T07:48:42Z",
  "id":1111861052,
  "issue":1449,
  "node_id":"IC_kwDODBCWws5CRac8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T07:48:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"One important behavioral override is `__array__: \"string\"`:\r\n\r\n```python\r\n>>> array = ak._v2.Array([\"one\", \"two\", \"three\", \"four\", \"five\"])\r\n>>> array.layout\r\n<ListOffsetArray len='5'>\r\n    <parameter name='__array__'>'string'</parameter>\r\n    <offsets><Index dtype='int64' len='6'>[ 0  3  6 11 15 19]</Index></offsets>\r\n    <content><NumpyArray dtype='uint8' len='19'>\r\n        <parameter name='__array__'>'char'</parameter>\r\n        [111 110 101 116 119 111 116 104 114 101 101 102 111 117 114 102 105\r\n         118 101]\r\n    </NumpyArray></content>\r\n</ListOffsetArray>\r\n>>> ak._v2.to_json(array)\r\n'[\"one\",\"two\",\"three\",\"four\",\"five\"]'\r\n```\r\n\r\nHowever, that one was so important that now it has a special implementation path: you can't opt out of `__array__: \"string\"` being JSON-encoded as strings anymore. But in principle, it's a behavioral override, with an `__array__` parameter name and an ak.Array subclass. It would be strange if other behavior overrides are skipped.\r\n\r\nAlso worth mentioning: the `to_list` implementation has changed in such a way that checking the `__array__` parameter for overrides only happens once, not with every array element. So if you don't have any overrides, it's not an _O(n)_ performance cost.\r\n\r\nThere probably ought to be a way to pass in replacement callables for `json.dump` and `json.dumps`, though not orjson because it doesn't provide a `json.dump` function. (I suppose one could be wrapped.) Whether one needs a faster JSON serialization library (and therefore the dependency) would depend on whether it's the bottleneck. The new `to_list` works by creating a whole `content` list before dividing it up into sublists, instead of iterating over the data (because `__getitem__` is very slow for Awkward Arrays: you have to check a lot of things with every invocation that only need to be checked once if you do a tree-node/array at a time). Skipping the Python list intermediate would introduce a much larger bottleneck, and yet making the Python lists might dominate over any JSON serialization anyway. It's not clear that much can be done here, except maybe some special cases.\r\n\r\nThe orjson documentation reminded me that we need to do something about serializing dates. That's a good to-do.\r\n\r\nThe other direction, reading and deserializing JSON, is a completely different story. (One or my favorite realizations is that there's so much asymmetry between reading and writing!) All of the JSON workarounds\u2014nan, infinity, complex numbers, raw bytestrings, and now dates/time differences\u2014can be applied to the Awkward Array after deserialization, so they don't need to slow down the deserialization process. They're also optional, whereas for serialization, something has to be done or we won't fit the format. We'll have to use ArrayBuilder, but it can be ArrayBuilder in C++ because we don't have to think about behavioral overrides.\r\n\r\nI don't know how the orjson plots compare RapidJSON, a C++ library, with libraries that produce Python data. We won't be using it that way: the strings will go directly into ArrayBuilder, without touching Python (and therefore, we'll release the GIL, too). This is also true of the case that's guided by a JSONSchema, which also uses RapidJSON but skips ArrayBuilder's type discovery for some extra speed.\r\n\r\nAt one point, I did a comparison of C++ JSON libraries. The one that I started with and expected to use was simdjson, but immediately ran into portability problems because of its use of SIMD. It turned out that RapidJSON was within a factor of 2 or so, but was very portable, owing to its age/maturity. And then the ArrayBuilder overhead dominated over the actual JSON parsing, so even that didn't matter. In the performance studies that skip ArrayBuilder with a JSONSchema (https://github.com/scikit-hep/awkward-1.0/pull/1165#issuecomment-978691819), RapidJSON is still not the bottleneck. We can't do the other work fast enough to need a faster parser than RapidJSON.\r\n\r\nAlso, RapidJSON supports incremental reading, which is important for very large datasets. A JSON document of floating point values with ~16 digits uses twice as much data as the corresponding Awkward Array that we're reading it into.",
  "created_at":"2022-04-28T12:43:45Z",
  "id":1112157717,
  "issue":1449,
  "node_id":"IC_kwDODBCWws5CSi4V",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T12:43:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I suppose it might be possible, if there are no behavioral overrides other than strings (a common case), to do a `to_buffers` and pass those buffers into a C++ function that reimplements enough of `__getitem__` to do a serialization in C++. That's a possible future enhancement. In v1, the `__getitem__` logic was in C++, so it made sense to do that; now it isn't.\r\n\r\nFor that matter, `Array.__iter__` is painfully slow, and the same C++-side `__getitem__` could be used to generate Python objects from a pybind11-wrapped iterator that maintains state (the buffers from `to_buffers`), if `yield`ing from pybind11 is fast enough to be worthwhile. nanobind might make the difference between whether that's worthwhile or not. (Our use of pybind11 is probably simple enough to switch to nanobind after the v1 code is dropped in December.)",
  "created_at":"2022-04-28T12:53:25Z",
  "id":1112167049,
  "issue":1449,
  "node_id":"IC_kwDODBCWws5CSlKJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T12:53:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It sounds like you've given it a lot of thought, and there's a lot to reply to! In the interim, I can comment on nanobind - I used it temporarily for some fairly simple bindings and found it really nice to use. I was surprised that we were considering it, because when I looked ~ 1mo ago, it didn't support NumPy, but it seems like that's already no longer the case!",
  "created_at":"2022-04-28T13:22:08Z",
  "id":1112197525,
  "issue":1449,
  "node_id":"IC_kwDODBCWws5CSsmV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T13:22:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We had to do workarounds for pybind11's NumPy support, so going forward, I would rather access data buffers on both the C++ and the Python side via borrowed pointers, anyway. But any consideration of nanobind would have to be after we've dropped v1, so that gives us lots of time to think about it.",
  "created_at":"2022-04-28T15:47:13Z",
  "id":1112369239,
  "issue":1449,
  "node_id":"IC_kwDODBCWws5CTWhX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T15:47:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm going to cut it off here, just so that the new `to_json` gets in. `from_json` is currently untouched but accompanied by a `from_json_new`, which will definitely be swapped in: `from_json_new` is _not_ permanent.",
  "created_at":"2022-05-03T16:57:43Z",
  "id":1116331088,
  "issue":1449,
  "node_id":"IC_kwDODBCWws5CidxQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-03T16:57:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Whatever this was, it no longer exists. There is no such variable (and I can't find it in the history, either...).",
  "created_at":"2022-08-15T18:29:55Z",
  "id":1215587055,
  "issue":1450,
  "node_id":"IC_kwDODBCWws5IdGLv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T18:29:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"We don't want to put more burden on authors of behaviors to maintain a list of methods independently of the methods defined on overriding classes, so this list of methods would have to be derived from the `ak._v2.behavior` dict and the `__dict__` of each overriding class in the `__mro__`. So it should be a calculation, similar to the `possible_methods` calculation in your example, but ensuring that nothing has been missed.\r\n\r\nI had been thinking that the Awkward Dask collection would get these methods automatically because it would inherit from the same classes, but I was wrong: the classes that override behaviors are strict subclasses of `ak._v2.Array` and `ak._v2.Record`, but a Dask collection is not a subclass of `ak._v2.Array`. So that doesn't work automatically and you need to explicitly check to see if a potential method really is a method, by looking at the type tracer.\r\n\r\nThe `__dir__` method is already a calculation, to add in the field names that you want to take out.\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/73ea78257d7a42008fd723f7f2632b53acbad0c3/src/awkward/_v2/highlevel.py#L1122-L1137\r\n\r\nFor that reason, maybe it's best to check the `type(tt).__dict__` keys all the way up the `tt` mro until you get to `ak._v2.Array`? I don't think any intermediate classes in a hierarchy can have `__slots__`, but if so, then `__dict__` and `__slots__` may be the only things. The function that computes a list of method names can live in the Awkward codebase, though it would not be a very high-level function.\r\n\r\nVector is a still good test-case for this because its [inheritance is really complicated](https://raw.githubusercontent.com/scikit-hep/vector/main/docs/api/inheritance.svg). Getting that right means it's right!",
  "created_at":"2022-04-28T21:45:09Z",
  "id":1112682040,
  "issue":1452,
  "node_id":"IC_kwDODBCWws5CUi44",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-28T21:45:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"thanks @jpivarski! here's what I've come up with based on your suggestion:\r\n\r\n```python\r\nimport awkward._v2 as ak\r\n\r\ndef possible_methods(tt: ak.Array) -> set[str]:\r\n    mros = type(tt).mro()\r\n    methods = set()\r\n    for entry in mros[: mros.index(ak.Array)]:\r\n        methods |= set([v.__name__ for k, v in vars(entry).items() if callable(v)])\r\n    return methods\r\n```\r\n\r\nWith my muons example I get `{'mass_with'}`, if I call `possible_methods(mu1_wb._meta)`; all good.\r\n\r\nFor testing with `vector`:\r\n```python\r\nimport awkward as ak1\r\nimport vector\r\nvector.register_awkward()\r\na = vector.awk(\r\n    [\r\n        [{\"x\": 1, \"y\": 1.1, \"z\": 0.1}, {\"x\": 2, \"y\": 2.2, \"z\": 0.2}],\r\n        [],\r\n        [{\"x\": 3, \"y\": 3.3, \"z\": 0.3}],\r\n        [\r\n            {\"x\": 4, \"y\": 4.4, \"z\": 0.4},\r\n            {\"x\": 5, \"y\": 5.5, \"z\": 0.5},\r\n            {\"x\": 6, \"y\": 6.6, \"z\": 0.6},\r\n        ],\r\n    ]\r\n)\r\n\r\ndef possible_methods_ak1(tt: ak1.Array) -> set[str]:\r\n    mros = type(tt).mro()\r\n    methods = set()\r\n    for entry in mros[: mros.index(ak1.Array)]:\r\n        methods |= set([v.__name__ for k, v in vars(entry).items() if callable(v)])\r\n    return methods\r\n\r\npossible_methods_ak1(a)\r\n```\r\ngives:\r\n\r\n<details>\r\n<summary>Long output</summary>\r\n<br>\r\n\r\n```\r\n{'VectorArray2D',\r\n 'VectorArray3D',\r\n 'VectorArray4D',\r\n '__getitem__',\r\n '_wrap_result',\r\n 'add',\r\n 'allclose',\r\n 'cross',\r\n 'deltaR',\r\n 'deltaR2',\r\n 'deltaangle',\r\n 'deltaeta',\r\n 'deltaphi',\r\n 'dot',\r\n 'equal',\r\n 'is_antiparallel',\r\n 'is_parallel',\r\n 'is_perpendicular',\r\n 'isclose',\r\n 'not_equal',\r\n 'rotateX',\r\n 'rotateY',\r\n 'rotateZ',\r\n 'rotate_axis',\r\n 'rotate_euler',\r\n 'rotate_nautical',\r\n 'rotate_quaternion',\r\n 'scale',\r\n 'scale2D',\r\n 'scale3D',\r\n 'subtract',\r\n 'to_Vector2D',\r\n 'to_Vector3D',\r\n 'to_Vector4D',\r\n 'to_rhophi',\r\n 'to_rhophieta',\r\n 'to_rhophietat',\r\n 'to_rhophietatau',\r\n 'to_rhophitheta',\r\n 'to_rhophithetat',\r\n 'to_rhophithetatau',\r\n 'to_rhophiz',\r\n 'to_rhophizt',\r\n 'to_rhophiztau',\r\n 'to_xy',\r\n 'to_xyeta',\r\n 'to_xyetat',\r\n 'to_xyetatau',\r\n 'to_xytheta',\r\n 'to_xythetat',\r\n 'to_xythetatau',\r\n 'to_xyz',\r\n 'to_xyzt',\r\n 'to_xyztau',\r\n 'transform2D',\r\n 'transform3D',\r\n 'unit'}\r\n```\r\n\r\n</details>\r\n\r\nI haven't done a detailed comparison but it looks promising.\r\n\r\nDo you think this is going down the right track?",
  "created_at":"2022-05-02T16:27:24Z",
  "id":1115094723,
  "issue":1452,
  "node_id":"IC_kwDODBCWws5Cdv7D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T16:27:24Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Instead of `callable`, I would use `inspect.ismethod`.",
  "created_at":"2022-05-02T16:33:48Z",
  "id":1115101074,
  "issue":1452,
  "node_id":"IC_kwDODBCWws5CdxeS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T16:33:48Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Looks like we lose the ability to use `inspect.ismethod` if we don't actually have an instance.\r\n\r\nusing the type:\r\n```python\r\nIn [131]: inspect.ismethod(type(muons._meta).mass_with)\r\nOut[131]: False\r\n```\r\nusing an instance:\r\n```python\r\nIn [129]: inspect.ismethod(MuonsArray(muons._meta).mass_with)\r\nOut[129]: True\r\n```",
  "created_at":"2022-05-02T16:42:15Z",
  "id":1115108409,
  "issue":1452,
  "node_id":"IC_kwDODBCWws5CdzQ5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T16:42:15Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"This is not surprising, it's at inding time that a method becomes a method (you can call `MuonsArray.mass_with()` if you like, but it will fail if you don't pass the right thing for the first argument). \r\n\r\nA more convoluted form, relying on python conventions:\r\n```\r\nlist(inspect.signature(type(muons._meta).mass_with).parameters)[0] == \"self\"\r\n```",
  "created_at":"2022-05-02T16:49:45Z",
  "id":1115114748,
  "issue":1452,
  "node_id":"IC_kwDODBCWws5Cd0z8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T16:49:45Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Ah I see yeah makes sense. Something this also made me think of: maybe we can try something like below and avoid the derivation of a list-of-all-possible-methods altogether:\r\n```python\r\n# in class Array:\r\ndef __getattr__(self, attr):\r\n    # in the case where attr is not a field let's see if it's a method (behavior path)\r\n    if attr not in (self.fields or []):\r\n        try:\r\n            maybe_method = getattr(array._meta, method_name)\r\n            if inspect.ismethod(maybe_method):\r\n                def wrapper(*args, **kwargs):\r\n                    return self._call_behavior(attr, *args, **kwargs)\r\n                return wrapper\r\n        except AttributeError:\r\n            raise AttributeError(f\"{attr} not in fields.\")\r\n    # if not a behavior try the field access path\r\n    try:\r\n        return self.__getitem__(attr)\r\n    except (IndexError, KeyError):\r\n        raise AttributeError(f\"{attr} not in fields.\")    \r\n\r\n```\r\n",
  "created_at":"2022-05-02T16:54:40Z",
  "id":1115118713,
  "issue":1452,
  "node_id":"IC_kwDODBCWws5Cd1x5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T16:54:56Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Relying on exceptions is another option, yes. It'd be nice to compute the list of methods, though, so we can include them in `dir()`.",
  "created_at":"2022-05-02T16:56:42Z",
  "id":1115120524,
  "issue":1452,
  "node_id":"IC_kwDODBCWws5Cd2OM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T16:56:42Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"For callable vs ismethod: do you need the results to be callable at all? You're wanting `dak.Array` to have the same names in its namespace as `ak.Array`; is it important for that to only include things that can be called? (Because you'll be delaying their actions, and therefore only callables will do? I'm not asking this question because I disagree, but because I'm not sure of the right answer.)\r\n\r\nActually, it is missing some things because of that constraint: it's missing the properties. I know you'll want to include them.\r\n\r\n```python\r\n>>> import awkward as ak1\r\n>>> import vector\r\n>>> vector.register_awkward()\r\n\r\n>>> vector = ak1.Array([{\"x\": 1.1, \"y\": 2.2}], with_name=\"Vector2D\")\r\n>>> vector\r\n<VectorArray2D [{x: 1.1, y: 2.2}] type='1 * Vector2D[\"x\": float64, \"y\": float64]'>\r\n\r\n>>> vector.rho\r\n<Array [2.46] type='1 * float64'>\r\n>>> callable(vector.rho)\r\nFalse\r\n>>> import inspect\r\n>>> inspect.ismethod(vector.rho)\r\nFalse\r\n```\r\n\r\nThe list from Vector didn't include all of the properties that a 3D vector would have: `x`, `y`, `z` (even though these are fields, they're also properties, and the properties go through `__getitem__` to avoid an infinite recursion), `rho`, `phi`, `theta`, `eta` for all of the coordinates. There might be some properties that are not coordinates.\r\n\r\nTo help you check your results, here's a full list of what 2D, 3D, 4D vectors (with and without momentum names) add to an array:\r\n\r\nhttps://github.com/scikit-hep/vector/blob/b9c60a8320b39812354c48182281480087565f5e/src/vector/_methods.py#L130-L1415\r\n\r\nThese \"protocol\" classes are nothing but interface, which should make it easier to scan or convert into a set to compare to what your `possible_methods_ak1` generates.\r\n\r\nAnother question: would you want to include or exclude staticmethod/classmethod?",
  "created_at":"2022-05-02T17:16:22Z",
  "id":1115139952,
  "issue":1452,
  "node_id":"IC_kwDODBCWws5Cd69w",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T17:16:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I'll just say that attributes and class method don't feel like things a dask collection normally does.",
  "created_at":"2022-05-02T18:16:15Z",
  "id":1115209717,
  "issue":1452,
  "node_id":"IC_kwDODBCWws5CeL_1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T18:16:15Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"It sounds like we provided a solution to this that you integrated into dask-awkward. Is that right?\r\n\r\nIf I'm wrong in closing this, just say so and I'll reopen it, and then we'll figure out what to do with it.",
  "created_at":"2022-11-10T22:37:37Z",
  "id":1310989982,
  "issue":1452,
  "node_id":"IC_kwDODBCWws5OJB6e",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-10T22:37:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I guess this is what you mean:\r\n\r\n```python\r\n>>> record = ak._v2.Record({\"x\": 1, \"y\": [1, 2, 3], \"z\": \"three\"})\r\n>>> record\r\n<Record {x: 1, y: [1, ..., 3], z: 'three'} type='{x: int64, y: var * int64,...'>\r\n>>> ak._v2.from_buffers(*ak._v2.to_buffers(record))\r\n<StringBehavior ['x', 'y', 'z'] type='3 * string'>\r\n```\r\n\r\nThe `to_buffers` function didn't recognize the Record, iterated over it, which means its dict-like keys, and turned that into an Array to convert into buffers.\r\n\r\nYes, that's definitely wrong and perhaps the easiest thing to do is to prevent Record from being used in `to_buffers`.\r\n\r\nIt looks like that's supposed to happen:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/2ee6e64097015d0fd343f247326e82ca10718af5/src/awkward/_v2/operations/convert/ak_to_buffers.py#L129-L131\r\n\r\nIt's actually `to_layout` that's broken:\r\n\r\n```python\r\n>>> ak._v2.to_layout(record, allow_record=False).tolist()\r\n['x', 'y', 'z']\r\n```\r\n\r\n`allow_record=False` should mean \"raise a TypeError if you get a Record.\"\r\n\r\nHere's the problem:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/2ee6e64097015d0fd343f247326e82ca10718af5/src/awkward/_v2/operations/convert/ak_to_layout.py#L51-L63\r\n\r\nThe low-level `ak._v2.record.Record` check is correct in saying, \"if you're a Record then { if not `allow_record`, FAIL, else good things }\", whereas the high-level `ak._v2.highlevel.Record` is saying, \"if `allow_record` and you're a Record then { ... }\". So instead of failing, it keeps going until it gets to the case that handles general iterables:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/2ee6e64097015d0fd343f247326e82ca10718af5/src/awkward/_v2/operations/convert/ak_to_layout.py#L105-L111\r\n\r\nand a Record is iterable (returning its keys, as a Mapping). The fix is to make `to_layout`'s high-level section look like its low-level section.",
  "created_at":"2022-04-29T16:47:30Z",
  "id":1113519044,
  "issue":1453,
  "node_id":"IC_kwDODBCWws5CXvPE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T16:47:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This same mistake was made in v1, but it was made for both the low-level and high-level records:\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/2ee6e64097015d0fd343f247326e82ca10718af5/src/awkward/operations/convert.py#L1885-L1886\r\n\r\nand\r\n\r\nhttps://github.com/scikit-hep/awkward-1.0/blob/2ee6e64097015d0fd343f247326e82ca10718af5/src/awkward/operations/convert.py#L1897-L1898\r\n\r\nThis issue should cover both v1 and v2, and it will be super-easy. Maybe I'll do it before I finish answering #1454.",
  "created_at":"2022-04-29T18:04:37Z",
  "id":1113584167,
  "issue":1453,
  "node_id":"IC_kwDODBCWws5CX_In",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T18:04:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1455](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5a41e55) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **increase** coverage by `1.24%`.\n> The diff coverage is `59.04%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `82.47% <\u00f8> (+0.97%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19qYXgucHk=) | `33.33% <0.00%> (-41.67%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/describe/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvZGVzY3JpYmUvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (-2.50%)` | :arrow_down: |\n| ... and [105 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1455/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-29T18:04:35Z",
  "id":1113584137,
  "issue":1455,
  "node_id":"IC_kwDODBCWws5CX_IJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T18:04:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1456](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1fa2155) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/edfce3800ccd1f8b90734cf9594c3b5c117441ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edfce38) will **increase** coverage by `1.27%`.\n> The diff coverage is `59.89%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `71.91% <\u00f8> (-1.69%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `82.47% <\u00f8> (+0.97%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `85.36% <\u00f8> (+0.20%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (+23.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2l0ZXIucHk=) | `93.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/convert/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pheC5weQ==) | `50.00% <0.00%> (-25.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/convert/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha190b19jdXB5LnB5) | `33.33% <0.00%> (+23.95%)` | :arrow_up: |\n| ... and [109 more](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1456/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-04-29T20:29:11Z",
  "id":1113698608,
  "issue":1456,
  "node_id":"IC_kwDODBCWws5CYbEw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-04-29T20:29:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1457?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1457](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1457?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4d2b9a6) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.02%`.\n> The diff coverage is `0.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1457?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1457/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n",
  "created_at":"2022-05-02T21:42:35Z",
  "id":1115398760,
  "issue":1457,
  "node_id":"IC_kwDODBCWws5Ce6Jo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T21:42:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1458](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (25daa8f) into [main](https://codecov.io/gh/scikit-hep/awkward-1.0/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.01%`.\n> The diff coverage is `62.96%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `67.75% <0.00%> (-0.75%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `85.71% <50.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `82.37% <75.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `85.45% <75.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.67% <80.00%> (-0.02%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `72.37% <85.71%> (+0.38%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.14% <85.71%> (+0.11%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward-1.0/pull/1458/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `82.15% <100.00%> (+0.12%)` | :arrow_up: |\n",
  "created_at":"2022-05-02T22:21:23Z",
  "id":1115427682,
  "issue":1458,
  "node_id":"IC_kwDODBCWws5CfBNi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-02T22:21:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"(btw sorry for the poor video quality, but I had to compress it in order to upload it)",
  "created_at":"2022-05-05T07:41:28Z",
  "id":1118259966,
  "issue":1459,
  "node_id":"IC_kwDODBCWws5Cp0r-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T07:41:28Z",
  "user":"MDQ6VXNlcjQzODgxODAw"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Unlike NumPy, Awkward array isn't guaranteed to preserve the original values of masked elements. \r\n\r\nAs to the histogram results, I'm not sure that `np.histogram` supports masked arrays at the moment #832. I suspect you will want to first ravel the contents e.g. with `np.ravel`.\r\n\r\n## Technical Explanation :microscope:  \r\nThe reason for this is that there are several representations of missing values in Awkward. Some of them (`BitMaskedArray` / `ByteMaskedArray`) _mask_ elements, meaning that `len(array) == len(mask)`, whereas others _index_ elements (`IndexedOptionArray`, where `len(array)` may not equal `len(index)`.\r\n\r\nThe consequence of having an indexed option type is that by masking an array you are _not_ guaranteed to later be able to recover the masked values. \r\n\r\n",
  "created_at":"2022-05-05T08:08:20Z",
  "id":1118281314,
  "issue":1459,
  "node_id":"IC_kwDODBCWws5Cp55i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T08:08:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Hej Angus, thank you very much for the quick reply. \r\n\r\n> Awkward array isn't guaranteed to preserve the original values of masked elements.\r\n\r\nOkay, this is something I expected already.  \r\n\r\n> I'm not sure that np.histogram supports masked arrays at the moment\r\n\r\nOkay, thanks. Yes the current behavior is a bit funky. At least none of us expected this behavior. Okay then I will warn our collaboration about it. Thank you very much for the quick help.",
  "created_at":"2022-05-05T08:32:42Z",
  "id":1118300247,
  "issue":1459,
  "node_id":"IC_kwDODBCWws5Cp-hX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T08:32:42Z",
  "user":"MDQ6VXNlcjQzODgxODAw"
 },
 {
  "author_association":"NONE",
  "body":"FYI: I think you mean `ak.ravel` before converting to numpy, is not it? At least `np.ravel` is not doing anything on the masked array as my data is already flat. ",
  "created_at":"2022-05-05T09:14:14Z",
  "id":1118339337,
  "issue":1459,
  "node_id":"IC_kwDODBCWws5CqIEJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T09:14:14Z",
  "user":"MDQ6VXNlcjQzODgxODAw"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"`np.ravel` invokes `ak.ravel`, which does two things - it flattens _and_ it drops None values. Both are generally useful when filling histograms. \r\n\r\nHowever, in your case, the array _is_ a `MaskedArray` after you call `to_numpy`, so this wouldn't happen.\r\n\r\nIn general I suggest using the NumPy API unless you need an Awkward function, but cases like this are a bit special, and have given me something to think about\r\n",
  "created_at":"2022-05-05T09:22:19Z",
  "id":1118346278,
  "issue":1459,
  "node_id":"IC_kwDODBCWws5CqJwm",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-05-05T09:25:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"If you're happy with the solutions posed here, then I shall close the issue :)",
  "created_at":"2022-05-05T09:45:05Z",
  "id":1118365565,
  "issue":1459,
  "node_id":"IC_kwDODBCWws5CqOd9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T09:45:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Sure, thanks for your help. I think the issue is more related to numpy showing this unexpected behavior, Though I think it is quite a pitfall and a bit worrisome if you are doing simulations, working with uproot etc.  ",
  "created_at":"2022-05-05T10:46:37Z",
  "id":1118412457,
  "issue":1459,
  "node_id":"IC_kwDODBCWws5CqZ6p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T10:46:37Z",
  "user":"MDQ6VXNlcjQzODgxODAw"
 },
 {
  "author_association":"MEMBER",
  "body":"(Thanks @agoose77 for resolving this!)\r\n\r\n> I think the issue is more related to numpy showing this unexpected behavior\r\n\r\nIt took me a while to figure out what, exactly, is happening here, but yes: I would call this a NumPy quirk. NumPy's MaskedArray is (in my opinion) not well thought-through, and not very widely used. This case shows that all you have to do to expose hidden/uninitialized/undefined data is to say `t.data`. MaskedArray is considering the `t.mask` as some optional \"maybe you want it, maybe you don't\" kind of thing, whereas a `None` in an Awkward Array means \"there is no value at this index.\" If it happens to be implemented with a mask (BitMaskedArray or ByteMaskedArray), then the value in the data buffer behind that mask is random, uninitialized junk. You're not supposed to look behind the mask.\r\n\r\nI just tried it out\u2014I think this is an unreasonable thing for `np.histogram` (or possibly `np.ma.MaskedArray.__array__`) to do:\r\n\r\n```python\r\n>>> # This is fine: all of the values go into the histogram.\r\n>>> x = np.ma.MaskedArray([1, 2, 3, 4, 5], None)\r\n>>> np.histogram(x, bins=5, range=(0.5, 5.5))\r\n(array([1, 1, 1, 1, 1]), array([0.5, 1.5, 2.5, 3.5, 4.5, 5.5]))\r\n\r\n>>> # Yuck! 2, 3, and 4 are supposed to be hidden/not there!\r\n>>> y = np.ma.MaskedArray([1, 2, 3, 4, 5], [False, True, True, True, False])\r\n>>> np.histogram(y, bins=5, range=(0.5, 5.5))\r\n(array([1, 1, 1, 1, 1]), array([0.5, 1.5, 2.5, 3.5, 4.5, 5.5]))\r\n```\r\n\r\nAs a rough edge, I can see two possibilities: one is to use [hist](https://github.com/scikit-hep/hist) for histogramming, which recognizes Awkward Arrays so that you don't have to cast them as NumPy and get the weird NumPy behavior. It will also `ak.revel` it for you.\r\n\r\nAnother is that we could change `ak.to_numpy` to explicitly set uninitialized data in the output to an explicit value, perhaps the MaskedArray's `fill_value` (default is 999999). Instead of constructing it with `numpy.empty`, we'd be constructing it with `numpy.full` and give it the fill value.\r\n\r\nHere in v1:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/f00775803a5568efb0a8e2dae3b1a4f23228fa40/src/awkward/operations/convert.py#L287\r\n\r\nAnd here in v2 (although I just noticed that we ought to implement [ByteMaskedArray._to_numpy](https://github.com/scikit-hep/awkward/blob/f00775803a5568efb0a8e2dae3b1a4f23228fa40/src/awkward/_v2/contents/bytemaskedarray.py#L929-L930) with directly creating the MaskedArray; going through IndexedOptionArray is pointless extra computation):\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/f00775803a5568efb0a8e2dae3b1a4f23228fa40/src/awkward/_v2/contents/indexedoptionarray.py#L1532",
  "created_at":"2022-05-05T15:17:19Z",
  "id":1118683854,
  "issue":1459,
  "node_id":"IC_kwDODBCWws5CrcLO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T15:17:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"If it's floating point, we can turn the missing values into `nan`. If they're integers... I don't think we want to put in `maxint` or anything. We also don't want to change types to float.\r\n\r\nMaybe we should take `fill_value` as an argument. We can add new arguments to the NumPy functions we overload. The default `fill_value` could do `nan`/`maxint` and allow users to put in something else.",
  "created_at":"2022-05-05T17:05:25Z",
  "id":1118841806,
  "issue":1460,
  "node_id":"IC_kwDODBCWws5CsCvO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T17:05:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"That's an idea! I also wonder if we want to emulate NumPy here? If so, we would want to only eliminate `None` at the outermost lists, and keep the innermost option type. ",
  "created_at":"2022-05-05T18:05:18Z",
  "id":1118892468,
  "issue":1460,
  "node_id":"IC_kwDODBCWws5CsPG0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T18:05:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh wait, you mean this:\r\n\r\n```python\r\n>>> np.ravel(np.ma.MaskedArray([1, 2, 3, 4, 5], [False, True, True, True, False]))\r\nmasked_array(data=[1, --, --, --, 5],\r\n             mask=[False,  True,  True,  True, False],\r\n       fill_value=999999)\r\n```\r\n\r\nI was under the (wrong) impression that `np.ravel` is removing the mask but leaving in the `maskedarray.data`, which for us would be uninitialized junk, so we'd have to set it to something. But that's not what `np.ravel` does: it leaves the option-type in.\r\n\r\nTechnically, the option-type of a MaskedArray is immediately above the primitive type, regardless of whether that's at top-level or not.\r\n\r\nLeaving that option-type would not be good for people who want to use `np.ravel` to flatten data for a plot. We'd have to go back to recommending `ak.flatten` with `axis=None`.\r\n\r\nMaskedArray's semantics are not as well-established as the rest of NumPy's. (See how often array library designers, following NumPy, emulate `np.ma.MaskedArray` as well as `np.ndarray`.) I don't think it's as necessary for us to follow what MaskedArray does as what core NumPy does. For instance, our missing values are not `np.ma.masked` or similar.\r\n\r\nI'm not really sure. I don't have a strong sense of what users of `np.ravel` would expect in a situation like this.",
  "created_at":"2022-05-05T18:18:19Z",
  "id":1118905456,
  "issue":1460,
  "node_id":"IC_kwDODBCWws5CsSRw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T18:18:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The failure is the T001 \u2192 T201 code change. Can we set flake8-print to \"> 5\" here?",
  "created_at":"2022-05-05T17:34:15Z",
  "id":1118866318,
  "issue":1462,
  "node_id":"IC_kwDODBCWws5CsIuO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-05T17:34:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"When #1464 is done, we can merge this with main and then it will work.",
  "created_at":"2022-05-07T06:42:46Z",
  "id":1120147614,
  "issue":1462,
  "node_id":"IC_kwDODBCWws5CxBie",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-07T06:42:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1462?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1462](https://codecov.io/gh/scikit-hep/awkward/pull/1462?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (84a5acb) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.47%`.\n> The diff coverage is `50.90%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1462?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [...wkward/\\_v2/operations/convert/ak\\_from\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pzb25fZmlsZS5weQ==) | `76.59% <\u00f8> (\u00f8)` | |\n| [...awkward/\\_v2/operations/convert/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pzb25fbmV3LnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.11% <15.49%> (-6.49%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.79% <42.85%> (-1.71%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <70.00%> (+1.84%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.01% <71.42%> (+2.14%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `85.83% <75.00%> (+0.46%)` | :arrow_up: |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward/pull/1462/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-07T17:39:42Z",
  "id":1120248741,
  "issue":1462,
  "node_id":"IC_kwDODBCWws5CxaOl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-07T17:39:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1464?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1464](https://codecov.io/gh/scikit-hep/awkward/pull/1464?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6480d34) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.47%`.\n> The diff coverage is `50.90%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1464?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [...wkward/\\_v2/operations/convert/ak\\_from\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pzb25fZmlsZS5weQ==) | `76.59% <\u00f8> (\u00f8)` | |\n| [...awkward/\\_v2/operations/convert/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pzb25fbmV3LnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.11% <15.49%> (-6.49%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.79% <42.85%> (-1.71%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <70.00%> (+1.84%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.01% <71.42%> (+2.14%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `85.83% <75.00%> (+0.46%)` | :arrow_up: |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward/pull/1464/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-07T06:53:42Z",
  "id":1120149129,
  "issue":1464,
  "node_id":"IC_kwDODBCWws5CxB6J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-07T06:53:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1465?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1465](https://codecov.io/gh/scikit-hep/awkward/pull/1465?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3a676f1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.47%`.\n> The diff coverage is `50.90%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1465?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [...wkward/\\_v2/operations/convert/ak\\_from\\_json\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pzb25fZmlsZS5weQ==) | `76.59% <\u00f8> (\u00f8)` | |\n| [...awkward/\\_v2/operations/convert/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvY29udmVydC9ha19mcm9tX2pzb25fbmV3LnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.11% <15.49%> (-6.49%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.79% <42.85%> (-1.71%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <70.00%> (+1.84%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.01% <71.42%> (+2.14%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `85.83% <75.00%> (+0.46%)` | :arrow_up: |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward/pull/1465/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-09T20:24:35Z",
  "id":1121542239,
  "issue":1465,
  "node_id":"IC_kwDODBCWws5C2WBf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-09T20:24:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1467?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1467](https://codecov.io/gh/scikit-hep/awkward/pull/1467?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (49e45a3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.47%`.\n> The diff coverage is `66.61%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1467?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <\u00f8> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvdy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow\\_schema.py](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvd19zY2hlbWEucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9idWZmZXJzLnB5) | `86.13% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jdXB5LnB5) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qYXgucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uX25ldy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9udW1weS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| ... and [109 more](https://codecov.io/gh/scikit-hep/awkward/pull/1467/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-13T17:34:36Z",
  "id":1126286291,
  "issue":1467,
  "node_id":"IC_kwDODBCWws5DIcPT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-13T17:34:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1468?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1468](https://codecov.io/gh/scikit-hep/awkward/pull/1468?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c74ecda) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.47%`.\n> The diff coverage is `70.22%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1468?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <\u00f8> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvdy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow\\_schema.py](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvd19zY2hlbWEucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9idWZmZXJzLnB5) | `86.13% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jdXB5LnB5) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qYXgucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uX25ldy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9udW1weS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| ... and [109 more](https://codecov.io/gh/scikit-hep/awkward/pull/1468/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-13T18:55:21Z",
  "id":1126354374,
  "issue":1468,
  "node_id":"IC_kwDODBCWws5DIs3G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-13T19:12:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"There were fewer of those than I thought there was going to be.",
  "created_at":"2022-05-13T19:04:21Z",
  "id":1126360420,
  "issue":1468,
  "node_id":"IC_kwDODBCWws5DIuVk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-13T19:04:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1469?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1469](https://codecov.io/gh/scikit-hep/awkward/pull/1469?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (672fe12) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.44%`.\n> The diff coverage is `70.19%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1469?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <\u00f8> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvdy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow\\_schema.py](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvd19zY2hlbWEucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9idWZmZXJzLnB5) | `86.13% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jdXB5LnB5) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qYXgucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uX25ldy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9udW1weS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| ... and [110 more](https://codecov.io/gh/scikit-hep/awkward/pull/1469/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-13T21:05:43Z",
  "id":1126509702,
  "issue":1469,
  "node_id":"IC_kwDODBCWws5DJSyG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-13T21:05:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1470?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1470](https://codecov.io/gh/scikit-hep/awkward/pull/1470?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1203283) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.44%`.\n> The diff coverage is `70.24%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1470?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <\u00f8> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYmFja2VuZC5weQ==) | `10.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvdy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow\\_schema.py](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvd19zY2hlbWEucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9idWZmZXJzLnB5) | `86.13% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jdXB5LnB5) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qYXgucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uX25ldy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9udW1weS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| ... and [110 more](https://codecov.io/gh/scikit-hep/awkward/pull/1470/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-13T21:29:15Z",
  "id":1126523525,
  "issue":1470,
  "node_id":"IC_kwDODBCWws5DJWKF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-13T21:29:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Welcome, @ManasviGoyal! Sorry that I didn't get to this on the weekend. MSBuild seems to be complaining about parallel compilation with `-j8`, which might have a different switch name. Here's where it is set:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/405c4d492298d262d7278d109b10891aa95448b1/setup.py#L135-L136\r\n\r\nSo you could work around it by explicitly setting a `CMAKE_BUILD_PARALLEL_LEVEL` environment variable, but if you know how to configure the number of parallel processors for compilations in Windows, could you put in a special case?\r\n\r\nWe put Windows-specific build options in this if block:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/405c4d492298d262d7278d109b10891aa95448b1/setup.py#L113\r\n\r\nThanks!",
  "created_at":"2022-05-16T19:45:32Z",
  "id":1128067716,
  "issue":1471,
  "node_id":"IC_kwDODBCWws5DPPKE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-16T19:45:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thank you @jpivarski.  I'll try to configure it like you mentioned and will Iet you know in case I face any issues. ",
  "created_at":"2022-05-17T09:42:21Z",
  "id":1128652648,
  "issue":1471,
  "node_id":"IC_kwDODBCWws5DRd9o",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-05-17T09:42:21Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"if i add `/p:CL_MPCount=1` instead of `-j` it works for me.",
  "created_at":"2022-05-23T08:13:07Z",
  "id":1134333516,
  "issue":1471,
  "node_id":"IC_kwDODBCWws5DnI5M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-23T08:13:07Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"There was a problem in creating symlinks in Windows :\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\mgman\\Downloads\\IRIS HEP\\awkward-1.0\\localbuild.py\", line 158, in <module>\r\n    os.symlink(where, newfile)\r\nOSError: [WinError 1314] A required privilege is not held by the client: '..\\\\..\\\\src\\\\awkward\\\\behaviors\\\\categorical.py' -> 'awkward\\\\behaviors\\\\categorical.py'\r\n``` \r\nThis operation requires administrative privileges. ",
  "created_at":"2022-05-23T08:35:11Z",
  "id":1134359696,
  "issue":1471,
  "node_id":"IC_kwDODBCWws5DnPSQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-23T08:35:11Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"Symlinks can be replaced with copies (`ln -s` \u2192 `cp`), but if so, you'll have to run `localbuild.py` after every code change, including Python code.\r\n\r\n(At one point, the script copied, but it was switched to symlinks for convenience. If you switch it to copies, it should be on Windows only.)",
  "created_at":"2022-05-23T09:12:11Z",
  "id":1134401989,
  "issue":1471,
  "node_id":"IC_kwDODBCWws5DnZnF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-23T09:12:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm replacing this issue with #1599, which is to say, we'll be removing localbuild.py instead of getting it fixed on Windows.",
  "created_at":"2022-08-15T19:47:03Z",
  "id":1215698759,
  "issue":1471,
  "node_id":"IC_kwDODBCWws5IdhdH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T19:47:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi @ianna! I have added a standalone test for Panel implementation using the vector approach. For `getitem_at_nowrap()`, I have assumed that the size of all panels is same and equal to the number reserved initially. But I have also added the function for the case where the size of each panel is different (it is commented out). There is some issue with the `concatenate()` function and it is not able to access `ptr_` and stops after copying (I think it might be because of the default deleter, not sure). Please check. ",
  "created_at":"2022-06-06T09:22:20Z",
  "id":1147243075,
  "issue":1472,
  "node_id":"IC_kwDODBCWws5EYYpD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-06T09:22:20Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"Same question: is this superseded by #1494? I want to know which PRs to pay attention to because they're intended to be merged.",
  "created_at":"2022-06-30T12:59:29Z",
  "id":1171189449,
  "issue":1472,
  "node_id":"IC_kwDODBCWws5Fzu7J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-30T12:59:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Same question: is this superseded by #1494? I want to know which PRs to pay attention to because they're intended to be merged.\r\n\r\nYes. It is no longer needed since we switched to the header only implementation. I'll close this too.",
  "created_at":"2022-06-30T13:04:46Z",
  "id":1171194693,
  "issue":1472,
  "node_id":"IC_kwDODBCWws5FzwNF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-30T13:04:46Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1474?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1474](https://codecov.io/gh/scikit-hep/awkward/pull/1474?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6c270d5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/5a783052064f644e39cbb2adcba3bfc95e9d333a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5a78305) will **decrease** coverage by `0.38%`.\n> The diff coverage is `5.10%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1474?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1474/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `26.33% <0.00%> (-0.32%)` | :arrow_down: |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1474/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1474/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1474/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `81.83% <25.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1474/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9yZGF0YWZyYW1lLnB5) | `42.85% <42.85%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1474/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvX19pbml0X18ucHk=) | `100.00% <100.00%> (\u00f8)` | |\n",
  "created_at":"2022-05-17T14:15:11Z",
  "id":1128926565,
  "issue":1474,
  "node_id":"IC_kwDODBCWws5DSg1l",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-16T16:12:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I think, I've addressed all the issues. As discussed, the Awkward array types will be a separate PR. Please, have a look when you have time. Thanks!",
  "created_at":"2022-06-16T10:32:05Z",
  "id":1157503290,
  "issue":1474,
  "node_id":"IC_kwDODBCWws5E_hk6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-16T10:32:05Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Very nice! I just have a few changes requested inline, and also this one:\r\n> \r\n> What was the name of the header-only library directory that @ManasviGoyal is filling? Is it `src/awkward/_v2/header-only`? Could we put `ak_array_builders.h` there?\r\n> \r\n> ```\r\n> src/awkward/_v2/header-only/rdataframe_jagged_builders.h\r\n> ```\r\n> \r\n> Also focusing the name of the file on what it does: it makes jaggedN arrays of numbers for RDataFrame.\r\n\r\nThanks! All done. \r\n\r\nThe file is moved to:\r\n```\r\nsrc/awkward/cpp-headers/rdataframe_jagged_builders.h\r\n```",
  "created_at":"2022-06-16T15:55:47Z",
  "id":1157836849,
  "issue":1474,
  "node_id":"IC_kwDODBCWws5FAzAx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-16T15:55:47Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - checked after the merge - all the links work as expected!",
  "created_at":"2022-05-18T17:52:52Z",
  "id":1130316449,
  "issue":1475,
  "node_id":"IC_kwDODBCWws5DX0Kh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-18T17:52:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1476?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1476](https://codecov.io/gh/scikit-hep/awkward/pull/1476?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (721f523) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.23%`.\n> The diff coverage is `73.86%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `87.02% <88.09%> (+37.87%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcGFycXVldC5weQ==) | `51.02% <95.23%> (+3.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [...awkward/\\_v2/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWV0YWRhdGFfZnJvbV9wYXJxdWV0LnB5) | `100.00% <100.00%> (+68.42%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| ... and [19 more](https://codecov.io/gh/scikit-hep/awkward/pull/1476/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-18T18:08:18Z",
  "id":1130342525,
  "issue":1476,
  "node_id":"IC_kwDODBCWws5DX6h9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T17:17:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"AK101: `raise Exception` \u2192 raise `ak._v2._util.error(Exception)`",
  "created_at":"2022-05-19T14:03:37Z",
  "id":1131734173,
  "issue":1476,
  "node_id":"IC_kwDODBCWws5DdOSd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-19T14:03:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> AK101: raise Exception \u2192 raise ak._v2._util.error(Exception)\r\n\r\nNot too worried about the lint for the moment :)\r\n\r\nMore worried about [this kind of fudge](https://github.com/scikit-hep/awkward/pull/1476/files#diff-847463b485f259f948720b1a228edea9ec8757bd4d7a1a7aa4048b092ffda326R236).\r\n",
  "created_at":"2022-05-19T16:25:58Z",
  "id":1131930897,
  "issue":1476,
  "node_id":"IC_kwDODBCWws5Dd-UR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-19T16:25:58Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski , ready for you to have a look at this, so we can discuss.\r\n\r\nTwo outstanding issues I haven't addressed:\r\n- what happens when you have one Record from each row-group. I suppose this is an array, but exactly how to concat is different\r\n- I am not checking the column names reported in the metadata, as I'm not convinced that the writing arm is producing the right thing. We should come up with concrete tests to make certain.",
  "created_at":"2022-06-03T20:23:18Z",
  "id":1146332757,
  "issue":1476,
  "node_id":"IC_kwDODBCWws5EU6ZV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-03T20:23:18Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"fixed in https://github.com/scikit-hep/awkward/pull/1474/commits/10638128f0a1be9546cf297dd4f724571549a8a1",
  "created_at":"2022-05-20T10:02:14Z",
  "id":1132718710,
  "issue":1477,
  "node_id":"IC_kwDODBCWws5Dg-p2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-20T10:02:14Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"That's great! It's that checkout in a PR? If so, will that PR close this issue when it's closed?",
  "created_at":"2022-05-20T12:04:46Z",
  "id":1132821047,
  "issue":1477,
  "node_id":"IC_kwDODBCWws5DhXo3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-20T12:04:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> That's great! It's that checkout in a PR? If so, will that PR close this issue when it's closed?\r\n\r\nThe opposite. I linked the issue to the PR. The issue will be closed when the PR is merged. I'm tempted to merge the PR because the bug affects `to_rdataframe`. Or I can open a new small PR with the bug fix :-)",
  "created_at":"2022-05-20T13:08:49Z",
  "id":1132881867,
  "issue":1477,
  "node_id":"IC_kwDODBCWws5DhmfL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-20T13:11:55Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"After the fact, it's not necessary. Some of my PRs have been tiny, just to go through the tests before modifying the `main` branch. I just want to be sure that the bookkeeping is handled so that I don't think this is an open issue later.\r\n\r\nThanks for fixing it!",
  "created_at":"2022-05-20T14:11:22Z",
  "id":1132945866,
  "issue":1477,
  "node_id":"IC_kwDODBCWws5Dh2HK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-20T14:11:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"fixed in https://github.com/scikit-hep/awkward/pull/1478",
  "created_at":"2022-05-31T19:26:09Z",
  "id":1142557468,
  "issue":1477,
  "node_id":"IC_kwDODBCWws5EGgsc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-31T19:26:09Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This closes https://github.com/scikit-hep/awkward/issues/1477",
  "created_at":"2022-05-20T13:45:54Z",
  "id":1132920401,
  "issue":1478,
  "node_id":"IC_kwDODBCWws5Dhv5R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-20T13:45:54Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1478?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1478](https://codecov.io/gh/scikit-hep/awkward/pull/1478?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2837e09) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.07%`.\n> The diff coverage is `69.40%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1478?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `26.65% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <\u00f8> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvdy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow\\_schema.py](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvd19zY2hlbWEucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9idWZmZXJzLnB5) | `86.13% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jdXB5LnB5) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qYXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uX25ldy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| ... and [125 more](https://codecov.io/gh/scikit-hep/awkward/pull/1478/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-20T13:52:46Z",
  "id":1132927017,
  "issue":1478,
  "node_id":"IC_kwDODBCWws5Dhxgp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-20T16:34:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - please, have a look when you have time. Thanks!",
  "created_at":"2022-05-20T16:07:44Z",
  "id":1133077141,
  "issue":1478,
  "node_id":"IC_kwDODBCWws5DiWKV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-20T16:07:44Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - please, check when you have time. Thanks!",
  "created_at":"2022-05-30T13:32:27Z",
  "id":1141165964,
  "issue":1478,
  "node_id":"IC_kwDODBCWws5EBM-M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-30T13:32:27Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Great! It's a good start. Thanks. Please, see my comments inlined. I think, you can use a raw pointer for now `Panel<T>* ptr_;` instead of `unique_ptr<T> ptr_;`. Then wrap it as unique later. There are a few minor comments about style. Thanks!\r\n\r\nSure. I'll make the required changes. Thank you.",
  "created_at":"2022-05-25T16:15:03Z",
  "id":1137490103,
  "issue":1479,
  "node_id":"IC_kwDODBCWws5DzLi3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-25T16:15:03Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1479?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1479](https://codecov.io/gh/scikit-hep/awkward/pull/1479?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a3cfca2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `55.04%`.\n> The diff coverage is `27.20%`.\n\n> :exclamation: Current head a3cfca2 differs from pull request most recent head d7d7fda. Consider uploading reports for the commit d7d7fda to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `27.32% <0.00%> (-69.44%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `13.04% <\u00f8> (-75.37%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `7.50% <0.00%> (-55.26%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `13.26% <0.00%> (-75.20%)` | :arrow_down: |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `5.61% <0.00%> (-79.09%)` | :arrow_down: |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `16.55% <0.00%> (-65.52%)` | :arrow_down: |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `36.55% <0.00%> (-40.69%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYWxsLnB5) | `16.66% <0.00%> (\u00f8)` | |\n| ... and [249 more](https://codecov.io/gh/scikit-hep/awkward/pull/1479/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-28T05:39:12Z",
  "id":1140179313,
  "issue":1479,
  "node_id":"IC_kwDODBCWws5D9cFx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-31T21:36:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Question: is this superseded by #1494? If so, let's close this PR. Thanks!",
  "created_at":"2022-06-30T12:58:21Z",
  "id":1171188374,
  "issue":1479,
  "node_id":"IC_kwDODBCWws5FzuqW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-30T12:58:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Question: is this superseded by #1494? If so, let's close this PR. Thanks!\r\n\r\nYes. I'll close it.",
  "created_at":"2022-06-30T13:02:15Z",
  "id":1171192171,
  "issue":1479,
  "node_id":"IC_kwDODBCWws5Fzvlr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-30T13:02:15Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1480?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1480](https://codecov.io/gh/scikit-hep/awkward/pull/1480?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b9ce878) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.01%`.\n> The diff coverage is `71.25%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1480?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <\u00f8> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvdy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow\\_schema.py](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvd19zY2hlbWEucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9idWZmZXJzLnB5) | `86.13% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jdXB5LnB5) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qYXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uX25ldy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9udW1weS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| ... and [124 more](https://codecov.io/gh/scikit-hep/awkward/pull/1480/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-26T17:57:46Z",
  "id":1138861010,
  "issue":1480,
  "node_id":"IC_kwDODBCWws5D4aPS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-26T17:57:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Superseded by #1493.",
  "created_at":"2022-06-07T18:05:59Z",
  "id":1149003118,
  "issue":1480,
  "node_id":"IC_kwDODBCWws5EfGVu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-07T18:05:59Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I took a quick look at this and I suspect that it's the `_module` object of the `nplike` associated with the various contents.\r\n\r\nHaving only just glanced over the code, I think we might want to replace the existing `deep_copy` method with a `__deepcopy__` implementation which ensures that nested layouts are also handled to avoid trying to pickle the module.\r\n\r\nIn the mean-time, if you really need a deep copy, you *could* use `ak.to_buffers` with `copy.deepcopy`, e.g.\r\n\r\n```python\r\nimport copy\r\n\r\narray_copy = ak.from_buffers(\r\n    *copy.deepcopy(\r\n        ak.to_buffers(array)\r\n    )\r\n)\r\n```\r\n\r\nThough in practice, there are not usually that many instances where one actually wants a deep copy given that Awkward Arrays are partially immutable.",
  "created_at":"2022-05-27T17:32:52Z",
  "id":1139845487,
  "issue":1482,
  "node_id":"IC_kwDODBCWws5D8Klv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-27T17:36:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's sounding right. I had intended to look into this, but you beat me to it!\r\n\r\nNow that I think of it, all of our arrays have a link to the `nplike` singleton, and the one corresponding to NumPy holds a reference to the actual `numpy` module. We don't want to copy that! So yes, we'll need a custom `__deepcopy__` (and probably also `__copy__`), and its implementation can be our `deep_copy`. It could possibly be renamed, as long as everything that's currently calling `deep_copy` goes and calls `__deepcopy__` instead.",
  "created_at":"2022-05-27T18:48:33Z",
  "id":1139938762,
  "issue":1482,
  "node_id":"IC_kwDODBCWws5D8hXK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-27T18:48:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"> I took a quick look at this and I suspect that it's the `_module` object of the `nplike` associated with the various contents.\r\n> \r\n> Having only just glanced over the code, I think we might want to replace the existing `deep_copy` method with a `__deepcopy__` implementation which ensures that nested layouts are also handled to avoid trying to pickle the module.\r\n> \r\n> In the mean-time, if you really need a deep copy, you _could_ use `ak.to_buffers` with `copy.deepcopy`, e.g.\r\n> \r\n> ```python\r\n> import copy\r\n> \r\n> array_copy = ak.from_buffers(\r\n>     *copy.deepcopy(\r\n>         ak.to_buffers(array)\r\n>     )\r\n> )\r\n> ```\r\n> \r\n> Though in practice, there are not usually that many instances where one actually wants a deep copy given that Awkward Arrays are partially immutable.\r\n\r\nI was actually creating a copy to return a subset version of the array and keep a copy of the original, but just realized that it was not needed. Thanks for the advice.",
  "created_at":"2022-05-27T19:07:57Z",
  "id":1139953372,
  "issue":1482,
  "node_id":"IC_kwDODBCWws5D8k7c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-05-27T19:08:36Z",
  "user":"MDQ6VXNlcjM4NzYyNA=="
 },
 {
  "author_association":"MEMBER",
  "body":"(We should fix it anyway, thanks!)\r\n\r\nWhat you need might be `ak.packed`. Ordinarily, when you slice something, it doesn't actually make a copy, so the original is still entirely in memory. Packing ensures that only the parts you can see in the array you have are linked, so that a subset actually uses less memory.",
  "created_at":"2022-05-27T19:11:29Z",
  "id":1139955684,
  "issue":1482,
  "node_id":"IC_kwDODBCWws5D8lfk",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-05-27T19:11:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is a good idea\u2014I've run into the same issue when constructing MomentumVector4D and a field like \"px\" is missing or a non-scalar type. (The latter can happen when using an interference you expect to zip that doesn't actually zip.)\r\n\r\nSome things to think about:\r\n\r\n   * If it's called on every ak.Array subclass constructor, it needs to be pretty lightweight. We'll need to communicate with library developers that this is not the place for _O(n)_ tests of array contents. If there's any way to ensure that it's only called for user input, not any intermediate arrays, we should consider it. (Maybe direct constructors call it but `ak._v2._util.wrap` avoids it?)\r\n   * It could be a dunder method, but it would be more in keeping with the way we do things if it's in the `ak.behaviors` dict.\r\n   * Maybe it could be not automatic at all, but only invoked in `ak.validity_error`?\r\n   * If it's defined in `ak.behaviors` instead of a dunder method, it could be invoked even if the target type is buried deep in an array.\r\n\r\nSince @Saransh-cpp is doing a lot of work on Vector right now, it's the perfect time to coordinate and ensure that it's usable in this primary use-case.",
  "created_at":"2022-05-30T21:51:49Z",
  "id":1141496734,
  "issue":1483,
  "node_id":"IC_kwDODBCWws5ECdue",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "eyes":1,
   "total_count":2
  },
  "updated_at":"2022-05-30T21:51:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Just making notes - it would also be handy to have this for `vector` in order to prevent users setting multiple aliases for e.g. time-like quantities.\r\n\r\nMore notes! \r\n\r\nI've thought about this further, and I like the idea of this being an `ak.behavior` feature. My rationale is that `ak.behavior` is a more general mechanism than behavior classes, and importantly we don't pollute the class namespace.\r\n\r\nWe already use the `arrayclass` mechanism for nested layouts, e.g. [in `to_list`](https://github.com/scikit-hep/awkward/blob/1c63c025a3cd466c002731414ea2c85673f663b3/src/awkward/contents/content.py#L1417-L1426), but I feel that this should be an exception given the relevance of `__getitem__` rather than a rule.",
  "created_at":"2022-07-11T08:40:28Z",
  "id":1180123902,
  "issue":1483,
  "node_id":"IC_kwDODBCWws5GV0L-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T14:44:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1484?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1484](https://codecov.io/gh/scikit-hep/awkward/pull/1484?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ed55358) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b0dced7a68b1f28193404f626c535688ba40fb74?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b0dced7) will **decrease** coverage by `0.12%`.\n> The diff coverage is `57.60%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `69.81% <57.60%> (-2.58%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `88.88% <0.00%> (-1.59%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `49.15% <0.00%> (-0.85%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19zbGljaW5nLnB5) | `84.00% <0.00%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `94.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `77.24% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfd2hlcmUucHk=) | `91.66% <0.00%> (\u00f8)` | |\n| ... and [21 more](https://codecov.io/gh/scikit-hep/awkward/pull/1484/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-05-31T20:49:37Z",
  "id":1142627213,
  "issue":1484,
  "node_id":"IC_kwDODBCWws5EGxuN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-09T08:51:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - Please, have a look when you have time. This PR completes migration of LayoutBuilder to v2. Although it is not intended to be a long term solution, I think, it is useful to have it in the main branch. We want to compare performance of the old implementation with the new one. The PR implements a high level interface to a current LayoutBuilder that we will swap with the one in development. Thanks!",
  "created_at":"2022-07-01T07:47:40Z",
  "id":1172046121,
  "issue":1484,
  "node_id":"IC_kwDODBCWws5F3AEp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-01T07:47:40Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - shall the `GrowableBuffer.h` be placed in `src/awkward/` or `src/awkward/growable_buffer/` directory?",
  "created_at":"2022-06-03T12:27:06Z",
  "id":1145912130,
  "issue":1485,
  "node_id":"IC_kwDODBCWws5ETTtC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-03T12:27:06Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"How about\r\n\r\n  * `src/awkward/cpp-headers/GrowableBuffer.h`\r\n  * `src/awkward/cpp-headers/LayoutBuilder.h`\r\n\r\nThe use of a hyphen would be a bad idea if this would ever contain Python code (it won't). It should be a generic name, to allow for other header-only additions in the future. Maybe `include` would make sense, but we already have an `include/awkward` at top-level, and I think having two of them with similar function (containing C++ header files) would be confusing. Maybe all of the headers should eventually go into here, but only if the C++ code itself becomes header-only.\r\n\r\nAfter dropping v1, we could entertain the notion of converting the remaining C++ code into header-only and having the .cpp part be nothing more than template instantiations and pybind11 wrappers. The reason we _didn't_ do that before is because it increases the compilation time (with localbuild.py, we can edit .cpp files and only recompile what we change, not the whole codebase), but that becomes less relevant when the v1 C++ code is dropped (see https://github.com/scikit-hep/awkward/issues/503#issuecomment-1106750209).",
  "created_at":"2022-06-03T13:16:15Z",
  "id":1145954184,
  "issue":1485,
  "node_id":"IC_kwDODBCWws5ETd-I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-03T13:16:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> How about\r\n> \r\n> * `src/awkward/cpp-headers/GrowableBuffer.h`\r\n> * `src/awkward/cpp-headers/LayoutBuilder.h`\r\n> \r\n> The use of a hyphen would be a bad idea if this would ever contain Python code (it won't). It should be a generic name, to allow for other header-only additions in the future. Maybe `include` would make sense, but we already have an `include/awkward` at top-level, and I think having two of them with similar function (containing C++ header files) would be confusing. Maybe all of the headers should eventually go into here, but only if the C++ code itself becomes header-only.\r\n> \r\n> After dropping v1, we could entertain the notion of converting the remaining C++ code into header-only and having the .cpp part be nothing more than template instantiations and pybind11 wrappers. The reason we _didn't_ do that before is because it increases the compilation time (with localbuild.py, we can edit .cpp files and only recompile what we change, not the whole codebase), but that becomes less relevant when the v1 C++ code is dropped (see [#503 (comment)](https://github.com/scikit-hep/awkward/issues/503#issuecomment-1106750209)).\r\n\r\nHow about \r\n * `src/awkward/interface/GrowableBuffer.h`\r\n* `src/awkward/interface/LayoutBuilder.h`\r\n",
  "created_at":"2022-06-03T14:56:58Z",
  "id":1146047892,
  "issue":1485,
  "node_id":"IC_kwDODBCWws5ET02U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-03T14:56:58Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"What's the reasoning behind the word \"interface\"?\r\n\r\nTraditionally, .h files only describe interfaces, with the implementations in .cpp files, but the idea of a header-only library is that the implementation is included in the .h file (for downstream convenience). Since this directory is only for header-only libraries (which have to be shipped in the Python module, so that they can be used by Cling at runtime), this traditional use of \"interface\" for .h files would be misleading. It's the opposite of that: they're only mixing interface with implementation.\r\n\r\nWere you thinking of \"interface\" in a different context?",
  "created_at":"2022-06-03T16:36:13Z",
  "id":1146160961,
  "issue":1485,
  "node_id":"IC_kwDODBCWws5EUQdB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-03T16:36:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> What's the reasoning behind the word \"interface\"?\r\n> \r\n> Traditionally, .h files only describe interfaces, with the implementations in .cpp files, but the idea of a header-only library is that the implementation is included in the .h file (for downstream convenience). Since this directory is only for header-only libraries (which have to be shipped in the Python module, so that they can be used by Cling at runtime), this traditional use of \"interface\" for .h files would be misleading. It's the opposite of that: they're only mixing interface with implementation.\r\n> \r\n> Were you thinking of \"interface\" in a different context?\r\n\r\nI think, I'm influenced by CMSSW. Originally, it seemed odd to use `interface` directory, but, we do include an interface to...\r\n```c++\r\n#include \"DataFormats/TrackerCommon/interface/TrackerTopology.h\"\r\n```",
  "created_at":"2022-06-07T18:57:49Z",
  "id":1149049917,
  "issue":1485,
  "node_id":"IC_kwDODBCWws5EfRw9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-07T18:57:49Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"> ```c++\r\n> #include \"DataFormats/TrackerCommon/interface/TrackerTopology.h\"\r\n> ```\r\n\r\nThose really are interfaces: the implementation of TrackerTopology is in a different file. This directory is to contain only header-only code; that's why it needs to be in this directory instead of `include/awkward`.",
  "created_at":"2022-06-07T19:01:44Z",
  "id":1149053284,
  "issue":1485,
  "node_id":"IC_kwDODBCWws5EfSlk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-07T19:01:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The tests got stuck, but these are just new files in the `studies` directory\u2014the tests are irrelevant.",
  "created_at":"2022-06-16T19:03:17Z",
  "id":1158030644,
  "issue":1485,
  "node_id":"IC_kwDODBCWws5FBiU0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-16T19:03:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1486?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1486](https://codecov.io/gh/scikit-hep/awkward/pull/1486?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fa9e88d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b0dced7a68b1f28193404f626c535688ba40fb74?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b0dced7) will **decrease** coverage by `0.00%`.\n> The diff coverage is `0.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1486?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `49.15% <0.00%> (-0.85%)` | :arrow_down: |\n",
  "created_at":"2022-06-02T01:52:23Z",
  "id":1144333822,
  "issue":1486,
  "node_id":"IC_kwDODBCWws5ENSX-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-02T01:52:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1487?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1487](https://codecov.io/gh/scikit-hep/awkward/pull/1487?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (353e3f2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b0dced7a68b1f28193404f626c535688ba40fb74?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b0dced7) will **increase** coverage by `0.24%`.\n> The diff coverage is `100.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1487?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19wcmV0dHlwcmludC5weQ==) | `71.78% <100.00%> (+0.71%)` | :arrow_up: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `73.53% <100.00%> (+1.14%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `51.28% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.23% <100.00%> (+0.38%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `88.88% <0.00%> (-1.59%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `49.15% <0.00%> (-0.85%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `94.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9zdHJpbmcucHk=) | `77.24% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.79% <0.00%> (\u00f8)` | |\n| ... and [30 more](https://codecov.io/gh/scikit-hep/awkward/pull/1487/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-06-02T21:29:42Z",
  "id":1145360518,
  "issue":1487,
  "node_id":"IC_kwDODBCWws5ERNCG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-10T17:15:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"`awkward_array_goes_here.hist.Reg(100, 0, 5).Double().plot()`? Or `.hist.new.` to give options to add other interfaces like `.hist.auto()`, for example, which would do the numpy-like auto binning? Using QuickConstruct is the right thing, I think, because it doesn't require imports to work. We can add some infrastructure for auto-fill, I think.\r\n\r\nI'd not worry about adding a mapping of hist axes names; you can already set a label to show something different than the name, or change the names later.\r\n\r\nI'd also like to remove the need to add the `.flatten` if we can when passing to hist's `.fill`. Hist's fill could be smart enough to do that, I think? At least if it matches.\r\n\r\nScatter plots would have a different name, right? `awkward_array_goes_here.scatter_plot` or something, given it makes a 2D array and then plots it.",
  "created_at":"2022-06-03T15:49:18Z",
  "id":1146095405,
  "issue":1488,
  "node_id":"IC_kwDODBCWws5EUAct",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-03T15:50:52Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm slightly in favour of *not* adding an `ak.hist` feature to the Awkward namespace, mainly because I think that these features should be added to hist.[^note] \r\n\r\nIn your example you note that the awkward array ends up appearing half-way into the code block. Interestingly, I tend to make my fill calls comprise solely of the identifiers, e.g.\r\n\r\n```python3\r\n...\r\nn_saturated_left = ak.count_nonzero(left.is_saturated, axis=-1)\r\nn_saturated_right = ak.count_nonzero(right.is_saturated, axis=-1)\r\n\r\nreturn (\r\n    Hist.new.Integer(0, 128).Int64().fill(n_saturated_left).fill(n_saturated_right)\r\n)\r\n```\r\nI think I've been subconciously driven to do this because the complexity of the hist construction otherwise adds too much noise to the code. That said, I think this noise is fairly inescapable - histograms need a lot of detail to be constructed, so perhaps they should be their own line of code.\r\n\r\nI ended up making a list of features that I think we/hist could benefit from. I'll enumerate them here:\r\n\r\n- `Hist.fill` could invoke `ak.flatten(..., None)`\r\n- `Hist.fill` could accept mappings\r\n- `ak.flatten(..., None)` could support preserving records\r\n- External addon namespace\r\n\r\nI think first-and-foremostly, making `hist.fill` call `ak.ravel` on the array would solve many of my 1D-hist cases. Even for ND histograms, I can take care of broadcasting, but ravelling as well is a bit of a pain, e.g. some code I wrote yesterday:\r\n```python\r\narrays = np.broadcast_arrays(\r\n    zone, n_saturated > 0, n_ringing_chain, n_non_ringing_chain\r\n)\r\nhist.fill(\r\n    *[\r\n        np.ravel(x)\r\n        for x in arrays\r\n    ]\r\n)\r\n```\r\nvs\r\n```python\r\narrays = np.broadcast_arrays(\r\n    zone, n_saturated > 0, n_ringing_chain, n_non_ringing_chain\r\n)\r\nhist.fill(*arrays)\r\n```\r\n\r\nI don't know whether I'd go as far as wanting `hist` to perform broadcasting automatically. As useful as that sounds, I feel like it could be problematic given that the user should expect that hist doesn't do anything weird with their data. I'm 100% open to people changing my mind on that particular issue.\r\n\r\nI wonder whether it would be helpful for hist to support mappings, a bit like matplotlib does with `data=`. Then we'd also have a solution for the current requirement that the user repeat the field names:\r\n\r\n```python\r\narray = ak.zip({\r\n    'mag': [1, 0.2, 0.3, 0.9, 0.8, 0.4],\r\n    'x': [10, 20, 30, 4, 5, 6],\r\n})\r\nhist = Hist.new.Reg(1024, 0, 1, name=\"mag\").Reg(1024, 0, 10, name=\"x\").Int64().fill(array)\r\nhist.plot()\r\n```\r\n\r\nActually, this now makes me think about #984, which would make it easier to work with matplotlib as well. Right now, we have to flatten the fields manually, and then rebuild the array with `ak.zip`:\r\n```python\r\nhist.fill(*[ak.flatten(x) for x in x in ak.unzip(array)])\r\n```\r\nBut with better `ak.flatten`, and adding support to hist for Awkward arrays (both w.r.t flattening and records), we could have\r\n```python\r\nhist.fill(array)\r\n```\r\n\r\nHaving written all of that, I'm slightly nervous that I'm proposing adding Awkward features to Hist, which might really be a bad design choice in terms of inversion of responsibility.\r\n\r\nIf we *did* add hist support to Awkward, are we making a special exception for it because of the convenience? Would there be merit in adding some kind of \"extern\" namespace to the array that avoids clashing with user fields and allows for future extension, e.g.\r\n\r\n```python\r\narray._.hist\r\narray.lib.hist\r\narray.ext.hist\r\n```\r\n\r\n\r\n[^note]: that is, if we add better Awkward support to hist vs hist-specific improvements to Awkward.",
  "created_at":"2022-06-03T17:32:54Z",
  "id":1146205069,
  "issue":1488,
  "node_id":"IC_kwDODBCWws5EUbON",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-03T18:17:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Regardless of whether hist does broadcasting (it seems like that would make it depend too much on Awkward), what I'm thinking about here is the ergonomics of getting a quick plot. Similarly, we have `to_list` as a method on ak.Array in addition to it being a function because when you're typing an array expression, going to the beginning of the line, adding \"`ak.to_list(`\", then going to the end and adding \"`)`\" is more effort than typing \"`.tolist()`\" at the end, where you already are. (_Especially_ if you're working on someone else's terminal and ctrl-A doesn't go to the beginning of the line, but instead does Select All!)\r\n\r\nWhat I'm thinking about here would intentionally be a thin interface, relying on hist to interpret its arguments. The QuickConstruct method seems like the right thing to do, but only if it doesn't mean that we have to implement hist proxy work-alikes: intermediate objects of the same sort that hist defines to do QuickConstruct, but our own because we need it to do a `fill` at the end. If we can accomplish that through some coordination between Awkward and hist, so much the better. (For instance, hist adds a \"`fill`\" that can be put at the beginning of the QuickConstruct chain, which is an odd thing to do, but it would give Awkward a backdoor do use hist's own implementation and still insert its directive to fill with a given set of arrays.)\r\n\r\nWe have other connections with external libraries, all in the src/awkward/_connect directory; this would probably go there, too.",
  "created_at":"2022-06-03T18:29:59Z",
  "id":1146248517,
  "issue":1488,
  "node_id":"IC_kwDODBCWws5EUl1F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-03T18:29:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> it seems like that would make it depend too much on Awkward\r\n\r\nWell, I'd suggest it just uses `np.broadcast_arrays` as that would be implementation agnostic?\r\n\r\nI understand the benefit of the method chaining vs function composition. I actually just switched out my own Dask helper library to use function composition in order to make the abstraction thinner, but I can see that if you don't use Black and/or want to adapt your coding style, it's not as frictionless.\r\n\r\nRecognising that my opinion is towards \"let users type more if it means easier to read code\", I'm going to put it aside for now ;)\r\n\r\nWhat about a simple hist-fill method? Assuming we want to rely explicitly on hist, the user could be allowed to construct the hist factory, or just pass in the field names if required, e.g.\r\n```python\r\narray = ak.zip({\r\n    'mag': [1, 0.2, 0.3, 0.9, 0.8, 0.4],\r\n    'x': [10, 20, 30, 4, 5, 6],\r\n})\r\n\r\narray.hist(\"mag\") # 1D\r\narray.hist(\"mag\", \"x\") # 2D\r\narray.hist(Hist.new.Reg(32, 0, 1, name=\"mag\").Reg(32, 0, 10, name=\"x\").Int64()) # Fill 2D hist\r\n```\r\n\r\nOr, do you think a full-blown ak-namespaced proxy is better, e.g.\r\n```python\r\narray.hist.Reg(32, 0, 1, name=\"mag\").Reg(32, 0, 10, name=\"x\").Int64() # Fill 2D hist\r\n```",
  "created_at":"2022-06-03T19:19:45Z",
  "id":1146285940,
  "issue":1488,
  "node_id":"IC_kwDODBCWws5EUu90",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-03T19:19:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm marking any issue you, @ianna, or @ioanaif find as being verified bugs.\r\n\r\nThe reason I have the \"bug (unverified)\" label is to know when I/we have done triage or not. (I suppose a separate \"triage\" label could have worked, too.) Some purported bugs are not bugs but usage questions, and the bug report defaulting to \"unverified\" is a reminder that the issue might be solved by an explanation, rather than a code change. All of you can promote \"bug (unverified)\" to \"bug\", too. Just letting you know!",
  "created_at":"2022-06-14T21:18:54Z",
  "id":1155722392,
  "issue":1489,
  "node_id":"IC_kwDODBCWws5E4uyY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-14T21:18:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks Jim. I've been working on \"only me reporting\" as \"unverified\", unless it's a very clear instance of a bug. I'm happy to take the promotion!",
  "created_at":"2022-06-14T21:34:02Z",
  "id":1155733391,
  "issue":1489,
  "node_id":"IC_kwDODBCWws5E4xeP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-14T21:34:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Hmmm. I can't reproduce it:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak.layout.NumpyArray(np.random.randint(0, 2, 327, dtype=np.bool_))\r\n>>> array2 = array.deep_copy()\r\n>>> ak.to_list(array) == ak.to_list(array2)\r\nTrue\r\n```\r\n\r\nI can see the value in \"Have you seen me?\" posters for possible bugs, so that if somebody runs into it again, information about it can be pooled and more quickly lead to a solution. However, I'm using the mainline issues tab as a to-do list of work to resolve, and so if something isn't reproducible, it is getting in the way. (I don't want to leave it there potentially forever, mentally reminding myself that it's not work to-do.)\r\n\r\nAlso, `deep_copy` is a C++ function in v1, this sounds like a memory corruption issue, which is much less likely in v2.\r\n\r\nSo I'm closing this issue.\r\n\r\n(We might want to develop some sort of \"Have you seen me?\" place for possible bugs... maybe an issue label that we can filter out. I can see now why you picked \"bug (unverified)\", but that label is for requesting triage, like the test I just did above.)",
  "created_at":"2022-08-15T20:01:50Z",
  "id":1215731148,
  "issue":1489,
  "node_id":"IC_kwDODBCWws5IdpXM",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-15T20:01:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1490?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1490](https://codecov.io/gh/scikit-hep/awkward/pull/1490?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3b1c7ff) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/de7cae88edea7e679c88fb06d8c3660867d34b7e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de7cae8) will **decrease** coverage by `0.05%`.\n> The diff coverage is `74.16%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1490?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <\u00f8> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvdy5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_arrow\\_schema.py](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hcnJvd19zY2hlbWEucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jdXB5LnB5) | `50.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qYXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json\\_new.py](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uX25ldy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9udW1weS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_tuple.py](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfdHVwbGUucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| ... and [132 more](https://codecov.io/gh/scikit-hep/awkward/pull/1490/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-06-06T08:20:32Z",
  "id":1147180836,
  "issue":1490,
  "node_id":"IC_kwDODBCWws5EYJck",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-08T17:45:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm a :+1: on this as well, it will be good to formally distinguish between index and content nplikes. Minor thought - is it worth using a slightly shorter name like `index` instead of `index_nplike`? It would make the code slightly more readable, and I think it's safe enough given that there is no `np.index`.",
  "created_at":"2022-06-07T08:22:22Z",
  "id":1148354041,
  "issue":1490,
  "node_id":"IC_kwDODBCWws5Ecn35",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-07T08:22:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I'm a +1 on this as well, it will be good to formally distinguish between index and content nplikes. Minor thought - is it worth using a slightly shorter name like `index` instead of `index_nplike`? It would make the code slightly more readable, and I think it's safe enough given that there is no `np.index`.\r\n\r\nWe could, although I think that would be easy to do at any time; nplikes are rather internal. Perhaps the `nplike` module ought to be made private (renamed to `_nplike`) so to _formally_ say that we have this flexibility.\r\n\r\nAt this time, though, @swishdiff needs to finish his project (it's the last week!) and we can consider renaming later.\r\n\r\n\"`index`\" might be a little understated, though. I would have trouble guessing what it means. Something like \"`for_index`\" would be more helpful, but that's getting back to the original length.",
  "created_at":"2022-06-07T13:07:15Z",
  "id":1148648733,
  "issue":1490,
  "node_id":"IC_kwDODBCWws5Edv0d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-07T13:07:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> \"`index`\" might be a little understated, though. I would have trouble guessing what it means. Something like \"`for_index`\" would be more helpful, but that's getting back to the original length. \r\n\r\nActually, it's not just a length issue (which, in reality, I don't tend to weight that heavily). I should not have said \"shorter\", as it implied that length is an important metric.\r\n\r\nRather, I find `nplike.index_nplike` less readable for repetition than `nplike.index.zeros` or `nplike.for_index.zeros`. \r\n\r\n> We could, although I think that would be easy to do at any time; nplikes are rather internal. Perhaps the `nplike` module ought to be made private (renamed to `_nplike`) so to _formally_ say that we have this flexibility.\r\n\r\nOK, no problem - it won't take long to do should we see fit at a later date. Good luck @swishdiff!",
  "created_at":"2022-06-07T13:10:20Z",
  "id":1148652392,
  "issue":1490,
  "node_id":"IC_kwDODBCWws5Edwto",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-07T13:10:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"JAX segment_prod has some subtleties: https://github.com/google/jax/issues/9296 We're using the log \u2192 sum \u2192 exp that they recommend there.",
  "created_at":"2022-06-08T13:16:18Z",
  "id":1149902352,
  "issue":1490,
  "node_id":"IC_kwDODBCWws5Eih4Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-08T13:20:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski please merge this when the tests pass. There are two cases in `_slicing.py`, that probably need special treatment for Jax, for now they raise an error if the `nplike` is `Jax`",
  "created_at":"2022-06-08T17:27:37Z",
  "id":1150196169,
  "issue":1490,
  "node_id":"IC_kwDODBCWws5EjpnJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-08T17:27:37Z",
  "user":"MDQ6VXNlcjg4Mjg5MDg2"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Some Performance Indicators when compared to uavro:\r\n- avro file with records of 3 floats (~100Mb) : uavro- 1.645 s, forth- 0.717 s\r\n- avro file with records of 46 floats (~90 Mb) : uavro- 1.244 s, forth- 0.490 s",
  "created_at":"2022-06-07T18:03:27Z",
  "id":1149000859,
  "issue":1491,
  "node_id":"IC_kwDODBCWws5EfFyb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-07T18:03:27Z",
  "user":"MDQ6VXNlcjUwNTc3ODA5"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Some performance indicators when compared to fastavro:\r\n- avro file with records of 46 floats (~90 Mb) : fastavro- 3.2529 s, forth- 0.490 s\r\n- avro file with 3-level jagged array of floats (~688 Mb) : fastavro- 22.0425 s, forth- 2.699 s",
  "created_at":"2022-06-07T18:12:05Z",
  "id":1149008579,
  "issue":1491,
  "node_id":"IC_kwDODBCWws5EfHrD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-07T18:12:24Z",
  "user":"MDQ6VXNlcjUwNTc3ODA5"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The latest commit adds proper handling for negative length lists. This slows down the performance on the 3-level jagged array of floats from 2.7 s to 3.2 s. However, this slowdown can be avoided my generating three forth codes, one assuming no negative lengths, another assuming all to be negative lengths and third to halt after encountering the first length. This would (probably) give nearly the same performance as the one without checks.",
  "created_at":"2022-06-08T20:10:44Z",
  "id":1150356720,
  "issue":1491,
  "node_id":"IC_kwDODBCWws5EkQzw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-08T20:10:44Z",
  "user":"MDQ6VXNlcjUwNTc3ODA5"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1491?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1491](https://codecov.io/gh/scikit-hep/awkward/pull/1491?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f504c51) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8a4ea2b8c1c0cb2c92dab3565511bf5a717b7703?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8a4ea2b) will **increase** coverage by `0.18%`.\n> The diff coverage is `85.24%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1491?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY2FydGVzaWFuLnB5) | `89.68% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnVsbF9saWtlLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbmFuX3RvX25vbmUucHk=) | `26.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfd2l0aF9maWVsZC5weQ==) | `97.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `88.88% <66.66%> (-1.59%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `68.94% <66.66%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <66.66%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fcmVkdWNlcnMucHk=) | `76.92% <76.92%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <77.77%> (\u00f8)` | |\n| ... and [25 more](https://codecov.io/gh/scikit-hep/awkward/pull/1491/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-06-08T22:46:05Z",
  "id":1150486386,
  "issue":1491,
  "node_id":"IC_kwDODBCWws5Ekwdy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-10T12:38:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1492?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1492](https://codecov.io/gh/scikit-hep/awkward/pull/1492?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a664d1e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b0dced7a68b1f28193404f626c535688ba40fb74?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b0dced7) will **decrease** coverage by `0.00%`.\n> The diff coverage is `0.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1492?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1492/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `82.06% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1492/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `49.15% <0.00%> (-0.85%)` | :arrow_down: |\n",
  "created_at":"2022-06-06T19:57:25Z",
  "id":1147855219,
  "issue":1492,
  "node_id":"IC_kwDODBCWws5EauFz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-06T19:57:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1494?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1494](https://codecov.io/gh/scikit-hep/awkward/pull/1494?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8531563) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.23%`.\n> The diff coverage is `60.81%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1494?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.41% <0.00%> (-0.76%)` | :arrow_down: |\n| ... and [17 more](https://codecov.io/gh/scikit-hep/awkward/pull/1494/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-06-08T10:42:37Z",
  "id":1149754215,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5Eh9tn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T21:30:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Great! Please, see minor comments. Thanks.\r\n\r\nDone. Should I add the descriptions of the methods too? ",
  "created_at":"2022-06-08T10:47:35Z",
  "id":1149758862,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5Eh-2O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-08T10:47:35Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > Great! Please, see minor comments. Thanks.\r\n> \r\n> Done. Should I add the descriptions of the methods too?\r\n\r\nYes, please, it's a good idea!",
  "created_at":"2022-06-08T12:04:13Z",
  "id":1149826197,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5EiPSV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-08T12:05:25Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"This is looking good! One thing, though: the GrowableBuffer will always (?) be used by external code that wants to do \"copy to an external buffer\" and \"concatenation\" as one operation. That's why we think the panels approach is a step up in performance: we know that external code will have to copy the data out of a GrowableBuffer so that that external code can own it, and if we have to do a copy anyway, we might as well concatenate in the same operation. With concatenation being \"free,\" having no extra performance cost, that's why we can let the data be discontiguous as it grows and letting it be discontiguous as it grows lets us avoid more expensive ways of growing a buffer (reallocating and copying).\r\n\r\nSo the class needs to have an interface like\r\n\r\n```c++\r\nvoid concatenate(PRIMITIVE* external_pointer) const noexcept {\r\n    // always iterates over panels, copying data into external_pointer\r\n    // assumes that the buffer; external code should have allocated it with the right length()\r\n    // this function does not change any of the GrowableBuffer's internal panels; they're left as-is\r\n}\r\n```\r\n\r\nfor external code to be able to use concatenate-and-copy in one operation.\r\n\r\nFor use in ArrayBuilder, it will need `zeros`, `empty`, `arange` constructors (see original GrowableBuffer). For use in AwkwardForth as a replacement for ForthOutputBuffer, it will need another suite of methods.\r\n\r\nArrayBuilder will be an immediate use-case, AwkwardForth is down the road. Only worry about the ArrayBuilder methods for now.",
  "created_at":"2022-06-08T16:19:02Z",
  "id":1150126822,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5EjYrm",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-06-08T16:19:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I've added a `cmake` configuration to run the cpp-header only tests [here](https://github.com/scikit-hep/awkward/pull/1528/commits/933765f493559acc9721e356656f5c31b8b011b7). It's a separate PR because there are no hooks to `pytest` yet.\r\n",
  "created_at":"2022-07-05T09:59:53Z",
  "id":1174869496,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5GBxX4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-05T09:59:53Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ManasviGoyal - please, cherry-pick [this commit](https://github.com/scikit-hep/awkward/pull/1528/commits/765e6a9f28879cb93c90e6b47337ea2997c189a3) that clears the warnings when the tests are built with the project flags on MacOS. Thanks.",
  "created_at":"2022-07-05T11:18:42Z",
  "id":1174943204,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5GCDXk",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-05T11:18:42Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ManasviGoyal - please, cherry-pick [this commit](https://github.com/scikit-hep/awkward/pull/1528/commits/765e6a9f28879cb93c90e6b47337ea2997c189a3) that clears the warnings when the tests are built with the project flags on MacOS. Thanks.\r\n\r\nDone!",
  "created_at":"2022-07-05T12:28:47Z",
  "id":1175002447,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5GCR1P",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-05T12:28:47Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ManasviGoyal -  I've stared testing the new `GrowableBuffer` implementation on an `ArrayBuilder`: see #1529\r\n\r\nI think, we need to extend the `GrowableBuffer` API with a `fill` method that would take one (possibly multi-pannel) `GrowableBuffer<FROM_PRIMITIVE>` and make another (one panel) `GrowableBuffer<TO_PRIMITIVE>`.\r\n\r\nThere are several cases where it is needed for building arrays. Here is one example how a current one is used:\r\n```c++\r\n    GrowableBuffer<std::complex<double>> buffer =\r\n      GrowableBuffer<std::complex<double>>::empty(initial, old.reserved());\r\n    int64_t* oldraw = old.ptr().get();\r\n    std::complex<double>* newraw = buffer.ptr().get();\r\n    for (size_t i = 0;  i < 2*old.length();  i++) {\r\n      newraw[i] = {static_cast<double>(oldraw[i]), 0};\r\n    }\r\n    buffer.set_length(old.length());\r\n    old.clear();\r\n```",
  "created_at":"2022-07-05T15:42:54Z",
  "id":1175209009,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5GDEQx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-05T15:42:54Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The GrowableBuffer is great and I would sign off on it right now.\r\n> \r\nGreat! Thanks.\r\n\r\n> The LayoutBuilder, on the other hand, is about halfway between the simple/fast tool that it could be and where ArrayBuilder is now. I have a lot of inline comments, but I think I could explain what I'm thinking a little better with a prototype. Most of this code can be used as-is\u2014what I'll show with the prototype is a way to prune off some methods that are getting in the way and show how it can all fit together. I'll write it up in Python because it will be faster for me to write it that way; you have a good handle on the C++isms, and I think you'll have no trouble translating.\r\n> \r\nThanks. The prototype really gives a better idea to improve upon the implementation. I'll update the PR with the changes that you suggested.\r\n> If you want to split this PR into one PR for GrowableBuffer and another for LayoutBuilder, then we'll be able to merge the GrowableBuffer part right away.\r\n\r\nYes, it will be better to split the PR so that GrowableBuffer can be merged. I'll do the same. Thanks.",
  "created_at":"2022-07-06T00:34:30Z",
  "id":1175631885,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5GErgN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-06T00:34:30Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"I finished writing the prototype. Along the way, I realized that there are some subtle issues, such as dealing with records that have no fields and regular arrays with inner size 0. There also needs to be a different builder for records with named fields (\"records\") and records whose fields are not named (\"tuples\").\r\n\r\nI ran into some hard choices when trying to write Python that is intended to illustrate how it _would_ be implemented in C++. Specifically, there were a few places where the C++ should pass references to integers and strings to be able to modify them remotely. You just can't do that in Python. To simulate this, I made a\r\n\r\n```python\r\nclass Ref:\r\n    def __init__(self, value):\r\n        self.value = value\r\n```\r\n\r\nbecause Python passes all mutable objects as references, so \"`reference.value = 3`\" means\r\n\r\n```c++\r\n// reference has C++ type &int\r\nreference = 3;\r\n```\r\n\r\nI hope my meaning is clear.\r\n\r\nI'm looking forward to the full C++ version of all of this!",
  "created_at":"2022-07-06T02:21:44Z",
  "id":1175704958,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5GE9V-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-06T02:21:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I finished writing the prototype. Along the way, I realized that there are some subtle issues, such as dealing with records that have no fields and regular arrays with inner size 0. There also needs to be a different builder for records with named fields (\"records\") and records whose fields are not named (\"tuples\").\r\n> \r\n> I ran into some hard choices when trying to write Python that is intended to illustrate how it _would_ be implemented in C++. Specifically, there were a few places where the C++ should pass references to integers and strings to be able to modify them remotely. You just can't do that in Python. To simulate this, I made a\r\n> \r\n> ```python\r\n> class Ref:\r\n>     def __init__(self, value):\r\n>         self.value = value\r\n> ```\r\n> \r\n> because Python passes all mutable objects as references, so \"`reference.value = 3`\" means\r\n> \r\n> ```c++\r\n> // reference has C++ type &int\r\n> reference = 3;\r\n> ```\r\n> \r\n> I hope my meaning is clear.\r\n> \r\n> I'm looking forward to the full C++ version of all of this!\r\n\r\nYes. It is clear. I'll make the requested changes and update the soon. Thanks!",
  "created_at":"2022-07-06T07:59:10Z",
  "id":1175908384,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5GFvAg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-06T07:59:10Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ManasviGoyal and @jpivarski - the PR looks good. It implements all types and their tests defined in Jim's prototype. There are some places where I'd suggest to use a type aliases. Such as:\r\n> \r\n> ```c++\r\n> using Contents = typename std::tuple<BUILDERS...>;\r\n> ```\r\n> \r\n> and declare:\r\n> \r\n> ```c++\r\n> Contents contents_;\r\n> ```\r\n> \r\n> and more tests are needed to check that parameters are correctly placed in the forms.\r\n> \r\n> I'll do a more thorough review after @ManasviGoyal has a chance to do any final touches.\r\n\r\n@ianna What kind of parameters the users might use? One I think will be `\"__array__\": \"string\"`.  Are there any other?",
  "created_at":"2022-07-22T22:47:18Z",
  "id":1192987774,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5HG4x-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-22T22:48:40Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"I forgot to check that all the node types can have parameters, all different from each other. Some of them, like `__array__ == \"string\"`, are functional, having meanings that will be used by Awkward Array, but they can be anything at all. Some applications put documentation strings in there, and others have general metadata, like units.\r\n\r\nAt the C++ level, the parameters can just be a string. In Python, it will have to resolve to something JSON-formatted, but the C++ doesn't have to enforce that.",
  "created_at":"2022-07-22T22:52:55Z",
  "id":1192990031,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5HG5VP",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-22T22:52:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi, @jpivarski. Should we keep the type of offsets, starts, stops, mask, etc. fixed in the code or should we make them templated parameters so that users can use different types as needed?",
  "created_at":"2022-07-25T16:53:26Z",
  "id":1194346949,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5HMEnF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T16:53:26Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"> Hi, @jpivarski. Should we keep the type of offsets, starts, stops, mask, etc. fixed in the code or should we make them templated parameters so that users can use different types as needed?\r\n\r\nThe types of all of these Indexes (offsets, starts, stops, mask, etc.) should be templated. Most of them can be `int32`, `uint32`, or `int64`, so LayoutBuilder needs the flexibility to switch between these. The exceptions are ByteMasked masks, which only have one option, `int8`, BitMasked masks, which have only one option, `uint8`, and Union tags, which only have one option, `int8`.\r\n\r\nYou could check the v1 Content subclasses, in src/libawkward/array/*.cc, to see which templates are actually instantiated. LayoutBuilder should be reproducing the same set of types.",
  "created_at":"2022-07-25T18:13:33Z",
  "id":1194435675,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5HMaRb",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-25T18:13:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > Hi, @jpivarski. Should we keep the type of offsets, starts, stops, mask, etc. fixed in the code or should we make them templated parameters so that users can use different types as needed?\r\n> \r\n> The types of all of these Indexes (offsets, starts, stops, mask, etc.) should be templated. Most of them can be `int32`, `uint32`, or `int64`, so LayoutBuilder needs the flexibility to switch between these. The exceptions are ByteMasked masks, which only have one option, `int8`, BitMasked masks, which have only one option, `uint8`, and Union tags, which only have one option, `int8`.\r\n> \r\n> You could check the v1 Content subclasses, in src/libawkward/array/*.cc, to see which templates are actually instantiated. LayoutBuilder should be reproducing the same set of types.\r\n\r\nI'd suggest that it goes to the next PR.",
  "created_at":"2022-07-25T21:03:37Z",
  "id":1194627150,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5HNJBO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T21:03:37Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > > Hi, @jpivarski. Should we keep the type of offsets, starts, stops, mask, etc. fixed in the code or should we make them templated parameters so that users can use different types as needed?\r\n> > \r\n> > \r\n> > The types of all of these Indexes (offsets, starts, stops, mask, etc.) should be templated. Most of them can be `int32`, `uint32`, or `int64`, so LayoutBuilder needs the flexibility to switch between these. The exceptions are ByteMasked masks, which only have one option, `int8`, BitMasked masks, which have only one option, `uint8`, and Union tags, which only have one option, `int8`.\r\n> > You could check the v1 Content subclasses, in src/libawkward/array/*.cc, to see which templates are actually instantiated. LayoutBuilder should be reproducing the same set of types.\r\n> \r\n> I'd suggest that it goes to the next PR.\r\n\r\nActually, I already added the changes.",
  "created_at":"2022-07-25T21:10:00Z",
  "id":1194633551,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5HNKlP",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-25T21:10:00Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > > > Hi, @jpivarski. Should we keep the type of offsets, starts, stops, mask, etc. fixed in the code or should we make them templated parameters so that users can use different types as needed?\r\n> > > \r\n> > > \r\n> > > The types of all of these Indexes (offsets, starts, stops, mask, etc.) should be templated. Most of them can be `int32`, `uint32`, or `int64`, so LayoutBuilder needs the flexibility to switch between these. The exceptions are ByteMasked masks, which only have one option, `int8`, BitMasked masks, which have only one option, `uint8`, and Union tags, which only have one option, `int8`.\r\n> > > You could check the v1 Content subclasses, in src/libawkward/array/*.cc, to see which templates are actually instantiated. LayoutBuilder should be reproducing the same set of types.\r\n> > \r\n> > \r\n> > I'd suggest that it goes to the next PR.\r\n> \r\n> Actually, I already added the changes.\r\n\r\nFantastic! Is it ready for review? Thanks!",
  "created_at":"2022-07-25T21:12:38Z",
  "id":1194636243,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5HNLPT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T21:20:19Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > > > > Hi, @jpivarski. Should we keep the type of offsets, starts, stops, mask, etc. fixed in the code or should we make them templated parameters so that users can use different types as needed?\r\n> > > > \r\n> > > > \r\n> > > > The types of all of these Indexes (offsets, starts, stops, mask, etc.) should be templated. Most of them can be `int32`, `uint32`, or `int64`, so LayoutBuilder needs the flexibility to switch between these. The exceptions are ByteMasked masks, which only have one option, `int8`, BitMasked masks, which have only one option, `uint8`, and Union tags, which only have one option, `int8`.\r\n> > > > You could check the v1 Content subclasses, in src/libawkward/array/*.cc, to see which templates are actually instantiated. LayoutBuilder should be reproducing the same set of types.\r\n> > > \r\n> > > \r\n> > > I'd suggest that it goes to the next PR.\r\n> > \r\n> > \r\n> > Actually, I already added the changes.\r\n> \r\n> Fantastic! Is it ready for review? Thanks!\r\n\r\nBesides the BitMasked part that we were discussing, yes, everything else is ready for review.",
  "created_at":"2022-07-25T21:20:25Z",
  "id":1194644174,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5HNNLO",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-25T21:20:25Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > > > > > Hi, @jpivarski. Should we keep the type of offsets, starts, stops, mask, etc. fixed in the code or should we make them templated parameters so that users can use different types as needed?\r\n> > > > > \r\n> > > > > \r\n> > > > > The types of all of these Indexes (offsets, starts, stops, mask, etc.) should be templated. Most of them can be `int32`, `uint32`, or `int64`, so LayoutBuilder needs the flexibility to switch between these. The exceptions are ByteMasked masks, which only have one option, `int8`, BitMasked masks, which have only one option, `uint8`, and Union tags, which only have one option, `int8`.\r\n> > > > > You could check the v1 Content subclasses, in src/libawkward/array/*.cc, to see which templates are actually instantiated. LayoutBuilder should be reproducing the same set of types.\r\n> > > > \r\n> > > > \r\n> > > > I'd suggest that it goes to the next PR.\r\n> > > \r\n> > > \r\n> > > Actually, I already added the changes.\r\n> > \r\n> > \r\n> > Fantastic! Is it ready for review? Thanks!\r\n> \r\n> Besides the BitMasked part that we were discussing, yes, everything else is ready for review.\r\n\r\nThanks! Yes, I have a solution for that, but let's do it in the next PR.",
  "created_at":"2022-07-25T21:23:28Z",
  "id":1194647268,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5HNN7k",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-25T21:23:28Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I still have a question about including GrowableBuffer parameters as compile-time template parameters, but this is looking good for merging now. Any minor issues can be picked up in later PRs.\r\n\r\nThanks, I'll merge this one and rebase https://github.com/scikit-hep/awkward/pull/1560 that restores `BuilderOptions`. ",
  "created_at":"2022-07-25T22:07:20Z",
  "id":1194690771,
  "issue":1494,
  "node_id":"IC_kwDODBCWws5HNYjT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T22:07:20Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Note: there's a work-around\r\n\r\n```python\r\n>>> array[[True, False, True]][:, 1]\r\n<Array [2.2, 5.5] type='2 * float64'>\r\n```\r\n\r\nbut it really should be fixed.",
  "created_at":"2022-06-09T15:11:19Z",
  "id":1151250232,
  "issue":1495,
  "node_id":"IC_kwDODBCWws5Enq84",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-09T15:11:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1496?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1496](https://codecov.io/gh/scikit-hep/awkward/pull/1496?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0ad09c3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8a4ea2b8c1c0cb2c92dab3565511bf5a717b7703?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8a4ea2b) will **increase** coverage by `0.03%`.\n> The diff coverage is `84.05%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1496?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY2FydGVzaWFuLnB5) | `89.68% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnVsbF9saWtlLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbmFuX3RvX25vbmUucHk=) | `26.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfd2l0aF9maWVsZC5weQ==) | `97.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `88.88% <66.66%> (-1.59%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `68.94% <66.66%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fcmVkdWNlcnMucHk=) | `76.92% <76.92%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <77.77%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <83.33%> (\u00f8)` | |\n| ... and [22 more](https://codecov.io/gh/scikit-hep/awkward/pull/1496/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-06-10T09:05:40Z",
  "id":1152144954,
  "issue":1496,
  "node_id":"IC_kwDODBCWws5ErFY6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-10T09:05:40Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1497?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1497](https://codecov.io/gh/scikit-hep/awkward/pull/1497?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (71bc039) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8a4ea2b8c1c0cb2c92dab3565511bf5a717b7703?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8a4ea2b) will **increase** coverage by `0.04%`.\n> The diff coverage is `84.10%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1497?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY2FydGVzaWFuLnB5) | `89.68% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnVsbF9saWtlLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbmFuX3RvX25vbmUucHk=) | `26.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfd2l0aF9maWVsZC5weQ==) | `97.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `88.88% <66.66%> (-1.59%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `68.94% <66.66%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fcmVkdWNlcnMucHk=) | `76.92% <76.92%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <77.77%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <83.33%> (\u00f8)` | |\n| ... and [22 more](https://codecov.io/gh/scikit-hep/awkward/pull/1497/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-06-10T10:40:07Z",
  "id":1152226311,
  "issue":1497,
  "node_id":"IC_kwDODBCWws5ErZQH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-10T10:40:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1498?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1498](https://codecov.io/gh/scikit-hep/awkward/pull/1498?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7ceb2b5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8a4ea2b8c1c0cb2c92dab3565511bf5a717b7703?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8a4ea2b) will **increase** coverage by `0.25%`.\n> The diff coverage is `85.59%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1498?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY2FydGVzaWFuLnB5) | `89.68% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnVsbF9saWtlLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbmFuX3RvX25vbmUucHk=) | `26.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfd2l0aF9maWVsZC5weQ==) | `97.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `68.94% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `88.88% <66.66%> (-1.59%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <66.66%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fcmVkdWNlcnMucHk=) | `76.92% <76.92%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <77.77%> (\u00f8)` | |\n| ... and [32 more](https://codecov.io/gh/scikit-hep/awkward/pull/1498/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-06-11T19:05:42Z",
  "id":1152982962,
  "issue":1498,
  "node_id":"IC_kwDODBCWws5EuR-y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-11T19:05:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1499?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1499](https://codecov.io/gh/scikit-hep/awkward/pull/1499?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e34292f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8a4ea2b8c1c0cb2c92dab3565511bf5a717b7703?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8a4ea2b) will **increase** coverage by `0.23%`.\n> The diff coverage is `85.13%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1499?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY2FydGVzaWFuLnB5) | `89.68% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnVsbF9saWtlLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbmFuX3RvX25vbmUucHk=) | `26.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfd2l0aF9maWVsZC5weQ==) | `97.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `71.66% <50.00%> (-0.25%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `68.77% <50.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `88.88% <66.66%> (-1.59%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <66.66%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fcmVkdWNlcnMucHk=) | `76.92% <76.92%> (\u00f8)` | |\n| ... and [33 more](https://codecov.io/gh/scikit-hep/awkward/pull/1499/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-06-12T15:59:35Z",
  "id":1153216549,
  "issue":1499,
  "node_id":"IC_kwDODBCWws5EvLAl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-12T15:59:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I think, it is fixed in https://github.com/scikit-hep/awkward/pull/1474 ",
  "created_at":"2022-06-15T09:59:39Z",
  "id":1156262473,
  "issue":1501,
  "node_id":"IC_kwDODBCWws5E6ypJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-15T09:59:39Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"I linked it so that when that is merged, this will be closed. Thanks!",
  "created_at":"2022-06-15T11:34:06Z",
  "id":1156358853,
  "issue":1501,
  "node_id":"IC_kwDODBCWws5E7KLF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-15T11:34:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1502?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1502](https://codecov.io/gh/scikit-hep/awkward/pull/1502?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ce4af80) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/5a783052064f644e39cbb2adcba3bfc95e9d333a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5a78305) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-06-13T18:18:24Z",
  "id":1154234304,
  "issue":1502,
  "node_id":"IC_kwDODBCWws5EzDfA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-13T18:18:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Huh, nice find @ioanaif! It's painful how small a change this was!",
  "created_at":"2022-06-13T18:39:28Z",
  "id":1154253233,
  "issue":1502,
  "node_id":"IC_kwDODBCWws5EzIGx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-13T18:39:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1503?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1503](https://codecov.io/gh/scikit-hep/awkward/pull/1503?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c51e83) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/5a783052064f644e39cbb2adcba3bfc95e9d333a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5a78305) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-06-13T21:09:07Z",
  "id":1154441614,
  "issue":1503,
  "node_id":"IC_kwDODBCWws5Ez2GO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-13T21:09:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I made this the [top priority](https://github.com/scikit-hep/awkward/projects/5) of the \"easy\" column, hoping that @ioanaif, @agoose77, or @ianna can get to it soon. I think that `ones_like` and `zeros_like` will have exactly the same implementation for the TypeTracer. `firsts` is a higher-level function, but it's blocked by `ones_like` and `zeros_like`, right?",
  "created_at":"2022-06-14T21:14:32Z",
  "id":1155719220,
  "issue":1504,
  "node_id":"IC_kwDODBCWws5E4uA0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-14T21:14:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I don't think `firsts` is blocked by anything; and just to be clear all 3 of the functions I've found so far are working in dask-awkward fine as a dak.* equivalent (it's just that in these cases where the function fails on the old typetracer, the new typetracer is derived (triggering a warning) via the [\"backup method\"](https://github.com/ContinuumIO/dask-awkward/blob/440a47dff6489c73165b114e473562741e39f266/src/dask_awkward/core.py#L1122-L1128)-- from the computation of the first partition instead of from calling the ak.* function, since `new_meta = f(old_array._meta)` failed).",
  "created_at":"2022-06-15T15:25:59Z",
  "id":1156615205,
  "issue":1504,
  "node_id":"IC_kwDODBCWws5E8Iwl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-15T15:25:59Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The modified `from_array` impl doesn't handle a sequence of non-numpy-friendly value types. We now raise an error for this case, rather than permitting `'O'` dtypes.\r\n\r\nAt this point I think we need to decide *how* flexible `from_array` needs to be. Namely:\r\n- should we handle sequence of mixed `Unknown(Scalar|Length|MaybeNone)`, or only accept numpy-friendly types?\r\n- do we want to accept scalars here like NumPy does?\r\n\r\nMy thought is to keep it restricted for now. `nplike` is an internal API (in the sense that users are not expected to work with it), so we can restrict ourselves to sequence-of-known-scalars.",
  "created_at":"2022-06-15T11:53:31Z",
  "id":1156376711,
  "issue":1505,
  "node_id":"IC_kwDODBCWws5E7OiH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-15T12:07:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1505?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1505](https://codecov.io/gh/scikit-hep/awkward/pull/1505?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0698234) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/5a783052064f644e39cbb2adcba3bfc95e9d333a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5a78305) will **increase** coverage by `0.03%`.\n> The diff coverage is `86.95%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `71.12% <86.95%> (+1.22%)` | :arrow_up: |\n",
  "created_at":"2022-06-15T11:58:21Z",
  "id":1156380800,
  "issue":1505,
  "node_id":"IC_kwDODBCWws5E7PiA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-15T12:20:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This function creates TypeTracerArrays _from_ NumPy arrays to act as buffers within an Awkward Array, so they need to be the kinds of NumPy arrays that can be buffers in an Awkward Array. Those NumPy arrays can't have `dtype=object`, which means MaybeNone is off the list, though UnknownScalars and UnknownLength both represent integers, and UnknownScalar says what `dtype` it will be (useful for making the array). UnknownLength is like a Python `int`, so 64-bit (maybe 32-bit on Windows?).\r\n\r\nIs this PR done? It looks done, and I'd like to make a new release very soon (definitely by tomorrow).\r\n\r\nWhy did you remove the `unset = object()`? I created that to make a distinction between a keyword argument that wasn't explicitly set and a keyword argument that may have been set to `None`. Is there no need for such a distinction? (I can't think of any\u2014I was just being cautious.)",
  "created_at":"2022-06-16T19:12:48Z",
  "id":1158038969,
  "issue":1505,
  "node_id":"IC_kwDODBCWws5FBkW5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-16T19:12:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski my concern was if we use it internally for anything: I recall doing `nplike.asarray` on literals in Awkward at one point. \r\nIf we're confident this should only receive \"valid\" values, then I'm happy with what's here currently.\r\n\r\n`unset = object()` is fine if we need it, but we had lots of `if arg is unset` which fails for when the user passes in the signature-specified default e.g. `None`. Not sure if that makes too much sense - I have COVID brain right now :upside_down_face: ",
  "created_at":"2022-06-16T19:27:11Z",
  "id":1158054433,
  "issue":1505,
  "node_id":"IC_kwDODBCWws5FBoIh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-16T19:27:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm sorry to hear that\u2014I hope you feel better soon!\r\n\r\nI think `nplike.asarray` might be used on a user-provided input in `ak.fill_none` (on the value that will fill the array). The first attempt is to make that fill value an Awkward Array, though.\r\n\r\nThe `nplike` objects are strictly for our internal use, and we can mandate that internal code always specifies arguments. Maybe that would be too annoying. Anyway, I had been thinking that as we learn how our own code calls these `nplike` functions, we'd put appropriate defaults in there, one at a time replacing the `unset` objects.\r\n\r\nBut that's okay; I think that's minor. Thanks for the new methods and I'll include them in the pre-release!",
  "created_at":"2022-06-16T19:42:18Z",
  "id":1158065981,
  "issue":1505,
  "node_id":"IC_kwDODBCWws5FBq89",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-16T19:42:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Thanks @agoose77! `ones_like` and `zeros_like` are working.\r\n\r\nedit: I had originally pointed out a new issue with `ak.to_numpy` but I think it's actually OK.",
  "created_at":"2022-06-16T20:35:26Z",
  "id":1158105973,
  "issue":1505,
  "node_id":"IC_kwDODBCWws5FB0t1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-16T20:38:40Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1508?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1508](https://codecov.io/gh/scikit-hep/awkward/pull/1508?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (081062b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `0.04%`.\n> The diff coverage is `12.00%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1508?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1508/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1508/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1508/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1508/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n",
  "created_at":"2022-06-16T14:19:56Z",
  "id":1157716987,
  "issue":1508,
  "node_id":"IC_kwDODBCWws5FAVv7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-21T15:50:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I think, I've addressed all your comments. Please, have a look when you have time. Thanks!",
  "created_at":"2022-06-21T15:57:05Z",
  "id":1161949411,
  "issue":1508,
  "node_id":"IC_kwDODBCWws5FQfDj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-21T15:57:05Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1510?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1510](https://codecov.io/gh/scikit-hep/awkward/pull/1510?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4c12b2a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-06-20T18:00:36Z",
  "id":1160714141,
  "issue":1510,
  "node_id":"IC_kwDODBCWws5FLxed",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-20T18:00:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this is reasonable. In general, I think it is poor practice to store any non-array data on an `ak.Array`, so this would be a nice default.",
  "created_at":"2022-06-21T16:00:37Z",
  "id":1161953361,
  "issue":1511,
  "node_id":"IC_kwDODBCWws5FQgBR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-21T16:00:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"(We've been talking about this on Slack.) I agree: just telling people \"use this, not that\" is insufficient because not everybody's listening on the same channel. Since one can do `a.x` to get an array, it's very natural to expect `a.x = array-like` to set an array. This must be prevented because it gets very confusing downstream, as Nick pointed out.\r\n\r\nWe also need to be able to stash data on an ak.Array Python object (at the very least in informal/debugging situations), so we can't exclude general `__setattr__`. It's an expert/developer-level feature. What needs to be prevented is a `a.x = array-like` that looks like an `a[\"x\"] = array-like`.\r\n\r\nHow about ~~these two rules~~ this one rule:\r\n\r\n   * If the name of the attribute assigned with `__setattr__` starts with an underscore, it should be allowed.\r\n   * ~~If the thing being assigned is not array-like, it should be allowed. \"Array-like\" would be defined as: ak.Array or ak.Record, number/bool (corresponding to our [list of primitive types](https://github.com/scikit-hep/awkward/blob/49a3ff13ef90b8778a80573211d58c544729eaa5/src/awkward/_v2/types/numpytype.py#L67-L81)), string or bytestring, or an object with a `dtype` and `shape`.~~\r\n\r\nOn second thought, making a choice based on the type of the object is too complicated, and would therefore be hard to describe. So just this: if you attach something to an ak.Array or ak.Record, it has to be a recognized mutable property or start with an underscore.\r\n\r\nThis doesn't catch users whose field values start with underscores... but maybe those should also be refused in `__getattr__`, allowing `a[\"_x\"]` but not `a._x`. (Is that already true?) There's a restriction on what field names can be used in `__getattr__`; the simplest thing would be for it to be exactly the same as the restriction on what field names can be used in `__setattr__`.\r\n\r\nAnd it should be an exception, rather than a warning. Warnings are useful if the only context we want to allow this in is informal debugging, but maybe we'll need to assign caches or something in production.\r\n\r\nSubclasses of ak.Array and ak.Record should be able to override this `__setattr__`. (And I don't see anything preventing them, following normal Python semantics.)",
  "created_at":"2022-06-21T16:11:23Z",
  "id":1161965325,
  "issue":1511,
  "node_id":"IC_kwDODBCWws5FQi8N",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-21T16:11:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think we don't need to be too restrictive here. As long as the defaults are sane, then if a user decides to push the limit, they'll ultimately hit a bug and report.\r\n\r\nI'm happy to promote this to an exception. I agree that this should not look at the object type. ",
  "created_at":"2022-06-21T16:29:50Z",
  "id":1161984412,
  "issue":1511,
  "node_id":"IC_kwDODBCWws5FQnmc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-21T16:29:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"It might be worth explaining here why `setattr` can't just call internally `setitem` on array arguments. The usual corner case is `array.attr.subattr = ...` where in the current scheme `array.attr` is a shallow copy and hence the `setitem` doesn't actually propagate to `array`. Perhaps with enough backreferences this could be arranged, but it would not be trivial I imagine. Jim may have more reason to disallow this.",
  "created_at":"2022-06-21T16:42:29Z",
  "id":1162000216,
  "issue":1511,
  "node_id":"IC_kwDODBCWws5FQrdY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-21T16:42:29Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "author_association":"MEMBER",
  "body":"When I last thought about it, I thought that it would be impossible, given how Python is eager. But... maybe if those arrays returned via `.attr` carry some backward-pointing metadata, it might be possible. But then we'd have a problem of sliced arrays owning the arrays they were sliced from, which would have a surprising effect on memory footprint: if you slice out one field of an array and `del` the rest, the memory wouldn't go away!\r\n\r\nI think it's best to keep it simple, though all of the pathways in which someone could do something that they very clearly didn't intend should be blocked.",
  "created_at":"2022-06-21T17:19:56Z",
  "id":1162040859,
  "issue":1511,
  "node_id":"IC_kwDODBCWws5FQ1Yb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-21T17:19:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1513?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1513](https://codecov.io/gh/scikit-hep/awkward/pull/1513?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (61d07b9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `0.03%`.\n> The diff coverage is `21.42%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1513?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1513/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1513/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1513/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1513/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1513/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1513/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.03% <100.00%> (+0.79%)` | :arrow_up: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1513/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `73.70% <0.00%> (+0.16%)` | :arrow_up: |\n",
  "created_at":"2022-06-22T13:47:29Z",
  "id":1163121086,
  "issue":1513,
  "node_id":"IC_kwDODBCWws5FU9G-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-22T13:47:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1514?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1514](https://codecov.io/gh/scikit-hep/awkward/pull/1514?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (642e6b9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `2.66%`.\n> The diff coverage is `84.89%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1514?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1514/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1514/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1514/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19hd2t3YXJkX2RhdGFzaGFwZV9wYXJzZXIucHk=) | `47.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1514/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1514/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.06% <91.66%> (+0.83%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1514/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3R5cGUucHk=) | `96.46% <96.10%> (-1.27%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1514/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1514/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1514/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlZ3VsYXJ0eXBlLnB5) | `90.47% <0.00%> (+4.76%)` | :arrow_up: |\n",
  "created_at":"2022-06-23T00:08:26Z",
  "id":1163784541,
  "issue":1514,
  "node_id":"IC_kwDODBCWws5FXfFd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T22:28:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The two tests that are failing are failing in a dtype merger test:\r\n\r\n```\r\n  _______________________________ test_numpyarray ________________________________\r\n  \r\n      def test_numpyarray():\r\n          for dtype1 in (\"i1\", \"i2\", \"i4\", \"i8\", \"u1\", \"u2\", \"u4\", \"u8\", \"f4\", \"f8\", \"?\"):\r\n              for dtype2 in (\"i1\", \"i2\", \"i4\", \"i8\", \"u1\", \"u2\", \"u4\", \"u8\", \"f4\", \"f8\", \"?\"):\r\n                  for dtype3 in (\r\n                      \"i1\",\r\n                      \"i2\",\r\n                      \"i4\",\r\n                      \"i8\",\r\n                      \"u1\",\r\n                      \"u2\",\r\n                      \"u4\",\r\n                      \"u8\",\r\n                      \"f4\",\r\n                      \"f8\",\r\n                      \"?\",\r\n                  ):\r\n                      for dtype4 in (\r\n                          \"i1\",\r\n                          \"i2\",\r\n                          \"i4\",\r\n                          \"i8\",\r\n                          \"u1\",\r\n                          \"u2\",\r\n                          \"u4\",\r\n                          \"u8\",\r\n                          \"f4\",\r\n                          \"f8\",\r\n                          \"?\",\r\n                      ):\r\n                          one = np.array([0, 1, 2], dtype=dtype1)\r\n                          two = np.array([3, 0], dtype=dtype2)\r\n                          three = np.array([], dtype=dtype3)\r\n                          four = np.array([4, 5, 0, 6, 7], dtype=dtype4)\r\n                          combined = np.concatenate([one, two, three, four])\r\n  \r\n                          ak_combined = ak.layout.NumpyArray(one).mergemany(\r\n                              [\r\n                                  ak.layout.NumpyArray(two),\r\n                                  ak.layout.NumpyArray(three),\r\n                                  ak.layout.NumpyArray(four),\r\n                              ]\r\n                          )\r\n  \r\n                          assert ak.to_list(ak_combined) == combined.tolist()\r\n  >                       assert ak.to_numpy(ak_combined).dtype == combined.dtype\r\n  E                       assert dtype('float64') == dtype('float32')\r\n  E                        +  where dtype('float64') = array([0., 1., 2., 3., 0., 4., 5., 0., 6., 7.]).dtype\r\n  E                        +    where array([0., 1., 2., 3., 0., 4., 5., 0., 6., 7.]) = <function to_numpy at 0x7f997209cee0>(<NumpyArray format=\"d\" shape=\"10\" data=\"0 1 2 3 0 4 5 0 6 7\" at=\"0x7f997322b980\"/>)\r\n  E                        +      where <function to_numpy at 0x7f997209cee0> = ak.to_numpy\r\n  E                        +  and   dtype('float32') = array([0., 1., 2., 3., 0., 4., 5., 0., 6., 7.], dtype=float32).dtype\r\n  \r\n  ak_combined = <NumpyArray format=\"d\" shape=\"10\" data=\"0 1 2 3 0 4 5 0 6 7\" at=\"0x7f997322b980\"/>\r\n  combined   = array([0., 1., 2., 3., 0., 4., 5., 0., 6., 7.], dtype=float32)\r\n  dtype1     = 'i1'\r\n  dtype2     = 'i1'\r\n  dtype3     = 'u2'\r\n  dtype4     = 'f4'\r\n  four       = array([4., 5., 0., 6., 7.], dtype=float32)\r\n  one        = array([0, 1, 2], dtype=int8)\r\n  three      = array([], dtype=uint16)\r\n  two        = array([3, 0], dtype=int8)\r\n  \r\n  work/awkward/awkward/tests/test_0449-merge-many-arrays-in-one-pass.py:52: AssertionError\r\n```\r\n\r\nThey use `numpy-1.23.0-cp38-cp38-macosx_10_9_x86_64.whl` and `numpy-1.23.0-cp39-cp39-win_amd64.whl`, respectively, but other tests run NumPy 1.23.\r\n\r\nIn particular, the latest Azure MacOS runs `numpy-1.23.0-cp310-cp310-macosx_10_9_x86_64.whl` and the latest Azure Windows runs `numpy-1.23.0-cp310-cp310-win_amd64.whl`.\r\n\r\nHmmm. The test failure is in v1, which has to manually duplicate what NumPy does. v2 probably uses NumPy's own dtype promotion algorithm directly (i.e. concatenate two empty arrays of the appropriate dtype and see what the result is). Actually, it's not even that: it directly asks NumPy to concatenate them:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/2b6252d9f006405f096383582a7d27e5d79383e2/src/awkward/_v2/contents/numpyarray.py#L503-L505\r\n\r\nSo even if NumPy changes their promotion rules, v2 should be insensitive to that change (it should change along with them). But those actual tests are commented out!\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/2b6252d9f006405f096383582a7d27e5d79383e2/tests/v2/test_0449-merge-many-arrays-in-one-pass.py#L53-L93\r\n\r\nI should do another PR to uncomment those and make sure they work. I don't care too much about whether v1 only agrees with a range of NumPy versions, it's about to become irrelevant soon. So that PR might drop the v1 test, while enabling the v2 test.",
  "created_at":"2022-06-23T15:18:23Z",
  "id":1164544981,
  "issue":1514,
  "node_id":"IC_kwDODBCWws5FaYvV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T15:18:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1515?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1515](https://codecov.io/gh/scikit-hep/awkward/pull/1515?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (848a6c4) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `0.03%`.\n> The diff coverage is `21.42%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1515?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1515/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1515/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1515/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1515/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1515/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1515/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.03% <100.00%> (+0.79%)` | :arrow_up: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1515/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `73.70% <0.00%> (+0.16%)` | :arrow_up: |\n",
  "created_at":"2022-06-23T19:28:18Z",
  "id":1164787258,
  "issue":1515,
  "node_id":"IC_kwDODBCWws5FbT46",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T19:28:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1516?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1516](https://codecov.io/gh/scikit-hep/awkward/pull/1516?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f236007) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `0.03%`.\n> The diff coverage is `21.42%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1516?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.03% <100.00%> (+0.79%)` | :arrow_up: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1516/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `73.70% <0.00%> (+0.16%)` | :arrow_up: |\n",
  "created_at":"2022-06-23T21:23:46Z",
  "id":1164886479,
  "issue":1516,
  "node_id":"IC_kwDODBCWws5FbsHP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T21:23:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Fixes the issue described in https://github.com/scikit-hep/awkward/pull/1295#issuecomment-1164617443.",
  "created_at":"2022-06-23T22:13:41Z",
  "id":1164954745,
  "issue":1516,
  "node_id":"IC_kwDODBCWws5Fb8x5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-23T22:13:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1517?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1517](https://codecov.io/gh/scikit-hep/awkward/pull/1517?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4081228) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `2.66%`.\n> The diff coverage is `84.89%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1517?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1517/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1517/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1517/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19hd2t3YXJkX2RhdGFzaGFwZV9wYXJzZXIucHk=) | `47.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1517/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1517/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.06% <91.66%> (+0.83%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1517/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3R5cGUucHk=) | `96.46% <96.10%> (-1.27%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1517/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1517/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1517/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlZ3VsYXJ0eXBlLnB5) | `90.47% <0.00%> (+4.76%)` | :arrow_up: |\n",
  "created_at":"2022-06-24T17:01:39Z",
  "id":1165763191,
  "issue":1517,
  "node_id":"IC_kwDODBCWws5FfCJ3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-24T17:01:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@aryan26roy - when https://github.com/scikit-hep/awkward/pull/1560 is merged you may want to rebase this PR.",
  "created_at":"2022-07-27T11:09:52Z",
  "id":1196589934,
  "issue":1517,
  "node_id":"IC_kwDODBCWws5HUoNu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-27T11:09:52Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"It might be easier to finish this in a new PR. The header-only GrowableBuffer is no longer changing (stable target).",
  "created_at":"2022-08-24T19:39:24Z",
  "id":1226164614,
  "issue":1517,
  "node_id":"IC_kwDODBCWws5JFcmG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T19:39:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm closing this PR, with issue #1846 as a reminder that it should be picked up again (and a link back here to use this as a guide).",
  "created_at":"2022-10-28T20:39:41Z",
  "id":1295444042,
  "issue":1517,
  "node_id":"IC_kwDODBCWws5NNuhK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T20:39:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1518?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1518](https://codecov.io/gh/scikit-hep/awkward/pull/1518?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8ef8ba5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `2.66%`.\n> The diff coverage is `84.89%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1518?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1518/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1518/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1518/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19hd2t3YXJkX2RhdGFzaGFwZV9wYXJzZXIucHk=) | `47.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1518/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1518/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.06% <91.66%> (+0.83%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1518/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3R5cGUucHk=) | `96.46% <96.10%> (-1.27%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1518/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1518/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1518/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlZ3VsYXJ0eXBlLnB5) | `90.47% <0.00%> (+4.76%)` | :arrow_up: |\n",
  "created_at":"2022-06-29T05:14:03Z",
  "id":1169541769,
  "issue":1518,
  "node_id":"IC_kwDODBCWws5FtcqJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-29T05:14:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, thanks!",
  "created_at":"2022-06-29T12:14:38Z",
  "id":1169907084,
  "issue":1518,
  "node_id":"IC_kwDODBCWws5Fu12M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-29T12:14:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1519?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1519](https://codecov.io/gh/scikit-hep/awkward/pull/1519?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dbb7a4a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `2.66%`.\n> The diff coverage is `84.89%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1519?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1519/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1519/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1519/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19hd2t3YXJkX2RhdGFzaGFwZV9wYXJzZXIucHk=) | `47.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1519/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1519/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.06% <91.66%> (+0.83%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1519/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3R5cGUucHk=) | `96.46% <96.10%> (-1.27%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1519/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1519/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1519/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlZ3VsYXJ0eXBlLnB5) | `90.47% <0.00%> (+4.76%)` | :arrow_up: |\n",
  "created_at":"2022-06-29T12:37:45Z",
  "id":1169928370,
  "issue":1519,
  "node_id":"IC_kwDODBCWws5Fu7Cy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-29T12:37:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1520?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1520](https://codecov.io/gh/scikit-hep/awkward/pull/1520?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c7c3a36) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `2.66%`.\n> The diff coverage is `84.89%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1520?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19hd2t3YXJkX2RhdGFzaGFwZV9wYXJzZXIucHk=) | `47.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.06% <91.66%> (+0.83%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3R5cGUucHk=) | `96.46% <96.10%> (-1.27%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1520/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlZ3VsYXJ0eXBlLnB5) | `90.47% <0.00%> (+4.76%)` | :arrow_up: |\n",
  "created_at":"2022-06-29T13:13:44Z",
  "id":1169965184,
  "issue":1520,
  "node_id":"IC_kwDODBCWws5FvECA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-29T13:13:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I feel like I already merged this...",
  "created_at":"2022-06-29T16:35:21Z",
  "id":1170216507,
  "issue":1520,
  "node_id":"IC_kwDODBCWws5FwBY7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-29T16:35:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1521?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1521](https://codecov.io/gh/scikit-hep/awkward/pull/1521?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1053cba) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `2.66%`.\n> The diff coverage is `84.89%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1521?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1521/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1521/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1521/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19hd2t3YXJkX2RhdGFzaGFwZV9wYXJzZXIucHk=) | `47.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1521/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1521/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.06% <91.66%> (+0.83%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1521/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3R5cGUucHk=) | `96.46% <96.10%> (-1.27%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1521/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1521/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1521/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlZ3VsYXJ0eXBlLnB5) | `90.47% <0.00%> (+4.76%)` | :arrow_up: |\n",
  "created_at":"2022-06-29T13:25:48Z",
  "id":1169978504,
  "issue":1521,
  "node_id":"IC_kwDODBCWws5FvHSI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-29T13:25:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm seeing a lot of these \"artifact from 2 to 3\" PRs. I think all of these \"living at HEAD\" things should be approved/merged if the tests pass, so I'm approving them. But I'm fairly certain that I'm seeing the same update over and over. Some are on Awkward and some are on Uproot, sure, but they're all updating GitHub Actions from 2 to 3...",
  "created_at":"2022-06-29T16:37:35Z",
  "id":1170219537,
  "issue":1521,
  "node_id":"IC_kwDODBCWws5FwCIR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-29T16:37:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Dependabot does one update per PR. So that's actions/download-artifact, actions/upload-artifact, actions/setup-python, actions/checkout, actions/cache, etc. The versions are close to the same (but not quite, v4 for setup-python and v3 for everything else). I think that's because node updates cause major version updates.",
  "created_at":"2022-06-29T19:05:39Z",
  "id":1170382561,
  "issue":1521,
  "node_id":"IC_kwDODBCWws5Fwp7h",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-29T19:06:06Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1523?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1523](https://codecov.io/gh/scikit-hep/awkward/pull/1523?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (946b555) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `2.74%`.\n> The diff coverage is `76.88%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1523?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19hd2t3YXJkX2RhdGFzaGFwZV9wYXJzZXIucHk=) | `47.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.06% <91.66%> (+0.83%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3R5cGUucHk=) | `96.46% <96.10%> (-1.27%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1523/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlZ3VsYXJ0eXBlLnB5) | `90.47% <0.00%> (+4.76%)` | :arrow_up: |\n",
  "created_at":"2022-06-30T15:34:30Z",
  "id":1171368896,
  "issue":1523,
  "node_id":"IC_kwDODBCWws5F0avA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-30T17:12:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Only one thing: I think this file should have path `src/awkward/_v2/config.py` so that it can't be confused with the old one. When `/_v2/` \u2192 `/`, it _will_ occupy the old space, but then it will be a new major version of Awkward and we expect things like that to change.\r\n> \r\n> Other than that, it's great! Go ahead and merge it when it's moved into the `_v2` directory.\r\n\r\nI did move the file. Now the CI does not trigger the tests...",
  "created_at":"2022-06-30T16:23:36Z",
  "id":1171423909,
  "issue":1523,
  "node_id":"IC_kwDODBCWws5F0oKl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-06-30T16:23:36Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ManasviGoyal - FYI. When this is merged you can update your PR with:\r\n```\r\n#include \"utils.h\"\r\n```\r\nand remove the duplicated code from `LayoutBuilder.h`. Thanks!",
  "created_at":"2022-07-01T10:01:36Z",
  "id":1172171347,
  "issue":1524,
  "node_id":"IC_kwDODBCWws5F3epT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-01T10:01:36Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ManasviGoyal - FYI. When this is merged you can update your PR with:\r\n> \r\n> ```\r\n> #include \"utils.h\"\r\n> ```\r\n> \r\n> and remove the duplicated code from `LayoutBuilder.h`. Thanks!\r\n\r\nSure. Thanks!",
  "created_at":"2022-07-01T10:19:38Z",
  "id":1172189567,
  "issue":1524,
  "node_id":"IC_kwDODBCWws5F3jF_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-01T10:19:51Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1524?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1524](https://codecov.io/gh/scikit-hep/awkward/pull/1524?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8105b66) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/0c6ae0371e346869b7e961c27a49ba64368b4257?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c6ae03) will **decrease** coverage by `2.74%`.\n> The diff coverage is `76.88%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1524?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1524/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1524/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1524/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1524/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19hd2t3YXJkX2RhdGFzaGFwZV9wYXJzZXIucHk=) | `47.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1524/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `25.99% <9.09%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1524/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `87.06% <91.66%> (+0.83%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1524/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3R5cGUucHk=) | `96.46% <96.10%> (-1.27%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1524/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `97.51% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1524/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19faW5pdF9fLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1524/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlZ3VsYXJ0eXBlLnB5) | `90.47% <0.00%> (+4.76%)` | :arrow_up: |\n",
  "created_at":"2022-07-01T10:24:50Z",
  "id":1172194026,
  "issue":1524,
  "node_id":"IC_kwDODBCWws5F3kLq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-01T10:24:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"I agree that this is the pragmatic approach and the best you can do in this case where someone has left Awkward, gone to a masked array, and then discarded the mask!  Always going to the same \"in-band\" sentinel is definitely better than leaving them uninitialized (which can have very interesting undefined behavior  https://github.com/h5py/h5py/issues/2069).",
  "created_at":"2022-07-01T20:17:33Z",
  "id":1172685034,
  "issue":1525,
  "node_id":"IC_kwDODBCWws5F5cDq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-01T20:17:33Z",
  "user":"MDQ6VXNlcjE5OTgxMw=="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1526?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1526](https://codecov.io/gh/scikit-hep/awkward/pull/1526?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0d7be59) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.16%`.\n> The diff coverage is `1.38%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1526?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1526/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1526/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9yZGF0YWZyYW1lLnB5) | `27.27% <20.00%> (-15.59%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1526/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <0.00%> (-2.76%)` | :arrow_down: |\n",
  "created_at":"2022-07-04T15:22:28Z",
  "id":1173934685,
  "issue":1526,
  "node_id":"IC_kwDODBCWws5F-NJd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-04T15:22:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1527?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1527](https://codecov.io/gh/scikit-hep/awkward/pull/1527?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (468e96f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.11%`.\n> The diff coverage is `57.60%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1527?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1527/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n",
  "created_at":"2022-07-04T21:13:33Z",
  "id":1174375090,
  "issue":1527,
  "node_id":"IC_kwDODBCWws5F_4qy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-04T21:13:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1528?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1528](https://codecov.io/gh/scikit-hep/awkward/pull/1528?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (765e6a9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.11%`.\n> The diff coverage is `57.60%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1528/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n",
  "created_at":"2022-07-05T10:05:41Z",
  "id":1174875389,
  "issue":1528,
  "node_id":"IC_kwDODBCWws5GByz9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-05T11:29:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Checking that the libraries are not linked:\r\n```\r\nyana@iannas-macbook-pro awkward % otool -L localbuild/tests-cpp/test001  \r\nlocalbuild/tests-cpp/test001:\r\n\t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\r\nyana@iannas-macbook-pro awkward % otool -L localbuild/tests-cpp/test002\r\nlocalbuild/tests-cpp/test002:\r\n\t/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\r\n```\r\nDebug vs Release (-O3):\r\n```\r\n-rwxr-xr-x   1 yana  staff  374904 Jul  5 11:23 test001\r\n-rwxr-xr-x   1 yana  staff  650184 Jul  5 11:23 test002\r\n```\r\n```\r\n-rwxr-xr-x   1 yana  staff   87176 Jul  5 12:10 test001\r\n-rwxr-xr-x   1 yana  staff  227408 Jul  5 12:10 test002\r\n```",
  "created_at":"2022-07-05T10:15:17Z",
  "id":1174884947,
  "issue":1528,
  "node_id":"IC_kwDODBCWws5GB1JT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-05T10:15:17Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"closing in favour of https://github.com/scikit-hep/awkward/pull/1542",
  "created_at":"2022-07-14T14:18:33Z",
  "id":1184505914,
  "issue":1528,
  "node_id":"IC_kwDODBCWws5GmiA6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-14T14:18:33Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"pre-commit fails with:\r\n```\r\nsrc/awkward/_v2/_connect/numba/arrayview.py:666:35: B023 Function definition does not bind loop variable 'typer'.\r\nsrc/awkward/_v2/_connect/numba/arrayview.py:671:33: B023 Function definition does not bind loop variable 'methodname'.\r\nsrc/awkward/_v2/_connect/numba/arrayview.py:679:31: B023 Function definition does not bind loop variable 'lower'.\r\nsrc/awkward/_connect/_numba/arrayview.py:910:35: B023 Function definition does not bind loop variable 'typer'.\r\nsrc/awkward/_connect/_numba/arrayview.py:915:33: B023 Function definition does not bind loop variable 'methodname'.\r\nsrc/awkward/_connect/_numba/arrayview.py:923:31: B023 Function definition does not bind loop variable 'lower'.\r\ntests/test_0057b-virtual-array-numba.py:77:13: B023 Function definition does not bind loop variable 'counter'.\r\ntests/test_0057b-virtual-array-numba.py:78:20: B023 Function definition does not bind loop variable 'layout'.\r\n```",
  "created_at":"2022-07-06T08:52:23Z",
  "id":1175960740,
  "issue":1529,
  "node_id":"IC_kwDODBCWws5GF7yk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-06T08:52:23Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Those tests were fixed by #1533, which you can now use by merging with `main` (#1533 has been merged into `main`).",
  "created_at":"2022-07-06T17:31:58Z",
  "id":1176495434,
  "issue":1529,
  "node_id":"IC_kwDODBCWws5GH-VK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-06T17:31:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1529?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1529](https://codecov.io/gh/scikit-hep/awkward/pull/1529?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1e09a91) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.11%`.\n> The diff coverage is `57.93%`.\n\n> :exclamation: Current head 1e09a91 differs from pull request most recent head 2f277fa. Consider uploading reports for the commit 2f277fa to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1529?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1529/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1529/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n",
  "created_at":"2022-07-07T11:01:48Z",
  "id":1177412885,
  "issue":1529,
  "node_id":"IC_kwDODBCWws5GLeUV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-07T11:46:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"replaced by #1542 ",
  "created_at":"2022-07-11T14:23:19Z",
  "id":1180475753,
  "issue":1529,
  "node_id":"IC_kwDODBCWws5GXKFp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-11T14:23:19Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1531?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1531](https://codecov.io/gh/scikit-hep/awkward/pull/1531?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4a210a6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.12%`.\n> The diff coverage is `57.66%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1531?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1531/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1531/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1531/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n",
  "created_at":"2022-07-06T11:44:19Z",
  "id":1176120901,
  "issue":1531,
  "node_id":"IC_kwDODBCWws5GGi5F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-07T13:37:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1532?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1532](https://codecov.io/gh/scikit-hep/awkward/pull/1532?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7456946) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.13%`.\n> The diff coverage is `59.84%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1532?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1532/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1532/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1532/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1532/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1532/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1532/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1532/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1532/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <0.00%> (-0.35%)` | :arrow_down: |\n",
  "created_at":"2022-07-06T12:59:40Z",
  "id":1176192543,
  "issue":1532,
  "node_id":"IC_kwDODBCWws5GG0Yf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-08T07:01:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1533?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1533](https://codecov.io/gh/scikit-hep/awkward/pull/1533?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7cac753) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.11%`.\n> The diff coverage is `57.93%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1533?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1533/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1533/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n",
  "created_at":"2022-07-06T15:55:03Z",
  "id":1176395547,
  "issue":1533,
  "node_id":"IC_kwDODBCWws5GHl8b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-06T16:26:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1535?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1535](https://codecov.io/gh/scikit-hep/awkward/pull/1535?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (502a84c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.11%`.\n> The diff coverage is `57.93%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1535?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1535/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1535/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n",
  "created_at":"2022-07-06T17:07:57Z",
  "id":1176471888,
  "issue":1535,
  "node_id":"IC_kwDODBCWws5GH4lQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-07T06:13:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Great! The location of this file will move and it the class will get new methods, but this is a good checkpoint.\r\n> \r\n> To get the tests to pass, merge with `main`. @ioanaif's #1533 fixes the pre-commit issues that you see. Once it does pass tests, you can squash-and-merge it yourself.\r\n\r\nSure. Thanks. I have added the function that is needed for use in Array Builder. So, it should be able to work with Array Builders and the new Layout Builder. New methods can be added as and when they are needed. ",
  "created_at":"2022-07-06T17:40:27Z",
  "id":1176502570,
  "issue":1535,
  "node_id":"IC_kwDODBCWws5GIAEq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-06T17:40:27Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"At some point, we should be able to remove the old GrowableBuffer, too.\r\n\r\nIs that currently dead code? (I.e. if you just remove the old GrowableBuffer, can it compile?) When it is possible to remove, let's do that right away so that we don't end up with a name conflict somehow.\r\n\r\nFortunately, GrowableBuffer does not have a pybind11 interface, so there won't be anything in the src/python directory to dismantle.",
  "created_at":"2022-07-06T17:45:19Z",
  "id":1176506661,
  "issue":1535,
  "node_id":"IC_kwDODBCWws5GIBEl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-06T17:45:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@all-contributors please add @ManasviGoyal for code\r\n",
  "created_at":"2022-07-09T03:06:38Z",
  "id":1179467544,
  "issue":1535,
  "node_id":"IC_kwDODBCWws5GTT8Y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-09T03:06:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski \n\nI've put up [a pull request](https://github.com/scikit-hep/awkward/pull/1540) to add @ManasviGoyal! :tada:",
  "created_at":"2022-07-09T03:06:47Z",
  "id":1179467570,
  "issue":1535,
  "node_id":"IC_kwDODBCWws5GTT8y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-09T03:06:47Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1536?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1536](https://codecov.io/gh/scikit-hep/awkward/pull/1536?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4c55bc2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.11%`.\n> The diff coverage is `57.93%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1536/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1536/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n",
  "created_at":"2022-07-06T17:53:31Z",
  "id":1176513235,
  "issue":1536,
  "node_id":"IC_kwDODBCWws5GICrT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-06T17:53:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1537?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1537](https://codecov.io/gh/scikit-hep/awkward/pull/1537?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a1d59b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.13%`.\n> The diff coverage is `58.27%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1537?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1537/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n",
  "created_at":"2022-07-07T15:11:27Z",
  "id":1177768348,
  "issue":1537,
  "node_id":"IC_kwDODBCWws5GM1Gc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-07T15:11:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1538?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1538](https://codecov.io/gh/scikit-hep/awkward/pull/1538?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (45d0411) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.12%`.\n> The diff coverage is `58.27%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1538?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1538/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1538/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1538/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1538/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1538/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1538/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1538/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1538/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <0.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1538/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (+2.56%)` | :arrow_up: |\n",
  "created_at":"2022-07-07T22:30:27Z",
  "id":1178310335,
  "issue":1538,
  "node_id":"IC_kwDODBCWws5GO5a_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-09T02:20:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The bug is actually not related to endianness, but some compiler optimization that optimizes away our `byteswap` function. Mac has the same endianness as all other x86's, but the function that actively swaps was somehow not being invoked.",
  "created_at":"2022-07-09T01:57:36Z",
  "id":1179458171,
  "issue":1538,
  "node_id":"IC_kwDODBCWws5GTRp7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-09T01:57:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@all-contributors please add @aryan26roy for code\r\n",
  "created_at":"2022-07-09T03:12:10Z",
  "id":1179468287,
  "issue":1538,
  "node_id":"IC_kwDODBCWws5GTUH_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-09T03:12:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski \n\nI've put up [a pull request](https://github.com/scikit-hep/awkward/pull/1541) to add @aryan26roy! :tada:",
  "created_at":"2022-07-09T03:12:18Z",
  "id":1179468297,
  "issue":1538,
  "node_id":"IC_kwDODBCWws5GTUIJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-09T03:12:18Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1539?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1539](https://codecov.io/gh/scikit-hep/awkward/pull/1539?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ea5ef38) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.12%`.\n> The diff coverage is `60.81%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1539?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1539/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1539/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1539/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1539/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1539/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1539/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1539/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1539/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1539/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1539/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (+2.56%)` | :arrow_up: |\n",
  "created_at":"2022-07-08T09:47:42Z",
  "id":1178784218,
  "issue":1539,
  "node_id":"IC_kwDODBCWws5GQtHa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-08T15:09:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - while debugging the failing test - it looks like `to_buffers` is called twice somewhere in `to_list`:\r\n```python\r\ndef test_big():\r\n    a = ak._v2.highlevel.ArrayBuilder(initial=90)\r\n    for i in range(2000):\r\n        if i == 200:\r\n            tmp = a.snapshot()\r\n        a.boolean(i % 2 == 0)\r\n    print(\"to_list(a)\")\r\n    assert to_list(a) == [True, False] * 1000\r\n    print(\"----> to_list(tmp)\")\r\n    assert to_list(tmp) == [True, False] * 100\r\n    print(\"DONE!\")\r\n```\r\n```\r\ntests/v2/test_0018-fromiter-fillable.py::test_big ArrayBuilder::to_buffers 0\r\nBoolBuilder::to_buffers 0 200\r\nto_list(a)\r\nArrayBuilder::to_buffers 0\r\nBoolBuilder::to_buffers 0 2000\r\nArrayBuilder::to_buffers 0\r\nBoolBuilder::to_buffers 0 2000\r\n----> to_list(tmp)\r\nDONE!\r\n```\r\nalso, the buffers dictionary would have two `node0-data` buffers in this case - one with 200 entries and another with 2000. Would it cause any problems? Shall we go for a unique id?",
  "created_at":"2022-07-13T15:51:27Z",
  "id":1183394173,
  "issue":1542,
  "node_id":"IC_kwDODBCWws5GiSl9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-13T15:51:27Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Being a dict, `buffers` can't have two buffers with the same name (`node0-data`), and if they differ in the number of entries, assuming that the small one has a larger number entries than it really does would result in a segfault.\r\n\r\nUsually, the buffers are NumPy arrays or Py_Buffers with a correct length (200 or 2000). If that's the case here, it would prevent a segfault\u2014it would be a \"buffer is too small,\" rather than a segfault.\r\n\r\nAll of the nodes in a Form must have distinct ids from each other. They don't have to be distinct from other Forms, but without uniqueness-per-tree, you'd get these sorts of collisions.",
  "created_at":"2022-07-13T16:18:45Z",
  "id":1183423224,
  "issue":1542,
  "node_id":"IC_kwDODBCWws5GiZr4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-13T16:18:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Being a dict, `buffers` can't have two buffers with the same name (`node0-data`), and if they differ in the number of entries, assuming that the small one has a larger number entries than it really does would result in a segfault.\r\n> \r\n> Usually, the buffers are NumPy arrays or Py_Buffers with a correct length (200 or 2000). If that's the case here, it would prevent a segfault\u2014it would be a \"buffer is too small,\" rather than a segfault.\r\n> \r\n> All of the nodes in a Form must have distinct ids from each other. They don't have to be distinct from other Forms, but without uniqueness-per-tree, you'd get these sorts of collisions.\r\n\r\nThanks! I should have mentioned that the example is taken from the main branch. I saw this behaviour in the PR and re-checked that it is the same without it.",
  "created_at":"2022-07-13T20:22:37Z",
  "id":1183641259,
  "issue":1542,
  "node_id":"IC_kwDODBCWws5GjO6r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-13T20:22:37Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1542?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1542](https://codecov.io/gh/scikit-hep/awkward/pull/1542?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c81f7e8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.12%`.\n> The diff coverage is `58.27%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1542?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1542/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1542/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1542/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1542/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1542/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1542/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1542/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1542/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <0.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1542/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (+2.56%)` | :arrow_up: |\n",
  "created_at":"2022-07-14T10:27:07Z",
  "id":1184272527,
  "issue":1542,
  "node_id":"IC_kwDODBCWws5GlpCP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-14T15:38:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > Being a dict, `buffers` can't have two buffers with the same name (`node0-data`), and if they differ in the number of entries, assuming that the small one has a larger number entries than it really does would result in a segfault.\r\n> > Usually, the buffers are NumPy arrays or Py_Buffers with a correct length (200 or 2000). If that's the case here, it would prevent a segfault\u2014it would be a \"buffer is too small,\" rather than a segfault.\r\n> > All of the nodes in a Form must have distinct ids from each other. They don't have to be distinct from other Forms, but without uniqueness-per-tree, you'd get these sorts of collisions.\r\n> \r\n> Thanks! I should have mentioned that the example is taken from the main branch. I saw this behaviour in the PR and re-checked that it is the same without it.\r\n\r\nThis is understood - the second `to_buffers` is coming from the \"`form`\" method - no extra copies are done there.",
  "created_at":"2022-07-14T11:25:02Z",
  "id":1184329252,
  "issue":1542,
  "node_id":"IC_kwDODBCWws5Gl24k",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-14T11:25:02Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I'm done with this PR. Please, have a look when you have time. Thanks!",
  "created_at":"2022-07-14T14:17:26Z",
  "id":1184504674,
  "issue":1542,
  "node_id":"IC_kwDODBCWws5Gmhti",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-14T14:17:26Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1543?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1543](https://codecov.io/gh/scikit-hep/awkward/pull/1543?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (699ef87) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.12%`.\n> The diff coverage is `60.81%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1543?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1543/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1543/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1543/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1543/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1543/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1543/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1543/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1543/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1543/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1543/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (+2.56%)` | :arrow_up: |\n",
  "created_at":"2022-07-11T20:54:22Z",
  "id":1180860296,
  "issue":1543,
  "node_id":"IC_kwDODBCWws5GYn-I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-11T20:54:22Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1544?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1544](https://codecov.io/gh/scikit-hep/awkward/pull/1544?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (99713bd) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.12%`.\n> The diff coverage is `60.81%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1544?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1544/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1544/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1544/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1544/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1544/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1544/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1544/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1544/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1544/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1544/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (+2.56%)` | :arrow_up: |\n",
  "created_at":"2022-07-11T21:47:44Z",
  "id":1180902952,
  "issue":1544,
  "node_id":"IC_kwDODBCWws5GYyYo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-11T21:47:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1545?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1545](https://codecov.io/gh/scikit-hep/awkward/pull/1545?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1f92de7) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.13%`.\n> The diff coverage is `60.13%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1545?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19faW5pdF9fLnB5) | `89.65% <40.00%> (-10.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward/pull/1545/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-15T17:01:52Z",
  "id":1185731899,
  "issue":1545,
  "node_id":"IC_kwDODBCWws5GrNU7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T10:41:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm closing this now in favour of some smaller PRs",
  "created_at":"2022-07-19T10:49:11Z",
  "id":1188902978,
  "issue":1545,
  "node_id":"IC_kwDODBCWws5G3ThC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T10:49:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"What you're getting is nested: \"tuple of (record of x and y) and (record of z)\". A \"tuple\" is a record without field names (these two fields are `\"0\"` and `\"1\"`), so this is records-within-records because you constructed a record array out of two record arrays.\r\n\r\nYou can flatten the field structure like this:\r\n\r\n```python\r\nnew_array = ak.zip({\"x\": array1.x, \"y\": array1.y, \"z\": array2.z})\r\n```\r\n\r\nor more automatically like this:\r\n\r\n```python\r\nnew_array = ak.zip(dict(zip(ak.fields(array1), ak.unzip(array1))) | dict(zip(ak.fields(array2), ak.unzip(array2))))\r\n```\r\n\r\nusing the `dict1 | dict2` [syntax from Python 3.9+](https://peps.python.org/pep-0584/), or if you have an older Python, there's `{**dict1, **dict2}`.",
  "created_at":"2022-07-14T17:49:11Z",
  "id":1184733406,
  "issue":1547,
  "node_id":"IC_kwDODBCWws5GnZje",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-14T17:49:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1548?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1548](https://codecov.io/gh/scikit-hep/awkward/pull/1548?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fa319d7) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **decrease** coverage by `0.13%`.\n> The diff coverage is `60.78%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1548?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL19hd2t3YXJkX2RhdGFzaGFwZV9wYXJzZXIucHk=) | `47.64% <60.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward/pull/1548/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-14T16:32:15Z",
  "id":1184651981,
  "issue":1548,
  "node_id":"IC_kwDODBCWws5GnFrN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-14T16:32:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I see this an automatically generated file now!",
  "created_at":"2022-07-14T21:51:39Z",
  "id":1184927160,
  "issue":1548,
  "node_id":"IC_kwDODBCWws5GoI24",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-14T21:51:39Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1550?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1550](https://codecov.io/gh/scikit-hep/awkward/pull/1550?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b0f834f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.02%`.\n> The diff coverage is `62.09%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1550?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `8.62% <8.62%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.16% <50.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.53% <53.84%> (+5.11%)` | :arrow_up: |\n| ... and [26 more](https://codecov.io/gh/scikit-hep/awkward/pull/1550/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-16T20:53:43Z",
  "id":1186289853,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5GtVi9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-20T15:29:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski not sure who else to tag on this. Thought perhaps Henry, but I see he's marked himself as \"busy\".",
  "created_at":"2022-07-18T14:46:54Z",
  "id":1187593334,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5GyTx2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-18T14:46:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Does this entirely switch from Azure to GitHub Actions? I had thought there were some blockers preventing us from doing that, but it looks like all of the tests are running here. I'll need to change the required tests in `main`'s branch protection before we can merge it, and the other active PRs should adopt this before they merge, so this will take a little time.\r\n\r\nAs such, let's ask @henryiii to review this. He's busy this week with Snowmass, but maybe he'll get a chance to look at it next week. Meanwhile, I'll spread the word that this switchover is happening and to be ready for it. This would be a good reason for Awkward Array project meetings (or just \"Awkward Meetings\"?), for us all to keep in touch with what everyone else is doing. We might have a regular time for that by the end of August.",
  "created_at":"2022-07-18T15:24:32Z",
  "id":1187638559,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5Gye0f",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-18T15:24:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'll look at it later, but pretty sure there weren't blockers, it was just work that had never been done. Azure is just a earlier design of GHA.",
  "created_at":"2022-07-18T15:28:23Z",
  "id":1187643030,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5Gyf6W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-18T15:28:23Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Does this entirely switch from Azure to GitHub Actions? \r\n\r\nOnly buildtest, but the doctest will also be moved in a separate docs PR",
  "created_at":"2022-07-18T17:13:01Z",
  "id":1187798841,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5GzF85",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-18T17:13:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think I'll need to revisit this in the near future, once the docs are being built on GHA too. However, I think at that point we can look at whether an optimisation pass is necessary; right now, we will build one architecture 3X: once for docs, once for tests, and once for the wheel build test. Maybe that is OK, but regardless, a future problem!",
  "created_at":"2022-07-19T09:35:45Z",
  "id":1188828073,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5G3BOp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T09:52:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I believe this is nearly ready to go. Just needs some input as to the triggers - do we want to run this on every PR push? Right now, that is what's happening on Azure, though I'm not sure if it is intentional",
  "created_at":"2022-07-19T13:11:09Z",
  "id":1189035412,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5G3z2U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T13:11:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is great, but let's actually merge it on an off-week. At the same time that it is merged, we'll have to switch the `main` branch protection to expect these tests, rather than the Azure ones, so everyone will need to merge this PR to get passing tests.\r\n\r\nThe first week of August (1\u20125) is an off-week because several of us will be at CoDaS-HEP.\r\n\r\nPeople with open PRs are you, me, @ianna, @ManasviGoyal, @aryan26roy (though he'll be done by August), and @martindurant.",
  "created_at":"2022-07-19T15:07:47Z",
  "id":1189172673,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5G4VXB",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-19T15:07:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Mine can be merged, and I can iterate, right?",
  "created_at":"2022-07-19T16:06:26Z",
  "id":1189255640,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5G4pnY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T16:06:26Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"> Mine can be merged, and I can iterate, right?\r\n\r\nOkay, I didn't know it was declared ready. I'll try merging it with main to run the tests again, and I'll give it another scan, then merge it.",
  "created_at":"2022-07-19T16:09:23Z",
  "id":1189264122,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5G4rr6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T16:09:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I just brought this up to date because it will be merged next week, probably right after our first group meeting. That would be a good way to warn everybody.",
  "created_at":"2022-08-10T00:40:32Z",
  "id":1210025586,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5IH4Zy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T00:40:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77 Actually, I should be able to remove the `azure-doctest-awkward.yml` from this also (i.e. no more `.ci` directory and no Azure tests at all). The documentation tests are minimal compare with what you're doing in the `docs` branch, and that's where all the new development is going.\r\n\r\nAny reason why you kept it? If you're leaving it up to me, I'll delete it and we'll go entirely onto GitHub Actions (good for simplicity).",
  "created_at":"2022-08-17T16:43:33Z",
  "id":1218260370,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5InS2S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-17T16:43:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I removed the doctest CI in the docs branch, but I was leaving it here for now. I don't mind if you want to remove it here too!",
  "created_at":"2022-08-17T17:53:25Z",
  "id":1218326110,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5Ini5e",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-17T17:53:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I forgot about this; I'll have to do it on the weekend.",
  "created_at":"2022-08-19T21:28:51Z",
  "id":1221105299,
  "issue":1550,
  "node_id":"IC_kwDODBCWws5IyJaT",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2022-08-19T21:28:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Huh, I thought we had an issue tracking this, but apparently not!",
  "created_at":"2022-07-18T14:45:51Z",
  "id":1187591965,
  "issue":1551,
  "node_id":"IC_kwDODBCWws5GyTcd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-18T14:45:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't remember it. I just did a search and didn't find it. If it rings a bell, that's a good sign for consistency, at least.",
  "created_at":"2022-07-18T15:15:57Z",
  "id":1187628300,
  "issue":1551,
  "node_id":"IC_kwDODBCWws5GycUM",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-18T15:15:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1552?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`docs@b620428`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-07-19T12:48:43Z",
  "id":1189011836,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5G3uF8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-26T09:02:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"So, it's looking like RTD doesn't expose environment variables to custom builds; this will prevent us from pulling the artefacts from GHA.\r\n\r\nI think at this stage it might be more straightforward to perform the build on RTD, but pre-execute the notebooks and package building on the CI, i.e. publish _those_ artefacts and then use them on RTD.\r\n\r\nThat would mean publishing a built wheel(s) and the JB execution cache. Note that MyST-nb also supports and _inline_ execution mode which does not work with caching currently. We don't use that anywhere at the moment, though.",
  "created_at":"2022-07-19T14:17:08Z",
  "id":1189111743,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5G4Ge_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T14:17:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"One thing: don't plan on compiling Awkward on the RTD server. It runs over an hour and the server gets shut down, in a way that doesn't feedback to the CI check.\r\n\r\nI liked your idea about compiling Awkward and then building the docs on a CI machine (GitHub Actions), especially if that job fails if the documentation can't be built. Couldn't we have everything run on the CI machine, produce static HTML as an artifact, and then pick up that artifact on the RTD server? Can RTD be triggered by a CI job finishing (e.g. Linux commandline), rather than a GitHub commit or release? That way, we can ensure that the artifact is populated before starting RTD.\r\n\r\nThat wouldn't involve any environment variables, and RTD would be used minimally; we won't have to rely on its capabilities at all. Maybe it would involve two Sphinx configurations, one to really build it in CI and the other to take the static HTML verbatim?\r\n\r\n(Inline execution, and even execution of notebooks for JupyterBooks, are second priority to having the documentation built at all. If you're trying to compile Awkward in RTD, it will not get built at all.)",
  "created_at":"2022-07-19T15:01:23Z",
  "id":1189165352,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5G4Tko",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T15:01:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> One thing: don't plan on compiling Awkward on the RTD server\r\n\r\nYes, I can reassure you that that's not on the table!\r\n\r\nThe original plan was a full HTML build on the CI, and then have a very simple hook expose that to RTD: https://github.com/scikit-hep/awkward/blob/e0f38ed5b5624b1b2a61054414ad8c69aaf29632/.readthedocs.yml\r\n\r\nThat's where the webhook comes in - the CI triggers the RTD \"build\" (artefact download) once it has finished.\r\n\r\nUnfortunately, [a bug in RTD](https://github.com/readthedocs/readthedocs.org/issues/9438#issuecomment-1189345456) means that we can't actually retrieve the built assets - we need an access token, and there's no safe way to inject the token without env-var support. At least, I can't think of a workaround without a third-party intermediary\r\n\r\nThe other option is to make the needed assets available for fast builds. Right now (ignoring my bigger PR that will use autodoc), we can get away with executing the jupyter-book on the CI, and then passing the cache to RTD. That will avoid executing any notebooks and obviate the need for the awkward library. Because this operates within the usual machinery, we can use the aforementioned mechanism to retrieve the built assets. \r\n\r\nThere are benefits to this approach - this lets RTD integrate more nicely with our docs, where I was originally thinking we'd need to replicate the search functionality etc.\r\n",
  "created_at":"2022-07-19T15:17:22Z",
  "id":1189183835,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5G4YFb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T18:55:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK. This PR is now ready for review. It notifies RTD to perform a full Sphinx build. The jupyter-cache output is generated before this notification and uploaded to the workflow artefacts. Additionally, Sphinx is set to fail if any notebooks fail to execute.",
  "created_at":"2022-07-19T18:41:55Z",
  "id":1189432026,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5G5Ura",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T18:43:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've done very little content work besides the bare minimum in order to guarantee that this is a small PR that we can merge more easily. \r\n\r\nSee https://awkward-array.readthedocs.io/en/feat-merge-docs/ for the current build",
  "created_at":"2022-07-19T18:42:50Z",
  "id":1189432818,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5G5U3y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T18:42:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Note that, we could later decide to only build on GHA if RTD fix the bug, or we use an intermediary store for the artefact. I would like to exclusively build on GHA in the long run, as it simplifies certain things.\r\n\r\nBut, this is deliverable \"today\" :)",
  "created_at":"2022-07-19T18:58:42Z",
  "id":1189446079,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5G5YG_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T18:59:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski (for Monday during work hours) - how does this PR look at the moment? I'm currently finished on the first set of deliverables. It's not finished in the sense that these are \"final\" docs, but I think it's mergeable, and I intend to rebase my larger PR on top of this (well, probably manually cherry-pick) in order to start on phase 2.",
  "created_at":"2022-07-24T13:08:13Z",
  "id":1193315241,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5HIIup",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-24T13:08:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I only haven't done it yet because I was nervous about what would happen to the docs when this goes in. The CoDaS-HEP tutorial is a little more than a week away, and I'll want to make frequent reference to the docs.\r\n\r\nFrom a discoverability standpoint, I was at first at a loss because I couldn't find the API documentation:\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/180668023-88312eca-345a-4d6f-bbd6-9f8f4d8de624.png)\r\n\r\nI eventually found it in the bar at the top, and I knew what I was looking for. Could the three main books, \"User Guide\", \"API Reference\", and \"C++ Reference\", also be in the left-bar of the landing page? Usually, I don't like having multiple ways of doing the same thing, but being able to find the right book on the landing page is much more important than being able to switch between books on any other page. (I like the fact that we _can_ switch between books on other pages, but getting to the right one quickly is important on the landing page. Some users will have never seen this page before and probably don't even know that what they're looking for is called \"API Reference\", while others will be hitting it for the 20th time today and need to get to what they're looking for quickly. That's why I originally made them such big image-buttons, and why NumPy/SciPy/Pandas do the same with those four icons.)\r\n\r\n(... Have to go now! Arg! ...)\r\n\r\n\"C++ Reference\" doesn't have to be at the same level as the other two, and removing it may make it easier to see the others\u2014less noise. A link to the C++ reference can be hidden at the end of the quickstart, in a bullet point or something. The names can be simplified, too: \"Tutorials\" and \"Reference\"? (Not everybody would immediately recognize \"API\".)\r\n\r\nIn the User Guide/Tutorials, the subsections in the left-bar are not expanded by default (as in the old awkward-array.org), and I think it would help a lot if they were.\r\n\r\nIn the API Reference/Reference, the subsections in the left-bar never expand, and they're pretty important for some of the pages (ak.Array, ak.behavior, Forth, ...).\r\n\r\nSorry for so much back and forth, but changing the docs is like unveiling a new website!",
  "created_at":"2022-07-24T22:30:15Z",
  "id":1193406584,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5HIfB4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-24T22:30:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Could the three main books, \"User Guide\", \"API Reference\", and \"C++ Reference\", also be in the left-bar of the landing page?\r\n\r\nI don't think this will be very easy. The top bar in this theme is the *root* toc-tree. The left bar is then responsible for displaying the second-level toctree, which changes per-page. I don't believe that it's possible in Sphinx (I believe it's Sphinx, anyway) to set this second-level toctree for the root document (index). That's why (I assume) all pydata themes don't have any side-bar content for the index. I don't believe this *will* be a problem, as I'll discuss in response to another point!\r\n\r\n> Usually, I don't like having multiple ways of doing the same thing, but being able to find the right book on the landing page is much more important than being able to switch between books on any other page.\r\n\r\nI agree with this assessment\r\n\r\n> That's why I originally made them such big image-buttons, and why NumPy/SciPy/Pandas do the same with those four icons.)\r\n\r\nThat's what I am suggesting is the solution here instead of the left-bar (see #1563), This PR is *just* about the bare minimum to take what we currently have and port it to a unified theme. I was originally doing everything in a single PR, but I didn't feel it was accessible as a reviewer, so I've split it. If you'd feel happier delaying it until after CoDaS HEP, that's no problem!\r\n\r\n> \"C++ Reference\" doesn't have to be at the same level as the other two, and removing it may make it easier to see the others\u2014less noise. \r\n\r\nI decided on putting C++ reference in the top bar after deciding what needed to go in the cards view shown in #1563. I'd be interested to hear your thoughts given the proposed cards UX.\r\n\r\n> The names can be simplified, too: \"Tutorials\" and \"Reference\"? (Not everybody would immediately recognize \"API\".)\r\n\r\nI'm leaning heavily into the \"standard\" established by PyData here:\r\n\r\n![image](https://user-images.githubusercontent.com/1248413/180668888-ac1e535e-21ef-440e-b1ee-1b287f2186a5.png)\r\n![image](https://user-images.githubusercontent.com/1248413/180668895-ad8c9320-540d-4912-8030-f1f4636fa49e.png)\r\n![image](https://user-images.githubusercontent.com/1248413/180668901-40215ab6-77e8-4436-b6d5-7f4a933b0cda.png)\r\n\r\nMy guiding principle here is align with the scipy ecosystem unless we need to do something different. Does that sit with you?\r\n\r\n> In the User Guide/Tutorials, the subsections in the left-bar are not expanded by default (as in the old awkward-array.org), and I think it would help a lot if they were.\r\n\r\nAgreed. That's a todo. I can make it a todo of this PR if required.\r\n\r\n> Sorry for so much back and forth, but changing the docs is like unveiling a new website!\r\n\r\nNo, quite right. I actually held off creating #1563 over the weekend, but I realise now that it just created more confusion as to where this PR was going.",
  "created_at":"2022-07-24T22:50:04Z",
  "id":1193409384,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5HIfto",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-24T23:10:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Aside: I've been discussing certain parts of this on Slack with you. Now that there's a direction, I'll lean towards GH PR discussions so that\r\n- It's more transparent\r\n- Less duplication between conversation threads\r\n\r\n:)",
  "created_at":"2022-07-24T23:18:15Z",
  "id":1193414127,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5HIg3v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-24T23:18:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK - I've created a `docs` branch that this will merge into. Now, we can feel more confident about merging iterative PRs that might undergo reasonable amounts of change over the course of their development, without worrying about what `latest` users will see.",
  "created_at":"2022-07-26T08:49:10Z",
  "id":1195193551,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5HPTTP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-26T08:49:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski are you happy to merge this into `docs`, and move to the second PR to discuss further iterations?\r\n\r\nThe purpose of this PR is just to build the scaffolding (CI integration, JB support, etc.) I picture the docs branch as being a moving target, with small PRs that let us discuss small groups of changes. We could do this with one *large* PR, but I think that can get quite unwieldy w.r.t review.",
  "created_at":"2022-07-27T09:15:29Z",
  "id":1196474208,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5HUL9g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-27T09:15:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Oh, wait - you've already approved this :facepalm: Not sure why I didn't see the notification ...\r\n\r\nI'll merge.",
  "created_at":"2022-07-27T09:16:47Z",
  "id":1196475688,
  "issue":1552,
  "node_id":"IC_kwDODBCWws5HUMUo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-27T09:16:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That was intentional. Let me get back to this.",
  "created_at":"2022-07-19T13:00:45Z",
  "id":1189023983,
  "issue":1553,
  "node_id":"IC_kwDODBCWws5G3xDv",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-19T13:00:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually, `np.size` isn't even part of the NumPy API. NumPy arrays have a [size property](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.size.html), but this would be meaningless for an Awkward Array. The v1 `ak.size` was to satisfy Pandas, a feature we gave up on in #350.\r\n\r\nSo this function _should not_ be reimplemented in v2. We're taking advantage of the chance to change the API with a major release boundary.\r\n\r\nSee also discussion on https://gitter.im/Scikit-HEP/awkward-array at around this date: 2022-07-19 at 10:14am CDT.",
  "created_at":"2022-07-19T15:27:38Z",
  "id":1189197114,
  "issue":1553,
  "node_id":"IC_kwDODBCWws5G4bU6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T15:27:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Wait, you're right! :facepalm:. I'm pretty sure I've made this exact assumption before. Apologies for the noise everyone",
  "created_at":"2022-07-19T15:28:39Z",
  "id":1189198306,
  "issue":1553,
  "node_id":"IC_kwDODBCWws5G4bni",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T15:28:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1554?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1554](https://codecov.io/gh/scikit-hep/awkward/pull/1554?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e488e3b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.23%`.\n> The diff coverage is `60.81%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1554?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.41% <0.00%> (-0.76%)` | :arrow_down: |\n| ... and [17 more](https://codecov.io/gh/scikit-hep/awkward/pull/1554/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-19T16:44:27Z",
  "id":1189321309,
  "issue":1554,
  "node_id":"IC_kwDODBCWws5G45pd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-21T17:05:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm confused about what this PR is doing: the title is \"layout builder python bindings,\" but it doesn't define Python bindings for LayoutBuilder. (Such a thing wouldn't be all that useful, since LayoutBuilder must be used in compiled C++ to be useful.)",
  "created_at":"2022-07-22T14:53:45Z",
  "id":1192656307,
  "issue":1554,
  "node_id":"IC_kwDODBCWws5HFn2z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-22T14:53:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"close for now",
  "created_at":"2022-07-22T14:55:44Z",
  "id":1192658153,
  "issue":1554,
  "node_id":"IC_kwDODBCWws5HFoTp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-22T14:55:44Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1555?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1555](https://codecov.io/gh/scikit-hep/awkward/pull/1555?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0a4b0ed) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.23%`.\n> The diff coverage is `60.81%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1555?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlY29yZHR5cGUucHk=) | `86.72% <100.00%> (-0.35%)` | :arrow_down: |\n| [src/awkward/\\_v2/types/numpytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL251bXB5dHlwZS5weQ==) | `88.09% <0.00%> (-1.20%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.41% <0.00%> (-0.76%)` | :arrow_down: |\n| ... and [17 more](https://codecov.io/gh/scikit-hep/awkward/pull/1555/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-19T17:42:07Z",
  "id":1189376192,
  "issue":1555,
  "node_id":"IC_kwDODBCWws5G5HDA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T17:42:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1556?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1556](https://codecov.io/gh/scikit-hep/awkward/pull/1556?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (45cf626) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.23%`.\n> The diff coverage is `73.86%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1556?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `87.02% <88.09%> (+37.87%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcGFycXVldC5weQ==) | `51.02% <95.23%> (+3.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [...awkward/\\_v2/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWV0YWRhdGFfZnJvbV9wYXJxdWV0LnB5) | `100.00% <100.00%> (+68.42%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| ... and [19 more](https://codecov.io/gh/scikit-hep/awkward/pull/1556/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-19T18:23:59Z",
  "id":1189415908,
  "issue":1556,
  "node_id":"IC_kwDODBCWws5G5Qvk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-19T18:23:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@grst, since you say that this is a blocker, I moved it up in the priority queue. Normally, an error about \"What is the exact type of an array that doesn't contain any data?\" would not be a high priority, but presumably it is for you because you need to make assumptions about that type to fit it into AnnData.",
  "created_at":"2022-07-20T13:59:21Z",
  "id":1190323943,
  "issue":1557,
  "node_id":"IC_kwDODBCWws5G8ubn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-20T13:59:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"We have some tests for those edge cases that fail currently. So while it blocks merging the PR, it does not block continuing development. \r\n\r\nThanks for looking into this, but no hurries! I am on vacation from tomorrow on and @giovp also said he currently doesn't have time to focus on the AnnData PR. ",
  "created_at":"2022-07-20T14:03:04Z",
  "id":1190328323,
  "issue":1557,
  "node_id":"IC_kwDODBCWws5G8vgD",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-20T14:03:21Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"NONE",
  "body":"I found another slicing edge case that is not fixed by the linked PR yet. I don't know if it's related or a separate issue, though: \r\n\r\n**Expected, numpy behaviour**\r\n```python\r\nnp1 = np.ones((5, 7))\r\nnp1[:, []]\r\n# array([], shape=(5, 0), dtype=float64)\r\nnp1[[], :]\r\n# array([], shape=(0, 7), dtype=float64)\r\n```\r\n\r\n**akward array behaviour**\r\n```python\r\na1 = ak.Array(np.ones((5, 7)))\r\na1[:, []]\r\n# <Array [] type='0 * 7 * float64'>\r\na1[[], :]\r\n# <Array [] type='0 * 7 * float64'>\r\n```\r\n\r\nVersion:\r\nv2 API, package installed with ` pip install git+https://github.com/scikit-hep/awkward/@ioanaif/fix-lengths-of-empty-regular-slices-1557`",
  "created_at":"2022-08-12T20:37:57Z",
  "id":1213495161,
  "issue":1557,
  "node_id":"IC_kwDODBCWws5IVHd5",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-12T20:37:57Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi! I just added this corner-case in the tests for the linked PR and it successfully passed. All empty slice cases should be covered now. ",
  "created_at":"2022-08-15T10:37:20Z",
  "id":1214871801,
  "issue":1557,
  "node_id":"IC_kwDODBCWws5IaXj5",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":2,
   "total_count":2
  },
  "updated_at":"2022-08-15T10:37:41Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"NONE",
  "body":"I confirm this works with your branch @ioanaif! I had run pip without `--force-reinstall`, so I actually tested against the old version before. ",
  "created_at":"2022-08-15T11:36:24Z",
  "id":1214914587,
  "issue":1557,
  "node_id":"IC_kwDODBCWws5IaiAb",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-08-15T11:36:24Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"MEMBER",
  "body":"Well, the `ak.from_parquet` function opens and closes the file (using `with` blocks internally, to be sure to close the file even if there's an error), so by the time that it returns and `ds` is defined, the file is already closed. If you want this to delete `ds`, that's not what `with` blocks are normally for: they're for scoping resources _other_ than memory because memory is already scoped by functions.\r\n\r\nThat is, if we defined `__exit__` in such a way that it looked into `__locals__` and removed the `\"ds\"` key, that would be very unexpected behavior (and would likely get reported as a bug!).\r\n\r\nHere are some ways that the memory used by `ds` can be scoped:\r\n\r\n```python\r\ntry:\r\n    ds = ak.from_parquet(\"test.parquet\")\r\n    ...\r\nfinally:\r\n    del ds\r\n```\r\n\r\nand\r\n\r\n```python\r\ndef tmp():\r\n    ds = ak.from_parquet(\"test.parquet\")\r\n    ....\r\n\r\ntmp()\r\n```\r\n\r\nThis is based on the assumption that you're using `ak.from_parquet` in v2 or in v1 with `lazy=False`. Awkward v1 lazy arrays hold open a reference to the file so that they can read more data from it on demand, but lazy arrays are the part of Awkward that are being phased out with the switch to v2.\r\n\r\nIn Awkward v2 with Dask, the file would not be opened until the delayed computation is executed with `.compute()`, and then the file would be opened and closed as part of that computation. So holding a file open indefinitely is only an Awkward v1 lazy thing, which is deprecated.\r\n\r\nI'd like to close this issue; let me know if this reasoning is sufficient. Thanks!",
  "created_at":"2022-07-20T12:58:58Z",
  "id":1190256173,
  "issue":1558,
  "node_id":"IC_kwDODBCWws5G8d4t",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-20T12:58:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1559?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1559](https://codecov.io/gh/scikit-hep/awkward/pull/1559?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (55eac8a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.26%`.\n> The diff coverage is `75.69%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1559?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `63.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.41% <\u00f8> (-0.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <\u00f8> (-0.28%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `71.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.79% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `87.34% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `85.48% <\u00f8> (-0.21%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <\u00f8> (\u00f8)` | |\n| ... and [49 more](https://codecov.io/gh/scikit-hep/awkward/pull/1559/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-21T21:43:30Z",
  "id":1191964219,
  "issue":1559,
  "node_id":"IC_kwDODBCWws5HC-47",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-28T15:11:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Now that ufuncs are no longer allowed for records in v2, test `0355-mixins` fails with`Error details: cannot broadcast records in absolute` @jpivarski ",
  "created_at":"2022-07-22T13:44:59Z",
  "id":1192591599,
  "issue":1559,
  "node_id":"IC_kwDODBCWws5HFYDv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-22T13:44:59Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"MEMBER",
  "body":"While it's possible that we'll find some tests that assume you can apply ufuncs (like `np.abs`) to generic records and those tests have to be changed or removed, this particular test _should_ still work.\r\n\r\nIn the definition of Point, a method was defined for `np.abs`:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/afe5fc166a78b2d062d59811e91a0a0c3fc17dad/tests/test_0355-mixins.py#L18-L20\r\n\r\nThe rule should be that records can't be used in ufuncs unless a method has been defined for that particular ufunc, as is the case here. That's what `broadcast_and_apply` does; `recursively_apply` should follow the same rule. (That is, `np.add(record, record)` should fail if `record` does not have an implementation of `np.add`, but it should use that implementation if it does.)",
  "created_at":"2022-07-22T14:17:53Z",
  "id":1192622586,
  "issue":1559,
  "node_id":"IC_kwDODBCWws5HFfn6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-22T14:17:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1560?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1560](https://codecov.io/gh/scikit-hep/awkward/pull/1560?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (65a73ee) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.24%`.\n> The diff coverage is `73.86%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1560?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `87.02% <88.09%> (+37.87%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcGFycXVldC5weQ==) | `51.02% <95.23%> (+3.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [...awkward/\\_v2/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWV0YWRhdGFfZnJvbV9wYXJxdWV0LnB5) | `100.00% <100.00%> (+68.42%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `77.53% <100.00%> (+0.49%)` | :arrow_up: |\n| ... and [21 more](https://codecov.io/gh/scikit-hep/awkward/pull/1560/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-22T16:04:16Z",
  "id":1192723993,
  "issue":1560,
  "node_id":"IC_kwDODBCWws5HF4YZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-28T15:40:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - please, check when you have time. Thanks!",
  "created_at":"2022-07-25T21:07:07Z",
  "id":1194630612,
  "issue":1560,
  "node_id":"IC_kwDODBCWws5HNJ3U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T21:07:07Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - this PR is complete. Please, check when you have time. Thanks.",
  "created_at":"2022-07-27T14:40:37Z",
  "id":1196850195,
  "issue":1560,
  "node_id":"IC_kwDODBCWws5HVnwT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-27T14:40:37Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> As far as I can see, this PR does a few things:\r\n> \r\n> * It passes BuilderOptions through a lot of constructors, rather than a single integer (`initial`). That will allow us to expand the options, such as a distinction between the initial GrowableBuffer panel size and subsequent ones. (We'll want to make those arguments not template parameters in LayoutBuilder, since I doubt an object like BuilderOptions can be a compile-time constant. ~If LayoutBuilder needs to have a default constructor, maybe the default constructor can supply default BuilderOptions?)~ I see that you did that already.\r\n> * Various clean-ups, which cause indentation diffs.\r\n> \r\n> On closer inspection, it looks to me like the only substantial change is that `initial` \u2192 `options`, with all the supporting changes that needs. Is this right? (Have I missed anything?)\r\n> \r\n\r\njust small stuff:\r\n- `std::void_t` has been replaced as it is C++17\r\n- `BitMasked` mask was fixed. That required additional `GrowableBuffer` concatenate method with an offset defined.\r\n- cleanup LayoutBuilder API - remove temporary/legacy `to_buffer` method\r\n\r\n> The only thing I would say needs to be changed is that a C++ user sees these options with a class name like `awkward::BuilderOptions`, not `awkward::Options`, because these options are specifically for builders.\r\n\r\n",
  "created_at":"2022-07-28T14:41:56Z",
  "id":1198237445,
  "issue":1560,
  "node_id":"IC_kwDODBCWws5Ha6cF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-28T14:41:56Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1561?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1561](https://codecov.io/gh/scikit-hep/awkward/pull/1561?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d74ac1d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.23%`.\n> The diff coverage is `73.86%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1561?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `87.02% <88.09%> (+37.87%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcGFycXVldC5weQ==) | `51.02% <95.23%> (+3.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [...awkward/\\_v2/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWV0YWRhdGFfZnJvbV9wYXJxdWV0LnB5) | `100.00% <100.00%> (+68.42%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <100.00%> (-0.18%)` | :arrow_down: |\n| ... and [19 more](https://codecov.io/gh/scikit-hep/awkward/pull/1561/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-22T20:19:41Z",
  "id":1192906568,
  "issue":1561,
  "node_id":"IC_kwDODBCWws5HGk9I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-22T20:19:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1562?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1562](https://codecov.io/gh/scikit-hep/awkward/pull/1562?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8616456) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **decrease** coverage by `0.00%`.\n> The diff coverage is `14.28%`.\n\n> :exclamation: Current head 8616456 differs from pull request most recent head 524311a. Consider uploading reports for the commit 524311a to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1562?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1562/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1562/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `83.79% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-07-24T19:11:18Z",
  "id":1193377029,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5HIX0F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T17:00:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"FYI, @henryiii had a reason for Awkward to depend on setuptools, and the explicit use of it to get package versions was on top of that. I don't know what that reason was. I'll be getting back to this soon...",
  "created_at":"2022-07-24T20:17:17Z",
  "id":1193387400,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5HIaWI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-24T20:17:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"For pkg_resources (should be swapped out for importlib_metadata).",
  "created_at":"2022-07-24T20:40:10Z",
  "id":1193390611,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5HIbIT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-24T20:40:10Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"importlib_resources suggests to do a bit of a legwork to keep the file alive: https://importlib-resources.readthedocs.io/en/latest/migration.html",
  "created_at":"2022-07-24T23:44:53Z",
  "id":1193419983,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5HIiTP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-24T23:44:53Z",
  "user":"MDQ6VXNlcjI0NTU3Mw=="
 },
 {
  "author_association":"MEMBER",
  "body":"I removed references to `pkg_resources` as described in the [migration guide](https://importlib-resources.readthedocs.io/en/latest/migration.html#pkg-resources-resource-filename).\r\n\r\n@henryiii, if that's everything, if this can be merged as-is, please press the \"squash-and-merge\" button. (I don't personally know that there aren't any hidden dependencies not being specified here. This is the reason I requested a review from you, to make it a to-do item. Thanks!)",
  "created_at":"2022-08-09T23:33:43Z",
  "id":1209993744,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5IHwoQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-09T23:33:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"`importlib_resources` needs to be added to `requirement-test.txt`. I'd normally add `importlib_resources; python_version<\"3.8\"` or similar and make the import toggle between `importlib_resources` and `importlib.resources`, but this is just in tests so I think it's fine.",
  "created_at":"2022-08-10T01:29:31Z",
  "id":1210050610,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5IH-gy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T01:29:31Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, is it in `src` too? I checked for `importlib_metadata` by mistake, which is only in tests. So yes, test dep on `importlib_metadata`, and runtime dep on `importlib_resources` for some minimum Python version, I think 3.9 for `files`, and imports need to toggle between `importlib_resources` and `importlib.resources` based on Python version.",
  "created_at":"2022-08-10T01:33:00Z",
  "id":1210052258,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5IH-6i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T01:33:00Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"In 6d1a3a42a47a7937878f947bb8309543d04d9e9e, I added `importlib_resources` as a strict dependency if Python < 3.7 (the [documentation on importlib.resources](https://docs.python.org/3/library/importlib.html#module-importlib.resources) says \"New in version 3.7\") and imported from the standard library if possible, falling back to `importlib_resources` if necessary.\r\n\r\nAs I understood from some other conversation (email to Scikit-HEP admins?), we'll be dropping Python 3.6 support soon. That would make some of the previous commit unnecessary, but I think there's a Python version updater in pre-commit that would fix it.",
  "created_at":"2022-08-11T17:23:42Z",
  "id":1212272873,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5IQdDp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-11T17:23:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't understand why these tests are failing. I can run them locally (Python 3.9).\r\n\r\nHmm.\r\n\r\n```\r\nAttributeError: module 'importlib.resources' has no attribute 'files'\r\n```\r\n\r\nAha! This was added in Python 3.9: https://docs.python.org/3/library/importlib.html#importlib.resources.files\r\n\r\nAnd that's the recommended translation of the `pkg_resources` method. So is it the case that we can't do this migration (merge this PR) until our minimum Python version is 3.9? That will be a few years.",
  "created_at":"2022-08-20T17:40:33Z",
  "id":1221374708,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5IzLL0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-20T17:40:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> \u2026 runtime dep on `importlib_resources` for some minimum Python version, I think 3.9 for `files`, and imports need to toggle between `importlib_resources` and `importlib.resources` based on Python version.",
  "created_at":"2022-08-20T19:15:53Z",
  "id":1221389844,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5IzO4U",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-20T19:15:53Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I suggested that we hold off on this for the final RC, simply because I wanted to think about the ramifications of loading kernels via the `importlib.resources` mechanism. Particularly because zipapps would likely not work. Of course, this actually isn't a problem for us - you just shouldn't do that, and I can't think of any reason someone would; zipapps need to be portable, and Awkward Array isn't (as in, we have compiled components). ",
  "created_at":"2022-09-02T11:47:11Z",
  "id":1235400888,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5Jori4",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-02T11:47:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Particularly because zipapps would likely not work.\r\n\r\nWhat? I thought the point of `importlib.resources` is that all loaders (including zip) are treated equally? Setuptools is not supposed to be a runtime dependency of anything, and we are working on removing it from being installed in all virtual environments as it is now.",
  "created_at":"2022-09-03T12:24:51Z",
  "id":1236109165,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5JrYdt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-03T12:24:51Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  I thought the point of importlib.resources is that all loaders (including zip) are treated equally?\r\n\r\nRight - to be clear, this PR wouldn't break anything that is already not-working. I wrote that comment after speaking to Jim in a meeting and suggesting we hold off for a second whilst I looked at it in more detail. Explicitly, I wanted to think about whether we could be doing anything better w.r.t library loading to be well behaved.\r\n\r\nMy assertion about zipapps is that the `_ext` module [won't be loadable from a zipapp by default](https://docs.python.org/3/library/zipimport.html#:~:text=Any%20files%20may,be%20rather%20slow). I was also concerned about loading our shared-objects explicitly, but that's not actually an issue as they don't link to one-another, so extracting a single object would be fine.\r\n\r\nThis is not a stopper though - I don't think we need to support zipapps. I was just thinking \"if we need to change this, let's try and keep all our options open\" as a first reflex.",
  "created_at":"2022-09-03T12:37:01Z",
  "id":1236111206,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5JrY9m",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-03T12:37:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> My assertion about zipapps is that the _ext module [won't be loadable from a zipapp by default](https://docs.python.org/3/library/zipimport.html#:~:text=Any%20files%20may,be%20rather%20slow)\r\n\r\nThe context manager turns the virtual file into a temporary real one, so it should be. Though it might not work on Windows on Python 3.8+ due to the protection against loading DLLs from arbitrary directories, so you might need to manually add it.\r\n\r\nNot sure ZipApps were ever intended to work with binary packages, though. You'd need one per target or a really big one with all arches and OS's.",
  "created_at":"2022-09-05T16:03:20Z",
  "id":1237253277,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5Jvvyd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T16:03:20Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The context manager turns the virtual file into a temporary real one, so it should be.\r\n\r\nAh, I'm referring to the other code we have that imports `_ext`. These dll imports don't work for zipapps.\r\n\r\n> Not sure ZipApps were ever intended to work with binary packages, though. You'd need one per target or a really big one with all arches and OS's.\r\n\r\nNo, indeed, it's an academic point that has no bearing on us shipping this PR :laughing: ",
  "created_at":"2022-09-05T19:45:05Z",
  "id":1237418430,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5JwYG-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T19:45:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We discussed this in our Awkward/Uproot meeting today (@henryiii was there, @veprbl was not), and concluded that it's important to get this in before splitting git branches into `main` and `main-v1` (see #1626), _and_ that it is ready. The dependency on `importlib_resources` if Python < 3.9 is what makes that work.\r\n\r\nSo when the above tests pass, I'll merge it. Actually, I'll enable auto-merge now.",
  "created_at":"2022-09-08T17:04:27Z",
  "id":1240984548,
  "issue":1562,
  "node_id":"IC_kwDODBCWws5J9-vk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T17:04:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1563?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1563](https://codecov.io/gh/scikit-hep/awkward/pull/1563?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7f70752) into [docs](https://codecov.io/gh/scikit-hep/awkward/commit/13eb6984a57e6b64353268f037fa23da737d4094?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (13eb698) will **decrease** coverage by `0.32%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 7f70752 differs from pull request most recent head b96bc8a. Consider uploading reports for the commit b96bc8a to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1563?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWV0YWRhdGFfZnJvbV9wYXJxdWV0LnB5) | `31.57% <0.00%> (-33.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `49.15% <0.00%> (-29.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcGFycXVldC5weQ==) | `48.00% <0.00%> (-13.75%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/listoffsetform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2xpc3RvZmZzZXRmb3JtLnB5) | `78.82% <0.00%> (-3.53%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/regularform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3JlZ3VsYXJmb3JtLnB5) | `74.71% <0.00%> (-3.45%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `81.50% <0.00%> (-1.74%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/recordform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3JlY29yZGZvcm0ucHk=) | `64.36% <0.00%> (-1.73%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `73.84% <0.00%> (-1.54%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/unmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3VubWFza2VkZm9ybS5weQ==) | `75.00% <0.00%> (-1.39%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/indexedoptionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2luZGV4ZWRvcHRpb25mb3JtLnB5) | `81.92% <0.00%> (-1.21%)` | :arrow_down: |\n| ... and [3 more](https://codecov.io/gh/scikit-hep/awkward/pull/1563/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-24T22:47:16Z",
  "id":1193409015,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HIfn3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-13T22:12:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This is looking really good (especially those four icons!), though I'm even more confused about which PRs are now active. (Does this supercede #1552?)\r\n\r\nSince this is changing our public website, perhaps we should get a pool of people to review it, especially users of different experience levels. If there's anyone we know who haven't used Awkward Array before, it could be good to point them at the new docs and see if they find what they're looking for.\r\n\r\nFrom my side (I'm looking at this with a laptop again), I still think it's important to load up the left-bar. A complex front page with lots of detail is self-defeating, but a long list of things in the left-bar is not: it's off to the side, out of the way, but available for an in-page search or direct click for people who know what they're looking for. Also, I think the set of things in that left-bar should be stable: the same set, regardless of which page you're looking at. Although the four icons on the front page divide the docs into Beginner's Guide, User's Guide, API Reference, and Contributor's Guide, it can be a single document from the perspective of the left-bar. It's possible to put section-headings in the left-bar (as you have: Beginner's Guide and User's Guide share a left-bar, but they all could). Strangely, clicking on Beginner's Guide goes to the _second_ page in that first group (skips \"What is a...\").\r\n\r\nWith the four icons, we have four major divisions, but the top bar still says User Guide, API Reference, C++ Reference. Having the top bar be these four major divisions would cement the distinctions. And again, C++ Reference shouldn't be so highlighted.\r\n\r\nWithin the Guides, the \"Converting arrays,\" \"Creating new arrays,\" sub-sections are not expanded by default. If that's hard to do, it would be better to not have sub-sections: it would be better to have the pages like \"Converting to/from NumPy,\" \"Converting to/from Python objects\" be top-level within the User's Guide. It's more important for a word like \"NumPy\" to be findable by an in-page search or at a glance when scrolling the left-bar than it is for \"Converting\" to be. The user with a NumPy array might not think of or recognize \"Converting\" as what they want, but would recognize \"NumPy\" (it's more specific).\r\n\r\nSuper-minor, but in\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/180826865-aa1fd625-9d24-4859-b211-fee2d6e56c54.png)\r\n\r\nI don't think the badges need to be boxed. All my eyes notice is that the box doesn't line up with the four icons boxes.\r\n\r\nIn fact, we don't even need the badges there. (I'm not very convinced of the usefulness of the badges in general, since they all look the same to me, but maybe they can be on the GitHub README only, and not the other front-pages.) [NumPy](https://numpy.org/doc/stable/), [SciPy](https://docs.scipy.org/doc/scipy/), and [Pandas](https://pandas.pydata.org/docs/) all use this space for version, date, download docs, and useful links. The less we have above the four icons, the better, because that improves the chances that all four icons will be visible on someone's browser window. (I, for one, will always be clicking through to API reference because I'm giving people links to which function they should use. If there's too much stuff above the icons, I have to scroll down to get to that box. Even the text under each of the four icons can be minimized.)",
  "created_at":"2022-07-25T16:29:27Z",
  "id":1194320327,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HL-HH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T16:29:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This is looking really good (especially those four icons!), though I'm even more confused about which PRs are now active. (Does this supercede #1552?)\r\n\r\nI'm rolling out a series of focused PRs that we can review independently. I was originally working on a single branch but it would never really be \"done\", and it would be nearly impossible to review from the diffs alone. Once #1552 is merged, this changeset will get smaller :) You can see in the issue description a diagram that indicates where in the \"series of PRs\" each PR fits.\r\n\r\n> Since this is changing our public website, perhaps we should get a pool of people to review it, especially users of different experience levels. If there's anyone we know who haven't used Awkward Array before, it could be good to point them at the new docs and see if they find what they're looking for.\r\n\r\nI agree in principle. My thought is that the earliest of PRs are just \"boilerplate\" / getting the plumbing in. The latter PR (#.3) is more content focused, and would be better for externals to review.\r\n\r\n> From my side (I'm looking at this with a laptop again), I still think it's important to load up the left-bar. A complex front page with lots of detail is self-defeating, but a long list of things in the left-bar is not: it's off to the side, out of the way, but available for an in-page search or direct click for people who know what they're looking for. \r\n\r\nSo (forgive me if I'm repeating parts of another thread, I'm not sure what we've both written and read) this is 50% design choice and 50% constraint. The theme that we're using here has merit because it's used by the pydata stack that users will already know. It follows that these sites do not have any (primary) sidebar content on their index page. Now, as it turns out, it is simple to add this: https://github.com/holoviz/holoviews/blob/master/doc/_templates/sidebar-nav-bs.html\r\nYou can see an example of what this looks like [here](https://holoviews.org/reference_manual/holoviews.core.data.html):\r\n![image](https://user-images.githubusercontent.com/1248413/180857439-c44c79b6-97c2-474d-83ff-b6c6ccaed769.png)\r\n\r\nAlso, to add - PyData will be releasing a new update to the theme that will remove the sidebar entirely on the index page:\r\n![image](https://user-images.githubusercontent.com/1248413/180858191-15657204-d99e-4d40-a69b-e14890e8df9f.png)\r\n\r\nSo, the real question is whether to do it. I'm personally not a fan; content duplication is one thing, but the real reason I like this theme is that it makes the menu more discoverable by avoiding overloading the user with content. Putting everything in a single sidebar feels _less_ discoverable because you need to know where to look - if you have to scroll through a large list of items, the individual items are less noticeable. However, recognising that some users might prefer a \"flat\" list, I added the toctree to the index of the user guide which lists _all_ pages.\r\n\r\nIn particular, I feel that the different sections of the documentation as seen [here](https://awkward-array.readthedocs.io/en/docs-phase-2/index.html) serve different purposes. On the _api reference_ I agree that CTRL+F is a bonus, because I often know what I'm looking for and want to quickly check some parameters. Meanwhile, the user-guide should be more of a browsing experience - reading prose instead of scan-reading function signatures. By isolating the toctrees into per-navbar sections, we better reflect this.\r\n\r\nE.g. I find this \r\n![image](https://user-images.githubusercontent.com/1248413/180854454-1f725344-f48b-4857-8961-a41c2bb8d71a.png)\r\nless readable than \r\n![image](https://user-images.githubusercontent.com/1248413/180854494-dedb48e5-2267-4237-8d2f-d3706593fd11.png)\r\n\r\nAs for search, we have a good Sphinx-search which is the usual method for finding things on documentation sites powered by Sphinx.\r\n\r\n> Also, I think the set of things in that left-bar should be stable: the same set, regardless of which page you're looking at. Although the four icons on the front page divide the docs into Beginner's Guide, User's Guide, API Reference, and Contributor's Guide, it can be a single document from the perspective of the left-bar. It's possible to put section-headings in the left-bar (as you have: Beginner's Guide and User's Guide share a left-bar, but they all could). \r\n\r\nIf we do this (Sphinx calls these non-link headings \"captions\"), then we lose the ability to use captions to group anything else on the site. I feel like that might be a step backwards. I actually had these captions as links before, but I found captions more readable:\r\n- we no longer need an \"Index\" link that doesn't do anything for each caption\r\n- the text is bold and clearly a grouping \r\n\r\n> Strangely, clicking on Beginner's Guide goes to the _second_ page in that first group (skips \"What is a...\").\r\n\r\nWe can change this! But, [NumPy](https://numpy.org/doc/stable/) does this too. I can see the merit in linking to what-is-an-awkward-array because it's part of that section, and I would logically click \"get started\" If I didn't know what Awkward did.\r\n\r\nHowever, I wonder whether we should carry on as we are, but instead link to \"what is an awkward array\" from a button on the index:\r\n![image](https://user-images.githubusercontent.com/1248413/180856182-134ba896-800e-4993-aa4e-35c673a96d01.png)\r\n\r\n\r\n> With the four icons, we have four major divisions, but the top bar still says User Guide, API Reference, C++ Reference. Having the top bar be these four major divisions would cement the distinctions. And again, C++ Reference shouldn't be so highlighted.\r\n\r\nHaving the top bar forcibly reflect the four-card layout in the index feels like a reasonably severe constraint to me. It's already standard in PyData to have the primary nav (top bar) be separate to the cards (which are like \"hot links\"). Are you willing to move on this?\r\n\r\n> Within the Guides, the \"Converting arrays,\" \"Creating new arrays,\" sub-sections are not expanded by default. If that's hard to do, it would be better to not have sub-sections: it would be better to have the pages like \"Converting to/from NumPy,\" \"Converting to/from Python objects\" be top-level within the User's Guide. It's more important for a word like \"NumPy\" to be findable by an in-page search or at a glance when scrolling the left-bar than it is for \"Converting\" to be. The user with a NumPy array might not think of or recognize \"Converting\" as what they want, but would recognize \"NumPy\" (it's more specific).\r\n\r\nI think I've mostly spoken to this a bit earlier w.r.t information overload & the usage differences between API ref and the user guide. I'd be happy to keep discussing it though :)\r\n\r\n> Super-minor, but in\r\n> \r\n> ![image](https://user-images.githubusercontent.com/1852447/180826865-aa1fd625-9d24-4859-b211-fee2d6e56c54.png)\r\n> \r\n> I don't think the badges need to be boxed. All my eyes notice is that the box doesn't line up with the four icons boxes.\r\n> \r\n> In fact, we don't even need the badges there. (I'm not very convinced of the usefulness of the badges in general, since they all look the same to me, but maybe they can be on the GitHub README only, and not the other front-pages.) [NumPy](https://numpy.org/doc/stable/), [SciPy](https://docs.scipy.org/doc/scipy/), and [Pandas](https://pandas.pydata.org/docs/) all use this space for version, date, download docs, and useful links. The less we have above the four icons, the better, because that improves the chances that all four icons will be visible on someone's browser window. (I, for one, will always be clicking through to API reference because I'm giving people links to which function they should use. If there's too much stuff above the icons, I have to scroll down to get to that box. Even the text under each of the four icons can be minimized.)\r\n\r\nYes, I was hoping you'd say this! I've made use of the reclaimed space in the above mockup showing the suggested button to \"what is an awkward array\"\r\n",
  "created_at":"2022-07-25T19:17:43Z",
  "id":1194510263,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HMse3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T19:24:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"At a high-level, we're not restricted to only mimic PyData, despite that being something I reference a lot here. It's rather that I think there's a lot of value in keeping things as reasonably similar as possible.\r\n\r\nFor example, I actually don't love how NumPy's docs hide content by not showing a drop down:\r\n![image](https://user-images.githubusercontent.com/1248413/180858449-8ccf6207-fb02-448f-8d60-33cc4e648328.png)\r\n\r\nSome of these options are actually sections with their own subtrees, but you can't as a user tell that because the drop-down is disabled.\r\n\r\nEqually, for the API reference NumPy does not provide a flat list of contents, which impedes the \"what else can I do?\" workflow. I am on the fence as to whether we should change our API reference to also be sectioned, and have the generated toctree as the index. What we have for the api-reference index is already fairly flat. But, that's a later discussion!\r\n\r\n",
  "created_at":"2022-07-25T19:45:13Z",
  "id":1194542100,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HM0QU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T19:45:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> E.g. I find this\r\n>\r\n> less readable than\r\n\r\nActually, I find the expanded-out more readable\u2014for the navbar, at least. I don't think the content (central column) should duplicate it.\r\n\r\nWhat's bothering me about it is that the names of individual pages are descriptive and helpful, and they've been grouped into (I think) meaningful sections, but the names of those sections were made up to fill in a blank. I don't think \"Converting arrays\" (and the others) is a helpful name. If the two-level structure is technically difficult, unaesthetic, or hard to read, then we should flatten it to just the pages.\r\n\r\nAll of this comes down to my belief (from experience of being a user) that users don't know exactly what they're looking for. That's why control-F is more useful than a search bar: incremental search is different from search in that it can help you find things that you don't know the whole word for. You type a little, backspace, type a little, backspace, and based on the whole-screen context of what the incremental search is interactively finding, you come to realize what it is you want to search for. In a search bar, you only find what you ask for.\r\n\r\n(Also, that search facility is not great. It's better than GitHub's, but that's a low bar. It's rare for me to find what I'm looking for through a Sphinx search.)\r\n\r\nThe [original Awkward documentation](https://github.com/scikit-hep/awkward-0.x#readme) (and [Uproot](https://github.com/scikit-hep/uproot3#readme)) was one long page, to support that kind of discovery. Now there's too much to tell to actually get it on one page\u2014zero click-throughs\u2014but we can still get it pretty flat, like one or two click-throughs. At every click-through, a fraction of readers give up or follow the wrong path.\r\n\r\nSo I won't be a stickler on any visual arrangement, but it has to satisfy the constraint of minimizing the number of clicks from landing page to the information (flattening the tree). The current docs are failing at this, too: the fact that you have to click from awkward-array.org through \"Python reference\" to get to a page that has all of the functions listed (and then click on the function to learn about) is currently hiding information from users. A lot of user questions are answered by just saying that such-and-such a function exists\u2014they're not finding it, and presumably, they're looking. I don't remember that happening as much with the single-page docs. (Then it was _other_ problems; Awkward 0.x had a lot of quirks.)\r\n\r\nEven if the top bar is not the four sections, \"C++ Reference\" should not be up there. Having prominent links to places most people won't want to go takes away from getting them to where they do want to go. We should be thinking of this as funnelling.\r\n\r\nAll in all, I'm probably being too specific in my comments, since I'm probably missing good points from you by going round-robin between this and other things. I should leave you to have more autonomy in designing this. That's why in this comment, I tried to focus more on the high-level: why I'm wanting to flatten the tree/minimize the number of click-throughs. I hope it's more helpful than bewildering.",
  "created_at":"2022-07-25T21:10:03Z",
  "id":1194633607,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HNKmH",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-25T21:10:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"There's a lot to reply to here, so I think it's worth stating my assumptions up front\r\n- We want to standardise our docs with big players\r\n- We want to strike a balance between zero structure (and single click to any page) and click-fatigue / poor discoverability\r\n\r\nBefore we get into the weeds, here's an alternative API doc that uses the JB theme: https://docs.xarray.dev/en/stable/api.html\r\n\r\nI like this theme _in general_, but I miss the ability to drop a level of nesting which the top bar provides. I see that as a bonus, not a disadvantage\r\n\r\n> What's bothering me about it is that the names of individual pages are descriptive and helpful, and they've been grouped into (I think) meaningful sections, but the names of those sections were made up to fill in a blank. I don't think \"Converting arrays\" (and the others) is a helpful name. If the two-level structure is technically difficult, unaesthetic, or hard to read, then we should flatten it to just the pages.\r\n\r\nSo, yes - a big part of this is the actual names and grouping. I do think the current hierarchy is needed - there's just so much content to discuss. If we place all `how-to-convert` contents into a single document, we end up with a very large secondary sidebar (right hand side) that is less readable. Whereas, for xarray, which has fewer headings, it's fine: https://docs.xarray.dev/en/stable/user-guide/interpolation.html\r\n\r\nI actually like how we currently break down topics. It might not be the \"right\" breakdown, but the amount of content per-documents feels digestible yet comprehensive. I don't think eliminating a level of toctree nesting would be a good fit here in terms of document size.\r\n\r\nBut, I haven't yet tackled these documents with any serious overhaul - again, trying to keep things lightweight & focused per PR. I picture doing this in a later (third) PR that looks mainly at content, and will probably be a longer one (unless I manage to break it down per-section). I'm aiming to have small, short lived PRs as I know the bigger they get, the longer they take to merge & review.\r\n\r\n> All of this comes down to my belief (from experience of being a user) that users don't know exactly what they're looking for. That's why control-F is more useful than a search bar: incremental search is different from search in that it can help you find things that you don't know the whole word for. You type a little, backspace, type a little, backspace, and based on the whole-screen context of what the incremental search is interactively finding, you come to realize what it is you want to search for. In a search bar, you only find what you ask for.\r\n\r\nI acknowledge this case, and mentioning incremental search is an important nuance that I'll keep in future discussions! Maybe this is something we should consider for our sphinx search too, e.g.: https://readthedocs-sphinx-search.readthedocs.io\r\n\r\nI'll reply to the rest of this below.\r\n\r\n> (Also, that search facility is not great. It's better than GitHub's, but that's a low bar. It's rare for me to find what I'm looking for through a Sphinx search.)\r\n\r\nHuh, I have not had this experience with Sphinx, but who knows as to which software we're both searching! In any case, it's clear that we don't want to exclusively rely on search for discoverability (and i wouldn't propose it either!)\r\n\r\n> The [original Awkward documentation](https://github.com/scikit-hep/awkward-0.x#readme) (and [Uproot](https://github.com/scikit-hep/uproot3#readme)) was one long page, to support that kind of discovery. Now there's too much to tell to actually get it on one page\u2014zero click-throughs\u2014but we can still get it pretty flat, like one or two click-throughs. At every click-through, a fraction of readers give up or follow the wrong path.\r\n\r\nYes, as discussed above, I think we need to find a compromise between these competing goals. I found the awkward 1.0 docs a challenge before we removed the private namespaces. But, now we have much more content thanks to merging the two sites.\r\n\r\nI really want to make a case for \"user interaction\" differences between API docs which need to be easy to scan, and guides which need to be easy to read. I want to give the most help to the user that _doesn't_ know where to look; experienced users will remember where to navigate to (but we shouldn't make this harder than needs be).\r\n\r\nI've seen some docs _somewhere_ with a page that creates user \"case studies\", e.g.\r\n> I am a HEP researcher who wants to perform combinatorics on my data ...\r\n>\r\n> I am a data scientist working with ragged JSON data. I want to perform ...\r\n\r\nWe might want something like this (again, another PR) to help make the docs accessible from different user bases. \r\n\r\n\r\n> So I won't be a stickler on any visual arrangement, but it has to satisfy the constraint of minimizing the number of clicks from landing page to the information (flattening the tree). The current docs are failing at this, too: the fact that you have to click from awkward-array.org through \"Python reference\" to get to a page that has all of the functions listed (and then click on the function to learn about) is currently hiding information from users. A lot of user questions are answered by just saying that such-and-such a function exists\u2014they're not finding it, and presumably, they're looking. I don't remember that happening as much with the single-page docs. (Then it was _other_ problems; Awkward 0.x had a lot of quirks.)\r\n\r\nGoing further with my \"two kinds of user\", I feel it's mainly the API reference that needs to be fast. In my experience, when I'm needing an API reference, I want it fairly rapidly. When I want to understand how something works, I am happier to take a bit more time. That's why I like having the API reference on the top navbar - it's a single click away. I don't like how collapsed NumPy and SciPy's docs are in this regard, but I recognise that they have even bigger challenges regarding API size.\r\n\r\nFor the user guide, it's currently three clicks from the landing page to a leaf. I think this is reasonable (minimum one click to go *somewhere* (the guide), another click to navigate to a topic. If we want to make the average case \"2 clicks\", then we could look to make the entry pages (\"how-to-convert.md\" etc) give a high-level overview (like a more detailed generated-toctree) of their section, e.g.\r\n> ## I want to *create Awkward Arrays from existing data*\r\n> Awkward Arrays can be created from a wide variety of Python data types, including NumPy arrays, Python objects, JSON, ROOT, Apache Arrow/Parquet, pandas, and generic (flat) buffers with metadata. \r\n\r\nThen these \"parent\" pages actually have merit\r\n\r\n> Even if the top bar is not the four sections, \"C++ Reference\" should not be up there. Having prominent links to places most people won't want to go takes away from getting them to where they do want to go. We should be thinking of this as funnelling.\r\n\r\nYou did mention this already, I just haven't done it yet :turtle: It is certainly worth discussing what *should* go here. Maybe we link to it from the API reference. My only reservation here is that docs which stray too far from a common navigation structure get tricky to navigate (I'm looking at you, NumPy). Maybe it's fine for us, because really very few people should be needing these docs. \r\n\r\nI don't yet have a clear idea of what *should* go in the navbar besides API ref and user guide, so it will be nice to bikeshed that at some point. I did originally have a \"high level\" and \"Low level\" guide, but it felt like an arbitrary distinction, at least for now whilst it doesn't feel like we have a huge amount of content besides \"create arrays with layout classes\" (and maybe extending numba?). Maybe a design decision is thinking about what we want to write for \"library authors\" (which I'm going to call the \"integration guide\").\r\n\r\n> All in all, I'm probably being too specific in my comments, since I'm probably missing good points from you by going round-robin between this and other things. I should leave you to have more autonomy in designing this. That's why in this comment, I tried to focus more on the high-level: why I'm wanting to flatten the tree/minimize the number of click-throughs. I hope it's more helpful than bewildering.\r\n\r\n",
  "created_at":"2022-07-25T22:46:07Z",
  "id":1194731650,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HNiiC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T22:46:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Some minor additions:\r\n\r\nI don't want to weight clicks from the navbar too strongly as \"clicks\" - there's a fixed, small number of links here, and users will end up muscle memory / bookmarking this. E.g., I personally don't type the full URL to the docs, I either navigate to GitHub and click the link (because my muscle memory is quickest to type GH links, and I know where the docs button is), or using a Chrome Search Engine that queries the RTD i.e. this first navigation is automatic for familiar users, I suspect. \r\n\r\nFor new users, I don't care so much about raw clicks as I do about whether they knew they were making the right clicks, i.e. if the structure was helpful rather than opaque (sorry NumPy!)\r\n\r\nGiven how much is yet undecided with respect to structure, I vote that we down-weight it as a priority for this first couple of PRs. Once the content PRs get underway, we might see a nicer structure emerge.\r\n\r\nActually, thinking about it - if you're concerned about the docs changing too much in the intervening period, we could make a \"docs\" branch that these PRs merge against. That way, the \"latest\" docs do not change until we're ready. This should be fairly easy to merge back into master as we're nearly entirely touching docs-only content.",
  "created_at":"2022-07-25T22:54:43Z",
  "id":1194738177,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HNkIB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T22:54:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Two very good ideas above:\r\n\r\n   1. Putting documentation improvements into a `docs` ranch so we can develop them in more than just a single PR.\r\n   2. Grouping documentation pages with names beginning with \"I want...\", as in \"I want to make an Awkward Array from existing data\" instead of generic verbs like \"Converting.\" As long as the docs are consistent about using the first person like this, I think that could be a perfect mental cue for someone who's thinking about that.\r\n\r\nI had almost forgotten about my desire to divide things into high level and low level, and I agree that it could be hard for people to see when the first coming into it. I have, however, been gravitating toward that terminology when explaining things to people. It's really a analyst user versus downstream developer distinction, but the latter could just be a late section of the user's guide.",
  "created_at":"2022-07-25T23:01:21Z",
  "id":1194743386,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HNlZa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T23:01:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It's really a analyst user versus downstream developer distinction, but the latter could just be a late section of the user's guide.\r\n\r\nThat's the direction I'm currently leaning into; the \"Fundamentals of Awkward Array\" should be followed by \"Building libraries with Awkward Array\"\r\n\r\nI will get on the `docs` branch",
  "created_at":"2022-07-26T08:41:11Z",
  "id":1195184805,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HPRKl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-26T08:41:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've added the release log to the navbar instead of the C++ reference. I think this should be fairly prominent, but feel free to suggest moving it.\r\n![image](https://user-images.githubusercontent.com/1248413/180996175-5fe11527-34eb-4e2b-b115-76ab55ab907d.png)\r\n\r\nI've moved the C++ link to a card in the API reference section:\r\n![image](https://user-images.githubusercontent.com/1248413/180996146-902ad1e9-16b7-4f99-971d-4eec29da880a.png)\r\n\r\nAPI reference links now use the Sphinx `py:class` and `py:func`. To support this, the auto-generated (and manually curated) ReST files now have `py:currentmodule` and `py:class` directives.\r\n![image](https://user-images.githubusercontent.com/1248413/181020559-945e9c92-1414-4d0e-8323-0d2bd3fafab9.png)\r\n\r\nI'm not going to go too much further with this work - we will eventually be dropping v1 docs anyway IIUC. This just makes things consistent between the pybind11 classes and those spidered by the `generate_docstrings` function. In the long run, we'll likely use autodoc instead of this tool.",
  "created_at":"2022-07-26T13:43:42Z",
  "id":1195503707,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HQfBb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-26T13:43:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is along the lines of what I had in mind for \"burying\" the entry point into doxygen. It's not on the main screen, a user has already clicked through to API reference, this is a last check \"Did you mean C++?\" Passing this block, it's all Python. It's like an early return in a function. I like it.",
  "created_at":"2022-07-26T15:52:04Z",
  "id":1195661432,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HRFh4",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-26T15:52:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"## New `reference` Endpoint\r\nNow the API docs sit under `/reference`. This means that we can clean-up the docs directory, but _more_ importantly, it means that our generated and curated API docs are both clearly API documents according to the URL, e.g\r\n- `ak.ArrayBuilder.html`\r\n- `_auto/ak.all.html`\r\nvs\r\n- `reference/ak.ArrayBuilder.html`\r\n- `reference/_auto/ak.all.html`\r\n\r\nTo guarantee that _existing_ URLs don't break, I've added a redirection list that maps to these locations.\r\n\r\n## New Release Section\r\nRelease notes now sit under a release-notes section. \r\n![image](https://user-images.githubusercontent.com/1248413/181343612-7e5ba4eb-ef11-48a0-980d-7d1e5ee6d0f3.png)\r\nThis is preparing for using a tool like `github-activity` as part of our release process down the line (no rush on this). I intended to remove the changelog parsing from the build step, which should reduce build times. Ultimately I envisage us having a web-based release workflow like the JupyterLab project does. They have jupyter-releaser to automate this, it may/may not be useful for us.\r\n",
  "created_at":"2022-07-27T18:17:31Z",
  "id":1197141357,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HWu1t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-27T18:48:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"\r\n## Redundant Headers\r\nI've removed the section titles from the API reference docs. They take up a lot of space:\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/1248413/181249791-e0fa6107-eba2-47d4-b0be-42d0c10be08e.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/1248413/181250029-febad8f2-5fca-4ae3-b539-709c8799a9b0.png)\r\n\r\nThere's a lot less visual noise here now. We might want to do some more formatting / theming work, but I think this is a good starting point. I've added a hidden anchor so that existing links don't break.\r\n\r\nHowever, this removes the secondary sidebar links: \r\n![image](https://user-images.githubusercontent.com/1248413/181342214-0b5ff25c-745b-44d9-961b-f7f6c836aee9.png)\r\n\r\nIt turns out that it is really hard to get Sphinx to put non-headers into the table of contents (and therefore, the right bar). I wrote a local extension to take more control over the table of contents, which gives this:\r\n![image](https://user-images.githubusercontent.com/1248413/181342428-7c52ada8-0315-4c13-8d12-6746db6134b5.png)\r\n\r\nIt's not beautiful code, but that's because the underlying Sphinx code is gnarly too. So, the question is\r\n```mermaid\r\ngraph LR;\r\nwant_headers1{Want headers?}\r\nwant_headers2{Want headers?}\r\nneed_sidebar{Need sidebar links?}\r\nuse_extension[Use extension]\r\nuse_headers[Use headers]\r\nno_headers[No headers]\r\n\r\nneed_sidebar --yes--> want_headers1\r\nwant_headers1--no-->use_extension\r\nwant_headers1 --yes-->use_headers\r\n\r\nneed_sidebar --no-->want_headers2\r\nwant_headers2 --no-->no_headers\r\nwant_headers2 --yes-->use_headers\r\n```\r\n\r\n\r\n@jpivarski do you have any strong feelings about this?\r\n\r\nI feel like the answer might be \"yes, we want sidebar links, because there are far more classes in v2\". If so, it's then a question of \"do we want headers\". In general, I don't love writing fragile code to implement something non-essential, so it would be good to measure how essential it is to avoid using headers too, and how fragile the code is!\r\n",
  "created_at":"2022-07-27T18:22:18Z",
  "id":1197170359,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HW163",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-27T18:48:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Fixing the redundant headers looks good when unlinked, but I didn't like the way that they'd be highlighted when linking to them. I preferred linking to the header, rather than the autodoc, because linking to the autodoc would turn it yellow and scroll almost past it. It was counterproductive, but could be fixed with styles.\r\n\r\nI see that it's still a page per function _or_ class, and that's good. You're asking about subsections (on the right) for methods of classes? They're not very necessary. If we had a lot of classes, they'd be important, but Awkward is mostly functions. Also, there's a lot of content under `ak.Array.__getitem__` that should be its own page (or pages). People are having trouble finding the slicing documentation that's in there.\r\n\r\nSo if you don't like what you had to do to get the method subsections to appear, it overrides my slight preference to have them\u2014you can leave them out.",
  "created_at":"2022-07-27T20:45:39Z",
  "id":1197348848,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HXhfw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-27T20:45:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks Jim. It seems like there are other people with an interest in being able to modify the toc tree generation, so this might end up being something Sphinx can provide. In the practical timeline, it would need to be a nicer extension. I can keep an eye on it there. In some ways, the case that is most problematic is classes with empty docstrings - then the docstring to header ratio is very small. But, those aren't \"good docs\" to begin with - empty docstrings are only very slightly useful. So, maybe having  a header is fine here. I'll play it out tomorrow :)",
  "created_at":"2022-07-27T22:38:55Z",
  "id":1197447825,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HX5qR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-27T22:38:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"## Class Definitions\r\n\r\nClass definitions are now inline for the curated class docs (`ak.layout`):\r\n![image](https://user-images.githubusercontent.com/1248413/181745252-fd6aedf3-5b46-46f6-ad3b-48ff5c270dab.png)\r\n\r\nThis will not look reasonable as-is for `ak.Array`, but as Jim notes above - this probably needs splitting into separate pages, or some other kind of rework. I tentatively suggest that the details in `Array.__getitem__` are more like usage-documentation than API documentation. There's no hard-and-fast rule here, but I'm thinking that these docs can go into the user-guide, with a ``:doc:`...` `` role linking from `Array.__getitem__`. I'd do this in PR 3.",
  "created_at":"2022-07-29T11:06:06Z",
  "id":1199150602,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HeZYK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T11:06:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> This will not look reasonable as-is for `ak.Array`, but as Jim notes above - this probably needs splitting into separate pages, or some other kind of rework.\r\n\r\nIt would be advantageous to move much of the property and method docs for `ak.Array` (and other classes) out of docstrings into specialized pages, such as \"Slicing\", instead of the docstring for \"__getitem__\". All of these classes, including layouts, forms, and types, should have short docstrings\u2014many of them are currently empty.\r\n\r\nBut beyond the information about slicing being more discoverable if it's in its own page, having shorter docstrings would reduce the output of error messages, when the error message include the source code of the function that failed (mostly in pytest), because that docstring is miles long.",
  "created_at":"2022-07-29T14:42:29Z",
  "id":1199428329,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HfdLp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T14:42:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It would be advantageous to move much of the property and method docs for ak.Array (and other classes) out of docstrings into specialized pages\r\n\r\nAgreed. I'm thinking of the user-guide for this, so that we can keep a very clear distinction between the more black-and-white docstrings that describe usage, and the user-level information that describes semantics & motivation",
  "created_at":"2022-07-29T14:52:04Z",
  "id":1199450886,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HfisG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T14:52:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not going to touch much more in this PR. Structurally I want to address how the auto-generated docs are handled, but that will probably need to be its own PR too. Moreover, it doesn't need to happen *right now*.\r\n\r\nThe objectives of this PR were mainly structural. The next PR in this series will probably focus more on content, including reworking signatures to be less verbose.\r\n\r\nPreview of this PR: https://awkward-array.readthedocs.io/en/docs-phase-2/",
  "created_at":"2022-07-29T14:54:49Z",
  "id":1199457364,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HfkRU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T14:56:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - @ManasviGoyal is going to write a new LayoutBuilder documentation: both the reference guide and the user guide. Could you please, coordinate with each other? Thanks",
  "created_at":"2022-07-29T16:43:09Z",
  "id":1199715295,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HgjPf",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2022-07-29T16:43:09Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"> @agoose77 - @ManasviGoyal is going to write a new LayoutBuilder documentation: both the reference guide and the user guide. Could you please, coordinate with each other? Thanks\r\n\r\nA good place for it would be in the doxygen\u2014in other words, in comments in the header files themselves (with appropriate formatting). That way, if anybody includes the header files in their own project, they get the documentation along with it.\r\n\r\nBut also having dedicated documents in Sphinx would also be good.\r\n\r\nAs for content, the most important thing would be \"how to use it.\" Primarily, we should be thinking of the ctapipe project. We should also have a coordinated meeting with them.",
  "created_at":"2022-07-30T23:39:19Z",
  "id":1200313432,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5Hi1RY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-30T23:39:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > @agoose77 - @ManasviGoyal is going to write a new LayoutBuilder documentation: both the reference guide and the user guide. Could you please, coordinate with each other? Thanks\r\n> \r\n> A good place for it would be in the doxygen\u2014in other words, in comments in the header files themselves (with appropriate formatting). That way, if anybody includes the header files in their own project, they get the documentation along with it.\r\n> \r\n> But also having dedicated documents in Sphinx would also be good.\r\n> \r\n> As for content, the most important thing would be \"how to use it.\" Primarily, we should be thinking of the ctapipe project. We should also have a coordinated meeting with them.\r\n\r\n@jpivarski Yes. A meeting with the astrophysicists will be really helpful to get their feedback and inputs.\r\n\r\nFor the dedicated document, I was thinking that we can have a tutorial kind of thing in which we can add some examples from the tests with steps-by-step instructions for the users. We can focus on just Numpy, Listoffset and Record Layout Builders as the ctapipe project will use these mainly.\r\n\r\nI was planning to add it in `docs-src` with other `how-to` documents. Would that be the right place to add it? Also what should be the file type, Markdown or something else?\r\n\r\n",
  "created_at":"2022-07-31T00:02:05Z",
  "id":1200315755,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5Hi11r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-31T04:14:33Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"Any new meeting would be after this upcoming week, but I'll get that planned as soon as I can.\r\n\r\nThe how-to docs would be with the other tutorial docs, which used to be in docs-src (as Jupytext), but they're being heavily reorganized and restructured by @agoose77. The best thing to do would be to write the how-to instructions independently of where they'll eventually be going, and @agoose77 will find a place for them.\r\n\r\nMarkdown is a good neutral format. We have doxygen configured to interpret markdown. To preview the formatting, you could write it directly in GitHub. You could even do drafts in comments on a pull request or on a new page of the wiki.",
  "created_at":"2022-07-31T14:19:41Z",
  "id":1200434738,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HjS4y",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-31T14:19:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @jpivarski . I replied over on #1574, but I'm not hugely worried as to which approach @ManasviGoyal takes - as long as it's Markdown, I can integrate it :)\r\n\r\nRE this PR, I'd be happy for you to review it at some point. I'm away at a wedding from 4th August - 9th, so if you are super busy at the moment then don't worry - we can pick up when I get back!\r\n\r\nThere are some outstanding tasks that were raised here, or elsewhere, that I've [moved to \"todo\"](https://github.com/scikit-hep/awkward/projects/7#column-19008268). I think the most pressing issue is probably the documentation contents now - filling out the existing user guide. I believe that the current set of topics are good places to start - constrained, focused, and in some cases requested by users. In the next PR, then, I'll prioritise working on _content_ rather than doc layouts.",
  "created_at":"2022-07-31T14:43:50Z",
  "id":1200439042,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HjT8C",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-31T14:43:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'll review this on Monday. Do any other PRs need to go together with this one?",
  "created_at":"2022-07-31T19:12:44Z",
  "id":1200482460,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5Hjeic",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-31T19:12:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Oh yes, I don't expect people to do any work on weekends; I was just sneaking in some commits. I hadn't thought about the optics of pinging you for a review, I apologise for that.\r\n\r\nNo, this builds upon the `docs` branch, which has already had the previous PR merged into it. I took your :+1: as approval [there](https://github.com/scikit-hep/awkward/pull/1552).",
  "created_at":"2022-07-31T19:47:04Z",
  "id":1200487865,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5Hjf25",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-31T19:47:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I started writing an answer outlining options here, but I looked again at Pandas and I'm more convinced in their approach here.\r\n\r\n> The front page divides the world into \"Beginner's Guide\", \"User Guide\", \"API Reference\", and \"Contributing Guide\", labels that come from NumPy/SciPy/Pandas. Within the Beginner's and User's Guides, however, the left-bar headings are \"Getting Started\" and \"Fundamentals of Awkward Array\". Having them be different is a little disorienting; makes it hard to tell where we are and how to get back here if needed. Could these be \"Beginner's Guide\" and \"User Guide\", for consistency with the first four panels? \r\nI recognize that the \"Beginner's Guide\" is a page, distinct from the \"What is an Awkward Array?\" page, whereas the \"User's Guide\" is a collection, but this is some complicated navigation\u2014it makes it feel like a maze.\r\n\r\nYes, this is based on NumPy's approach. For context:\r\n- NumPy has \"Getting Started\" as a sub-section of \"User Guide\"\r\n- SciPy has \"Getting Started\" as its own top-level section with links to tutorials and install instructions.\r\n- Pandas has \"Getting Started\" as its own top-level section, with some quick-links that answer rhetorical questions.\r\n\r\nI think our design, based upon NumPy, is more confusing than it needs to be. I think ultimately I like the Pandas \"User Guide\" design which doesn't have the categorical headers. Something like:\r\n![image](https://user-images.githubusercontent.com/1248413/182250193-ac3f8110-66c5-41d3-8efc-10cb2e05625a.png)\r\n\r\nThen we can move the \"What is an Awkward Array?\" to a separate \"Getting Started\" guide. This guide would need to be added to the top-level navbar, as it is a top-level section. NB - the index card would still be linking to a sub-page of a top-level document (Getting Started > What is an Awkward Array?) But I don't think that will be nearly as problematic, as it looks like a link button rather than a card.\r\n\r\nSo, our index would become\r\n![image](https://user-images.githubusercontent.com/1248413/182252002-7e84c3a7-1833-48ff-a51e-e7d8446b3bfe.png)\r\n\r\nThe main content of the getting started guide could be based upon the Pandas implementation, which I think is really good:\r\nhttps://pandas.pydata.org/pandas-docs/stable/getting_started/index.html#intro-to-pandas\r\n\r\nI especially like the fact that their \"Intro to Pandas\" subsection is basically a series of questions. I'm not sure whether the fact that they have so many tutorials is a good fit for us, but I like the idea that we could have common prospective user questions here with links to the relevant docs & a short inline answer:\r\n![image](https://user-images.githubusercontent.com/1248413/182251039-f666701b-3053-44df-b8e3-1270ec0636d0.png)\r\n\r\n@jpivarski one outstanding issue is where to put the advanced user (library author) docs. The constraints are:\r\n- Any top-level pages must be added to the navbar\r\n  This can get unwieldy if we have too many links, e.g. \r\n![image](https://user-images.githubusercontent.com/1248413/182251385-cbd9f0f8-9a09-4bd4-8631-0c84e27c2d7d.png)\r\n- Standalone pages with little content should probably just be subsumed into another section\r\n\r\nI'm actually violating one of these rules at the moment (the contributor docs), which I do want to resolve.\r\n\r\nI am wondering how much material corresponds to library author docs? Right now, I feel like it's just the \"how to use layouts\" section. If so, would you be happy to make \"Integrating a library with Awkward Array\" (or something like that) a subtopic in the user-guide? e.g.\r\n![image](https://user-images.githubusercontent.com/1248413/182251683-b221a681-f7b1-462e-99e2-40fee3db69ee.png)\r\n\r\nIn summary:\r\n- Move \"what is an awkward array\" to a new \"getting started\" section\r\n- Add install instructions to this section\r\n- Add Q&A cards to this section\r\n- Rename \"Beginners guide to Awkward Array\" to \"10 Minutes to Awkward Array\"\r\n- Remove user-guide headings\r\n- Add library integration to an \"Integrating another Library\"",
  "created_at":"2022-08-01T21:46:17Z",
  "id":1201755793,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HoVaR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-01T21:50:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I based the release notes change upon https://docs.scipy.org/doc/scipy/release.1.9.0.html\r\n\r\nThis is for two orthogonal goals:\r\n- Move release-note generation from docs building to release time (e.g. via [jupyter-releaser](https://github.com/jupyter-server/jupyter_releaser)). This will speed up docs building & be more standardised via a changelog tool (e.g. [github-activity](https://github.com/executablebooks/github-activity))\r\n- Make release notes easier to navigate by loading less HTML!\r\n\r\nIf you're on-board with using a tool for release note generation, then what we're discussing here is a temporary measure - rewriting release notes from our existing `make_changelog` tool whilst we're not using a standalone tool. Or, if you want to keep the published release notes verbatim as they are now, then we could use this new workflow only for new releases.\r\n\r\nThat said, whilst this is placeholder for that future change, I think you're right that it's currently too granular; whilst I strongly argue in favour of making these pages, the RCs need to be aggregated.\r\n\r\nHere's what an aggregated log looks like:\r\n![image](https://user-images.githubusercontent.com/1248413/182255983-d707403b-6c13-42a7-b71b-7de37d361584.png)\r\n\r\nHow do you feel about the [SciPy](https://docs.scipy.org/doc/scipy/release.html) or [Pandas](https://pandas.pydata.org/pandas-docs/stable/whatsnew/v1.3.1.html) approach? The non-RC releases are given release note pages. I feel that this is sensible - the only RCs that users should really care about are the bleeding edge RCs. We can have a singular \"latest-RC\" release that corresponds to this, perhaps? Or, do we even need to list the RCs on the docs? Aren't they already visible from the GitHub side of things? Saying yes would make this a lot easier, but sometimes we have to take the hard road ;)\r\n\r\nPrior art:\r\n- [NumPy](https://numpy.org/doc/stable/release.html) has both per-release pages and a summary. The summary is just the toctree summary that nests up to a single header. This would be useful for searching headings within releases, but less so for  small fixes. I found the sphinx search was able to locate strings of text within these release notes.\r\n- [SciPy](https://docs.scipy.org/doc/scipy/release.html) has per-release pages, with a summary list that contains just the links to the release notes.\r\n- [xarray](https://docs.xarray.dev/en/stable/whats-new.html#) has a single release page. Note that they use the JB theme rather than pydata.\r\n- [Pandas](https://pandas.pydata.org/pandas-docs/stable/whatsnew/index.html) has both per-release pages and a summary. The summary is grouped by major release, and doesn't contain any grep-able text.",
  "created_at":"2022-08-01T22:01:39Z",
  "id":1201767566,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5HoYSO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-02T08:53:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Your deep study of the Pandas docs is convincing\u2014go ahead and make ours similar, as you suggest. In particular, I like the pages being questions, too.\r\n\r\nFor granularity of release notes, yes, it could be one large per non-rc release, as long as that page includes all of the rc notes leading up to it. The rc notes contain most of the important updates found in the non-rc, since that one usually says, \"this has no changes since the last (rc) release.\"\r\n\r\nThe pattern was less regular in early history, but maybe all of the pre-1.0 releases can be grouped onto one page, while subsequent releases follow a more regular pattern.",
  "created_at":"2022-08-02T12:11:44Z",
  "id":1202405201,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5Hqz9R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-02T12:11:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for that quick follow up Jim.\r\n\r\nI'll address the points in the comment concerning our Getting Started page.\r\n\r\nIf you're happy with grouping the releases to the release version (i.e. RCs are bundled together with the release), then I'll get on that. I think it's a good idea to merge the pre 1.0 releases too, I'll make note of that!",
  "created_at":"2022-08-02T12:28:30Z",
  "id":1202423256,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5Hq4XY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-02T12:28:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski would you be able to author something like \r\n![](https://hdmf-common-schema.readthedocs.io/en/latest/_images/ragged-array-goal.png) in the style of our existing diagrams? I think you mentioned that you used inkscape? If it will take me the same amount of time to do it, I'm happy to do the work myself - just thought you might already have a template somewhere :)",
  "created_at":"2022-08-10T13:05:48Z",
  "id":1210647642,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5IKQRa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T13:06:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've reverted the release-note changes in favour of a future PR to integrate the changelog generation. That requires some further discussion, so I've kicked it down the road.\r\n\r\nI've started adding some simple question-style feature discussions in the getting-started section: \r\n![image](https://user-images.githubusercontent.com/1248413/183909110-2d274644-6b48-4c54-b057-83a6c16361b2.png)\r\n\r\nThese are mainly rough drafts that I'll improve in subsequent commits.",
  "created_at":"2022-08-10T13:07:55Z",
  "id":1210650137,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5IKQ4Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T13:07:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"There's now a single-column layout index page for small screens too:\r\n![image](https://user-images.githubusercontent.com/1248413/183910300-484906db-8095-443d-be3c-ab92d2755e4b.png)\r\n",
  "created_at":"2022-08-10T13:13:14Z",
  "id":1210656628,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5IKSd0",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "updated_at":"2022-08-10T13:13:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I think you mentioned that you used inkscape? If it will take me the same amount of time to do it, I'm happy to do the work myself - just thought you might already have a template somewhere :)\r\n\r\nI don't have templates, but there is a collection of diagrams in [docs-img](https://github.com/scikit-hep/awkward/tree/main/docs-img) that you can copy and modify as a starting point, which would get the same look-and-feel.\r\n\r\nThis ragged array example is most like example-reduction.svg:\r\n\r\n[![](https://user-images.githubusercontent.com/1852447/183957833-942a1350-8b91-454e-8b8c-f2a736750c4f.png)](https://github.com/scikit-hep/awkward/blob/main/docs-img/diagrams/example-reduction.svg)\r\n\r\nwhich originally came from the PDF of a talk created by minted in LaTeX. It didn't translate well (SVG doesn't save fonts, and if you pick one that isn't on all/most systems, it can look bad), so I redid it for a tutorial in example-reduction-sum.svg:\r\n\r\n[![](https://user-images.githubusercontent.com/1852447/183958321-0e4e60c1-dba3-4037-ab96-ab76f5e99130.png)](https://github.com/jpivarski-talks/2022-07-11-scipy-loopy-tutorial/blob/main/img/example-reduction-sum.svg)\r\n\r\nI replaced the text in a more standard font. (I need to get my act together about knowing which fonts are standard and using only them; I usually only want \"something sans-serif,\" \"something monospace,\" or rarely, \"something serif.\" I should make some good choices and stick to them, otherwise old diagrams are hard to reuse.)\r\n\r\nIn this context, you don't have anything to say about the sum/product at `axis=0` or `axis=1`, so you can just remove those elements in Inkscape. I don't know if you want to remove the `None`, too, because you don't want to introduce missing data yet.\r\n\r\nInkscape is great: [download](https://inkscape.org/); if you just focus on learning one or two tools (just the arrow, text, raise/lower selection, fill/stroke style, and alignment to start with), you'll be as productive as me at that. Easy things are easy if you ignore all the buttons you don't know (there are a lot of buttons I don't know) and all things are possible with some web-searching.\r\n\r\nPlease do try that out, use \"Inkscape SVG\" as the primary file format (it's a _subtype_ of \"Plain SVG\", thanks to SVG's extensibility with xlinks), and don't worry about the overall scale of the image. Select everything and use \"File \u2192 Document properties \u2192 Custom size \u2192 Resize page to content\" with top-left-right-bottom padding of 5, 5, 5, 5 to make the page fit whatever you draw.\r\n\r\nWithout being dogmatic about it, I generally follow Edward Tufte's advice on making plots and diagrams use just enough elements to get the point across. In this diagram, I made it look like horizontally-formatted Python because that's how people usually see the data in context. Line colors should generally be bold and distinct like Matplotlib's color sequence (medium blue and dark orange are the most distinct), and fill colors should generally be light, like pastel. There's a palette of good-enough choices on the bottom of the Inkscape window; no need to tweak anything with the color wheel. Your example numbers are very detailed (3 digits of precision); I think everyone would get the point if they were 1.1, 2.2, 3.3, etc. without getting caught up in \"why those numbers?\" The prime numbers I used to demonstrate `ak.prod` and the powers of 2 I used to demonstrate `ak.sum` are to ensure that the results are unique, so that people can't misinterpret the order of the reducer\u2014you don't need that and can simplify the numbers for this purpose.",
  "created_at":"2022-08-10T16:27:45Z",
  "id":1210958012,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5ILcC8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T16:27:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks Jim. I hadn't realised that Inkscape actually have a derived version of SVG, curious. Thankfully I've used Inkscape before, so I'm hopeful it will be a productive process in future.\r\n\r\nFor context - the image was entirely placeholder - I much prefer our examples. In fact, I've just taken the reduction diagram and split it into the reduction part and the ragged part:\r\n![image](https://user-images.githubusercontent.com/1248413/184133999-fc0ce3bb-3b4d-4400-974d-20aa3150f122.png)\r\n",
  "created_at":"2022-08-11T12:33:20Z",
  "id":1211928005,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5IPI3F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-11T12:33:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've added a Community Tutorials section that maintains an aggregated list of community tutorials. Most of these are yours, Jim, so we should be able to ensure that they survive long term:\r\n![image](https://user-images.githubusercontent.com/1248413/184135628-bb3eaecd-1028-48d5-866c-2a2c474e9e5c.png)\r\n\r\n\r\nI'd be interested on what your feelings are for this first-pass of presenting users with the necessary information RE what the tutorial details and how it is presented.\r\n",
  "created_at":"2022-08-11T12:42:41Z",
  "id":1211937578,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5IPLMq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-11T12:42:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Pandas' user guide has these short panels \r\n![image](https://user-images.githubusercontent.com/1248413/184135298-53916410-a29c-4c5d-97df-5d49bf45fc85.png)\r\n\r\nthat link to a long-form tutorial:\r\nhttps://pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/01_table_oriented.html\r\n\r\nI'm not convinced whether we need/want to duplicate this information in a tutorial *and* the user-guide. The user-guide is probably verbose enough, and I'm not a fan of having the same content repeated slightly differently in separate parts of the site.\r\n\r\nHowever, if you think that Pandas does this well and want to repeat it ourselves, we can think about it.\r\n",
  "created_at":"2022-08-11T13:02:20Z",
  "id":1211959739,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5IPQm7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-11T13:02:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Most of these are yours, Jim, so we should be able to ensure that they survive long term\r\n\r\nDon't worry too much about preserving my content. That's an extra constraint on making this into a good overall documentation system (e.g. the conflict of \"duplicate this information in a tutorial and the user-guide\"), and the problem will be easier to solve with fewer constraints.\r\n\r\nAs the original author of the library, my perspective is often _not_ the right one for a new user encountering it. That's why I want to bring in people who have trained new users, to at least review it. There are things we can probably say more simply. If that means tearing up old documentation, please do it: the goal should be for it to be a sensible whole in the future.",
  "created_at":"2022-08-11T13:07:38Z",
  "id":1211965663,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5IPSDf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-11T13:07:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > Most of these are yours, Jim, so we should be able to ensure that they survive long term\r\n> \r\n> Don't worry too much about preserving my content. That's an extra constraint on making this into a good overall documentation system (e.g. the conflict of \"duplicate this information in a tutorial and the user-guide\"), and the problem will be easier to solve with fewer constraints.\r\n> \r\n> As the original author of the library, my perspective is often _not_ the right one for a new user encountering it. That's why I want to bring in people who have trained new users, to at least review it. There are things we can probably say more simply. If that means tearing up old documentation, please do it: the goal should be for it to be a sensible whole in the future.\r\n\r\nMy idea for the _community_ tutorials is that they will better showcase an end-to-end usage of Awkward rather than the details of particular features. The user-guide, meanwhile, should focus on helping users find features and explaining their use in more detail than the API reference (with executable examples, etc).\r\n\r\nFor now, I think I'll leave your tutorials in this short list. We can accept PRs to build out / curate this list as time goes on. For now, I think it better to have something to link to vs leaving users guessing?\r\n\r\nIt seems like you're also leaning towards not having mini-tutorials in addition to the user guide. As such, I won't do that!",
  "created_at":"2022-08-15T11:57:01Z",
  "id":1214930689,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5Ial8B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T11:57:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Given that you've approved this (albeit slightly earlier), I think it would be best if I merge this (into docs) and continue iterating in the next PR cycle.",
  "created_at":"2022-08-15T11:57:27Z",
  "id":1214930982,
  "issue":1563,
  "node_id":"IC_kwDODBCWws5IamAm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T11:57:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1564?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1564](https://codecov.io/gh/scikit-hep/awkward/pull/1564?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cf9a638) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.02%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head cf9a638 differs from pull request most recent head a6c251c. Consider uploading reports for the commit a6c251c to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1564?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/operations/ak\\_to\\_regular.py](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcmVndWxhci5weQ==) | `92.00% <0.00%> (-4.00%)` | :arrow_down: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `76.86% <0.00%> (-0.68%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `94.00% <0.00%> (-0.58%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `83.18% <0.00%> (-0.08%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.79% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `85.48% <0.00%> (\u00f8)` | |\n| ... and [11 more](https://codecov.io/gh/scikit-hep/awkward/pull/1564/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-25T17:45:59Z",
  "id":1194406479,
  "issue":1564,
  "node_id":"IC_kwDODBCWws5HMTJP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-09T23:13:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1565?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1565](https://codecov.io/gh/scikit-hep/awkward/pull/1565?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (31985f9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.24%`.\n> The diff coverage is `74.25%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1565?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `87.02% <88.09%> (+37.87%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcGFycXVldC5weQ==) | `51.02% <95.23%> (+3.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [...awkward/\\_v2/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWV0YWRhdGFfZnJvbV9wYXJxdWV0LnB5) | `100.00% <100.00%> (+68.42%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `77.53% <100.00%> (+0.49%)` | :arrow_up: |\n| ... and [20 more](https://codecov.io/gh/scikit-hep/awkward/pull/1565/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-25T20:28:56Z",
  "id":1194589063,
  "issue":1565,
  "node_id":"IC_kwDODBCWws5HM_uH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-25T20:28:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1567?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1567](https://codecov.io/gh/scikit-hep/awkward/pull/1567?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (974e5a2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.25%`.\n> The diff coverage is `73.99%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1567?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.01% <57.60%> (-2.52%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `71.32% <71.42%> (+0.19%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `87.02% <88.09%> (+37.87%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcGFycXVldC5weQ==) | `51.02% <95.23%> (+3.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2luZGV4LnB5) | `87.23% <100.00%> (+0.27%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| ... and [40 more](https://codecov.io/gh/scikit-hep/awkward/pull/1567/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-26T19:16:57Z",
  "id":1195882389,
  "issue":1567,
  "node_id":"IC_kwDODBCWws5HR7eV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-11T14:47:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It looks like you're still debugging this. Debugging through CI is hard, and I've never managed to get a Windows virtual machine that I could test on.\r\n\r\nOften, though, Windows fails because it has different C `int`, `long`, `long long` assignments to `int32` and `int64`. That is very likely what's going on here. It is possible to simulate this kind of thing in a 32-bit Linux Docker container. What I used to do (I don't have one set up on my current computer to use as an example; sorry!) is make an instance of\r\n\r\nhttps://hub.docker.com/r/i386/debian/\r\n\r\nand then use the latest 32-bit Linux Miniconda, which is one of these:\r\n\r\nhttps://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86.sh\r\nhttps://repo.anaconda.com/miniconda/Miniconda3-4.5.4-Linux-x86.sh\r\n\r\nInstall Miniconda with the conda-forge channel inside the Docker container. Because this is old stuff, you have to explicitly set the channel priority to strict or ensure that conda-forge is the only channel, no \"defaults\".\r\n\r\nhttps://conda-forge.org/docs/user/introduction.html#how-can-i-install-packages-from-conda-forge\r\n\r\nDon't try to install everything (a lot of it won't work), just the minimum to get the test running, which might be just `numpy` and `pytest`. Maybe not even `pytest` (just run what you need to on a `python -c` line).\r\n\r\nAlong the way, you'll see some warnings saying that you're trying to do 32-bit stuff on a 64-bit computer. Docker containers are a little leaky: it can see that you have a 64-bit OS underneath, but it worked anyway.\r\n\r\nWhen you start the Docker container, you can to symlink it to your git directory so that you can use a normal editor outside the 32-bit world, and any changes made to source files aren't deleted when the container shuts down. It goes without saying that you'll need to do a clean recompilation of the C++ part of Awkward. You might consider doing this on a different git clone than the main one you normally use.\r\n\r\nIt's a bit of work to set it up, but it makes debugging a lot easier than \"submit a change, wait 15 minutes, see how Windows CI failed...\". The 32-bit Linux test is likely to work because you're dealing with a \"how is long long defined?\" issue.",
  "created_at":"2022-08-09T23:08:58Z",
  "id":1209979989,
  "issue":1567,
  "node_id":"IC_kwDODBCWws5IHtRV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-09T23:08:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1568?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1568](https://codecov.io/gh/scikit-hep/awkward/pull/1568?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d47b7e8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.00%`.\n> The diff coverage is `31.42%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1568?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.01% <\u00f8> (+0.24%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| ... and [11 more](https://codecov.io/gh/scikit-hep/awkward/pull/1568/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-26T19:36:15Z",
  "id":1195899129,
  "issue":1568,
  "node_id":"IC_kwDODBCWws5HR_j5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T10:29:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> What if the sliced dimension is not first?  \r\n\r\nGood point, I assumed in an empty slice that it would go first. \r\n\r\n> Why is start is None or stop is None the condition for determining whether there should be a RegularArray?\r\n\r\nThis was the pattern I found from the tests, the `zeros_length` needs to be adjusted only when a slice with this properties was passed  \r\n\r\n > The way to find out is to see what NumPy does: fortunately this test doesn't depend on dimensions being irregular. You can make a NumPy array with a lot of dimensions and try slices on it with various combinations of `:` and `[0, 1, 2]`, and `[]` to see what happens to the output `shape`.\r\n\r\nI noticed this behaviour is only consistent when slice.start/slice.stop is None, here are some of the NumPy tests I did: \r\n\r\n```\r\n>>> d = np.arange(3 * 3 * 2).reshape(3,3,2)\r\n>>> e = ak._v2.contents.NumpyArray(d)\r\n>>> c1 = np.array([], np.int64)\r\n>>> ak._v2.to_list(d[[2],[1],c1]) == ak._v2.to_list(e[[2],[1],c1]) == []\r\nTrue\r\n>>> d = np.arange(1 * 3 * 3 * 2).reshape(1,3,3,2)\r\n>>> e = ak._v2.contents.NumpyArray(d)\r\n>>> ak._v2.to_list(d[c1,c1]) == ak._v2.to_list(e[c1,c1]) == []\r\nTrue\r\n>>> d = np.arange(2 * 3).reshape(2, 3)\r\n>>> e = ak._v2.contents.NumpyArray(d)\r\n>>> ak._v2.to_list(d[:,[]]) == ak._v2.to_list(b[:,[]]) == [[], []]\r\nTrue \r\n>>> ak._v2.to_list(d[1:,[]]) == ak._v2.to_list(e[1:,[]]) == [[]]\r\nTrue\r\n>>> ak._v2.to_list(d[:-2,[]]) == ak._v2.to_list(e[:-2,[]]) == []\r\nTrue\r\n>>> ak._v2.to_list(d[:-1,[]]) == ak._v2.to_list(e[:-1,[]]) == [[]]\r\nTrue\r\n```",
  "created_at":"2022-07-28T13:01:48Z",
  "id":1198110748,
  "issue":1568,
  "node_id":"IC_kwDODBCWws5Habgc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-28T13:13:41Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1569?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1569](https://codecov.io/gh/scikit-hep/awkward/pull/1569?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8404767) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.23%`.\n> The diff coverage is `73.86%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1569?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <54.54%> (-0.70%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <57.60%> (-2.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `87.02% <88.09%> (+37.87%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcGFycXVldC5weQ==) | `51.02% <95.23%> (+3.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWJhL2FycmF5dmlldy5weQ==) | `96.76% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfbm9uZS5weQ==) | `96.55% <100.00%> (+0.39%)` | :arrow_up: |\n| [...awkward/\\_v2/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWV0YWRhdGFfZnJvbV9wYXJxdWV0LnB5) | `100.00% <100.00%> (+68.42%)` | :arrow_up: |\n| ... and [20 more](https://codecov.io/gh/scikit-hep/awkward/pull/1569/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-27T11:56:46Z",
  "id":1196632747,
  "issue":1569,
  "node_id":"IC_kwDODBCWws5HUyqr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-27T11:56:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Does the second bullet refer to regular fields, I.e those that can pass through `to_numpy`? ",
  "created_at":"2022-07-29T08:50:56Z",
  "id":1199034258,
  "issue":1570,
  "node_id":"IC_kwDODBCWws5Hd8-S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T08:50:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Yes, numpy-able fields (only one dimension deep), plus strings.",
  "created_at":"2022-07-29T12:44:04Z",
  "id":1199235822,
  "issue":1570,
  "node_id":"IC_kwDODBCWws5HeuLu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T12:44:04Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"Let's be sure to name the function @douglasdavis is working on as \"`to_series`\" as opposed to \"`to_dataframe`\", re: #1546. With these two rather different ways of making Pandas objects, we don't want to muddle the issue by calling them both \"`to_pandas`\".",
  "created_at":"2022-07-29T14:45:32Z",
  "id":1199435680,
  "issue":1570,
  "node_id":"IC_kwDODBCWws5Hfe-g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T14:45:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@martindurant for (2) what would you like to happen to nested records, e.g. \r\n```python\r\nvar * {\r\n    trip: {\r\n        sec: ?float32,\r\n        km: ?float32,\r\n        begin: {\r\n            lon: ?float64,\r\n            lat: ?float64,\r\n            time: ?datetime64[ms]\r\n        },\r\n        end: {\r\n            lon: ?float64,\r\n            lat: ?float64,\r\n            time: ?datetime64[ms]\r\n        },\r\n        path: var * {\r\n            londiff: float32,\r\n            latdiff: float32\r\n        }\r\n    },\r\n    payment: {\r\n        fare: ?float32,\r\n        tips: ?float32,\r\n        total: ?float32,\r\n        type: var * char\r\n    },\r\n    company: var * char\r\n}\r\n```\r\n\r\nMy guess is that you might want to flatten the record structure, i.e. produce fields with names such as `\"trip.begin.long\"`, etc?\r\n\r\n",
  "created_at":"2022-07-29T15:10:18Z",
  "id":1199494615,
  "issue":1570,
  "node_id":"IC_kwDODBCWws5HftXX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T15:10:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> you might want to flatten the record structure\r\n\r\nno, we want to allow users to do whatever flattening they might like, but we should not do that by default. We do not want a multiindex.",
  "created_at":"2022-07-29T15:13:12Z",
  "id":1199501565,
  "issue":1570,
  "node_id":"IC_kwDODBCWws5HfvD9",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-29T15:13:12Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"Right: that's the difference between this `to_series` (put a whole Awkward Array into a column, without modification) and `ak.to_dataframe` (currently named `ak.to_pandas`, which splits nested records into a MultiIndex of columns and nested lists into a MultiIndex of rows).",
  "created_at":"2022-07-29T15:53:09Z",
  "id":1199597688,
  "issue":1570,
  "node_id":"IC_kwDODBCWws5HgGh4",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-29T15:53:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, I'd missed the part where you mention this is for an extension type. I'm following :)_",
  "created_at":"2022-07-29T15:54:19Z",
  "id":1199600447,
  "issue":1570,
  "node_id":"IC_kwDODBCWws5HgHM_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T15:54:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It looks like you don't want arguments to be added to a `to_pandas` (or `to_series`) function; it looks like you need instructions for extracting NumPy arrays (leaves) from an arbitrary array (tree).\r\n\r\nI don't see a way (or what it would mean) to remove those leaves from the Awkward Array, but here's how to collect them:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n\r\n>>> def action(layout, lateral_context, **extra):\r\n...     if layout.is_NumpyType:\r\n...         lateral_context[\"collect\"].append(np.asarray(layout))\r\n... \r\n\r\n>>> array = ak.Array([\r\n...     [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\r\n...     [],\r\n...     [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\r\n... ])\r\n\r\n>>> context = {\"collect\": []}\r\n>>> ak.transform(action, array, lateral_context=context, numpy_to_regular=True)\r\n<Array [[{x: 1.1, y: [1]}, ..., {...}], ...] type='3 * var * {x: float64, y...'>\r\n\r\n>>> context[\"collect\"]\r\n[array([1.1, 2.2, 3.3, 4.4, 5.5]), array([1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5])]\r\n```\r\n\r\nThe [ak.transform](https://awkward-array.readthedocs.io/en/main/reference/generated/ak.transform.html) returned the array it was given, but `context[\"collect\"]` has zero-copy references to the NumPy arrays. The `numpy_to_regular=True` option turns any multidimensional NumPy arrays into flattened 1-dimensional arrays, so using that or not is your choice. (Since you don't care about the returned Awkward Array, you could just call `np.ravel` on the arrays you collect.)\r\n\r\nIf the array has been manipulated, like this indexed slice,\r\n\r\n```python\r\n>>> array = ak.Array([[0, 1, 2], [], [3, 4], [5], [6, 7, 8, 9]])\r\n>>> array[[-1, 3, 3, 0, 2]]\r\n<Array [[6, 7, 8, 9], [5], [5], [0, 1, 2], [3, 4]] type='5 * var * int64'>\r\n```\r\n\r\nthen the interior NumPy arrays might not be what you expect. For instance, the sliced array still contains the original `0 1 2 3 4 5 6 7 8 9`, not the rearranged `6 7 8 9 5 5 0 1 2 3 4`.\r\n\r\n```python\r\n>>> array[[-1, 3, 3, 0, 2]].layout\r\n<ListArray len='5'>\r\n    <starts><Index dtype='int64' len='5'>\r\n        [6 5 5 0 3]\r\n    </Index></starts>\r\n    <stops><Index dtype='int64' len='5'>\r\n        [10  6  6  3  5]\r\n    </Index></stops>\r\n    <content><NumpyArray dtype='int64' len='10'>[0 1 2 3 4 5 6 7 8 9]</NumpyArray></content>\r\n</ListArray>\r\n\r\n>>> context = {\"collect\": []}\r\n>>> ak.transform(action, array[[-1, 3, 3, 0, 2]], lateral_context=context)\r\n<Array [[6, 7, 8, 9], [5], [5], [0, 1, 2], [3, 4]] type='5 * var * int64'>\r\n>>> context[\"collect\"]\r\n[array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])]\r\n```\r\n\r\nBut [ak.packed](https://awkward-array.readthedocs.io/en/main/reference/generated/ak.packed.html) would put it into a canonical form, such that the interior buffers contain what you see.\r\n\r\n```python\r\n>>> context = {\"collect\": []}\r\n>>> ak.transform(action, ak.packed(array[[-1, 3, 3, 0, 2]]), lateral_context=context)\r\n<Array [[6, 7, 8, 9], [5], [5], [0, 1, 2], [3, 4]] type='5 * var * int64'>\r\n>>> context[\"collect\"]\r\n[array([6, 7, 8, 9, 5, 5, 0, 1, 2, 3, 4])]\r\n```\r\n\r\nIs that what you needed? If not, let me know and I'll reopen this issue.",
  "created_at":"2022-11-10T23:06:55Z",
  "id":1311022573,
  "issue":1570,
  "node_id":"IC_kwDODBCWws5OJJ3t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-10T23:06:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1571?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1571](https://codecov.io/gh/scikit-hep/awkward/pull/1571?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3fffc2a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.26%`.\n> The diff coverage is `76.02%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1571?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `63.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.41% <\u00f8> (-0.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <\u00f8> (-0.28%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `71.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.79% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `87.34% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `85.48% <\u00f8> (-0.21%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <\u00f8> (\u00f8)` | |\n| ... and [48 more](https://codecov.io/gh/scikit-hep/awkward/pull/1571/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-29T12:07:10Z",
  "id":1199200952,
  "issue":1571,
  "node_id":"IC_kwDODBCWws5Helq4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T12:07:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ManasviGoyal - could you please test that it works for you. Thanks",
  "created_at":"2022-07-29T11:19:01Z",
  "id":1199162617,
  "issue":1572,
  "node_id":"IC_kwDODBCWws5HecT5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T11:19:01Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ManasviGoyal - could you please test that it works for you. Thanks\r\n\r\nHi @ianna. I have already made a PR for this issue. Please refer - #1571 ",
  "created_at":"2022-07-29T11:32:09Z",
  "id":1199173480,
  "issue":1572,
  "node_id":"IC_kwDODBCWws5Hee9o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T11:41:31Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1572?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1572](https://codecov.io/gh/scikit-hep/awkward/pull/1572?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (719bdc1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/78a6535e443f8915f7e82dc6879bbf0d19c845d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (78a6535) will **increase** coverage by `0.26%`.\n> The diff coverage is `76.02%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1572?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `63.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.41% <\u00f8> (-0.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <\u00f8> (-0.28%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `71.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.79% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `87.34% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlZ3VsYXJhcnJheS5weQ==) | `85.48% <\u00f8> (-0.21%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <\u00f8> (\u00f8)` | |\n| ... and [48 more](https://codecov.io/gh/scikit-hep/awkward/pull/1572/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-29T11:39:51Z",
  "id":1199179251,
  "issue":1572,
  "node_id":"IC_kwDODBCWws5HegXz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T11:39:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > @ManasviGoyal - could you please test that it works for you. Thanks\r\n> \r\n> Hi @ianna. I have already made a PR for this issue. Please refer - #1571\r\n\r\nYes, I guess we got our wires crossed :-)\r\nI think, we use `stdint.h` (as in this PR) everywhere else, not `cstdint`. Please, let me know if this PR fixes the problem for you. Thanks.",
  "created_at":"2022-07-29T13:15:31Z",
  "id":1199273205,
  "issue":1572,
  "node_id":"IC_kwDODBCWws5He3T1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T13:15:31Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > > @ManasviGoyal - could you please test that it works for you. Thanks\r\n> > \r\n> > \r\n> > Hi @ianna. I have already made a PR for this issue. Please refer - #1571\r\n> \r\n> Yes, I guess we got our wires crossed :-) I think, we use `stdint.h` (as in this PR) everywhere else, not `cstdint`. Please, let me know if this PR fixes the problem for you. Thanks.\r\n\r\nOkay sure.\r\n\r\nYes it works. But I don't think we need too include it in all the files. Only adding it in `BuilderOptions.h` works.\r\n\r\nAlso, please cherry pick the 2nd comment from my PR. I have fixed the builder names to make them uniform throughout the tests.",
  "created_at":"2022-07-29T13:36:32Z",
  "id":1199295586,
  "issue":1572,
  "node_id":"IC_kwDODBCWws5He8xi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T13:39:15Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > > > @ManasviGoyal - could you please test that it works for you. Thanks\r\n> > > \r\n> > > \r\n> > > Hi @ianna. I have already made a PR for this issue. Please refer - #1571\r\n> > \r\n> > \r\n> > Yes, I guess we got our wires crossed :-) I think, we use `stdint.h` (as in this PR) everywhere else, not `cstdint`. Please, let me know if this PR fixes the problem for you. Thanks.\r\n> \r\n> Okay sure.\r\n> \r\n> Yes it works. But I don't think we need too include it in all the files. Only adding it in `BuilderOptions.h` works.\r\n> \r\n\r\nall the files need it because they use `int64_t` and should not rely on other includes that include this one :-)\r\n \r\n> Also, please cherry pick the 2nd comment from my PR. I have fixed the builder names to make them uniform throughout the tests.\r\n\r\nI think, this one can be a part of your documentation PR. I'm sure there will be more fixes. Thanks!\r\n",
  "created_at":"2022-07-29T14:53:05Z",
  "id":1199453271,
  "issue":1572,
  "node_id":"IC_kwDODBCWws5HfjRX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-29T14:53:05Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1573?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1573](https://codecov.io/gh/scikit-hep/awkward/pull/1573?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (284fa23) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.01%`.\n> The diff coverage is `35.13%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1573?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| ... and [6 more](https://codecov.io/gh/scikit-hep/awkward/pull/1573/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-07-29T12:31:04Z",
  "id":1199222270,
  "issue":1573,
  "node_id":"IC_kwDODBCWws5Heq3-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-09T23:36:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I might change `... in dir(type(self))` to `hasattr(self.__class__, ...)` for simplicity, but I'll do it at a later date.",
  "created_at":"2022-08-10T10:04:19Z",
  "id":1210450870,
  "issue":1573,
  "node_id":"IC_kwDODBCWws5IJgO2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T10:04:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Good point. Or maybe `hasattr(type(self))` because if there's a public function that reveals a dunder-attribute, I think it should be preferred.",
  "created_at":"2022-08-10T15:37:54Z",
  "id":1210884417,
  "issue":1573,
  "node_id":"IC_kwDODBCWws5ILKFB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T15:37:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1574?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1574](https://codecov.io/gh/scikit-hep/awkward/pull/1574?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (471321f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-07-31T04:48:08Z",
  "id":1200347611,
  "issue":1574,
  "node_id":"IC_kwDODBCWws5Hi9nb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-08T22:03:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi @ManasviGoyal, are we also planning on exposing LayoutBuilder to Python (e.g. via cppyy)? I have seen that Jim's indicated that `LayoutBuilder` is not important in Python contexts, implying that the answer is no, but I'm curious to know if that thought process has changed.\r\n\r\nIn general the Doxygen docs won't require any changes. In #1563, I've moved the Doxygen URL, but you don't need to touch Sphinx in order to build the C++ docs.\r\n\r\nThe user-guide *has* moved around a lot compared to `main`; the JupyterBook documentation has been integrated directly into the Sphinx documentation. \r\n\r\nIf you can, I'd prefer it if you based this PR on #1563. I'm hoping that it will be mergeable shortly. The changes that I make after #1563 will be smaller, so we shouldn't have too many merge conflicts. Otherwise, I'll need to do a small amount of work to rebase the docs branch on main after your changes!",
  "created_at":"2022-07-31T12:42:54Z",
  "id":1200417722,
  "issue":1574,
  "node_id":"IC_kwDODBCWws5HjOu6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-31T12:43:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Hi @ManasviGoyal, are we also planning on exposing LayoutBuilder to Python (e.g. via cppyy)? I have seen that Jim's indicated that `LayoutBuilder` is not important in Python contexts, implying that the answer is no, but I'm curious to know if that thought process has changed.\r\n> \r\n> In general the Doxygen docs won't require any changes. In #1563, I've moved the Doxygen URL, but you don't need to touch Sphinx in order to build the C++ docs.\r\n> \r\n> The user-guide _has_ moved around a lot compared to `main`; the JupyterBook documentation has been integrated directly into the Sphinx documentation.\r\n> \r\n> If you can, I'd prefer it if you based this PR on #1563. I'm hoping that it will be mergeable shortly. The changes that I make after #1563 will be smaller, so we shouldn't have too many merge conflicts. Otherwise, I'll need to do a small amount of work to rebase the docs branch on main after your changes!\r\n\r\nHi. Sure I can rebase this PR.\r\n\r\nFor now, we are not planning it to expose it to Python (though it will be used in RDataFrame for JIT Complilation (via cppyy), @ianna is working on that).\r\n\r\nSo, for doxygen, I can directly add the comments in the files like I have done. No other thing is required, right?\r\n\r\nAlso, for the `user-guide` where should I place it for now?",
  "created_at":"2022-07-31T14:52:39Z",
  "id":1200440448,
  "issue":1574,
  "node_id":"IC_kwDODBCWws5HjUSA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-07-31T14:54:32Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"You're right about the C++ - nothing has changed there!\r\n\r\nConcerning the user guide, this now lives in `docs-sphinx/user-guide`. The contents of these docs haven't changed much, but the way that you build them has. We no longer use `jupyter-book` to build our books. It's still the same components (like `mystnb`), but now we directly use Sphinx. \r\n\r\nIf you want to preview the docs locally:\r\n1. `cd` to `docs-sphinx` \r\n2. install the requirements with `pip install -r requirements.txt`\r\n3. comment / delete [the subprocesses](https://github.com/scikit-hep/awkward/blob/a75262abdf3d17fab118828fd2f6eafca0e911fa/docs-sphinx/conf.py#L118-L129) that currently run on every `sphinx-build` invocation. This is just to make your build faster. It means that Python API docs, release notes, and C++ docs, won't be generated. If you want to update the doxygen docs, you can leave the Doxygen lines untouched.\r\n4. run `sphinx-build . _build` to perform a full build\r\n\r\nIf you're only changing a few files during development, you can limit Sphinx to update only a subset of files with `sphinx-build . _build file-1.md ...`\r\n\r\nIn addition to rebasing on https://github.com/scikit-hep/awkward/branches/docs-phase-2, could you also change the merge target of this PR to the `docs` branch? \r\n\r\n![image](https://user-images.githubusercontent.com/1248413/182032563-05171587-e6e6-4958-adcf-2e7c50aff1ff.png)\r\n\r\nOff the top of my head, the user guide will be an interesting opportunity to use a notebook to demonstrate LayoutBuilder, and how to use it to build an `ak.Array`.\r\n\r\nIf we just want to test that our documented code works with released Awkward versions, we could use the `xeus-cling` Jupyter kernel with jupyter-book. This will run C++ code contained in `:::{code-cell}` MyST directives under Jupyter (e.g. https://raw.githubusercontent.com/scikit-hep/awkward/docs-phase-2/docs-sphinx/user-guide/how-to-convert-pandas.md)\r\n\r\nHowever, we could also use  `cppyy` to both test `LayoutBuilder`, and also show how to wrap it with `ak.from_buffers`. This might be a reasonable amount of work, so feel free to discuss it with Jim in case it's out of scope for your project!",
  "created_at":"2022-07-31T15:02:27Z",
  "id":1200442160,
  "issue":1574,
  "node_id":"IC_kwDODBCWws5HjUsw",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-07-31T15:21:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think that this was a draft PR for so long that it got mangled by @agoose77's documentation updates.\r\n\r\nSince the goal of this PR is to write a user guide, maybe the easiest way to do it is to close this PR and provide @agoose77 with a markdown version of the user guide, and he'll integrate it with the new documentation?\r\n\r\nI searched through this PR's changelog and didn't see what looked like a markdown user guide for LayoutBuilder. Did I miss it?",
  "created_at":"2022-08-24T19:38:06Z",
  "id":1226163433,
  "issue":1574,
  "node_id":"IC_kwDODBCWws5JFcTp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T19:38:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I think that this was a draft PR for so long that it got mangled by @agoose77's documentation updates.\r\n> \r\n> Since the goal of this PR is to write a user guide, maybe the easiest way to do it is to close this PR and provide @agoose77 with a markdown version of the user guide, and he'll integrate it with the new documentation?\r\n> \r\n> I searched through this PR's changelog and didn't see what looked like a markdown user guide for LayoutBuilder. Did I miss it?\r\n\r\nHi. Sorry, I haven't been well since past 2 weeks. So, had to pause it midway. This PR is not updated that's why the markdown file is missing.\r\n\r\nI planned on closing this PR and opening a new one with the Markdown file since there have been changes in the documentation. I still have to add a few things. I'll update and get it reviewed by @agoose77 so that he can integrate it. \r\n\r\nClosing this one. Thanks.",
  "created_at":"2022-08-24T19:47:21Z",
  "id":1226182623,
  "issue":1574,
  "node_id":"IC_kwDODBCWws5JFg_f",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T19:47:21Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"I added notes to your list, indicating issues in which people requested exactly what you're working on here. Since they're specific to particular checkboxes, I put them inline, rather than in the Development sidebar (except for one general issue that wasn't coming up in the sidebar, for some reason).\r\n\r\nPerhaps a good way to review the documentation would be to invite trainers to read rendered versions of the docs? I hereby sign off on all of your technical decisions about how to generate it; I think 100% of the conversation can be about how the finished product looks (the content of the text, the link navigation/organization, etc.).",
  "created_at":"2022-08-10T00:55:36Z",
  "id":1210032642,
  "issue":1575,
  "node_id":"IC_kwDODBCWws5IH6IC",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-10T00:55:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1575?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1575](https://codecov.io/gh/scikit-hep/awkward/pull/1575?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1780406) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9d7d6b4da5fd2f8a3bd2fb1dfdaa1b112bcc0f39?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9d7d6b4) will **decrease** coverage by `0.11%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 1780406 differs from pull request most recent head a410757. Consider uploading reports for the commit a410757 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1575?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjb21iaW5hdGlvbnMucHk=) | `81.25% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19iYWNrZW5kLnB5) | `80.76% <0.00%> (-19.24%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `82.75% <0.00%> (-8.55%)` | :arrow_down: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `66.23% <0.00%> (-6.53%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19sYXlvdXQucHk=) | `80.76% <0.00%> (-6.19%)` | :arrow_down: |\n| [src/awkward/forms/unmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5tYXNrZWRmb3JtLnB5) | `81.94% <0.00%> (-6.12%)` | :arrow_down: |\n| [src/awkward/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `82.22% <0.00%> (-6.02%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2F2cm9fZmlsZS5weQ==) | `66.66% <0.00%> (-5.56%)` | :arrow_down: |\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `84.10% <0.00%> (-5.30%)` | :arrow_down: |\n| ... and [118 more](https://codecov.io/gh/scikit-hep/awkward/pull/1575/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-08-23T07:41:57Z",
  "id":1223679054,
  "issue":1575,
  "node_id":"IC_kwDODBCWws5I79xO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-15T10:48:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I would now prefer to do this as a series of smaller PRs, with some reviews at the end. That way, we get *some* documentation out whilst the rest is being written",
  "created_at":"2022-12-15T11:22:54Z",
  "id":1352919899,
  "issue":1575,
  "node_id":"IC_kwDODBCWws5Qo-tb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-15T11:22:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1576?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1576](https://codecov.io/gh/scikit-hep/awkward/pull/1576?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (981bb2d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.02%`.\n> The diff coverage is `22.58%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1576?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `70.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| ... and [6 more](https://codecov.io/gh/scikit-hep/awkward/pull/1576/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-01T21:42:35Z",
  "id":1201753025,
  "issue":1576,
  "node_id":"IC_kwDODBCWws5HoUvB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-09T22:24:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm in favor of this. The main thing, though, is that we want to cut over from our current state of not using it to 100% using it. If there's something that would enforce it, to make sure that we don't overlook it or make a mistake, that would be helpful.\r\n\r\nAt the same time, the tags and release names are not standard (e.g. \"v2.0.0\" and \"Version 2.0.0\") and that's because we were following an in-house standard until now, and should switch over all at once, maybe at some auspicious time like version 2.0.0.\r\n\r\nOne thing I want to make sure of, though, is that the flake8 version bumps are either not in the release notes or are somehow segregated from the changes that are meaningful to developers and users.",
  "created_at":"2022-08-03T12:33:30Z",
  "id":1203890044,
  "issue":1577,
  "node_id":"IC_kwDODBCWws5Hwed8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-03T12:33:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I'm in favor of this. The main thing, though, is that we want to cut over from our current state of not using it to 100% using it. If there's something that would enforce it, to make sure that we don't overlook it or make a mistake, that would be helpful.\r\n\r\nAgreed. I suggested that we use a CI action to catch this before merge?\r\n \r\n> At the same time, the tags and release names are not standard (e.g. \"v2.0.0\" and \"Version 2.0.0\") and that's because we were following an in-house standard until now, and should switch over all at once, maybe at some auspicious time like version 2.0.0.\r\n\r\nAgreed\r\n\r\n> One thing I want to make sure of, though, is that the flake8 version bumps are either not in the release notes or are somehow segregated from the changes that are meaningful to developers and users.\r\n\r\nThe easiest solution would be to let these fall into the maintenance category. However, I'm discussing extending the categorisation support over at github-activity, so we could add another category for CI stuff.",
  "created_at":"2022-08-03T12:43:34Z",
  "id":1203900886,
  "issue":1577,
  "node_id":"IC_kwDODBCWws5HwhHW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-03T12:43:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski can you ping whomever you consider a stakeholder to weigh in on this? Namely, which convention to choose. Here are a couple:\r\n\r\n- Conventional Commits - https://www.conventionalcommits.org/en/v1.0.0/\r\n  - Angular variant - https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines\r\n- NumPy(?) - https://numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message\r\n\r\nIf people don't have any strong feelings (and I suspect that's the case), then we can just choose one. I prefer the Angular convention, though I've been title-casing the `type` which is probably the wrong way to do it.\r\n\r\n",
  "created_at":"2022-08-10T10:44:18Z",
  "id":1210496365,
  "issue":1577,
  "node_id":"IC_kwDODBCWws5IJrVt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T10:44:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This would be a great thing to decide at our Awkward-Uproot group meeting; that's a gathering of the stakeholders. Could you prepare a slide/screenshot of what typical examples look like?\u2014it could even be something you paste into this chat and screenshare during the meeting\u2014and we'll pick one.\r\n\r\nI don't think we'll have strong opinions, and I don't think it will take more than 5 minutes, but it gives us all a chance to see what we're committing to.",
  "created_at":"2022-08-10T15:46:43Z",
  "id":1210895775,
  "issue":1577,
  "node_id":"IC_kwDODBCWws5ILM2f",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-10T15:46:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"What's the difference between conventionalcommits and the angular variant? I always follow conventionalcommits (out of habit) unless a project has a different convention (like pypa/build). But it looks just like the angular variant.",
  "created_at":"2022-08-17T22:24:09Z",
  "id":1218554529,
  "issue":1577,
  "node_id":"IC_kwDODBCWws5Ioaqh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-17T22:24:09Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Conventional Commits only specifies `fix:` and `geat:` (in addition to `BREAKING CHANGE:`). The [Angular variant](https://github.com/conventional-changelog/commitlint/blob/master/%40commitlint/config-conventional/index.js#L21-L33) defines additional labels that are used by Angular JS, e.g. `build:`, `chore:`, etc. Additionally, Angular also specify their `type` field (`fix:`) to be lowercase.\r\n\r\nThere is no harm that I can see in choosing our own here, it's just nice to have inspiration.",
  "created_at":"2022-08-18T06:02:09Z",
  "id":1219072120,
  "issue":1577,
  "node_id":"IC_kwDODBCWws5IqZB4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-18T06:03:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #1615 ",
  "created_at":"2022-08-23T11:10:06Z",
  "id":1223914821,
  "issue":1577,
  "node_id":"IC_kwDODBCWws5I83VF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T11:10:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This looks like a bug to me. We don't have a fallback for `RecordArray`s with no child layouts.\r\n\r\nThis bug is not reproducible in our v2 release, which is being developed in `main` and available in the latest pre-releases under the `awkward._v2` submodule.\r\n\r\nIf you need to be able to do this, then you might benefit from trying out the v2 API. It's identical (or near-enough) at the high-level to v1, and I believe that we intend on making v2 support operations on v1 arrays (certainly this currently works in our pre-releases). You can try this out with `ak._v2.to_arrow(my_existing_v1_array)`. ",
  "created_at":"2022-08-10T11:00:49Z",
  "id":1210514749,
  "issue":1578,
  "node_id":"IC_kwDODBCWws5IJv09",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T11:00:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Thanks @agoose77!",
  "created_at":"2022-08-10T17:02:52Z",
  "id":1211000151,
  "issue":1578,
  "node_id":"IC_kwDODBCWws5ILmVX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T17:02:52Z",
  "user":"MDQ6VXNlcjIwOTY2Mjg="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I have separated the doxygen documentation from PR #1574 so that it can be merged. I'll add sphinx documentation in that once I clarify some things from Angus once he is back.\r\n\r\nHow can I view the doxygen documentation? Just wanted to make sure that the links to the classes and methods work.",
  "created_at":"2022-08-08T22:21:11Z",
  "id":1208677809,
  "issue":1579,
  "node_id":"IC_kwDODBCWws5ICvWx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-08T22:21:11Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"> How can I view the doxygen documentation? Just wanted to make sure that the links to the classes and methods work.\r\n\r\nWith doxygen installed (I get it from conda-forge, but you can get it from anywhere), this command will do it:\r\n\r\n```bash\r\ndoxygen docs-doxygen/Doxyfile\r\n```\r\n\r\nand the output will go in some new subdirectory of `docs-doxygen` (`_build`?).\r\n\r\nIt probably won't find your file, because it's in a different subdirectory.\r\n\r\n...\r\n\r\nOr maybe it will? I don't see anything in [Doxyfile](https://github.com/scikit-hep/awkward/blob/main/docs-doxygen/Doxyfile) that specifies which directories the C++ code can be found in. It might be searching everything recursively from `.`, in which case, your header-only files will be found.",
  "created_at":"2022-08-08T22:32:06Z",
  "id":1208685975,
  "issue":1579,
  "node_id":"IC_kwDODBCWws5ICxWX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-08T22:32:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1579?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1579](https://codecov.io/gh/scikit-hep/awkward/pull/1579?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5399980) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n",
  "created_at":"2022-08-08T22:48:04Z",
  "id":1208696783,
  "issue":1579,
  "node_id":"IC_kwDODBCWws5ICz_P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-09T01:17:16Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It probably won't find your file, because it's in a different subdirectory.\r\n\r\n@jpivarski I tried it and yes it is not able to find these files. Is there any alternative to check? ",
  "created_at":"2022-08-08T23:00:53Z",
  "id":1208704299,
  "issue":1579,
  "node_id":"IC_kwDODBCWws5IC10r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-08T23:02:00Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"I just searched the Doxygen documentation, and it looks like it's in the `INPUT` setting:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/9e17f2955670b1e63e684da7c4ad4c835a9994e6/docs-doxygen/Doxyfile#L832-L833\r\n\r\nThis one is looking in the `include` directory (with one extra file to be found in `docs-doxygen/input.md`, the landing page), so you'd have to add to this list the path to the headers within `src/awkward/_v2/cpp-headers`.",
  "created_at":"2022-08-08T23:34:41Z",
  "id":1208726083,
  "issue":1579,
  "node_id":"IC_kwDODBCWws5IC7JD",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-08T23:34:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski The documentation is generating correctly now. Please check and let me know if anything needs to be fixed or else we can merge it.",
  "created_at":"2022-08-09T01:42:01Z",
  "id":1208811355,
  "issue":1579,
  "node_id":"IC_kwDODBCWws5IDP9b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-09T01:42:01Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1580?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1580](https://codecov.io/gh/scikit-hep/awkward/pull/1580?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f6548cc) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.01%`.\n> The diff coverage is `35.13%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1580?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| ... and [6 more](https://codecov.io/gh/scikit-hep/awkward/pull/1580/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-10T10:48:06Z",
  "id":1210500728,
  "issue":1580,
  "node_id":"IC_kwDODBCWws5IJsZ4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-10T10:48:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1581?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1581](https://codecov.io/gh/scikit-hep/awkward/pull/1581?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fb64999) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.01%`.\n> The diff coverage is `35.13%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1581?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| ... and [6 more](https://codecov.io/gh/scikit-hep/awkward/pull/1581/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-10T11:17:28Z",
  "id":1210531478,
  "issue":1581,
  "node_id":"IC_kwDODBCWws5IJz6W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-11T10:47:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"That fix looks correct to me, also, but the tests are failing because some CI nodes don't have pyarrow installed. You just need to put a\r\n\r\n```python\r\npyarrow = pytest.importorskip(\"pyarrow\")\r\n```\r\n\r\nat the top of the test file.\r\n\r\nAnd then squash-and-merge when it works; this seems to have been an easy fix!",
  "created_at":"2022-08-10T17:06:44Z",
  "id":1211004213,
  "issue":1581,
  "node_id":"IC_kwDODBCWws5ILnU1",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "updated_at":"2022-08-10T17:06:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I am inclined to agree that we should not push the record-as-mapping protocol here. We'd start getting into the weeds with how NumPy defines e.g. `__contains__` and how a pure-Python mapping should etc. So, :+1: from me on making `Record` less clever.",
  "created_at":"2022-08-11T12:37:17Z",
  "id":1211931957,
  "issue":1582,
  "node_id":"IC_kwDODBCWws5IPJ01",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-11T12:37:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"The way I read this, this issue contained 2 things: disabling the iteration over records (done now) and fixing the way arrays are built from collections of records while iterating.\r\n\r\nI would suggest that we reopen as the second one is not fixed.",
  "created_at":"2022-09-26T09:21:58Z",
  "id":1257745218,
  "issue":1582,
  "node_id":"IC_kwDODBCWws5K96tC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T09:21:58Z",
  "user":"MDQ6VXNlcjEwMjU3NDU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@chernals you're correct; this issue did raise two closely related bugs / behavioural problems, and #1725 itself only addressed one of them. However, the building of records during iteration has also been fixed by #1721, which replaced v1 with our v2 submodule. The PR that closed this issue landed _after_ #1721, so it's fixed in main. \r\n\r\nThere is an argument to be made for backporting this fix (and the separate array-of-records fix in #1725) to the v2 submodule in 1.10.x, but I don't know yet what our criteria are for doing this. In fact, your reply is a good opportunity for @jpivarski to clarify that for me :)\r\n\r\n@chernals could you clarify the version of Awkward that you are using? Are you using the v2 submodule from our latest minor 1.10 release?",
  "created_at":"2022-09-26T09:33:36Z",
  "id":1257760599,
  "issue":1582,
  "node_id":"IC_kwDODBCWws5K9-dX",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-26T09:35:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This change was sufficient to fix both issues in v2 (this is from `main`/2.0.0rc1):\r\n\r\n```python\r\n>>> import awkward as ak   # which is to say, v2\r\n>>> ak.from_iter(ak.Record({\"a\": 1, \"b\": 2}))\r\n<Record {a: 1, b: 2} type='{a: int64, b: int64}'>\r\n>>> ak.from_iter([ak.Record({\"a\": 1, \"b\": 2})])\r\n<Array [{a: 1, b: 2}] type='1 * {a: int64, b: int64}'>\r\n>>> ak.from_iter([[ak.Record({\"a\": 1, \"b\": 2})]])\r\n<Array [[{a: 1, b: 2}]] type='1 * var * {a: int64, b: int64}'>\r\n```\r\n\r\nThe question, then, is whether it should be or can be backported into v1. Our stance is that we're only making essential bug-fixes in v1 now. A change in behavior like this might be considered a bug-fix (though the iteration over field names had once been intentional\u2014it just had unforeseen consequences), but it's \"not essential\" in the sense that there's a work-around.\r\n\r\nIn fact, we've been making very few changes to v1 in practice for about a year now. (It would be interesting to make a plot of how often the v1 directories were changed in git relative to the v2 directories.)",
  "created_at":"2022-09-26T13:51:37Z",
  "id":1258075395,
  "issue":1582,
  "node_id":"IC_kwDODBCWws5K_LUD",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-26T13:51:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Thanks for confirming that this is all available in v2 RC, I'll have a look.",
  "created_at":"2022-09-28T11:14:41Z",
  "id":1260753541,
  "issue":1582,
  "node_id":"IC_kwDODBCWws5LJZKF",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-28T11:14:41Z",
  "user":"MDQ6VXNlcjEwMjU3NDU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We don't yet have an RC out for v2. If you've used `pipx` and have `docker` installed, you can clone `main` and run \r\n```bash\r\n# Change XX for e.g. 39 (Python 3.9)\r\npipx run cibuildwheel . --only cpXX-manylinux_x86_64 \r\n```\r\n\r\nHere, `cpXX-manylinux_x86_64` is the wheel tag to build.",
  "created_at":"2022-09-28T11:33:35Z",
  "id":1260772508,
  "issue":1582,
  "node_id":"IC_kwDODBCWws5LJdyc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T11:33:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1583?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1583](https://codecov.io/gh/scikit-hep/awkward/pull/1583?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ce7fe05) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.00%`.\n> The diff coverage is `44.68%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1583?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| ... and [9 more](https://codecov.io/gh/scikit-hep/awkward/pull/1583/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-12T17:58:04Z",
  "id":1213372050,
  "issue":1583,
  "node_id":"IC_kwDODBCWws5IUpaS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-12T17:58:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Closing on @henryiii's advice: https://github.com/scikit-hep/awkward/pull/1602#issuecomment-1219873587. The Python 3.11 PR (#1602) takes priority over this.\r\n\r\nAnd surely @dependabot will recommend another update soon thereafter.  `:)`",
  "created_at":"2022-08-18T19:59:49Z",
  "id":1219900875,
  "issue":1583,
  "node_id":"IC_kwDODBCWws5ItjXL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-18T19:59:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
  "created_at":"2022-08-18T19:59:52Z",
  "id":1219900923,
  "issue":1583,
  "node_id":"IC_kwDODBCWws5ItjX7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-18T19:59:52Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"So, the technical cause for this is that 2D NumPy arrays (the `NumpyArray` layout node) are treated differently to 2D views over 1D NumPy Arrays (the `RegularArray` layout node). Somewhere in the concatenation logic we're perhaps losing the regular dimension to broadcasting, or something similar. This looks like a bug with a simple fix to me.",
  "created_at":"2022-08-15T10:29:18Z",
  "id":1214866136,
  "issue":1586,
  "node_id":"IC_kwDODBCWws5IaWLY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T10:29:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"I confirm the example described above is fixed! However... I found that when concatenating along another axis, the resulting array is still not regular: \r\n\r\n```python\r\na1 = ak.from_json('[[53,274],[39,388]]')\r\na2 = ak.from_json('[[53,274],[39,388]]')\r\na1 = ak.to_regular(a1, 1)\r\na2 = ak.to_regular(a2, 1)\r\n\r\n# this works now\r\nak.concatenate([a1, a2])\r\n# <Array [[53, 274], [39, 388], [53, ...], [39, 388]] type='4 * 2 * int64'>\r\n\r\n# this doesn't\r\nak.concatenate([a1, a2], axis=1)\r\n# <Array [[53, 274, 53, 274], [39, 388, ..., 388]] type='2 * var * int64'>\r\n```\r\n\r\nSorry for all those nasty edge-cases! ",
  "created_at":"2022-08-19T08:11:52Z",
  "id":1220382354,
  "issue":1586,
  "node_id":"IC_kwDODBCWws5IvY6S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T08:11:52Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"MEMBER",
  "body":"FYI, these aren't bug-fixes so much as new implementations. The inconsistency came from the fact that sometimes regular dimensions are represented by RegularArray nodes and sometimes (if they're at leaf-level) by NumpyArray nodes with `ndim > 1`. When the concatenation is applied to the NumpyArray nodes, we let NumPy take care of it, and naturally regular inputs beget regular outputs, but when concatenation is applied to RegularArray nodes, they were first converted to variable-length ListOffsetArray nodes as a matter of policy. Since the distinction between RegularArray and NumpyArray is not user-visible (unless you delve into `.layout`), this is an inconsistent policy. That's what I'm fixing: I'm giving the RegularArrays a specialized path.\r\n\r\nOn the other hand, that means that this is also an optimized path. When concatenating RegularArrays, these fixes prevent us from wasting time creating ListOffsetArrays that just happen to be regular (`offsets` that can be generated by `np.arange`). While I had all of this open, I applied a new constraint to `ak.concatenate` with `axis=0`, that if the Forms[^1] of all inputs are identical, the output would have that Form as well (#1605), which is something that will help Dask because it often has to concatenate computed partitions, and would like to treat the concatenated partitions in the same way as a single partition.\r\n\r\n[^1]: a Form is a detailed type: `array.type` is high-level (abstract types), `array.layout.form` is low-level (concrete types, enough detail for Numba-compilation, for instance).",
  "created_at":"2022-08-19T14:55:07Z",
  "id":1220775453,
  "issue":1586,
  "node_id":"IC_kwDODBCWws5Iw44d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T14:55:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"#1609 fixes the `axis != 0` case as well. Concatenation naturally splits into an `axis = 0` case (fixed by #1604) and an `axis != 0` case (fixed by #1609), so we should be done now.\r\n\r\nI also added tests for cases in which one side of a concatenation is a RegularArray and another is a NumpyArray, for both `axis = 0` and `axis != 0`.\r\n\r\nOne thing, though: if you have an option-regular type (`option[100 * xyz]`), that still concatenates to variable-length outputs because any missing lists are treated like empty lists, which have a different length than the regular size (`100` in my example).",
  "created_at":"2022-08-19T15:56:21Z",
  "id":1220833839,
  "issue":1586,
  "node_id":"IC_kwDODBCWws5IxHIv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T15:56:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"That was quick! Thank you so much, also for the detailed explanations! ",
  "created_at":"2022-08-19T19:42:40Z",
  "id":1221037213,
  "issue":1586,
  "node_id":"IC_kwDODBCWws5Ix4yd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T19:42:40Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1587?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1587](https://codecov.io/gh/scikit-hep/awkward/pull/1587?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7f70752) into [docs](https://codecov.io/gh/scikit-hep/awkward/commit/13eb6984a57e6b64353268f037fa23da737d4094?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (13eb698) will **decrease** coverage by `0.32%`.\n> The diff coverage is `n/a`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1587?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [...awkward/\\_v2/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWV0YWRhdGFfZnJvbV9wYXJxdWV0LnB5) | `31.57% <0.00%> (-33.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9wYXJxdWV0LnB5) | `49.15% <0.00%> (-29.50%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_to\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcGFycXVldC5weQ==) | `48.00% <0.00%> (-13.75%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/listoffsetform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2xpc3RvZmZzZXRmb3JtLnB5) | `78.82% <0.00%> (-3.53%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/regularform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3JlZ3VsYXJmb3JtLnB5) | `74.71% <0.00%> (-3.45%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `81.50% <0.00%> (-1.74%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/recordform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3JlY29yZGZvcm0ucHk=) | `64.36% <0.00%> (-1.73%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `73.84% <0.00%> (-1.54%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/unmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3VubWFza2VkZm9ybS5weQ==) | `75.00% <0.00%> (-1.39%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/indexedoptionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2luZGV4ZWRvcHRpb25mb3JtLnB5) | `81.92% <0.00%> (-1.21%)` | :arrow_down: |\n| ... and [3 more](https://codecov.io/gh/scikit-hep/awkward/pull/1587/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-13T22:49:25Z",
  "id":1214241560,
  "issue":1587,
  "node_id":"IC_kwDODBCWws5IX9sY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T11:58:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed for branch renaming. Sorry for the noise all.\r\n",
  "created_at":"2022-08-15T12:08:21Z",
  "id":1214939914,
  "issue":1587,
  "node_id":"IC_kwDODBCWws5IaoMK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T12:08:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The primary performance goal for Awkward is to scale linearly in the data, rather than exponentially. Despite that goal, and the fact that we want to be faster than pure-Python, there are some places where it might be noticeably slower than e.g. NumPy. As long as the performance scales ~linearly with size, then it's behaving as expected. That said, sometimes the constant of proportionality may be larger than necessary - i.e. with performance optimisations we could lower it.\r\n\r\nAs you're noticing, array creation time can dominate for large Python objects. Awkward is not doing anything particularly magic here - it's walking through the list and growing a series of buffers to build a layout object. Really, you don't want to call `from_iter` unless you don't know what the data look like. The *fastest* that we could convert these data using the public API would be if we had a flat buffer of floats that we could unflatten with arrays of lengths.[^array] I tested this vs `from_iter`, and they both follow the same scaling relationship, although the direct approach is ~8x faster.  \r\n```python3\r\ncontent = [x for l2 in l1 for l3 in l2 for x in l3]\r\ns1 = [len(l2) for l2 in l1]\r\ns2 = [len(l3) for l2 in l1 for l3 in l2];\r\narray = ak.unflatten(ak.unflatten(np.array(content), np.array(s2)), np.array(s1))\r\n```\r\nIf you don't call `ak.unflatten`, this excerpt of code still takes the same amount of time - the cost of allocating and looping in Python dominate here. It would be even faster if we used NumPy's flatten on the inner lists, but that's not the point of my example :)\r\n\r\n\r\nSo, the first take-away is avoid `from_iter` array construction, at least, if its runtime is comparable to the operations you need to perform. If you already have a flat NumPy array, use `unflatten`, if you can restore it from (fast) disk, do that, etc. Looking at your linked issue (https://github.com/MDAnalysis/mdanalysis/issues/3776) I *think* you already have a nice NumPy array and an array of split positions, so you can actually use `ak.unflatten`, e.g.\r\n\r\n```python3\r\nsplits = np.cumsum(np.unique(atoms.resindices, return_counts=True)[1])[:-1] # Assuming this is correct\r\npositions = atoms.residues.atoms.positions\r\n\r\n# Compute lengths of sublists\r\nindex = np.empty(len(splits)+2, dtype=np.int64)\r\nindex[0] = 0\r\nindex[-1] = len(positions)\r\nindex[1:-1] = splits\r\ncount = np.diff(index)\r\n\r\narray = ak.unflatten(positions, count)\r\n```\r\n\r\nAs to the actual reduction, `ak.mean` doesn't actually call a dedicated mean kernel; it manually computes a weighted mean. This involves calls to at least three kernels (to compute `sumw`, `sumwx`, and `sumwx/sumw`). So, there is a slight performance penalty relative to an optimised implementation, and then you can start to account for SIMD and other optimisations that we don't currently do in our CPU kernels to explain away the rest of the performance difference.\r\n\r\n[^array]: NB: This would also work with `ak.from_iter` / `ak.Array` instead of `np.array`, except that for flat arrays we have a performance bug (it could be faster by some constant if we moved the loop into C++). @jpivarski incidentally, do you know why we have [a loop in Python for `ak.from_iter`](https://github.com/scikit-hep/awkward/blob/385f2926cf50c881b4c7851329708f0149cdbce6/src/awkward/operations/convert.py#L890-L891)? If it's just a legacy artefact, I could submit a PR.",
  "created_at":"2022-08-15T10:11:05Z",
  "id":1214851177,
  "issue":1588,
  "node_id":"IC_kwDODBCWws5IaShp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T11:40:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Converting Python objects into an Awkward Array necessarily requires iteration over those Python objects. In this case,\r\n\r\n```python\r\ndef avg_with_awk(nested_list):\r\n    awk_arr = ak.Array(nested_list)\r\n    result_arr = ak.mean(awk_arr, axis=1)\r\n    return ak.to_numpy(result_arr)\r\n```\r\n\r\nthe `ak.Array(nested_list)` step has to involve a Python for loop somewhere. (This version of the constructor calls [ak.from_iter](https://awkward-array.readthedocs.io/en/latest/_auto/ak.from_iter.html).) In v1, it's in the lines @agoose77 pointed out:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/385f2926cf50c881b4c7851329708f0149cdbce6/src/awkward/operations/convert.py#L889-L891\r\nand in v2, it's here:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/d86fa74e6724539f323ac65395a5c6c82bf11156/src/awkward/_v2/operations/ak_from_iter.py#L85-L87\r\n\r\nThe alternative would be to put the `for x in iterable` inside of the pybind11-compiled code, which _in principle_ shouldn't be any better than leaving it outside like this. Writing `for x in iterable` using the Python C API is not a performance boost: it still has to evaluate each step on the Python virtual machine and deal with runtime types and all that. However, I've heard recently (at SciPy) that _in practice_ jumping through the pybind11 interface \"adds quite a bit of overhead.\"\r\n\r\nOkay, so I'll test it now:\r\n\r\n```python\r\n>>> iterable = np.random.normal(0, 1, 100000000).tolist()\r\n>>> builder = ak.layout.ArrayBuilder()\r\n>>> starttime = time.time()\r\n>>> for x in iterable:\r\n...     builder.fromiter(x)\r\n... \r\n>>> time.time() - starttime\r\n33.889479637145996\r\n```\r\n\r\nversus\r\n\r\n```python\r\n>>> builder = ak.layout.ArrayBuilder()\r\n>>> starttime = time.time()\r\n>>> builder.fromiter(iterable)\r\n>>> time.time() - starttime\r\n2.1149463653564453\r\n```\r\n\r\nYeah, that's considerable. Both cases iterate over a large Python list (`iterable`), one in Python and the other in the Python C API, but probably the thing that matters is that it crosses the pybind11 boundary only once in the second case. Doing that with an ArrayBuilder creates a different data structure\u2014in the second case, it's inside an extra layer of ListOffsetArray\u2014but that unnecessary structure can just be discarded.\r\n\r\nOkay, one more: what if the `iterable` is not a flat list of numbers but a list of lists of numbers?\r\n\r\n```python\r\n>>> iterable = np.random.normal(0, 1, (10000000, 10)).tolist()\r\n>>> builder = ak.layout.ArrayBuilder()\r\n>>> starttime = time.time()\r\n>>> for x in iterable:\r\n...     builder.fromiter(x)\r\n... \r\n>>> time.time() - starttime\r\n19.925483465194702\r\n```\r\n\r\nversus\r\n\r\n```python\r\n>>> builder = ak.layout.ArrayBuilder()\r\n>>> starttime = time.time()\r\n>>> builder.fromiter(iterable)\r\n>>> time.time() - starttime\r\n14.69497561454773\r\n```\r\n\r\nIn this case, it's crossing the pybind11 boundary 10\u00d7 less often, so that becomes less of a burden, and it has to unpack Python lists of lists, so that becomes more of a burden, and so this test that focuses on the effect of the pybind11 boundary sees less of a difference. At least, removing the pybind11 boundary does no harm, even when it's not the bottleneck.\r\n\r\nSo to answer your question, @agoose77: it went through `for x in iterable` due to ignorance on my part. Fixing that would sometimes be a performance boost for `ak.from_iter`. We've never worried much about optimizing this function because it will always have a Python for loop in it somewhere, but there's no reason to hamper it further with many passes through the pybind11 interface.\r\n\r\nI'll change the title of this issue to say it's about removing the pybind11 bottleneck.\r\n\r\n----------------------------\r\n\r\nCan [ak.mean](https://awkward-array.readthedocs.io/en/latest/_auto/ak.mean.html) be optimized? Without a weight, it computes one [ak.count](https://awkward-array.readthedocs.io/en/latest/_auto/ak.count.html) and one [ak.sum](https://awkward-array.readthedocs.io/en/latest/_auto/ak.sum.html), so I don't see how. There is an open issue (#1323) to add a fast-path for reduction over `axis=-1`, but that's not @tylerjereddy's use-case here: `axis=1` is equivalent to `axis=-2`, which needs to create the intermediate structures that #1323 hopes to avoid.\r\n\r\n----------------------------\r\n\r\nThat said, if your actual problem resembles the test you've made here, in which you know the structure of the nested lists, you'd be better off doing what @agoose77 suggested, instead of making many Python objects and then iterating over them to construct the Awkward array.",
  "created_at":"2022-08-15T15:38:34Z",
  "id":1215184076,
  "issue":1588,
  "node_id":"IC_kwDODBCWws5IbjzM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T15:40:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Writing for x in iterable using the Python C API is not a performance boost: it still has to evaluate each step on the Python virtual machine and deal with runtime types and all that. \r\n\r\nYes, I heard something similar and hence took a look at this line. I found the same outcomes as you - only really significant for large arrays.\r\n\r\n> Can [ak.mean](https://awkward-array.readthedocs.io/en/latest/_auto/ak.mean.html) be optimized? Without a weight, it computes one [ak.count](https://awkward-array.readthedocs.io/en/latest/_auto/ak.count.html) and one [ak.sum](https://awkward-array.readthedocs.io/en/latest/_auto/ak.sum.html), so I don't see how.\r\n\r\nI thought about this again, and I guess not actually. We could compute a running average, and trade memory for compute, but it might not be worth it. Clearly a sizeable chunk of the perf here is simply from having a non-regular list length. \r\n",
  "created_at":"2022-08-15T17:04:34Z",
  "id":1215389366,
  "issue":1588,
  "node_id":"IC_kwDODBCWws5IcV62",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T17:04:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1589?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1589](https://codecov.io/gh/scikit-hep/awkward/pull/1589?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (09593e9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.00%`.\n> The diff coverage is `46.93%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1589?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.27% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| ... and [10 more](https://codecov.io/gh/scikit-hep/awkward/pull/1589/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-15T09:43:00Z",
  "id":1214827797,
  "issue":1589,
  "node_id":"IC_kwDODBCWws5IaM0V",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T09:43:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"(Note: we talked about this on Slack.)",
  "created_at":"2022-08-15T14:33:25Z",
  "id":1215082827,
  "issue":1589,
  "node_id":"IC_kwDODBCWws5IbLFL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T14:33:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"(Note: we talked about this on Slack.)",
  "created_at":"2022-08-15T14:33:27Z",
  "id":1215082886,
  "issue":1589,
  "node_id":"IC_kwDODBCWws5IbLGG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T14:33:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1590?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1590](https://codecov.io/gh/scikit-hep/awkward/pull/1590?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (db4d523) into [docs](https://codecov.io/gh/scikit-hep/awkward/commit/13eb6984a57e6b64353268f037fa23da737d4094?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (13eb698) will **increase** coverage by `0.05%`.\n> The diff coverage is `80.10%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1590?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `63.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.41% <\u00f8> (-0.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (-0.28%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `71.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| ... and [46 more](https://codecov.io/gh/scikit-hep/awkward/pull/1590/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-15T12:21:52Z",
  "id":1214950976,
  "issue":1590,
  "node_id":"IC_kwDODBCWws5Iaq5A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T16:55:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"so WASM caching is not working just yet, but I think we can handle that down the road.",
  "created_at":"2022-08-19T21:22:56Z",
  "id":1221102135,
  "issue":1590,
  "node_id":"IC_kwDODBCWws5IyIo3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T21:22:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1591?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1591](https://codecov.io/gh/scikit-hep/awkward/pull/1591?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (27737e8) into [docs](https://codecov.io/gh/scikit-hep/awkward/commit/13eb6984a57e6b64353268f037fa23da737d4094?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (13eb698) will **increase** coverage by `0.05%`.\n> The diff coverage is `80.10%`.\n\n> :exclamation: Current head 27737e8 differs from pull request most recent head bbcf256. Consider uploading reports for the commit bbcf256 to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1591?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `63.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.41% <\u00f8> (-0.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (-0.28%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `71.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| ... and [46 more](https://codecov.io/gh/scikit-hep/awkward/pull/1591/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-15T14:03:06Z",
  "id":1215049953,
  "issue":1591,
  "node_id":"IC_kwDODBCWws5IbDDh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T14:13:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1594?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1594](https://codecov.io/gh/scikit-hep/awkward/pull/1594?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b919446) into [docs](https://codecov.io/gh/scikit-hep/awkward/commit/13eb6984a57e6b64353268f037fa23da737d4094?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (13eb698) will **increase** coverage by `0.05%`.\n> The diff coverage is `80.10%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1594?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | `63.50% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `66.41% <\u00f8> (-0.76%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (-0.28%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `76.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2VtcHR5YXJyYXkucHk=) | `71.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| ... and [46 more](https://codecov.io/gh/scikit-hep/awkward/pull/1594/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-15T15:29:13Z",
  "id":1215161181,
  "issue":1594,
  "node_id":"IC_kwDODBCWws5IbeNd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T15:46:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this is now working in main:\r\n```python\r\n>>> array = ak._v2.Array(\r\n...     ak._v2.contents.IndexedOptionArray(\r\n...         ak._v2.index.Index64([0, -1]),\r\n...         ak._v2.from_numpy(np.array([[[1, 2, 3], [4, 5, 6]]]), regulararray=True, highlevel=False),\r\n...     )\r\n... )\r\n>>> array[:, :, []]\r\n<Array [[[], []], None] type='2 * option[2 * 0 * int64]'>\r\n```\r\nand\r\n```python\r\n>>> array = ak._v2.from_regular(\r\n...     ak._v2.from_numpy(np.array([[[1, 2, 3], [4, 5, 6]]]), regulararray=True),\r\n...     axis=1,\r\n... )\r\n>>> array[:, :, []]\r\n<Array [[[], []]] type='1 * var * 0 * int64'>\r\n```",
  "created_at":"2022-09-06T19:41:43Z",
  "id":1238577233,
  "issue":1595,
  "node_id":"IC_kwDODBCWws5J0zBR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T19:41:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1596?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1596](https://codecov.io/gh/scikit-hep/awkward/pull/1596?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (22aabec) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.18%`.\n> The diff coverage is `73.36%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1596?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.30% <40.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `74.35% <50.00%> (+0.52%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.68% <52.17%> (+5.26%)` | :arrow_up: |\n| ... and [25 more](https://codecov.io/gh/scikit-hep/awkward/pull/1596/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-15T15:03:02Z",
  "id":1215128013,
  "issue":1596,
  "node_id":"IC_kwDODBCWws5IbWHN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T15:31:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This is out of date and the issue that it addresses was closed by #1597. In particular, https://github.com/scikit-hep/awkward/pull/1597/files#r955454563 points out the removal of `maybe_toNumpyArray`, which we discussed at length because it earlier (this PR) seemed to be necessary. Hopefully these links will help someone in the future who's trying to understand the choices we made!",
  "created_at":"2022-09-08T16:21:45Z",
  "id":1240939552,
  "issue":1596,
  "node_id":"IC_kwDODBCWws5J9zwg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T16:21:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1597?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1597](https://codecov.io/gh/scikit-hep/awkward/pull/1597?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (213ad13) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.32%`.\n> The diff coverage is `67.43%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1597?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [54 more](https://codecov.io/gh/scikit-hep/awkward/pull/1597/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-15T18:52:13Z",
  "id":1215608422,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5IdLZm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T10:21:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski @ioanaif \r\n\r\nAs mentioned briefly in the commits, the current approach I'm taking here is to convert `[]` into `array([], dtype=int64)` as early as possible. This means we can scope `_getitem_fields` to _only_ working with field slices (which is much easier than having to add special case logic to every layout, for which we currently assume that `_getitem_fields` only handles non-empty lists of fields).\r\n\r\nThis being my first time properly looking at the v2 getitem logic, I wondered if I could make a strong case for dropping the non-tuple (fast-path) codepath in `Content._getitem`? It's not a huge issue, but I believe that this bug probably came about because we have these two separate code paths (we handled empty lists in the fast-path). I'm wondering if it is simply worth dropping the \"fast path\" altogether in favour of a generic dispatch via `_getitem_next`. My intuition is that the slicing logic itself shouldn't be a bottleneck that we are hugely worried about solving, whereas duplicate implementations that are not exactly identical *is* a problem we will want to avoid.\r\n\r\nAt the same time, I am also wondering if there's actually a motivating factor for keeping it e.g. a real-world legitimate (perf?) issue that I do not know about?",
  "created_at":"2022-08-16T11:35:22Z",
  "id":1216514726,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5Igoqm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-16T12:07:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Additionally, do we have a policy on whether `ak._v2.index.IndexN` are permitted as index items? We seem to prefer arrays (hence 7b138df), and  raise errors for `Index64` into a `NumpyArray` but places like `EmptyArray` have special cases for them.\r\n\r\nMy first reaction to this is that we should allow `Index64`, and should convert `NumpyArray`s to them during the `getitem` preparation logic.\r\n\r\nThis discussion is prompted by the above fixes breaking `EmptyArray`.",
  "created_at":"2022-08-16T12:01:05Z",
  "id":1216541364,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5IgvK0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-16T12:05:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The motivation is performance, but it seems like a big deal because a tuple slice has to go through mountains of pre-processing code, whereas a non-tuple slice is usually pretty direct. Going from v1 to v2, non-tuple bool/int array slices were fast-tracked, and I considered that a win.\r\n\r\nAs for actual measurements, `__iter__` is implemented with simple int slices, and it's pretty slow, slow enough that I think it might be a problem. (Try comparing an iteration through an Awkward Array versus an iteration through an equivalent list, or even an equivalent NumPy array. It's an antipattern, I know, but it's so extreme that maybe something should be done.)\r\n\r\nEliminating the non-tuple path for slices would make the slice logic simpler and would reduce the possibility that a case gets fixed in one path and not the other. But look around at the entirety of the slicing code\u2014it's huge\u2014removing the non-tuple paths might reduce it by 5%, but at a cost that the very most common slices become much slower. I agree that there's simplicity to be gained, but not much and at a large cost in performance. It doesn't sound like a good deal to me.",
  "created_at":"2022-08-16T13:02:13Z",
  "id":1216608178,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5Ig_ey",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-16T13:02:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, I was mainly curious if there was a motivating bug report that drove the change. \r\n\r\nIf it were just the `__iter__` impl, then even handling only these kind of slices would reduce our duplicating implementation. \r\nThat said, the difference in code is on the smaller side, so I'm happy to follow along with special casing the non-tuple case. I'll have a think about how we can ensure the two stay in sync (besides unit-testing) and/or defining the permitted index types.",
  "created_at":"2022-08-16T15:47:06Z",
  "id":1216820489,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5IhzUJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-16T15:47:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I just remembered something else: `array[100:200]` is a view and `array[100:200,]` is a copy (unless we recognize that the tuple has length 1 and redirect it to the non-tuple code path). In the big, complex tuple-handling getitem, we don't know if a slice in a tuple can be just a view until we get to that level of recursion, and by then, it's too late.\r\n\r\n(Recognizing that a slice consists of only ranges, i.e. `slice` objects, and avoiding a copy would be to _add another_ code path, motivated by performance. Now that I think about it, I'm not completely sure that it's possible if any lists are variable-length.)\r\n\r\nStill \"just a performance thing\" (as distinct code paths for the same effective outcome would always be), but it can be pretty significant.",
  "created_at":"2022-08-16T17:02:56Z",
  "id":1216910396,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5IiJQ8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-16T17:02:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Currently this PR regresses #1567 because we now pre-emptively convert lists into empty `Index64`s. This needs to be fixed. At first glance, it looks like I might want to tweak\r\n```\r\nak._v2._slicing.getitem_next_array_wrap(\r\n    out, head.metadata.get(\"shape\", (head.length,))\r\n)\r\n```\r\nbut that's enough for one day ;)\r\n\r\nAt that, I've probably broken the test because I was copying 1.0 behaviour, which is not correct IIRC.\r\n\r\nNB - in case it's not evident, I use \"we\" to refer to checked-in code written by _anyone_. I personally feel like that \"we\" is inclusive and makes it clear that I am not interested in who wrote the code (especially if it's not working as intended) - I would be much more interested discussing the fix :)",
  "created_at":"2022-08-16T22:08:05Z",
  "id":1217219274,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5IjUrK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-16T22:11:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, these commits technically break the test suite, but bring empty list handling in-line with the rest of Awkward's advanced index handling. So, we need to address #1601 in order to fix this.",
  "created_at":"2022-08-17T15:28:30Z",
  "id":1218165355,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5Im7pr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-17T15:28:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'd like the reviewers to particular focus on whether the changes to the test suite are OK. I've made only small changes, but I really don't want to accidentally sneak a bug into our tests!",
  "created_at":"2022-08-25T13:38:41Z",
  "id":1227274336,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5JJrhg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T13:38:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"My comment about \"The motivation is performance\" was about the comment before this one, not addressing this one:\r\n\r\n> Additionally, do we have a policy on whether `ak._v2.index.IndexN` are permitted as index items? We seem to prefer arrays (hence [7b138df](https://github.com/scikit-hep/awkward/commit/7b138df01b7ad01a5c87201589ac93e7dc344e5d)), and raise errors for `Index64` into a `NumpyArray` but places like `EmptyArray` have special cases for them.\r\n> \r\n> My first reaction to this is that we should allow `Index64`, and should convert `NumpyArray`s to them during the `getitem` preparation logic.\r\n> \r\n> This discussion is prompted by the above fixes breaking `EmptyArray`.\r\n\r\nThe distinction between\r\n\r\n```python\r\nak._v2.index.Index64.empty(0, nplike)\r\n```\r\n\r\nand\r\n\r\n```python\r\nnplike.empty(0, dtype=np.int64)\r\n```\r\n\r\nis that the first returns an Index64 and the second returns an actual NumPy array (or CuPy, etc.). Some functions require an Index (for metadata), such as `_carry`, so there are assertions to make sure they get the right thing.\r\n\r\nAll of the tuple items are normalized to a fixed set of types before launching into `_getitem_next`. We considered inventing custom classes for all of these slice types, as v1/C++ _had_ to, but I decided against inventing types that Python already distinguishes. However, it would have had the advantage of having auspicious names, like \"SliceInt\", \"SliceRange\", \"SliceEllipsis\", \"SliceRectArray\", etc.\r\n\r\nI looked at [ListOffsetArray._getitem_next](https://github.com/scikit-hep/awkward/blob/2b1f32404a13e91085db5752b78374a4c380935c/src/awkward/_v2/contents/listoffsetarray.py#L354-L622) as a prototypical case, to get a reminder of what the normalized types are. They are:\r\n\r\n   * `int` (really a Python `int`, not a NumPy scalar or anything) for integer-slicing\r\n   * `slice` for range-slicing\r\n   * `str` for single field-slicing\r\n   * `list` for multiple field-slicing; if we ever see a bare Python `list` after normalization, we _assume_ it's a list of strings\r\n   * `np.newaxis`/`None` for newaxis-slicing\r\n   * `Ellipsis` for ellipsis-slicing\r\n   * `Index64` (not any other integer-width) for rectilinear array-slicing: so not an actual NumPy array (or CuPy, etc.); note that a single integer gets broadcasted to this when used in the same slice as a rectilinear array\r\n   * `ListOffsetArray` (and not `ListArray`) for ragged array-slicing\r\n   * `IndexedOptionArray` (and not any other option-type) for missing value-slicing\r\n\r\nSo rectilinear arrays need to be normalized to `Index64`, not `np.ndarray`.\r\n\r\nI just checked all of the other `Content._getitem_next` implementations and they all require exactly these types\u2014any one of them would raise an AssertionError if they got an `np.ndarray` instead of an `Index64` (except RecordArray, which passes some types on to whatever's next). I know that I'm acting like a human-MyPy here: explicit type annotations would be better, but that's beyond the scope of this right now.\r\n\r\nSo I'm going to keep looking into this. `prepare_tuple_item` should not return an `np.ndarray`.",
  "created_at":"2022-08-25T20:56:19Z",
  "id":1227754769,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5JLg0R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T20:56:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski it looks like we do return NumPy Arrays rather than Index64 in `prepare_tuple_item`: e.g. for NumPy arrays themselves\r\n```python\r\n    elif isinstance(item, ak._v2.contents.NumpyArray):\r\n        return item.data\r\n```\r\nThese are then converted into Index64 by the broadcast routine.\r\n\r\nIf we fix this, then we might need to fix the broadcasting, because I don't know if it handles Index64.",
  "created_at":"2022-08-25T21:01:06Z",
  "id":1227758389,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5JLhs1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T21:01:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think the intention was to normalize them all to `Index64`, but the next step (broadcasting) ensures that they're all `Index64`, so no errors because it turned out alright in the end.\r\n\r\nBroadcastable types are detected via\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/2b1f32404a13e91085db5752b78374a4c380935c/src/awkward/_v2/_slicing.py#L23-L43\r\n\r\nSo regardless of whether they're `Index64` or `np.ndarray`, they'll get into the `broadcastable` list.\r\n\r\nWhen they actually get broadcasted,\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/2b1f32404a13e91085db5752b78374a4c380935c/src/awkward/_v2/_slicing.py#L54\r\n\r\nany `Index64`s get turned into raw arrays (`nplike`'s array type) because `Index64.__array__` is defined:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/2b1f32404a13e91085db5752b78374a4c380935c/src/awkward/_v2/index.py#L118-L119\r\n\r\nAnd then these all get wrapped up as `Index64`, so it's alright in the end:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/2b1f32404a13e91085db5752b78374a4c380935c/src/awkward/_v2/_slicing.py#L61-L86\r\n\r\nIt could be cleaner, but at least everything is normalized before it gets into `_getitem_next`.",
  "created_at":"2022-08-25T21:05:44Z",
  "id":1227762189,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5JLioN",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-25T21:05:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"So 7b138df01b7ad01a5c87201589ac93e7dc344e5d shouldn't have made a difference. For cleaner code, maybe `prepare_tuple_item` should always be returning `np.ndarray` (or `nplike`'s array type) with the knowledge that they will later be normalized to `Index64` by `getitem_broadcast`.",
  "created_at":"2022-08-25T21:08:50Z",
  "id":1227764672,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5JLjPA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T21:08:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"(The v1 slice-tuple preparation was worse! This is a step forward on a hard problem.)",
  "created_at":"2022-08-25T21:10:03Z",
  "id":1227765588,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5JLjdU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T21:10:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've made changes to this PR since your review. I merged the NumPy indexing case with the Awkward-NumPy logic inside the broadcasting function. To my mind, this broadcasting function is really just doing \"advanced indexing preparation\", so I don't think we need multiple functions. Validation of the index needs to happen at different times, so although we *could* split the two cases into separate before-and-after functions, I think it's not needed for now.\r\n\r\nI, therefore, renamed the existing \"prepare\" functions to reflect the distinction that they're used for normalising the arguments.\r\n\r\nI also found that my validation logic was too naive, so I moved to a state machine to be sure. There's a functional one [here](https://gist.github.com/agoose77/8d5e451383db5da34f844c5dffc2206e) but I thought you might prefer the iterator-based approach in this PR.\r\n\r\n> I can also say that it's 1 order of magnitude better than v1's pre-processing of slices and 2 orders of magnitude better than v0's handling of slices. We're converging.\r\n\r\nOh, for sure. I really did not enjoy running through the unboxing logic to fix bugs in v1. I dread to think of v0 if it's worse!\r\n",
  "created_at":"2022-08-26T10:06:29Z",
  "id":1228309385,
  "issue":1597,
  "node_id":"IC_kwDODBCWws5JNoOJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T10:06:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1598?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1598](https://codecov.io/gh/scikit-hep/awkward/pull/1598?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3883c0f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.00%`.\n> The diff coverage is `53.96%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1598?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_to\\_pandas.py](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcGFuZGFzLnB5) | `92.30% <0.00%> (\u00f8)` | |\n| ... and [14 more](https://codecov.io/gh/scikit-hep/awkward/pull/1598/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-15T19:38:19Z",
  "id":1215679164,
  "issue":1598,
  "node_id":"IC_kwDODBCWws5Idcq8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T19:48:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'd like to move to a non-setuptools backend at some point too. It might be that we can move to a new scikit-build by then, or just write a simple plugin for another build backend e.g. hatch. But, depending upon timing, we might need to do this in two separate phases.",
  "created_at":"2022-08-15T20:22:30Z",
  "id":1215750565,
  "issue":1599,
  "node_id":"IC_kwDODBCWws5IduGl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T20:22:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I _think_ hatchling is just for pure Python projects. But scikit-build definitely. I should probably write that up as an upcoming project, since it's one that @henryiii has in mind (Awkward is a part of his broad scikit-build project).",
  "created_at":"2022-08-15T20:34:24Z",
  "id":1215762786,
  "issue":1599,
  "node_id":"IC_kwDODBCWws5IdxFi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T20:34:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've used hatchling a fair bit, and the idea would be that we'd use a build-plugin for the compiled part. This would just invoke cmake as we do in setuptools. The benefit really is just fewer LoC, better build-backend integration, and using forward looking backends, but right now we'd be writing that build plugin ourselves (even if it's probably quite straightforward).\r\n\r\nYes, I recall hearing that, and I don't want to step on any toes (or take on another project just yet).",
  "created_at":"2022-08-15T20:38:18Z",
  "id":1215766783,
  "issue":1599,
  "node_id":"IC_kwDODBCWws5IdyD_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T20:38:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We are planning to write an extensions PEP & add support to the extensionlib library, probably around end of the year or next. Awkward will need this form when Rust is added.",
  "created_at":"2022-08-15T20:59:58Z",
  "id":1215794022,
  "issue":1599,
  "node_id":"IC_kwDODBCWws5Id4tm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T20:59:58Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"We're not 100% sure that Rust is going to be needed. A lot of the string functions that we need are also in pyarrow, which we need for other reasons. (@martindurant)",
  "created_at":"2022-08-15T22:25:37Z",
  "id":1215927096,
  "issue":1599,
  "node_id":"IC_kwDODBCWws5IeZM4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-15T22:25:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Correct, I was no longer pursuing rust for uft8 handling given the set of vectorised ops available via [pyarrow._compute](https://arrow.apache.org/docs/cpp/compute.html?highlight=utf8#string-predicates).",
  "created_at":"2022-08-16T02:09:48Z",
  "id":1216062762,
  "issue":1599,
  "node_id":"IC_kwDODBCWws5Ie6Uq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-16T02:09:48Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii can you confirm that this doesn't happen in a new RC (e.g. rc9)? I narrowed it down to \r\n- broken in 1.9.0rc2\r\n- working in 1.9.0rc3",
  "created_at":"2022-08-16T18:12:21Z",
  "id":1216983350,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5IibE2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-16T18:12:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Works fine in `rc9`!\r\n```\r\nIn [1]: import awkward\r\n\r\nIn [2]: awkward.__version__\r\nOut[2]: '1.9.0rc9'\r\n\r\nIn [3]: for ak in (awkward, awkward._v2):\r\n   ...:\r\n   ...:     class Point(ak.Record):\r\n   ...:         def distance(self, other):\r\n   ...:             return np.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)\r\n   ...:\r\n   ...:     ak.behavior[\"point\"] = Point\r\n   ...:\r\n   ...:     print(\r\n   ...:         ak.Array(\r\n   ...:             [[{\"rho\": 1, \"phi\": 1.0}], [], [{\"rho\": 2, \"phi\": 2.0}]], with_name=\"point\"\r\n   ...:         ).to_list()\r\n   ...:     )\r\n   ...:\r\nArrayBuilder snapshot\r\n[[{'rho': 1, 'phi': 1.0}], [], [{'rho': 2, 'phi': 2.0}]]\r\nArrayBuilder to_buffers\r\n[[{'rho': 1, 'phi': 1.0}], [], [{'rho': 2, 'phi': 2.0}]]\r\n```",
  "created_at":"2022-08-16T19:53:53Z",
  "id":1217095132,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5Ii2Xc",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-16T19:53:53Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"But `vector` still gives weird results (replacing all the `awkward` imports with `awkward._v2` in `vector`'s code) -\r\n```\r\nIn [1]: import vector\r\n\r\nIn [2]: import awkward; awkward.__version__\r\nOut[2]: '1.9.0rc9'\r\n\r\nIn [3]: array = vector.Array([[{\"pt\": 1, \"phi\": 0}], [], [{\"pt\": 2, \"phi\": 1}]])\r\nArrayBuilder to_buffers\r\n\r\nIn [4]: array\r\nOut[4]: <MomentumArray2D [[{rho: 1, phi: 0}], [], [{...}]] type='3 * var * Momentum...'>\r\n\r\nIn [5]: array.tolist()\r\nOut[5]: \r\n[<Array [{rho: 1, phi: 0}] type='1 * Momentum2D[rho: int64, phi: int64]'>,\r\n <Array [] type='0 * Momentum2D[rho: int64, phi: int64]'>,\r\n <Array [{rho: 2, phi: 1}] type='1 * Momentum2D[rho: int64, phi: int64]'>]\r\n\r\nIn [6]: [arr.tolist() for arr in array.tolist()]\r\nOut[6]: [[{'rho': 1, 'phi': 0}], [], [{'rho': 2, 'phi': 1}]]\r\n```",
  "created_at":"2022-08-16T20:19:07Z",
  "id":1217117885,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5Ii769",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-16T20:19:35Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@Saransh-cpp thanks for checking that. I've done the same, and noted that it's [this check](https://github.com/scikit-hep/awkward/blob/ead200677450ba4811d09bc69faf83738e11aac4/src/awkward/_v2/contents/content.py#L1391) that's finding [this `__getitem__`](https://github.com/scikit-hep/vector/blob/d4ad49ecf1761e3a6561498d2405b7789d53deff/src/vector/backends/awkward.py#L610-L614)\r\n\r\nI haven't yet checked `git blame` to see why we do this, or indeed why we need this implementation on the vector side.\r\n\r\n@jpivarski I've had a poke around, but I can't see this behavior in v1, and I can't find any information on why this was introduced. I've probably missed something, but nevertheless - can you provide any insight as to why Awkward does this? Is it  a feature waiting for an application, or does it solve an existing problem? (This sounds like a loaded question, but in my view both are fine! I'm just trying to get a handle on how to proceed).",
  "created_at":"2022-08-16T20:49:47Z",
  "id":1217150073,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5IjDx5",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-16T21:00:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for pointing out the possibly faulty code, @agoose77! I tried testing things out after removing the [`__getitem__`](https://github.com/scikit-hep/vector/blob/d4ad49ecf1761e3a6561498d2405b7789d53deff/src/vector/backends/awkward.py#L610-L614) pointed by you (thanks to a discussion with @henryiii) -\r\n\r\n## Works\r\nThe original issue goes away!\r\n```\r\nIn [1]: import vector\r\n\r\nIn [2]: import awkward; awkward.__version__\r\nOut[2]: '1.9.0rc9'\r\n\r\nIn [3]: array = vector.Array([[{\"pt\": 1, \"phi\": 0}], [], [{\"pt\": 2, \"phi\": 1}]])\r\nArrayBuilder to_buffers\r\n\r\nIn [4]: array.tolist()\r\nOut[4]: [[{'rho': 1, 'phi': 0}], [], [{'rho': 2, 'phi': 1}]]\r\n```\r\n\r\nThe `mypy` hook fails after removing `__getitem__`, but I think that can be fixed.\r\n\r\n## Does not work\r\n(Maybe these should be reported as new issues.)\r\n\r\nIndexing and `tolist()`. The failing test -\r\nhttps://github.com/scikit-hep/vector/blob/d4ad49ecf1761e3a6561498d2405b7789d53deff/tests/test_issues.py#L14-L24\r\n```py\r\ndef test_issue_99():\r\n    ak = pytest.importorskip(\"awkward\")\r\n    vector.register_awkward()\r\n    vec = ak.Array([{\"x\": 1.0, \"y\": 2.0, \"z\": 3.0}], with_name=\"Vector3D\")\r\n    assert vec.to_xyz().tolist() == [{\"x\": 1.0, \"y\": 2.0, \"z\": 3.0}]\r\n    assert vec[0].to_xyz().tolist() == {\"x\": 1.0, \"y\": 2.0, \"z\": 3.0}\r\n    assert vec[0].to_rhophiz().tolist() == {\r\n        \"rho\": 2.23606797749979,\r\n        \"phi\": 1.1071487177940904,\r\n        \"z\": 3.0,\r\n    }\r\n```\r\nRunning locally (after replacing `awkward` import with `awkward._v2` imports) -\r\n```\r\nIn [1]: import vector\r\n\r\nIn [2]: import awkward; awkward.__version__\r\nOut[2]: '1.9.0rc9'\r\n\r\nIn [3]: import awkward._v2 as ak\r\n\r\nIn [4]: vector.register_awkward()\r\n\r\nIn [5]: vec = ak.Array([{\"x\": 1.0, \"y\": 2.0, \"z\": 3.0}], with_name=\"Vector3D\")\r\nArrayBuilder to_buffers\r\n\r\nIn [6]: vec\r\nOut[6]: <VectorArray3D [{x: 1, y: 2, z: 3}] type='1 * Vector3D[x: float64, y: float...'>\r\n\r\nIn [7]: vec.to_xyz().tolist()\r\nOut[7]: [{'x': 1.0, 'y': 2.0, 'z': 3.0}]\r\n\r\nIn [8]: vec.to_xyz()\r\nOut[8]: <VectorArray3D [{x: 1, y: 2, z: 3}] type='1 * Vector3D[x: float64, y: float...'>\r\n\r\nIn [9]: vec[0].to_xyz()\r\nArrayBuilder to_buffers\r\nArrayBuilder to_buffers\r\nArrayBuilder to_buffers\r\nOut[10]: <VectorRecord3D {x: 1, y: 2, z: 3} type='Vector3D[x: float64, y: float64, z...'>\r\n\r\nIn [10]: vec[0].to_xyz().tolist()  # -> should output a python list\r\nArrayBuilder to_buffers\r\nArrayBuilder to_buffers\r\nArrayBuilder to_buffers\r\nOut[11]: <VectorRecord3D {x: 1, y: 2, z: 3} type='Vector3D[x: float64, y: float64, z...'>\r\n```",
  "created_at":"2022-08-19T10:22:16Z",
  "id":1220509042,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5Iv31y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T18:22:18Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"As per the Awkward meeting, the reason for https://github.com/scikit-hep/awkward/blob/ead200677450ba4811d09bc69faf83738e11aac4/src/awkward/_v2/contents/content.py#L1391 is that if users override the `__getitem__` implementation, then we can't use the (fast) normal path for list serialisation. \r\n\r\nIn the meeting, we discussed making `to_list` overrideable by extension authors, but didn't get as far as how to do this.",
  "created_at":"2022-08-25T15:36:24Z",
  "id":1227435574,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5JKS42",
  "performed_via_github_app":null,
  "reactions":{
   "eyes":1,
   "total_count":1
  },
  "updated_at":"2022-08-25T15:36:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I have been thinking on this some more, and as far as I can recall, we don't have any concrete use cases for overriding `__getitem__` to return non-arrays. Given how big Awkward already is, I am inclined to suggest that we drop this `to_list` feature (it's exclusive to v2, right?) until someone actually needs it. To my mind, Arrays are at the core of what Awkward \"is\", so any intention to break that assumption by returning non-Awkward types at the heart of the array machinery seems misguided. If users do want to do this, they can just write a custom `def getitem(self, item)`. Otherwise, we need to figure out an extension mechanism for a use case that we don't yet understand, and that seems like a tall order.\r\n",
  "created_at":"2022-08-29T11:06:08Z",
  "id":1230133718,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5JUlnW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T11:09:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Originally, `__array__ = \"string\"` used this feature to return strings, rather than arrays. Strings were intended as a first example of a behavior, the kind of Array-overriding one would want to do: \"This isn't an array of lists of uint8; it's an array of strings.\" Strings, specifically, are now hard-coded, so they're not explicitly using this feature right now. (Strings are such a basic data type that we don't want them to be lost. Getting lists of integers when you expect strings is very unnerving.)\r\n\r\nSo overriding `__getitem__` was a basic goal with a use-case, strings, even though that use-case is implemented differently now. Other use-cases could involve, say, arrays of pickled Python objects (to get the functionality of [ObjectArray](https://github.com/scikit-hep/awkward-0.x/blob/master/awkward0/array/objects.py) from Awkward v0). Also, we can't prevent people from overriding `__getitem__` in classes that derive from `ak.Array`, and we don't want the `to_list` to disagree with the `__getitem__` (`to_list` should act as though it pulled all items from `__getitem__`, even though it's normally vectorized for speed.).\r\n\r\nI've had this tab open since the issue was first raised; I've been meaning to get back to it. I was thinking that the `is` could be replaced by some sort of Python-friendly `issubclass`, or something that checks the `mro`. I need to find out what, exactly, is breaking here; I feel like there must be a way to make it work.",
  "created_at":"2022-08-29T14:35:15Z",
  "id":1230399315,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5JVmdT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T14:35:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, that's a really good point. I had forgotten about the depth-reduction aspect of our string abstraction here. Incidentally, I think it might be useful to abstract our string-specialcasing at a later date, in case there are legitimate uses for the same mechanism down the road. Not an urgent todo, though.\r\n\r\nThe basic problem here is that `vector` implements a custom `__getitem__`. We have no way of knowing whether the author intends to use the vectorized `to_list` or not. Because of this, we currently assume that any custom `__getitem__` implementation is overloading the behaviour of `getitem`. In `vector`'s case, that's not true; they're just adding type hints. So, it's not a problem of inheritance or any such thing, we just don't have enough information to determine the behaviour author's intention.\r\n\r\nWe have some options:\r\n- Check whether `__getitem__` returns an array with a no-op getitem call, e.g. `self[()]`, and assume that if it does, `to_list` works as expected. This makes a lot of assumptions about what kind of things the author is doing with `__getitem__`. \r\n- Provide a mechanism for behaviours to implement a custom `to_list`, which `vector` could use to restore the original `to_list` behaviour\r\n- Provide a mechanism for behaviors to signal that they *don't* want the fallback `to_list` pathway\r\n\r\nOr variations thereof.\r\n\r\nFrom a type-theory perspective, we're in murky water because allowing a user to just break `__getitem__` is at odds with the Liskov Substitution Principle, but equally, we already have that problem with strings (using the string behaviour changes the dimension of an array by `-1`). That is, using the definition:\r\n> Let \u03a6(x) be a property provable about objects x of type T. Then \u03a6(y) should be true for objects y of type S where S is a subtype of T.\r\n\r\nLet it be known that I also don't hugely care about breaking LSP here, it's a principle not a law ;)\r\n\r\nUltimately, the safest thing to do is disable the fast-path `to_list` if a user overrides `__getitem__`. I feel that it's better to make this slow than just plain wrong, so users should opt-in to using the Awkward fast-path through a custom `_to_list` perhaps. For vector, that would mean:\r\n\r\n```python\r\nclass VectorAwkward:\r\n\r\n    def _to_list(self, ...):\r\n        this_no_cls = ak.with_parameter(self, \"__array__\", None)\r\n        return ak._v2.to_list(this_no_cls)\r\n```",
  "created_at":"2022-08-29T15:04:19Z",
  "id":1230438490,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5JVwBa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T15:07:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Just disabling the fast-path is exactly what the code in\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/8c9bf49e7656571912861b615429c411f51be039/src/awkward/_v2/contents/content.py#L1406-L1412\r\n\r\nis supposed to do. It's supposed to be saying, \"Would this node (`self`), if it were at top-level, have a custom `__getitem__`? If so, call that `__getitem__` on each `i` in `range(self.length)` to make a list of results _instead of_ using the fast-path.\" (The code that calls this checks for whether its return value is `None`, which is how it's supposed to communicate the fact that the fast-path is still a viable option.)\r\n\r\nIf that is not what is happening, then have a bug; something that I'm not seeing is broken in this implementation. I'd have to try it out to find out if it is broken and in what way.\r\n\r\n@henryiii's MWE does not override `__getitem__`. This detour from the fast-path shouldn't be triggered. Without running it personally, I don't see why that's happening, but I can get to it in a moment.\r\n\r\n-----------------------\r\n\r\nWhether we're breaking the LSP is a matter of what you think is a provable property of type `ak.Array`. Any subclass `S` in OOP can override the base class `T`'s method `X`. The only reason you'd want to override a method is so that it can return something different: \"`T.X()` returns value `Y`\" but \"`S.X()` returns value `Z`\" with `Y` and `Z` being different values. So unless we're in a language in which methods can be declared `final` or we're talking about return _types_ `Y` and `Z` in a type-checked language, \"`T.X()` returns value `Y`\" can't be a _proven_ statement about `T`.\r\n\r\nYou'd be right to point out that any of the imaginable use-cases (including strings) would return different _types_ `Y` and `Z`. So `ak.Array.__getitem__` would not pass a type-checker unless it claimed to return `Any`. However, even without this ability for subclasses to override it, `ak.Array.__getitem__` can return `ak.Array`, `ak.Record`, any of the numeric types listed here:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/8c9bf49e7656571912861b615429c411f51be039/src/awkward/_v2/types/numpytype.py#L66-L82\r\n\r\nand strings (because that extension is hard-coded). Putting IP and MAC addresses in arrays was the motivating reason for Pandas to adopt an ExtensionArray mechanism, though for us, that could be an array of fixed-length bytestrings, maybe with special behaviors. The list of possible scalar types will have to be extensible.\r\n\r\n-------------------\r\n\r\nMaking developers have to explicitly override `to_list` is something I'd like to avoid. It opens questions of \"What happens if only one of the two is overridden?\"",
  "created_at":"2022-08-29T16:05:54Z",
  "id":1230520711,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5JWEGH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T16:05:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @henryiii's MWE does not override __getitem__. This detour from the fast-path shouldn't be triggered. Without running it personally, I don't see why that's happening, but I can get to it in a moment.\r\n\r\nRight, that was because he was testing against 1.8.0, where we had a bug in `to_list`. In `main` this does not happen (and indeed, most of the pre-releases). This issue is about two separate problems.\r\n\r\n> Just disabling the fast-path is exactly what the code in ... is supposed to do\r\n\r\nYes, agreed. My response is whether this is the right way for users to override `__getitem__`, or should we require them to \"do more\", e.g add new methods.\r\n\r\n> Whether we're breaking the LSP is a matter of what you think is a provable property of type ak.Array\r\n\r\nIndeed, hence why I don't place too much stock in the argument. Yet, I don't think most invocations of LSP are actually referring to provability. Particular in Python, most people are likely talking about \"would my application break if you replaced `X` with `class Y(X)` for some `Y`, `X`.\r\n\r\n> The only reason you'd want to override a method is so that it can return something different:\r\n\r\nI disagree - logging is one case, vector's use case is another. That said, most users would not be doing either of these.\r\n\r\n> Making developers have to explicitly override to_list is something I'd like to avoid. \r\n\r\nI wouldn't require them to do this. Only if they want to use the non-customised pathway, or implement some other `to_list` scheme.\r\n\r\nMy answer to\r\n> What happens if only one of the two is overridden?\r\n\r\nis \"what we have right now\".",
  "created_at":"2022-08-29T16:49:13Z",
  "id":1230569287,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5JWP9H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T16:49:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Right, that was because he was testing against 1.8.0, where we had a bug in `to_list`. In `main` this does not happen (and indeed, most of the pre-releases). This issue is about two separate problems.\r\n\r\nWhat's the other problem? I'd like to address this, but I don't know what's wrong.\r\n\r\nOh, wait: is it this?\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> class Point(ak._v2.Record):\r\n...     def __getitem__(self, where):\r\n...         return super().__getitem__(where)\r\n... \r\n>>> ak._v2.behavior[\"point\"] = Point\r\n>>> array = ak._v2.Array(\r\n...     [[{\"rho\": 1, \"phi\": 1.0}], [], [{\"rho\": 2, \"phi\": 2.0}]],\r\n...      with_name=\"point\",\r\n... )\r\n>>> array.tolist()\r\n[[{'rho': 1, 'phi': 1.0}], [], [{'rho': 2, 'phi': 2.0}]]\r\n>>> array[0].tolist()\r\n[{'rho': 1, 'phi': 1.0}]\r\n>>> array[0, 0].tolist()\r\n<Point {rho: 1, phi: 1} type='point[rho: int64, phi: float64]'>\r\n```\r\n\r\nThat is, `ak.Record.to_list` should not return `self`? Indeed, the above is wrong.",
  "created_at":"2022-08-29T18:03:41Z",
  "id":1230663040,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5JWm2A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T18:03:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In 1.8.0, the original code sample in this issue produced the following:\r\n```python\r\n\r\nIn [1]: import awkward\r\n   ...:\r\n   ...: for ak in (awkward, awkward._v2):\r\n   ...:\r\n   ...:     class Point(ak.Record):\r\n   ...:         def distance(self, other):\r\n   ...:             return np.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)\r\n   ...:\r\n   ...:     ak.behavior[\"point\"] = Point\r\n   ...:\r\n   ...:     print(\r\n   ...:         ak.Array(\r\n   ...:             [[{\"rho\": 1, \"phi\": 1.0}], [], [{\"rho\": 2, \"phi\": 2.0}]], with_name=\"point\"\r\n   ...:         ).to_list()\r\n   ...:     )\r\n   ...:\r\n[[{'rho': 1, 'phi': 1.0}], [], [{'rho': 2, 'phi': 2.0}]]\r\n[[<Point {rho: 1, phi: 1} type='point[rho: int64, phi: float64]'>], [], [<Point {rho: 2, phi: 2} type='point[rho: int64, phi: float64]'>]]\r\n```\r\n\r\nIn `main`, we have\r\n```python\r\nIn [1]: import awkward\r\n   ...: \r\n   ...: for ak in (awkward, awkward._v2):\r\n   ...: \r\n   ...:     class Point(ak.Record):\r\n   ...:         def distance(self, other):\r\n   ...:             return np.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)\r\n   ...: \r\n   ...:     ak.behavior[\"point\"] = Point\r\n   ...: \r\n   ...:     print(\r\n   ...:         ak.Array(\r\n   ...:             [[{\"rho\": 1, \"phi\": 1.0}], [], [{\"rho\": 2, \"phi\": 2.0}]], with_name=\"point\"\r\n   ...:         ).to_list()\r\n   ...:     )\r\n   ...: \r\n[[{'rho': 1, 'phi': 1.0}], [], [{'rho': 2, 'phi': 2.0}]]\r\n[[{'rho': 1, 'phi': 1.0}], [], [{'rho': 2, 'phi': 2.0}]]\r\n```\r\n\r\nSo the original issue seems fixed. However, you seem to have discovered another bug.  We need to fix that regardless of whether we need a \"fast path\" for trivially overloaded `__getitem__`s.\r\n\r\nClosely related is the issue that's now being triggered by `vector`'s arrays with `to_list`; a slow-path is directly storing the output of `array[i]` into the output list:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/ead200677450ba4811d09bc69faf83738e11aac4/src/awkward/_v2/contents/content.py#L1397\r\n\r\nFixing this seems a bit tricky to me - are we to assume that the user is returning something arbitrary, or an Awkward type? etc. Hence my suggestion that we look at letting users override `to_list` to correctly handle cases like this! :)",
  "created_at":"2022-08-29T19:46:43Z",
  "id":1230787307,
  "issue":1600,
  "node_id":"IC_kwDODBCWws5JXFLr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T19:46:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Per my meeting with Jim, we're just going to exclude this secondary mode of advanced indexing (https://numpy.org/doc/stable/user/basics.indexing.html#basics-indexing:~:text=In%20the%20first,just%20like%20slicing) . :partying_face: \r\n\r\nWe will do this even for `purelist_regular` arrays.",
  "created_at":"2022-08-24T14:02:14Z",
  "id":1225770262,
  "issue":1601,
  "node_id":"IC_kwDODBCWws5JD8UW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T14:02:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This will be easier after #1550, so will rebase after that.",
  "created_at":"2022-08-18T15:59:03Z",
  "id":1219666627,
  "issue":1602,
  "node_id":"IC_kwDODBCWws5IsqLD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-18T15:59:03Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1602?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1602](https://codecov.io/gh/scikit-hep/awkward/pull/1602?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (10b09e0) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.11%`.\n> The diff coverage is `51.53%`.\n\n> :exclamation: Current head 10b09e0 differs from pull request most recent head 3703600. Consider uploading reports for the commit 3703600 to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1602?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `24.90% <2.73%> (-1.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `8.62% <8.62%> (\u00f8)` | |\n| ... and [30 more](https://codecov.io/gh/scikit-hep/awkward/pull/1602/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-18T16:13:55Z",
  "id":1219681941,
  "issue":1602,
  "node_id":"IC_kwDODBCWws5Ist6V",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T01:17:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"This should probably be done instead of https://github.com/scikit-hep/awkward/pull/1583 since that one doesn't add testing for 3.11, but just the new wheel builds only.",
  "created_at":"2022-08-18T19:33:15Z",
  "id":1219873587,
  "issue":1602,
  "node_id":"IC_kwDODBCWws5Itcsz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-18T19:33:15Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"To be clear: this updates pybind11 on purpose, right? (I missed that when scanning over the files that have changed, since the whole submodule is one small line.) The new pybind11 commit coincides with [release 2.10.0](https://github.com/pybind/pybind11/releases/tag/v2.10.0), which looks very intentional.\r\n\r\nI'll make a note in tomorrow's slides to be careful about accidentally back-porting pybind11 (and I'll be on the lookout for that, too, since it happens so easily).",
  "created_at":"2022-08-24T20:11:13Z",
  "id":1226232988,
  "issue":1602,
  "node_id":"IC_kwDODBCWws5JFtSc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T20:11:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"pybind11 2.10.0 is required for CPython 3.11 support, yes.",
  "created_at":"2022-08-24T20:12:21Z",
  "id":1226235299,
  "issue":1602,
  "node_id":"IC_kwDODBCWws5JFt2j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T20:12:21Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1603?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1603](https://codecov.io/gh/scikit-hep/awkward/pull/1603?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c8e3a59) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.00%`.\n> The diff coverage is `56.06%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1603?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.83% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRvcHRpb25hcnJheS5weQ==) | `89.14% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| ... and [16 more](https://codecov.io/gh/scikit-hep/awkward/pull/1603/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-18T22:09:03Z",
  "id":1220020746,
  "issue":1603,
  "node_id":"IC_kwDODBCWws5IuAoK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-18T22:09:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1604?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1604](https://codecov.io/gh/scikit-hep/awkward/pull/1604?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0272819) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.03%`.\n> The diff coverage is `65.85%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1604?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.82% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `81.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.30% <40.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `73.89% <50.00%> (+0.06%)` | :arrow_up: |\n| ... and [16 more](https://codecov.io/gh/scikit-hep/awkward/pull/1604/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-18T23:30:05Z",
  "id":1220075798,
  "issue":1604,
  "node_id":"IC_kwDODBCWws5IuOEW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-18T23:30:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1605?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1605](https://codecov.io/gh/scikit-hep/awkward/pull/1605?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ba1e317) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.16%`.\n> The diff coverage is `73.18%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1605?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.30% <40.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `74.35% <50.00%> (+0.52%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.68% <52.17%> (+5.26%)` | :arrow_up: |\n| ... and [23 more](https://codecov.io/gh/scikit-hep/awkward/pull/1605/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-19T02:02:34Z",
  "id":1220156234,
  "issue":1605,
  "node_id":"IC_kwDODBCWws5IuhtK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T02:02:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"NB: the `docs` branch will need modifying after this fix to re-enable strict mode for the 10-minutes-... notebook. Right now, it's allowed to fail in order to keep builds working.",
  "created_at":"2022-08-23T07:28:21Z",
  "id":1223664473,
  "issue":1606,
  "node_id":"IC_kwDODBCWws5I76NZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T07:28:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@martindurant / @jpivarski I mistakenly tagged you whilst formulating a question concerning pyarrow details here. Now, however, I'll open a PR and we can discuss things there.\r\n",
  "created_at":"2022-08-23T10:06:50Z",
  "id":1223851278,
  "issue":1606,
  "node_id":"IC_kwDODBCWws5I8n0O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T11:50:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Does `\"trip.km\"` match any columns? (We need to make it easier to use the `from_parquet_metadata` to answer this question, though it's currently possible.)\r\n\r\nOh wait: things have been changing and I'm not up to date on the changes. `metadata_from_parquet` is now a dict, rather than a namedtuple. The `\"trip.km\"` is definitely one of the columns:\r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> ak.metadata_from_parquet(\r\n...     \"https://pivarski-princeton.s3.amazonaws.com/chicago-taxi.parquet\"\r\n... )[\"form\"].columns()\r\n['trip.sec', 'trip.km', 'trip.begin.lon', 'trip.begin.lat', 'trip.begin.time', 'trip.end.lon',\r\n 'trip.end.lat', 'trip.end.time', 'trip.path.londiff', 'trip.path.latdiff', 'payment.fare', 'payment.tips',\r\n 'payment.total', 'payment.type', 'company']\r\n```\r\n\r\nGetting any column by name no longer works:\r\n\r\n```python\r\n>>> ak.from_parquet(\"https://pivarski-princeton.s3.amazonaws.com/chicago-taxi.parquet\", columns=[\"trip.km\"])\r\n<Array [{}, {}, {}, {}, {}, {}, ..., {}, {}, {}, {}, {}, {}] type='7728 * {}'>\r\n```\r\n\r\nwhich is a regression. (These features are going to need unit tests, which is a little complicated because that means making small sample files.)",
  "created_at":"2022-08-23T14:45:47Z",
  "id":1224179296,
  "issue":1606,
  "node_id":"IC_kwDODBCWws5I935g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T14:45:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Aside from fixed quite how the columns are passed, we should presumably warn or error on an attempt to select columns that don't exist.",
  "created_at":"2022-08-23T16:27:44Z",
  "id":1224310257,
  "issue":1606,
  "node_id":"IC_kwDODBCWws5I-X3x",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-23T16:27:44Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1607?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1607](https://codecov.io/gh/scikit-hep/awkward/pull/1607?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7d69c81) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.18%`.\n> The diff coverage is `65.07%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1607?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [48 more](https://codecov.io/gh/scikit-hep/awkward/pull/1607/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-19T15:45:13Z",
  "id":1220823464,
  "issue":1607,
  "node_id":"IC_kwDODBCWws5IxEmo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T13:56:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"fixed in https://github.com/scikit-hep/awkward/pull/1613",
  "created_at":"2022-08-23T07:15:19Z",
  "id":1223650858,
  "issue":1608,
  "node_id":"IC_kwDODBCWws5I724q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T07:15:19Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1609?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1609](https://codecov.io/gh/scikit-hep/awkward/pull/1609?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (80f40f3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.19%`.\n> The diff coverage is `75.71%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1609?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.30% <40.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `74.35% <50.00%> (+0.52%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.68% <52.17%> (+5.26%)` | :arrow_up: |\n| ... and [24 more](https://codecov.io/gh/scikit-hep/awkward/pull/1609/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-19T16:45:32Z",
  "id":1220882704,
  "issue":1609,
  "node_id":"IC_kwDODBCWws5IxTEQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T16:45:58Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I like this API a lot, nice work Jim!",
  "created_at":"2022-08-19T21:34:02Z",
  "id":1221108406,
  "issue":1610,
  "node_id":"IC_kwDODBCWws5IyKK2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T21:34:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1610?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1610](https://codecov.io/gh/scikit-hep/awkward/pull/1610?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0b3806a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.02%`.\n> The diff coverage is `62.09%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1610?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `8.62% <8.62%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.16% <50.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.53% <53.84%> (+5.11%)` | :arrow_up: |\n| ... and [26 more](https://codecov.io/gh/scikit-hep/awkward/pull/1610/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-19T21:53:42Z",
  "id":1221118978,
  "issue":1610,
  "node_id":"IC_kwDODBCWws5IyMwC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-19T21:53:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Don't need this anymore.",
  "created_at":"2022-08-20T16:25:39Z",
  "id":1221360130,
  "issue":1611,
  "node_id":"IC_kwDODBCWws5IzHoC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-20T16:25:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"It's because we have `np.sum` overloading the v1 `ak.sum` and will be able to switch it to the v2 `ak.sum` when v1 is actually dropped.\r\n\r\nAt some point soon, we'll have to split the git branches into a `main` (v2 only) and `main-v1` (v1 only), so that things like this can be handled. But the split between Uproot `main` (v5) and `main-v4` (v4) already means we have to do extra work whenever we need to backport a fix to both branches. We want to split the git branches when we're reasonably sure that the old version is done (i.e. don't _expect_ to have to backport much).",
  "created_at":"2022-08-21T15:33:23Z",
  "id":1221568397,
  "issue":1612,
  "node_id":"IC_kwDODBCWws5Iz6eN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-21T15:33:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't know how to classify this: it's not a bug, but it's not any of the other labels, either. It's not a policy because we will be switching the NEP-18 coverage over from v1 to v2, we just haven't done it yet.",
  "created_at":"2022-08-21T15:34:22Z",
  "id":1221568573,
  "issue":1612,
  "node_id":"IC_kwDODBCWws5Iz6g9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-21T15:34:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I do think we might need a few more issue labels that we have currently.  I find myself sometimes reaching for one and not finding it. Some projects have a 'intended behaviour'  label? ",
  "created_at":"2022-08-21T15:38:18Z",
  "id":1221569257,
  "issue":1612,
  "node_id":"IC_kwDODBCWws5Iz6rp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-21T15:38:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fixed by #1721 ",
  "created_at":"2022-09-24T14:27:40Z",
  "id":1256981934,
  "issue":1612,
  "node_id":"IC_kwDODBCWws5K7AWu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T14:27:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1613?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1613](https://codecov.io/gh/scikit-hep/awkward/pull/1613?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (818bc87) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.11%`.\n> The diff coverage is `51.53%`.\n\n> :exclamation: Current head 818bc87 differs from pull request most recent head 8aa19e1. Consider uploading reports for the commit 8aa19e1 to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1613?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `24.90% <2.73%> (-1.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `8.62% <8.62%> (\u00f8)` | |\n| ... and [30 more](https://codecov.io/gh/scikit-hep/awkward/pull/1613/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-22T10:33:42Z",
  "id":1222166584,
  "issue":1613,
  "node_id":"IC_kwDODBCWws5I2Mg4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-22T16:14:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I'm done with this PR. Please, check when you have time. Thanks!",
  "created_at":"2022-08-22T14:58:48Z",
  "id":1222480305,
  "issue":1613,
  "node_id":"IC_kwDODBCWws5I3ZGx",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2022-08-22T14:58:48Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1614?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1614](https://codecov.io/gh/scikit-hep/awkward/pull/1614?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (363a2a1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.02%`.\n> The diff coverage is `77.38%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1614?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL190eXBldHJhY2VyLnB5) | `71.24% <66.66%> (+0.11%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL251bXB5YXJyYXkucHk=) | `87.23% <66.66%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_to\\_dataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fZGF0YWZyYW1lLnB5) | `92.30% <66.66%> (\u00f8)` | |\n| ... and [35 more](https://codecov.io/gh/scikit-hep/awkward/pull/1614/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-22T10:51:05Z",
  "id":1222183754,
  "issue":1614,
  "node_id":"IC_kwDODBCWws5I2QtK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-22T10:51:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Note: this has a user-visible consequence. See https://github.com/scikit-hep/uproot5/pull/694 and https://github.com/scikit-hep/awkward/pull/1642.",
  "created_at":"2022-08-29T17:32:56Z",
  "id":1230622395,
  "issue":1614,
  "node_id":"IC_kwDODBCWws5JWc67",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T17:32:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Good, the checks fail for `maint:`. Now try `ci:`...",
  "created_at":"2022-08-22T10:41:48Z",
  "id":1222174963,
  "issue":1615,
  "node_id":"IC_kwDODBCWws5I2Ojz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-22T10:41:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1615?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1615](https://codecov.io/gh/scikit-hep/awkward/pull/1615?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3907522) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.02%`.\n> The diff coverage is `62.09%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1615?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `8.62% <8.62%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.16% <50.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.53% <53.84%> (+5.11%)` | :arrow_up: |\n| ... and [26 more](https://codecov.io/gh/scikit-hep/awkward/pull/1615/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-22T10:59:30Z",
  "id":1222191252,
  "issue":1615,
  "node_id":"IC_kwDODBCWws5I2SiU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-22T10:59:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii @jpivarski you both expressed an interest in this (by engaging in the discussion on Zoom)! Let me know if you are happy to merge this as-is, or want any changes.",
  "created_at":"2022-08-22T11:04:35Z",
  "id":1222196422,
  "issue":1615,
  "node_id":"IC_kwDODBCWws5I2TzG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-22T11:04:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Although I'll give @henryiii a chance to weigh in before actually merging.",
  "created_at":"2022-08-22T14:02:55Z",
  "id":1222407444,
  "issue":1615,
  "node_id":"IC_kwDODBCWws5I3HUU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-22T14:02:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1616?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1616](https://codecov.io/gh/scikit-hep/awkward/pull/1616?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b812994) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.02%`.\n> The diff coverage is `62.21%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1616?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `8.62% <8.62%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VuaW9uYXJyYXkucHk=) | `86.16% <50.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.53% <53.84%> (+5.11%)` | :arrow_up: |\n| ... and [27 more](https://codecov.io/gh/scikit-hep/awkward/pull/1616/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-22T13:45:40Z",
  "id":1222386171,
  "issue":1616,
  "node_id":"IC_kwDODBCWws5I3CH7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-22T13:45:40Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1617?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1617](https://codecov.io/gh/scikit-hep/awkward/pull/1617?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bfbc295) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.17%`.\n> The diff coverage is `65.66%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1617?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `24.90% <2.73%> (-1.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `8.62% <8.62%> (\u00f8)` | |\n| ... and [34 more](https://codecov.io/gh/scikit-hep/awkward/pull/1617/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-22T18:40:49Z",
  "id":1222769552,
  "issue":1617,
  "node_id":"IC_kwDODBCWws5I4fuQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T03:30:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Finally closes #192!",
  "created_at":"2022-08-23T03:18:45Z",
  "id":1223480736,
  "issue":1617,
  "node_id":"IC_kwDODBCWws5I7NWg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T03:18:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"One thing I forgot: it's still missing documentation. (Not this PR.)",
  "created_at":"2022-08-23T03:29:56Z",
  "id":1223487377,
  "issue":1617,
  "node_id":"IC_kwDODBCWws5I7O-R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T03:29:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1618?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1618](https://codecov.io/gh/scikit-hep/awkward/pull/1618?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f7268cf) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.16%`.\n> The diff coverage is `62.92%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1618?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfd2hlcmUucHk=) | `91.66% <\u00f8> (\u00f8)` | |\n| ... and [36 more](https://codecov.io/gh/scikit-hep/awkward/pull/1618/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-22T23:15:05Z",
  "id":1223305654,
  "issue":1618,
  "node_id":"IC_kwDODBCWws5I6im2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T19:45:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii thanks for that, I'd meant to modify pre-commit but forgot it would seem.",
  "created_at":"2022-08-24T21:27:11Z",
  "id":1226392045,
  "issue":1618,
  "node_id":"IC_kwDODBCWws5JGUHt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T21:27:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1619?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1619](https://codecov.io/gh/scikit-hep/awkward/pull/1619?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (898b1bb) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.37%`.\n> The diff coverage is `65.36%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1619?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [54 more](https://codecov.io/gh/scikit-hep/awkward/pull/1619/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-23T10:43:48Z",
  "id":1223888744,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5I8w9o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T11:49:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, the fix segfaults (in PyArrow) for extension arrays. Let's try and unpack this.",
  "created_at":"2022-08-23T11:03:32Z",
  "id":1223908061,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5I81rd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T11:03:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"This does ring a bell, I recall columns not being what I thought they would be in some test I didn't end up writing.",
  "created_at":"2022-08-23T13:11:15Z",
  "id":1224055547,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5I9Zr7",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-23T13:11:15Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"What Awkward Forms call \"columns\" doesn't include the `\".list\"` (in Arrow-style Parquet) or `\".element\"` (in compliant/Spark-style Parquet) words at each level where there's a list. When a Form is asked to create a list of column name strings for Parquet, it inserts either the `\".list\"` or the \".element\"`, based on what kind of file it thinks it is (@martindurant added some detection for that).\r\n\r\nIf you're encountering segfaults when Arrow is trying to read an ExtensionType, first be sure that you're on the latest version of Arrow (they move quickly) and check to see if it's a [known issue](https://issues.apache.org/jira/browse/ARROW-16348?filter=-2&jql=reporter%20in%20(jpivarski)%20order%20by%20created%20DESC). (That's a list of Arrow issues that I've opened, but I think that I've opened more issues about corner cases in Parquet and ExtensionType than anyone else...)",
  "created_at":"2022-08-23T14:58:48Z",
  "id":1224196770,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5I98Ki",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T14:58:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> What Awkward Forms call \"columns\" doesn't include the `\".list\"` (in Arrow-style Parquet) or `\".element\"` (in compliant/Spark-style Parquet) words at each level where there's a list. When a Form is asked to create a list of column name strings for Parquet, it inserts either the `\".list\"` or the \".element\"`, based on what kind of file it thinks it is (@martindurant added some detection for that).\r\n> \r\n> If you're encountering segfaults when Arrow is trying to read an ExtensionType, first be sure that you're on the latest version of Arrow (they move quickly) and check to see if it's a [known issue](https://issues.apache.org/jira/browse/ARROW-16348?filter=-2&jql=reporter%20in%20(jpivarski)%20order%20by%20created%20DESC). (That's a list of Arrow issues that I've opened, but I think that I've opened more issues about corner cases in Parquet and ExtensionType than anyone else...)\r\n\r\nYes, I'm following that part. The bit I'm not sure about is why anyone would author a schema with an empty root field (requiring `\".list.item\"`).\r\n\r\nAs for the segfault, I'm testing locally on 9.0.0, so maybe we'll need to file an issue. I don't yet know enough about extension types to know whether i'm doing something wrong (even if it should never segfault vs loudly failing).",
  "created_at":"2022-08-23T15:21:19Z",
  "id":1224226077,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5I-DUd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T15:21:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"If there's a difference between Arrow 7.0.0, 8.0.0, or 9.0.0 then it's an Arrow bug. Version 7.0.0 is the first that supports ExtensionTypes in the way that we want to use them, and most of the testing/development was done on 8.0.0.\r\n\r\n> The bit I'm not sure about is why anyone would author a schema with an empty root field (requiring `\".list.item\"`).\r\n\r\nAn Awkward Array that doesn't have any RecordArrays or has a list-type outside of the record-type is represented in `pyarrow.Table` as a single-field with the empty string as a name, so column names start with a dot (`\".list.item.*\"`). It's a mis-match between Awkward's data model and Arrow/Parquet's: Arrow (Table) and Parquet always have a record-type at top-level, Awkward doesn't always.\r\n\r\nIt's a pretty common to work with separated ragged arrays (columns named by Python variable names, rather than a record-type in Awkward), and although it would make the most sense to zip these before writing them to a Parquet file, but I'm pretty sure that many of these users are going to write separate Parquet files (columns named by file paths in the file system, rather than columns within a Parquet file). Maybe we'd want to hint at better usage patterns, but writing 10 ragged arrays to 10 separate files is not wrong and shouldn't fail. That would be a definite case in which a Parquet writer would write files with `\".list.item.*\"` columns.",
  "created_at":"2022-08-23T15:51:54Z",
  "id":1224265358,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5I-M6O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T15:51:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> An Awkward Array that doesn't have any RecordArrays or has a list-type outside of the record-type is represented in pyarrow.Table as a single-field with the empty string as a name, so column names start with a dot (\".list.item.*\"). It's a mis-match between Awkward's data model and Arrow/Parquet's: Arrow (Table) and Parquet always have a record-type at top-level, Awkward doesn't always.\r\n\r\nThat sounds familiar, thanks for the explanation. So Awkward-authored data probably used to (or still does, I haven't looked) use an empty string as a workaround for this requirement.\r\n\r\n",
  "created_at":"2022-08-23T16:57:48Z",
  "id":1224347846,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5I-hDG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T16:57:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Still does. As long as the empty string is an allowed field name in `pyarrow.Table`, it's a good mapping. No reasonable fields for data analysis are going to be named `\"\"`, so it's a part of the space we can use without being worried about clobbering a legitimate field name. If that possibility is closed down (e.g. Arrow decides that field names must be valid identifiers), then the next-best thing is `\"_\"`.",
  "created_at":"2022-08-23T17:18:08Z",
  "id":1224384591,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5I-qBP",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-23T17:18:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"The parquet spec itself requires the column names be str, so \"\" is very much allowed. It wouldn't surprise me too much if it confused some tooling in the chain, though, since string splitting and manipulations might loose the empty piece. Note that most parquet schemas have an invisible root element called \"schema\", which is not part of the spec but yet another hidden convention.",
  "created_at":"2022-08-23T17:29:29Z",
  "id":1224409798,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5I-wLG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T17:29:29Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"The fastparquet view of the schema for that dataset:\r\n```\r\n- schema: REQUIRED\r\n  - : LIST, LIST, REQUIRED\r\n    - list: REPEATED\r\n      - item: REQUIRED\r\n      | - trip: REQUIRED\r\n      | | - sec: FLOAT, OPTIONAL\r\n      | | - km: FLOAT, OPTIONAL\r\n      | | - begin: REQUIRED\r\n      | | | - lon: DOUBLE, OPTIONAL\r\n      | | | - lat: DOUBLE, OPTIONAL\r\n      | |   - time: INT64, TIMESTAMP[MILLIS], TIMESTAMP_MILLIS, OPTIONAL\r\n      | | - end: REQUIRED\r\n      | | | - lon: DOUBLE, OPTIONAL\r\n      | | | - lat: DOUBLE, OPTIONAL\r\n      | |   - time: INT64, TIMESTAMP[MILLIS], TIMESTAMP_MILLIS, OPTIONAL\r\n      |   - path: LIST, LIST, REQUIRED\r\n      |     - list: REPEATED\r\n      |       - item: REQUIRED\r\n      |       | - londiff: FLOAT, REQUIRED\r\n      |         - latdiff: FLOAT, REQUIRED\r\n      | - payment: REQUIRED\r\n      | | - fare: FLOAT, OPTIONAL\r\n      | | - tips: FLOAT, OPTIONAL\r\n      | | - total: FLOAT, OPTIONAL\r\n      |   - type: BYTE_ARRAY, STRING, UTF8, REQUIRED\r\n        - company: BYTE_ARRAY, STRING, UTF8, REQUIRED\r\n```",
  "created_at":"2022-08-23T17:30:19Z",
  "id":1224411869,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5I-wrd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T17:30:19Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, I'm hoping this works. I removed the test that causes the crash because\r\n- it's in PyArrow / extension arrays\r\n- it was already failing in `main`\r\n\r\nI'll file a new issue to track this going forward, so we can merge this one.",
  "created_at":"2022-08-25T20:39:02Z",
  "id":1227739764,
  "issue":1619,
  "node_id":"IC_kwDODBCWws5JLdJ0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T20:39:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1620?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1620](https://codecov.io/gh/scikit-hep/awkward/pull/1620?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (49ac798) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.16%`.\n> The diff coverage is `55.63%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `24.90% <2.73%> (-1.10%)` | :arrow_down: |\n| ... and [35 more](https://codecov.io/gh/scikit-hep/awkward/pull/1620/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-23T16:15:13Z",
  "id":1224294695,
  "issue":1620,
  "node_id":"IC_kwDODBCWws5I-UEn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T09:31:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, I'll let you decide when to merge, since you might want to make changes based on my questions. But I approve the PR and you can squash-and-merge it when you're ready.",
  "created_at":"2022-08-23T22:17:02Z",
  "id":1224945896,
  "issue":1620,
  "node_id":"IC_kwDODBCWws5JAzDo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T22:17:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Oh, I'll let you decide when to merge, since you might want to make changes based on my questions. But I approve the PR and you can squash-and-merge it when you're ready.\r\n\r\nThanks, @jpivarski! I think, I've addressed most of your comments. The recursive method is for the next PR because it has to take multiple columns to avoid multiple event loops.",
  "created_at":"2022-08-24T09:18:45Z",
  "id":1225457154,
  "issue":1620,
  "node_id":"IC_kwDODBCWws5JCv4C",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T09:18:45Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Quick little performance test\r\n--------------------------------------\r\n\r\n```python\r\nimport json\r\nimport time\r\nimport gc\r\n\r\nimport awkward._v2 as ak\r\n\r\n# https://pivarski-princeton.s3.amazonaws.com/chep-2021-jagged-jagged-jagged/zlib9-jagged3.parquet\r\nstart = time.time()\r\narray = ak.from_parquet(\r\n    \"/home/jpivarski/storage/data/chep-2021-jagged-jagged-jagged/zlib9-jagged3.parquet\",\r\n    row_groups=range(10),\r\n)\r\nprint(\"read from Parquet\", time.time() - start)\r\n\r\nstring = ak.to_json(array)\r\n\r\ngc.collect()\r\nstart = time.time()\r\narray2 = ak.from_iter(json.loads(string))\r\nprint(\"json.loads -> ak.from_iter\", time.time() - start)\r\nstart = time.time()\r\narray2 = ak.from_iter(json.loads(string))\r\nprint(\"json.loads -> ak.from_iter\", time.time() - start)\r\n\r\ndel array2\r\ngc.collect()\r\nstart = time.time()\r\narray2 = ak.from_json(string)\r\nprint(\"ak.from_json\", time.time() - start)\r\n\r\ndel array2\r\ngc.collect()\r\nstart = time.time()\r\narray2 = ak.from_json(string)\r\nprint(\"ak.from_json\", time.time() - start)\r\n\r\nschema = {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n        \"type\": \"array\",\r\n        \"items\": {\r\n            \"type\": \"array\",\r\n            \"items\": {\"type\": \"array\", \"items\": {\"type\": \"number\"}},\r\n        },\r\n    },\r\n}\r\n\r\ndel array2\r\ngc.collect()\r\nstart = time.time()\r\narray2 = ak.from_json(string, schema=schema)\r\nprint(\"ak.from_json with schema\", time.time() - start)\r\n\r\ndel array2\r\ngc.collect()\r\nstart = time.time()\r\narray2 = ak.from_json(string, schema=schema)\r\nprint(\"ak.from_json with schema\", time.time() - start)\r\n```\r\n\r\nFirst verifying that the file is in VM:\r\n\r\n```\r\n% vmtouch /home/jpivarski/storage/data/chep-2021-jagged-jagged-jagged/zlib9-jagged3.parquet\r\n           Files: 1\r\n     Directories: 0\r\n  Resident Pages: 994842/994842  3G/3G  100%\r\n         Elapsed: 0.029283 seconds\r\n```\r\n\r\nThe results are\r\n\r\n```\r\nread from Parquet 3.5362391471862793\r\njson.loads -> ak.from_iter 77.86972498893738\r\njson.loads -> ak.from_iter 74.96645140647888\r\nak.from_json 11.387084722518921\r\nak.from_json 11.35024380683899\r\nak.from_json with schema 8.167446851730347\r\nak.from_json with schema 8.170151472091675\r\n```",
  "created_at":"2022-08-23T18:29:01Z",
  "id":1224559527,
  "issue":1621,
  "node_id":"IC_kwDODBCWws5I_Uun",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T18:29:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The same with `zlib9-jagged0.parquet` and\r\n\r\n```python\r\nschema = {\"type\": \"array\", \"items\": {\"type\": \"number\"}}\r\n```\r\n\r\nis\r\n\r\n```\r\nread from Parquet 2.4698331356048584\r\nstarting\r\njson.loads -> ak.from_iter 36.96869778633118\r\njson.loads -> ak.from_iter 36.95779204368591\r\nak.from_json 9.482706785202026\r\nak.from_json 9.500104427337646\r\nak.from_json with schema 8.802537202835083\r\nak.from_json with schema 8.840877056121826\r\n```\r\n\r\nThese are somewhat weird datasets because they don't have any JSON objects, and reading the field names would slow down JSON parsing.",
  "created_at":"2022-08-23T18:33:49Z",
  "id":1224570920,
  "issue":1621,
  "node_id":"IC_kwDODBCWws5I_Xgo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T18:33:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1621?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1621](https://codecov.io/gh/scikit-hep/awkward/pull/1621?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (466689b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.17%`.\n> The diff coverage is `65.78%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1621?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `24.90% <2.73%> (-1.10%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `8.62% <8.62%> (\u00f8)` | |\n| ... and [34 more](https://codecov.io/gh/scikit-hep/awkward/pull/1621/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-23T18:35:34Z",
  "id":1224575002,
  "issue":1621,
  "node_id":"IC_kwDODBCWws5I_Yga",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T18:35:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Following more closely the original performance test, https://github.com/scikit-hep/awkward/pull/1165#issuecomment-978691819, which has a more normal-looking JSON, it would be\r\n\r\n```python\r\nimport time\r\nimport json\r\nimport gc\r\n\r\nimport awkward._v2 as ak\r\n\r\nMULTIPLIER = int(10e6)\r\njson_string = b\"[\" + b\", \".join([\r\n    b'[{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],' +\r\n    b'[],' +\r\n    b'[{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]'\r\n] * MULTIPLIER) + b\"]\"\r\n\r\ngc.collect()\r\nstart = time.time()\r\narray = ak.from_iter(json.loads(json_string))\r\nprint(\"json.loads -> ak.from_iter\", time.time() - start)\r\n\r\ndel array\r\ngc.collect()\r\nstart = time.time()\r\narray = ak.from_json(json_string)\r\nprint(\"ak.from_json\", time.time() - start)\r\n\r\ndel array\r\ngc.collect()\r\nstart = time.time()\r\narray = ak.from_json(json_string)\r\nprint(\"ak.from_json\", time.time() - start)\r\n\r\nschema = {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n        \"type\": \"array\",\r\n        \"items\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"x\": {\"type\": \"number\"},\r\n                \"y\": {\"type\": \"array\", \"items\": {\"type\": \"integer\"}},\r\n            },\r\n            \"required\": [\"x\", \"y\"],\r\n        },\r\n    },\r\n}\r\n\r\ndel array\r\ngc.collect()\r\nstart = time.time()\r\narray = ak.from_json(json_string, schema=schema)\r\nprint(\"ak.from_json with schema\", time.time() - start)\r\n\r\ndel array\r\ngc.collect()\r\nstart = time.time()\r\narray = ak.from_json(json_string, schema=schema)\r\nprint(\"ak.from_json with schema\", time.time() - start)\r\n```\r\n\r\nwith output\r\n\r\n```\r\njson.loads -> ak.from_iter 213.33094215393066\r\nak.from_json 15.602341413497925\r\nak.from_json 15.666195631027222\r\nak.from_json with schema 6.820634841918945\r\nak.from_json with schema 6.780220985412598\r\n```\r\n\r\nAnd (now that I have enough memory, on a new computer, which is why the new numbers don't match the old ones), I can confirm that the `json.loads` step took an extra 20 GB over baseline, while the `from_json` cases took maybe about 4 GB over baseline. (Roughly reading `htop`.)",
  "created_at":"2022-08-23T18:52:50Z",
  "id":1224614307,
  "issue":1621,
  "node_id":"IC_kwDODBCWws5I_iGj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T18:52:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"One more: converted the taxi dataset (https://pivarski-princeton.s3.amazonaws.com/chicago-taxi.parquet, 611 MB) into 158 files of line-delimited JSON (24 GB, all in warm cache) with this schema:\r\n\r\n```json\r\n{\r\n    \"$schema\": \"http://json-schema.org/schema#\",\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n            \"trip\": {\r\n                \"type\": \"object\",\r\n                \"properties\": {\r\n                    \"sec\": {\"type\": [\"null\", \"number\"]},\r\n                    \"km\": {\"type\": [\"null\", \"number\"]},\r\n                    \"begin\": {\r\n                        \"type\": \"object\",\r\n                        \"properties\": {\r\n                            \"lon\": {\"type\": [\"null\", \"number\"]},\r\n                            \"lat\": {\"type\": [\"null\", \"number\"]},\r\n                            \"time\": {\"type\": [\"null\", \"string\"]}\r\n                        },\r\n                        \"required\": [\"lat\", \"lon\", \"time\"]\r\n                    },\r\n                    \"end\": {\r\n                        \"type\": \"object\",\r\n                        \"properties\": {\r\n                            \"lon\": {\"type\": [\"null\", \"number\"]},\r\n                            \"lat\": {\"type\": [\"null\", \"number\"]},\r\n                            \"time\": {\"type\": [\"null\", \"string\"]}\r\n                        },\r\n                        \"required\": [\"lat\", \"lon\", \"time\"]\r\n                    },\r\n                    \"path\": {\r\n                        \"type\": \"array\",\r\n                        \"items\": {\r\n                            \"type\": \"object\",\r\n                            \"properties\": {\r\n                                \"londiff\": {\"type\": \"number\"},\r\n                                \"latdiff\": {\"type\": \"number\"}\r\n                            },\r\n                            \"required\": [\"latdiff\", \"londiff\"]\r\n                        }\r\n                    }\r\n                },\r\n                \"required\": [\"begin\", \"end\", \"km\", \"path\", \"sec\"]\r\n            },\r\n            \"payment\": {\r\n                \"type\": \"object\",\r\n                \"properties\": {\r\n                    \"fare\": {\"type\": [\"null\", \"number\"]},\r\n                    \"tips\": {\"type\": [\"null\", \"number\"]},\r\n                    \"total\": {\"type\": [\"null\", \"number\"]},\r\n                    \"type\": {\"type\": \"string\"}\r\n                },\r\n                \"required\": [\"fare\", \"tips\", \"total\", \"type\"]\r\n            },\r\n            \"company\": {\"type\": \"string\"}\r\n        },\r\n        \"required\": [\"company\", \"payment\", \"trip\"]\r\n    }\r\n}\r\n```\r\n\r\nand read it back in parallel with\r\n\r\n```python\r\nimport sys\r\nimport time\r\nimport glob\r\nimport pathlib\r\nimport json\r\nimport concurrent.futures\r\n\r\nimport awkward._v2 as ak\r\n\r\nworkers = int(sys.argv[1]) + 1\r\n\r\nfilenames = [pathlib.Path(x) for x in glob.glob(\"chicago-taxi/*.json\")]\r\nschema = json.load(open(\"chicago-taxi-schema.json\", \"r\"))\r\n\r\ndef read(filename):\r\n    array = ak.from_json(filename, schema=schema, line_delimited=True)\r\n    return len(array)\r\n\r\nexecutor = concurrent.futures.ThreadPoolExecutor(max_workers=workers)\r\n\r\nstart = time.time()\r\n\r\noutput = executor.map(read, filenames)\r\nfor x in output:\r\n    pass\r\n\r\nprint(\"RESULT\", workers, time.time() - start)\r\n```\r\n\r\nPretty good scaling, up to about 8 threads in the same process:\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/186273955-1754ad32-7482-46fa-9de5-b3bd2e80489c.png)\r\n\r\n```python\r\nwith_schema = [\r\n    (1, 69.14818215370178),\r\n    (6, 14.854450464248657),\r\n    (15, 10.893534660339355),\r\n    (7, 12.876977920532227),\r\n    (13, 11.187434911727905),\r\n    (11, 11.509851932525635),\r\n    (15, 10.971038818359375),\r\n    (2, 37.050201416015625),\r\n    (10, 11.640484809875488),\r\n    (5, 17.0390887260437),\r\n    (2, 37.05006694793701),\r\n    (10, 11.71809720993042),\r\n    (1, 69.34898710250854),\r\n    (16, 10.977449178695679),\r\n    (12, 11.49191927909851),\r\n    (3, 25.817341327667236),\r\n    (7, 13.10230302810669),\r\n    (11, 11.379074811935425),\r\n    (3, 25.914427995681763),\r\n    (13, 11.347897291183472),\r\n    (8, 12.084300518035889),\r\n    (9, 11.72193694114685),\r\n    (8, 11.950510501861572),\r\n    (5, 17.057311058044434),\r\n    (6, 14.485633373260498),\r\n    (16, 11.014365196228027),\r\n    (9, 11.682979106903076),\r\n    (14, 11.224212884902954),\r\n    (4, 20.713167428970337),\r\n    (4, 20.21565818786621),\r\n    (14, 11.145302772521973),\r\n    (12, 11.411521673202515),\r\n]\r\n```\r\n\r\nMoreover, there's still about a factor of 2 between with-schema and without-schema, even in this realistic case:\r\n\r\n  * 1 thread: **69 seconds** with schema, **121 seconds** without schema\r\n  * 8 threads: **12 seconds** with schema, **18 seconds** without schema\r\n  * 16 threads: **11 seconds** with schema, **17 seconds** without schema",
  "created_at":"2022-08-23T22:00:36Z",
  "id":1224932697,
  "issue":1621,
  "node_id":"IC_kwDODBCWws5JAv1Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T22:00:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The idea was that you might use this on a complex tree of numbers and strings (think of the taxi dataset) and want it to only apply to the numbers. I can see how converting the code points of characters to e.g. floating point numbers would be a relevant thing to do if the array consists only of those strings, but it would be completely undesirable if your intention was to turn all of the `float32`s into `float64`s in the taxi dataset.\r\n\r\nSeeing the array come back to you looking just as it did before is how the communication is intended. I can't think of better way to do it: warnings are noisy because you often want to do the things they warn you about (I'm thinking of NumPy's zero-division warnings), log files don't make sense in a library, as they would have to get set up somehow, and error messages limiting you to a narrow range of behavior are restrictive.\r\n\r\n(I'm assuming that users set up their scripts interactively\u2014that's a hard assumption that I frequently emphasize, and it's an assumption that the whole family of APL languages have been making. I know that some people do set things up in a script and only look at the bottom line, but that is especially hard with this kind of language.)\r\n\r\nOn this point, users do have agency, to turn the strings into code points:\r\n\r\n```python\r\narray[\"path\", \"to\", \"string\", \"field\"] = ak.without_parameters(array[\"path\", \"to\", \"string\", \"field\"])\r\n```\r\n\r\nalthough that might be hard to discover and should perhaps have a convenience method.",
  "created_at":"2022-08-23T21:11:55Z",
  "id":1224892072,
  "issue":1622,
  "node_id":"IC_kwDODBCWws5JAl6o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T21:11:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This was a use-case that I hadn't considered. I'm not 100% convinced though, because we are assuming that the entire recordarray is usefully represented as e.g. floats or integers, which has not been my experience. \r\n\r\nI'm actually OK with us having `without_parameters` be the canonical way to peek through the string abstraction, too. In fact, it makes me want to be more cautious about introducing more routines that break the string abstraction.\r\n\r\nIn generaI still think having a function called `do_X` sometimes _not_ do `X` might be a bad idea. The right solution to this might need some more thought. Preliminarily, I'm considering:\r\n- By default, `values_astype` errors when it encounters char/byte arrays\r\n- Users can opt-in to ignore these with `ak.values_astype(..., ignore_strings=True)`\r\n- Users can convert strings to codepoints first with `without_parameters`\r\n\r\n\r\nThis way, they have to opt-in to bad behaviour.\r\n",
  "created_at":"2022-08-23T22:39:05Z",
  "id":1224960545,
  "issue":1622,
  "node_id":"IC_kwDODBCWws5JA2oh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T22:39:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I also noticed that we have a typo in the docs that refers to `ak.numbers_astype`. Maybe this is what we wanted to do originally, and have two explicitly separate methods. If so, I'm happy to close this issue, because we're stuck with `values_astype` for the near future.",
  "created_at":"2022-08-24T09:13:40Z",
  "id":1225451690,
  "issue":1622,
  "node_id":"IC_kwDODBCWws5JCuiq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T09:13:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Following our meeting, Jim and I discussed these two functions being orthogonal and thus it is reasonable not to error provided that the documentation is clear(er)?",
  "created_at":"2022-08-24T13:32:02Z",
  "id":1225732695,
  "issue":1622,
  "node_id":"IC_kwDODBCWws5JDzJX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T13:32:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski do we want to support converting unused optiontype layouts into RaggedTensors? (where `UnmaskedArray` is a perfect example of \"unused optiontype\")?\r\n\r\nI'm currently leaning into \"no\", or \"not silently\" (require a flag to allow unused options).\r\n\r\nBTW, we can discuss this tomorrow, I'm just getting it down on GH now.",
  "created_at":"2022-08-23T20:44:40Z",
  "id":1224863415,
  "issue":1624,
  "node_id":"IC_kwDODBCWws5JAe63",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T20:47:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1624?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1624](https://codecov.io/gh/scikit-hep/awkward/pull/1624?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (718413a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **decrease** coverage by `0.02%`.\n> The diff coverage is `59.55%`.\n\n> :exclamation: Current head 718413a differs from pull request most recent head 481f238. Consider uploading reports for the commit 481f238 to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1624?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2NsaW5nLnB5) | `24.90% <2.73%> (-1.10%)` | :arrow_down: |\n| ... and [39 more](https://codecov.io/gh/scikit-hep/awkward/pull/1624/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-23T21:02:15Z",
  "id":1224883189,
  "issue":1624,
  "node_id":"IC_kwDODBCWws5JAjv1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T15:17:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't think RaggedTensors can allow for missing values. However, if the policy is to turn missing numbers into `np.nan` and missing lists into empty lists, then UnmaskedArrays would just go away.\r\n\r\nI think it would be desirable to do that, considering how many missing values come out of Parquet files and Arrow. (And Awkward Array might become the go-between from a Parquet/Arrow source to machine learning.)",
  "created_at":"2022-08-23T21:15:06Z",
  "id":1224894716,
  "issue":1624,
  "node_id":"IC_kwDODBCWws5JAmj8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T21:15:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I think it would be desirable to do that, considering how many missing values come out of Parquet files and Arrow. (And Awkward Array might become the go-between from a Parquet/Arrow source to machine learning.)\r\n\r\nCounterpoint - we already have `fill_none` et al. to let users do this. Should we keep `to_raggedtensor` simple by requiring users to convert their data first? That way, they also are required to think about what their data should look like after the transformation.\r\n\r\nAdditionally, I'm not sure how useful `nan` is in a context of ML (for which I'm referrring to TensorFlow's main use case)?\r\n\r\n(I'm generally uneasy about making it easier to ignore whether an array has an option, mainly because they can significantly affect the interpretation of the array, and proliferate easily between array transformations.)\r\n\r\nI'm leaning into whatever your final take on this is, so let me know ;) We can discuss tomorrow.",
  "created_at":"2022-08-23T22:43:38Z",
  "id":1224963287,
  "issue":1624,
  "node_id":"IC_kwDODBCWws5JA3TX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-23T22:44:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"As discussed in my weekly meeting, we should just convert `None` to `np.nan` so that the burden is placed on the user in the tensorflow space. There are routines to subsequently convert these values to meaningful results.",
  "created_at":"2022-08-24T13:24:09Z",
  "id":1225722241,
  "issue":1624,
  "node_id":"IC_kwDODBCWws5JDwmB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T13:24:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This will need rebasing, so I'll close it for now.",
  "created_at":"2022-09-28T10:55:02Z",
  "id":1260734062,
  "issue":1624,
  "node_id":"IC_kwDODBCWws5LJUZu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T10:55:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1625?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1625](https://codecov.io/gh/scikit-hep/awkward/pull/1625?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fca91c8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.46%`.\n> The diff coverage is `58.50%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1625?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| ... and [65 more](https://codecov.io/gh/scikit-hep/awkward/pull/1625/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-08-24T10:53:26Z",
  "id":1225556781,
  "issue":1625,
  "node_id":"IC_kwDODBCWws5JDIMt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T16:48:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Another thing: is `type(builder).__cpp_name__` a cppyy thing? In general, we can't introduce new double-underscored names because Python might introduce them\u2014the double-underscore means \"reserved.\" But if it's cppyy that's introducing it, then we just have to use its interface.\r\n\r\nI can answer `__cpp_name__`, it is a `cppyy` built-in: https://cppyy.readthedocs.io/en/latest/misc.html#:~:text=__cpp_name__%3A%20a%20string%20that%20every%20C%2B%2B%20bound%20class%20carries%20and%20contains%20the%20actual%20C%2B%2B%20name%20(as%20opposed%20to%20__name__%20which%20has%20the%20Python%20name).%20This%20can%20be%20useful%20for%20template%20instantiations%2C%20documentation%2C%20etc.",
  "created_at":"2022-08-30T15:27:49Z",
  "id":1231824948,
  "issue":1625,
  "node_id":"IC_kwDODBCWws5JbCg0",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2022-08-30T15:27:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@henryiii's suggestion: 1.9.0 with Python 3.6 and then 1.10.x as the bug-fix series for v1.\r\n\r\nAnd then not need to keep any rc releases.",
  "created_at":"2022-08-25T15:51:28Z",
  "id":1227458731,
  "issue":1626,
  "node_id":"IC_kwDODBCWws5JKYir",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T15:52:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think we're done here!",
  "created_at":"2022-09-24T21:39:05Z",
  "id":1257069460,
  "issue":1626,
  "node_id":"IC_kwDODBCWws5K7VuU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T21:39:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1627?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1627](https://codecov.io/gh/scikit-hep/awkward/pull/1627?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c314c8c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.16%`.\n> The diff coverage is `62.92%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1627?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHlwZS5weQ==) | `53.84% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfd2hlcmUucHk=) | `91.66% <\u00f8> (\u00f8)` | |\n| ... and [36 more](https://codecov.io/gh/scikit-hep/awkward/pull/1627/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-24T21:21:31Z",
  "id":1226379635,
  "issue":1627,
  "node_id":"IC_kwDODBCWws5JGRFz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T21:21:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"When this MacOS 3.6 is done, I'm going to merge without requirements.",
  "created_at":"2022-08-24T21:47:40Z",
  "id":1226435772,
  "issue":1627,
  "node_id":"IC_kwDODBCWws5JGey8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-24T21:47:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 please have a look",
  "created_at":"2022-08-25T06:57:09Z",
  "id":1226853712,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5JIE1Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T06:57:09Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1628?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1628](https://codecov.io/gh/scikit-hep/awkward/pull/1628?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4f5d6f9) into [docs](https://codecov.io/gh/scikit-hep/awkward/commit/13eb6984a57e6b64353268f037fa23da737d4094?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (13eb698) will **increase** coverage by `2.10%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 4f5d6f9 differs from pull request most recent head fa199af. Consider uploading reports for the commit fa199af to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1628?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | | |\n| [src/awkward/\\_v2/operations/ak\\_prod.py](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfcHJvZC5weQ==) | | |\n| [src/awkward/\\_v2/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bXB5LnB5) | | |\n| [src/awkward/\\_v2/operations/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZmlyc3RzLnB5) | | |\n| [src/awkward/\\_v2/operations/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fYmFja2VuZC5weQ==) | | |\n| [src/awkward/\\_v2/forms/indexedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2luZGV4ZWRmb3JtLnB5) | | |\n| [src/awkward/\\_v2/forms/numpyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL251bXB5Zm9ybS5weQ==) | | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | | |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | | |\n| [src/awkward/\\_v2/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29weS5weQ==) | | |\n| ... and [325 more](https://codecov.io/gh/scikit-hep/awkward/pull/1628/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-08-25T07:08:47Z",
  "id":1226863567,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5JIHPP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-03T10:28:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna Should I also add the `dump()` method to print the output to show the buffer contents?",
  "created_at":"2022-08-25T11:26:04Z",
  "id":1227132196,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5JJI0k",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T11:26:04Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna Should I also add the `dump()` method to print the output to show the buffer contents?\r\n\r\nI don't think it is needed here. You have a link to the example in c++.",
  "created_at":"2022-08-25T11:45:58Z",
  "id":1227150341,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5JJNQF",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-25T11:45:58Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This needs a bit more work on the CI side (me!)",
  "created_at":"2022-08-25T14:43:14Z",
  "id":1227357312,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5JJ_yA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T14:43:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"As discussed in our meeting, we'll drop cling here as it's not hugely motivated.",
  "created_at":"2022-08-31T13:58:55Z",
  "id":1232977204,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5Jfb00",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T13:58:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"As discussed today, I just need a readable copy of the text to send to the ctapipe developers; this PR can be merged later. It looks to me like I can just use this file:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/manasvi/layout-builder-user-guide/docs-sphinx/user-guide/how-to-use-header-only-layoutbuilder.md\r\n\r\n(They can read markdown.) Is that it? I plan to send this to them by email.",
  "created_at":"2022-09-08T17:09:08Z",
  "id":1240989209,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5J9_4Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T17:09:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> As discussed today, I just need a readable copy of the text to send to the ctapipe developers; this PR can be merged later. It looks to me like I can just use this file:\r\n> \r\n> https://github.com/scikit-hep/awkward/blob/manasvi/layout-builder-user-guide/docs-sphinx/user-guide/how-to-use-header-only-layoutbuilder.md\r\n> \r\n> (They can read markdown.) Is that it? I plan to send this to them by email.\r\n\r\nYes. This can be used. If I am right, I think PR is failing due to some issues on the CI side for running the C++ code blocks but that shouldn't be any issue if we are going to send only the Markdown file.\r\n\r\nPlease let me know if anything else needs to be added in the user-guide. Should I also add instructions about Awkward installation and compiler flag options like Ianna mentioned? I wasn't sure how to add the instructions for that.\r\n\r\nThanks.",
  "created_at":"2022-09-09T02:34:53Z",
  "id":1241430746,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5J_rra",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-09T02:34:53Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski here's an HTML rendered variant of @ManasviGoyal's docs:\r\n[index.html.txt](https://github.com/scikit-hep/awkward/files/9533138/index.html.txt)\r\n\r\nThe default PDF export was less appealing than the HTML generation (I used the single-document exporter which doesn't use Sphinx). I can render a PDF if needs be, though.",
  "created_at":"2022-09-09T07:16:28Z",
  "id":1241595788,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5KAT-M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-10T15:21:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi, @agoose77 I have added a few changes. Please have a look in case anything needs to fixed. \r\n\r\nAre they any other changes pending for this PR?",
  "created_at":"2022-10-03T00:24:51Z",
  "id":1264775800,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5LYvJ4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-03T03:25:41Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ManasviGoyal my force-push alias was set to `git push --force` instead of `git push --force-with-lease` ... so I managed to overwrite your changes. Sorry! I recovered a single commit (the old HEAD) [5f06f73](https://github.com/scikit-hep/awkward/commit/5f06f737392bdb6663c79ce0359b5ebce1d68f32), could you confirm that you only added a single commit, and it was [5f06f73](https://github.com/scikit-hep/awkward/commit/5f06f737392bdb6663c79ce0359b5ebce1d68f32)? I suggest not pulling this branch until you're confident it's correct! :)",
  "created_at":"2022-10-03T10:27:52Z",
  "id":1265242281,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5LahCp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-03T10:27:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ManasviGoyal my force-push alias was set to `git push --force` instead of `git push --force-with-lease` ... so I managed to overwrite your changes. Sorry! I recovered a single commit (the old HEAD) [5f06f73](https://github.com/scikit-hep/awkward/commit/5f06f737392bdb6663c79ce0359b5ebce1d68f32), could you confirm that you only added a single commit, and it was [5f06f73](https://github.com/scikit-hep/awkward/commit/5f06f737392bdb6663c79ce0359b5ebce1d68f32)? I suggest not pulling this branch until you're confident it's correct! :)\r\n\r\nyes it is only one commit - [5f06f73](https://github.com/scikit-hep/awkward/commit/5f06f737392bdb6663c79ce0359b5ebce1d68f32)",
  "created_at":"2022-10-03T14:33:57Z",
  "id":1265539698,
  "issue":1628,
  "node_id":"IC_kwDODBCWws5Lbppy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-03T14:33:57Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna I think that should fix the YAML definition :crossed_fingers: . I find it helpful to pass it through https://jsonformatter.org/yaml-validator to find the true cause of the parse failure.\r\n\r\nI also removed the Python setup block, which should be redundant with Conda. We might need to start rethinking how to define our development requirements, because I'm also now using conda in the CI for the docs.",
  "created_at":"2022-08-25T09:31:42Z",
  "id":1227018045,
  "issue":1629,
  "node_id":"IC_kwDODBCWws5JIs89",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-25T09:31:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna I think that should fix the YAML definition \ud83e\udd1e . I find it helpful to pass it through https://jsonformatter.org/yaml-validator to find the true cause of the parse failure.\r\n> \r\n> I also removed the Python setup block, which should be redundant with Conda. We might need to start rethinking how to define our development requirements, because I'm also now using conda in the CI for the docs.\r\n\r\nThanks! We can discuss it at the meeting today :-)",
  "created_at":"2022-08-25T09:35:25Z",
  "id":1227021935,
  "issue":1629,
  "node_id":"IC_kwDODBCWws5JIt5v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T09:35:25Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1629?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1629](https://codecov.io/gh/scikit-hep/awkward/pull/1629?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9f988f2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.18%`.\n> The diff coverage is `65.07%`.\n\n> :exclamation: Current head 9f988f2 differs from pull request most recent head 0fc126d. Consider uploading reports for the commit 0fc126d to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1629?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [48 more](https://codecov.io/gh/scikit-hep/awkward/pull/1629/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-25T11:04:24Z",
  "id":1227110353,
  "issue":1629,
  "node_id":"IC_kwDODBCWws5JJDfR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T19:13:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I'm done with this PR. Please, have a look when you have time. Thanks!",
  "created_at":"2022-08-25T12:32:59Z",
  "id":1227196460,
  "issue":1629,
  "node_id":"IC_kwDODBCWws5JJYgs",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-08-25T12:32:59Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, and this will become a required test on September 1.",
  "created_at":"2022-08-25T19:03:44Z",
  "id":1227651178,
  "issue":1629,
  "node_id":"IC_kwDODBCWws5JLHhq",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-25T19:03:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski @ianna should we consider running *only* the ROOT tests for this job? Our CI is already fairly heavy. I was thinking we could use something like https://docs.pytest.org/en/7.1.x/example/markers.html to run *only* ROOT tests here",
  "created_at":"2022-08-25T19:13:58Z",
  "id":1227660195,
  "issue":1629,
  "node_id":"IC_kwDODBCWws5JLJuj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T19:13:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think the compilation/installation time might still exceed the testing time. (This job is not doing the kernel unit tests, for the reason that they'd be superfluous.)\r\n\r\nYes: 1 minute to get conda + 2 minutes to install ROOT + 6 minutes to compile Awkward = 9 minutes versus 3 minutes to run all tests.\r\n\r\nDropping v1 will speed up the compilation, but the compilation will still take at least 1 minute. This optimization is not fixing a bottleneck, so I'd just as soon ignore it. (My mental model of optimization is an [L-\u221e metric](https://en.wikipedia.org/wiki/L-infinity).)",
  "created_at":"2022-08-25T20:03:51Z",
  "id":1227704635,
  "issue":1629,
  "node_id":"IC_kwDODBCWws5JLUk7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T20:03:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for crunching the numbers. That's not a significant gain if this is only a single job. Better to focus on bringing down e.g compilation times (bring on the big split!)",
  "created_at":"2022-08-25T20:11:52Z",
  "id":1227712189,
  "issue":1629,
  "node_id":"IC_kwDODBCWws5JLWa9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T20:11:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1632?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1632](https://codecov.io/gh/scikit-hep/awkward/pull/1632?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (978089b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.18%`.\n> The diff coverage is `65.07%`.\n\n> :exclamation: Current head 978089b differs from pull request most recent head b067a3a. Consider uploading reports for the commit b067a3a to get more accurate results\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1632?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [48 more](https://codecov.io/gh/scikit-hep/awkward/pull/1632/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-25T16:18:11Z",
  "id":1227488882,
  "issue":1632,
  "node_id":"IC_kwDODBCWws5JKf5y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T16:18:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1634?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1634](https://codecov.io/gh/scikit-hep/awkward/pull/1634?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6152b25) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.18%`.\n> The diff coverage is `65.16%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1634?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [49 more](https://codecov.io/gh/scikit-hep/awkward/pull/1634/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-25T19:48:41Z",
  "id":1227692220,
  "issue":1634,
  "node_id":"IC_kwDODBCWws5JLRi8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T19:48:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@douglasdavis thanks for filing this. On the face of it, our two PRs (#1619) look very similar. Yet, mine segfaults. Could you try the test in #1619 and see what happens here?",
  "created_at":"2022-08-25T20:17:08Z",
  "id":1227717222,
  "issue":1634,
  "node_id":"IC_kwDODBCWws5JLXpm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T20:17:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"sure! just used that test in #1619 and it passed with this patch",
  "created_at":"2022-08-25T20:46:17Z",
  "id":1227746149,
  "issue":1634,
  "node_id":"IC_kwDODBCWws5JLetl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T20:46:17Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, I updated it to remove the crash.\r\n\r\nI tried this on your PR and it also breaks, which reassures me we're hitting the same bug:\r\n```python\r\nimport os\r\nimport awkward as ak\r\n\r\ndef test_extension(tmp_path):\r\n    array = ak._v2.Array(\r\n        [\r\n            [\r\n                {\"x\": 1, \"y\": 1.1},\r\n                {\"x\": 2, \"y\": 2.2},\r\n                {\"x\": 3, \"y\": 3.3},\r\n            ],\r\n            [\r\n                {\"x\": 1, \"y\": 1.1},\r\n                {\"x\": 2, \"y\": 2.2},\r\n            ]]\r\n\r\n    )\r\n    path = os.path.join(tmp_path, \"array-ext.parquet\")\r\n\r\n    ak._v2.to_parquet(array, path, extensionarray=True)\r\n\r\n    result = ak._v2.from_parquet(path, columns=[\"x\"])\r\n    # assert result.fields == [\"x\"]\r\n\r\ntest_extension(\"/tmp\")\r\n```",
  "created_at":"2022-08-25T20:56:59Z",
  "id":1227755248,
  "issue":1634,
  "node_id":"IC_kwDODBCWws5JLg7w",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T20:56:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm going to close this, as I think we've solved it in #1619! :crossed_fingers: ",
  "created_at":"2022-08-28T09:31:36Z",
  "id":1229417022,
  "issue":1634,
  "node_id":"IC_kwDODBCWws5JR2o-",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-28T09:31:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Reproducible in `main`.",
  "created_at":"2022-08-25T23:23:36Z",
  "id":1227849310,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JL35e",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T23:23:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah yes, my test was a bit daft when I first wrote it (and we probably should error if the user tries to create such a file, as we reserve the root `\"\"` field).",
  "created_at":"2022-08-26T10:10:45Z",
  "id":1228313757,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JNpSd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T10:10:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> we probably should error if the user tries to create such a file, as we reserve the root `\"\"` field\r\n\r\nUsers creating fields with empty names is not a case I had considered. Maybe we'd still be okay because the first one (only) is reserved for the pyarrow.Table and we'd always have the right off-by-one. But if there are ambiguous cases, then we could forbid it.",
  "created_at":"2022-08-26T15:49:51Z",
  "id":1228661399,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JO-KX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T15:49:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"In the above, where I thought that `ak.to_arrow_table` was wrong, it's because I didn't include the `._v2`. The v1 function was misinterpreting the v2 array and making a mess of it. So\u2014never mind the conclusion that `to_arrow_table` is at fault. As far as I can see, it isn't.",
  "created_at":"2022-08-26T17:40:17Z",
  "id":1228756138,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JPVSq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T17:40:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"```python\r\n>>> array.show(type=True)\r\ntype: 9 * {\r\n    z: {\r\n        x: int64,\r\n        y: float64\r\n    }\r\n}\r\n[{z: {x: 1, y: 1.1}},\r\n {z: {x: 2, y: 2.2}},\r\n {z: {x: 3, y: 3.3}},\r\n {z: {x: 4, y: 4.4}},\r\n {z: {x: 5, y: 5.5}},\r\n {z: {x: 6, y: 6.6}},\r\n {z: {x: 7, y: 7.7}},\r\n {z: {x: 8, y: 8.8}},\r\n {z: {x: 9, y: 9.9}}]\r\n>>> ak._v2.from_arrow(ak._v2.to_arrow_table(array)).show(type=True)\r\ntype: 9 * {\r\n    z: {\r\n        x: int64,\r\n        y: float64\r\n    }\r\n}\r\n[{z: {x: 1, y: 1.1}},\r\n {z: {x: 2, y: 2.2}},\r\n {z: {x: 3, y: 3.3}},\r\n {z: {x: 4, y: 4.4}},\r\n {z: {x: 5, y: 5.5}},\r\n {z: {x: 6, y: 6.6}},\r\n {z: {x: 7, y: 7.7}},\r\n {z: {x: 8, y: 8.8}},\r\n {z: {x: 9, y: 9.9}}]\r\n```",
  "created_at":"2022-08-26T17:42:02Z",
  "id":1228757582,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JPVpO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T17:42:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Constructing the Parquet data with pyarray alone, I can't reproduce the segfault.\r\n\r\nWithout ExtensionArrays:\r\n\r\n```python\r\nimport numpy as np\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\n\r\none = pa.Array.from_buffers(\r\n    pa.int64(),\r\n    3,\r\n    [None, pa.py_buffer(np.array([10, 20, 30], dtype=np.int64))],\r\n)\r\ntwo = pa.Array.from_buffers(\r\n    pa.float64(),\r\n    3,\r\n    [None, pa.py_buffer(np.array([1.1, 2.2, 3.3], dtype=np.float64))],\r\n)\r\nshallow = pa.Array.from_buffers(\r\n    pa.struct([\r\n        pa.field(\"one\", one.type, False),\r\n        pa.field(\"two\", two.type, False),\r\n    ]),\r\n    3,\r\n    [None],\r\n    children=[one, two],\r\n)\r\nassert shallow.to_pylist() == [\r\n    {\"one\": 10, \"two\": 1.1},\r\n    {\"one\": 20, \"two\": 2.2},\r\n    {\"one\": 30, \"two\": 3.3},\r\n]\r\n\r\ntable = pa.Table.from_arrays([shallow], names=[\"column\"])\r\npq.write_table(table, \"shallow.parquet\")\r\ntable2 = pq.read_table(\"shallow.parquet\")\r\nassert table2.to_pylist() == [\r\n    {\"column\": {\"one\": 10, \"two\": 1.1}},\r\n    {\"column\": {\"one\": 20, \"two\": 2.2}},\r\n    {\"column\": {\"one\": 30, \"two\": 3.3}},\r\n]\r\n\r\ndeep = pa.Array.from_buffers(\r\n    pa.struct([\r\n        pa.field(\"nest\", shallow.type, False),\r\n    ]),\r\n    3,\r\n    [None],\r\n    children=[shallow],\r\n)\r\nassert deep.to_pylist() == [\r\n    {\"nest\": {\"one\": 10, \"two\": 1.1}},\r\n    {\"nest\": {\"one\": 20, \"two\": 2.2}},\r\n    {\"nest\": {\"one\": 30, \"two\": 3.3}},\r\n]\r\n\r\ntable = pa.Table.from_arrays([deep], names=[\"column\"])\r\npq.write_table(table, \"deep.parquet\")\r\ntable2 = pq.read_table(\"deep.parquet\")\r\nassert table2.to_pylist() == [\r\n    {\"column\": {\"nest\": {\"one\": 10, \"two\": 1.1}}},\r\n    {\"column\": {\"nest\": {\"one\": 20, \"two\": 2.2}}},\r\n    {\"column\": {\"nest\": {\"one\": 30, \"two\": 3.3}}},\r\n]\r\n```\r\n\r\nWith ExtensionArrays:\r\n\r\n```python\r\nimport json\r\n\r\nclass AnnotatedType(pa.ExtensionType):\r\n    def __init__(self, storage_type, annotation):\r\n        self.annotation = annotation\r\n        super().__init__(storage_type, \"my:app\")\r\n    def __arrow_ext_serialize__(self):\r\n        return json.dumps(self.annotation).encode()\r\n    @classmethod\r\n    def __arrow_ext_deserialize__(cls, storage_type, serialized):\r\n        annotation = json.loads(serialized.decode())\r\n        return cls(storage_type, annotation)\r\n    @property\r\n    def num_buffers(self):\r\n        return self.storage_type.num_buffers\r\n    @property\r\n    def num_fields(self):\r\n        return self.storage_type.num_fields\r\n\r\npa.register_extension_type(AnnotatedType(pa.null(), None))\r\n\r\none = pa.Array.from_buffers(\r\n    AnnotatedType(pa.int64(), {\"annotated\": 1}),\r\n    3,\r\n    [None, pa.py_buffer(np.array([10, 20, 30], dtype=np.int64))],\r\n)\r\ntwo = pa.Array.from_buffers(\r\n    AnnotatedType(pa.float64(), {\"annotated\": 2}),\r\n    3,\r\n    [None, pa.py_buffer(np.array([1.1, 2.2, 3.3], dtype=np.float64))],\r\n)\r\nshallow = pa.Array.from_buffers(\r\n    AnnotatedType(\r\n        pa.struct([\r\n            pa.field(\"one\", one.type, False),\r\n            pa.field(\"two\", two.type, False),\r\n        ]),\r\n        {\"annotated\": 3},\r\n    ),\r\n    3,\r\n    [None],\r\n    children=[one, two],\r\n)\r\nassert shallow.to_pylist() == [\r\n    {\"one\": 10, \"two\": 1.1},\r\n    {\"one\": 20, \"two\": 2.2},\r\n    {\"one\": 30, \"two\": 3.3},\r\n]\r\n\r\ntable = pa.Table.from_arrays([shallow], names=[\"column\"])\r\npq.write_table(table, \"shallow_annotated.parquet\")\r\ntable2 = pq.read_table(\"shallow_annotated.parquet\")\r\nassert table2.to_pylist() == [\r\n    {\"column\": {\"one\": 10, \"two\": 1.1}},\r\n    {\"column\": {\"one\": 20, \"two\": 2.2}},\r\n    {\"column\": {\"one\": 30, \"two\": 3.3}},\r\n]\r\n\r\ndeep = pa.Array.from_buffers(\r\n    AnnotatedType(\r\n        pa.struct([\r\n            pa.field(\"nest\", shallow.type, False),\r\n        ]),\r\n        {\"annotated\": 4},\r\n    ),\r\n    3,\r\n    [None],\r\n    children=[shallow],\r\n)\r\nassert deep.to_pylist() == [\r\n    {\"nest\": {\"one\": 10, \"two\": 1.1}},\r\n    {\"nest\": {\"one\": 20, \"two\": 2.2}},\r\n    {\"nest\": {\"one\": 30, \"two\": 3.3}},\r\n]\r\n\r\ntable = pa.Table.from_arrays([deep], names=[\"column\"])\r\npq.write_table(table, \"deep_annotated.parquet\")\r\ntable2 = pq.read_table(\"deep_annotated.parquet\")\r\nassert table2.to_pylist() == [\r\n    {\"column\": {\"nest\": {\"one\": 10, \"two\": 1.1}}},\r\n    {\"column\": {\"nest\": {\"one\": 20, \"two\": 2.2}}},\r\n    {\"column\": {\"nest\": {\"one\": 30, \"two\": 3.3}}},\r\n]\r\n```",
  "created_at":"2022-08-26T18:25:27Z",
  "id":1228793683,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JPedT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T18:25:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually, that wasn't quite the right test; this is:\r\n\r\n```python\r\n>>> import pyarrow.parquet as pq\r\n>>> pq.ParquetFile(\"shallow.parquet\").read_row_groups([0], [\"column.one\"])\r\npyarrow.Table\r\ncolumn: struct<one: int64 not null>\r\n  child 0, one: int64 not null\r\n----\r\ncolumn: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: int64\r\n[10,20,30]]\r\n>>> pq.ParquetFile(\"shallow.parquet\").read_row_groups([0], [\"column.two\"])\r\npyarrow.Table\r\ncolumn: struct<two: double not null>\r\n  child 0, two: double not null\r\n----\r\ncolumn: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: double\r\n[1.1,2.2,3.3]]\r\n>>> pq.ParquetFile(\"shallow_annotated.parquet\").read_row_groups([0], [\"column.one\"])\r\npyarrow.Table\r\ncolumn: struct<one: int64 not null>\r\n  child 0, one: int64 not null\r\n----\r\ncolumn: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: int64\r\n[10,20,30]]\r\n>>> pq.ParquetFile(\"shallow_annotated.parquet\").read_row_groups([0], [\"column.two\"])\r\npyarrow.Table\r\ncolumn: struct<two: double not null>\r\n  child 0, two: double not null\r\n----\r\ncolumn: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: double\r\n[1.1,2.2,3.3]]\r\n>>> pq.ParquetFile(\"deep.parquet\").read_row_groups([0], [\"column.nest.one\"])\r\npyarrow.Table\r\ncolumn: struct<nest: struct<one: int64 not null> not null>\r\n  child 0, nest: struct<one: int64 not null> not null\r\n      child 0, one: int64 not null\r\n----\r\ncolumn: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: struct<one: int64 not null>\r\n    -- is_valid: all not null\r\n    -- child 0 type: int64\r\n[10,20,30]]\r\n>>> pq.ParquetFile(\"deep.parquet\").read_row_groups([0], [\"column.nest.two\"])\r\npyarrow.Table\r\ncolumn: struct<nest: struct<two: double not null> not null>\r\n  child 0, nest: struct<two: double not null> not null\r\n      child 0, two: double not null\r\n----\r\ncolumn: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: struct<two: double not null>\r\n    -- is_valid: all not null\r\n    -- child 0 type: double\r\n[1.1,2.2,3.3]]\r\n>>> pq.ParquetFile(\"deep_annotated.parquet\").read_row_groups([0], [\"column.nest.one\"])\r\npyarrow.Table\r\ncolumn: struct<nest: struct<one: int64 not null> not null>\r\n  child 0, nest: struct<one: int64 not null> not null\r\n      child 0, one: int64 not null\r\n----\r\ncolumn: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: struct<one: int64 not null>\r\n    -- is_valid: all not null\r\n    -- child 0 type: int64\r\n[10,20,30]]\r\n>>> pq.ParquetFile(\"deep_annotated.parquet\").read_row_groups([0], [\"column.nest.two\"])\r\npyarrow.Table\r\ncolumn: struct<nest: struct<two: double not null> not null>\r\n  child 0, nest: struct<two: double not null> not null\r\n      child 0, two: double not null\r\n----\r\ncolumn: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: struct<two: double not null>\r\n    -- is_valid: all not null\r\n    -- child 0 type: double\r\n[1.1,2.2,3.3]]\r\n```\r\n\r\nNo segfaults, even when we select a column.",
  "created_at":"2022-08-26T18:38:55Z",
  "id":1228804025,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JPg-5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T18:38:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"If I create a tmp.parquet that would segfault in `ak._v2.from_parquet`,\r\n\r\n```python\r\n>>> ak._v2.from_parquet(\"tmp.parquet\", columns=[\"z.x\"])\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nthe same does not segfault when being read directly by pyarrow (i.e. it doesn't seem to be a problem with the file itself):\r\n\r\n```python\r\n>>> pq.ParquetFile(\"tmp.parquet\").read_row_groups([0], [\"z.x\"])\r\npyarrow.Table\r\nz: struct<x: int64 not null> not null\r\n  child 0, x: int64 not null\r\n----\r\nz: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: int64\r\n[1,2]]\r\n>>> pq.ParquetFile(\"tmp.parquet\").read_row_groups([0], [\"z.y\"])\r\npyarrow.Table\r\nz: struct<y: double not null> not null\r\n  child 0, y: double not null\r\n----\r\nz: [\r\n  -- is_valid: all not null\r\n  -- child 0 type: double\r\n[1.1,2.2]]\r\n```",
  "created_at":"2022-08-26T18:46:41Z",
  "id":1228809845,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JPiZ1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T18:46:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski is our code producing the same columns with `content.columns`?",
  "created_at":"2022-08-26T19:07:56Z",
  "id":1228825683,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JPmRT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T19:07:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"So far, it looks like Awkward is preparing Arrow arrays in the same format as the all-pyarrow method. Though there must be some difference.",
  "created_at":"2022-08-26T19:13:00Z",
  "id":1228829544,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JPnNo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T19:13:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Reading back this tmp.parquet file (produced by Awkward), with pure pyarrow causes the segfault, if we register our mock ExtensionType with the name `\"awkward\"`:\r\n\r\n```python\r\n>>> import pyarrow.parquet as pq\r\n>>> import pyarrow as pa\r\n>>> import json\r\n>>> \r\n>>> class AnnotatedType(pa.ExtensionType):\r\n...     def __init__(self, storage_type, annotation):\r\n...         self.annotation = annotation\r\n...         super().__init__(storage_type, \"awkward\")\r\n...     def __arrow_ext_serialize__(self):\r\n...         return json.dumps(self.annotation).encode()\r\n...     @classmethod\r\n...     def __arrow_ext_deserialize__(cls, storage_type, serialized):\r\n...         annotation = json.loads(serialized.decode())\r\n...         return cls(storage_type, annotation)\r\n...     @property\r\n...     def num_buffers(self):\r\n...         return self.storage_type.num_buffers\r\n...     @property\r\n...     def num_fields(self):\r\n...         return self.storage_type.num_fields\r\n... \r\n>>> pa.register_extension_type(AnnotatedType(pa.null(), None))\r\n>>> pq.ParquetFile(\"tmp.parquet\").read_row_groups([0])\r\npyarrow.Table\r\nz: extension<awkward<AnnotatedType>> not null\r\n----\r\nz: [  -- is_valid: all not null\r\n  -- child 0 type: extension<awkward<AnnotatedType>>\r\n[1,2]\r\n  -- child 1 type: extension<awkward<AnnotatedType>>\r\n[1.1,2.2]]\r\n>>> pq.ParquetFile(\"tmp.parquet\").read_row_groups([0], [\"z.x\"])\r\nSegmentation fault (core dumped)\r\n```",
  "created_at":"2022-08-26T19:14:35Z",
  "id":1228830721,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JPngB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T19:14:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, I have a minimally reproducing example that doesn't use Awkward. The reason I missed it before is because https://github.com/scikit-hep/awkward/issues/1635#issuecomment-1228804025 didn't load the extension type. The reason we need two levels of nested records in Awkward is because the first is interpreted as the Table (when we have a RecordArray, it becomes a Table).\r\n\r\nIn this minimally reproducing example, there is only one level of `pa.StructArray` (not `pa.Table`!), and that's all you need.\r\n\r\n```python\r\nimport numpy as np\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\n\r\none = pa.Array.from_buffers(\r\n    pa.int64(),\r\n    3,\r\n    [None, pa.py_buffer(np.array([10, 20, 30], dtype=np.int64))],\r\n)\r\ntwo = pa.Array.from_buffers(\r\n    pa.float64(),\r\n    3,\r\n    [None, pa.py_buffer(np.array([1.1, 2.2, 3.3], dtype=np.float64))],\r\n)\r\nrecord = pa.Array.from_buffers(\r\n    pa.struct([\r\n        pa.field(\"one\", one.type, False),\r\n        pa.field(\"two\", two.type, False),\r\n    ]),\r\n    3,\r\n    [None],\r\n    children=[one, two],\r\n)\r\nassert record.to_pylist() == [\r\n    {\"one\": 10, \"two\": 1.1},\r\n    {\"one\": 20, \"two\": 2.2},\r\n    {\"one\": 30, \"two\": 3.3},\r\n]\r\n\r\ntable = pa.Table.from_arrays([record], names=[\"column\"])\r\npq.write_table(table, \"record.parquet\")\r\ntable2 = pq.ParquetFile(\"record.parquet\").read_row_groups([0], [\"column.one\"])\r\nassert table2.to_pylist() == [\r\n    {\"column\": {\"one\": 10}},\r\n    {\"column\": {\"one\": 20}},\r\n    {\"column\": {\"one\": 30}},\r\n]\r\n\r\n################################# now add an ExtensionType\r\n\r\nimport json\r\n\r\nclass AnnotatedType(pa.ExtensionType):\r\n    def __init__(self, storage_type, annotation):\r\n        self.annotation = annotation\r\n        super().__init__(storage_type, \"my:app\")\r\n    def __arrow_ext_serialize__(self):\r\n        return json.dumps(self.annotation).encode()\r\n    @classmethod\r\n    def __arrow_ext_deserialize__(cls, storage_type, serialized):\r\n        annotation = json.loads(serialized.decode())\r\n        print(storage_type, annotation)\r\n        return cls(storage_type, annotation)\r\n    @property\r\n    def num_buffers(self):\r\n        return self.storage_type.num_buffers\r\n    @property\r\n    def num_fields(self):\r\n        return self.storage_type.num_fields\r\n\r\npa.register_extension_type(AnnotatedType(pa.null(), None))\r\n\r\none = pa.Array.from_buffers(\r\n    AnnotatedType(pa.int64(), {\"annotated\": \"one\"}),\r\n    3,\r\n    [None, pa.py_buffer(np.array([10, 20, 30], dtype=np.int64))],\r\n)\r\ntwo = pa.Array.from_buffers(\r\n    AnnotatedType(pa.float64(), {\"annotated\": \"two\"}),\r\n    3,\r\n    [None, pa.py_buffer(np.array([1.1, 2.2, 3.3], dtype=np.float64))],\r\n)\r\nrecord = pa.Array.from_buffers(\r\n    AnnotatedType(\r\n        pa.struct([\r\n            pa.field(\"one\", one.type, False),\r\n            pa.field(\"two\", two.type, False),\r\n        ]),\r\n        {\"annotated\": \"record\"},\r\n    ),\r\n    3,\r\n    [None],\r\n    children=[one, two],\r\n)\r\nassert record.to_pylist() == [\r\n    {\"one\": 10, \"two\": 1.1},\r\n    {\"one\": 20, \"two\": 2.2},\r\n    {\"one\": 30, \"two\": 3.3},\r\n]\r\n\r\ntable = pa.Table.from_arrays([record], names=[\"column\"])\r\npq.write_table(table, \"record_annotated.parquet\")\r\n\r\nprint(\"before segfault\")\r\n\r\ntable2 = pq.ParquetFile(\"record_annotated.parquet\").read_row_groups([0], [\"column.one\"])\r\n\r\nprint(\"after segfault\")\r\n\r\nassert table2.to_pylist() == [\r\n    {\"column\": {\"one\": 10}},\r\n    {\"column\": {\"one\": 20}},\r\n    {\"column\": {\"one\": 30}},\r\n]\r\n```\r\n\r\nThe print-out is\r\n\r\n```\r\nbefore segfault\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nstruct<one: extension<my:app<AnnotatedType>> not null, two: extension<my:app<AnnotatedType>> not null> {'annotated': 'record'}\r\nSegmentation fault (core dumped)\r\n````\r\n\r\nI'm going to report it.",
  "created_at":"2022-08-26T20:04:01Z",
  "id":1228883377,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JP0Wx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-26T20:04:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay! This has been reported as [ARROW-17539](https://issues.apache.org/jira/browse/ARROW-17539) and since there's no action to do here (Awkward doesn't need to be changed, as far as we know), I'll close this issue. Watch the Arrow JIRA (as I am) to see how this gets resolved.",
  "created_at":"2022-08-26T20:36:53Z",
  "id":1228927339,
  "issue":1635,
  "node_id":"IC_kwDODBCWws5JP_Fr",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-08-26T20:36:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1636?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1636](https://codecov.io/gh/scikit-hep/awkward/pull/1636?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5016b59) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.18%`.\n> The diff coverage is `65.07%`.\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1636?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [48 more](https://codecov.io/gh/scikit-hep/awkward/pull/1636/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n",
  "created_at":"2022-08-25T22:54:08Z",
  "id":1227834364,
  "issue":1636,
  "node_id":"IC_kwDODBCWws5JL0P8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-25T22:54:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is directly related to #1612 - we don't yet have the numpy dispatch mechanism enabled. You can use the awkward API to do this in the mean time.\r\n\r\n@jpivarski why don't we have the dispatch mechanism enabled? We should be able to have v1 and v2 at the same time, because they're separate registries right? ",
  "created_at":"2022-08-26T21:33:37Z",
  "id":1228966584,
  "issue":1638,
  "node_id":"IC_kwDODBCWws5JQIq4",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-26T21:33:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Maybe, because `ak.Array` and `ak._v2.Array` are different Python types. Although if we're splitting soon (`main` and `main-v1`), then it would be cleanest to do that after the split.",
  "created_at":"2022-08-29T12:53:14Z",
  "id":1230246789,
  "issue":1638,
  "node_id":"IC_kwDODBCWws5JVBOF",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-29T12:53:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, I don't forsee any problems; the v2 group is closed under `ak._v2` operations, and same holds for v1 (apart from the `tmp_for_testing` module). I think we probably need to flip the switch in a pre-release soon, so if that needs to happen before the branch split then let's do that?",
  "created_at":"2022-08-29T13:17:52Z",
  "id":1230286886,
  "issue":1638,
  "node_id":"IC_kwDODBCWws5JVLAm",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-29T13:17:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@Saransh-cpp sorry to be a pain; would you mind recreating this PR on top of the `docs` branch? The `ak.behavior.rst` file has moved into `docs-sphinx/reference/ak.behavior.rst`.",
  "created_at":"2022-08-29T08:09:36Z",
  "id":1229928260,
  "issue":1640,
  "node_id":"IC_kwDODBCWws5JTzdE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T08:09:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"No worries :) Rebased and changed the base branch!",
  "created_at":"2022-08-29T08:49:28Z",
  "id":1229969530,
  "issue":1640,
  "node_id":"IC_kwDODBCWws5JT9h6",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "rocket":1,
   "total_count":2
  },
  "updated_at":"2022-08-29T08:49:28Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1641?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1641](https://codecov.io/gh/scikit-hep/awkward/pull/1641?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b0f8da4) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.46%`.\n> The diff coverage is `64.27%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1641?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [64 more](https://codecov.io/gh/scikit-hep/awkward/pull/1641/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-08-29T16:20:29Z",
  "id":1230538678,
  "issue":1641,
  "node_id":"IC_kwDODBCWws5JWIe2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T22:56:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> During the development of this PR, I noticed that we seem to allow records to be passed to `ak.concatenate`. Is this intentional? It doesn't seem right to me, but I've not looked at this code in a while.\r\n\r\nIt was intentional, though there have been other cases in which we've scaled back the use of records in functions designed for numerical arrays.\r\n\r\nI don't see any logical problems with it, though. You might want to concatenate all of the arrays of the fields of your record.\r\n\r\n```python\r\n>>> array = ak._v2.Array([[{\"x\": [1]}, {\"x\": [1, 2]}], [], [{\"x\": [1, 2, 3]}]])\r\n>>> array.show(type=True)\r\ntype: 3 * var * {\r\n    x: var * int64\r\n}\r\n[[{x: [1]}, {x: [1, 2]}],\r\n [],\r\n [{x: [1, 2, 3]}]]\r\n>>> ak._v2.concatenate([array, array], axis=0).show(type=True)\r\ntype: 6 * var * {\r\n    x: var * int64\r\n}\r\n[[{x: [1]}, {x: [1, 2]}],\r\n [],\r\n [{x: [1, 2, 3]}],\r\n [{x: [1]}, {x: [1, 2]}],\r\n [],\r\n [{x: [1, 2, 3]}]]\r\n>>> ak._v2.concatenate([array, array], axis=1).show(type=True)\r\ntype: 3 * var * {\r\n    x: var * int64\r\n}\r\n[[{x: [1]}, {x: [1, 2]}, {x: [1]}, {x: [1, 2]}],\r\n [],\r\n [{x: [1, 2, 3]}, {x: [1, 2, 3]}]]\r\n>>> ak._v2.concatenate([array, array], axis=2).show(type=True)\r\ntype: 3 * var * {\r\n    x: var * int64\r\n}\r\n[[{x: [1, 1]}, {x: [1, 2, 1, 2]}],\r\n [],\r\n [{x: [1, 2, 3, 1, 2, 3]}]]\r\n```\r\n\r\nThis was developed in the spirit of \"let's generalize all NumPy functions to all data types,\" not \"does anybody actually have a use-case for this?\"\r\n\r\nIs it too weird? Should it be inhibited?\r\n\r\nOh, maybe this is a use-case:\r\n\r\n```python\r\n>>> arrays_from_uproot = ak._v2.Array([\r\n...     {\"Muon_pt\": [1.0, 1.1], \"Muon_eta\": [2.0, 2.2], \"Muon_phi\": [3.0, 3.3]},\r\n...     {\"Muon_pt\": [], \"Muon_eta\": [], \"Muon_phi\": []},\r\n...     {\"Muon_pt\": [1.0, 1.1, 1.2], \"Muon_eta\": [2.0, 2.2, 2.4], \"Muon_phi\": [3.0, 3.3, 3.6]},\r\n... ])\r\n>>> ak._v2.concatenate([arrays_from_uproot] * 2, axis=1).show(type=True)\r\ntype: 3 * {\r\n    Muon_pt: var * float64,\r\n    Muon_eta: var * float64,\r\n    Muon_phi: var * float64\r\n}\r\n[{Muon_pt: [1, 1.1, 1, 1.1], Muon_eta: [2, ..., 2.2], Muon_phi: [...]},\r\n {Muon_pt: [], Muon_eta: [], Muon_phi: []},\r\n {Muon_pt: [1, 1.1, 1.2, 1, 1.1, 1.2], Muon_eta: [2, ...], Muon_phi: ..., ...}]\r\n```\r\n\r\nAlthough we generally like `N * var * {field1: float64, field2: float64, ...}` type arrays for physics, what we get from some sources (NanoAOD) are `N * {field1: var * float64, field2: var * float64, ...}`, and this feature of `ak.concatenate` would allow them to be used in the form they have right out of Uproot (without `how=\"zip\"`).",
  "created_at":"2022-08-31T22:28:23Z",
  "id":1233483992,
  "issue":1641,
  "node_id":"IC_kwDODBCWws5JhXjY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T22:28:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1642?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1642](https://codecov.io/gh/scikit-hep/awkward/pull/1642?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7192d68) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.53%`.\n> The diff coverage is `67.75%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1642?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [59 more](https://codecov.io/gh/scikit-hep/awkward/pull/1642/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-08-29T17:45:33Z",
  "id":1230645179,
  "issue":1642,
  "node_id":"IC_kwDODBCWws5JWie7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T17:45:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Huh, good catch @jpivarski. I hadn't fully appreciated that `tuple` was special cased in `ArrayBuilder`. Thanks for the fix.",
  "created_at":"2022-08-29T19:34:36Z",
  "id":1230772968,
  "issue":1642,
  "node_id":"IC_kwDODBCWws5JXBro",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-29T19:34:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1645?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1645](https://codecov.io/gh/scikit-hep/awkward/pull/1645?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f56041d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.46%`.\n> The diff coverage is `63.67%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1645?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [63 more](https://codecov.io/gh/scikit-hep/awkward/pull/1645/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-08-30T07:54:08Z",
  "id":1231285528,
  "issue":1645,
  "node_id":"IC_kwDODBCWws5JY-0Y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T22:34:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I think the mistake was made when I was thinking that others is the full set of things to merge, forgetting that self should also be in that set?\r\n\r\nYep, I think that's probably how it happened :)",
  "created_at":"2022-08-31T22:12:58Z",
  "id":1233473029,
  "issue":1645,
  "node_id":"IC_kwDODBCWws5JhU4F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T22:12:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Note that this is also a bug in v1.",
  "created_at":"2022-08-30T07:51:22Z",
  "id":1231282701,
  "issue":1646,
  "node_id":"IC_kwDODBCWws5JY-IN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T07:51:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm leaning toward doing the copy at the public interface:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/operations/ak_fields.py#L28-L30\r\n\r\njust wrapping that `layout.fields` as `copy.copy(layout.fields)`. (It could be `None`.)",
  "created_at":"2022-08-30T15:55:28Z",
  "id":1231860117,
  "issue":1648,
  "node_id":"IC_kwDODBCWws5JbLGV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T15:55:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We also have little protection for `layout.parameters` either (e.g. via `ak.parameters`). I suppose we need to decide whether the layout interface is immutable by design or by convention. This is perhaps more troubling, because parameters are shared all over the place.\r\n",
  "created_at":"2022-08-30T16:13:30Z",
  "id":1231880560,
  "issue":1648,
  "node_id":"IC_kwDODBCWws5JbQFw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T16:23:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"So the above also goes for `ak.parameters`. Nothing is _supposed_ to be assigned in place, though we might do it in an internal function if we can prove to ourselves that the influence will not leak beyond that function.\r\n\r\nEarly in v1, there was a shift to complete immutability, even in the internals: #176 and #177. The pybind11 layer had to copy all the data (such as `recordlookup,` which is `fields`, and `parameters`) in the conversion from C++ to Python.\r\n\r\nIn v2, we pass around a lot more references, such as this `_fields` and, as you point out, `_parameters`. Parameters are either `None` or a dict, and if the latter, it can get expensive to be copying dicts all the time. (`None` will turn into `{}` when needed, too. The `None` representation of a layout's `_parameters` is an internal optimization that we hide in utility functions like `merge_parameters`.)\r\n\r\nA lot of things changed from v1 to v2, making it hard to narrow in on causes, but there was a noticeable factor-of-several speed-up in the overhead (_O(1)_ time) of most of the functions that I actually tested. I strongly suspect it has to do with fewer copies of metadata.\r\n\r\nYou're right that we should clarify, to ourselves, a policy about this. I think we should keep using references for the low-level interfaces (e.g. `layout.parameters`) but defensively copy the high-level interfaces (e.g. `ak.parameters`). Low-level users/developers of downstream dependencies already run the risk of mutating data because they can cast a `NumpyArray` as a `np.ndarray` and mutate that. This policy of leaving the low-level interfaces as references has the same risk of mutation, but in metadata, rather than data.",
  "created_at":"2022-08-30T16:39:32Z",
  "id":1231908618,
  "issue":1648,
  "node_id":"IC_kwDODBCWws5JbW8K",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T16:39:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"As for action items on this issue:\r\n\r\n  - [x] `copy.copy(layout.fields)` [here](https://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/operations/ak_fields.py#L30)\r\n  - [x] `copy.copy` the `parameters` in [these two cases](https://github.com/scikit-hep/awkward/blob/352b0dead74846ad2a56d385be4694ec87072a08/src/awkward/_v2/operations/ak_parameters.py#L29-L36)\r\n\r\nIf I've forgotten any, let me know and we'll add them to this list. (@Saransh-cpp has expressed an interest in fixing this, and we can coordinate the timing of a release with Vector.)",
  "created_at":"2022-08-30T16:46:43Z",
  "id":1231915721,
  "issue":1648,
  "node_id":"IC_kwDODBCWws5JbYrJ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-30T22:30:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I think we should keep using references for the low-level interfaces (e.g. layout.parameters) but defensively copy the high-level interfaces \r\n\r\nYes, the purist in me itches to enforce this at the API level for LL and HL APIs, but if we do this by forcing copying on all users ... that might not be great. I don't have a feel for the performance impact of such a decision, which would strongly depend on how often we're calling `copy` and what we're actually copying. I would remark, however, that we're definitely not crossing the Python-C++ boundary as often, which I suspect was also a significant contributor to the reduced O(1) performance of v1 w.r.t v2.\r\n\r\nAt the same time as addressing this, I think we might want to formalise our contents API too - right now there are methods / properties that all contents implement, and are expected to implement, but are not defined on the base class. Given that layouts are low-level w.r.t the high-level API, we certainly could get away with only copying at the high level, which would also be guaranteed to mostly happen once per call. We could alternatively choose to implement a zero-copy private interface for contents, which the `Content` classes can call, but external layout users should avoid, e.g. `_parameters` vs `def parameters(self)`.\r\n\r\nI'm not too worried about the low-level side of things all considered, because it already requires a degree of domain knowledge.\r\n\r\nAs an aside, I'd like to make `fields` be a tuple, but I think we're past being able to change that, at least with the v1-v2 transition preserving API.",
  "created_at":"2022-08-30T17:42:18Z",
  "id":1231971492,
  "issue":1648,
  "node_id":"IC_kwDODBCWws5JbmSk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T17:43:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> As an aside, I'd like to make `fields` be a tuple, but I think we're past being able to change that, at least with the v1-v2 transition preserving API.\r\n\r\nI thought about that, too, and it's not too late to change the API to make `fields` a tuple. (Changes on that scale are still open.) It's just that it doesn't strike me as a tuple-kind of thing: I think of tuples as having known or relatively stable lengths, such as pairs or triples, and frequently different types. This `fields` is always strings, but varies in length arbitrarily from one RecordArray to another.\r\n\r\nOn the other hand, Python doesn't care about that\u2014tuple is a synonym for \"frozen list.\"\r\n\r\nOne thing that might be hard, in changing it, is that it might be set via list comprehensions in some parts of the code. It would take some care to be certain that it's not sometimes converted from a tuple back into a list. (That would have to be code that modifies `_fields` in place, since building a new RecordArray with new `fields` can always wrap input lists and save them as tuples. I don't _think_ there's a lot of in-place RecordArray manipulation happening, and I guess it could be easy to search for, as \"`self._fields`\" on the left-hand side of an assignment.)\r\n\r\n> I think we might want to formalise our contents API too\r\n\r\nYes! If the documentation just has a list of the ones that are expected on all Contents, that would already help us a lot. We can find the common set algorithmically:\r\n\r\n```python\r\n>>> # Content subclasses (same for Forms and Types)\r\n>>> clss = [getattr(ak._v2.contents, x) for x in dir(ak._v2.contents) if x.endswith(\"Array\")]\r\n\r\n>>> # methods defined on all of them\r\n>>> tmp = set.intersection(*[set(dir(x)) for x in clss])\r\n\r\n>>> # maybe just the public ones\r\n>>> tmp = set.intersection(*[set([y for y in dir(x) if not y.startswith(\"_\")]) for x in clss])\r\n>>> print(\"\\n\".join(sorted(tmp)))\r\nForm\r\nall\r\nany\r\nargmax\r\nargmin\r\nargsort\r\naxis_wrap_if_negative\r\nbranch_depth\r\ncombinations\r\ncompletely_flatten\r\ncopy\r\ncount\r\ncount_nonzero\r\ndimension_optiontype\r\ndummy\r\nfields\r\nfill_none\r\nflatten\r\nforget_length\r\nform\r\nform_with_key\r\nidentifier\r\nis_IndexedType\r\nis_ListType\r\nis_NumpyType\r\nis_OptionType\r\nis_RecordType\r\nis_RegularType\r\nis_UnionType\r\nis_UnknownType\r\nis_tuple\r\nis_unique\r\njax_flatten\r\njax_unflatten\r\nlayout_equal\r\nlength\r\nlocal_index\r\nmax\r\nmaybe_to_array\r\nmerge\r\nmerge_as_union\r\nmerge_parameters\r\nmergeable\r\nmergemany\r\nmin\r\nminmax_depth\r\nnbytes\r\nnplike\r\nnum\r\nnumbers_to_type\r\npacked\r\npad_none\r\npad_none_axis0\r\nparameter\r\nparameters\r\nprod\r\npurelist_depth\r\npurelist_isregular\r\npurelist_parameter\r\nrecursively_apply\r\nsort\r\nsum\r\nto_arrow\r\nto_backend\r\nto_buffers\r\nto_json\r\nto_list\r\nto_numpy\r\ntolist\r\ntypetracer\r\nunique\r\nvalidity_error\r\nvalidity_error_parameters\r\nwith_parameter\r\n```\r\n\r\nThere might be others that are accidentally missing from one or two classes, and still others that are supposed to be only defined on one class or all `is_ListType` or all `is_OptionType`. Some variants of Awkward had a non-trivial class hierarchy to group things as list-like or option-like, but it's not a strict tree because `is_IndexType` is an important qualifier, and it straddles option-type and non-option-type.",
  "created_at":"2022-08-30T22:28:22Z",
  "id":1232234075,
  "issue":1648,
  "node_id":"IC_kwDODBCWws5JcmZb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T22:28:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1649?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1649](https://codecov.io/gh/scikit-hep/awkward/pull/1649?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (29679bc) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.52%`.\n> The diff coverage is `67.67%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1649?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [59 more](https://codecov.io/gh/scikit-hep/awkward/pull/1649/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-08-30T17:54:34Z",
  "id":1231983912,
  "issue":1649,
  "node_id":"IC_kwDODBCWws5JbpUo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T17:54:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1650?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1650](https://codecov.io/gh/scikit-hep/awkward/pull/1650?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4696cbc) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.46%`.\n> The diff coverage is `68.67%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1650?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [63 more](https://codecov.io/gh/scikit-hep/awkward/pull/1650/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-08-30T18:51:25Z",
  "id":1232038563,
  "issue":1650,
  "node_id":"IC_kwDODBCWws5Jb2qj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T17:55:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77, I think we should leave `fields` as a list (following up on https://github.com/scikit-hep/awkward/issues/1648#issuecomment-1232234075) and merge this, taking it as the first step in establishing a policy that high-level functions (`ak.*`, any public methods on ak.Array/ak.Record, including `__getitem__`, ufuncs) ensure that the data they return are not mutable references inside the Awkward Array objects. However, low-level interfaces (e.g. Content methods) do not make such a guarantee.\r\n\r\nDo you agree?",
  "created_at":"2022-08-30T22:34:55Z",
  "id":1232239383,
  "issue":1650,
  "node_id":"IC_kwDODBCWws5JcnsX",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-30T22:34:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Either way, @all-contributors please add @Saransh-cpp for code",
  "created_at":"2022-08-30T22:36:37Z",
  "id":1232240621,
  "issue":1650,
  "node_id":"IC_kwDODBCWws5Jcn_t",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-08-30T22:36:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski \n\nI've put up [a pull request](https://github.com/scikit-hep/awkward/pull/1653) to add @Saransh-cpp! :tada:",
  "created_at":"2022-08-30T22:36:46Z",
  "id":1232240726,
  "issue":1650,
  "node_id":"IC_kwDODBCWws5JcoBW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T22:36:46Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "author_association":"MEMBER",
  "body":"(Working through the web editor...)",
  "created_at":"2022-08-31T17:41:57Z",
  "id":1233232329,
  "issue":1650,
  "node_id":"IC_kwDODBCWws5JgaHJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T17:41:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We spoke about this in general before, with an eye towards extending the syntax to permit users to specify dimension-aware behaviours. I wanted this at one point to better enforce structural constraints for complex behaviour classes. \r\n\r\nI `rg`d my repos, and found `ak.behavior[(\".\", \"ordered_map\")] = OrderedMapArray`, which is an implementation of a key-value abstraction. So, I can attest to at least one usage ;)",
  "created_at":"2022-08-30T19:31:50Z",
  "id":1232079049,
  "issue":1651,
  "node_id":"IC_kwDODBCWws5JcAjJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T19:38:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1651?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1651](https://codecov.io/gh/scikit-hep/awkward/pull/1651?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (166960e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.54%`.\n> The diff coverage is `67.67%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1651?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWluLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [59 more](https://codecov.io/gh/scikit-hep/awkward/pull/1651/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-08-30T19:38:07Z",
  "id":1232085121,
  "issue":1651,
  "node_id":"IC_kwDODBCWws5JcCCB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T19:38:07Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I remember that. If dropping the `\".\"` case makes it easier to extend the syntax, then that's an additional benefit. What we can't change, however, is the `\"*\"` case, since a lot of people know about it and use it.\r\n\r\n> So, I can attest to at least one usage ;)\r\n\r\nIn that case, do you need it? (Can your ordered map function without it?) We can reinstate this feature. As I said in Slack, it will be easier to remove it and introduce it correctly than to leave it as-is.",
  "created_at":"2022-08-30T19:53:32Z",
  "id":1232100072,
  "issue":1651,
  "node_id":"IC_kwDODBCWws5JcFro",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T19:53:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I found the relevant issue: https://github.com/scikit-hep/awkward/issues/1038\r\n\r\n> In that case, do you need it? (Can your ordered map function without it?) \r\n\r\nNot urgently - I just lose some safety. I'm not convinced it's enough to arrest this PR, though :) I'm not being contrary, though it looks like it, just setting out my own usage before we merge this :)",
  "created_at":"2022-08-30T20:07:58Z",
  "id":1232114135,
  "issue":1651,
  "node_id":"IC_kwDODBCWws5JcJHX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T20:07:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm going to merge this with the understanding that reintroducing the `\".\"` syntax is definitely on the table. But it's something we'll proactively do, rather than let that wrong code sit there untested.",
  "created_at":"2022-08-30T22:06:58Z",
  "id":1232217892,
  "issue":1651,
  "node_id":"IC_kwDODBCWws5Jcick",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-08-30T22:06:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I might be misreading the UI, but in case my understanding is right, we don't want to close #1600 with this PR unless we create a new issue to track the performance implication - I think `vector`'s use case is legitimate enough that we don't want to hurt `to_list` speed silently.",
  "created_at":"2022-08-30T20:10:51Z",
  "id":1232116778,
  "issue":1652,
  "node_id":"IC_kwDODBCWws5JcJwq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T20:10:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1652?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1652](https://codecov.io/gh/scikit-hep/awkward/pull/1652?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (079951d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9e17f2955670b1e63e684da7c4ad4c835a9994e6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9e17f29) will **increase** coverage by `0.52%`.\n> The diff coverage is `64.75%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1652?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L251bWV4cHIucHk=) | `88.40% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3B5YXJyb3cucHk=) | `88.46% <0.00%> (\u00f8)` | |\n| [...awkward/\\_v2/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvZnJvbV9yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [...c/awkward/\\_v2/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L3JkYXRhZnJhbWUvdG9fcmRhdGFmcmFtZS5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19sb29rdXAucHk=) | `98.68% <\u00f8> (+1.17%)` | :arrow_up: |\n| [src/awkward/\\_v2/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL251bWJhLnB5) | `93.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9hdnJvX2ZpbGUucHk=) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_local\\_index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbG9jYWxfaW5kZXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWF4LnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| ... and [65 more](https://codecov.io/gh/scikit-hep/awkward/pull/1652/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-08-30T20:17:01Z",
  "id":1232122300,
  "issue":1652,
  "node_id":"IC_kwDODBCWws5JcLG8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-31T22:19:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I haven't had a chance to address all of your comments yet\u2014sorry!\r\n\r\nBut, coming to that, I'm thinking of issue #1600 as an issue of consistency in output, the fact that `to_list` returned the wrong results, not a performance issue.\r\n\r\nSo now let's consider the performance implications. The simplest implementation to get the right results is to call `__getitem__` on every element, recursively, and wrapping ListType in Python `list, etc. The vectorized implementation _assumes_ it knows what `__getitem__` will return and uses that knowledge to be 10\u00d7 faster. If it can't use the fast path, it defers to the simple implementation, so there's no loss, just no gain.\r\n\r\nYou're asking if we can do any better, by recognizing that Vector's `__getitem__` is\r\n\r\n```python\r\ndef __getitem__(self, where):\r\n    return super().__getitem__(where)\r\n```\r\n\r\nand using the fast-path on it, too. We would definitely be getting too intrusive if we tried to examine the function to determine that it is inert. Presumably, there are other ways of writing this function that are equally inert\u2014looking at version-dependent bytecode or using the `inspect` module to re-compile it into an AST is way too much of a rabbit hole.\r\n\r\nYour specific suggestion was to allow ak.Array/ak.Record subclasses to override their `to_list` as well as their `__getitem__`. Overriding `__getitem__` by itself might be a performance bomb, but a knowledgeable downstream developer would override both and get the performance back.\r\n\r\nLet's see what the damage is: failing to take the fast-path should put the performance back at the level where it was in v1.\r\n\r\n```python\r\nimport awkward as ak\r\nfile = \"https://pivarski-princeton.s3.amazonaws.com/chep-2021-jagged-jagged-jagged/zlib9-jagged3.parquet\"\r\narray_v1 = ak.from_parquet(file)\r\narray_v2 = ak._v2.from_parquet(file)\r\n\r\n%%timeit\r\nak.to_list(array_v1[:10000])\r\n# 22 seconds\r\n\r\n%%timeit\r\nak._v2.to_list(array_v2[:10000])\r\n# 0.7 seconds\r\n```\r\n\r\nOverloading `__getitem__` on a v2 array,\r\n\r\n```python\r\nclass Overload(ak._v2.Array):\r\n    def __getitem__(self, where):\r\n        return super().__getitem__(where)\r\n\r\nak._v2.behavior[\"overload\"] = Overload\r\n\r\noverloaded = ak._v2.with_parameter(array_v2.layout, \"__array__\", \"overload\")\r\n```\r\n\r\nCrud, that's only the outermost layer...\r\n\r\n```python\r\narray_v2.layout.content.content.content.parameters[\"__array__\"] = \"overload\"\r\narray_v2.layout.content.content.parameters[\"__array__\"] = \"overload\"\r\narray_v2.layout.content.parameters[\"__array__\"] = \"overload\"\r\narray_v2.layout.parameters[\"__array__\"] = \"overload\"\r\narray_v2 = ak._v2.Array(array_v2)\r\n```\r\n\r\n(Okay! Okay! I'm using it as mutable.)\r\n\r\n```python\r\n%%timeit\r\nak._v2.to_list(array_v2[:10000])\r\n# 677 seconds\r\n```\r\n\r\nSo, that is a performance bomb: v2 went from being 30\u00d7 faster than v1 to being 30\u00d7 slower. (Interesting symmetry, but only approximate.) I looked into it with cProfiler, and most of the slowness is in setting up asynchronous-ready error-handling (so that we can support GPUs and other asynchronous computation: https://github.com/scikit-hep/awkward/discussions/1321). In other words, the problem is that highlevel `__getitem__` itself is more expensive than in v1, and whenever anybody calls it millions of times, they'll notice the lag. `Overload.__getitem__` explicitly calls it, and since we aren't allowed to guess at what this function does, we have to call it millions of times.\r\n\r\nAnyway, we do need to have some sort of backdoor for downstream developers to avoid this catastrophe. Letting them override `to_list` opens a can of worms because we would need to make an API for it, which would require hand-offs between us and the downstream developers at each level of list-node. Since this is going to require insider knowledge anyway, could we just give it an \"ignore me\" flag?\r\n\r\n```python\r\nclass Overload(ak._v2.Array):\r\n    def __getitem__(self, where):\r\n        return super().__getitem__(where)\r\n\r\n    __getitem__.ignore_in_to_list = True\r\n\r\nak._v2.behavior[\"overload\"] = Overload\r\n```\r\n\r\nThe previous commit (f8e0dae9ad405a04d81ee461d94cc39b0091e5d1) implements that flag, and it puts the overloaded array's `to_list` back at 0.7 seconds. Of course, this is also an API to maintain forever. Maybe we should get systematic about how such things are to be expressed? (They'll have to be explained in documentation, too.) The overloading capabilities themselves are systematically expressed in the `ak.behavior` dict, but this seems to me like a different thing, a performance hint instead of a behavior-changing thing.\r\n\r\nLet me know in a review if you think this is the right way to go, and take over this PR/add an alternative if you think that's a better idea. This is one that you've thought about a lot.",
  "created_at":"2022-08-30T22:03:33Z",
  "id":1232215264,
  "issue":1652,
  "node_id":"IC_kwDODBCWws5Jchzg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-08-30T22:04:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Since this was mentioned in @Saransh-cpp's talk as (I think) the only unresolved Awkward issue in updating Vector to Awkward v2, I think it would be best to merge it. The two possible actions (that I can think of) are to merge it as-is, allowing overrides of `__getitem__` to affect `to_list` behavior, with a decorator performance hint when the `to_list` behavior is not supposed to change, or to strip it down such that overrides of `__getitem__` don't affect `to_list` behavior at all.",
  "created_at":"2022-09-01T13:56:05Z",
  "id":1234317473,
  "issue":1652,
  "node_id":"IC_kwDODBCWws5JkjCh",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2022-09-01T13:56:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski for completeness:\r\n> Well, the first thing is that we can't prevent people from overriding __getitem__, and ignoring the fact that they might have overridden it would make the output of to_list wrong in a way that exposes its implementation. I can't see how we can not do this.\r\n\r\nI would argue that overwriting `__getitem__` is wrong, so users shouldn't do that! I can't immediately think of a use case given that any `__getitem__` change wouldn't modify how Awkward interacts with the array under the hood.\r\n\r\nWith your ipaddress example (nice example, btw), I'd advocate for adding `to_ip_address` to the behavior, which explicitly produces an `IPv4Address` object.\r\n\r\nThat's where I leave it, though - I'm happy with this alternative solution if you want to proceed :)",
  "created_at":"2022-09-01T14:05:19Z",
  "id":1234330233,
  "issue":1652,
  "node_id":"IC_kwDODBCWws5JkmJ5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-01T14:05:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - please, let me know if `docs-src/how-to-convert-rdataframe.md` is a correct place for a user guide. Thanks!",
  "created_at":"2022-09-01T07:39:07Z",
  "id":1233873604,
  "issue":1656,
  "node_id":"IC_kwDODBCWws5Ji2rE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-01T07:39:07Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna are you happy to work off of the `docs` branch? If so, the new location is `docs-sphinx/user-guide` instead of `docs-src`.",
  "created_at":"2022-09-01T11:02:28Z",
  "id":1234113779,
  "issue":1656,
  "node_id":"IC_kwDODBCWws5JjxTz",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-01T11:02:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1657?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1657](https://codecov.io/gh/scikit-hep/awkward/pull/1657?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b77062f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.00%`.\n> The diff coverage is `78.63%`.\n\n> :exclamation: Current head b77062f differs from pull request most recent head b233c27. Consider uploading reports for the commit b233c27 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1657?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.68% <33.33%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `75.34% <62.63%> (-0.96%)` | :arrow_down: |\n| [src/awkward/\\_v2/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGluZy5weQ==) | `80.00% <80.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_categories.py](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY2F0ZWdvcmllcy5weQ==) | `88.88% <88.88%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_to\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fY2F0ZWdvcmljYWwucHk=) | `90.90% <90.90%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jYXRlZ29yaWNhbC5weQ==) | `93.33% <93.33%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvX19pbml0X18ucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json.py](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uLnB5) | `91.77% <100.00%> (+0.03%)` | :arrow_up: |\n| ... and [5 more](https://codecov.io/gh/scikit-hep/awkward/pull/1657/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-04T09:59:54Z",
  "id":1236302223,
  "issue":1657,
  "node_id":"IC_kwDODBCWws5JsHmP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T15:25:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is too hard to rebase, so I'll close it in favour of a new PR.",
  "created_at":"2022-09-26T20:21:26Z",
  "id":1258579278,
  "issue":1657,
  "node_id":"IC_kwDODBCWws5LBGVO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T20:21:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"When we last went though the checklist: https://github.com/gmarkall/awkward-checklist - I think we concluded that all the required support in Numba was in place, and it would mainly be a case of bug fixes / small extensions as necessary to implement this for Awkward. That said, the CUDA target is now more capable than it was back then so it might be worth us revisiting the checklist to see how we'd approach meeting all the requirements today.",
  "created_at":"2022-09-06T13:01:12Z",
  "id":1238119505,
  "issue":1658,
  "node_id":"IC_kwDODBCWws5JzDRR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T13:01:12Z",
  "user":"MDQ6VXNlcjUzNTY0MA=="
 },
 {
  "author_association":"NONE",
  "body":"> That said, the CUDA target is now more capable than it was back then\r\n\r\nIn particular, the PR that brings support for the [high-level extension API](https://numba.readthedocs.io/en/latest/extending/high-level.html) to the CUDA target is: https://github.com/numba/numba/pull/8271 - this is the one that was brought up in the meeting, and should make it quicker and easier to write extensions - we'll prioritise this as it would be good to make it available and if possible get some feedback / external use of it.",
  "created_at":"2022-09-06T16:23:21Z",
  "id":1238374669,
  "issue":1658,
  "node_id":"IC_kwDODBCWws5J0BkN",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2022-09-06T16:23:21Z",
  "user":"MDQ6VXNlcjUzNTY0MA=="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks, @gmarkall! I've been thinking for a while that the onus of testing lies on our side, and now @ianna is ready to do it. The links you provide help, too.",
  "created_at":"2022-09-06T18:19:15Z",
  "id":1238500335,
  "issue":1658,
  "node_id":"IC_kwDODBCWws5J0gPv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T18:19:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"**Survey of Numba functions used (updated for v2)** \r\nPlease, see the v1 list in [this demo](https://github.com/scikit-hep/awkward/blob/main/docs-jupyter/2020-01-22-numba-demo-EVALUATED.ipynb).\r\n```\r\ndecorators\r\n---------------------------------------------------------\r\n  108 numba.extending.lower_builtin\r\n   51 numba.core.typing.templates.bound_function\r\n   45 numba.extending.typeof_impl.register\r\n   18 numba.core.typing.templates.infer_global\r\n   12 numba.extending.register_model\r\n   12 numba.extending.unbox\r\n    9 numba.core.imputils.lower_constant\r\n    9 numba.extending.box\r\n    9 numba.core.typing.templates.infer_getattr\r\n    6 numba.extending.lower_getattr_generic\r\n    6 numba.extending.overload\r\n    3 numba.core.typing.templates.infer\r\n    3 numba.core.datamodel.registry.register_default\r\n    3 numba.core.imputils.iternext_impl\r\n    3 numba.extending.type_callable\r\n\r\nclasses\r\n---------------------------------------------------------\r\n    8 numba.core.typing.templates.AbstractTemplate\r\n    5 numba.core.datamodel.models.StructModel\r\n    4 numba.extending.NativeValue\r\n    3 numba.core.typing.templates.AttributeTemplate\r\n    2 numba.core.typing.Context\r\n    1 numba.core.typing.templates.Signature\r\n\r\nfunctions\r\n---------------------------------------------------------\r\n    4 numba.core.cgutils.alloca_once_value\r\n    4 numba.core.cgutils.is_not_null\r\n    4 numba.extending.lower_builtin\r\n    3 numba.core.cgutils.get_null_value\r\n    3 numba.typeof\r\n    2 numba.core.cgutils.pointer_add\r\n    2 numba.from_dtype\r\n    1 numba.core.typing.ctypes_utils.make_function_type\r\n    1 numba.core.cgutils.alloca_once\r\n    1 numba.core.cgutils.as_bool_bit\r\n    1 numba.core.cgutils.for_range\r\n    1 numba.core.imputils.impl_ret_new_ref\r\n    1 numba.core.cgutils.increment_index\r\n\r\nbuilder.*\r\n---------------------------------------------------------\r\n   63 builder.add\r\n   48 builder.icmp_signed\r\n   36 builder.load\r\n   30 builder.if_then\r\n   24 builder.store\r\n   15 builder.sub\r\n   12 builder.if_else\r\n   12 builder.inttoptr\r\n    9 builder.mul\r\n    6 builder.zext\r\n    6 builder.and_\r\n    3 builder.sext\r\n    3 builder.trunc\r\n    3 builder.or_\r\n    3 builder.sdiv\r\n    3 builder.srem\r\n    3 builder.lshr\r\n    3 builder.shl\r\n    3 builder._layout\r\n    3 builder._layout._ptr\r\n    3 builder.bitcast\r\n    3 builder.icmp_unsigned\r\n    3 builder.sitofp\r\n    3 builder.uitofp\r\n    3 builder.fpext\r\n    3 builder.fptrunc\r\n\r\ncontext.*\r\n---------------------------------------------------------\r\n  192 context.make_helper\r\n  105 context.get_constant\r\n   54 context.get_dummy_value\r\n   42 context.get_value_type\r\n   12 context.add_dynamic_addr\r\n    9 context.enable_nrt\r\n    6 context.call_conv.return_user_exc\r\n    6 context.unify_types\r\n    6 context.nrt.decref\r\n    6 context.make_tuple\r\n    3 context.get_function_pointer_type\r\n    3 context.call_function_pointer\r\n    3 context.make_constant_array\r\n    3 context.nrt.incref\r\n\r\npyapi.*\r\n---------------------------------------------------------\r\n   81 c.pyapi.decref\r\n   33 c.pyapi.object_getattr_string\r\n   24 c.pyapi.unserialize\r\n   24 c.pyapi.serialize_object\r\n   12 c.pyapi.err_occurred\r\n   12 c.pyapi.number_as_ssize_t\r\n   12 c.pyapi.long_from_ssize_t\r\n    9 c.pyapi.call_method\r\n    9 c.pyapi.call_function_objargs\r\n    6 c.pyapi.to_native_value\r\n    3 c.pyapi.long_as_voidptr\r\n    3 c.pyapi.incref\r\n\r\ntypes\r\n---------------------------------------------------------\r\n   54 numba.intp\r\n   48 numba.types.Array\r\n   25 numba.types.none\r\n   17 numba.int64\r\n   17 numba.types.Integer\r\n   16 numba.uint8\r\n   13 numba.int8\r\n   12 numba.types.Type\r\n   10 numba.int32\r\n   10 numba.types.Boolean\r\n   10 numba.types.StringLiteral\r\n    9 numba.none\r\n    9 numba.uint32\r\n    6 numba.types.float64\r\n    6 numba.types.Float\r\n    4 numba.types.optional\r\n    4 numba.types.voidptr\r\n    4 numba.types.Complex\r\n    3 numba.types.CPointer\r\n    3 numba.types.Optional\r\n    2 numba.types.NPDatetime\r\n    2 numba.types.NPTimedelta\r\n    2 numba.types.pyobject\r\n    2 numba.types.UnicodeType\r\n    2 numba.types.NoneType\r\n    2 numba.types.Number\r\n    2 numba.types.UniTuple\r\n    2 numba.types.intp\r\n    1 numba.int16\r\n    1 numba.types.uintp\r\n    1 numba.types.IterableType\r\n    1 numba.types.Sized\r\n    1 numba.types.SliceType\r\n    1 numba.types.slice2_type\r\n    1 numba.types.common.SimpleIteratorType\r\n    1 numba.types.EphemeralPointer\r\n    1 numba.types.Literal\r\n    1 numba.types.BoundFunction\r\n    1 numba.types.boolean\r\n    1 numba.types.int8\r\n    1 numba.types.int16\r\n    1 numba.types.int32\r\n    1 numba.types.int64\r\n    1 numba.types.uint8\r\n    1 numba.types.uint16\r\n    1 numba.types.uint32\r\n    1 numba.types.uint64\r\n    1 numba.types.float32\r\n    1 numba.types.complex64\r\n    1 numba.types.complex128\r\n\r\nother\r\n---------------------------------------------------------\r\n  108 numba.intp (<class 'NoneType'>)\r\n   57 numba.arrayview.wrap (<class 'NoneType'>)\r\n   50 numba.types.none (<class 'NoneType'>)\r\n   34 numba.types.Integer (<class 'NoneType'>)\r\n   27 numba.arrayview.tonumbatype (<class 'NoneType'>)\r\n   20 numba.types.Boolean (<class 'NoneType'>)\r\n   20 numba.types.StringLiteral (<class 'NoneType'>)\r\n   18 numba.int64 (<class 'NoneType'>)\r\n   18 numba.arrayview.RecordViewType (<class 'NoneType'>)\r\n   18 numba.layout.castint (<class 'NoneType'>)\r\n   16 numba.types.Array (<class 'NoneType'>)\r\n   16 numba.uint8 (<class 'NoneType'>)\r\n   16 numba.core.typing.templates.AbstractTemplate (<class 'NoneType'>)\r\n   12 numba.types.float64 (<class 'NoneType'>)\r\n   12 numba.types.Float (<class 'NoneType'>)\r\n   12 numba.arrayview.ArrayViewType (<class 'NoneType'>)\r\n   10 numba.int8 (<class 'NoneType'>)\r\n   10 numba.core.datamodel.models.StructModel (<class 'NoneType'>)\r\n    9 numba.layout.getat (<class 'NoneType'>)\r\n    8 numba.types.Type (<class 'NoneType'>)\r\n    8 numba.core.cgutils.alloca_once_value (<class 'NoneType'>)\r\n    8 numba.types.optional (<class 'NoneType'>)\r\n    8 numba.core.cgutils.true_bit (<class 'NoneType'>)\r\n    8 numba.types.voidptr (<class 'NoneType'>)\r\n    8 numba.core.cgutils.is_not_null (<class 'NoneType'>)\r\n    8 numba.extending.NativeValue (<class 'NoneType'>)\r\n    8 numba.types.Complex (<class 'NoneType'>)\r\n    8 numba.extending.lower_builtin (<class 'NoneType'>)\r\n    6 numba.types.CPointer (<class 'NoneType'>)\r\n    6 numba.core.cgutils.false_bit (<class 'NoneType'>)\r\n    6 numba.core.cgutils.get_null_value (<class 'NoneType'>)\r\n    6 numba.core.typing.templates.AttributeTemplate (<class 'NoneType'>)\r\n    6 numba.types.Optional (<class 'NoneType'>)\r\n    6 numba.typeof (<class 'NoneType'>)\r\n    6 numba.layout.NumpyArrayType (<class 'NoneType'>)\r\n    4 numba.int32 (<class 'NoneType'>)\r\n    4 numba.types.NPDatetime (<class 'NoneType'>)\r\n    4 numba.types.NPTimedelta (<class 'NoneType'>)\r\n    4 numba.core.cgutils.pointer_add (<class 'NoneType'>)\r\n    4 numba.from_dtype (<class 'NoneType'>)\r\n    4 numba.core.typing.Context (<class 'NoneType'>)\r\n    4 numba.core.typing (<class 'NoneType'>)\r\n    4 numba.core.typing.ctypes_utils (<class 'NoneType'>)\r\n    4 numba.types.pyobject (<class 'NoneType'>)\r\n    4 numba.types.UnicodeType (<class 'NoneType'>)\r\n    4 numba.types.NoneType (<class 'NoneType'>)\r\n    4 numba.types.Number (<class 'NoneType'>)\r\n    4 numba.types.UniTuple (<class 'NoneType'>)\r\n    4 numba.types.intp (<class 'NoneType'>)\r\n    4 numba.core.cgutils.true_bit (<class 'llvmlite.ir.values.Constant'>)\r\n    3 numba.arrayview.repr_behavior (<class 'NoneType'>)\r\n    3 numba.layout.NumpyArrayType.from_form (<class 'NoneType'>)\r\n    3 numba.layout.RegularArrayType.from_form (<class 'NoneType'>)\r\n    3 numba.layout.ListArrayType.from_form (<class 'NoneType'>)\r\n    3 numba.layout.IndexedArrayType.from_form (<class 'NoneType'>)\r\n    3 numba.layout.IndexedOptionArrayType.from_form (<class 'NoneType'>)\r\n    3 numba.layout.ByteMaskedArrayType.from_form (<class 'NoneType'>)\r\n    3 numba.layout.BitMaskedArrayType.from_form (<class 'NoneType'>)\r\n    3 numba.layout.UnmaskedArrayType.from_form (<class 'NoneType'>)\r\n    3 numba.layout.RecordArrayType.from_form (<class 'NoneType'>)\r\n    3 numba.layout.UnionArrayType.from_form (<class 'NoneType'>)\r\n    3 numba.layout.RecordArrayType (<class 'NoneType'>)\r\n    3 numba.layout.posat (<class 'NoneType'>)\r\n    3 numba.layout.type_bitwidth (<class 'NoneType'>)\r\n    3 numba.np.arrayobj.make_array (<class 'NoneType'>)\r\n    3 numba.np.arrayobj.populate_array (<class 'NoneType'>)\r\n    3 numba.core.cgutils.false_bit (<class 'llvmlite.ir.values.Constant'>)\r\n    2 numba.none (<class 'NoneType'>)\r\n    2 numba.uint32 (<class 'NoneType'>)\r\n    2 numba.int16 (<class 'NoneType'>)\r\n    2 numba.intp.bitwidth (<class 'NoneType'>)\r\n    2 numba.types.uintp (<class 'NoneType'>)\r\n    2 numba.core.typing.ctypes_utils.make_function_type (<class 'NoneType'>)\r\n    2 numba.core.cgutils.alloca_once (<class 'NoneType'>)\r\n    2 numba.core.cgutils.as_bool_bit (<class 'NoneType'>)\r\n    2 numba.core.cgutils.for_range (<class 'NoneType'>)\r\n    2 numba.types.IterableType (<class 'NoneType'>)\r\n    2 numba.types.Sized (<class 'NoneType'>)\r\n    2 numba.types.SliceType (<class 'NoneType'>)\r\n    2 numba.types.slice2_type (<class 'NoneType'>)\r\n    2 numba.types.common.SimpleIteratorType (<class 'NoneType'>)\r\n    2 numba.types.EphemeralPointer (<class 'NoneType'>)\r\n    2 numba.core.imputils.impl_ret_new_ref (<class 'NoneType'>)\r\n    2 numba.core.imputils.RefType.BORROWED (<class 'NoneType'>)\r\n    2 numba.core.cgutils.increment_index (<class 'NoneType'>)\r\n    2 numba.core.typing.templates.Signature (<class 'NoneType'>)\r\n    2 numba.types.Literal (<class 'NoneType'>)\r\n    2 numba.types.BoundFunction (<class 'NoneType'>)\r\n    2 numba.types.boolean (<class 'NoneType'>)\r\n    2 numba.types.int8 (<class 'NoneType'>)\r\n    2 numba.types.int16 (<class 'NoneType'>)\r\n    2 numba.types.int32 (<class 'NoneType'>)\r\n    2 numba.types.int64 (<class 'NoneType'>)\r\n    2 numba.types.uint8 (<class 'NoneType'>)\r\n    2 numba.types.uint16 (<class 'NoneType'>)\r\n    2 numba.types.uint32 (<class 'NoneType'>)\r\n    2 numba.types.uint64 (<class 'NoneType'>)\r\n    2 numba.types.float32 (<class 'NoneType'>)\r\n    2 numba.types.complex64 (<class 'NoneType'>)\r\n    2 numba.types.complex128 (<class 'NoneType'>)\r\n    1 numba.intp.bitwidth (<class 'int'>)\r\n    1 numba.core.imputils.RefType.BORROWED (<enum 'RefType'>)\r\n\r\n```",
  "created_at":"2022-09-07T09:59:40Z",
  "id":1239176616,
  "issue":1658,
  "node_id":"IC_kwDODBCWws5J3FWo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-07T09:59:40Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"@ianna, there may be a use-case for this feature, which bumps it up in priority and would give us an example problem to use as a test: https://numba.discourse.group/t/tuple-of-cupy-arrays-numba-cuda/1589/13",
  "created_at":"2022-10-17T17:42:40Z",
  "id":1281229872,
  "issue":1658,
  "node_id":"IC_kwDODBCWws5MXgQw",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-17T17:42:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've taken the liberty of removing manylinux1 support at the same time, as [we only need it for 3.6 as far as I can tell](https://labs.quansight.org/blog/2020/11/manylinux1-is-obsolete-manylinux2010-is-almost-eol-what-is-next). However, I noticed that our CI was building manylinux1 wheels for 3.6, 3.7, and 3.8. Do you know why that is? It makes me hesitant to remove it. ",
  "created_at":"2022-09-01T16:21:25Z",
  "id":1234504629,
  "issue":1661,
  "node_id":"IC_kwDODBCWws5JlQu1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-01T16:21:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1661?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1661](https://codecov.io/gh/scikit-hep/awkward/pull/1661?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (df5a48e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.06%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head df5a48e differs from pull request most recent head fc9ca84. Consider uploading reports for the commit fc9ca84 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1661?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1661/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1661/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.68% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json.py](https://codecov.io/gh/scikit-hep/awkward/pull/1661/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uLnB5) | `91.77% <0.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1661/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `79.53% <0.00%> (+0.14%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1661/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `83.43% <0.00%> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1661/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `77.42% <0.00%> (+1.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1661/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `80.00% <0.00%> (+2.46%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-09-01T16:53:13Z",
  "id":1234538592,
  "issue":1661,
  "node_id":"IC_kwDODBCWws5JlZBg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-03T18:19:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski I've taken the liberty of removing manylinux1 support at the same time, as [we only need it for 3.6 as far as I can tell](https://labs.quansight.org/blog/2020/11/manylinux1-is-obsolete-manylinux2010-is-almost-eol-what-is-next). However, I noticed that our CI was building manylinux1 wheels for 3.6, 3.7, and 3.8. Do you know why that is? It makes me hesitant to remove it.\r\n\r\nWe should probably get a sign-off from @henryiii before merging this (between 1.9.0 and 1.10.0, following https://github.com/scikit-hep/awkward/issues/1626#issuecomment-1227458731). The time it takes to release 1.9.0rc13 and 1.9.0 (two releases == 2 days) might correspond to the time when he's back and ready to review things.",
  "created_at":"2022-09-01T19:07:10Z",
  "id":1234674406,
  "issue":1661,
  "node_id":"IC_kwDODBCWws5Jl6Lm",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-01T19:07:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I want to (at some point) rename the CI workflows (both filename and display names):\r\n- `test-wheel-construction.yml` (`Wheels`)\r\n- `test-compilation.yml` (`Build`)\r\n- `deploy-wheels` (`Deploy`)\r\n\r\nMaybe we want to move the linting into a new workflow?\r\n- `test-linters.yml` (`Lint`)\r\n\r\nE.g.\r\n![image](https://user-images.githubusercontent.com/1248413/188139004-c2e5a6b5-79a0-4c2f-a635-f36e93bcd22c.png)\r\n\r\n\r\nIs this PR as good a time as any to do this?\r\nIn any case, we already need to fiddle with the required CI checks due to this PR (incidentally, I think my changes to the CI need to be further considered - the non-3.6 Linux jobs no longer match those in the expected checks)",
  "created_at":"2022-09-02T12:02:00Z",
  "id":1235417171,
  "issue":1661,
  "node_id":"IC_kwDODBCWws5JovhT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-02T12:03:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, this is as good a time as any. By doing it before the git split (`main` and `main-v1`), the names of these tests can be the same in both branches without having to manually make both branches agree.",
  "created_at":"2022-09-02T16:10:27Z",
  "id":1235678679,
  "issue":1661,
  "node_id":"IC_kwDODBCWws5JpvXX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-02T16:10:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"It reminds me that I'll have to make two branch protection rules. (I've already done that for Uproot; just forgot about it.) In principle, the test names can differ because the two branches can have different rules, but it will be a lot easier to keep track of if they're not different. (Otherwise, we'd be saying, \"main test X corresponds to main-v1 test Y...\")",
  "created_at":"2022-09-02T16:13:03Z",
  "id":1235681077,
  "issue":1661,
  "node_id":"IC_kwDODBCWws5Jpv81",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-02T16:13:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"There are a very small number of users on 3.7 & 3.8 that might have a default pip that can only access manylinux1. They would already be likely to be having some issues, and more in the future. They are also using a version of pip that does not officially support Python 3.7 and 3.8 (it predated those versions) but is forced onto those Pythons (and possibly patched) by linux distro managers.\r\n\r\nWe should also be bumping pyupgrade to 3.7+, and enabling `from __future__ import annotations` injection by isort. Static typing is much easer in Python 3.7! (wink, wink)",
  "created_at":"2022-09-03T03:07:52Z",
  "id":1236034805,
  "issue":1661,
  "node_id":"IC_kwDODBCWws5JrGT1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-03T03:07:52Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm going to make a 1.10.0rc1 out of this. The only changes I made were to CONTRIBUTING.md, so I'm not going to wait for the tests to finish.\r\n\r\nIf we need to make any more fixes, it will be 1.10.0rc2.\r\n\r\nThanks!!!",
  "created_at":"2022-09-03T18:21:52Z",
  "id":1236177136,
  "issue":1661,
  "node_id":"IC_kwDODBCWws5JrpDw",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-03T18:21:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is a subtle mutability problem. Arrays _are_ mutable, but their layouts are not.\r\n\r\nWhen you assign `array['field']`, only the top-level `ak.Array` is actually modified, by replacing its inner `layout` with another one.\r\n```python\r\nx = ak.Array(\r\n        [\r\n            {\r\n                \"a\": {\r\n                    \"a2\": [1, 2, 3],\r\n                },\r\n                \"b\": [2, 3, 4],\r\n            }\r\n        ]\r\n    )\r\n# Perform shallow copy\r\ny = ak.Array(x) \r\nassert x.layout is y.layout\r\n\r\n\r\n# Update array with new layout through `__setitem__`\r\nx['b'] = [[5,1,2]]\r\nassert x.layout is not y.layout\r\n\r\nprint(x.b, y.b)\r\n```\r\n\r\nWhen you perform `x['a']['a2']`, you're actually evaluating two separate array slices:\r\n1. `tmp = x['a']`\r\n2. `tmp['a2']`\r\n\r\nSo, in an assignment, only the temporary array is modified (and then discarded). You can use `x['a', 'a2'] = ...` to replace the layout in the top-level Array (as you're slicing only a single array).",
  "created_at":"2022-09-02T11:15:00Z",
  "id":1235374028,
  "issue":1662,
  "node_id":"IC_kwDODBCWws5Jok_M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-02T11:16:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"I see, thanks! ",
  "created_at":"2022-09-02T11:18:33Z",
  "id":1235376904,
  "issue":1662,
  "node_id":"IC_kwDODBCWws5JolsI",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-09-02T11:18:33Z",
  "user":"MDQ6VXNlcjcwNTE0Nzk="
 },
 {
  "author_association":"MEMBER",
  "body":"It is subtle, and I wish this misleading case didn't exist, but it follows as an unintended consequence from `__getitem__` and the way Python syntax works (can't pass variables as with `&` in C).",
  "created_at":"2022-09-02T16:07:05Z",
  "id":1235674687,
  "issue":1662,
  "node_id":"IC_kwDODBCWws5JpuY_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-02T16:07:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I did think about suggesting we prevent `__setitem__` altogether in favour of `ak.with_field` but I think that might be fairly impossible in the near term.",
  "created_at":"2022-09-02T16:13:43Z",
  "id":1235681663,
  "issue":1662,
  "node_id":"IC_kwDODBCWws5JpwF_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-02T16:13:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1665?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1665](https://codecov.io/gh/scikit-hep/awkward/pull/1665?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7627c93) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 7627c93 differs from pull request most recent head c632c35. Consider uploading reports for the commit c632c35 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1665?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_with\\_name.py](https://codecov.io/gh/scikit-hep/awkward/pull/1665/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX25hbWUucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1665/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1665/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `83.33% <0.00%> (+0.15%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-09-05T08:13:50Z",
  "id":1236678193,
  "issue":1665,
  "node_id":"IC_kwDODBCWws5JtjYx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T06:43:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ping @jpivarski, this is a small PR and wonder if it escaped your notice!",
  "created_at":"2022-09-29T06:43:50Z",
  "id":1261837707,
  "issue":1665,
  "node_id":"IC_kwDODBCWws5LNh2L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T06:43:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, although not in the type hint. I was going to leave that, as we'll slowly remove the type information from the docstring itself as we move towards type hints.",
  "created_at":"2022-09-29T12:18:59Z",
  "id":1262196578,
  "issue":1665,
  "node_id":"IC_kwDODBCWws5LO5di",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T12:18:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"`partially initialized module 'awkward' has no attribute 'nplike'` Does anyone know off the top of their head what ordering is required to fix that? I can add a rule. (Imports should not be order dependent ideally. This might even mean there's a side effect when importing which would break if PEP 690 is accepted & used).",
  "created_at":"2022-09-05T13:58:48Z",
  "id":1237079337,
  "issue":1666,
  "node_id":"IC_kwDODBCWws5JvFUp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T14:00:19Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Currently I think our imports are somewhat order-dependent. The `awkward.nplike` module would need to go at the top (it's fairly independent, and any uses of `ak` inside the module body occur within function definitions. However, moving `import awkward.nplike` to the top of the module body raises new order-specific exceptions.",
  "created_at":"2022-09-05T14:32:32Z",
  "id":1237130496,
  "issue":1666,
  "node_id":"IC_kwDODBCWws5JvR0A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T14:32:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The imports in `awkward/_v2/__init__.py` (and v1) are order-dependent: some class definitions use others (either by inheritance or by accessing constants), and the `__init__.py` file makes a set of them available at module-level (so `ak.Array` instead of `ak.highlevel.Array`) by importing them. It should be possible to sort any file in the codebase _except_ `awkward/__init__.py` and `awkward/_v2/__init__.py`.",
  "created_at":"2022-09-05T16:38:21Z",
  "id":1237290414,
  "issue":1666,
  "node_id":"IC_kwDODBCWws5Jv42u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T16:38:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1666?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1666](https://codecov.io/gh/scikit-hep/awkward/pull/1666?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e6780ec) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1666?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1666/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-06T04:51:36Z",
  "id":1237656683,
  "issue":1666,
  "node_id":"IC_kwDODBCWws5JxSRr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T20:48:58Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"As we discussed today, this will go after the 1.10.0 release and before the git-split.",
  "created_at":"2022-09-08T17:06:20Z",
  "id":1240986418,
  "issue":1666,
  "node_id":"IC_kwDODBCWws5J9_My",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T17:06:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"It looks like all of these changes are generated by this one change to .pre-commit-config.yaml:\r\n\r\n```diff\r\n@@ -19,6 +19,12 @@ repos:\r\n  - id: requirements-txt-fixer\r\n  - id: trailing-whitespace\r\n\r\n- repo: https://github.com/PyCQA/isort\r\n  rev: \"5.10.1\"\r\n  hooks:\r\n    - id: isort\r\n      exclude: ^src/(awkward|awkward/_v2)/__init__\\.py$\r\n\r\n- repo: https://github.com/asottile/setup-cfg-fmt\r\n  rev: v2.0.0\r\n  hooks:\r\n```\r\n\r\nConsidering that PR #1690 (dropping v1) is at an advanced stage, let's close this PR and reapply the above to `main` and `main-v1` after #1690 has been merged into `main`.",
  "created_at":"2022-09-23T00:15:17Z",
  "id":1255677851,
  "issue":1666,
  "node_id":"IC_kwDODBCWws5K2B-b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T00:15:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski could I get your sign-off that we can merge this now that I've rebased it?",
  "created_at":"2022-09-24T13:11:45Z",
  "id":1256965564,
  "issue":1666,
  "node_id":"IC_kwDODBCWws5K68W8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T13:11:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It's the same error in Codecov as before:\r\n\r\n```\r\n##[debug]Evaluating condition for step: 'Codecov'\r\n##[debug]Evaluating: (success() && (matrix.python-version == '3.9'))\r\n##[debug]Evaluating And:\r\n##[debug]..Evaluating success:\r\n##[debug]..=> true\r\n##[debug]..Evaluating Equal:\r\n##[debug]....Evaluating Index:\r\n##[debug]......Evaluating matrix:\r\n##[debug]......=> Object\r\n##[debug]......Evaluating String:\r\n##[debug]......=> 'python-version'\r\n##[debug]....=> '3.9'\r\n##[debug]....Evaluating String:\r\n##[debug]....=> '3.9'\r\n##[debug]..=> true\r\n##[debug]=> true\r\n##[debug]Expanded: (true && ('3.9' == '3.9'))\r\n##[debug]Result: true\r\n##[debug]Starting: Codecov\r\n##[debug]Loading inputs\r\n##[debug]Loading env\r\nRun bash <(curl -s https://codecov.io/bash)\r\n  bash <(curl -s https://codecov.io/bash)\r\n  shell: /usr/bin/bash -e {0}\r\n  env:\r\n    PIP_ONLY_BINARY: cmake\r\n    NUMPY_VERSION: \r\n    pythonLocation: /opt/hostedtoolcache/Python/3.9.13/x64\r\n    PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.9.13/x64/lib/pkgconfig\r\n    Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.9.13/x64\r\n    Python[2](https://github.com/scikit-hep/awkward/actions/runs/3118432456/jobs/5057848983#step:15:2)_ROOT_DIR: /opt/hostedtoolcache/Python/[3](https://github.com/scikit-hep/awkward/actions/runs/3118432456/jobs/5057848983#step:15:3).9.13/x6[4](https://github.com/scikit-hep/awkward/actions/runs/3118432456/jobs/5057848983#step:15:4)\r\n    Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.9.13/x64\r\n    LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.9.13/x64/lib\r\n##[debug]/usr/bin/bash -e /home/runner/work/_temp/d383494f-d68c-4116-96fd-a0760d6[5](https://github.com/scikit-hep/awkward/actions/runs/3118432456/jobs/5057848983#step:15:5)5e[6](https://github.com/scikit-hep/awkward/actions/runs/3118432456/jobs/5057848983#step:15:6)[7](https://github.com/scikit-hep/awkward/actions/runs/3118432456/jobs/5057848983#step:15:7).sh\r\n/dev/fd/63: line 1: no: command not found\r\nError: Process completed with exit code [12](https://github.com/scikit-hep/awkward/actions/runs/3118432456/jobs/5057848983#step:15:12)7.\r\n##[debug]Finishing: Codecov\r\n```\r\n\r\nOn the other one, #1715, restarting the one job didn't fix it (not intermittent).",
  "created_at":"2022-09-24T20:06:52Z",
  "id":1257056472,
  "issue":1666,
  "node_id":"IC_kwDODBCWws5K7SjY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T20:06:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"FWIW, these were missed due to https://github.com/scikit-hep/awkward/blob/1bcfd70629aec4c1ef26bbf929d9183c28dbe491/.pre-commit-config.yaml#L5 - docs and these other folders are ignored by pre-commit. Why is docs* ignored???",
  "created_at":"2022-09-05T15:41:43Z",
  "id":1237226676,
  "issue":1667,
  "node_id":"IC_kwDODBCWws5JvpS0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T15:41:43Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"@henryiii I see. Didn't realize this repo was using pre-commit with codespell task. Closing this PR. Sorry about that.",
  "created_at":"2022-09-05T15:59:24Z",
  "id":1237248724,
  "issue":1667,
  "node_id":"IC_kwDODBCWws5JvurU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T15:59:24Z",
  "user":"MDQ6VXNlcjEzNDUxOA=="
 },
 {
  "author_association":"MEMBER",
  "body":"I think these fixes are fine, I just want to know why they are being skipped via pre-commit. Docs should be checked, at least - maybe they are really changing or going away soon?",
  "created_at":"2022-09-05T16:01:04Z",
  "id":1237250738,
  "issue":1667,
  "node_id":"IC_kwDODBCWws5JvvKy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T16:01:04Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"It could have been that we didn't want to run all the tests (black, flake8) on Python code in the docs directories, such as the Sphinx configuration file. It's also the case, though, that @agoose77 is replacing a lot of that.\r\n\r\nThe spelling corrections are good; we should be sure that they're applied to the new docs.\r\n\r\n(With the exception of \"vertexes\" vs \"vertices\", which is a matter of opinion and I prefer the \"es\" pluralization because it's easier to match with a single \"vertex\". Similarly for \"indexes\" vs \"indices\". But if codespell has the opposite opinion, I'm not going to try to fight it.)",
  "created_at":"2022-09-05T17:41:44Z",
  "id":1237339248,
  "issue":1667,
  "node_id":"IC_kwDODBCWws5JwExw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T17:41:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"@henryiii Should I reopen this and update the pre-commit config?",
  "created_at":"2022-09-06T14:14:31Z",
  "id":1238212246,
  "issue":1667,
  "node_id":"IC_kwDODBCWws5JzZ6W",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T14:14:31Z",
  "user":"MDQ6VXNlcjEzNDUxOA=="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm following what it is you're trying to do from the other thread. But you don't want to use this tool (`ak.transform`) here: the fundamental idea is that it broadcasts the arrays so that element-by-element operations are possible, and you don't want to do an element-by-element operation. You do want to walk down both array trees (`awk_a` and `awk_b`), but it's the fields of the RecordArrays you'll be aligning, i.e. the columns, not the rows.\r\n\r\nMaybe the easier way to do this is to do conventional recursion (as discussed in the other thread, with handlers for every `Content` subclass).",
  "created_at":"2022-09-05T18:27:58Z",
  "id":1237376783,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5JwN8P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T18:27:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ivirshup could you elaborate on what your constraints are here? Do you need the dimensions up to the record content to match? (i.e. can you have `var * {'x': ...}` and `var * var * {'x': ...}`?) If not, you can just take the intersection of all of their fields with `set.intersection(*[set(array.fields) for array in (awk_a, awk_b, ...)])`",
  "created_at":"2022-09-05T18:53:54Z",
  "id":1237390837,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5JwRX1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T18:53:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"@jpivarski \r\n\r\nI'm not so sure it's different. If I can broadcast when the second dimension has a variable length, why should the first dimension have to have the same length?\r\n\r\nThis raised another question for me. I could wrap each array in an outer array of length one containing a variable length array. But this throws an error about not being able to handle nested lists. In some cases this could probably be flattened, then unflattened, but I'm not sure I understand why only one variable length dimension would be allowed.\r\n\r\nMore practically, I do want to be recursing across multiple arrays, but I don't think we had an example of this in a previous discussion. I do want the logic that says recursing into a Record and entries of a list are different and should be an error, but don't necessarily want to broadcast the values.\r\n\r\n-------\r\n\r\n@agoose77, I would like the dimensions to be matched up, which is why I've been thinking of it in terms of the transformation.\r\n\r\nThis is mainly about the discussion:\r\n\r\n* https://github.com/scikit-hep/awkward/discussions/1647",
  "created_at":"2022-09-05T19:08:49Z",
  "id":1237398828,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5JwTUs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T19:08:49Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"In this case, it's complaining because the outer length is different, but it would complain at every level about every list in `awk_a` that does not match the length of the corresponding list in `awk_b`. That synchronization of list lengths is intrinsic to what `ak.transform` does, having an option that opts out of it would be like a new function.\r\n\r\nWe haven't had a need to do this type of recursion yet, so it's too early to try to make it into a generalized function, similar to (or accessed through an option within) `ak.transform`. That came from generalizing several similar use-cases, and this new one of not broadcasting is the only of its kind. We should start by writing a recursive function that does just this one thing. Then if we see similar cases, see what's similar about them and abstract from there.",
  "created_at":"2022-09-05T19:22:03Z",
  "id":1237405862,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5JwVCm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T19:22:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ivirshup so, same dimensions, but we don't care about the sizes of those dimensions? This sounds like a custom recursion, as Jim suggests :)",
  "created_at":"2022-09-05T20:13:34Z",
  "id":1237432355,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5Jwbgj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T20:13:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"For this case, I think I just don't care about the size of the first dimension. I would care about the sizes of all the following dimensions.\r\n\r\nSimilarly, if I wanted to concatenate some awkward arrays which had a regular second dimension along that dimension, I wouldn't care what the shape of the second dimension was for those arrays. I would care that all the other dimensions matched though.\r\n\r\nI'm not very into the idea of implementing this myself and outside awkward array since I suspect there are edge cases I'm not expecting (like #1672).",
  "created_at":"2022-09-05T20:36:10Z",
  "id":1237444915,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5Jwekz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T20:36:10Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK. It sounds like you're trying to predict the outcome of `ak.concatenate` before applying it? I think Jim's suggestion that we fix these bugs so that you don't have to deal with them is the best bet. I'm sure that we can make a pre-release once these fixes are in to enable you to keep moving forward.",
  "created_at":"2022-09-05T21:16:09Z",
  "id":1237461428,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5Jwim0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T21:16:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I'm not very into the idea of implementing this myself\r\n\r\nI wasn't suggesting that; I think we'll be able to help you with this function (if it's needed).\r\n\r\n> Similarly, if I wanted to concatenate some awkward arrays which had a regular second dimension along that dimension, I wouldn't care what the shape of the second dimension was for those arrays. I would care that all the other dimensions matched though.\r\n\r\nBroadcasting will complain if variable-length lists are not all equal to each other. If I'm understanding the purpose of this function (to avoid unions when concatenating), you might want the regular dimensions to match, but not every list of the irregular dimensions. In fact, if the first dimension (length) doesn't match, it's not even possible to compare all the lengths of lists in two arrays (`ak.num(a) == ak.num(b)` is not possible to check if `len(a) != len(b)`).\r\n\r\n------------\r\n\r\nThinking back to the larger problem of wanting to give all records the same set of fields so that they concatenate without unions, what about a procedure like the following?\r\n\r\n   1. Get the full set of fields with `set(ak.fields(a) + ak.fields(b) + ...)`.\r\n   2. Recurse over each array, `a`, `b`, ..., _independently_ and ensure that each one has the full set of fields.\r\n   3. To add a field to a `RecordArray`, associate the field name with a new `IndexedOptionArray` of `EmptyArray` (i.e. type is `optional[unknown]`). The `index` of the `IndexedOptionArray` has the same length as the `RecordArray` and is filled with `-1` (i.e. all values are `None`).\r\n\r\nStep 2 can be done with `ak.transform`, with only one array as the argument. It can ignore all types except for `RecordArray`. Upon finding a `RecordArray`, it can return a new `RecordArray` with missing fields added as `None` (step 3).\r\n\r\nStep 1 is only searching down to the first level of records\u2014if there are records inside of records, then this whole procedure has to recurse (calling `ak.transform` from within the transformation function). That complicates things, but it doesn't require more knowledge of Awkward corner-cases: even the nested procedure only needs to recognize `RecordArray`.",
  "created_at":"2022-09-05T21:16:52Z",
  "id":1237461844,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5JwitU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T21:16:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"> Broadcasting will complain if variable-length\r\n\r\nThis is starting to make sense to me. I thing what I was going for was really broadcasting the types of the dimensions, not the values. However, I'm still a little unsure which \"kind of types\" I would want to be looking at.\r\n\r\n> Thinking back to the larger problem of wanting to give all records the same set of fields so that they concatenate without unions\r\n\r\nI am aiming to be able to do both the intersection and union of fields. But intersection is generally easier. \r\n\r\n> what about a procedure like the following?\r\n\r\nI'm not sure this would work since dimension matching isn't being accounted for. For instance, this procedure could take `n * var * {a: int64}` and `m * var * var * {a: int64, b: string}` and give `n * var * {a: int64, b: ?string}`, `m * var * var * {a: int64, b: ?string}`. But concatenating these arrays would still form a union because the mismatched var dimensions.\r\n\r\nAlso, I think these functions should satisfy the record handling, just not the dimension handling. Would be called like `ak.concatenate(union_arrays(arrays))`\r\n\r\n```python\r\ndef union_records(arrays):\r\n    fields = reduce(or_, (set(a.fields) for a in arrays))\r\n    out_arrays = []\r\n    for a in arrays:\r\n        for field in fields.difference(a.fields):\r\n            a = ak.with_field(a, None, field)\r\n        out_arrays.append(a)\r\n    return out_arrays\r\n\r\ndef intersect_records(arrays):\r\n    fields = list(reduce(and_, (set(a.fields) for a in arrays)))\r\n    return [a[fields] for a in arrays]\r\n```",
  "created_at":"2022-09-06T10:11:47Z",
  "id":1237947580,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5JyZS8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T13:34:11Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"This is what I meant by the procedure. The key thing is that we're applying the transformation to each array at a time. They're not getting broadcasted, but they're getting information about all the arrays because we pass it into the transformation function.\r\n\r\nHere's an `a` and `b` that would concatenate to union type.\r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> a = ak.Array([{\"a\": 1}, {\"a\": 2}])\r\n>>> b = ak.Array([{\"b\": 1.1}, {\"b\": 2.2}])\r\n```\r\n\r\nFor the sake of argument, I'm going to take a union of their fields (the final concatenation will be an outer join).\r\n\r\n```python\r\n>>> fields = ak.fields(a) + ak.fields(b)\r\n>>> fields\r\n['a', 'b']\r\n```\r\n\r\nHere's a transformation function that adds an empty content (all `None`) for each field name that's not already in the RecordArray. It is only applied to one array, but information about the other arrays comes in through the `fields` variable (closed-over in this function, but it could be passed in as a context).\r\n\r\n```python\r\ndef add_fields(layout, **kwargs):\r\n    if layout.is_RecordType:\r\n        asdict = dict(zip(layout.fields, layout.contents))\r\n        for field in fields:\r\n            if field not in asdict:\r\n                asdict[field] = ak.contents.IndexedOptionArray(\r\n                    ak.index.Index64(np.full(len(layout), -1, np.int64)), ak.contents.EmptyArray()\r\n                )\r\n        return ak.contents.RecordArray(asdict.values(), asdict.keys(), length=len(layout))\r\n```\r\n\r\nNow we apply it individually to both arrays and after concatenation, we get option-type fields for the ones that aren't in all inputs (because `X` type-unified with `option[unknown]` is `option[X]`), but not a union of records.\r\n\r\n```python\r\n>>> a2 = ak.transform(add_fields, a)\r\n>>> b2 = ak.transform(add_fields, b)\r\n>>> a2\r\n<Array [{a: 1, b: None}, {a: 2, ...}] type='2 * {a: int64, b: ?unknown}'>\r\n>>> b2\r\n<Array [{b: 1.1, a: None}, {b: 2.2, ...}] type='2 * {b: float64, a: ?unknown}'>\r\n>>> ak.concatenate([a2, b2]).show(type=True)\r\ntype: 4 * {\r\n    a: ?int64,\r\n    b: ?float64\r\n}\r\n[{a: 1, b: None},\r\n {a: 2, b: None},\r\n {a: None, b: 1.1},\r\n {a: None, b: 2.2}]\r\n```\r\n\r\nThis transformation goes down through all layers, even if there are multiple nested lists and option-types, until it finds a RecordArray. It does not continue through that RecordArray to any RecordArrays hidden within it. That's because the transformation function returns an array-type at the level of the RecordArray. (Returning an array-type from a transoformation function is how you say, \"stop descending through the tree and use this as output.\")\r\n\r\n```python\r\n>>> c = ak.Array([[[None, {\"a\": 1}]]])\r\n>>> c2 = ak.transform(add_fields, c)\r\n>>> c2.show(type=True)\r\ntype: 1 * var * var * ?{\r\n    a: int64,\r\n    b: ?unknown\r\n}\r\n[[[None, {a: 1, b: None}]]]\r\n```\r\n\r\nSo that's why this gets more complicated if you want to continue the procedure into nested records, because you'd have to prepare `fields` at each level before processing each array, and then launch a deeper `ak.transform` inside the transformation function. It's do-able; we have some functions like that. I just don't know how deeply you want/need this to go.",
  "created_at":"2022-09-06T17:39:01Z",
  "id":1238463704,
  "issue":1668,
  "node_id":"IC_kwDODBCWws5J0XTY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T17:45:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this is caused by the check to `_parameters_equal`, which fails whenever a string is encountered:\r\n```python\r\nimport awkward._v2 as ak\r\n\r\nawk_c = ak.Array([\r\n    {\"a\": 1, \"b\": \"foo\"},\r\n    {\"a\": 2, \"b\": \"bar\"},\r\n    {\"a\": 3, \"b\": \"baz\"}\r\n])\r\n\r\nawk_d = ak.Array([\r\n    {\"a\": 4},\r\n    {\"a\": 5},\r\n    {\"a\": 6},\r\n])\r\n\r\nak.concatenate([awk_c, ak.with_field(awk_d, None, \"b\")]).type.show()\r\n```",
  "created_at":"2022-09-05T19:16:45Z",
  "id":1237403094,
  "issue":1669,
  "node_id":"IC_kwDODBCWws5JwUXW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T19:16:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That makes sense. (So it doesn't happen if you have raw lists, rather than strings?) Differing parameters means that the types can't be unified: `T1 | T2 != T1` or `T2`, but the \"unknown type is the identity of `|`\" should be a rule that overrides all: `T1 | U = T1` and `U | T1 = T1`.\r\n\r\nIf (for some weird reason), the unknown type has any parameters, I think they should still be merged, but the known type's parameters should take precedence.\r\n\r\n------\r\n\r\nBy the way, I completely made up this `|` operator to mean \"unify types.\" Some examples: `int | float = float`, `list(int) | list(float) = list(float)`, `int | string = int | string` (i.e. it can't be simplified).",
  "created_at":"2022-09-05T19:28:14Z",
  "id":1237409353,
  "issue":1669,
  "node_id":"IC_kwDODBCWws5JwV5J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T19:28:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, I think this is a good rule:\r\n- EmptyArray behaves as the identity:\r\n   - Parameters do not need to be equal, and non-`EmptyArray` type takes precedence",
  "created_at":"2022-09-05T19:48:07Z",
  "id":1237419869,
  "issue":1669,
  "node_id":"IC_kwDODBCWws5JwYdd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T19:48:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski along the way I noticed an apparent bug in `Form._parameters_equal`. Could you clarify what should happen in `ArrayType.__eq__` for parameters? How about the other reserved parameter names like `__array__` and `__record__`? My assumption is (based on v1)\r\n- `__array__` - important to `__eq__`\r\n- `__record__` - important to `__eq__`\r\n- other - not important to `__eq__`\r\n\r\nAdditionally, I found that in v1 we check only the `__array__` and `__record__` parameters for contents within `mergeable`, but this is not the case for v2. Could you confirm that we should only be checking this restricted subset in v2 also?",
  "created_at":"2022-09-05T20:05:23Z",
  "id":1237427932,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5Jwabc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T20:12:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1671?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1671](https://codecov.io/gh/scikit-hep/awkward/pull/1671?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0163b30) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.08%`.\n> The diff coverage is `88.25%`.\n\n> :exclamation: Current head 0163b30 differs from pull request most recent head 4799cd9. Consider uploading reports for the commit 4799cd9 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1671?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.68% <33.33%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `82.24% <62.22%> (-8.51%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `76.47% <75.00%> (+1.08%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3VuaW9uZm9ybS5weQ==) | `73.75% <75.00%> (+0.57%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_categories.py](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY2F0ZWdvcmllcy5weQ==) | `88.88% <88.88%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_to\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fY2F0ZWdvcmljYWwucHk=) | `90.90% <90.90%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `77.55% <92.00%> (+1.25%)` | :arrow_up: |\n| ... and [40 more](https://codecov.io/gh/scikit-hep/awkward/pull/1671/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-05T20:16:22Z",
  "id":1237434029,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5Jwb6t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T23:14:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I think you want to use `only_array_record=True` in `Content.mergeable`, but not in `Form.__eq__`. To say that two Forms are unequal is to say that the array metadata differs in some not-necessarily-visible way, so even if a parameter has no consequence, a differing value should mean the Forms are different.\r\n\r\nBut you're absolutely right about `only_array_record=True` in `Content.mergeable`; [it is what v1 did](https://github.com/scikit-hep/awkward/blob/1bcfd70629aec4c1ef26bbf929d9183c28dbe491/src/libawkward/util.cpp#L630-L670). And that was on purpose, so concatenating an array with a `__doc__` and another without that parameter wouldn't become a union.\r\n\r\nYou're right about there being a bug in `ArrayType.__eq__`, but it should be\r\n\r\n```python\r\n    def __eq__(self, other):\r\n        if isinstance(other, ArrayType):\r\n            return (\r\n                self._length == other._length\r\n                and self._content == other._content\r\n            )\r\n        else:\r\n            return False\r\n```\r\n\r\nThe `ArrayType` is not a subclass of `Type`; it doesn't have `parameters`. But it should start a recursion into checking the equality of `content`.",
  "created_at":"2022-09-05T20:53:56Z",
  "id":1237451943,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5JwgSn",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-05T20:53:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I think you want to use only_array_record=True in Content.mergeable, but not in Form.__eq__. To say that two Forms are unequal is to say that the array metadata differs in some not-necessarily-visible way, so even if a parameter has no consequence, a differing value should mean the Forms are different.\r\n\r\nAh, no - I meant that the implementation for `_parameters_equal` seemed to have a backwards case at the end of the function. This was separate to the ArrayType handling, but I must have deleted part of the comment that elucidated this!\r\n\r\n\r\nOtherwise, yes; if I zoom out and look at the bigger picture, there are some additional bugs to fix!",
  "created_at":"2022-09-05T21:11:47Z",
  "id":1237459065,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5JwiB5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T21:13:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Ah, no - I meant that the implementation for `_parameters_equal` seemed to have a backwards case at the end of the function. This was separate to the ArrayType handling, but I must have deleted part of the comment that elucidated this!\r\n\r\nYou're right: this is backward and should be fixed.\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/1bcfd70629aec4c1ef26bbf929d9183c28dbe491/src/awkward/_v2/forms/form.py#L199-L202",
  "created_at":"2022-09-05T21:29:06Z",
  "id":1237468893,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5Jwkbd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T21:50:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"On the subject of type equality and strings, is the type of an array of categorical strings equal to the type of an array of strings? They're supposed to be distinct.\r\n\r\nIn Forms, the categorical strings would have `__array__ = \"categorical\"` on the IndexedArray. However, IndexForm nodes have no equivalent in Types, so the `__array__ = \"categorical\"` gets turned into `__categorical__ = True` on the next level down (the Type of the strings themselves). In the _spirit_ of this \"only check `__array__` and `__record__`\" logic, we should identify categorical strings and strings as distinct types. However, because the indicator is not one of `__array__` and `__record__`, I think this PR would make them say they're equal types.",
  "created_at":"2022-09-05T21:45:23Z",
  "id":1237477679,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5Jwmkv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T21:45:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> On the subject of type equality and strings, is the type of an array of categorical strings equal to the type of an array of strings? They're supposed to be distinct.\r\n\r\n~~Not any more (this PR fixes the type equality checks).~~\r\n\r\nActually, our current v2 did this correctly too, because type-strings still contain sufficient information. Only v1 didn't do this properly.",
  "created_at":"2022-09-06T09:35:45Z",
  "id":1237908152,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5JyPq4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T09:42:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've introduced a new policy for merging `IndexedOptionArray` over `EmtpyArray`. This is what the new `is_identity_like` flag is for in the Form system. In this PR so far, if `is_identity_like` is True, then we don't require parameters to match, and just merge the layouts. \r\n\r\nThis seems restricted enough that it might be an OK exception to the rule that parameters need to match in order to be mergeable. Are you happy with this @jpivarski? This behaviour is fundamentally what's going wrong in #1669, so the answer here has a direct bearing on what we do there. The material consequences of this policy would be that user-defined arrays with `IndexedOptionArray` over `EmptyArray` would not be considered distinct types (unmergeable) from other arrays with specified behaviors (e.g. `__array__)`.\r\n\r\nPerhaps `is_identity_like` should be restricted, and require that neither the option-type nor the `EmptyArray` have parameters. This would constrain the behaviour of `EmptyArray` in comparison to v1, which doesn't care whether the `EmptyArray` has parameters.",
  "created_at":"2022-09-06T09:54:21Z",
  "id":1237928957,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5JyUv9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T09:54:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR breaks a few tests because previously our type handling wasn't correct. In 1bcfd70 the following code produces a union:\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\n\r\na1 = ak._v2.Array(np.array([[0.0, 1.1], [2.2, 3.3]]))\r\na2 = ak._v2.from_json(\"[[4.4, 5.5], [6.6, 7.7], [8.8, 9.9]]\")\r\nassert isinstance(a1.layout, ak._v2.contents.NumpyArray)\r\na2 = ak._v2.to_regular(a2, axis=1)\r\n\r\nc = ak._v2.concatenate([a1, a2])\r\nc.type.show()\r\n```\r\n\r\nand the same happens in this PR. However, in 1bcfd70 the `ArrayType.__eq__` returned True for this type against a non-union, which is not correct.\r\n\r\nUltimately this is #1647",
  "created_at":"2022-09-06T09:59:39Z",
  "id":1237934521,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5JyWG5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T10:40:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've added a fix for #1646 by adding logic for >1D `NumpyArray` to promote themselves to `RegularArray`, and the same in reverse (for `NumpyArray` arguments). I'm not sure if this is a brilliant way to solve this, so I'd appreciate any feedback.",
  "created_at":"2022-09-06T12:22:01Z",
  "id":1238074875,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5Jy4X7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T12:22:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've confirmed that the typestrings were broken in main, and this PR fixes it.\r\n\r\nI want to take a moment to shout out to @ioanaif for how much work you've put into the v1-v2 port. I keep digging into v1 code to compare things and I realise just how much work it must have taken! :ninja: ",
  "created_at":"2022-09-06T19:34:31Z",
  "id":1238570911,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5J0xef",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-09-06T19:34:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Looks like our existing type parsing logic is giving the test suite some problems. Let's see if we can fix it.",
  "created_at":"2022-09-06T20:10:24Z",
  "id":1238601869,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5J05CN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T20:10:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually, this test is failing because the test was defined incorrectly, and now the code itself is right. Let me make a \"suggest change\" for it.",
  "created_at":"2022-09-06T20:48:30Z",
  "id":1238633938,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5J1A3S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T20:48:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski good timing! Now I'm stuck. I'm not familiar enough with the type-parser logic to understand what should be happening, in order to fix it.\r\n\r\nThe issue is that this PR makes type equality checking recursive, rather than just checking type strings. I feel that this is a good change, because we had a number of hidden bugs that we didn't catch by checking `.type` (e.g. https://github.com/scikit-hep/awkward/pull/1671#issuecomment-1237934521) \r\n\r\nThe `repr`d type object that I'm currently looking at, from `tests/v2/test_0773-typeparser.py `\r\n```python\r\nArrayType(\r\n    ListType(\r\n        NumpyType(\"uint8\", parameters={\"__array__\": \"char\"}, typestr=\"char\"),\r\n        parameters={\"__categorical__\": True},\r\n        typestr=\"string\",\r\n    ),\r\n    6,\r\n)\r\n```\r\n\r\nThis doesn't survive a round-trip:\r\n```python\r\nArrayType(\r\n    ListType(\r\n        NumpyType(\"uint8\", parameters={\"__array__\": \"char\"}),\r\n        parameters={\"__array__\": \"string\", \"__categorical__\": True},\r\n    ),\r\n    6,\r\n)\r\n```\r\n\r\nThe actual bug right now I think is two-fold:\r\n- the to-type logic replaces `__array__ = \"categorical\"` with `__categorical__ = True` for `IndexedForm`, but we don't do the reverse.\r\n- we don't set `typestr` in the parser\r\n\r\nHowever, I'm not familiar enough with using typestring overloads to understand what we want to happen here. It makes me wonder whether checking the generated typestring _is_ intended, and we need to robust-ify our other tests that were assuming types were more concrete representations of layout than they are.",
  "created_at":"2022-09-06T20:51:22Z",
  "id":1238636299,
  "issue":1671,
  "node_id":"IC_kwDODBCWws5J1BcL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T20:52:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Apparently, the `__array__ = \"string\"` parameter is being lost from the ListType (but not the `__array__ = \"char\"` from the NumpyType).\r\n\r\nThanks!",
  "created_at":"2022-09-05T20:29:25Z",
  "id":1237441381,
  "issue":1672,
  "node_id":"IC_kwDODBCWws5Jwdtl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T20:29:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Something that I have been finding confusing is which of type, form, or layout is equivalent to the data shape string. I think this is quite related, since strings and byte strings are cases where this breaks down.",
  "created_at":"2022-09-05T20:52:26Z",
  "id":1237451489,
  "issue":1672,
  "node_id":"IC_kwDODBCWws5JwgLh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T20:52:26Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think it's probably this region that is producing a list layout without the array parameter:\r\nhttps://github.com/scikit-hep/awkward/blob/1bcfd70629aec4c1ef26bbf929d9183c28dbe491/src/awkward/_v2/_broadcasting.py#L592-L609",
  "created_at":"2022-09-05T21:04:09Z",
  "id":1237455520,
  "issue":1672,
  "node_id":"IC_kwDODBCWws5JwhKg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T21:04:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ivirshup strings in Awkward array are just special views over lists of characters. We have a reasonable amount of special-case logic to detect this, but ultimately there is:\r\n```\r\nlist {__array__: string}\r\n    numpyarray {__array__: char}\r\n        [116 104 105 115 116 104  97 116]\r\n```\r\n\r\nThe `\"string\"` `__array__` parameter means that we have an array of strings, e.g. ['this', 'that']. The `\"char\"` `__array__` parameter  provides a \"character\" view over an array of uint8 (utf8) characters.",
  "created_at":"2022-09-05T21:07:01Z",
  "id":1237456841,
  "issue":1672,
  "node_id":"IC_kwDODBCWws5JwhfJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T21:07:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Something that I have been finding confusing is which of type, form, or layout is equivalent to the data shape string. I think this is quite related, since strings and byte strings are cases where this breaks down.\r\n\r\nThe Datashape string is the `Type`.",
  "created_at":"2022-09-05T21:49:53Z",
  "id":1237481112,
  "issue":1672,
  "node_id":"IC_kwDODBCWws5JwnaY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T21:49:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"> The Datashape string is the Type.\r\n\r\nI find this confusing when both `string` and `var` are `ListType`. The number of entries in the `typestr` field is based on how far I can recurse down `.type`, except for some cases.\r\n\r\n> strings in Awkward array are just special views over lists of characters\r\n\r\nI agree that strings are like variable size lists of characters, but text strings can be pretty special. For instance:\r\n\r\n```python\r\nIn [28]: \"\u600e\u4e48\u6837\u4e86\"[1:]\r\nOut[28]: '\u4e48\u6837\u4e86'\r\n\r\nIn [29]: ak.Array([\"\u600e\u4e48\u6837\u4e86\"])[:, 1:]\r\nOut[29]: <Array ['\\udc80\\udc8e\u4e48\u6837\u4e86'] type='1 * string'>\r\n```",
  "created_at":"2022-09-06T10:06:33Z",
  "id":1237941832,
  "issue":1672,
  "node_id":"IC_kwDODBCWws5JyX5I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T10:06:33Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, strings are special, but they're special in how they're operated upon, not how they're stored or represented in memory. There's a lot of code that would be the same between strings and lists, so strings are implemented as a list with a `parameter` that we can use to override behaviors. (At a very early stage in Awkward's development, they were distinct implementations, but there was a lot of duplication.)\r\n\r\nOne such behavior that has already been overridden is\r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> array = ak.Array([\"one\", \"two\", \"three\", \"two\", \"two\", \"one\"])\r\n>>> array == \"two\"\r\n<Array [False, True, False, True, True, False] type='6 * bool'>\r\n```\r\n\r\nas opposed to\r\n\r\n```python\r\n>>> array2 = ak.without_parameters(ak.Array([\"one\", \"two\", \"two\"]))\r\n>>> array2 == [[ord(x) for x in \"two\"]]\r\n<Array [[False, False, False], ..., [True, ..., True]] type='3 * var * bool'>\r\n```\r\n\r\nand the idea is to keep adding behaviors that recognize the specialness of strings. (The `ak.behavior` mechanism was invented first to implement strings, and then domain-specific objects like https://github.com/scikit-hep/vector.)\r\n\r\n@martindurant is planning on adding a suite of string manipulation functions (I found this mention of it, #1269, though we've been talking about it in a lot of different places).\r\n\r\nAs to whether strings should have codepoint-aware _slicing_ is a significant question. It's what users might assume (and then have to modify what they're doing when they find out that slicing is numbered by bytes, not codepoints). It would be possible to implement through some new behavior mechanism (overloading deep `__getitem__`), though it would be a major project to implement, in part because finding the byte position of a specific codepoint is not random access: something has to scan, and that should be in compiled code. This isn't hampered by the fact that strings are implemented through lists; it's just a hard problem overall. And since it would break backward-compatibility of slicing, it would have to happen at a major version boundary, like Awkward v3.",
  "created_at":"2022-09-06T17:13:25Z",
  "id":1238439931,
  "issue":1672,
  "node_id":"IC_kwDODBCWws5J0Rf7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T17:13:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"> whether strings should have codepoint-aware slicing\r\n\r\nPlease, no! You should have different methods or a whole namespace for string-specific operations. string_len, string_slice or something (ak.str?).\u00a0\r\n\r\nAside: the current hacking implementation for string functions in awkward-pandas does push all the ak.* (array) functions and utf8 and ascii functions into a namespace, but the description of each method and often its name makes it clear what the expected input is. This is just because series.ak.str.string_op seems too long to type.",
  "created_at":"2022-09-06T18:13:15Z",
  "id":1238494382,
  "issue":1672,
  "node_id":"IC_kwDODBCWws5J0eyu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T18:13:15Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"Like all PRs, I'm going to hold off on this until we finish 1.10.0 and then git-split. `main-v1` can stay on the old black.",
  "created_at":"2022-09-05T21:52:22Z",
  "id":1237483143,
  "issue":1673,
  "node_id":"IC_kwDODBCWws5Jwn6H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T21:52:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1673?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1673](https://codecov.io/gh/scikit-hep/awkward/pull/1673?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (db362a7) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.06%`.\n> The diff coverage is `93.75%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1673?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1673/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1673/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.68% <33.33%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1673/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `77.42% <100.00%> (+1.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json.py](https://codecov.io/gh/scikit-hep/awkward/pull/1673/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uLnB5) | `91.77% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1673/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | `80.00% <100.00%> (+2.46%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1673/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RvZmZzZXRhcnJheS5weQ==) | `79.53% <0.00%> (+0.14%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1673/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3JlY29yZGFycmF5LnB5) | `83.43% <0.00%> (+0.21%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-09-05T21:57:17Z",
  "id":1237489367,
  "issue":1673,
  "node_id":"IC_kwDODBCWws5JwpbX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-05T21:57:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1674?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1674](https://codecov.io/gh/scikit-hep/awkward/pull/1674?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cadbb48) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.08%`.\n> The diff coverage is `91.17%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1674?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.68% <33.33%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/operations/ak\\_categories.py](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY2F0ZWdvcmllcy5weQ==) | `88.88% <88.88%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_to\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fY2F0ZWdvcmljYWwucHk=) | `90.90% <90.90%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9jYXRlZ29yaWNhbC5weQ==) | `93.33% <93.33%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2NvbnRlbnQucHk=) | `77.42% <100.00%> (+1.12%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvX19pbml0X18ucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_from\\_json.py](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfZnJvbV9qc29uLnB5) | `91.77% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_is\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfaXNfY2F0ZWdvcmljYWwucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| ... and [4 more](https://codecov.io/gh/scikit-hep/awkward/pull/1674/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-05T22:31:58Z",
  "id":1237505287,
  "issue":1674,
  "node_id":"IC_kwDODBCWws5JwtUH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T07:57:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"All tests passed. The CI doesn't know this, because it's expecting tests with a different name.",
  "created_at":"2022-09-06T10:03:36Z",
  "id":1237938693,
  "issue":1674,
  "node_id":"IC_kwDODBCWws5JyXIF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T10:03:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Per the Slack channel, Jim's signed off on removing this :)",
  "created_at":"2022-09-06T10:02:55Z",
  "id":1237938013,
  "issue":1675,
  "node_id":"IC_kwDODBCWws5JyW9d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T10:02:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1676?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1676](https://codecov.io/gh/scikit-hep/awkward/pull/1676?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f3b3670) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.32%`.\n> The diff coverage is `83.78%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1676?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.68% <33.33%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_v2/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL191dGlsLnB5) | `83.79% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2luZGV4ZWRhcnJheS5weQ==) | `75.58% <54.54%> (+1.33%)` | :arrow_up: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.27% <58.82%> (-0.26%)` | :arrow_down: |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `70.58% <61.53%> (-0.30%)` | :arrow_down: |\n| ... and [57 more](https://codecov.io/gh/scikit-hep/awkward/pull/1676/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-06T10:45:36Z",
  "id":1237982458,
  "issue":1676,
  "node_id":"IC_kwDODBCWws5Jyhz6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-09T07:50:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The `to` \u2192 `to_` is fine, but the `RegularArray` names the type it's converting it into. Wouldn't the function of `to_RegularArray` be clearer than `to_regular_array`?",
  "created_at":"2022-09-06T17:48:10Z",
  "id":1238471767,
  "issue":1676,
  "node_id":"IC_kwDODBCWws5J0ZRX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T17:48:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The `to` \u2192 `to_` is fine, but the `RegularArray` names the type it's converting it into. Wouldn't the function of `to_RegularArray` be clearer than `to_regular_array`?\r\n\r\nPersonally, I don't like mixed cases, which motivated this PR in the first place. I don't find the name unclear, after all we have `to_arrow` instead of `to_Table` (or whichever type we convert to).",
  "created_at":"2022-09-06T19:02:04Z",
  "id":1238539146,
  "issue":1676,
  "node_id":"IC_kwDODBCWws5J0puK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T19:02:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, sure.  `:)`",
  "created_at":"2022-09-06T22:32:22Z",
  "id":1238718126,
  "issue":1676,
  "node_id":"IC_kwDODBCWws5J1Vau",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-06T22:32:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Also, I don't think you got all of the option-type conversion methods:\r\n>\r\n>- `toBitMaskedArray`\r\n> - `toByteMaskedArray`\r\n> - `toIndexedOptionArray`\r\n> Because of these questions, I'm going to hold off on this at least until after 1.10.0rc3.\r\n\r\nAh, that's what I was trying to remember during the meeting. I meant to add these as todo-items following discussion :face_in_clouds: \r\n\r\n",
  "created_at":"2022-09-09T07:18:39Z",
  "id":1241597906,
  "issue":1676,
  "node_id":"IC_kwDODBCWws5KAUfS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-09T07:18:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"No deprecation period is needed before the 2.0.0 release.",
  "created_at":"2022-09-09T13:34:06Z",
  "id":1241982735,
  "issue":1676,
  "node_id":"IC_kwDODBCWws5KBycP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-09T13:34:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Oh, right - we're not guaranteeing that the layout API is even remotely backwards compatible with v1. I keep forgetting this fact, because I think of layouts as public API (albeit a low level one)",
  "created_at":"2022-09-09T13:35:19Z",
  "id":1241983952,
  "issue":1676,
  "node_id":"IC_kwDODBCWws5KByvQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-09T13:35:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's right, the layouts are a low-level, public API, and we've advertised that we will be changing these slightly. Slightly means some methods/properties will have different names, which is what this PR is doing. It's the high-level, public API that's not changing (much? at all?).\r\n\r\nOne of the earlier changes we put into v2 was to change low-level, public API method names so that they would agree with their corresponding high-level, public API names. So this sort of thing is fair game.",
  "created_at":"2022-09-09T13:41:07Z",
  "id":1241990130,
  "issue":1676,
  "node_id":"IC_kwDODBCWws5KB0Py",
  "performed_via_github_app":null,
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "updated_at":"2022-09-09T13:41:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This will need rebasing, so I'll close this for now.",
  "created_at":"2022-09-28T10:55:28Z",
  "id":1260734470,
  "issue":1676,
  "node_id":"IC_kwDODBCWws5LJUgG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T10:55:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1677?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1677](https://codecov.io/gh/scikit-hep/awkward/pull/1677?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c00f636) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/38243b2f75fbf559bf31f97dfaeb02c428645c59?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (38243b2) will **increase** coverage by `0.02%`.\n> The diff coverage is `87.36%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1677?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1677/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1677/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `82.79% <87.09%> (+1.18%)` | :arrow_up: |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1677/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1677/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.46% <0.00%> (-0.20%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1677/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1677/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1677/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1677/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1677/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1677/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-09-06T11:52:30Z",
  "id":1238043374,
  "issue":1677,
  "node_id":"IC_kwDODBCWws5Jywru",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-22T07:33:32Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna I've squashed your commits and rebased them onto main in https://github.com/scikit-hep/awkward/tree/agoose77/rebase-numba-array-builder if you're happy to force push them here. I should have preserved  you as the author of those commits :)",
  "created_at":"2022-09-24T13:30:26Z",
  "id":1256969460,
  "issue":1677,
  "node_id":"IC_kwDODBCWws5K69T0",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-24T13:30:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - do I understand correctly that some jobs get cancelled because the other architectures fail?",
  "created_at":"2022-09-28T16:40:38Z",
  "id":1261171381,
  "issue":1677,
  "node_id":"IC_kwDODBCWws5LK_K1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T16:40:38Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"All \"matrix-jobs\" (e.g. py36, py37, ...) within the same top-level job, (e.g. Linux), will be canceled if a single matrix job fails, yes. :)",
  "created_at":"2022-09-28T17:37:05Z",
  "id":1261240574,
  "issue":1677,
  "node_id":"IC_kwDODBCWws5LLQD-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T17:37:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"If you need to turn off the fail-fast for diagnostic purposes, you can do that by changing the `.github/workflows` YAML in your branch\u2014it will be fail-slow in just your branch. Just don't forget to revert it.",
  "created_at":"2022-09-28T18:44:20Z",
  "id":1261325096,
  "issue":1677,
  "node_id":"IC_kwDODBCWws5LLkso",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-28T18:44:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I added a task to this PR so that we don't forget to restore the CI configuration :)",
  "created_at":"2022-09-29T14:37:42Z",
  "id":1262377959,
  "issue":1677,
  "node_id":"IC_kwDODBCWws5LPlvn",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-29T14:37:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1679?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1679](https://codecov.io/gh/scikit-hep/awkward/pull/1679?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cbf4c35) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.35%`.\n> The diff coverage is `88.58%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1679?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.68% <33.33%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `82.95% <68.51%> (-7.80%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `76.47% <75.00%> (+1.08%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3VuaW9uZm9ybS5weQ==) | `73.75% <75.00%> (+0.57%)` | :arrow_up: |\n| [src/awkward/\\_v2/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19icm9hZGNhc3RpbmcucHk=) | `93.39% <88.46%> (-1.18%)` | :arrow_down: |\n| ... and [45 more](https://codecov.io/gh/scikit-hep/awkward/pull/1679/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-07T13:07:50Z",
  "id":1239366737,
  "issue":1679,
  "node_id":"IC_kwDODBCWws5J3zxR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-07T17:39:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, I think this is ready to go. I want to, in a future PR, increase the coverage of these test. Right now, we have enough to consider merging this PR.",
  "created_at":"2022-09-07T17:22:13Z",
  "id":1239675027,
  "issue":1679,
  "node_id":"IC_kwDODBCWws5J4_CT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-07T17:22:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"You're right! But this was _just_ fixed yesterday, in PR #1671. (See fca3e66f5f10d3279f90e5d334aa3a48221c1971.)\r\n\r\n@agoose77 and I (@agoose77 especially) have been focusing on issues surrounding type representations, broadcasting strings, and categoricals, triggered by your use-cases but including anything that we find along the way.",
  "created_at":"2022-09-07T14:48:52Z",
  "id":1239493721,
  "issue":1680,
  "node_id":"IC_kwDODBCWws5J4SxZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-07T14:48:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'm thinking `is_list`, `is_option` here?",
  "created_at":"2022-11-11T13:11:30Z",
  "id":1311680724,
  "issue":1681,
  "node_id":"IC_kwDODBCWws5OLqjU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T13:11:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Sure. Actually, if you have opinions about what these words should be, I'll assign it to you.\r\n\r\nYou can send it back to me if you want. (This is not a big effort; what matters is that they get changed to something better, for some definition of better.)",
  "created_at":"2022-11-11T15:41:40Z",
  "id":1311852423,
  "issue":1681,
  "node_id":"IC_kwDODBCWws5OMUeH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T15:41:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski suggested adding an `is_string` helper function, which special cases string fast-paths. We can build-out a more general mechanism, which we can then disable down the road.",
  "created_at":"2022-09-29T15:32:48Z",
  "id":1262452534,
  "issue":1682,
  "node_id":"IC_kwDODBCWws5LP382",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T15:44:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"For name-collisions: there's a function in both Awkward and Uproot's _util called `isstr`, parallel with `isint`, which checks to see if an object is as Python `str`. `isstr` can be retired/removed, since its purpose was to handle Python 2 vs 3 strings, though that means turning a lot of `ak._util.isstr(x)` into `isinstance(x, str)` (and `x` can be complex). Incidentally, we'll still need `isint` because it standardizes _which_ integers we accept (no booleans but yes NumPy integers).\r\n\r\nSince `is_string` always applies to things that have parameters, maybe it could be a method on the Metadata superclasses we talked about? And since we're talking about strings-via-parameters, maybe name it `parameter_is_string` (`string`, `bytestring`, `anystring`, with `anystring` being the most popular, I think).",
  "created_at":"2022-09-29T15:48:29Z",
  "id":1262473210,
  "issue":1682,
  "node_id":"IC_kwDODBCWws5LP8_6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T15:48:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is still an issue:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> layout = ak.contents.IndexedArray(\r\n...     ak.index.Index64(np.array([0, 1, 2, 3], np.int64)),\r\n...     ak.contents.NumpyArray(np.arange(10), parameters={\"this\": \"that\"}),\r\n...     parameters={\"some\": \"other\"},\r\n... )\r\n>>> layout.project()\r\n<NumpyArray dtype='int64' len='4'>\r\n    <parameter name='this'>'that'</parameter>\r\n    [0 1 2 3]\r\n</NumpyArray>\r\n```\r\n\r\nI'll introduce a `merge_parameters` at the right place.",
  "created_at":"2022-12-05T17:33:10Z",
  "id":1337799322,
  "issue":1685,
  "node_id":"IC_kwDODBCWws5PvTKa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T17:33:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This one is still an issue, too, though it is now _forcing_ a simplification (thanks to #1939).\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> left = ak.contents.NumpyArray(np.arange(10), parameters={\"left\": \"leftie\"})\r\n>>> right = ak.contents.NumpyArray(np.arange(10), parameters={\"right\": \"rightie\"})\r\n>>> array = ak.contents.UnionArray.simplified(\r\n...     ak.index.Index8(np.array([0, 0, 0, 0, 1, 1, 1, 1], np.int8)),\r\n...     ak.index.Index32(np.array([0, 1, 2, 3, 0, 1, 2, 3], np.int32)),\r\n...     [left, right],\r\n...     parameters={\"some\": \"other\"},\r\n... )\r\n>>> array.parameter(\"some\")   # output is None, should be \"other\"\r\n```",
  "created_at":"2022-12-05T18:08:46Z",
  "id":1337877559,
  "issue":1686,
  "node_id":"IC_kwDODBCWws5PvmQ3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T18:08:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I suspect this is a manifestation of #1685 ",
  "created_at":"2022-09-08T12:31:17Z",
  "id":1240653814,
  "issue":1688,
  "node_id":"IC_kwDODBCWws5J8t_2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T12:31:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"No, actually this is just that projecting out categoricals is not the correct behaviour",
  "created_at":"2022-09-08T13:13:08Z",
  "id":1240700339,
  "issue":1688,
  "node_id":"IC_kwDODBCWws5J85Wz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T13:13:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yeah, this\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/31f3afb6bd31949bb2014d3be4b86194a63a573c/src/awkward/_v2/contents/indexedarray.py#L1246-L1247\r\n\r\nshould only project itself if _not_ categorical. Otherwise, it should pass on the recursive packing to its `content`, but not change itself.\r\n\r\n```python\r\n    def packed(self): \r\n        if self.parameter(\"__array__\") == \"categorical\":\r\n            return self.copy(content=content.packed())\r\n        else:\r\n            return self.project().packed() \r\n```\r\n",
  "created_at":"2022-09-08T13:43:17Z",
  "id":1240737263,
  "issue":1688,
  "node_id":"IC_kwDODBCWws5J9CXv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T13:43:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually, @agoose77 just pointed out in Slack that we should also remove unreachable items from `content`, which is the purpose of `packed`. I stand corrected: it's more complicated than my suggested fix.",
  "created_at":"2022-09-08T13:45:07Z",
  "id":1240739614,
  "issue":1688,
  "node_id":"IC_kwDODBCWws5J9C8e",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T13:45:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"Would unreachable items include categories that are no longer present, or just values from the integer array that aren't referenced?",
  "created_at":"2022-09-08T14:24:49Z",
  "id":1240791274,
  "issue":1688,
  "node_id":"IC_kwDODBCWws5J9Pjq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T14:24:49Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes; the simplest fix is just to pack the _content_ of the categorical indexed array, but if we want to do this properly, we should produce a new indexed type which only includes the items that are referenced in `index`. That corresponds to keeping only the categories that are referred to by at least one index.",
  "created_at":"2022-09-08T14:37:43Z",
  "id":1240808586,
  "issue":1688,
  "node_id":"IC_kwDODBCWws5J9TyK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T14:38:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> we should produce a new indexed type which only includes the items that are referenced in index. That corresponds to keeping only the categories that are referred to by at least one index.\r\n\r\nI would argue against this.\r\n\r\nI think the set of categories shouldn't be modified by this function. I may only have a subset of the categories present in one instance, but would want to combine it with another instance that has the full set. If I know my set of categories ahead of time, I would like to just have all my arrays refer to them so I don't have to re-map the codes. This could also cause the codes to lose meaning if their order was important.\r\n\r\nI think this is why some categorical array implementations model the categories as being part of the type, e.g. pandas [`CategoricalDtype`](https://pandas.pydata.org/docs/user_guide/categorical.html#categoricaldtype).",
  "created_at":"2022-09-08T14:50:42Z",
  "id":1240826171,
  "issue":1688,
  "node_id":"IC_kwDODBCWws5J9YE7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T14:50:42Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"MEMBER",
  "body":"In that case, the simple implementation in https://github.com/scikit-hep/awkward/issues/1688#issuecomment-1240737263 is all we need.",
  "created_at":"2022-09-08T15:01:37Z",
  "id":1240840779,
  "issue":1688,
  "node_id":"IC_kwDODBCWws5J9bpL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T15:01:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I can see the merit in what you're saying. In-fact I had discounted this because I didn't think we exposed the array's catgories to the user. However, we _do_ expose them with `ak.categories`, so I'm now agreed that we want a simple categories-only packing.",
  "created_at":"2022-09-08T15:10:33Z",
  "id":1240852277,
  "issue":1688,
  "node_id":"IC_kwDODBCWws5J9ec1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T16:09:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Also for the sake of history, this was @agoose77's attempt to remove unused contents:\r\n\r\n```python\r\n        if self.parameter(\"__array__\") == \"categorical\":\r\n            index_nplike = self._nplike.index_nplike\r\n            index = index_nplike.asarray(self._index.data)\r\n            mask = index_nplike.zeros(len(self._content), dtype=np.bool_)\r\n            mask[index] = True\r\n            tag_valid, = index_nplike.nonzero(mask)\r\n            index_valid = index_nplike.searchsorted(tag_valid, index)\r\n            return IndexedArray(\r\n                ak._v2.index.Index(index_valid),\r\n                self._content._carry(ak._v2.index.Index(tag_valid), False),\r\n                self._identifier,\r\n                self._parameters,\r\n                self._nplike\r\n            )\r\n```\r\n\r\nand I was thinking about it along these lines:\r\n\r\n```python\r\n>>> index = np.array([4, 2, 6, 1, 5, 5, 2])\r\n>>> content = np.array([0.0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])\r\n>>> uniques, inverse = np.unique(index, return_inverse=True)\r\n>>> uniques\r\narray([1, 2, 4, 5, 6])\r\n>>> inverse\r\narray([2, 1, 4, 0, 3, 3, 1])\r\n>>> uniques[inverse]\r\narray([4, 2, 6, 1, 5, 5, 2])\r\n```\r\n\r\nBoth of these are _O(n log n)_, either in the `np.searchsorted` or in the `np.unique` (because it sorts). For what we want, it wouldn't have to sort, but we might have needed to write a custom kernel to actually get _O(n)_.",
  "created_at":"2022-09-08T16:32:18Z",
  "id":1240950597,
  "issue":1689,
  "node_id":"IC_kwDODBCWws5J92dF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-08T16:32:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Since this merged PR is based on a branch named `agoose77/fix-categorical-packed-2`, would it be safe to say that [agoose77/fix-categorical-packed](https://github.com/scikit-hep/awkward/tree/agoose77/fix-categorical-packed) can be deleted? If so, please do it. (I'm cleaning up dead branches.)",
  "created_at":"2022-09-23T00:41:17Z",
  "id":1255689007,
  "issue":1689,
  "node_id":"IC_kwDODBCWws5K2Esv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T00:41:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Done!",
  "created_at":"2022-09-23T09:45:11Z",
  "id":1256003290,
  "issue":1689,
  "node_id":"IC_kwDODBCWws5K3Rba",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T09:45:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Removing the v1 Python layer is fairly easy. Need to think about the C++ layer; the Forth machine returns a `ContentPtr` in a number of places. Some of these are trivial Numpy arrays, but the `bytecodes` getter function returns a jagged list. The obvious answer is to return the bytecodes and their offsets, and let the Python binding layer build the Array object from C++ via pybind Python execution. I haven't thought yet whether I like the idea of the ForthMachine returning pybind11's `py::array` outside of the Python layer, so I think I'm leaning towards removing the `toNumpyArray` interface and doing that at the bindings level.",
  "created_at":"2022-09-10T16:10:14Z",
  "id":1242760660,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KEwXU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-10T16:10:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Need to think about the C++ layer; the Forth machine returns a `ContentPtr` in a number of places. Some of these are trivial Numpy arrays, but the `bytecodes` getter function returns a jagged list. The obvious answer is to return the bytecodes and their offsets\r\n\r\nKnowing that the split is coming up soon, we've been using the ForthMachine in ways that don't depend on the return values being `ContentPtr` and `IndexPtr`: we've been immediately casting them as NumPy arrays.\r\n\r\nThe `bytecodes` method/property is not used much. I think nothing would break if it were removed entirely, but it's probably better to replace it with just a 2-tuple of `offsets` and `content`, as you describe. It exists as a debugging tool (though the `decompile` one, which prints out source code reconstructed from the bytecodes, is more useful), and was constructed as a jagged array just because it occurred to me that one could do that. Unlike imperative bytecode, Forth bytecode does not have arbitrary jumps; it happens to be a [structured language](https://en.wikipedia.org/wiki/Structured_programming) in the sense of not having GOTOs, a fact that was [emphasized by Forth enthusiasts in the 80's](https://www.forth.com/resources/forth-programming-language/#242_Structured_programming_disciplines), but nowadays nearly all languages are structured at the human-readable source code level. The only thing that stands out for Forth is that its bytecode can also be blocked out as subroutines, a jagged array.[^1]\r\n\r\nAnyway, the point is that we've been using the `ContentPtr`/`IndexPtr`-dependent parts of ForthMachine in a minimal way so that they can be replaced by raw buffers (`py::buffer_info` in pybind11) without issues. Along the same lines, we will be removing the custom growable-buffer of ForthOutputBuffer to use Manasvi's new GrowableBuffer (and reap the benefits of non-contiguous filling), but that is an entirely separate step that can wait until the v1 pruning is entirely done. (ForthOutputBuffer doesn't depend on the old GrowableBuffer\u2014that one can be safely deleted.)\r\n\r\n[^1]: Although somebody might point out that this is now true of other bytecodes that I don't know about. Maybe JVM? I'm pretty sure Python bytecode has unconditional jumps.",
  "created_at":"2022-09-10T19:07:46Z",
  "id":1242790100,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KE3jU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-10T19:07:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Phew. \r\n\r\nNow v1-less Awkward compiles and passes most tests, having removed the array and type machinery. \r\n\r\nI've removed the low hanging fruit in the C++ side, so I've therefore left a much reduced version of `Index.cpp`. My rationale there is that older C++ standards don't have `std::span` yet, so either we start using `pybind` features inside of AwkwardForth, or we keep this small abstraction.\r\n\r\nNew bugs:\r\n\r\n`from_iter` doesn't currently handle native Python datetime objects, so many tests fail. We should fix this.",
  "created_at":"2022-09-13T13:35:48Z",
  "id":1245424433,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KO6sx",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-09-13T13:35:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We should be able to remove `Index` from `ForthMachine`. I'll take a look at it later, but that's a separable problem from everything else.",
  "created_at":"2022-09-13T13:48:13Z",
  "id":1245440573,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KO-o9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T13:48:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> We should be able to remove `Index` from `ForthMachine`. I'll take a look at it later, but that's a separable problem from everything else.\r\n\r\nI think it depends if we want to be passing around unbounded arrays. Actually, this is barely a point at the moment because the `Index` impl doesn't so anything safety wise (i.e. provide an iterator).\r\n\r\nIIRC you never get an index directly; rather, you get the output and call `toIndexXX` on it, so we can just use the metadata from the output.\r\n\r\nOtherwise, I still need to remove the unused kernels...",
  "created_at":"2022-09-13T15:21:02Z",
  "id":1245569851,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KPeM7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T15:21:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"In the way AwkwardForth is used, the output of `toNumpyArray` and `toIndex` are used, they're immediately wrapped with `np.asarray`, so we only need one way to get a buffer out. We can even change the name (breaking Uproot), since Uproot v5 and Awkward v2 releases will be coordinated. A name change won't be very disruptive.\r\n\r\n> Otherwise, I still need to remove the unused kernels...\r\n\r\nPerhaps removing unused kernels should be a separate PR. We might even be able to find more that could be removed and haven't yet. Some of them might be equivalent to `arange` or something.\r\n",
  "created_at":"2022-09-13T15:27:16Z",
  "id":1245577620,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KPgGU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T15:27:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> wip: remove unused kernels\r\n\r\nIt's okay. But I think we can remove more, and fishing for them can be a different PR.",
  "created_at":"2022-09-13T15:28:12Z",
  "id":1245578908,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KPgac",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T15:28:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > wip: remove unused kernels\r\n> \r\n> It's okay. But I think we can remove more, and fishing for them can be a different PR.\r\n\r\nCool. I found these ones by directly looking with (Xonsh)\r\n```xonsh\r\nimport yaml\r\nimport re\r\n\r\nkernel_spec = yaml.safe_load(p\"/home/angus/Git/awkward/kernel-specification.yml\".read_text())['kernels']\r\nin_use_specs = set($(rg r\"awkward_\\w+\" src/awkward/contents src/awkward/_reducers.py -oNI).splitlines())\r\nname_to_specs = {g['name']: [s['name'] for s in g['specializations']] for g in kernel_spec}\r\nspec_to_name = {v: k for k, s in name_to_specs.items() for v in s}\r\n\r\n# For cleaning up the spec file\r\nin_use_names = (name_to_specs.keys() & in_use_specs)\r\n\r\n# For removing kernels\r\nfor f in [f for f in pg`src/cpu-kernels/awkward*.cpp` if not any(s in f.read_text() for s in used_specs)]:\r\n    f.unlink()\r\n```",
  "created_at":"2022-09-13T15:38:42Z",
  "id":1245592614,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KPjwm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T15:38:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  the output of toNumpyArray and toIndex are used\r\n\r\nYeah, now that all the removed code is gone, it's easier to see that we don't need an object that holds both length and ptr (besides the output itself). The main \"issue\" is internally within the Forth machine, rather than the bindings. It should be possible to just access the (shared) pointer directly within the Forth routines, and wrap it in the bindings.",
  "created_at":"2022-09-13T15:40:45Z",
  "id":1245595277,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KPkaN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T15:41:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  We might even be able to find more that could be removed and haven't yet. Some of them might be equivalent to arange or something.\r\n\r\nAgreed, there are several that I know of (not sure if they're still carried through in this PR, haven't checked) ;)",
  "created_at":"2022-09-13T15:42:39Z",
  "id":1245597614,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KPk-u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T15:42:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, this now removes `Index` as well, so it's nearly all the way there. I've rebased my commits where possible to give a clean-ish history. I can't guarantee that every commit builds a wheel that passes the test suite (they certainly don't when I start moving files), but after the large-scale refactoring commits, most revisions then compile.",
  "created_at":"2022-09-13T16:34:30Z",
  "id":1245663449,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KP1DZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T16:34:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I haven't fully pulled out the kernel dispatch mechanism yet. I'll tentatively note that I'm not intimately familiar with this code, but my current understanding is that our kernel handling has all been superseded by the nplike dispatch mechnism.",
  "created_at":"2022-09-13T16:55:39Z",
  "id":1245686548,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KP6sU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T16:55:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Any kernel-dispatch in C++ is old. We have an entirely new kernel-dispatch system in Python, using ctypes.\r\n\r\nAnything you find in C++ about `startup` functions, particularly for setting up awkward-cuda-kernels, can be removed. That's all Python now as well.\r\n\r\nAnother thing that can go is the dlpack git submodule. That was all for supporting CUDA arrays in C++, which is now handled by CuPy in nplike.",
  "created_at":"2022-09-13T16:59:43Z",
  "id":1245690929,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KP7wx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T16:59:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Another thing that can go is the dlpack git submodule\r\n\r\nIt's already gone!",
  "created_at":"2022-09-13T19:07:06Z",
  "id":1245844418,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KQhPC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T19:07:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, now we're at a point where there's not much else (anything?) that needs to be removed. \r\n\r\nThe main changes are now described in this PRs description.\r\n\r\n",
  "created_at":"2022-09-13T21:09:21Z",
  "id":1245956856,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KQ8r4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T21:09:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've added some rudimentary time handling. I originally tried employing `std::chrono`, but I clearly don't fully understand how C++ is handling times vs Python:\r\n\r\nIf I calculate the local epoch using:\r\n```diff\r\n+std::chrono::system_clock::time_point local_epoch() {\r\n+    std::tm tm = {\r\n+       /* .tm_sec  = */ 0,\r\n+       /* .tm_min  = */ 0,\r\n+       /* .tm_hour = */ 0,\r\n+       /* .tm_mday = */ 1,\r\n+       /* .tm_mon  = */ 1 - 1,\r\n+       /* .tm_year = */ 1970 - 1900,\r\n+    };\r\n+    // Use local time zone DST\r\n+    tm.tm_isdst = -1;\r\n+    return std::chrono::system_clock::from_time_t(std::mktime(&tm));\r\n+}\r\n```\r\nThen when I use this in these calculations, I get one-hour shifts for particular datetimes:\r\n```diff\r\n+    auto time = obj.cast<std::chrono::system_clock::time_point>();\r\n+    int64_t time_since_epoch_us = std::chrono::duration_cast<std::chrono::microseconds>(\r\n+        time - local_epoch()\r\n+    ).count();\r\n+    std::cout << \"time since epoch     \" << time_since_epoch_us << std::endl;\r\n+    std::cout << \"time since epoch cpp \" << std::chrono::duration_cast<std::chrono::microseconds>(time.time_since_epoch()).count() << std::endl;\r\n+    self.datetime(time_since_epoch_us, \"datetime64[us]\");\r\n```\r\n\r\nI am currently under the impression that this is because the timezones differ between Python and C++. I'm looking into this.",
  "created_at":"2022-09-15T22:21:26Z",
  "id":1248694498,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KbZDi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-15T22:21:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The above code example is wrong - the epoch should not be specified in local time (via `std::tm`). Instead, it's just `std::time_t (0)`.\r\n\r\nNow that I'm more familiar with `mktime` vs `localtime`, some thoughts on my timezone (BST)\r\n- NumPy's datetime objects are _naive_ and don't attempt to determine any DST offsets\r\n- `datetime.datetime.timestamp` _does_ try to use the local timezone to figure out DST offsets\r\n-  `(dt - epoch)` does not try to do this, so behaves like NumPy\r\n- `std::mktime` (used by pybind11) converts from _local_ clock into UTC. The `tm_isdst` flag is used to help `mktime` figure out how to transform the input. It's set to `-1` by default, which means that `mktime` uses the local clock to figure out if the time period *should* be during DST, and corrects it if so\r\n  | tm_isdst | expected DST? | offset | new tm_isdst |\r\n  |----------|---------------|--------|--------------|\r\n  | 1        | yes           | 0      | 1            |\r\n  | 1        | no            | -1     | 0            |\r\n  | 0        | yes           | 1      | 1            |\r\n  | 0        | no            | 0      | 0            |\r\n  | -1       | yes           | 0      | 1            |\r\n  | -1       | no            | 0      | 0            |\r\n\t\t   \r\n\t I'm least confident on `-1` for `tm_isdst`. I believe that `-1` just signals to `mktime` to determine from the local time whether the given time is DST, and reflect that guess in the field. It *doesn't* modify the time fields after deduction - it assumes the user entered the correct local time for the timezone. `mktime` is idempotent, as it only changes fields if `tm_isdst` is changed. \r\n- `time_t` literally returns the same as `time_since_epoch()`\r\n- `mktime` considers whether `tm_isdst` changes when building the result `time_t`.\r\n",
  "created_at":"2022-09-16T00:03:39Z",
  "id":1248769198,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KbrSu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-16T12:32:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Actually, I didn't think about this - the timezone boundaries do not map onto distinct values: 01:00 and 02:00 (UTC) in my current timezone on 2022/03/27 are both the same local times (01:00):\r\n- 1 AM BST = 1 AM UTC\r\n- 2 AM BST = 1 AM UTC\r\nso, it's not possible to losslessly recover the input (local) time from the UTC output (in `std::time_t`). Therefore, we either need to modify the timezone (set it to UTC), or do this in Python.",
  "created_at":"2022-09-16T12:53:58Z",
  "id":1249328928,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5Kdz8g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-16T12:53:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Since NumPy does not deal with timezones (its times are timezone-naive, which is to say that knowledge of the timezone is not contained within the array, but is managed by the user in some external metadata somewhere), then we have to operate at the same level (also timezone-naive).\r\n\r\nPython's `datetime` library can operate in both modes: https://stackoverflow.com/a/7065242/1623645\r\n\r\nProbably the least-surprising way to turn timezone-aware `datetimes` (`datetimes` with the `tzinfo` set to non-None) into timezone-naive `datetimes` would be to remove the `tzinfo`, rather than converting to UTC, as in the StackOverflow example. The best we can do is to be consistent and document it.\r\n\r\nThis is not the worst thing to happen to people who deal with time-data...",
  "created_at":"2022-09-16T13:12:25Z",
  "id":1249349518,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5Kd4-O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-16T13:12:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We're on the same page w.r.t whether we support timezones!\r\n\r\nIn this PR, the issue I'm running into is concerned with the pybind11 bindings for `datetime.datetime` objects. If we want to bump performance by not calling into the Python interpreter several times per `datetime.datetime` object, then it's best if we convert them once into a native C++ type, e.g. `std::time_t`. However, the pybind11 converters use `mktime` to produce a `std::chrono::system_clock::time_point` object (which is convertible to `time_t`) according to the _localtime_ settings (see https://github.com/pybind/pybind11/issues/1638). This means that the conversion result depends upon the user's system.\r\n\r\nActually, writing this response has given me an idea for a \"hack\". These problems all go away if the localtime is UTC, because there are no DST periods. However, setting the `TZ` env var from requires us to add special code to handle windows `_putenv` vs linux `putenv`. Or, we could just call into Python and let Python handle this, once per `from_iter` call. I'd prefer to just fix this at the root, which would probably require pybind11 to ship a third-party header-only library, (or we could do this and forgo pybind11's conversion).",
  "created_at":"2022-09-16T13:52:06Z",
  "id":1249392683,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KeDgr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-16T13:52:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, I see: not specifying a timezone and converting a time-tuple into seconds since 1970 will implicitly pick up the platform-dependent locales. Well, we definitely don't want it to be platform- or locales-dependent, or to be changing OS-level variables to do the conversion. If there's a way to satisfy all constraints but `from_iter` runs a little slower, `from_iter` runs a little slower. It's expected that we'll be making a lot of Python calls, since we are converting from Python data, after all.\r\n\r\nActually, WWND (What Would NumPy Do)?\r\n\r\n```python\r\n>>> import numpy as np\r\n>>> from datetime import datetime\r\n>>> from dateutil import tz\r\n>>> d = datetime(1976, 7, 2, 4, 0, 0, tzinfo=tz.tzoffset(\"EDT\", -4*60*60))\r\n>>> d\r\ndatetime.datetime(1976, 7, 2, 4, 0, tzinfo=tzoffset('EDT', -14400))\r\n>>> d.isoformat()\r\n'1976-07-02T04:00:00-04:00'\r\n>>> np.array([d])\r\narray([datetime.datetime(1976, 7, 2, 4, 0, tzinfo=tzoffset('EDT', -14400))],\r\n      dtype=object)\r\n>>> np.array([d], \"datetime64[s]\")\r\n<stdin>:1: DeprecationWarning: parsing timezone aware datetimes is deprecated; this will raise an error in the future\r\narray(['1976-07-02T08:00:00'], dtype='datetime64[s]')\r\n```\r\n\r\nAha! It converts the timezone-aware `datetime` to UTC, which is platform-independent (it's not relying on the system's local timezone; the timezone is in the `datetime` object), but this is deprecated behavior and will raise an error in the future. See also [here](https://numpy.org/doc/stable/release/1.11.0-notes.html?highlight=numpy%20random%20f#datetime64-changes).\r\n\r\nSo we can just raise an error. (If it weren't for this NumPy deprecation, we could do that conversion as well.)\r\n\r\nThus, any `datetime` for which `d.tzinfo is not None` would stop processing as an error. It would be good to know what kind of error this would be, but I would assume `ValueError`.",
  "created_at":"2022-09-16T14:18:03Z",
  "id":1249422108,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KeKsc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-16T14:18:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Oh, I see: not specifying a timezone and converting a time-tuple into seconds since 1970 will implicitly pick up the platform-dependent locales.\r\n\r\nYes that's it - naive datetimes are treated as local times during conversion.\r\n\r\n> changing OS-level variables to do the conversion.\r\n\r\nI think this would be fine if we are doing it in a contextual manner, e.g. RAII to setup/tear down, but still non ideal.\r\n\r\n> So we can just raise an error.\r\n\r\nYes, separately for the case of timezone-specified datetimes, we should probably error.\r\n\r\n\r\n",
  "created_at":"2022-09-16T19:21:32Z",
  "id":1249721529,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5KfTy5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-16T19:21:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1690?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1690](https://codecov.io/gh/scikit-hep/awkward/pull/1690?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6e696b1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1690?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.38% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1690/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-19T19:13:48Z",
  "id":1251436593,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5Kl2gx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T08:17:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've fixed the remaining bug with date-time handling (I introduced this during refactoring). This means that the test suite now passes. I've done a very simple fix of the docs-building so we don't reference any v1 layouts anymore. I won't spend too much time on this because much of this work is/will be done in the `docs` branch.\r\n\r\nIn this PR, I'd mainly benefit from reviewers considering edge cases for `sed` et al, because that's how most of this work was done.",
  "created_at":"2022-09-19T19:35:29Z",
  "id":1251462249,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5Kl8xp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-19T19:35:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've now rebased this PR on top of #1708, given that I expect that PR will be merged into 1.10 (it's a significant bug).\r\n\r\nI've taken the time to rewrite most of these commits to join together similar changes, and remove intermediate commits that were used to keep `localbuild` happy. It's possible that some of the commits won't build / pass the test suite, although this is guaranteed for the early v1-v2 move commits (by virtue of separating `mv` from `sd` (`sed`)).",
  "created_at":"2022-09-21T11:05:29Z",
  "id":1253546272,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5Kt5kg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-21T11:06:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"1.10.1 is out and I'm reviewing this now.\r\n\r\nI'll start by pressing \"update branch\" so that it will test against `main`, though I'm pretty sure that the only change is VERSION_INFO or something like it. For formality's sake, since this is such a big PR.",
  "created_at":"2022-09-22T19:41:47Z",
  "id":1255471010,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1Pei",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T19:41:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"It should also be possible to remove\r\n\r\n```c++\r\n  EXPORT_SYMBOL void* awkward_malloc(int64_t bytelength);\r\n  EXPORT_SYMBOL void awkward_free(void const *ptr);\r\n```\r\n\r\nfrom include/awkward/kernel-utils.h and wherever they're implemented. I think you've already converted over all of their uses to `new` and `delete` or standard `malloc` and `free`, right?",
  "created_at":"2022-09-22T19:53:38Z",
  "id":1255482175,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1SM_",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-22T19:53:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I believe we'll be able to remove all instances of `pyobject_deleter` in favor of pybind11 features, and I don't think there's any need for `array_deleter`, now that we're not sharing C++-allocated arrays with Python anymore. Even if this could be done with a few extra steps, those steps might be tricky and we can put that off for a new PR.",
  "created_at":"2022-09-22T19:58:55Z",
  "id":1255486987,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1TYL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T19:58:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The low-level ArrayBuilder should not go into ak.contents, since this is for Content subclasses exclusively.\r\n(Similarly, the Index subclasses, Identifier, and low-level Record were also moved out of this directory. The idea is that we can quickly open all the files in this directory and get every Content, to apply some small change to all of them, typically.)\r\n\r\nCould you elaborate on this Jim? I don't recall merging layout into contents. Although, I may have done this in an intermediary commit that I couldn't squash for whatever reason.",
  "created_at":"2022-09-22T20:23:17Z",
  "id":1255510531,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1ZID",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T20:25:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":">  and I don't think there's any need for `array_deleter`\r\n\r\nI think we do still need this; it's used internally to free `new`d arrays (before C++17): https://stackoverflow.com/questions/13061979/shared-ptr-to-an-array-should-it-be-used\r\n\r\n",
  "created_at":"2022-09-22T20:25:51Z",
  "id":1255513111,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1ZwX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T20:25:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Could you elaborate on this Jim? I don't recall merging layout into contents.\r\n\r\nAha! You didn't: it was only suggested by a documentation file.\r\n\r\n```bash\r\n% fgrep -r ak.contents.ArrayBuilder *\r\ndocs-sphinx/index.rst:**Layout-level ArrayBuilder:** :class:`ak.contents.ArrayBuilder` (used internally).\r\n```\r\n\r\nI've compiled this and get a lot of linker warnings. We'll address the compilation warnings (almost all integer size or signedness) in another PR, but the linker warnings make me uneasy; I'd like to understand those. I think it's visibility: do you see those warnings, too?",
  "created_at":"2022-09-22T20:40:19Z",
  "id":1255526286,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1c-O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T20:40:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"`array_deleter`: I see. Then it will be eliminated in a later pass, when we upgrade to C++17 in a later PR.\r\n\r\nWe will eventually be able to get rid of `pyobject_deleter`, too. Right now, it's only being used to reference-count `ForthInputBuffer`'s shared ownership of input arrays, but that can be managed with a pybind11 feature. (Future PR.)\r\n\r\nWe've also talked about replacing pybind11 with nanobind. Doing that might be a good way to refresh and simplify the C++/Python interface.",
  "created_at":"2022-09-22T20:46:53Z",
  "id":1255532541,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1ef9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T20:46:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"LayoutBuilder has become a C++-only thing, now that it's defined in terms of templates. We shouldn't have two versions, one based on AwkwardForth and the other on C++ templates, but the AwkwardForth version can be removed in a future PR.",
  "created_at":"2022-09-22T21:21:53Z",
  "id":1255560877,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1lat",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T21:21:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"`diff` could be improved by recognizing YAML syntax and not trying to interleave two structures when one whole subtree is removed.",
  "created_at":"2022-09-22T21:36:50Z",
  "id":1255579548,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1p-c",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T21:36:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Our functions have a mixture of U.S. and U.K. spelling. That's not necessarily a bad thing; I don't think I would just guess the spelling, I'd look it up, or an IDE would tab-complete.",
  "created_at":"2022-09-22T21:43:20Z",
  "id":1255585594,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1rc6",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-22T21:43:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"GitHub is managing changes during review really well. It just unchecks the \"viewed\" files that have changed.\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/191859597-65e9d435-50b2-44a7-8022-4660e873bbf4.png)",
  "created_at":"2022-09-22T22:05:15Z",
  "id":1255602991,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1vsv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:05:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski  can you specifically check d703dfa85874fa8d50affeb24d22273ebe409fe5 and ensure I've made the right change? I think the original v2 conversion here wanted to reject the low level `ArrayBuilder` here, rather than the highlevel array that we already treat in the case that handles `ak.Array`.",
  "created_at":"2022-09-22T22:19:53Z",
  "id":1255614675,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1yjT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:24:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I was just going to suggest (and couldn't do the Suggest Change button, for some reason) that it be\r\n\r\n```python\r\n    elif isinstance(array, ak.highlevel.ArrayBuilder):\r\n        return array.type\r\n```\r\n\r\nThis is a case we can handle. (I just tested it.)\r\n\r\nI'll take a look at the function as a whole to see if it's in the right order and whether it's missing the low-level ArrayBuilder case.",
  "created_at":"2022-09-22T22:23:06Z",
  "id":1255617276,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1zL8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:23:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh yeah: the `ak.highlevel.ArrayBuilder` case has already been handled above. From context, what was probably intended here is the low-level ArrayBuilder.",
  "created_at":"2022-09-22T22:24:18Z",
  "id":1255618415,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1zdv",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-22T22:24:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Oops, that was what I intended to say when I asked you to look into it. Lazy english!",
  "created_at":"2022-09-22T22:25:08Z",
  "id":1255619085,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K1zoN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:25:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski oh, sorry. I had not pushed the full change in d703dfa85874fa8d50affeb24d22273ebe409fe5. I'd locally changed the case to `ak.layout.ArrayBuilder`, as you suggested.",
  "created_at":"2022-09-22T22:28:41Z",
  "id":1255622405,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K10cF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:28:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"```python\r\n    elif isinstance(array, ak.layout.ArrayBuilder):\r\n        form = ak.forms.from_json(array.form())\r\n        return ak.types.ArrayType(\r\n            form.type_from_behavior(self._behavior), len(self._layout)\r\n        )\r\n```\r\n\r\nEventually, we'll want to get rid of `ak.layout` as a module. Now it only contains the low-level ArrayBuilder and two instances of LayoutBuilder-as-Python that we'll be removing. Maybe that's too much to tack onto this PR. But after that point, the low-level ArrayBuilder can be referred to simply as `ak._ext.ArrayBuilder`.",
  "created_at":"2022-09-22T22:28:41Z",
  "id":1255622406,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K10cG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:28:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski NB I haven't touched \"studies/\" yet, because that should be a simple find-replace and I didn't want to grow this stage of the PR review yet.",
  "created_at":"2022-09-22T22:30:23Z",
  "id":1255623476,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K10s0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:30:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> ```python\r\n>     elif isinstance(array, ak.layout.ArrayBuilder):\r\n>         form = ak.forms.from_json(array.form())\r\n>         return ak.types.ArrayType(\r\n>             form.type_from_behavior(self._behavior), len(self._layout)\r\n>         )\r\n> ```\r\n> \r\n> Eventually, we'll want to get rid of `ak.layout` as a module. Now it only contains the low-level ArrayBuilder and two instances of LayoutBuilder-as-Python that we'll be removing. Maybe that's too much to tack onto this PR. But after that point, the low-level ArrayBuilder can be referred to simply as `ak._ext.ArrayBuilder`.\r\n\r\nI'll make this a todo for later review",
  "created_at":"2022-09-22T22:31:00Z",
  "id":1255623875,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K10zD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:31:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski NB I haven't touched \"studies/\" yet, because that should be a simple find-replace and I didn't want to grow this stage of the PR review yet.\r\n\r\nThe studies/ directory should be left as-is. It's just a record of the temporary work that we did to figure out the algorithms, and so removing v1 doesn't change anything there.\r\n\r\nThe code in studies/ doesn't even need to be able to run. It's a historical record.",
  "created_at":"2022-09-22T22:40:38Z",
  "id":1255629485,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K12Kt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:40:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"There's a lot of JSON-handling code that can now be removed, too. Would you mind if I `git pull` and do it?\r\n\r\nThat is, you're not working on something that would be hard to merge if I remove some C++?",
  "created_at":"2022-09-22T22:41:46Z",
  "id":1255630201,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K12V5",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-22T22:41:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski sure, which module is this? I thought I'd removed the unused parts. Perhaps some of src/libawkward/io/json.cpp is not required actually.",
  "created_at":"2022-09-22T22:42:55Z",
  "id":1255630971,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K12h7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:43:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"There's more, but it's not specifically called out.\r\n\r\nAlso, I can remove the non-C++ template LayoutBuilder (i.e. the old one). I can do the JSON and the LayoutBuilder in two separate commits, for record-keeping.",
  "created_at":"2022-09-22T22:44:06Z",
  "id":1255631736,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K12t4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:44:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I just did `git pull` _now_, for the sake of synchronization.",
  "created_at":"2022-09-22T22:44:32Z",
  "id":1255632034,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K12yi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:44:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":" Ah yes - I left the old layout builder because it still works, and it can be used right-now (whilst we don't have a jitted version of the new layout builder).",
  "created_at":"2022-09-22T22:45:10Z",
  "id":1255632393,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K124J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:45:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Are there tests with the old LayoutBuilder?\r\n\r\nThe motivation for reimplementing LayoutBuilder was so that it could be optimized for use in compiled loops. A Python interface to such a thing doesn't make sense because you wouldn't be able to use it in compiled loops. The C++ LayoutBuilder will eventually be usable in C++ JIT-compiled code (cppyy) and another implementation is planned for Numba.\r\n\r\nBut if we have any tests now with LayoutBuilder in a Python loop, we can just remove them without replacement, since future uses of LayoutBuilder won't involve anything like Python loops.",
  "created_at":"2022-09-22T22:50:16Z",
  "id":1255635260,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K13k8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:50:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski Yes, `tests/test_0924-layout-builder.py` and `tests/test_1302-layout-builder-nested-list.py`",
  "created_at":"2022-09-22T22:53:39Z",
  "id":1255637160,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K14Co",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:53:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah good catch @jpivarski. And I hadn't realised that the ToJSON wasn't used any more. I wonder if it was used for the forms, which I had temporarily left in after removing the contents? :thinking: ",
  "created_at":"2022-09-22T23:08:33Z",
  "id":1255645644,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K16HM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T23:08:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't think so; I think the forms built JSON with strings.\r\n\r\nAs for the two versions of from-JSON: there would have been no way to know. I recently revamped the JSON-handling code, and when I needed a C++ function, I wrote a new one beside the old one so that it would be easier to remove the old one (what I just did). There wasn't an obvious indication that one was old and the other new.\r\n\r\nI'm almost done with the LayoutBuilder.",
  "created_at":"2022-09-22T23:12:30Z",
  "id":1255647778,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K16oi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T23:12:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm happy to merge this. I won't update the docs, because we need to do more than just replace `ak.layout` in any documented examples of the mid-layer anyway.\r\n\r\nThere may well be some bugs / quirks in this branch, but I think at this point we pass the test suite, and its had 1/2 other pairs of eyes on it, so I am happy to iterate in main for now.",
  "created_at":"2022-09-23T08:00:02Z",
  "id":1255906246,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K25vG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T08:00:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #1721",
  "created_at":"2022-09-24T12:48:50Z",
  "id":1256961364,
  "issue":1690,
  "node_id":"IC_kwDODBCWws5K67VU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T12:48:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1691?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1691](https://codecov.io/gh/scikit-hep/awkward/pull/1691?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (860e85d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.37%`.\n> The diff coverage is `86.04%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1691?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.68% <33.33%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `82.95% <68.51%> (-7.80%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `76.47% <75.00%> (+1.08%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3VuaW9uZm9ybS5weQ==) | `73.75% <75.00%> (+0.57%)` | :arrow_up: |\n| ... and [48 more](https://codecov.io/gh/scikit-hep/awkward/pull/1691/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-10T21:05:05Z",
  "id":1242804588,
  "issue":1691,
  "node_id":"IC_kwDODBCWws5KE7Fs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-10T21:05:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Tests don't run on my new computer without this. It's important to include in 1.10.0rc4.",
  "created_at":"2022-09-13T23:10:03Z",
  "id":1246039561,
  "issue":1691,
  "node_id":"IC_kwDODBCWws5KRQ4J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T23:10:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1692?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1692](https://codecov.io/gh/scikit-hep/awkward/pull/1692?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d218e49) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.37%`.\n> The diff coverage is `86.04%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1692?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `71.68% <33.33%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `82.95% <68.51%> (-7.80%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `76.47% <75.00%> (+1.08%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3VuaW9uZm9ybS5weQ==) | `73.75% <75.00%> (+0.57%)` | :arrow_up: |\n| ... and [48 more](https://codecov.io/gh/scikit-hep/awkward/pull/1692/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-13T18:14:48Z",
  "id":1245784739,
  "issue":1692,
  "node_id":"IC_kwDODBCWws5KQSqj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T18:14:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"There's a long story here:\r\n\r\n  1. We will be handling CuPy (GPU) arrays as well as NumPy, and doing CuPy operations efficiently means that they need to be dispatched asynchronously (#1321).\r\n  2. But if a GPU function raises an error, the stack trace at the time the error is caught will not point to where the error actually happens, which would seriously confuse people when they're debugging.\r\n  3. So for this reason, and because users have found errors that point to Awkward's internals to be unhelpful anyway, error messages report the `ak.*` function that the error occurred in (even if, in the GPU case, that function has already formally returned).\r\n\r\nThat is, error messages that used to look like this:\r\n\r\n```python\r\n>>> ak.Array([[1, 2, 3], [], [4, 5]])[:, 0]\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/highlevel.py\", line 991, in __getitem__\r\n    tmp = ak._util.wrap(self.layout[where], self._behavior)\r\nValueError: in ListOffsetArray64 attempting to get 0, index out of range\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/1.10.0rc3/src/cpu-kernels/awkward_NumpyArray_getitem_next_at.cpp#L21)\r\n```\r\n\r\nnow look like this:\r\n\r\n```python\r\n>>> ak._v2.Array([[1, 2, 3], [], [4, 5]])[:, 0]\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/highlevel.py\", line 959, in __getitem__\r\n    out = self._layout[where]\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/contents/content.py\", line 488, in __getitem__\r\n    return self._getitem(where)\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/contents/content.py\", line 527, in _getitem\r\n    out = next._getitem_next(nextwhere[0], nextwhere[1:], None)\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/contents/regulararray.py\", line 426, in _getitem_next\r\n    nextcontent._getitem_next(nexthead, nexttail, advanced),\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/contents/listarray.py\", line 585, in _getitem_next\r\n    self._handle_error(\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/_v2/contents/content.py\", line 225, in _handle_error\r\n    raise ak._v2._util.indexerror(self, slicer, message)\r\nIndexError: while attempting to slice (from <stdin>, line 1)\r\n\r\n    <Array [[1, 2, 3], [], [4, 5]] type='3 * var * int64'>\r\n\r\nwith\r\n\r\n    (:, 0)\r\n\r\nat inner ListArray of length 3, using sub-slice 0.\r\n\r\nError details: index out of range while attempting to get index 0 (in compiled code: https://github.com/scikit-hep/awkward-1.0/blob/1.10.0rc3/src/cpu-kernels/awkward_NumpyArray_getitem_next_at.cpp#L21).\r\n```\r\n\r\n  4. This means putting error context information in a list, and the right context gets attached to a GPU function when it fails asynchronously.\r\n  5. We don't want that list of error contexts to contain references to all the array arguments to each function, since the memory use would explode.\r\n  6. The pretty-printed repr of the arrays uses far less memory, but the trade-off is memory use of storing the array versus string formatting computation time, even if there are no errors to report.\r\n  7. We decided in favor of making string representations of array arguments, since memory issues are more insidious (harder to debug) and `ak.*` functions aren't supposed to be called large numbers of times anyway\u2014that is, the number of high-level `ak.*` calls should be \u226a the number of entries in an array.\r\n\r\n# But...\r\n\r\nWhat's going on here shouldn't be related to that. Calling `__copy__` on an ak.Array isn't a high-level `ak.*` function. It's a low-level, public operation, like layout manipulations, which _should not_ be suffering from this penalty.\r\n\r\nSo what's going on here? It looks like our `ak._v2.Array.__copy__` isn't even implemented:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/03dd965bd1a87b350fe5285b7c50b59d3b563ec5/src/awkward/_v2/highlevel.py#L1417-L1427\r\n\r\nNote that the indentation of `__copy__` and `__deepcopy__` is not at class-level, but is nested within the function above it (`__setstate__`).\r\n\r\nThere are a lot of expensive things in your profile trace, not just the string formatting. It's also calling `ak.packed`, which is a high-level function, and that's unnecessarily collapsing your array for storage, because it's part of pickling (`__reduce_ex__`). Maybe the `copy` module pickles and unpickles an object to copy it when it can't find a `__copy__` method? (I would have thought it would do that for `deepcopy`, not `copy`.)\r\n\r\nSo to start with, I can fix the indentation of `__copy__` and `__deepcopy__`. This implementation does not trigger the error-handling routines (since it never touches any buffers, it can't raise an error asynchronously). But it seems pretty disturbing to me that \"forgetting to implement `__copy__`\" would take this detour. Maybe we should make the error-handling even more complicated and choose the \"reference array, make error message only when there's an error\" case when `nplike` is NumPy, or otherwise an eager evaluation, rather than a delayed one?",
  "created_at":"2022-09-13T22:55:19Z",
  "id":1246028588,
  "issue":1694,
  "node_id":"IC_kwDODBCWws5KROMs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T22:55:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I think that #1695 will directly address your issue, but the system is too close to the brink of this happening, if only missing a `__copy__` method would have triggered the error-handling routines that you see.\r\n\r\nCan you check it? I'll include it in 1.10.0rc4.",
  "created_at":"2022-09-13T23:04:48Z",
  "id":1246035816,
  "issue":1694,
  "node_id":"IC_kwDODBCWws5KRP9o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-13T23:04:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski we will fix this class of error with e.g. #1657 to add both type hints and `NotImplementedError` base implementations for these kinds of methods.",
  "created_at":"2022-09-14T09:55:38Z",
  "id":1246522300,
  "issue":1694,
  "node_id":"IC_kwDODBCWws5KTGu8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T09:55:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"> Can you check it? I'll include it in 1.10.0rc4.\r\n\r\nI can try. Do PRs here generate builds I can use?",
  "created_at":"2022-09-14T11:29:19Z",
  "id":1246628832,
  "issue":1694,
  "node_id":"IC_kwDODBCWws5KTgvg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T11:29:19Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"NONE",
  "body":"> Maybe the copy module pickles and unpickles an object to copy it when it can't find a __copy__ method? (I would have thought it would do that for deepcopy, not copy.)\r\n\r\nI don't think this is happening (or at least not exactly) since I wasn't seeing significant allocation during the shallow copy. Definitely not a full copy's worth",
  "created_at":"2022-09-14T11:31:53Z",
  "id":1246631289,
  "issue":1694,
  "node_id":"IC_kwDODBCWws5KThV5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T11:31:53Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"NONE",
  "body":"It took a few tries to install, but I think I got it working. Copy speeds are much faster now!\r\n\r\nHowever, would you expect `copy(awk)` to be doing much more than `copy(awk.layout)`? `copy(awk.layout)` seems ~20x faster.\r\n\r\n```ipython\r\nIn [3]: %%prun -s cumtime\r\n   ...: for _ in range(1000):\r\n   ...:     copy(awk)\r\n   ...: \r\n         43003 function calls (37003 primitive calls) in 0.133 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    0.133    0.133 {built-in method builtins.exec}\r\n        1    0.001    0.001    0.133    0.133 <string>:1(<module>)\r\n     1000    0.001    0.000    0.132    0.000 copy.py:66(copy)\r\n     1000    0.001    0.000    0.130    0.000 highlevel.py:1421(__copy__)\r\n     1000    0.002    0.000    0.129    0.000 highlevel.py:188(__init__)\r\n6000/2000    0.014    0.000    0.125    0.000 highlevel.py:1114(__setattr__)\r\n     6000    0.103    0.000    0.103    0.000 {built-in method builtins.dir}\r\n     1000    0.002    0.000    0.045    0.000 highlevel.py:335(behavior)\r\n     1000    0.001    0.000    0.041    0.000 highlevel.py:306(layout)\r\n     1000    0.002    0.000    0.005    0.000 _util.py:479(arrayclass)\r\n4000/2000    0.002    0.000    0.003    0.000 content.py:1203(purelist_parameter)\r\n     2000    0.001    0.000    0.002    0.000 listoffsetform.py:126(purelist_parameter)\r\n     3000    0.001    0.000    0.001    0.000 _util.py:82(isstr)\r\n     6000    0.001    0.000    0.001    0.000 {built-in method builtins.isinstance}\r\n     3000    0.001    0.000    0.001    0.000 {method 'startswith' of 'str' objects}\r\n     1000    0.000    0.000    0.000    0.000 _util.py:449(__init__)\r\n     2000    0.000    0.000    0.000    0.000 numpyform.py:179(purelist_parameter)\r\n     1000    0.000    0.000    0.000    0.000 content.py:72(parameter)\r\n     1000    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\r\n     1000    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\r\n     1000    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n \r\nIn [4]: %%prun -s cumtime\r\n   ...: for _ in range(1000):\r\n   ...:     copy(awk.layout)\r\n   ...: \r\n         14003 function calls in 0.007 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    0.007    0.007 {built-in method builtins.exec}\r\n        1    0.001    0.001    0.007    0.007 <string>:1(<module>)\r\n     1000    0.001    0.000    0.006    0.000 copy.py:66(copy)\r\n     1000    0.000    0.000    0.004    0.000 listoffsetarray.py:33(__copy__)\r\n     1000    0.001    0.000    0.004    0.000 listoffsetarray.py:17(copy)\r\n     1000    0.002    0.000    0.003    0.000 listoffsetarray.py:44(__init__)\r\n     1000    0.001    0.000    0.001    0.000 content.py:29(_init)\r\n     3000    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\r\n     1000    0.000    0.000    0.000    0.000 index.py:102(length)\r\n     1000    0.000    0.000    0.000    0.000 highlevel.py:262(layout)\r\n     1000    0.000    0.000    0.000    0.000 index.py:84(nplike)\r\n     1000    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\r\n     1000    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\r\n     1000    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n ```",
  "created_at":"2022-09-14T12:33:41Z",
  "id":1246696894,
  "issue":1694,
  "node_id":"IC_kwDODBCWws5KTxW-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T12:34:38Z",
  "user":"MDQ6VXNlcjgyMzg4MDQ="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ivirshup predominantly this is caused by a `x in dir(...)` check; we'll clean that up.",
  "created_at":"2022-09-14T13:24:53Z",
  "id":1246762093,
  "issue":1694,
  "node_id":"IC_kwDODBCWws5KUBRt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:24:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The high-level `ak.Array.__copy__` doesn't do much:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/b5545a8f07dfdd07dbb030a5ef9e08bb8f3ffcee/src/awkward/_v2/highlevel.py#L1421-L1422\r\n\r\ncompared to a typical `Content.__copy__` (each subclass is different, this is ListOffsetArray):\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/b5545a8f07dfdd07dbb030a5ef9e08bb8f3ffcee/src/awkward/_v2/contents/listoffsetarray.py#L17-L34\r\n\r\nBut the `ak.Array.__copy__` does go through the `ak.Array` constructor. It could be _more_ lightweight by bypassing that:\r\n\r\n```python\r\n    def __copy__(self): \r\n        cls = type(self)\r\n        out = cls.__new__(cls)\r\n        out.__dict__.update(self.__dict__)\r\n        return out\r\n```\r\n\r\nIt would skip the usual checks that ensure that `self._layout` is a layout, sets the `__class__` if there is a behavior overload, etc. These things should be pretty lightweight already, but in the particular case of a copy, we know exactly what to construct and could skip these checks.",
  "created_at":"2022-09-14T13:26:21Z",
  "id":1246764124,
  "issue":1694,
  "node_id":"IC_kwDODBCWws5KUBxc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:26:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> @ivirshup predominantly this is caused by a `x in dir(...)` check; we'll clean that up.\r\n\r\nIs the `x in dir(...)` invoked when looking at underscored attributes, like `self._layout`? Maybe skipping that would shave off more milliseconds, not just here in copy, but everywhere.",
  "created_at":"2022-09-14T13:27:52Z",
  "id":1246766045,
  "issue":1694,
  "node_id":"IC_kwDODBCWws5KUCPd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:27:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1695?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1695](https://codecov.io/gh/scikit-hep/awkward/pull/1695?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (894aa3f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.40%`.\n> The diff coverage is `84.45%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1695?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.42% <60.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.32% <60.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.89% <60.00%> (-0.02%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `70.76% <60.00%> (-0.13%)` | :arrow_down: |\n| ... and [53 more](https://codecov.io/gh/scikit-hep/awkward/pull/1695/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-14T09:14:43Z",
  "id":1246475007,
  "issue":1695,
  "node_id":"IC_kwDODBCWws5KS7L_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T10:38:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We might want to also make proper use of the `memo` dict here. Right now, a layout which re-uses the same buffers will (I assume) end up with multiple copies of these buffers. Just trying to figure out a nice interface.",
  "created_at":"2022-09-14T10:57:31Z",
  "id":1246595270,
  "issue":1695,
  "node_id":"IC_kwDODBCWws5KTYjG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T10:57:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks for the clean-ups! I checked each one and they are definitely improvements, though d02d9279c3dcb1ee2cc2cd82d19427ac992ad2c9 is not actually related to this PR.\r\n\r\nImmutable objects that take children in their constructor arguments (without [delayed initialization](https://stackoverflow.com/a/7486796/1623645)) can't have cycles, and we've made \"layouts are trees\" assumptions elsewhere, too. Nevertheless, I saw the code in the `copy` module that makes use of the `memo` argument before calling our `__deepcopy__`, so if we also do it, it would be redundant.\r\n\r\nAs you can see here:\r\n\r\nhttps://github.com/python/cpython/blob/4781535a5796838fc4ce88e6e669e8907e426685/Lib/copy.py#L128-L178\r\n\r\nPython's `copy.deepcopy` fills `memo` with `id(our_object)` (key) pointing to the copy that we return (value), unless it finds `id(our_object)` already in the `memo`, in which case it returns that. So all we need to do is make sure that the `memo` doesn't get lost (replaced with a new empty dict) during the recursive walk.\r\n\r\nSince your last commit was 2 hours ago, I can safely merge this.",
  "created_at":"2022-09-14T12:32:07Z",
  "id":1246695146,
  "issue":1695,
  "node_id":"IC_kwDODBCWws5KTw7q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T12:32:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> As you can see here:\r\n\r\nYes, I was working off memory at the time of writing that comment. After checking the spec, I then went on to open #1697 when concerned about reference _cycles_ (via mutable parameters), but subsequently recalled that we don't allow these, so it's a none-starter :)",
  "created_at":"2022-09-14T12:48:50Z",
  "id":1246716950,
  "issue":1695,
  "node_id":"IC_kwDODBCWws5KT2QW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T12:49:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Not sure what I was testing, but this actually does work! :fireworks: It would only be an issue at the outermost dimension, and we return the lengths from `to_buffers` for this.",
  "created_at":"2022-09-14T09:41:09Z",
  "id":1246505264,
  "issue":1696,
  "node_id":"IC_kwDODBCWws5KTCkw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T09:41:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"You're right: `zeros_length` should _not_ be part of RegularForm because Forms don't encode lengths.\r\n\r\nThe round trip should work, though it depends on outside-of-Form information, the `length` parameter passed to `from_buffers`. The length of an embedded RegularArray might be computed from the original `length` that the user passes (not identical to it), but it's ultimately derived from that `length`.",
  "created_at":"2022-09-14T13:16:23Z",
  "id":1246750808,
  "issue":1696,
  "node_id":"IC_kwDODBCWws5KT-hY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:16:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, everything currently works as expected. This was probably me forgetting about the top-level `length` item that `to_buffers` returns; required to avoid this issue.",
  "created_at":"2022-09-14T14:03:34Z",
  "id":1246813896,
  "issue":1696,
  "node_id":"IC_kwDODBCWws5KUN7I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T14:03:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1697?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1697](https://codecov.io/gh/scikit-hep/awkward/pull/1697?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5f08a37) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.43%`.\n> The diff coverage is `87.18%`.\n\n> :exclamation: Current head 5f08a37 differs from pull request most recent head 355995d. Consider uploading reports for the commit 355995d to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1697?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2Zvcm0ucHk=) | `82.95% <68.51%> (-7.80%)` | :arrow_down: |\n| [src/awkward/\\_v2/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2hpZ2hsZXZlbC5weQ==) | `72.09% <72.72%> (+0.25%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL2VtcHR5Zm9ybS5weQ==) | `76.47% <75.00%> (+1.08%)` | :arrow_up: |\n| [src/awkward/\\_v2/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2Zvcm1zL3VuaW9uZm9ybS5weQ==) | `73.75% <75.00%> (+0.57%)` | :arrow_up: |\n| ... and [51 more](https://codecov.io/gh/scikit-hep/awkward/pull/1697/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-14T12:29:47Z",
  "id":1246692338,
  "issue":1697,
  "node_id":"IC_kwDODBCWws5KTwPy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T12:46:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Given that we just don't allow cycles in `parameters`, this is not required.",
  "created_at":"2022-09-14T12:49:50Z",
  "id":1246718196,
  "issue":1697,
  "node_id":"IC_kwDODBCWws5KT2j0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T12:49:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, so that was the motivation for this!\r\n\r\nThis was looking to me like an abstraction of `__deepcopy__` from a computational implementation, \"deepcopy does such-and-such an algorithm,\" to a declarative specification: \"these attributes are deep and those are shallow, a single algorithm for all layouts uses this fact.\" I didn't think this abstraction was necessary if it was _only_ for `__deepcopy__`, but if there was some other reason for it, then maybe it would help to have this information around.\r\n\r\nBut if your goal was just for `__deepcopy__` and you don't have any other operations in mind, then I agree that this is probably overkill.",
  "created_at":"2022-09-14T13:06:53Z",
  "id":1246738826,
  "issue":1697,
  "node_id":"IC_kwDODBCWws5KT7mK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:06:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1698?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1698](https://codecov.io/gh/scikit-hep/awkward/pull/1698?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eef49bd) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.40%`.\n> The diff coverage is `84.45%`.\n\n> :exclamation: Current head eef49bd differs from pull request most recent head 6616438. Consider uploading reports for the commit 6616438 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1698?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.42% <60.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.32% <60.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.89% <60.00%> (-0.02%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `70.76% <60.00%> (-0.13%)` | :arrow_down: |\n| ... and [53 more](https://codecov.io/gh/scikit-hep/awkward/pull/1698/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-14T13:16:36Z",
  "id":1246751059,
  "issue":1698,
  "node_id":"IC_kwDODBCWws5KT-lT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:16:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"NB - this PR is now placing more importance on `behavior` being None if the user wants `ak.behavior` - now we deepcopy this, which would be expensive if we are currently passing around `ak.behavior` explicitly.",
  "created_at":"2022-09-14T13:27:33Z",
  "id":1246765632,
  "issue":1698,
  "node_id":"IC_kwDODBCWws5KUCJA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:27:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Presumably, if someone actually says\r\n\r\n```python\r\nmy_new_array = copy.deepcopy(my_awk_array)\r\n```\r\n\r\nthen they don't want `my_new_array` to share data with `my_awk_array`.\r\n\r\n**But**, behaviors contain class objects and functions. We don't want them to be copied.\r\n\r\n```python\r\n>>> import copy\r\n>>> def some_function(x): return x\r\n... \r\n>>> class SomeClass: pass\r\n... \r\n>>> behavior = {\"function\": some_function, \"class\": SomeClass, some_function: \"as key\"}\r\n>>> copied_behavior = copy.deepcopy(behavior)\r\n>>> behavior[\"function\"] is copied_behavior[\"function\"]\r\nTrue\r\n>>> behavior[\"class\"] is copied_behavior[\"class\"]\r\nTrue\r\n>>> list(behavior.keys())[2]\r\n<function some_function at 0x1057c7e20>\r\n>>> list(behavior.keys())[2] is list(copied_behavior.keys())[2]\r\nTrue\r\n```\r\n\r\nOkay: they're not.",
  "created_at":"2022-09-14T13:36:28Z",
  "id":1246777095,
  "issue":1698,
  "node_id":"IC_kwDODBCWws5KUE8H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:36:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Okay: they're not.\r\n\r\nYes, right now this would only be an issue if a user is passing an instance _method_ (or other non-atomically copied value) into `ak.behavior`, e.g.\r\n\r\n```python\r\nclass SpecialAdder:\r\n    def add(self, x, y):\r\n        ...\r\n\r\nak.behavior[np.add, \"point\", \"point\"] = SpecialAdder().add\r\n```\r\n\r\nWhilst I don't anticipate this, I think it's worth discussing it up-front in case we this these kinds of issues later.",
  "created_at":"2022-09-14T13:45:05Z",
  "id":1246788710,
  "issue":1698,
  "node_id":"IC_kwDODBCWws5KUHxm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:45:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1699?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1699](https://codecov.io/gh/scikit-hep/awkward/pull/1699?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (946ae57) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.39%`.\n> The diff coverage is `84.02%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1699?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.42% <60.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.32% <60.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.89% <60.00%> (-0.02%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `70.76% <60.00%> (-0.13%)` | :arrow_down: |\n| ... and [53 more](https://codecov.io/gh/scikit-hep/awkward/pull/1699/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-14T13:52:39Z",
  "id":1246798800,
  "issue":1699,
  "node_id":"IC_kwDODBCWws5KUKPQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:52:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Wait\u2014are we sure that\r\n\r\n```python\r\n        if where in dir(type(self)):\r\n```\r\n\r\nis equivalent to\r\n\r\n```python\r\n        if hasattr(type(self), where):\r\n```\r\n\r\nThe record fields are accessible via get-attribute (like `my_array.my_physics_column`). We want `__getattr__`, `__setattr__`, `__dir__` to agree on the set of attributes as including these record fields. If they disagree, it gets confusing.\r\n\r\nIs this PR breaking that relationship?",
  "created_at":"2022-09-14T13:44:02Z",
  "id":1246787250,
  "issue":1700,
  "node_id":"IC_kwDODBCWws5KUHay",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:44:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Wait\u2014are we sure that\r\n> \r\n> ```python\r\n>         if where in dir(type(self)):\r\n> ```\r\n> \r\n> is equivalent to\r\n> \r\n> ```python\r\n>         if hasattr(type(self), where):\r\n> ```\r\n\r\nWell, this is the tricky part. `dir` is only supposed to show _relevant_ attributes rather than a comprehensive set (although, oftentimes it uses the default impl which is comprehensive). NB it's also the `type.__dir__` that we look at here, not `self.__dir__`\r\n\r\nThis code allows the user to set existing _type_-declared fields, or private attributes. Otherwise, they need to be trying to set an existing field name. This seems like the right approach; we want _only_ fields to be immutable, and we don't want fields to shadow existing Array attributes (otherwise third-party consumers of arrays might run into trouble, e.g. if the user adds a `fields` field)! \r\n\r\nSo, the specification defined here is:\r\n- allow users to write to the private attributes (`_XXX`), which are prohibited by convention for external use\r\n- allow users to write to public type-level attributes (including attributes that override the `ak.Array` attributes, e.g. if a user defined their own behavior with `def fields`). Users should not do this, rather than us trying to validate things?\r\n- prevent users from writing any other fields\r\n\r\nSo, we don't go as far as preventing records from containing private-shadowing fields (e.g. `\"_layout_`) or behaviours overriding the base `ak.Array` type interface.",
  "created_at":"2022-09-14T13:48:46Z",
  "id":1246793713,
  "issue":1700,
  "node_id":"IC_kwDODBCWws5KUI_x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:53:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We were careful to make sure that it doesn't overshadow:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> array = ak._v2.Array([{\"fields\": 1, \"field\": 2}])\r\n>>> array.fields\r\n['fields', 'field']\r\n>>> array.field\r\n<Array [2] type='1 * int64'>\r\n```\r\n\r\nThis is in the order of tests in\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/b5545a8f07dfdd07dbb030a5ef9e08bb8f3ffcee/src/awkward/_v2/highlevel.py#L1098-L1112\r\n\r\n(We're taking advantage of the difference between [`__getattr__`](https://docs.python.org/3/reference/datamodel.html#object.__getattr__) and [`__getattribute__`](https://docs.python.org/3/reference/datamodel.html#object.__getattribute__), cf [here](https://stackoverflow.com/q/3278077/1623645).)",
  "created_at":"2022-09-14T13:55:41Z",
  "id":1246802919,
  "issue":1700,
  "node_id":"IC_kwDODBCWws5KULPn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:55:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> We were careful to make sure that it doesn't overshadow:\r\n> \r\n> ```python\r\n> >>> import awkward as ak\r\n> >>> array = ak._v2.Array([{\"fields\": 1, \"field\": 2}])\r\n> >>> array.fields\r\n> ['fields', 'field']\r\n> >>> array.field\r\n> <Array [2] type='1 * int64'>\r\n> ```\r\n> \r\n> This is in the order of tests in\r\n\r\nYes, indeed. What I mean here is that we don't do any validation at any stage to prevent this, we just implement the get/set behaviour such that users can't break anything. That means in this context, setting an attribute always succeeds if it's the name of an `ak.Array`-\"approved\" attribute. This means that users could still confuse themselves if they create a \"bad\" record-array, but unless we validate early, we just need to use docs for this.\r\n",
  "created_at":"2022-09-14T13:58:04Z",
  "id":1246806072,
  "issue":1700,
  "node_id":"IC_kwDODBCWws5KUMA4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T13:58:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, we're in agreement about what it's supposed to do. When the dust settles, let's just make sure that all of your bullet points in https://github.com/scikit-hep/awkward/pull/1700#issuecomment-1246793713 are still satisfied.",
  "created_at":"2022-09-14T14:04:40Z",
  "id":1246815544,
  "issue":1700,
  "node_id":"IC_kwDODBCWws5KUOU4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T14:04:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1700?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1700](https://codecov.io/gh/scikit-hep/awkward/pull/1700?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (241cb2e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.41%`.\n> The diff coverage is `84.74%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1700?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.42% <60.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.32% <60.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.89% <60.00%> (-0.02%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `70.76% <60.00%> (-0.13%)` | :arrow_down: |\n| ... and [54 more](https://codecov.io/gh/scikit-hep/awkward/pull/1700/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-14T14:10:24Z",
  "id":1246823860,
  "issue":1700,
  "node_id":"IC_kwDODBCWws5KUQW0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T15:39:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"So this is an approval; go ahead and merge!\r\n\r\nIf I don't hear back, I'll \"update branch\" and \"enable auto-merge (squash)\", to do extra testing and give about 10 minutes to intercept, if you have something else to add.",
  "created_at":"2022-09-14T15:20:18Z",
  "id":1246929299,
  "issue":1700,
  "node_id":"IC_kwDODBCWws5KUqGT",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-14T15:20:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski that's a good point actually; microseconds are the finest granularity that we can reason about with date-time objects. As this is all Python-iteration anyway, users can always write a loop to transform these things if they need to for some reason.",
  "created_at":"2022-09-14T15:36:52Z",
  "id":1246951888,
  "issue":1701,
  "node_id":"IC_kwDODBCWws5KUvnQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-14T15:36:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I just noticed the issue number:\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/190206053-ff686390-428d-4891-8206-6e4e9a4feb03.png)\r\n",
  "created_at":"2022-09-14T16:07:38Z",
  "id":1246991034,
  "issue":1701,
  "node_id":"IC_kwDODBCWws5KU5K6",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2022-09-14T16:07:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #1721",
  "created_at":"2022-09-24T12:49:51Z",
  "id":1256961543,
  "issue":1701,
  "node_id":"IC_kwDODBCWws5K67YH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T12:49:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1705?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1705](https://codecov.io/gh/scikit-hep/awkward/pull/1705?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5c1e1f2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.41%`.\n> The diff coverage is `84.74%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1705?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.42% <60.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.32% <60.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.89% <60.00%> (-0.02%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `70.76% <60.00%> (-0.13%)` | :arrow_down: |\n| ... and [54 more](https://codecov.io/gh/scikit-hep/awkward/pull/1705/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-19T17:44:04Z",
  "id":1251340896,
  "issue":1705,
  "node_id":"IC_kwDODBCWws5KlfJg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-19T17:44:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Superseded by #1740.",
  "created_at":"2022-09-27T17:28:05Z",
  "id":1259826431,
  "issue":1705,
  "node_id":"IC_kwDODBCWws5LF2z_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T17:28:05Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1706?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1706](https://codecov.io/gh/scikit-hep/awkward/pull/1706?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5fbdbff) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.41%`.\n> The diff coverage is `84.74%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1706?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.42% <60.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.32% <60.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.89% <60.00%> (-0.02%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `70.76% <60.00%> (-0.13%)` | :arrow_down: |\n| ... and [54 more](https://codecov.io/gh/scikit-hep/awkward/pull/1706/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-19T21:53:21Z",
  "id":1251601862,
  "issue":1706,
  "node_id":"IC_kwDODBCWws5Kme3G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-19T21:53:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I've assigned it to you, @agoose77, so that you can take a first look (since you wrote #1679), but I can look at it too, with you, if you want.",
  "created_at":"2022-09-20T16:22:02Z",
  "id":1252595151,
  "issue":1707,
  "node_id":"IC_kwDODBCWws5KqRXP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-20T16:22:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> but if the parameter values are dicts, rather something hashable, like strings, the implementation fails.\r\n\r\nAn oversight on my part. \r\n\r\n> The operator.and_ is a bitwise & operator\u2014I doubt that's what you want there. I think this can be done more simply in a for loop.\r\n\r\nYes, in the case of `set()`,  [`x & y` computes the intersection of `x` and `y`](https://docs.python.org/3/library/stdtypes.html#frozenset.intersection)",
  "created_at":"2022-09-20T17:35:15Z",
  "id":1252687111,
  "issue":1707,
  "node_id":"IC_kwDODBCWws5Kqn0H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-20T17:35:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1708?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1708](https://codecov.io/gh/scikit-hep/awkward/pull/1708?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (62dfcdc) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.38%`.\n> The diff coverage is `84.98%`.\n\n> :exclamation: Current head 62dfcdc differs from pull request most recent head d47df3d. Consider uploading reports for the commit d47df3d to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1708?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.42% <60.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.32% <60.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.89% <60.00%> (-0.02%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `70.76% <60.00%> (-0.13%)` | :arrow_down: |\n| ... and [56 more](https://codecov.io/gh/scikit-hep/awkward/pull/1708/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-20T18:15:42Z",
  "id":1252736352,
  "issue":1708,
  "node_id":"IC_kwDODBCWws5Kqz1g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-21T15:25:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"## Parameter coalescence\r\nIn `numpy.py`, we have this call to `RegularArray.maybe_toNumpyArray()`\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/ca1b9d7835570af8a11fe7af61a7c53d095a80e2/src/awkward/_v2/_connect/numpy.py#L147\r\n\r\nUltimately, in the case that a `RegularArray` contains a 1D `NumpyArray` with parameters, `RegularArray.maybe_toNumpyArray()` is promoting the parameters from the inner 1D `NumpyArray` layout to an outer 2D `NumpyArray` node. This means that the `_getitem_nothing()` call that finalises the broadcast unpacking stage strips the parameters, and we lose them.\r\n\r\nwhy do we do call `maybe_toNumpyArray()` here? Is it just a short-circuit to stop recursion once we have all (maybe ND) Numpy arrays? I wrote out an answer of how to fix this, but actually the simplest fix is to just keep recursing until we end up at the leaf 1D `NumpyArray` nodes, which maintains the tree structure and its parameters.\r\n\r\nI've added a tentative fix in d47df3d\r\n\r\n## Custom ufuncs\r\nIncidentally, I also observed that we don't test for custom ufuncs until after checking for NumPy arrays, so `RegularArray`s that are strings don't behave properly:\r\n```python\r\n>>> array = ak.to_regular(ak.Array([\"this\", \"that\"]))\r\n>>> print(array + array)\r\n[[232, 208, 210, 230], [232, 208, 194, 232]]\r\n```\r\n\r\nI'd also want to fix this here too. Note that the fix in d47df3d also fixes this issue too.\r\n\r\nSome additional questions that this spawned:\r\n- why do we overload `__add__` on the `char` behaviour instead of using a NumPy ufunc overload?\r\n- If we support adding chars to chars, why don't we support adding string arrays to string arrays via ufunc? Is it just where we draw the line w.r.t string handling?\r\n",
  "created_at":"2022-09-21T14:45:44Z",
  "id":1253817552,
  "issue":1708,
  "node_id":"IC_kwDODBCWws5Ku7zQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-21T15:09:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Some additional questions that this spawned:\r\n> \r\n> * why do we overload `__add__` on the `char` behaviour instead of using a NumPy ufunc overload?\r\n> * If we support adding chars to chars, why don't we support adding string arrays to string arrays via ufunc? Is it just where we draw the line w.r.t string handling?\r\n\r\nThere needs to be a\r\n\r\n```python\r\nak.behavior[np.add, \"string, \"string\"]\r\nak.behavior[np.add, \"bytestring, \"bytestring\"]\r\n```\r\n\r\noverload here: at least to prohibit character addition (i.e. add `1` to `\"HAL\"` to get `\"IBM\"`). That's not how we conceptualize strings anymore. Eventually, `np.add` should be overloaded for strings and bytestrings to do concatenation, since that's what people _do_ expect nowadays. Most of the others, like `np.log`, should just be prohibited. We might want to apply a blanket prohibition on ufuncs on strings, then poke holes in it by adding features like \"`+` means concatenation\".",
  "created_at":"2022-09-21T18:45:04Z",
  "id":1254093117,
  "issue":1708,
  "node_id":"IC_kwDODBCWws5Kv_E9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-21T18:45:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"So, I'm taking your reply to mean that we should long-term replace the behaviour class magic methods with overloads of `np.ufunc`? We can do that :)",
  "created_at":"2022-09-21T19:10:00Z",
  "id":1254117884,
  "issue":1708,
  "node_id":"IC_kwDODBCWws5KwFH8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-21T19:10:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yeah, I was referring to strings specifically, but it's also true that they have to be implemented as behaviors, rather than Python methods, so that they apply when the node in question is not the top-most.\r\n\r\nHaving `+` work for an array of strings but not an array of lists of strings would be surprising.",
  "created_at":"2022-09-21T20:49:33Z",
  "id":1254213232,
  "issue":1708,
  "node_id":"IC_kwDODBCWws5KwcZw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-21T20:49:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Since this is merged, we should be able to delete the [agoose77/fix-broadcasting-non-hashable](https://github.com/scikit-hep/awkward/tree/agoose77/fix-broadcasting-non-hashable) branch, right?",
  "created_at":"2022-09-23T00:42:34Z",
  "id":1255689437,
  "issue":1708,
  "node_id":"IC_kwDODBCWws5K2Ezd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T00:42:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, I hadn't realised it was already merged when I pushed the new test!",
  "created_at":"2022-09-23T08:02:55Z",
  "id":1255908650,
  "issue":1708,
  "node_id":"IC_kwDODBCWws5K26Uq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T08:02:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Nevermind! It's fixed in #1708!\r\n\r\n```python\r\n>>> import awkward._v2 as ak\r\n>>> array = ak.with_parameter(ak.Array([1, 2, 3]), \"attrs\", {\"not\": \"hashable\"})\r\n>>> array\r\n<Array [1, 2, 3] type='3 * int64[parameters={\"attrs\": {\"not\": \"hashable\"}}]'>\r\n>>> array + array\r\n<Array [2, 4, 6] type='3 * int64[parameters={\"attrs\": {\"not\": \"hashable\"}}]'>\r\n```\r\n\r\nSorry that I didn't see that, @agoose77.",
  "created_at":"2022-09-21T19:01:09Z",
  "id":1254108033,
  "issue":1710,
  "node_id":"IC_kwDODBCWws5KwCuB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-21T19:01:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1712?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1712](https://codecov.io/gh/scikit-hep/awkward/pull/1712?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (698dbf9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.02%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1712?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1712/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-21T19:29:39Z",
  "id":1254137485,
  "issue":1712,
  "node_id":"IC_kwDODBCWws5KwJ6N",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T21:17:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"1.10.1 is done, so this is ready to go!",
  "created_at":"2022-09-24T20:35:32Z",
  "id":1257061272,
  "issue":1712,
  "node_id":"IC_kwDODBCWws5K7TuY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T20:35:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #1717",
  "created_at":"2022-09-27T12:45:42Z",
  "id":1259454713,
  "issue":1713,
  "node_id":"IC_kwDODBCWws5LEcD5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T12:45:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1715?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1715](https://codecov.io/gh/scikit-hep/awkward/pull/1715?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c253158) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1715?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.38% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1715/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-22T14:22:04Z",
  "id":1255100217,
  "issue":1715,
  "node_id":"IC_kwDODBCWws5Kz085",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T20:52:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't understand what went wrong in that one test (`no: command not found`?), but maybe it's intermittent. I've set this to auto-merge.",
  "created_at":"2022-09-24T18:52:11Z",
  "id":1257043335,
  "issue":1715,
  "node_id":"IC_kwDODBCWws5K7PWH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T18:52:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"And then un-set it when that didn't work. But I see now that it's #1722 that will fix this and the others.",
  "created_at":"2022-09-24T20:35:04Z",
  "id":1257061213,
  "issue":1715,
  "node_id":"IC_kwDODBCWws5K7Ttd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T20:35:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1716?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1716](https://codecov.io/gh/scikit-hep/awkward/pull/1716?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (90d5ad0) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.02%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1716?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1716/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-22T14:29:20Z",
  "id":1255110750,
  "issue":1716,
  "node_id":"IC_kwDODBCWws5Kz3he",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T21:54:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Out of curiosity, does this make it possible to run all the tests in parallel (pytest-xdist)?\r\n\r\nI'm not sure if this was already possible without this PR, but I've been able to run `xdist` with 8 workers successfully!",
  "created_at":"2022-09-26T20:59:21Z",
  "id":1258625631,
  "issue":1716,
  "node_id":"IC_kwDODBCWws5LBRpf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T20:59:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"There was a point, not long in the past, when it wasn't possible; everything would break, quite impressively. When I first found out about pytest-xdist, I decided to try it, saw the mess, and then realized that we were making serial assumptions in the testing code.\r\n\r\nThe use of global `ak.behavior` _should_ break it. If parallel tests were possible before this PR, they would have been inadvisable. Dropping v1 tests might also have made a big difference.\r\n\r\nBut knowing that it works now is the bottom line!",
  "created_at":"2022-09-26T21:08:10Z",
  "id":1258634020,
  "issue":1716,
  "node_id":"IC_kwDODBCWws5LBTsk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T21:08:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, I actually started this PR after recalling behaviours were one set of global state that I'd seen inhibiting parallelism. I never checked xdist against the original v2 only suite, but as you say, it's a win either way.\r\n",
  "created_at":"2022-09-27T06:39:34Z",
  "id":1259052078,
  "issue":1716,
  "node_id":"IC_kwDODBCWws5LC5wu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T06:39:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1717?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1717](https://codecov.io/gh/scikit-hep/awkward/pull/1717?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6076c14) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `0.38%`.\n> The diff coverage is `84.98%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1717?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2pheC9fX2luaXRfXy5weQ==) | `90.47% <\u00f8> (+1.58%)` | :arrow_up: |\n| [src/awkward/\\_v2/config.py](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbmZpZy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_v2/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfYnJvYWRjYXN0X2FycmF5cy5weQ==) | `100.00% <\u00f8> (+4.34%)` | :arrow_up: |\n| [src/awkward/\\_v2/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdHJhbnNmb3JtLnB5) | `65.51% <\u00f8> (+56.89%)` | :arrow_up: |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | `84.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2JlaGF2aW9ycy9jYXRlZ29yaWNhbC5weQ==) | `73.13% <60.00%> (-8.94%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2JpdG1hc2tlZGFycmF5LnB5) | `71.42% <60.00%> (-0.11%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2J5dGVtYXNrZWRhcnJheS5weQ==) | `88.32% <60.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL2xpc3RhcnJheS5weQ==) | `91.89% <60.00%> (-0.02%)` | :arrow_down: |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | `70.76% <60.00%> (-0.13%)` | :arrow_down: |\n| ... and [56 more](https://codecov.io/gh/scikit-hep/awkward/pull/1717/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-22T14:43:57Z",
  "id":1255131384,
  "issue":1717,
  "node_id":"IC_kwDODBCWws5Kz8j4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T22:50:37Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"To answer your question from issue #1713, yes, Manasvi definitely qualifies as an author and I think she should be added to the list.\r\n\r\nIs this good with you, @ManasviGoyal? Would you prefer a different email and do you have an ORCID? If you don't have an ORCID, it's easy to set one up: https://orcid.org/ This is a unique identifier that links all of your academic publications.",
  "created_at":"2022-09-22T15:56:42Z",
  "id":1255230666,
  "issue":1717,
  "node_id":"IC_kwDODBCWws5K0UzK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T15:56:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> To answer your question from issue #1713, yes, Manasvi definitely qualifies as an author and I think she should be added to the list.\r\n> \r\n> Is this good with you, @ManasviGoyal? Would you prefer a different email and do you have an ORCID? If you don't have an ORCID, it's easy to set one up: https://orcid.org/ This is a unique identifier that links all of your academic publications.\r\n\r\nYes, @jpivarski this email works. I have set up an ORCID. here is the link - https://orcid.org/0000-0001-6321-7491. @agoose77 please add this too. Thanks.",
  "created_at":"2022-09-22T16:12:24Z",
  "id":1255249653,
  "issue":1717,
  "node_id":"IC_kwDODBCWws5K0Zb1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T16:12:24Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"MEMBER",
  "body":"Great! Then I'll merge the new author list.",
  "created_at":"2022-09-23T00:56:19Z",
  "id":1255696597,
  "issue":1717,
  "node_id":"IC_kwDODBCWws5K2GjV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T00:56:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 I was checking the doi link and noticed that the authors and the commits on zenodo are not up to date with the changes made to the `CITATION.cff`. Just wanted to bring it to your notice if it's something unusual. Thanks.",
  "created_at":"2022-09-24T00:53:29Z",
  "id":1256820646,
  "issue":1717,
  "node_id":"IC_kwDODBCWws5K6Y-m",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T00:54:52Z",
  "user":"MDQ6VXNlcjU1MTAxODI1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I believe the Zenodo information will update when we next make a release, right @jpivarski?",
  "created_at":"2022-09-24T13:00:39Z",
  "id":1256963290,
  "issue":1717,
  "node_id":"IC_kwDODBCWws5K67za",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T13:00:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, that's correct. I discovered it experimentally yesterday with Uproot: adding a CITATION.cff when there hasn't been one before had no effect on Zenodo until I made a release. Uproot releases take a few minutes to make, but Awkward takes 4 hours, though maybe that will be a bit less (1 hour?) with v1 dropped. We'll be making such a release soon, and I can make sure to tell you when that happens.",
  "created_at":"2022-09-24T13:24:09Z",
  "id":1256968185,
  "issue":1717,
  "node_id":"IC_kwDODBCWws5K68_5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T13:24:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Numba type objects have to be distinct from `ak.types.Type` objects. Numba types are subclasses of `nb.Type` and have to be one-to-one with the concrete layouts used in lowered code, which makes them closer to Forms, but there are nagging differences with respect to Forms (no List/ListOffset distinction, no equivalent of Union).\r\n\r\nMaybe I'm misreading this, but there can be no unification of Numba type objects (return value of `ak.Array.numba_type`) and Awkward types (return value of `ak.Array.type`). _Maybe_ the Numba type should even be private/hidden? No, downstream dependencies like Vector need to access it.\r\n\r\nWe can reopen this if you meant something else or I'm missing something.",
  "created_at":"2022-09-22T16:40:46Z",
  "id":1255283028,
  "issue":1719,
  "node_id":"IC_kwDODBCWws5K0hlU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T16:40:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I am literally referring to the `NumbaType.type` vs `ArrayType.content` distinction. It's a superficial issue.\r\n\r\nVector _does_ use this interface during lowering: https://github.com/scikit-hep/vector/blob/8a68c9a7093d3f89291d619fe10e416aacdacd95/src/vector/backends/awkward.py#L1818-L1823",
  "created_at":"2022-09-22T17:34:17Z",
  "id":1255340352,
  "issue":1719,
  "node_id":"IC_kwDODBCWws5K0vlA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T17:34:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, the fact that children are named \"type\" in NumbaType and \"content\" everywhere else in Awkward (and that was an intentional synchronization for Content, Form, Type in v2).\r\n\r\nIn fact, there's a potential conflict of conventions, since these are also Numba types. Numba tends to call children of lists \"`dtype`\". But since those aren't NumPy dtypes, we probably shouldn't continue with that convention.\r\n\r\nI'd rather not rock the boat in the Numba implementation, and the Numba types aren't parallel enough with Content/Form/Type that I feel the need to synchronize them. My preference would be to ignore this, as we have a lot of other issues to consider.",
  "created_at":"2022-09-22T17:39:55Z",
  "id":1255347328,
  "issue":1719,
  "node_id":"IC_kwDODBCWws5K0xSA",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-22T17:39:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"That's fine. I'm just trying to create more work for us, because I'm worried that we're slacking /s ;)",
  "created_at":"2022-09-22T17:41:10Z",
  "id":1255348897,
  "issue":1719,
  "node_id":"IC_kwDODBCWws5K0xqh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-22T17:41:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1721?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1721](https://codecov.io/gh/scikit-hep/awkward/pull/1721?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7827450) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1721?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.38% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1721/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-23T08:49:29Z",
  "id":1255951373,
  "issue":1721,
  "node_id":"IC_kwDODBCWws5K3EwN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T16:52:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> I've just refactored the commits in #1690 so that move operations are preserved. You can confirm that this PR does not change the result with\r\n> \r\n> ```shell\r\n> git diff 0c075e1f0d3f35a703d8a36ede0541b297dadae6 6e696b1f91030ffa6871b638d844fbcd76a9b914\r\n> ```\r\n\r\nI'm unable to verify that these commits are the same, and I can't find 0c075e1f0d3f35a703d8a36ede0541b297dadae6 in this branch. (So `fatal: bad object 0c075e1f0d3f35a703d8a36ede0541b297dadae6`.)\r\n\r\nI'm okay with closing #1690 and merging this PR into `main`, using the non-squashy method you have in mind. (I'm not quite gliterate enough to trust myself to do that, with all of these rebasings. I'd like you to press the button.)\r\n\r\nI'd feel a little more secure if there is a https://github.com/scikit-hep/awkward/compare URL that shows the final #1690 commit is equal to one of these commits, and then I can look at the further diffs beyond it that are only here to be certain what happened after that. I just rechecked the last commit of #1690 (6e696b1f91030ffa6871b638d844fbcd76a9b914) and I'm on board up to that point.",
  "created_at":"2022-09-23T16:51:03Z",
  "id":1256439171,
  "issue":1721,
  "node_id":"IC_kwDODBCWws5K472D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T16:51:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Followed your advice on Slack:\r\n\r\n```\r\n% git checkout agoose77/excise-v1-merge\r\n% git pull \r\nremote: Enumerating objects: 5, done.\r\nremote: Counting objects: 100% (5/5), done.\r\nremote: Compressing objects: 100% (2/2), done.\r\nremote: Total 5 (delta 3), reused 5 (delta 3), pack-reused 0\r\nUnpacking objects: 100% (5/5), 510 bytes | 72.00 KiB/s, done.\r\nFrom https://github.com/scikit-hep/awkward\r\n   fc1427ab..78274500  agoose77/excise-v1-merge -> origin/agoose77/excise-v1-merge\r\nUpdating fc1427ab..78274500\r\nFast-forward\r\n src/awkward/__init__.py | 4 ++--\r\n 1 file changed, 2 insertions(+), 2 deletions(-)\r\n% git diff 78274500975cd337cb52c551bf39252075d70680 6e696b1f91030ffa6871b638d844fbcd76a9b914\r\ndiff --git a/src/awkward/__init__.py b/src/awkward/__init__.py\r\nindex 6c98b8af..27df449f 100644\r\n--- a/src/awkward/__init__.py\r\n+++ b/src/awkward/__init__.py\r\n@@ -41,8 +41,8 @@ import awkward.behaviors.mixins\r\n import awkward.behaviors.string\r\n \r\n behavior = {}\r\n-awkward.behaviors.string.register(behavior)  # noqa: F405\r\n-awkward.behaviors.categorical.register(behavior)  # noqa: F405\r\n+awkward.behaviors.string.register(behavior)  # noqa: F405 pylint: disable=E0602\r\n+awkward.behaviors.categorical.register(behavior)  # noqa: F405 pylint: disable=E0602\r\n \r\n # operations\r\n from awkward.operations import *\r\n```\r\n\r\nThis looks good! You have my approval to merge this into `main` using the method that you have in mind, to preserve the history but collapse the \"drop v1\" work into one or a few commits on the `main` branch.\r\n\r\nThanks again!",
  "created_at":"2022-09-23T17:21:11Z",
  "id":1256465225,
  "issue":1721,
  "node_id":"IC_kwDODBCWws5K5CNJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-23T17:21:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"So, this PR has `HEAD` of 78274500975cd337cb52c551bf39252075d70680. The original and reviewed PR has HEAD 6e696b1f91030ffa6871b638d844fbcd76a9b914. So, the diff between two is\r\n```bash\r\ngit diff 78274500975cd337cb52c551bf39252075d70680 6e696b1f91030ffa6871b638d844fbcd76a9b914\r\n```\r\nwhich yields\r\n```diff\r\ndiff --git a/src/awkward/__init__.py b/src/awkward/__init__.py\r\nindex 6c98b8af..27df449f 100644\r\n--- a/src/awkward/__init__.py\r\n+++ b/src/awkward/__init__.py\r\n@@ -41,8 +41,8 @@ import awkward.behaviors.mixins\r\n import awkward.behaviors.string\r\n\r\n behavior = {}\r\n-awkward.behaviors.string.register(behavior)  # noqa: F405\r\n-awkward.behaviors.categorical.register(behavior)  # noqa: F405\r\n+awkward.behaviors.string.register(behavior)  # noqa: F405 pylint: disable=E0602\r\n+awkward.behaviors.categorical.register(behavior)  # noqa: F405 pylint: disable=E0602\r\n\r\n # operations\r\n from awkward.operations import *\r\n ```\r\n\r\nTherefore I'm happy to rebase-and-merge.",
  "created_at":"2022-09-24T12:48:02Z",
  "id":1256961218,
  "issue":1721,
  "node_id":"IC_kwDODBCWws5K67TC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T12:48:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1722?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1722](https://codecov.io/gh/scikit-hep/awkward/pull/1722?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (36ddcd6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1722?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.38% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1722/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-24T13:55:10Z",
  "id":1256974846,
  "issue":1722,
  "node_id":"IC_kwDODBCWws5K6-n-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T13:55:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, I suspected originally this is what they recommended; we've been around for a while ;)",
  "created_at":"2022-09-24T20:39:39Z",
  "id":1257061775,
  "issue":1722,
  "node_id":"IC_kwDODBCWws5K7T2P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T20:39:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The next-release label is debatable here.",
  "created_at":"2022-10-31T20:33:39Z",
  "id":1297649788,
  "issue":1724,
  "node_id":"IC_kwDODBCWws5NWJB8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T20:33:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This was fixed by #1724",
  "created_at":"2022-12-19T12:48:28Z",
  "id":1357616656,
  "issue":1724,
  "node_id":"IC_kwDODBCWws5Q65YQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T12:48:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"First, what's the exclamation point for? The \"Lint PR\" test accepts it as an okay prefix. From a Scheme context, I'd think it's allowing mutation (which all PRs do...).",
  "created_at":"2022-09-24T20:21:50Z",
  "id":1257058873,
  "issue":1725,
  "node_id":"IC_kwDODBCWws5K7TI5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T20:21:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1725?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1725](https://codecov.io/gh/scikit-hep/awkward/pull/1725?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e1d051a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1725?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.38% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1725/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-24T21:02:34Z",
  "id":1257064804,
  "issue":1725,
  "node_id":"IC_kwDODBCWws5K7Ulk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T21:02:34Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The `__iter__ = None` does indeed disable the legacy iteration that Python otherwise uses. In all my time writing Python, I'd somehow never seen this before, but I suspect I nearly never implemented `__getitem__` and _not_ `__iter__`.\r\n\r\n`None` is a documented special value to disable this behaviour:\r\nhttps://docs.python.org/3/reference/datamodel.html#special-method-names:~:text=Setting%20a%20special%20method%20to%20None%20indicates%20that%20the%20corresponding%20operation%20is%20not%20available.%20For%20example%2C%20if%20a%20class%20sets%20__iter__()%20to%20None%2C%20the%20class%20is%20not%20iterable%2C%20so%20calling%20iter()%20on%20its%20instances%20will%20raise%20a%20TypeError%20(without%20falling%20back%20to%20__getitem__()).%202\r\n\r\n>  Is the error message any better than \"iteration on None is not allowed?\"\r\n\r\nYes:\r\n```python3\r\n>>> iter(record)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nInput In [7], in <cell line: 1>()\r\n----> 1 iter(record)\r\n\r\nTypeError: 'Record' object is not iterable\r\n```",
  "created_at":"2022-09-24T21:07:13Z",
  "id":1257065424,
  "issue":1725,
  "node_id":"IC_kwDODBCWws5K7UvQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T09:28:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm going to auto-merge this, because you've approved the change, and I'm confident that you'd support following the Python docs in using `None` here :)",
  "created_at":"2022-09-24T21:09:55Z",
  "id":1257065728,
  "issue":1725,
  "node_id":"IC_kwDODBCWws5K7U0A",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T21:09:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> First, what's the exclamation point for? The \"Lint PR\" test accepts it as an okay prefix. From a Scheme context, I'd think it's allowing mutation (which all PRs do...).\r\n\r\nSorry @jpivarski, I missed this comment. It implies that the commit / PR contains a breaking change. It's really a case where you're _removing_ a feature, rather than just refactoring internal code that won't really affect the user.",
  "created_at":"2022-09-26T09:27:16Z",
  "id":1257752158,
  "issue":1725,
  "node_id":"IC_kwDODBCWws5K98Ze",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T09:27:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1726?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1726](https://codecov.io/gh/scikit-hep/awkward/pull/1726?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9acd9a8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1726?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1726/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-24T21:28:25Z",
  "id":1257068136,
  "issue":1726,
  "node_id":"IC_kwDODBCWws5K7VZo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-24T21:28:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1727?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1727](https://codecov.io/gh/scikit-hep/awkward/pull/1727?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0851439) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.02%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1727?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1727/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-26T07:50:27Z",
  "id":1257635337,
  "issue":1727,
  "node_id":"IC_kwDODBCWws5K9f4J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T07:50:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Just wanted to see what the challenges were here, and off-the-bat, we don't want to pull in the runtime dependencies via `install .[dev]`.",
  "created_at":"2022-09-26T08:19:43Z",
  "id":1257668859,
  "issue":1727,
  "node_id":"IC_kwDODBCWws5K9oD7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T08:19:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I was thinking about this myself, and also believe this is a good idea.",
  "created_at":"2022-09-26T14:16:36Z",
  "id":1258109502,
  "issue":1729,
  "node_id":"IC_kwDODBCWws5K_To-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T14:16:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed by #1730 ",
  "created_at":"2022-09-26T16:02:26Z",
  "id":1258271707,
  "issue":1729,
  "node_id":"IC_kwDODBCWws5K_7Pb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T16:02:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Thanks for adding this; it will make the transition easier once v2 is officially out!",
  "created_at":"2022-09-28T16:26:38Z",
  "id":1261156061,
  "issue":1729,
  "node_id":"IC_kwDODBCWws5LK7bd",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-09-28T16:26:38Z",
  "user":"MDQ6VXNlcjM4NzYyNA=="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1730?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1730](https://codecov.io/gh/scikit-hep/awkward/pull/1730?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ad32aab) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.02%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1730?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.05% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1730/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-26T14:36:11Z",
  "id":1258138233,
  "issue":1730,
  "node_id":"IC_kwDODBCWws5K_ap5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T14:36:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"We could go through a normal deprecation cycle with this: add a warning that specifies a release when the `awkward._v2` shim will be removed (e.g. 2.1.0) and then actually remove it with that release. Let's not do this right away because some people (like us) set warnings as errors in their test suites, so they'd have to exclude that right away. It would be better to set that warning sometime after 2.0.0 is already out, so that it's a later adjustment.\r\n\r\nAnother thing to consider is that this implementation is simple; adding a warning would make it more complicated. The warning would have to be invoked if `awkward._v2` is accessed, not when it's defined (otherwise, even people who don't use it would see the warning). That would make this `_v2` object not strictly a module, but maybe some sort of property of the `awkward` module. It could perhaps be implemented by adding a `__getattr__` function in the `awkward` module, which I think is a Python 3.7+ feature. After issuing the warning, it could return a dynamically constructed module object, made with `types.ModuleType`.\r\n\r\n... Or, we could ignore it completely. Names that start with underscores are not guaranteed interfaces. That was true during v2 development\u2014we can change the API until the 2.0.0 release\u2014and it would continue to be true afterward, as this `awkward._v2` does not have to be guaranteed. The normal deprecation cycle is only required for public interfaces, and `awkward._v2` isn't (technically) public.\r\n\r\nSo we can come back to this and reconsider it later. For now, this is a nice implementation because it's so simple. I was imagining making a submodule and manually putting things into it.",
  "created_at":"2022-09-26T15:31:37Z",
  "id":1258221983,
  "issue":1730,
  "node_id":"IC_kwDODBCWws5K_vGf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T15:31:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1731?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1731](https://codecov.io/gh/scikit-hep/awkward/pull/1731?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c463ff9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1731?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.05% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1731/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-26T17:56:36Z",
  "id":1258407752,
  "issue":1731,
  "node_id":"IC_kwDODBCWws5LAcdI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T17:56:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1732?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1732](https://codecov.io/gh/scikit-hep/awkward/pull/1732?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ad104fb) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6f49044fb0515e585bc80775ea4658d5242bf6b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e6f4904) will **decrease** coverage by `0.08%`.\n> The diff coverage is `77.18%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1732?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/1732/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `66.66% <66.66%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1732/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.59% <77.46%> (-1.78%)` | :arrow_down: |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1732/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.05% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1732/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1732/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1732/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.15% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1732/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1732/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1732/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-09-26T20:48:42Z",
  "id":1258616872,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LBPgo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T23:16:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"`int` allows booleans, and we indeed probably don't want that in many places. I'll work those through before merging.",
  "created_at":"2022-09-26T21:00:42Z",
  "id":1258626747,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LBR67",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T21:00:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The reason I asked about whether `int` includes `numbers.Integral` is because it's pretty common for a NumPy integer type, such as `np.int32` or `np.uint64`, to get passed into an argument that wants a generic integer, such as `axis`. (For instance, if it's computed from some formula that NumPy is involved in.) We don't want those integer types being excluded from these arguments, just as `MutableMapping` is better than `dict` in abstract interfaces.\r\n\r\nI'd be happy to exclude booleans, since I think that would be an indication of a mistake, but typing has to go with the flow of the other packages that this gets typed with. If our `axis` signature insists that the argument is not a boolean but MyPy can't prove that it's not a boolean because some other Python package doesn't care, then it will fail typing for a bad reason (i.e. not help people find bugs, but be annoying). There's probably a community standard for accepting integer arguments that might be some integer type other than `int`, and we should go with that, whatever it is.\r\n\r\nI'm going to make a wild guess that the appropriate spelling is \"`numbers.Integral`\", because that's the same sort of thing as \"`MutableMapping`\", at the same level of abstraction and visibility in the community (in the standard library).",
  "created_at":"2022-09-26T21:18:30Z",
  "id":1258643962,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LBWH6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T21:18:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii & @jpivarski do either of you have strong preferences for import styles in the context of type hints.\r\n\r\nI've been moving towards \r\n```python\r\nfrom package import module\r\n\r\ndef create_foo_bar():\r\n    return module.FooBar()\r\n\r\ndef invoke_main(foo_bar):\r\n    foo_bar.main()\r\n```\r\n\r\nin my personal projects, but in the context of type hints it sometimes feels a lot cleaner to read code that's annotated as\r\n```python\r\nfrom package.module import FooBar\r\n\r\ndef create_foo_bar() -> FooBar:\r\n    return FooBar()\r\n\r\ndef invoke_main(foo_bar: FooBar):\r\n    foo_bar.main()\r\n```\r\n\r\nThere's no style guide on this that I can recall, and as much as I prefer the latter for readability, I often prefer the former for ease of locating where symbols come from. That said, I think oftentimes this is only a problem with poorly named symbols, so perhaps I'm making a stronger case for the latter.",
  "created_at":"2022-09-27T13:51:10Z",
  "id":1259542476,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LExfM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T13:51:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"For stuff in typing, I'm strongly in favor of importing the name:\r\n\r\n```python\r\nfrom typing import Sequence\r\n```\r\n\r\nThis is standard practice, and it allows you to import from `typing_extensions` or `typing`, and some of the items there are actually temporary, with a more permanent home in the standard library elsewhere - like the one I showed! It really should be:\r\n\r\n```python\r\nfrom collections.abc import Sequence\r\n```\r\n\r\nThough you have to have `from __future__ import annotations` to use it (and you can only use it in type annotations) until you can require Python 3.9+.\r\n\r\nIf you have `typing.Stuff` everywhere this is harder to do. Typing is already verbose, I like keeping it as short as possible. `x: Sequence` is readable. `x: typing.Sequence` is too verbose, `x: _t.Sequence` is distracting and still verbose. (and, again, it's really `collections.abc.Sequence` since Python 3.9).\r\n\r\nI've also seen `import typing as <something>`, which I like even less than just using `typing`. It only saves a few characters, adds an extra layer of mental burden (looking up the import name), and is different depending on what someone wanted to call it, making it harder to read code that is not yours. (I think I saw this in @HDembinski's IMinuit as `_typ` or something similar).\r\n\r\nI usually leave non-types, like `typing.TYPE_CHECKING`, `typing.cast`, `typing.overload`, etc. directly accessed from the typing module and not imported from it.",
  "created_at":"2022-09-27T13:59:41Z",
  "id":1259553569,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LE0Mh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T14:59:03Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"For types not in typing, it's much harder. I still like the readability of not having the module, but you get a benefit from the module: you don't have to have that existing as a real object at this point in the import process if you only use it in type annotations (again, with the future import & Python 3.7+). They are also not standardize names like the items in `typing`. So it might depend, but full (or closer to full) names might be acceptable.\r\n\r\nAlso depends on if you are doing relative imports, which have benefits and drawbacks, but sometimes you can't due to circular imports, etc.",
  "created_at":"2022-09-27T14:05:24Z",
  "id":1259560955,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LE1_7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T14:05:24Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @henryiii \r\n\r\nWe're using absolute imports here, and for the most part they're not that long. I'd temporarily ignored the performance aspect of not requiring the module body when only using typing. In our case, I suspect we'd want to fix those cases anyway (import cycles sometimes indicate a need to refactor)\r\n\r\nMy current take is to import the name from `typing`, and leave the rest to module-qualified imports. I'll probably make the change unless Jim wants to further the discussion",
  "created_at":"2022-09-27T14:14:02Z",
  "id":1259572507,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LE40b",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-27T14:14:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Originally, I had been strongly in favor of fully qualified names everywhere, as in\r\n\r\n```python\r\nimport module\r\n\r\ndef somewhere():\r\n    module.submodule.subsubmodule.Class()\r\n```\r\n\r\nIt's longer, but when reading the code in `somewhere`, you don't have to scroll up to the top of the file to find out where `Class` comes from. (For example, that made reading the Numba codebase hard: `SomeClass` is used, but where is it defined? There's a `from other_module import SomeClass`, but then in `other_module`, there's `from other_other_module import SomeClass`, and on and on.)\r\n\r\nFully qualified naming makes all instances of `Class` identifiable by a text-based search: `grep` works really well when a whole codebase adheres to this discipline.\r\n\r\nBut...\r\n\r\n  1. That made the lines long. When I was working alone, I didn't mind because I don't have a problem with Emacs wrapping the line four or five times around the window (not at word boundaries). But other editors (Atom) wrapped lines at word boundaries, which is confusing in Python because of the semantic meaning of indentation. And then when I imposed the PEP8 line limit (#183), the many lines needed for most statements started to seriously hurt readability.\r\n  2. Using really long `module.submodule.subsubmodule.Class` names in type annotations would further compound the issue, especially if any of those types are parameterized.\r\n  3. Smart-enough IDEs should be able to find the definition or all references of a `from module import Class` name; it just needs some minimal knowledge of Python syntax to figure it out. It would be really nice to get that capability in a command-line tool, so that I can pipe the output to more `grep` and `awk`, but I've never looked for such a thing and perhaps I should.\r\n\r\nThe line-length and typing arguments in favor of `from module import Class` now outweigh the argument in favor of fully qualified names, especially if there's a definition-finding/reference-finding tool for Python codebases. The only constraint I'd add is that if two modules define a `Class` with the same name, it should be imported with enough context to disambiguate between the two: `subsubmodule.Class`. These classes were defined with the explicit intention of being referenced within their submodule; the submodule is part of the name. Here's an example:\r\n\r\n```python\r\nfrom awkward import nplike\r\n\r\nnplike.of(some_array)\r\n```\r\n\r\nImporting a free-floating function named \"`of`\" would be problematic. Perhaps we should avoid defining function and class names this way in the future. And actually, with this specific example,\r\n\r\n```python\r\nfrom awkward import nplike\r\n```\r\n\r\nwould itself be a problem because we use `nplike` as a variable and attribute all over the place. So I guess this one has to be\r\n\r\n```python\r\nimport awkward as ak\r\nimport awkward.nplike   # we don't currently do this, but maybe should, to ensure order independence?\r\n\r\nak.nplike.of(some_array)\r\n```\r\n\r\nBut avoiding definitions that force this would be good if we're moving away from fully qualified naming.",
  "created_at":"2022-09-27T18:55:47Z",
  "id":1259922223,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LGOMv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T18:55:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Well, bikeshedding renames is always fun! I'd say really `awkward.nplike` should be `awkward.nplikes`, as it contains many (just as we have `awkward.contents`). Some people prefer singular module names, so whatever people prefer.\r\n\r\nOK. I think we're mostly on the same page then - line length / readability is the most important thing. At least, that's what I took from what you wrote.",
  "created_at":"2022-09-27T19:38:33Z",
  "id":1259964893,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LGYnd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T19:38:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> OK. I think we're mostly on the same page then - line length / readability is the most important thing. At least, that's what I took from what you wrote.\r\n\r\nRight: line length/readability is the most important thing, overriding what I've said in the past about fully qualified names (my view is changing).\r\n\r\n> I'd say really `awkward.nplike` should be `awkward.nplikes`, as it contains many (just as we have `awkward.contents`).\r\n\r\nThat's a good argument, and I wouldn't mind if `awkward.nplike` became `awkward.nplikes`, in line with `awkward.contents`, `awkward.forms`, and `awkward.types` (which were all plural for the purpose of consistency).",
  "created_at":"2022-09-27T19:53:46Z",
  "id":1259979433,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LGcKp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T19:53:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":">  It would be really nice to get that capability in a command-line tool\r\n\r\nFYI, it's called semgrep: https://github.com/returntocorp/semgrep - I saw it mentioned in a presentation at PyCON.",
  "created_at":"2022-09-27T20:44:44Z",
  "id":1260028254,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LGoFe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T20:46:47Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > It would be really nice to get that capability in a command-line tool\r\n> \r\n> FYI, it's called semgrep: https://github.com/returntocorp/semgrep - I saw it mentioned in a presentation at PyCON.\r\n\r\nYou can retire for the rest of the year, this is fantastic!!",
  "created_at":"2022-09-27T21:19:37Z",
  "id":1260066025,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LGxTp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T21:19:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> (I think I saw this in @HDembinski's IMinuit as _typ or something similar).\r\n\r\nYes, I ended up using _tp, because I want to hide the types. The type names pollute every module otherwise. I have seen people `del`eting them at the end of the module (I think I saw that in @henryiii libraries at some point), but I find that more ugly than prefixing with _tp. Henry, do you know a way to solve this?\r\n\r\nAll the types sometimes make the function signatures actually less readable. Have you seen the ArrayLike type from numpy.typing? It is huge. Things are going to get a little better when we do not have to use Union[...] and Optional[...] anymore, but still.",
  "created_at":"2022-09-28T09:58:42Z",
  "id":1260673140,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LJFh0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T09:59:37Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"MEMBER",
  "body":"The way to solve it in Python 3.7+ is to declare your public interface with `__all__` and then add a simple `__dir__` function that returns it. This has always been how you declare your public interface, but the `__dir__` trick causes it to be respected `dir(...)` as well as tab completion the vanilla REPL as well as IPython. This is also the only way to \"re-export\" something from an internal module that mypy respects, as well. This also hides all your other imports, like numpy and various stdlib modules.\r\n\r\nYes, you've probably seen me `del` stuff, but this (in a Python 3.7+ world) is much better. I would actually be happy to get rid of `_internal` modules too with this, since we can now be explicit in what is public API. It's also nicer for readers, as you can see a list of what a module provides at the top of the module, rather than looking through the entire module.\r\n\r\nExample (showing a bit of Python 3.7+ annotations too):\r\n\r\n```python\r\nfrom __future__ import annotations\r\n\r\nfrom .somewhere_to_reexport import public_thing_2\r\nfrom . import private_thing\r\n\r\n__all__ = [\"public_thing\", \"public_thing_2\", \"PublicType\"]\r\n\r\ndef __dir__() -> list[str]:\r\n    return __all__\r\n\r\ndef public_thing(x: bool) -> int | None:\r\n    return 1 if x else None\r\n\r\nclass PublicType:\r\n    pass\r\n```\r\n\r\nSimulated usage:\r\n```PyCon\r\n>>> import example_module\r\n>>> print(*dir(example_module))\r\npublic_thing public_thing_2 PublicType\r\n```",
  "created_at":"2022-09-28T13:30:48Z",
  "id":1260920211,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LKB2T",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-28T13:33:38Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"> All the types sometimes make the function signatures actually less readable. Have you seen the ArrayLike type from numpy.typing? It is huge.\r\n\r\nBut using it in a function signature isn't huge. It's just huge when MyPy prints it out on failures. Given the number of lines printed out by C++ code using long variants, I don't think this is solvable, but it doesn't impact the usage of signatures, only type errors. You can use TypeAliases to keep your signatures from ballooning. And while it does add characters, realize for someone reading your code not completely familiar with it this adds really valuable information. I think we just have to get used to the stuff after the colon being \"checked documentation\", which is basically what types are. You can add a trailing comma to ensure each item in on a separate line with Black. You'll notice NumPy style docstrings had one parameter per line, with the type included - and those are docstrings, intended _only_ for users to read! (though some IDEs were parsing them for types, like PyCharm - the issue was the types were sometimes wrong, because they were unchecked).\r\n\r\nI have noticed most modern languages are following a similar pattern for types (`var: Type`) - Rust does this, Swift does this, Go doesn't put in the colon, but it's still a trailing type - even C++ has the `->` trailing type as an option. I've forgotten the name of the third \"successor\" language for C++ announced this year, but Carbon also uses `var: Type`, and Cpp2 also does `var: Type`.",
  "created_at":"2022-09-28T13:47:55Z",
  "id":1260943587,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LKHjj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T13:48:54Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"I looked at a signature with ArrayLike from numpy.typing in Python's builtin help(). It prints the whole definition that's several lines long.\n\nThat C++ templated types can look ugly, too, is not the point here.",
  "created_at":"2022-09-28T20:17:50Z",
  "id":1261420849,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LL8Ex",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T20:17:50Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It prints the whole definition that's several lines long.\r\n\r\nThere's a lot of room for improvement with the current set of Python help tools (Python & IPython's super-help) to handle type hints. I'm hopeful that efforts like [papyri](https://github.com/jupyter/papyri) might tackle this kind of thing. It's not in immediate scope; papyri seems primarily concerned with generated docs, but in time I'd expect a `__doc__` transformer to fit into that machinery.",
  "created_at":"2022-09-28T20:23:40Z",
  "id":1261425876,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LL9TU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T20:23:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Ahh, that looks terrible:\r\n\r\n```PyCon\r\n>>> from numpy.typing import ArrayLike\r\n>>> def f(x: ArrayLike) -> None:\r\n...     pass\r\n...\r\n>>> help(f)\r\nHelp on function f in module __main__:\r\n\r\nf(x: Union[numpy.__array_like._SupportsArray[numpy.dtype], numpy.__nested_sequence._NestedSequence[numpy.__array_like._SupportsArray[numpy.dtype]], bool, int, float, complex, str, bytes, numpy.__nested_sequence._NestedSequence[Union[bool, int, float, complex, str, bytes]]]) -> None\r\n```\r\n\r\nUnless, of course, you use `from __future__ import annotations`, like you should be doing in Python 3.7+ code:\r\n\r\n```PyCon\r\n>>> from __future__ import annotations\r\n>>> from numpy.typing import ArrayLike\r\n>>> def f(x: ArrayLike) -> None:\r\n...     pass\r\n...\r\n>>> help(f)\r\nHelp on function f in module __main__:\r\n\r\nf(x: 'ArrayLike') -> 'None'\r\n```\r\n\r\n:)",
  "created_at":"2022-09-28T20:44:51Z",
  "id":1261445375,
  "issue":1732,
  "node_id":"IC_kwDODBCWws5LMCD_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T20:44:51Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1733?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1733](https://codecov.io/gh/scikit-hep/awkward/pull/1733?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (240ceaf) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1733?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.05% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1733/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-26T22:11:06Z",
  "id":1258696055,
  "issue":1733,
  "node_id":"IC_kwDODBCWws5LBi13",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-26T22:11:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1734?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1734](https://codecov.io/gh/scikit-hep/awkward/pull/1734?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (571390f) into [docs](https://codecov.io/gh/scikit-hep/awkward/commit/c9713427d5510ba8ac326d34734ec34135f40de8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c971342) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n> :exclamation: Current head 571390f differs from pull request most recent head 13ecb80. Consider uploading reports for the commit 13ecb80 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1734?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1734/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.87% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-09-27T09:54:04Z",
  "id":1259265089,
  "issue":1734,
  "node_id":"IC_kwDODBCWws5LDtxB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T20:45:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"https://awkward-array.readthedocs.io/en/agoose77-docs-update-for-v2/",
  "created_at":"2022-10-08T22:09:00Z",
  "id":1272404942,
  "issue":1734,
  "node_id":"IC_kwDODBCWws5L11vO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-08T22:09:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski the goal with this PR is to merge into `docs`, and then a second PR (#1776) will merge `docs` into `main`. ",
  "created_at":"2022-10-09T12:32:14Z",
  "id":1272532547,
  "issue":1734,
  "node_id":"IC_kwDODBCWws5L2U5D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-09T12:32:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've not added any ReST documents for the `ak._ext.fromjsonob[_schema]` methods, because I think they're probably an implementation detail that we don't need to expose (it's in the C++ docs).",
  "created_at":"2022-10-10T19:41:59Z",
  "id":1273736153,
  "issue":1734,
  "node_id":"IC_kwDODBCWws5L66vZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T19:41:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I've not added any ReST documents for the `ak._ext.fromjsonob[_schema]` methods, because I think they're probably an implementation detail that we don't need to expose (it's in the C++ docs).\r\n\r\nNothing in `ak._ext` has to be documented in the Python section; it's already documented in Doxygen. That means someone would have to dig to find it, but it's very much an implementation details, so that's okay.",
  "created_at":"2022-10-10T19:52:37Z",
  "id":1273745659,
  "issue":1734,
  "node_id":"IC_kwDODBCWws5L69D7",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-10T19:52:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski will you take pushback on the badges here: \r\n![image](https://user-images.githubusercontent.com/1248413/194943023-14360c9c-d86e-4704-8633-e44b99dc0561.png)\r\n\r\nWe can (and should) have a PyPI icon in the topic bar next to the octocat, and we could have another for conda forge. It's becoming fairly standard, and it would keep the body of our front-page simpler.",
  "created_at":"2022-10-10T19:58:34Z",
  "id":1273750383,
  "issue":1734,
  "node_id":"IC_kwDODBCWws5L6-Nv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T19:58:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It's usually me who's pushing back on too many badges...\r\n\r\n<img src=\"https://www.gannett-cdn.com/presto/2021/06/08/NSHT/d62df8c7-1c4e-4be4-b44e-ed64bccc5190-EAGLE_SCOUT_EARNS_ALL_BADGES_001.jpg\" width=\"200\">\r\n\r\nThe information doesn't have to be expressed with badges, either. I agree that a PyPI icon next to the GitHub icon would be great. On the front page, I'd like to see some variant of the text \"GitHub:scikit-hep/awkward\" spelled out because that will make an impression in the visitor's brain, to help them find it again later. I had clicked through almost the entire site before I noticed the little Octocat in the corner. (\"Standard\" only works for visitors familiar with the standard. Others, like me, need more of a hint.)\r\n\r\nMaybe it doesn't need to be on the front page, but the Octocat can be accompanied by the text \"scikit-hep/awkward\"? And for symmetry, the PyPI logo can be accompanied by the text \"awkward\"? (I don't know if that's technically possible.) Knowing that the source control address is \"scikit-hep/awkward\" and the pip/conda-forge installation address is \"awkward\" is something that might need to be typed into a terminal or added to a script. \r\n\r\nThe current version number is not as important and it can be found on GitHub, so that doesn't need to be here.\r\n\r\nOutside of academia, \"Does it have a commercial-friendly license?\" is often the first question anybody asks of an open-source product. But that doesn't need to be in the main text of the front page, since it's also on GitHub. It could also go next to the copyright message, if that's technically possible.\r\n\r\nThen there's the \"pip install awkward\" and \"conda install -c conda-forge awkward\" text boxes. I really like how those text boxes have a copy-icon when the mouse hovers over them. If I'm starting up a new virtual machine and need to get it up to speed with packages, I want a very quick way to copy the install command. Putting them on the \"Getting Started\" page makes some sense, since installation is the first thing that you do when you're getting started, and then not again afterward (unless you're spinning up new virtual machines or environments all the time).\r\n\r\nSo I can be argued down to just\r\n\r\n>  * GitHub: [scikit-hep/awkward](https://github.com/scikit-hep/awkward)\r\n>  * PyPI: [pip install awkward](https://pypi.org/project/awkward/)\r\n>  * Conda: [conda install -c conda-forge awkward](https://anaconda.org/conda-forge/awkward)\r\n\r\nIf they're links like this, there's usually a \"copy link text\" option in the context menu, so that's a very compact way of giving experts the convenience while not cluttering the page with stuff a beginner doesn't understand.",
  "created_at":"2022-10-10T20:25:47Z",
  "id":1273785171,
  "issue":1734,
  "node_id":"IC_kwDODBCWws5L7GtT",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "updated_at":"2022-10-10T20:25:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Current WIP for the index:\r\n![image](https://user-images.githubusercontent.com/1248413/194949126-dee125a7-2a3f-412d-a35b-410cc1c93976.png)\r\n",
  "created_at":"2022-10-10T20:40:52Z",
  "id":1273800125,
  "issue":1734,
  "node_id":"IC_kwDODBCWws5L7KW9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T20:40:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'll merge this PR as-is, and then take the outstanding bullets to be a new PR on `main`.",
  "created_at":"2022-10-10T20:43:01Z",
  "id":1273801901,
  "issue":1734,
  "node_id":"IC_kwDODBCWws5L7Kyt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T20:43:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The boxes line up nicely.  `:)`  And I see that \"Contributor's Guide\" and \"Release history\" are both external links.\r\n\r\nThere's still the issue that there are two \"I don't know anything yet; tell me what I need to know\" pages: \"What is an Awkward Array?\" and \"Getting started\". How about if they're combined onto one page:\r\n\r\n<img src=\"https://user-images.githubusercontent.com/1852447/194936414-2fe73add-5d84-4a56-8607-9200e4776fc0.png\" width=\"500\">\r\n\r\nand the \"What is an Awkward Array?\" button that you have on the front page links to the section within that combined page? (I.e. link to the scroll-position, with `#` in the URL.) Then \"What is an Awkward Array?\" is highlighted but there also isn't any confusion between that and \"Getting started\", once there, the visitor will realize that they're just different scroll positions of the same page. That's a much easier realization to make than if they were separated by a click-through.\r\n\r\n---\r\n\r\nAlso, if you're done with this branch, it can be deleted. (It wasn't auto-deleted for some reason.)",
  "created_at":"2022-10-10T20:57:26Z",
  "id":1273813025,
  "issue":1734,
  "node_id":"IC_kwDODBCWws5L7Ngh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T20:57:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm not so sure about this being an improvement (again, ignoring the performance argument). All of the alternatives to what we have now introduce new classes, whether by composition or containment. Classes draw a lot of attention when a contributor or maintainer is looking at the code, and it might be drowning out attention that should be spent elsewhere. There needs to be a relatively high bar on what deserves to be a class (at least, for classes that must be visible at the top level of a project). Do we really want `Content`, `Form`, `Type`, and `Metadata` (or `FormMixin`) with a composition or containment relationship between the fourth and the first two? Does the fourth need to be specialized for List, ListOffset, BitMasked, etc.? Because that could get complicated.\r\n\r\nThe way it is now, it's following a rule. Some methods/properties are needed on both a `Content` and its corresponding `Form`. We also don't want to have the `Content` create a `Form` just to call this one method on it (performance). The rule is that such a method/property should be implemented on the `Form` in a duck-typeable way and then called by the corresponding `Content` (not the other way around). Except for the fact that properties need to be called with an ugly `.__get__(self)`, I think that's a simple rule and it doesn't call too much attention to itself. It's best to keep these methods/properties next to each other in the source code so that they can be thought of as a group, and hopefully anyone reading the code would catch onto the pattern (maybe comments or docstrings would help).\r\n\r\n-------------\r\n\r\nFor an example of class inheritance (that I wrote, on purpose) that looks overwhelming when you sit back and look at it, this happened in Vector (diagram indicates both composition and containment, in different colors):\r\n\r\n<img src=\"https://raw.githubusercontent.com/scikit-hep/vector/main/docs/api/inheritance.svg\" width=\"100%\">\r\n\r\nWe had a bunch of constraints, such as not reimplementing 2D methods/properties on 3D and 4D vectors, having multiple backends, a distinction between pure geometry vectors and momentum vectors, etc. The constraints could have been implemented in highly dynamic code, in which concrete classes for each case are generated by `exec` from strings or using the `type` constructor (or in languages that have them, macros), or the constraints could have been implemented statically using predefined classes with OOP, which is what that diagram represents. The latter also allows for static typing, another constraint, so that's why we chose this method and don't regret it. My point is just, \"Look what happens when complicated things are expressed statically, with composition and containment. It's possible, but look at it!\"\r\n\r\nApplying it to the case in hand, having a `Content` subclass call its corresponding `Form` subclass's method/property as if it were its own is a dynamic \"cheat.\" The pejorative word \"cheat\" only applies if you're committed to orthodox OOP. To use another pejorative word, it's \"lying\" about what \"`self`\" means: a `Form` subclass is getting passed a `self` variable that is not a member of its class. It works because Python is dynamic: methods are just functions, types are just objects, and everything is a `PyObject*` that can be passed to any function. There are static, OOP ways of doing it, but they increase the number of classes and have non-trivial relationships with each other.\r\n\r\nIs this extra complexity, purchased in exchange for adhering to a static OOP principle, worth it in this case? I didn't think so when I wrote it, but if you feel strongly about it, I'll reconsider.",
  "created_at":"2022-09-27T17:07:07Z",
  "id":1259802447,
  "issue":1738,
  "node_id":"IC_kwDODBCWws5LFw9P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T17:07:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not wedded to \"pure\" OOP (in fact, I find oftentimes class-based implementations are writen without good reason). You've already outlined some of the strategies available for vector, and I'm sure that there are others that we haven't considered yet. I wasn't involved with that design phase, so I won't try and think of any new ones off the top of my head ;) I agree that in vector, this all gets very complicated. But, vector is also doing quite complicated things, certainly compared to what we expect to see in Awkward.\r\n\r\nI think it's worth noting that there are two axes here: \r\n- implementation sharing\r\n- type hinting\r\n\r\nMy motivation/goals are\r\n- decouple `Form` and `Content`: they are closely related, but `Form` shouldn't need to know about `Content`. Right now, although it's a limited API surface, forms do need to know about contents - we call `Form.method.__get__(content)`. Right now we have this rigid coupling requirement, but it's not enforced by the type system.\r\n- creating an inheritance tree makes the relationship more readable, i.e. `Form` and `Content` are both specialisms of a more general array metadata system. I was originally pro-composition here, but actually looking at this quickly made it clear that `Form` and `Content` are more like sibling types than \"owner-property\".\r\n- type checking (self-explanatory)\r\n\r\n\r\nRather than making this argument with words though, I wrote up a small example that compares these two implementations:\r\n\r\n<details><summary>Current</summary>\r\n\r\n```python\r\nimport typing\r\n\r\n\r\nclass Form:\r\n    @property\r\n    def purelist_depth(self) -> int:\r\n        raise NotImplementedError\r\n\r\n\r\nclass Content:\r\n    @property\r\n    def form(self) -> Form:\r\n        raise NotImplementedError\r\n\r\n    @property\r\n    def Form(self) -> type[Form]:\r\n        raise NotImplementedError\r\n\r\n    @property\r\n    def purelist_depth(self) -> int:\r\n        return typing.cast(int, self.Form.purelist_depth.__get__(self))\r\n\r\n\r\n# List ##############################\r\nclass ListForm(Form):\r\n    def __init__(self, content: Form):\r\n        self.content = content\r\n\r\n    @property\r\n    def purelist_depth(self) -> int:\r\n        return self.content.purelist_depth + 1\r\n\r\n\r\nclass ListContent(Content):\r\n    def __init__(self, content: Content):\r\n        self.content = content\r\n\r\n    @property\r\n    def form(self) -> ListForm:\r\n        return ListForm(self.content.form)\r\n\r\n    Form = ListForm\r\n\r\n\r\n# Numpy ##############################\r\nclass NumpyForm(Form):\r\n    @property\r\n    def purelist_depth(self) -> int:\r\n        return 1\r\n\r\n\r\nclass NumpyContent(Content):\r\n    @property\r\n    def form(self) -> NumpyForm:\r\n        return NumpyForm()\r\n\r\n    Form = NumpyForm\r\n\r\n\r\n# Test ###############################\r\narray = ListContent(ListContent(NumpyContent()))\r\n\r\n\r\ndef get_array_depth(array: Content | Form) -> int:\r\n    return array.purelist_depth\r\n\r\n\r\nprint(\r\n    get_array_depth(array)\r\n)\r\nprint(\r\n    get_array_depth(array.form)\r\n)\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>Mixins</summary>\r\n\r\n```python\r\nclass ContentLike:\r\n    @property\r\n    def purelist_depth(self) -> int:\r\n        raise NotImplementedError\r\n\r\n\r\nclass Form(ContentLike):\r\n\r\n    ...\r\n\r\n\r\nclass Content(ContentLike):\r\n    @property\r\n    def form(self) -> Form:\r\n        raise NotImplementedError\r\n\r\n\r\n# List ##############################\r\nclass ListLike(ContentLike):\r\n\r\n    content: ContentLike\r\n\r\n    @property\r\n    def purelist_depth(self) -> int:\r\n        return self.content.purelist_depth + 1\r\n\r\n\r\nclass ListForm(ListLike, Form):\r\n\r\n    content: Form\r\n\r\n    def __init__(self, content: Form):\r\n        self.content = content\r\n\r\n\r\nclass ListContent(ListLike, Content):\r\n\r\n    content: Content\r\n\r\n    def __init__(self, content: Content):\r\n        self.content = content\r\n\r\n    @property\r\n    def form(self) -> ListForm:\r\n        return ListForm(self.content.form)\r\n\r\n\r\n# Numpy ##############################\r\nclass NumpyLike:\r\n    @property\r\n    def purelist_depth(self) -> int:\r\n        return 1\r\n\r\n\r\nclass NumpyForm(NumpyLike, Form):\r\n    ...\r\n\r\n\r\nclass NumpyContent(NumpyLike, Content):\r\n    @property\r\n    def form(self) -> NumpyForm:\r\n        return NumpyForm()\r\n\r\n\r\n# Test ###############################\r\narray = ListContent(ListContent(NumpyContent()))\r\n\r\n\r\ndef get_array_depth(array: ContentLike) -> int:\r\n    return array.purelist_depth\r\n\r\n\r\nprint(\r\n    get_array_depth(array)\r\n)\r\nprint(\r\n    get_array_depth(array.form)\r\n)\r\n```\r\n\r\n</details>\r\n\r\nThis is not a pure mixins approach - we have diamond inheritance here. But, Python's smart enough to resolve this, and it means we can ask for `ListLike` as an interface, instead of requiring an intersection type that I don't think Python's typing system supports yet.[^protocol]\r\n\r\nFor the sake of a new class per content-type, I don't think this is all that much more complexity.\r\n\r\n[^protocol]: you could create a new intersection protocol to do this, but that's just more code for the sake of typing.",
  "created_at":"2022-09-27T20:19:30Z",
  "id":1260002829,
  "issue":1738,
  "node_id":"IC_kwDODBCWws5LGh4N",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T20:21:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1739?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1739](https://codecov.io/gh/scikit-hep/awkward/pull/1739?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b34a445) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1739?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.05% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1739/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-27T16:15:31Z",
  "id":1259733742,
  "issue":1739,
  "node_id":"IC_kwDODBCWws5LFgLu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T16:26:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Huh I remember grepping for these, that's odd. Nice catch!",
  "created_at":"2022-09-27T16:18:46Z",
  "id":1259737934,
  "issue":1739,
  "node_id":"IC_kwDODBCWws5LFhNO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T16:18:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It seems like only the `nplike` module had actual code that was trying to resolve `ak.contents.Record`. @ianna did you hit this at runtime today? If so, could you add a test that reproduces it? Clearly we're not covering these `nplike` codepaths at the moment.",
  "created_at":"2022-09-27T16:37:07Z",
  "id":1259768614,
  "issue":1739,
  "node_id":"IC_kwDODBCWws5LFosm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T16:42:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It seems like only the `nplike` module had actual code that was trying to resolve `ak.contents.Record`. @ianna did you hit this at runtime today? If so, could you add a test that reproduces it? Clearly we're not covering these `nplike` codepaths at the moment.\r\n\r\nYes, we already have them: in tests-cuda",
  "created_at":"2022-09-27T17:14:40Z",
  "id":1259810629,
  "issue":1739,
  "node_id":"IC_kwDODBCWws5LFy9F",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-09-27T17:14:40Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This just means that my CUDA tests weren't running locally, which is ... even worse than if we'd just missed a test case! :cry:\r\n\r\nThanks!",
  "created_at":"2022-09-27T19:45:22Z",
  "id":1259971546,
  "issue":1739,
  "node_id":"IC_kwDODBCWws5LGaPa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T19:45:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1740?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1740](https://codecov.io/gh/scikit-hep/awkward/pull/1740?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (aceea1e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e6929460415d240f2e3aa5d3188a6bb02908094e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e692946) will **increase** coverage by `1.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1740?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.05% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19yZWR1Y2Vycy5weQ==) | `76.92% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `97.77% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/builder.py](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYnVpbGRlci5weQ==) | `81.60% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `84.87% <\u00f8> (\u00f8)` | |\n| ... and [311 more](https://codecov.io/gh/scikit-hep/awkward/pull/1740/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-27T17:36:14Z",
  "id":1259836239,
  "issue":1740,
  "node_id":"IC_kwDODBCWws5LF5NP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-27T17:36:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think my CUDA environment's been subtly broken, thanks for catching this @ianna. I'm reinstalling it now, and then I can take a look.",
  "created_at":"2022-09-28T09:41:49Z",
  "id":1260653931,
  "issue":1742,
  "node_id":"IC_kwDODBCWws5LJA1r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T09:41:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - I see that @swishdiff has implemented it for v1, not v2: https://github.com/scikit-hep/awkward/commit/90bc28bf49f8b7700b2217e84f2873722acc5bb6",
  "created_at":"2022-09-28T09:42:33Z",
  "id":1260654772,
  "issue":1742,
  "node_id":"IC_kwDODBCWws5LJBC0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T09:42:33Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I think my CUDA environment's been subtly broken, thanks for catching this @ianna. I'm reinstalling it now, and then I can take a look.\r\n\r\nwe should also check jax tests",
  "created_at":"2022-09-28T09:43:41Z",
  "id":1260656106,
  "issue":1742,
  "node_id":"IC_kwDODBCWws5LJBXq",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-28T09:43:41Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"have we deleted `dlpack`?",
  "created_at":"2022-09-28T09:47:45Z",
  "id":1260661157,
  "issue":1742,
  "node_id":"IC_kwDODBCWws5LJCml",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T09:47:45Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, we don't need it now that we handle everything in Python / CuPY",
  "created_at":"2022-09-28T09:49:04Z",
  "id":1260662707,
  "issue":1742,
  "node_id":"IC_kwDODBCWws5LJC-z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T09:49:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1743?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1743](https://codecov.io/gh/scikit-hep/awkward/pull/1743?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (179c678) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n> :exclamation: Current head 179c678 differs from pull request most recent head 44a9bba. Consider uploading reports for the commit 44a9bba to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1743?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/nplike.py](https://codecov.io/gh/scikit-hep/awkward/pull/1743/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnBsaWtlLnB5) | `66.20% <100.00%> (+0.20%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-09-28T10:09:05Z",
  "id":1260685100,
  "issue":1743,
  "node_id":"IC_kwDODBCWws5LJIcs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T20:23:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This change might need cherry-picking into v1, as it looks like my CuPy install hasn't been working for a while.",
  "created_at":"2022-09-28T10:12:51Z",
  "id":1260689243,
  "issue":1743,
  "node_id":"IC_kwDODBCWws5LJJdb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T10:12:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm trying to do these on a phone, and it won't let me resolve the conflicts online. It will probably be easy, though, just working around the `of` \u2192 `nplike_of` name change. But you beat me to it, even just describing it.",
  "created_at":"2022-09-28T20:20:16Z",
  "id":1261422911,
  "issue":1743,
  "node_id":"IC_kwDODBCWws5LL8k_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T20:20:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, sorry! I hadn't realised you were working through these things too :laughing: ",
  "created_at":"2022-09-28T20:21:26Z",
  "id":1261423887,
  "issue":1743,
  "node_id":"IC_kwDODBCWws5LL80P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T20:21:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1744?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1744](https://codecov.io/gh/scikit-hep/awkward/pull/1744?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (86a76d2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **not change** coverage.\n> The diff coverage is `93.64%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1744?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `88.72% <0.00%> (\u00f8)` | |\n| [src/awkward/nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnBsaWtlcy5weQ==) | `66.00% <33.33%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `86.32% <75.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19iYWNrZW5kLnB5) | `66.66% <75.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `90.09% <77.77%> (\u00f8)` | |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `65.42% <80.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jYXRlZ29yaWNhbC5weQ==) | `90.90% <83.33%> (\u00f8)` | |\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `75.86% <88.88%> (\u00f8)` | |\n| ... and [111 more](https://codecov.io/gh/scikit-hep/awkward/pull/1744/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-28T10:32:02Z",
  "id":1260710635,
  "issue":1744,
  "node_id":"IC_kwDODBCWws5LJOrr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T19:25:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"To be honest, I couldn't figure out what Codecov was doing, though I figured we'd only pay a lot of attention to it when we're working on maximizing coverage. I didn't think we needed it to run in every PR, I would have been happy to run it on demand.\r\n\r\nEven without changing anything, Codecov is correctly describing the current absolute level of coverage, right? It's true deltas that are wrong, I expect. That's what we'd be most interested in when working on maximizing it.\r\n\r\nWe'd have to really know what we're doing if we get into a mode where we want every PR to have a non-negative coverage change. That's what this system seems to be designed for, and I can see that being a good idea in a very stable codebase\u2014you don't want contributors adding features without testing them. For us, now, it can go up and down, as long as it is generally increasing.\r\n\r\nIf making the tests run against a putative merge to `main` would also fix the Codedov deltas, then that improves two things. We want our tests to tell us what will happen after merging, after all. That can make a CI test result be different from an offline one, and maybe for a reason not related to the PR itself, but this is information we want to know. Contra what I said above, we _do_ know what we're doing enough to require that `main` should always be passing tests, no matter what. We're at least at that level of stability. So if switching the tests to test merge commits also makes the Codecov have the right base, then let's do it!",
  "created_at":"2022-09-28T20:41:57Z",
  "id":1261442661,
  "issue":1745,
  "node_id":"IC_kwDODBCWws5LMBZl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T20:41:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, right now it's only our deltas that are wrong. If we don't disable squash and merge (which, for all intents and purposes, I prefer as a default), then we need to patch the codecov metadata, or run coverage again. I think we can probably get away with modifying the metadata, provided that we enforce the following rule:\r\n![image](https://user-images.githubusercontent.com/1248413/192888543-4fa26581-be18-48b6-ac61-e11396d15da9.png)\r\n\r\nIf we do that, then we'll know that the result of the squash-and-merge will by identical to the result of the merge commit (at least, I believe we have that certainty), and we can consider the coverage identical.",
  "created_at":"2022-09-28T21:06:13Z",
  "id":1261464684,
  "issue":1745,
  "node_id":"IC_kwDODBCWws5LMGxs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T21:06:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I've seen that option. It would be super-safe to require branches to be up-to-date before merging, but it would mean a concurrency traffic jam for small-fix PRs, and we tend to have a lot of those. If we have two PRs with auto-merge turned on, when one of them gets merged, the other will now need to update to satisfy the rule. If it doesn't auto-update (which I expect to be the case), then it needs to wait for a human to notice it and press the update button. If there's no notification for that, it might be waiting for a long time. Regardless, it might have been 90% done with its tests and now has to start over from scratch. I expect that a lot of the testing time would be wasted that way.[^1]\r\n\r\nWhat I was saying above is that the tests would run on a putative merge-commit, rather than the actual last commit of the branch. (Azure had an option for that, and we used it.) If `main` updates after that test, then the test would have been run on an out-of-date merge-commit, and so merging it would introduce the possibility that `main` will be made to fail, but the same is true of testing entirely within-branch, so it's not worse than the alternative. Requiring that tests always run against an absolutely up-to-date merge-commit (exactly the one that will be the result of the merge) would be safer, but it essentially serializes testing. Worse, it serializes the tests that would be accepted, while parallel tests still happen, uselessly.\r\n\r\nSo I was willing to accept that a CI test is testing something different from what will happen when the PR gets merged (as we have now); I was just saying that it's a little better to test out-of-date merge-commits than non-merge-commits. And if that allows Codecov to be correct, then even better; we can adopt that model.\r\n\r\n[^1]: Incidentally, the all-contributors bot commits have to be absolutely serialized this way. One has to be fully merged before another can be generated; otherwise, git diff interleaves lines of JSON in a terrible way. The diff algorithm could stand to be made aware of the syntax of some languages, at least declarative ones like JSON and YAML.",
  "created_at":"2022-09-28T22:01:56Z",
  "id":1261509304,
  "issue":1745,
  "node_id":"IC_kwDODBCWws5LMRq4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T22:01:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1746?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`main-v1@e2e3e2a`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-09-28T11:40:51Z",
  "id":1260780021,
  "issue":1746,
  "node_id":"IC_kwDODBCWws5LJfn1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T11:40:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"So far, I've narrowed it down: it's something in the concatenation, the last step of making an array out of a dataset directory of Parquet files. Moreover, you only need a RecordArray of one field, and no symptom if the field is completely projected out.\r\n\r\nThat is,\r\n\r\n```python\r\n>>> import awkward as ak   # this is _v2\r\n>>> one = ak.from_parquet(\"nyc_buildings.parq/part.0.parquet\")\r\n>>> two = ak.from_parquet(\"nyc_buildings.parq/part.1.parquet\")\r\n>>> ak.concatenate([one, two])\r\n```\r\n\r\nreproduces the error, but in `ak.concatenate` instead of the final stages of `ak.from_parquet`.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/operations/ak_concatenate.py\", line 48, in concatenate\r\n    return _impl(arrays, axis, merge, mergebool, highlevel, behavior)\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/operations/ak_concatenate.py\", line 116, in _impl\r\n    out = batch[0].mergemany(batch[1:])\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/contents/recordarray.py\", line 665, in mergemany\r\n    merged = forfield[0].mergemany(forfield[1:])\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/contents/bytemaskedarray.py\", line 661, in mergemany\r\n    return ByteMaskedArray(\r\n  File \"/Users/jpivarski/irishep/awkward/awkward/contents/bytemaskedarray.py\", line 80, in __init__\r\n    raise ak._util.error(\r\nValueError: while calling (from <stdin>, line 1)\r\n\r\n    ak.concatenate(\r\n        arrays = [<Array [{geometry: [[[...]]], ...}, ..., {...}] type='31579...\r\n        axis = 0\r\n        merge = True\r\n        mergebool = True\r\n        highlevel = True\r\n        behavior = None\r\n    )\r\n\r\nError details: ByteMaskedArray len(mask) (66665) must be <= len(content) (63158)\r\n```\r\n\r\nThis (making RecordArrays of only one field, `\"name\"`) also raises the error:\r\n\r\n```python\r\n>>> ak.concatenate([one[[\"name\"]], two[[\"name\"]]])\r\n```\r\n\r\nbut this does not:\r\n\r\n```python\r\n>>> ak.concatenate([one[\"name\"], two[\"name\"]])\r\n<Array [None, None, None, None, ..., None, None, None] type='66665 * ?string'>\r\n```\r\n\r\nSo the existence of a RecordArray is important. The types of `one` and `two` are the same:\r\n\r\n```python\r\n>>> one.type.show()\r\n31579 * {\r\n    geometry: option[var * option[var * option[var * ?float64]]],\r\n    type: ?string,\r\n    name: ?string,\r\n    hilbert_distance: ?int64\r\n}\r\n>>> two.type.show()\r\n35086 * {\r\n    geometry: option[var * option[var * option[var * ?float64]]],\r\n    type: ?string,\r\n    name: ?string,\r\n    hilbert_distance: ?int64\r\n}\r\n```\r\n\r\nand even the Forms of `one[[\"name\"]]` and `two[[\"name\"]]` (which has the error-symptom) are the same:\r\n\r\n```python\r\n>>> one[[\"name\"]].layout\r\n<RecordArray is_tuple='false' len='31579'>\r\n    <content index='0' field='name'>\r\n        <BitMaskedArray valid_when='true' lsb_order='true' len='31579'>\r\n            <mask><Index dtype='uint8' len='3948'>[0 0 0 ... 0 0 0]</Index></mask>\r\n            <content><ListOffsetArray len='31579'>\r\n                <parameter name='__array__'>'string'</parameter>\r\n                <offsets><Index dtype='int32' len='31580'>\r\n                    [   0    0    0 ... 3491 3491 3491]\r\n                </Index></offsets>\r\n                <content><NumpyArray dtype='uint8' len='3491'>\r\n                    <parameter name='__array__'>'char'</parameter>\r\n                    [ 85 110 105 ...  97 114 121]\r\n                </NumpyArray></content>\r\n            </ListOffsetArray></content>\r\n        </BitMaskedArray>\r\n    </content>\r\n</RecordArray>\r\n>>> two[[\"name\"]].layout\r\n<RecordArray is_tuple='false' len='35086'>\r\n    <content index='0' field='name'>\r\n        <BitMaskedArray valid_when='true' lsb_order='true' len='35086'>\r\n            <mask><Index dtype='uint8' len='4386'>[0 0 0 ... 0 0 0]</Index></mask>\r\n            <content><ListOffsetArray len='35086'>\r\n                <parameter name='__array__'>'string'</parameter>\r\n                <offsets><Index dtype='int32' len='35087'>\r\n                    [  0   0   0 ... 581 581 581]\r\n                </Index></offsets>\r\n                <content><NumpyArray dtype='uint8' len='581'>\r\n                    <parameter name='__array__'>'char'</parameter>\r\n                    [ 86  97 110 100 101 114  98 105 108 116  32  97 116  32\r\n                      83 111 117 116 104  32  66 101  97  99 104  67 101 110\r\n                     ...\r\n                     111 115 116  32  79 102 102 105  99 101  66 117 114 103\r\n                     101 114  32  75 105 110 103]\r\n                </NumpyArray></content>\r\n            </ListOffsetArray></content>\r\n        </BitMaskedArray>\r\n    </content>\r\n</RecordArray>\r\n```\r\n\r\nBut the projected out layouts, `one[\"name\"]` and `two[\"name\"]`, do not have the error-symptom:\r\n\r\n```python\r\n>>> one[\"name\"].layout\r\n<BitMaskedArray valid_when='true' lsb_order='true' len='31579'>\r\n    <mask><Index dtype='uint8' len='3948'>[0 0 0 ... 0 0 0]</Index></mask>\r\n    <content><ListOffsetArray len='31579'>\r\n        <parameter name='__array__'>'string'</parameter>\r\n        <offsets><Index dtype='int32' len='31580'>\r\n            [   0    0    0 ... 3491 3491 3491]\r\n        </Index></offsets>\r\n        <content><NumpyArray dtype='uint8' len='3491'>\r\n            <parameter name='__array__'>'char'</parameter>\r\n            [ 85 110 105 ...  97 114 121]\r\n        </NumpyArray></content>\r\n    </ListOffsetArray></content>\r\n</BitMaskedArray>\r\n>>> two[\"name\"].layout\r\n<BitMaskedArray valid_when='true' lsb_order='true' len='35086'>\r\n    <mask><Index dtype='uint8' len='4386'>[0 0 0 ... 0 0 0]</Index></mask>\r\n    <content><ListOffsetArray len='35086'>\r\n        <parameter name='__array__'>'string'</parameter>\r\n        <offsets><Index dtype='int32' len='35087'>\r\n            [  0   0   0 ... 581 581 581]\r\n        </Index></offsets>\r\n        <content><NumpyArray dtype='uint8' len='581'>\r\n            <parameter name='__array__'>'char'</parameter>\r\n            [ 86  97 110 100 101 114  98 105 108 116  32  97 116  32  83 111\r\n             117 116 104  32  66 101  97  99 104  67 101 110 116 101 114  32\r\n             ...\r\n             111 115 116  32  79 102 102 105  99 101  66 117 114 103 101 114\r\n              32  75 105 110 103]\r\n        </NumpyArray></content>\r\n    </ListOffsetArray></content>\r\n</BitMaskedArray>\r\n```\r\n\r\nand their BitMaskedArray lengths, as well as the lengths of their bit masks, are the same between `x[[\"name\"]]` and `x[\"name\"]`. One of these is triggering the error-symptom while the other doesn't, even though they have the same lengths.\r\n\r\nAlso, in the error message,\r\n\r\n```\r\nError details: ByteMaskedArray len(mask) (66665) must be <= len(content) (63158)\r\n```\r\n\r\nI'd predict a ByteMaskedArray length of `66665`, by adding the `len` of each BitMaskedArray: `31579 + 35086`. (It's not the length of the bit mask because the mask gets expanded by a factor of 8 when converting from bit mask to byte mask, and that byte mask might be a little too big because it's the first multiple of 8 larger than the true length. That's why the BitMaskedArray _separately_ stores its length, and those add up.)\r\n\r\nI'd predict the `len(content)` to also be `66665`, by adding the `len` of each ListOffsetArray: `31579 + 35086`. (With ListOffsetArray, beware of looking at the `offsets` length, since that's always one longer than the ListOffsetArray.)\r\n\r\nSo the `len(content)` somehow got wrong. Where does `63158` come from? It's a lot smaller than the size you'd get by adding the two contents, and I don't see why it would be _any_ smaller.\r\n\r\nAnd why does it depend on https://github.com/scikit-hep/awkward/compare/v1.9.0...v1.10.0? The way parameters affect merging was changed, but we see the same error-symptom if we use the `\"hilbert_distance\"` field, rather than `\"name\"`, and this field has no parameters at all. (`\"name\"` has an `__array__ = \"string\"` parameter.)\r\n\r\n```python\r\n>>> one[[\"hilbert_distance\"]]\r\n<Array [{hilbert_distance: 1078494}, ...] type='31579 * {hilbert_distance: ...'>\r\n>>> one[[\"hilbert_distance\"]].layout\r\n<RecordArray is_tuple='false' len='31579'>\r\n    <content index='0' field='hilbert_distance'>\r\n        <BitMaskedArray valid_when='true' lsb_order='true' len='31579'>\r\n            <mask><Index dtype='uint8' len='3948'>[255 255 255 ... 255 255   7]</Index></mask>\r\n            <content><NumpyArray dtype='int64' len='31579'>\r\n                [  1078494   1087198   1189938 ... 113899921 113899975\r\n                 113899983]\r\n            </NumpyArray></content>\r\n        </BitMaskedArray>\r\n    </content>\r\n</RecordArray>\r\n>>> two[[\"hilbert_distance\"]].layout\r\n<RecordArray is_tuple='false' len='35086'>\r\n    <content index='0' field='hilbert_distance'>\r\n        <BitMaskedArray valid_when='true' lsb_order='true' len='35086'>\r\n            <mask><Index dtype='uint8' len='4386'>[255 255 255 ... 255 255  63]</Index></mask>\r\n            <content><NumpyArray dtype='int64' len='35086'>\r\n                [113900034 113900330 113900368 ... 127703116 127703404\r\n                 127703509]\r\n            </NumpyArray></content>\r\n        </BitMaskedArray>\r\n    </content>\r\n</RecordArray>\r\n```\r\n\r\nCould it be in the way that broadcasting changed? Concatenation at `axis=0` shouldn't be doing any broadcasting.\r\n\r\nIn `RecordArray._mergemany` (lines 582\u2012583 in src/awkward/contents/recordarray.py), this changed:\r\n\r\n```diff\r\n        for_each_field = []\r\n        for field in self.contents:\r\n            trimmed = field[0 : self.length]\r\n-           for_each_field.append([field])\r\n+           for_each_field.append([trimmed])\r\n```\r\n\r\nBut it ought to be the right thing to do.\r\n\r\nTesting it, **that did make a difference.** With this one change reverted, it does not show the error-symptom. But this is weird because we really should be trimming to the length of the RecordArray. In fact, it's exactly the same: at that point in the code, `len(field)`, `len(trimmed)`, and `self.length` are all `31579`. (`self` is only the first in the concatenation, `one[[\"name\"]]`. The rest are trimmed a few lines later.)\r\n\r\nVery weird\u2014it's trimmed to its own length, so it should be no change at all, and yet, that's what makes the content 3507 items shorter two levels of recursion further down. It's probably not this fix specifically\u2014I think this fix is correct\u2014but it might be revealing something else wrong with slicing. It looks like `field[0 : self.length]` is not doing what it's supposed to do.\r\n\r\nI'm going to have to leave it at that for right now.",
  "created_at":"2022-09-28T18:42:15Z",
  "id":1261323156,
  "issue":1747,
  "node_id":"IC_kwDODBCWws5LLkOU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T18:42:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In v2, we added a new implementation for `ByteMaskedArray.mergemany`, which previously was using `toIndexedOptionArray`. I *think* we have some bugs here with respect to length handling, as the following fixes the test case:\r\n\r\n```diff\r\ndiff --git a/src/awkward/contents/bytemaskedarray.py b/src/awkward/contents/bytemaskedarray.py\r\nindex e8a2f173..ae8b6bfb 100644\r\n--- a/src/awkward/contents/bytemaskedarray.py\r\n+++ b/src/awkward/contents/bytemaskedarray.py\r\n@@ -649,13 +649,13 @@ class ByteMaskedArray(Content):\r\n             for x in others\r\n         ):\r\n             parameters = self._parameters\r\n-            masks = [self._mask.data]\r\n+            masks = [self._mask.data[:self.length]]\r\n             tail_contents = []\r\n             length = 0\r\n             for x in others:\r\n                 parameters = ak._util.merge_parameters(parameters, x._parameters, True)\r\n-                masks.append(x._mask.data)\r\n-                tail_contents.append(x._content[: self.length])\r\n+                masks.append(x._mask.data[: x.length])\r\n+                tail_contents.append(x._content[: x.length])\r\n                 length += x.length\r\n \r\n             return ByteMaskedArray(\r\n\r\n```\r\n\r\nI've not properly thought about this patch, it just looks like we're not properly trimming everything / using the wrong lengths. ",
  "created_at":"2022-09-28T19:08:29Z",
  "id":1261351945,
  "issue":1747,
  "node_id":"IC_kwDODBCWws5LLrQJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T19:08:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We can keep that in mind, but at the end of my long debugging session, I found that the RecordArray\r\n\r\n```diff\r\n        for_each_field = []\r\n        for field in self.contents:\r\n            trimmed = field[0 : self.length]\r\n-           for_each_field.append([field])\r\n+           for_each_field.append([trimmed])\r\n```\r\n\r\ntoggled the error-symptom, and this is doing a slice that shouldn't be changing anything. I guess the next step would be to see what _does_ happen to the layout of `field` when it becomes `trimmed`. Given that `self.length` is equal to `len(field)` in this case, `field` and `trimmed` ought to be exactly identical. But somehow it changes the outcome.\r\n\r\nThe changes you point out in ByteMaskedArray also look like corrections/improvements.",
  "created_at":"2022-09-28T19:12:51Z",
  "id":1261356768,
  "issue":1747,
  "node_id":"IC_kwDODBCWws5LLsbg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T19:12:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski to start with, yes we currently have a bug:\r\n\r\nIn `main`, we are not properly handling the case where the `len(mask) != len(contents)`, as we were only trimming the contents, not the masks. You can see that we trigger (a) this bug by manually crafting such a layout:\r\n\r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nx = ak.contents.RecordArray(\r\n    [ak.contents.ByteMaskedArray(\r\n        ak.index.Index8(np.r_[0, 1, 1]),\r\n        ak.contents.NumpyArray(np.arange(12)),\r\n        valid_when=True,\r\n    )],\r\n    [\"x\"],\r\n)\r\ny = ak.contents.RecordArray(\r\n    [ak.contents.ByteMaskedArray(\r\n        ak.index.Index8(np.r_[1, 1, 1, 0, 0]),\r\n        ak.contents.NumpyArray(np.arange(12)),\r\n        valid_when=True,\r\n    )],\r\n    [\"x\"],\r\n)\r\nz = ak.concatenate((x, y))\r\n\r\n```",
  "created_at":"2022-09-28T19:22:53Z",
  "id":1261367635,
  "issue":1747,
  "node_id":"IC_kwDODBCWws5LLvFT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T19:24:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I don't think that RecordArray is at fault here. I think it's simply introducing the _valid_ state that `ByteMaskedArray` cannot properly handle (see #1749). \r\n\r\nWhat's happening in the above reproducer is that 1ebf1dbe732b6b634fab95c8406498a59b71695f adds a slice, which leads to the bit masked array becoming a byte masked array, where we now have this buggy code path. You can see this by modifying `recordarray.py`:\r\n```diff\r\ndiff --git a/src/awkward/contents/recordarray.py b/src/awkward/contents/recordarray.py\r\nindex 2923b645..2f9a0194 100644\r\n--- a/src/awkward/contents/recordarray.py\r\n+++ b/src/awkward/contents/recordarray.py\r\n@@ -580,7 +580,7 @@ class RecordArray(Content):\r\n         for_each_field = []\r\n         for field in self.contents:\r\n             trimmed = field[0 : self.length]\r\n-            for_each_field.append([trimmed])\r\n+            for_each_field.append([field.toBitMaskedArray(True, True)])\r\n \r\n         if self.is_tuple:\r\n             for array in headless:\r\n```\r\nwhich no longer fails.",
  "created_at":"2022-09-28T19:31:13Z",
  "id":1261377070,
  "issue":1747,
  "node_id":"IC_kwDODBCWws5LLxYu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T19:33:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, that makes sense. I didn't think it was in RecordArray, but in slicing. Anyway, it introduced a new state that the merge couldn't handle, I hadn't considered that it might be a valid new state.",
  "created_at":"2022-09-28T19:56:03Z",
  "id":1261400512,
  "issue":1747,
  "node_id":"IC_kwDODBCWws5LL3HA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T19:56:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"To be fair, _most_ of the time with v2, a different state is a bad state. This one just makes for a happy exception :wink: ",
  "created_at":"2022-09-28T19:59:51Z",
  "id":1261403905,
  "issue":1747,
  "node_id":"IC_kwDODBCWws5LL38B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T19:59:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"I've confirmed that commit `0c9a2840` fixes my problem that is present in the previous commit `4f9ecd92`\r\n\r\nThanks for fixing this so quickly.",
  "created_at":"2022-09-29T13:52:48Z",
  "id":1262317641,
  "issue":1747,
  "node_id":"IC_kwDODBCWws5LPXBJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T13:52:48Z",
  "user":"MDQ6VXNlcjU4MDMyNg=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski following from our earlier discussion, does `to_string` still sit well with you? I'm coming back to the fact that this \"solution\" to avoid overlap is only helpful whilst we don't add a `to_json` to some other class in Awkward. I *do* think we need a `to_dict` - it's more accurate w.r.t what the form serialisation is doing, but I'm less convinced now of `to_string`. \r\n\r\nParticularly, `to_json` is helpful because we explicitly tell the caller that they're getting a JSON string. Whereas, `to_string` could feasibly return `repr(self)` and still be consistent with the name `to_string`.",
  "created_at":"2022-09-28T16:43:03Z",
  "id":1261173829,
  "issue":1748,
  "node_id":"IC_kwDODBCWws5LK_xF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T16:43:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1748?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1748](https://codecov.io/gh/scikit-hep/awkward/pull/1748?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1804d5c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.53%`.\n> The diff coverage is `51.84%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1748?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `89.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/behaviors/mixins.py](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL21peGlucy5weQ==) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `42.85% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `33.33% <0.00%> (\u00f8)` | |\n| ... and [151 more](https://codecov.io/gh/scikit-hep/awkward/pull/1748/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-28T16:44:18Z",
  "id":1261175150,
  "issue":1748,
  "node_id":"IC_kwDODBCWws5LLAFu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T16:32:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"`to_json_str`/`from_json_str`? I agree about getting people exactly what they're getting.\r\n\r\n`to_json_form`?",
  "created_at":"2022-09-28T21:04:21Z",
  "id":1261463003,
  "issue":1748,
  "node_id":"IC_kwDODBCWws5LMGXb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T21:04:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I know it's a bit of a pain, but are you happy to merge this latest version, which doesn't change `to/from_json`? That way we can come back to it once I tackle some of the bigger PRs - decision fatigue!",
  "created_at":"2022-09-29T16:27:07Z",
  "id":1262518539,
  "issue":1748,
  "node_id":"IC_kwDODBCWws5LQIEL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T16:27:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1749?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1749](https://codecov.io/gh/scikit-hep/awkward/pull/1749?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (12e9a34) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1749?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1749/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.32% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-09-28T19:26:25Z",
  "id":1261370872,
  "issue":1749,
  "node_id":"IC_kwDODBCWws5LLv34",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-28T19:26:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I'll be testing this in Ian's original issue, to verify that it fixes it.",
  "created_at":"2022-09-29T11:57:54Z",
  "id":1262174373,
  "issue":1750,
  "node_id":"IC_kwDODBCWws5LO0Cl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T11:57:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1751?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1751](https://codecov.io/gh/scikit-hep/awkward/pull/1751?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fbb6ed5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.00%`.\n> The diff coverage is `94.00%`.\n\n> :exclamation: Current head fbb6ed5 differs from pull request most recent head 85b2e22. Consider uploading reports for the commit 85b2e22 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1751?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `88.72% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `86.32% <75.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19iYWNrZW5kLnB5) | `66.66% <75.00%> (\u00f8)` | |\n| [src/awkward/nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnBsaWtlcy5weQ==) | `66.20% <76.47%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `90.09% <77.77%> (\u00f8)` | |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `65.42% <80.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jYXRlZ29yaWNhbC5weQ==) | `90.90% <83.33%> (\u00f8)` | |\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `75.86% <88.88%> (\u00f8)` | |\n| ... and [111 more](https://codecov.io/gh/scikit-hep/awkward/pull/1751/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-29T06:16:00Z",
  "id":1261815400,
  "issue":1751,
  "node_id":"IC_kwDODBCWws5LNcZo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T13:27:40Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Good, that settles it. \r\n\r\nIt might actually be possible to check whether the merged PR used the same base commit as main. If we can do that, then we could, in those cases, assume that the coverage result would match the merged repo. Otherwise, we can run a simple single-matrix-element build (Linux py37) to compute the coverage for the merged commit.\r\n\r\nIf this is not possible, then we can just keep periodic full testing on main, and add a new per-commit single-matrix-element build as suggested in the previous paragraph.\r\n\r\nThe disadvantage of the single element case is that we might miss changes that are platform/Python version specific. We could choose random configurations such that we cover more matrix elements over the course of the month... but I see that being problematic for determinism reasons. At the end of the day, do we make per-platform changes more frequently than monthly? I suspect not.",
  "created_at":"2022-09-29T12:59:20Z",
  "id":1262242824,
  "issue":1751,
  "node_id":"IC_kwDODBCWws5LPEwI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T13:03:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've settled on just running a single Codecov job for commits to main. Every month we'll run a full build, which will update our coverage baseline in cases where we made coverage-altering per-platform changes. I think these are probably rare enough tha t we don't need to go to the extra effort of testing a larger matrix, or determining whether we can reuse coverage results.",
  "created_at":"2022-09-29T13:29:36Z",
  "id":1262286027,
  "issue":1751,
  "node_id":"IC_kwDODBCWws5LPPTL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T13:29:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1752?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1752](https://codecov.io/gh/scikit-hep/awkward/pull/1752?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (05054ba) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.00%`.\n> The diff coverage is `49.86%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1752?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `89.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/behaviors/mixins.py](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL21peGlucy5weQ==) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `78.72% <0.00%> (\u00f8)` | |\n| [src/awkward/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `78.16% <0.00%> (\u00f8)` | |\n| [src/awkward/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `76.47% <0.00%> (\u00f8)` | |\n| ... and [149 more](https://codecov.io/gh/scikit-hep/awkward/pull/1752/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-29T08:15:15Z",
  "id":1261927370,
  "issue":1752,
  "node_id":"IC_kwDODBCWws5LN3vK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T08:15:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, to clarify; we don't have any \"broken\" import cycles, but that is managed by using the two-phase module initialisation feature (and, if this weren't possible, we could still import other names within functions). Ideally, we could declare our dependencies at the top of the file with explicit imports, i.e. as a DAG. It won't always be possible to perform this split without compromising the general structure and layout of Awkward, and we don't need to pursue that level of separation.",
  "created_at":"2022-09-29T14:54:55Z",
  "id":1262401152,
  "issue":1752,
  "node_id":"IC_kwDODBCWws5LPraA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T14:55:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1754?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1754](https://codecov.io/gh/scikit-hep/awkward/pull/1754?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7f72831) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.08%`.\n> The diff coverage is `94.02%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1754?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `88.72% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `86.32% <75.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19iYWNrZW5kLnB5) | `66.66% <75.00%> (\u00f8)` | |\n| [src/awkward/nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnBsaWtlcy5weQ==) | `66.20% <76.47%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `90.09% <77.77%> (\u00f8)` | |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `65.42% <80.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jYXRlZ29yaWNhbC5weQ==) | `90.90% <83.33%> (\u00f8)` | |\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `75.86% <88.88%> (\u00f8)` | |\n| ... and [112 more](https://codecov.io/gh/scikit-hep/awkward/pull/1754/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-29T10:50:36Z",
  "id":1262107416,
  "issue":1754,
  "node_id":"IC_kwDODBCWws5LOjsY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T10:50:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1755?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1755](https://codecov.io/gh/scikit-hep/awkward/pull/1755?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (23230f3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.16%`.\n> The diff coverage is `52.81%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1755?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `90.47% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `89.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/behaviors/mixins.py](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL21peGlucy5weQ==) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `42.85% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `33.33% <0.00%> (\u00f8)` | |\n| ... and [151 more](https://codecov.io/gh/scikit-hep/awkward/pull/1755/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-29T11:25:34Z",
  "id":1262142384,
  "issue":1755,
  "node_id":"IC_kwDODBCWws5LOsOw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T15:50:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I think you might have meant\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> type(ak.Array([\"hi\", \"bye\"]))\r\n<class 'awkward.behaviors.string.StringBehavior'>\r\n>>> type(ak.Array([\"hi\", \"bye\"]).mask[[True, False]])\r\n<class 'awkward.highlevel.Array'>\r\n```\r\n\r\nBut this is, in fact, what we want. Behaviors can only be applied when a node with a given parameter is at top-level: the behavior class that one writes for type `T` is not applicable to type `option[T]`. If we were to ignore the distinction (for just option-type, say), then behavior classes would always have to be written in such a way that their `self` might be option-type or might not be option-type.\r\n\r\nHmmm. If the top-level node is IndexedArray (which does not change type), then the behavior should be applicable. Maybe we'd want the `arrayclass` helper function to \"see through\" IndexedArray.\r\n\r\nAnd maybe it's time to define more behavior syntax rules, like\r\n\r\n```python\r\nak.behavior[\"?\", \"RecordName\"] = PossiblyMissingRecords\r\n```\r\n\r\nto say that it's allowed to \"see through\" option-type nodes.\r\n\r\n--------------\r\n\r\nIn general, `dimension_parameters` sounds like a great idea\u2014we were inching toward this with all of the \"purelist\" stuff. I followed your enumeration of rules and agree that those represent a meaningful way to \"see through\" certain nodes that are supposed to be invisible.",
  "created_at":"2022-09-29T14:59:55Z",
  "id":1262407935,
  "issue":1755,
  "node_id":"IC_kwDODBCWws5LPtD_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T14:59:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Your framing of this issue in terms of the user-visible _type_ greatly clarifies what I _think_ is the direction that we need to take. As far as users are concerned, only the type matters, so it _sounds_ like we actually want something more like \r\n```python\r\n@property\r\ndef type_parameters(...):\r\n    ...\r\n```\r\n\r\nI will update the rules table to reflect the type-dependence over dimension.\r\n\r\nThis raises the question - when do we want `dimension_parameters` rather than `type_parameters`? \r\n\r\nI deliberately did not implement anything like `dimension_parameter` yet because it would lead to a lot of duplication.  Maybe we want a `policy` argument that determines how deep the `parameters_for_policy()` and `parameter_for_policy()` lookups go. We'd still want these two functions for performance.\r\n",
  "created_at":"2022-09-29T15:55:15Z",
  "id":1262481447,
  "issue":1755,
  "node_id":"IC_kwDODBCWws5LP_An",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T16:05:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Although we recently dropped support for behavior classes that were specified for a singular array, `\".\", \"Point\"`, it's possible that we might add more to this effect in future. To my mind, the routine that checks whether this condition applies would naturally be implemented as a special policy for `parameter` / `parameters`, i.e. descend through a single additional list node. We might want to be mindful of that when designing this interface.",
  "created_at":"2022-09-30T07:41:58Z",
  "id":1263222566,
  "issue":1755,
  "node_id":"IC_kwDODBCWws5LSz8m",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-30T07:42:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"#1858 fixes a lot of compiler warnings, but it doesn't address the linker warnings because I want to do that on top of #1778 (which might make some of them moot).",
  "created_at":"2022-11-01T23:32:24Z",
  "id":1299355604,
  "issue":1756,
  "node_id":"IC_kwDODBCWws5NcpfU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T23:32:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"After #1778, the issues on MacOS (Clang) are:\r\n\r\n```\r\n  ld: warning: -pie being ignored. It is only used when linking a main executable\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<int, int>, std::__1::shared_ptr<awkward::ForthMachineOf<int, int> > > make_ForthMachineOf<int, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<int, int>::is_segment_done() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<int, int>, std::__1::shared_ptr<awkward::ForthMachineOf<int, int> > > make_ForthMachineOf<int, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<int, int>::is_segment_done() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<int, int>, std::__1::shared_ptr<awkward::ForthMachineOf<int, int> > > make_ForthMachineOf<int, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<int, int>::is_done() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<int, int>, std::__1::shared_ptr<awkward::ForthMachineOf<int, int> > > make_ForthMachineOf<int, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<int, int>::is_done() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<int, int>, std::__1::shared_ptr<awkward::ForthMachineOf<int, int> > > make_ForthMachineOf<int, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<int, int>::is_ready() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<int, int>, std::__1::shared_ptr<awkward::ForthMachineOf<int, int> > > make_ForthMachineOf<int, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<int, int>::is_ready() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<long long, int>, std::__1::shared_ptr<awkward::ForthMachineOf<long long, int> > > make_ForthMachineOf<long long, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<long long, int>::is_segment_done() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<long long, int>, std::__1::shared_ptr<awkward::ForthMachineOf<long long, int> > > make_ForthMachineOf<long long, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<long long, int>::is_segment_done() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<long long, int>, std::__1::shared_ptr<awkward::ForthMachineOf<long long, int> > > make_ForthMachineOf<long long, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<long long, int>::is_done() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<long long, int>, std::__1::shared_ptr<awkward::ForthMachineOf<long long, int> > > make_ForthMachineOf<long long, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<long long, int>::is_done() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<long long, int>, std::__1::shared_ptr<awkward::ForthMachineOf<long long, int> > > make_ForthMachineOf<long long, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<long long, int>::is_ready() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  ld: warning: direct access in function 'pybind11::class_<awkward::ForthMachineOf<long long, int>, std::__1::shared_ptr<awkward::ForthMachineOf<long long, int> > > make_ForthMachineOf<long long, int>(pybind11::handle const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)' from file '/tmp/lto.o' to global weak symbol 'awkward::ForthMachineOf<long long, int>::is_ready() const' from file 'libawkward-static.a(ForthMachine.cpp.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.\r\n  /Users/jpivarski/mambaforge/bin/arm64-apple-darwin20.0.0-strip: warning: changes being made to the file will invalidate the code signature in: /private/var/folders/38/rnl4wm1930j6m17jk5x5xfym0000gn/T/tmpluipg_8b/build/_ext.cpython-310-darwin.so\r\n```\r\n\r\nI don't see any compiler warnings or any warnings at all on Linux.",
  "created_at":"2022-11-10T23:19:39Z",
  "id":1311032434,
  "issue":1756,
  "node_id":"IC_kwDODBCWws5OJMRy",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-10T23:19:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Although it will be clearly better to have this done, it doesn't have to be done by the next release. It doesn't impact any APIs that have to remain stable thereafter.",
  "created_at":"2022-11-29T22:12:56Z",
  "id":1331387776,
  "issue":1756,
  "node_id":"IC_kwDODBCWws5PW12A",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-29T22:12:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1757?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1757](https://codecov.io/gh/scikit-hep/awkward/pull/1757?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (91da25f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.53%`.\n> The diff coverage is `56.48%`.\n\n> :exclamation: Current head 91da25f differs from pull request most recent head f437106. Consider uploading reports for the commit f437106 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1757?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `89.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/behaviors/mixins.py](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL21peGlucy5weQ==) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `42.85% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `33.33% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZGF0YWZyYW1lLnB5) | `18.18% <0.00%> (\u00f8)` | |\n| ... and [151 more](https://codecov.io/gh/scikit-hep/awkward/pull/1757/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-29T17:54:48Z",
  "id":1262619695,
  "issue":1757,
  "node_id":"IC_kwDODBCWws5LQgwv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T18:32:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This looks good to me. I've been earmarking this for a while. \r\n\r\n> When pip-installed, ak.types doesn't seem to have listtype, etc., but it does have ListType. Wait\u2014could it be because MacOS is case-sensitive? No, if that's it, then this would have failed before.\r\n\r\nWere you definitely getting v2 there? The fact that we have `listtype` in ak.types should follow from the import statements, so I would be very surprised if we had a platform-dependence there.\r\n\r\nIn any case, this PR looks good; I tested `tests` and `tests-cuda`, and scanned through the unified diff.",
  "created_at":"2022-09-29T17:58:50Z",
  "id":1262624107,
  "issue":1757,
  "node_id":"IC_kwDODBCWws5LQh1r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T17:58:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski what do you want to do w.r.t the tests? I think we can also change those too.",
  "created_at":"2022-09-29T18:05:21Z",
  "id":1262633238,
  "issue":1757,
  "node_id":"IC_kwDODBCWws5LQkEW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T18:05:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't understand the reason why it was not finding the name. I verified the versions.\r\n\r\nI got another error for not finding `awkward.types.type.Type`, something not covered above. At least it's solving the issue, despite not knowing why there was an issue.",
  "created_at":"2022-09-29T18:06:16Z",
  "id":1262634864,
  "issue":1757,
  "node_id":"IC_kwDODBCWws5LQkdw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T18:06:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"\"Cleanup\" type things are not very important in tests. We'll likely have to look at the main codebase frequently, making changes frequently, but a test should ideally just sit there, unchanged. Occasionally, they'll get changed, but it's a lot less than the main codebase.",
  "created_at":"2022-09-29T18:07:53Z",
  "id":1262636634,
  "issue":1757,
  "node_id":"IC_kwDODBCWws5LQk5a",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-29T18:07:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'll be merging this as-is because we want to do the name change anyway. It got past some Uproot errors, but not all, and we _shouldn't_ extend it to handle cases like\r\n\r\n```\r\n        elif not (\r\n>           ak.forms.form._parameters_equal(\r\n                self._parameters, other._parameters, only_array_record=True\r\n            )\r\n        ):\r\nE       AttributeError: module 'awkward._v2.forms' has no attribute 'form'\r\n```\r\n\r\nI don't understand (1) why it doesn't see the submodule `form` in `forms`, because it's really in there, and (2) why it's naming the module `awkward._v2.forms`.",
  "created_at":"2022-09-29T18:42:11Z",
  "id":1262675181,
  "issue":1757,
  "node_id":"IC_kwDODBCWws5LQuTt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T18:42:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'll just mirror my comment here for posterity;\r\n\r\nThe reason that our `awkward.XXX` modules are renamed to `awkward._v2.XXX` when importing from v2 is that Python's import machinery sets `__package__` on the module object, even if it retrieves an existing module from `sys.modules`. Off the top of my head, I can't think of any way to prevent this, as all of this happens in C AFAICR. We could wrap the importer that Python creates, and implement logic to restore the `__package__` and `__name__` attributes, but this feels very heavy-handed for what is ultimately a cosmetic detail affecting only importers of v2 AFAICT.",
  "created_at":"2022-09-29T20:09:17Z",
  "id":1262759917,
  "issue":1757,
  "node_id":"IC_kwDODBCWws5LRC_t",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-29T20:09:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1758?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1758](https://codecov.io/gh/scikit-hep/awkward/pull/1758?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c7c14ae) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.54%`.\n> The diff coverage is `57.22%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1758?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `89.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/behaviors/mixins.py](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL21peGlucy5weQ==) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `42.85% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `33.33% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZGF0YWZyYW1lLnB5) | `18.18% <0.00%> (\u00f8)` | |\n| ... and [153 more](https://codecov.io/gh/scikit-hep/awkward/pull/1758/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-30T17:06:21Z",
  "id":1263813749,
  "issue":1758,
  "node_id":"IC_kwDODBCWws5LVER1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-30T20:03:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The only downside of this approach is that `from awkward._v2.contents import ListArray` will no longer work. That said, I'm not sure that we _can_ easily have both things without e.g. having _two_ versions of Awkward (e.g. `awkward._v2.contents.ListArray is not awkward.contents.ListArray`). So it comes down to what we prefer. \r\n\r\nI have a few more ideas on this, which I'm just trying out :)",
  "created_at":"2022-09-30T17:33:05Z",
  "id":1263837107,
  "issue":1758,
  "node_id":"IC_kwDODBCWws5LVJ-z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-30T17:33:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'll wait to see your idea. (Leaving this PR open.)",
  "created_at":"2022-09-30T19:32:19Z",
  "id":1263942098,
  "issue":1758,
  "node_id":"IC_kwDODBCWws5LVjnS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-30T19:32:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've spent some time digging, and I've realised that [my understanding ](https://github.com/scikit-hep/awkward/pull/1757#issuecomment-1262759917) of what's happening with respect to the renamed modules is not the full picture. It turns out that the `importlib` docs aren't one-to-one on what CPython actually does (or at least, they're vague), so one should actually look at the [bootstrap implementation](https://github.com/python/cpython/blob/57c6cb5100d19a0e0218c77d887c3c239c9ce435/Lib/importlib/_bootstrap.py#L987-L1016). Despite being fairly familiar with the internals of importlib, this next part took me by surprise.\r\n\r\nWhat's *actually* happening is that Python's creating a new module object for imports of `awkward._v2.XXX`, and then re-writing the name `XXX` on the original module. This is actually worse than just mangling the names, because it means that we could have multiple copies of modules lying around with half-shared state. \r\n\r\nI had not realised that this would happen, because I'd thought that Python took the `__package__` of the `_v2` module (which would be `\"awkward\"`. This was an oversight on my part; this, of course, only applies to relative imports. \r\n\r\nSo, we *need* to revert #1730, and I think the safest thing to do is to just have a proxy module like you've shown. That will support `from awkward import _v2 as ak` and `import awkward._v2 as ak`, but not `from awkward._v2.contents import XXX`. \r\nWe could pre-populate `sys.modules` to fix this, but we run into the same problem; multiple instances of the same module would exist if a non-pre-populated module were imported. We could pre-populate all \"importable\" files, ensuring that this last condition is never met. This, however, would be fragile and a non-insignificant amount of code, so I only mention it for posterity.\r\n\r\nSo, apologies for holding this back, and indeed taking us down this path to begin with. I was hoping that #1730 would give us clean support for aliasing v2, but it rather turned out to be a liability.",
  "created_at":"2022-09-30T19:47:34Z",
  "id":1263958189,
  "issue":1758,
  "node_id":"IC_kwDODBCWws5LVnit",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-30T19:59:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, this does revert #1730, and I've been testing it against Uproot, though I think my issues were local to my computer. Uproot's tests passed even with the other way of doing `_v2`.\r\n\r\nSo I'll enable auto-squash-and-merge.",
  "created_at":"2022-09-30T19:59:38Z",
  "id":1263968204,
  "issue":1758,
  "node_id":"IC_kwDODBCWws5LVp_M",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-09-30T19:59:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1759?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1759](https://codecov.io/gh/scikit-hep/awkward/pull/1759?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9a74d0b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.52%`.\n> The diff coverage is `56.53%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1759?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `89.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/behaviors/mixins.py](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL21peGlucy5weQ==) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `42.85% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `33.33% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZGF0YWZyYW1lLnB5) | `18.18% <0.00%> (\u00f8)` | |\n| ... and [152 more](https://codecov.io/gh/scikit-hep/awkward/pull/1759/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-30T19:03:28Z",
  "id":1263918524,
  "issue":1759,
  "node_id":"IC_kwDODBCWws5LVd28",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-30T19:03:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1760?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1760](https://codecov.io/gh/scikit-hep/awkward/pull/1760?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (02cdba0) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.54%`.\n> The diff coverage is `57.22%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1760?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `89.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/behaviors/mixins.py](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL21peGlucy5weQ==) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `42.85% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `33.33% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZGF0YWZyYW1lLnB5) | `18.18% <0.00%> (\u00f8)` | |\n| ... and [153 more](https://codecov.io/gh/scikit-hep/awkward/pull/1760/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-30T20:46:19Z",
  "id":1264009682,
  "issue":1760,
  "node_id":"IC_kwDODBCWws5LV0HS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-30T21:06:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1761?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1761](https://codecov.io/gh/scikit-hep/awkward/pull/1761?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6b603d3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/084fa4b8a35d1d835d998e70ef43de5a4b3b0574?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (084fa4b) will **increase** coverage by `0.55%`.\n> The diff coverage is `57.76%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1761?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY3VkYS9fX2luaXRfXy5weQ==) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `89.85% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/behaviors/mixins.py](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL21peGlucy5weQ==) | `97.50% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2N1cHkucHk=) | `50.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `42.85% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `33.33% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZGF0YWZyYW1lLnB5) | `18.18% <0.00%> (\u00f8)` | |\n| ... and [153 more](https://codecov.io/gh/scikit-hep/awkward/pull/1761/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-30T21:12:12Z",
  "id":1264028294,
  "issue":1761,
  "node_id":"IC_kwDODBCWws5LV4qG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-09-30T21:12:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1762?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1762](https://codecov.io/gh/scikit-hep/awkward/pull/1762?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0f7eaab) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/beeeb1faf627334d9c2b0db777c72d8ad05bf226?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (beeeb1f) will **increase** coverage by `0.16%`.\n> The diff coverage is `92.71%`.\n\n> :exclamation: Current head 0f7eaab differs from pull request most recent head b690665. Consider uploading reports for the commit b690665 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1762?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `71.42% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.89% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `77.58% <\u00f8> (+12.06%)` | :arrow_up: |\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `80.53% <20.00%> (+0.79%)` | :arrow_up: |\n| [src/awkward/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEucHk=) | `93.47% <77.77%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.00% <87.50%> (+0.14%)` | :arrow_up: |\n| [src/awkward/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvamF4LnB5) | `92.85% <92.85%> (\u00f8)` | |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.14% <100.00%> (+0.08%)` | :arrow_up: |\n| ... and [18 more](https://codecov.io/gh/scikit-hep/awkward/pull/1762/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-09-30T21:51:51Z",
  "id":1264057324,
  "issue":1762,
  "node_id":"IC_kwDODBCWws5LV_vs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-01T21:37:21Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this turned out to be a lot bigger than I was expecting. The motivation for this PR was providing a public `ak.jax.register`, but I noticed whilst implementing it that we had a global-state registration mechanism , so I generalised it.\r\n\r\nI'm just finalising some work to support automatic behavior registration.",
  "created_at":"2022-10-01T13:32:30Z",
  "id":1264367105,
  "issue":1762,
  "node_id":"IC_kwDODBCWws5LXLYB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-01T13:32:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Commit 173f913c070933b0ac26caea3172495344aacf7a is one that I'd benefit from scrutiny. It introduces some global state (weakref) to handle the case where users define behaviors, and subsequently register Jax support. We actually don't need this - we could use `ak.Array.__subclasses__()`, but I slightly prefer this explicit mechanism.",
  "created_at":"2022-10-01T13:41:43Z",
  "id":1264369126,
  "issue":1762,
  "node_id":"IC_kwDODBCWws5LXL3m",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-01T13:41:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It seems we have a bug in our existing Jax handling - the `recursively_apply` that replaces Jax nodes implicitly calls `_getitem_range` on the layout nodes (in order to trim excess lengths). This triggers Jax's leak detection - if you operate on a Jax tracer that's been marked as finished (here I'm guessing), it considers it \"leaked\". Our tests don't currently throw an exception when operating on a single-dimension Numpy Array, because the statement that performs the slice is only in the list types e.g. `RegularArray`. \r\n\r\nfdf40b1931fc0f6f621242c81aff26c5f08091dd introduces a new `trim` argument to the layout transformer functions. This allows the caller to request that the visitor acts upon the raw, untrimmed layouts. I think this is general enough to warrant adding as a feature.\r\n\r\nd9d03195e143b318494613052a97ac026e9da793 sets this parameter to `False` during unflattening to ensure that we don't trigger this bug.",
  "created_at":"2022-10-01T19:29:45Z",
  "id":1264460312,
  "issue":1762,
  "node_id":"IC_kwDODBCWws5LXiIY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-01T19:29:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, doesn't look like this is the only problem here; a reference seems to still be dangling.",
  "created_at":"2022-10-01T19:55:09Z",
  "id":1264464452,
  "issue":1762,
  "node_id":"IC_kwDODBCWws5LXjJE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-01T19:55:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, we've found the leak! The flatten logic in `Content.(_)jax_flatten` was returning `buffers_of(self), AuxData(self)` (effectively). The LHS buffers are kept alive by `AuxData`, through its reference to the layout. Instead, I think we want to drop the references from `AuxData`. \r\n\r\nThe quick solution here is to return an `AuxData` with empty nodes. The proper solution is probably to replace the `layout` node contained in `AuxData` with a `form`, `length` pair (i.e. what `to_buffers` returns). This will benefit from the `Form` refactoring, as right now, forms don't have an equality comparison implementation.",
  "created_at":"2022-10-01T21:33:20Z",
  "id":1264486410,
  "issue":1762,
  "node_id":"IC_kwDODBCWws5LXogK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-01T21:34:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, this PR is too big to easily review. I'm going to squash these commits into logical chunks, and open a new PR for review.",
  "created_at":"2022-10-01T21:40:11Z",
  "id":1264487387,
  "issue":1762,
  "node_id":"IC_kwDODBCWws5LXovb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-01T21:40:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, I've followed this so far and I'm on board. I'm answering all of the \"is this okay?\" questions in the affirmative: the global weakref, the `trim` argument, empty AuxData.\r\n\r\nAlso, I'm deleting branches associated with closed PRs. We can always get them back again.",
  "created_at":"2022-10-03T15:47:04Z",
  "id":1265666654,
  "issue":1762,
  "node_id":"IC_kwDODBCWws5LcIpe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-03T15:47:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"#1762 also implemented a new `trim` argument for `recursively_apply`. I removed this, as it was not required for the bug fix in the end, and I think we need to be careful not to add too many parameters just because they might be useful to someone.\r\n",
  "created_at":"2022-10-01T21:57:57Z",
  "id":1264489918,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LXpW-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-01T21:57:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1763?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1763](https://codecov.io/gh/scikit-hep/awkward/pull/1763?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (afc46fa) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/beeeb1faf627334d9c2b0db777c72d8ad05bf226?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (beeeb1f) will **increase** coverage by `0.12%`.\n> The diff coverage is `93.24%`.\n\n> :exclamation: Current head afc46fa differs from pull request most recent head e9fd1b4. Consider uploading reports for the commit e9fd1b4 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1763?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `80.53% <20.00%> (+0.79%)` | :arrow_up: |\n| [src/awkward/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEucHk=) | `93.47% <77.77%> (\u00f8)` | |\n| [src/awkward/\\_connect/numexpr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtZXhwci5weQ==) | `90.00% <87.50%> (+0.14%)` | :arrow_up: |\n| [src/awkward/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvamF4LnB5) | `92.85% <92.85%> (\u00f8)` | |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.14% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/\\_connect/jax/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L19faW5pdF9fLnB5) | `100.00% <100.00%> (+9.52%)` | :arrow_up: |\n| [src/awkward/\\_connect/jax/reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3JlZHVjZXJzLnB5) | `82.85% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/jax/trees.py](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3RyZWVzLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `65.42% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.41% <100.00%> (+0.24%)` | :arrow_up: |\n| ... and [6 more](https://codecov.io/gh/scikit-hep/awkward/pull/1763/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-01T22:00:10Z",
  "id":1264490170,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LXpa6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-04T16:37:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Despite my efforts, it seems like we still have tracer leaks (see the Jax user-guide demo). Ultimately, this happens because we \"leak\" tracer references. This isn't necessarily an issue if we eventually dispose of them, except if the user uses a `jax.checking_leaks()` context. So, we do need to avoid leaking tracers. In `main`, the tracers are considered \"leaked\" because they have a nonzero refcount, due to the buffers being referenced inside `AuxData.layout`. Furthermore, without the leak-checker enabled, we trigger a leak detection event when we operate on \"disposed\" tracers. This happens in `main` when we go to replace the `NumpyArray` buffers; the node transformer trims list layouts, which triggers a `__getitem__` call on the tracer leaf arrays. These are old tracers from the `flatten` implementation, left in the layout.\r\n\r\nThere are some hacky solutions:\r\n- Build a new layout for AuxData, by replacing the `NumpyArray` nodes with ones that hold empty _numpy_ buffers, using the Numpy `nplike`.\r\n- Re-implement a `trim` parameter for `recursively_apply` that let's us disable this trimming.\r\n\r\nEven if we fix the error (by disabling trimming) that is triggered by operating on a leaked tracer (when unflattening, the AuxData has the _old_ tracers in the layout), we still have tracer leaks, i.e. the layout is fragile w.r.t operations. \r\n\r\nSo, I think changing aux-data to behave like `from_buffers` is _probably_ the best way to go here. This would require:\r\n1. Support for comparing form equality (including ignoring index type differences)\r\n2. Identifying the NumpyArray nodes from a layout and correlating them with their form keys. \r\n\r\nRE (2), the easiest approach is to just pull out any Jax types from the `to_buffers` result. This doesn't feel robust - we're assuming (albeit reasonably?) that the only Jax types in a layout are going to be NumpyArray content nodes. Although I can't see why that wouldn't be the case, it's not as safe as explicitly pulling out the NumpyArray contents. I'm also not sure how much we can rely on the string values of the form keys, e.g. `NumpyArray` buffers living under `\"data\"` - do we document that these are the defaults, somewhere (so that we can't just change them accidently in future)? I'll think some more on this.",
  "created_at":"2022-10-02T09:57:01Z",
  "id":1264600267,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LYETL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-02T18:11:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"`ak.to_buffers` is probably still the right way to do this - Forms are a content-free representation of arrays. However, as-of-now, `from_buffers` calls `nplike.frombuffer`, which we don't want to happen with tracers. Perhaps we need to introduce a new nplike method for \"load a buffer OR array\", which is just `frombuffer` for NumPy, and CuPy, but something else for Jax. In the latter case, we would ensure that the array dtype matches the requested dtype.\r\n\r\nSo, as a stop-gap solution, I've since revisited my concern about just building a layout with NumPy array data values, in [ccf6301](https://github.com/scikit-hep/awkward/pull/1763/commits/ccf6301c2ee23d702e38e5a8e2e68cbf664aac80). \r\nThe `AuxData` layout is only going to be used by our Jax handling code, so it's okay if it's a bit fragile. And, in this case, it's not actually \"fragile\" - we convert _all_ nodes to NumPy nodes, which avoids mixing `nplikes` within the same layout.\r\nThe only drawback is that we're allocating empty memory only to then not-use it we could be smarter about this, e.g. maintaining a cache for each dtype\r\n```python\r\nbuffer = get_buffer(content.dtype, at_least_length=content.length)\r\n```\r\n\r\nBut I think we need to probably solve this properly, so I'm happy to leave this as a FIXME.",
  "created_at":"2022-10-02T15:22:10Z",
  "id":1264668481,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LYU9B",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-02T18:13:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, tests are now failing only (I hope) because the dtypes from the arrays passed from Jax in `unflatten` have non-primitive dtypes. We might need some routine to coerce these types.",
  "created_at":"2022-10-02T15:30:30Z",
  "id":1264670150,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LYVXG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-02T15:30:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It's worth me stating here that I've made some decisions/thought processes in this PR that reflect my lack of high-level knowledge w.r.t our goals/expectations of Jax.\r\n\r\nWe need _some_ tracer support, because when we differentiate a function that operates on an Awkward Array, jax ultimately hands us some `JVPTracer` objects. These tracers technically have a known shape. `DynamicJaxprTracer` tracers come from jitted functions, and _don't_  necessarily have a known shape IIRC. Again, for us to see these in Awkward, it's probably that Jax has flattened an Awkward Array, and is now asking us to unflatten it with tracers. So, we should end up seeing tracers over `ShapedArray`, which do have shapes.\r\n\r\nAll of these facts mean that I think we *do* need to support tracers at the nplike level. I think high-level functions like `to_/from_`, etc. don't need to be jittable/diffable, so these can reject any non-concrete types. However, `to_`/`from_buffers`, which don't need to convert data (it can directly use the buffer nodes, if we pass in the same nplike), can be used with tracers.",
  "created_at":"2022-10-02T20:41:17Z",
  "id":1264728947,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LYjtz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-02T20:41:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, this *might* be acceptable. I've added a new `nplike.astype` to handle the difference between `np.ndarray.astype` and `jaxlib.DeviceArray.astype`. I've also added tracer support to `frombuffer`, although it's fairly rudimentary.\r\n\r\n`AuxData` now uses `to_`/`from_buffers`, which is only partially correct as it compares the `to_dict()` representation of the forms. We actually want to allow forms to differ slightly w.r.t dtypes of indices.\r\n\r\nThis feels like the right direction, but I'll hold off for comments from @jpivarski (or Anish, if he's still working on this) :)",
  "created_at":"2022-10-02T21:07:36Z",
  "id":1264733293,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LYkxt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-02T21:07:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"As we discussed further on Slack, Jax gives us tracers when building an `ak.Array` from `primal` and `tangent` objects at the start of a `jvp` call (by flattening the primal, tangent objects; then combining them into a tracer; and finally unflattening that tracer into an `ak.Array`), and at the end (flattening the result; splitting the primal and tangent arrays; unflattening them into `ak.Arrays`). Operations on `ak.Array` objects inside the `jvp`d function will all be operating on `JVPTracer` objects. \r\n\r\nWe *don't* support jitting, and what threw me off was an old demo in `user-guide` that used `jax.jit`, which gives us a `JaxprTracer`.\r\n\r\nMost of this PR is therefore good, but I think we might want to defer the unflattening until a separate PR; the unflatten work will require forms to support equality comparisons, and we also want to touch the form interface in a separate refactoring change. \r\n\r\nWe discussed generalising `from_buffers` to support, in addition to buffer-like objects, arrays that satisfy an `nplike`'s `is_own_buffer`. We can use the `to_backend` features to convert to the appropriate `nplike` in the case that it differs from the required.",
  "created_at":"2022-10-03T19:52:38Z",
  "id":1265954924,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LdPBs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-03T19:54:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this is ready for final review. The only failing tests are derivatives of booleans, which I'm not sure is trivially defined (both logically and in Jax). I think we just need to remove these tests. Maybe also these reducers.",
  "created_at":"2022-10-03T20:41:25Z",
  "id":1266022840,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5Ldfm4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-03T20:41:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I think [d1e4a02](https://github.com/scikit-hep/awkward/pull/1763/commits/d1e4a029b836062b9581be78b17fff83acf76544) tackles the thread safety of the jax registration. Crucially, internal uses of Jax *must* call `assert_registered()` to avoid race conditions in registration - `assert_registered()` acquires the registration lock. Note that most of the routines in `jax.py` acquire the lock because we don't want to read it half-way through registration.\r\n\r\nNote that I haven't done the same for Numba yet. I'm not sure yet whether we need these things; do we want to support awkward in multithreaded environments? I'm guessing probably yes, given that we use thread locals in our `ErrorContext` implementation.",
  "created_at":"2022-10-04T15:00:46Z",
  "id":1267143452,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LhxMc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-04T15:00:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Because of Numba's entrypoint mechanism, calling `register_and_check` manually is a fallback, so it's not as important. Also, if you register something twice in Numba, I don't think it cares. (I don't know if the memory use grows, but that would be small unless you're completely abusing it.)\r\n\r\nSo that's it! I approve this PR.\r\n\r\nThere are some test failures to work through, though: `module 'awkward.jax' has no attribute 'maybe_register_behavior_class'`.",
  "created_at":"2022-10-04T15:10:59Z",
  "id":1267158699,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5Lh06r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-04T15:10:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> maybe_register_behavior_class\r\n\r\nAh drat, that's an artefact of my IDE not synchronising `awkward` against `src`. Hold on. \r\n\r\nAlso, I think there are some other test failures w.r.t differentiation of boolean functions.",
  "created_at":"2022-10-04T15:12:09Z",
  "id":1267160513,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5Lh1XB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-04T15:12:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think with `threading.Lock` this code is hitting a deadlock somewhere. This is strange; I'd only imagine that's possible if something tries to acquire the lock during import, e.g. by creating a global `nplike.Jax.instance()`.\r\n\r\nWe can fix this with an `RLock`. but that's just a bandaid over the cause.",
  "created_at":"2022-10-04T16:10:01Z",
  "id":1267240011,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LiIxL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-04T16:10:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Nope, just an oversight on my part. I've left the lock as a `Lock`, but actually it can be an `RLock` so I've made it so. We don't use the re-entrant nature of the lock deliberately, but hopefully it will avoid any problems in future.",
  "created_at":"2022-10-04T16:25:48Z",
  "id":1267258836,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LiNXU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-04T16:25:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've fixed the test failures (subject to CI succeeding). Are you happy with this design? If so, feel free to squash and merge.",
  "created_at":"2022-10-04T16:37:46Z",
  "id":1267272479,
  "issue":1763,
  "node_id":"IC_kwDODBCWws5LiQsf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-04T16:37:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It seems that what looks like it was lost in translation, is actually rewired:\r\n@jpivarski \r\n```\r\nelif ak.operations.describe.parameters(array).get(\"__array__\") == \"bytestring\": \r\n     return numpy.array( \r\n         [ \r\n             ak.behaviors.string.ByteBehavior(array[i]).__bytes__() \r\n             for i in range(len(array)) \r\n         ] \r\n     ) \r\n  \r\n elif ak.operations.describe.parameters(array).get(\"__array__\") == \"string\": \r\n     return numpy.array( \r\n         [ \r\n             ak.behaviors.string.CharBehavior(array[i]).__str__() \r\n             for i in range(len(array)) \r\n         ] \r\n     ) \r\n```\r\n\r\nthis is now: \r\n\r\n```\r\nelif ak.operations.parameters(array).get(\"__array__\") in (\r\n            \"bytestring\",\r\n            \"string\",\r\n        ):\r\n\r\n            raise ak._errors.wrap_error(\r\n                ValueError(f\"{module.__name__} does not support arrays of strings\")\r\n            )\r\n```\r\n\r\nHowever, this still works for numpy because that code is only called by `jax` and `cupy`, whenever we use numpy we fall back on `to_numpy`:\r\n\r\n```\r\nif module.__name__ in (\"jax.numpy\", \"cupy\"):\r\n        return _impl(array)\r\n    elif module.__name__ == \"numpy\":\r\n        layout = ak.operations.to_layout(array, allow_record=True, allow_other=True)\r\n\r\n        if isinstance(layout, (ak.contents.Content, ak.record.Record)):\r\n            return layout.to_numpy(allow_missing=allow_missing)\r\n        else:\r\n            return module.asarray(array)\r\n```\r\n\r\nProof:\r\n\r\n```\r\n>>> aa = ak.contents.NumpyArray(np.frombuffer(b\"hellothere\", \"u1\"), parameters={\"__array__\": \"bytestring\"})\r\n>>> b = ak._util.to_arraylib(np, aa, False)\r\n>>> b\r\narray([104, 101, 108, 108, 111, 116, 104, 101, 114, 101], dtype=uint8)\r\n>>> c = ak.contents.NumpyArray(np.array([0, 1577836800], dtype='datetime64[s]'))\r\n>>> ak._util.to_arraylib(np, c, False)\r\narray(['1970-01-01T00:00:00', '2020-01-01T00:00:00'], dtype='datetime64[s]')\r\n```\r\n\r\nThe same is true for:\r\n\r\n```\r\nelif isinstance(array, ak.contents.RecordArray): \r\n     raise ak._errors.wrap_error( \r\n         ValueError(f\"{module.__name__} does not support record structures\") \r\n     ) \r\n```\r\n\r\nWhen using `numpy`:\r\n\r\n```\r\n>>> recordarray = ak.contents.RecordArray([ak.contents.NumpyArray(np.array([1, 2, 3, 4, 5], dtype=np.int64))],fields=[\"one\"])\r\n>>> ak._util.to_arraylib(np, recordarray, False)\r\narray([(1,), (2,), (3,), (4,), (5,)], dtype=[('one', '<i8')])\r\n```",
  "created_at":"2022-11-22T17:15:55Z",
  "id":1324003714,
  "issue":1765,
  "node_id":"IC_kwDODBCWws5O6rGC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T17:16:12Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"MEMBER",
  "body":"When I reported this, I didn't go so far as to test it with a CuPy array and a JAX array, so if I had overlooked code elsewhere that makes it work, then that would be good enough to close the issue.\r\n\r\nActually, I just added your tests as a PR that would close this issue. If you approve, go ahead and set that to auto-merge and this issue will be a quick fix.\r\n\r\nThanks!",
  "created_at":"2022-11-22T17:38:13Z",
  "id":1324029109,
  "issue":1765,
  "node_id":"IC_kwDODBCWws5O6xS1",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-22T17:38:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1768?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1768](https://codecov.io/gh/scikit-hep/awkward/pull/1768?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3ec90eb) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3401e2bf53b2c53b877c9d29a5eb0b36e7e01582?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3401e2b) will **decrease** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1768?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1768/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.79% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1768/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1768/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1768/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.95% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1768/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.75% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1768/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1768/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1768/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.03% <0.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1768/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2J1ZmZlcnMucHk=) | `87.12% <0.00%> (+0.99%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-04T22:04:15Z",
  "id":1267629358,
  "issue":1768,
  "node_id":"IC_kwDODBCWws5Ljn0u",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-04T22:04:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1770?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1770](https://codecov.io/gh/scikit-hep/awkward/pull/1770?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (588586d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3401e2bf53b2c53b877c9d29a5eb0b36e7e01582?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3401e2b) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1770?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1770/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1770/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1770/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.95% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1770/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.75% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1770/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1770/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1770/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.03% <0.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_from\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1770/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2J1ZmZlcnMucHk=) | `87.12% <0.00%> (+0.99%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-04T23:27:42Z",
  "id":1267715271,
  "issue":1770,
  "node_id":"IC_kwDODBCWws5Lj8zH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-04T23:33:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This looks reasonable, and I agree with the performance motivations; we're not adding anything substantial to the parsing.",
  "created_at":"2022-10-05T09:35:31Z",
  "id":1268191385,
  "issue":1770,
  "node_id":"IC_kwDODBCWws5LlxCZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-05T09:35:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Copied from Slack because this is worth remembering.\r\n\r\n> While I was there, I noticed two things: there's no protection against an expected field appearing != 1 times (0 or more than 1), and in those cases, it will almost always fail with \"buffer too small\" (unless two JSON objects happen to exactly cancel out). The documentation says that we only assume that the JSON matches its schema, we don't check it, and that would be an example of the JSON not matching its schema. I could put in more mutable state to protect against this case (and an arrow pointing to the first JSON object that fails), but that's putting in more integer-twiddling at runtime.\r\n>\r\n> The other thing I noticed is that we search for matching key strings in each JSON object by iterating over a list of expected strings, in order, each time. That can be made faster by adding a mutable integer of the last index seen + 1 mod the number of keys, so at least if the keys of the JSON objects are always in the same order (a common case), the first one we check will be the right one. This can matter for JSON objects with a large number of expected keys. When I was first writing it, I considered making the key lookup a tree-search, so that lookup is always _O(average length of key)_ instead of only when the keys are in order, but that's a lot of complexity and is probably overkill. (Also, if the pointers of the tree don't point to nearby positions in memory, performance can be worse, not better.)\r\n>\r\n> So, it can be improved in protection against wrong JSON and it can be improved in performance for large numbers of JSON object keys.",
  "created_at":"2022-10-05T12:48:08Z",
  "id":1268391001,
  "issue":1770,
  "node_id":"IC_kwDODBCWws5LmhxZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-05T12:48:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Apparently, keys *should* (i.e., recommended, but not enforced) be unique https://stackoverflow.com/a/23195243/3821154",
  "created_at":"2022-10-05T13:30:41Z",
  "id":1268444130,
  "issue":1770,
  "node_id":"IC_kwDODBCWws5Lmuvi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-05T13:30:41Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is a known \"bug\", and it seems like it is the least-worst option of the solutions to implementing a v2 shim. It doesn't seem like there is a way to import the same package under different names in `sys.modules`, without Python creating a new module object. We could pre-populate `sys.modules` with pre-generated aliases, but then if we miss something, an erroneous import would give the user new state and overwrite the name of the submodule in the parent module namespace. \r\n\r\nGiven that v2 has had so many bug fixes over the last couple of versions, and we made no guarantees initially that we would provide a shim, my feeling is that we just have to put up with a hard-breakage if users aren't already treating `ak._v2` as a non-package. @jpivarski thoughts?",
  "created_at":"2022-10-05T19:50:05Z",
  "id":1268891347,
  "issue":1771,
  "node_id":"IC_kwDODBCWws5Lob7T",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-05T19:50:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The code change of\r\n\r\n```python\r\nimport awkward._v2 as ak\r\n```\r\n\r\nto\r\n\r\n```python\r\nimport awkward as ak\r\n```\r\n\r\nis an easy one. What's hard is coordinating versions of packages, particularly in a CI matrix, in which each one might get a different version from PyPI.\r\n\r\nBut if the shim isn't working or only partially works, then that's even worse, since downstream users have to adapt anyway, and it's not the simple adaptation described above.\r\n\r\nOkay, so I'm thinking that you're right and we should give up on the idea of a shim, just doing a hard break. That's also different from what I told @alexander-held, so I'm including him in the loop here, too. Since we haven't released even an RC yet, going back and forth like this won't be too disruptive.\r\n\r\nSuppose instead of a shim, we ask all downstream users to replace\r\n\r\n```python\r\nimport awkward._v2 as ak\r\n```\r\n\r\nwith\r\n\r\n```python\r\ntry:\r\n    import awkward._v2 as ak\r\nexcept ImportError:\r\n    import awkward as ak\r\n```\r\n\r\nAs of 2.0.0rc1 (not released yet), we would have _no_ `_v2` submodule. A user who hasn't adapted yet would get an error, but the above fix is easy. The try-except block would only do the wrong thing (pass through v1) if the version of Awkward predates the first release of a `_v2` submodule, which is so long ago, I can't even remember. (A year, say least.) Only early adopters of v2 would be affected, so I think no one would fall between the cracks.\r\n\r\nMaybe it needs to be ModuleNotFoundError, but that's a subclass of ImportError, so it still works.\r\n\r\nAnyone who has a testing matrix that's not complicated by Python versions that Awkward v2 doesn't support (3.6, specifically) can just\r\n\r\n```python\r\nimport awkward as ak\r\n```\r\n\r\nafter 2.0.0rc1, and that includes Uproot.",
  "created_at":"2022-10-05T20:39:59Z",
  "id":1268949950,
  "issue":1771,
  "node_id":"IC_kwDODBCWws5LoqO-",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-05T20:39:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@agoose77 thanks for the explanation of the imports issue. And wearing my early adopter hat (and having easily transitioned to _removing_ `._v2` usage) I don't feel strongly either way about the eventual conclusion on having or not having the v2 shim.",
  "created_at":"2022-10-05T21:29:30Z",
  "id":1268997758,
  "issue":1771,
  "node_id":"IC_kwDODBCWws5Lo15-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-05T21:29:30Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"MEMBER",
  "body":"I've been using\r\n```python\r\ntry:\r\n    import awkward._v2 as ak\r\nexcept ModuleNotFoundError:\r\n    import awkward as ak\r\n```\r\nso far, with the intention of monitoring the developments to see whether I would need to update this. I also do not feel strongly either way, this was easy to adopt.\r\n\r\nI imagine the most challenging setup for projects depending on `awkward` is a potential conflict due to other dependencies that may put an upper bound on `awkward` due to a delayed adoption. Such a project would in any case be using `awkward<2` in the meantime and `_v2` would be there regardless.",
  "created_at":"2022-10-05T22:05:28Z",
  "id":1269029445,
  "issue":1771,
  "node_id":"IC_kwDODBCWws5Lo9pF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-05T22:05:28Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"There is a simple fix: make \"_v2\" a symbolic file link back to the root directory. The only downside is that you would have an `akwards._v2._v2._v2...`, but that's fine.",
  "created_at":"2022-10-06T02:00:56Z",
  "id":1269208469,
  "issue":1771,
  "node_id":"IC_kwDODBCWws5LppWV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T02:00:56Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not sure that will work :thinking:; wheels don't support symlinks. We could create a v2 symlink at runtime (only on unix), but that's fairly unappealing. Furthermore, if we could establish the link by other means, we would then end up with two separate instances of Awkward in the same Python interpreter which I'm not sure about. On the one hand, that's what we had with v1/v2, but on the other, `awkward.v2` _is_ the same as `awkward` and it would feel unnatural to have them behave distinctly.",
  "created_at":"2022-10-06T07:36:26Z",
  "id":1269496447,
  "issue":1771,
  "node_id":"IC_kwDODBCWws5Lqvp_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T07:36:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"A decision needs to be made on this.\r\n\r\nWe've tried two ways of implementing an `awkward._v2` that points back to `awkward`, and they both seemed fine in our first tests and then failed in subtle ways (in someone else's workflow!) later. I suspect that there isn't a foolproof method, and these subtle failures are worse than an outright ModuleNotFoundError if there's no `awkward._v2` at all.\r\n\r\nSo I think we should have no `awkward._v2` at all. Here's what the consequences of that would be.\r\n\r\n  * Early adopters of v2 have `import awkward._v2 as ak` in their scripts or libraries. When they install 2.0.0 or one of its RC releases, it will fail with ModuleNotFoundError.\r\n    - If their code is always running under 2.0.0(rcX), they can replace the `import awkward._v2 as ak` with `import awkward as ak`.\r\n    - If their code is sometimes running under 2.0.0(rcX) and sometimes v2 within 1.8.X, 1.9.X, or 1.10.X, perhaps because they have a test matrix with one of the tests under Python 3.6 and 2.0.0(rcX) doesn't support Python 3.6, then this try-except would give them v2 in all circumstances:\r\n\r\n```python\r\ntry:\r\n    import awkward._v2 as ak\r\nexcept ModuleNotFoundError:\r\n    import awkward as ak\r\n```\r\n\r\n  * Mainstream users who encounter v2 for the first time when `pip install awkward` gives them 2.0.0 (not RC) will just see v1 behavior switch over to v2 behavior. Depending on what they use, they might not notice any difference at all: there's a large subset of the API that is backward-compatible. If they do see changes, it will be like any other version upgrade: either they'll have to adapt or they'll have to cap their `awkward` version until they're up to date. A submodule named `v2` would never factor into that at all.\r\n  * The only way to use v1 and v2 in the same process is with one of the releases that includes an incomplete v2 implementation, from [1.8.0rc1](https://github.com/scikit-hep/awkward/releases/tag/1.8.0rc1)/[1.8.0](https://github.com/scikit-hep/awkward/releases/tag/1.8.0) (January 7, 2022/March 1, 2022) onward (introduced in #1208). We will not recommend this because the most recent v2 someone can get this way is in [1.10.1](https://github.com/scikit-hep/awkward/releases/tag/v1.10.1) (September 22, 2022).\r\n\r\nThis set of consequences sound pretty good to me. It would be strictly _nicer_ to provide a `_v2` stub, so that early adopters can adjust their import statements after the 2.0.0 release, but the consequences of a botched `_v2` stub are not nice, and I'm not confident that there's a clean way to do it.\r\n\r\nActually, a little better than having no `_v2` at all: we introduce a `_v2` submodule that immediately raises ModuleNotFoundError with a descriptive error message saying that `import awkward as ak` or the try-except technique should be used instead. I'll start a PR and we can continue the discussion there.",
  "created_at":"2022-11-01T17:37:50Z",
  "id":1298880407,
  "issue":1771,
  "node_id":"IC_kwDODBCWws5Na1eX",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-01T17:37:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Personally, I'm in favour of this. We don't want people to be running on `_v2` forever, and so at *some* point we need to push them over. I don't see any huge issue with doing that now rather than in N months. At least now it is less likely to be in released packages that are part of some dependency chain. ",
  "created_at":"2022-11-01T18:33:49Z",
  "id":1298945444,
  "issue":1771,
  "node_id":"IC_kwDODBCWws5NbFWk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T18:34:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jakevdp we already had this issue open, so I'm going to use this as our tracker for the follow up of our meeting today!",
  "created_at":"2022-10-10T19:28:44Z",
  "id":1273725766,
  "issue":1772,
  "node_id":"IC_kwDODBCWws5L64NG",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-10T19:28:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR will prevent v2 _record_ (not tuple) forms from being read properly by v1. This is not ideal, but I think we _do_ need to fix this. If we were keen on being able to read v2 forms in v1, then we could hold off on changing form _serialisation_ until a later PR; allowing v2 to _read_ this new schema so that in future we can switch painlessly. However, I don't think we are as worried about `v2`\u2192`v1` as the other way around.\r\n\r\nAdditionally, we don't _have_ to require that the entire-form is a single style. I just think that seems like a good way to catch accidental uses of this (safety).",
  "created_at":"2022-10-06T09:22:05Z",
  "id":1269664043,
  "issue":1773,
  "node_id":"IC_kwDODBCWws5LrYkr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T09:22:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1773?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1773](https://codecov.io/gh/scikit-hep/awkward/pull/1773?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (02be6b4) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/df377bd719926343e88a254cede3deacd3bc07d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (df377bd) will **increase** coverage by `0.00%`.\n> The diff coverage is `38.70%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1773?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/1773/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `85.39% <32.14%> (+0.46%)` | :arrow_up: |\n| [src/awkward/forms/recordform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1773/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvcmVjb3JkZm9ybS5weQ==) | `88.57% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1773/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1773/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1773/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.95% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1773/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.75% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1773/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1773/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1773/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.17% <0.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1773/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.95% <0.00%> (+0.16%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-06T09:23:36Z",
  "id":1269666574,
  "issue":1773,
  "node_id":"IC_kwDODBCWws5LrZMO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T17:52:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Overall, inspired by the point @henryiii made on this morning's call, this change in the Form-JSON format could be accompanied by the writer's Awkward version number:\r\n\r\n```python\r\n\"version\": ak.__version__\r\n```\r\n\r\nor a protocol compatibility number, which is more granular than Awkward versions (like the ABI versions in pybind11, or Python's pickle protocol numbers):\r\n\r\n```python\r\n\"format-compatibility\": \"v2\"\r\n```\r\n\r\n(starting with `\"v2\"` because this is Awkward v2). Between these two, I prefer the latter because\r\n\r\n   * this Form-JSON format should evolve very slowly, if at all\r\n   * non-Awkward writers of Form-JSON need to know what to put there.\r\n\r\n@henryiii mentioned the JSON format for hist, but while hist gets new features all the time, Forms intentionally don't. The second point about what non-Awkward writers should do comes up because Uproot is similarly at a loss to say what \"version of ROOT\" it is when it writes a file. It's semantically off-kilter.\r\n\r\nIt's hard to make an argument that a format is going to be slowly changing, if at all, at a moment in time when you're changing it. But here's the big picture:\r\n\r\n   * June 2018 \u2012 April 2020: Awkward v0 had very active JSON metadata, [with a version number](https://github.com/scikit-hep/awkward-0.x/blob/dd885bef15814f588b58944d2505296df4aaae0e/awkward0/persist.py#L291). It was active in the sense that it could run arbitrary Python code: the JSON was one-to-one with LISP S-expressions that picked out functions in the codebase and ran them, so that improvements could be made in metadata that would work in old versions of Awkward. Then I started worrying about metadata, added a whitelist, and it was pretty bad.\r\n   * April 2020 \u2012 June 2021: the Form-JSON format created for Awkward v1 was first implemented (in C++) in 1c18425339c99df9ecf9c49b0a27b6faa22d651c, and since it matches the structure of the Forms themselves (set of constructor arguments/properties defining the \"dataclass\"), which also hasn't changed, it's been stable. Replacing `ak.from_arrayset`/`ak.to_arrayset` with `ak.from_buffers`/`ak.to_buffers` (#592, introduced in version 1.0.1, old was removed in version 1.1.0) was a change in how pickling works because the length of the array is now recognized as necessary information to reconstruct an array, but that didn't affect the Form-JSON.\r\n   * June 2021 \u2012 now: Awkward v2 ignores the field \"`has_identities`\" and looks for an optional field \"`has_identifier`\" because the name has changed (#914). Identities/Identifier hasn't actually been implemented, so if a Form has this, it raises a NotImplementedError.\r\n   * Now, October 2022, you're adding a new way to write RecordForm as JSON, but we can still read the old way.\r\n   * I'm thinking of finally giving up on ever implementing Identifiers, and then \"`has_identifier`\" would become an ignored field.\r\n\r\nAs you can see, after v0, this Form-JSON format has not evolved very much and it's not expected to evolve in the future. We have complete forward and backward compatibility from April 2020 until now (breaking the ability of v1 to read v2 RecordForms), because the other changes were for optional fields or peripheral, not directly affecting the JSON-Form format.\r\n\r\nAn optional\r\n\r\n```python\r\n\"format-compatibility\": \"v2\"\r\n```\r\n\r\ncould be prudent, in a preparing-for-unseen-disasters sense, not an expectation of ever having to use it. However, Form-JSON doesn't have a top-level; it's self-similar. If we were to add this, it would have to be added in every node.\r\n\r\nGiven that needing this is such a long shot and we do have format compatibility from v1 to v2, I would vote against adding this format-compatibility marker.",
  "created_at":"2022-10-06T17:11:16Z",
  "id":1270424772,
  "issue":1773,
  "node_id":"IC_kwDODBCWws5LuSTE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T17:11:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski you've written a good summary of the version discussion and its pros and cons. Another option is to go for a monotonic integer that is deliberately meaningless - it just carries enough information for us to define epochs in the metadata space. As you say, we really aren't likely to change our metadata in a backwards incompatible (can't read old files) way, and although this is a forward incompatible change, it's the only one in some time to resolve a longstanding bug. Formats like protobuf have schema versions because they do change _all_ the time.",
  "created_at":"2022-10-06T17:40:23Z",
  "id":1270457339,
  "issue":1773,
  "node_id":"IC_kwDODBCWws5LuaP7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T17:40:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski if you wouldn't mind checking over these last commits I'd be much obliged. If they're good, you're welcome to merge!",
  "created_at":"2022-10-06T17:45:30Z",
  "id":1270462887,
  "issue":1773,
  "node_id":"IC_kwDODBCWws5Lubmn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T17:45:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, this is good and I'll merge it now.\r\n\r\nRegarding the `format-compatibility` marker, I'd rather not include it for the reasons given, and if there's no objection, then there's no action to take.",
  "created_at":"2022-10-06T18:21:53Z",
  "id":1270502350,
  "issue":1773,
  "node_id":"IC_kwDODBCWws5LulPO",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-06T18:21:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Quick, not looking at this in detail, comment:\r\n\r\n> Another option is to go for a monotonic integer that is deliberately meaningless - it just carries enough information for us to define epochs in the metadata space.\r\n\r\nThis is what boost-histogram does. The first item in the tuple is a monotonic number and we increase it by one if we add a field to the pickle, and the `__setstate__` checks that number and knows how to read all the past versions of pickles. The original \"0\" version of pickles was a dict, so if it's a dict, we know it's the old style.\r\n\r\nhttps://github.com/scikit-hep/boost-histogram/blob/00105a785f0a27c3718539078f9db35c92537e54/src/boost_histogram/_internal/hist.py#L612-L645",
  "created_at":"2022-10-06T18:30:17Z",
  "id":1270513232,
  "issue":1773,
  "node_id":"IC_kwDODBCWws5Lun5Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T18:31:40Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"The \"format-compatibility\" string and monotonic integer both decouple the format version from the code version, which I think is good. (I see that pybind11's ABI version and pickle's protocol version both do this.)\r\n\r\nTo fill you in, @henryiii, on what went wrong with our pickle compatibility: it had nothing to do with the format changing, since the format didn't change, so a version marker wouldn't have helped. The problem was that the state tuple contained a Python class:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/f2092ee90e78c9ce00c54b3f5d9612bd218336ee/src/awkward/highlevel.py#L1455-L1462\r\n\r\nwhere `form` is an instance of `ak._ext.forms.Form`, which no longer exists. When Python unpickles, it tries to create instances of the classes (compiled extension classes, actually), and that's where it fails.\r\n\r\nWhat I wanted and intended to do, way back in April 2020, was to use `form.to_json()` there (or at least `form.to_dict()`), and convert back in `__setstate__`. That way, any pickles made from any version of 1.x would be readable in 2.x because the pickle state is made entirely out of Python builtins. But I somehow goofed that up and forgot.\r\n\r\nWe _could_ release 1.x patch that fixes this, but that only fixes pickles made with the patch release, not all the ones made since the format was introduced, which is the point of long-timescale compatibility.\r\n\r\nWe could also introduce dummy classes with the right names for Python to fill, then immediately convert them over to our actual classes, but this is not maintainer-friendly. I think it's a better overall decision to give up on pickle compatibility, rather than do that.\r\n\r\nIt's frustrating because just one line of code and a time machine are needed to fix it. That's all!",
  "created_at":"2022-10-06T19:02:27Z",
  "id":1270553223,
  "issue":1773,
  "node_id":"IC_kwDODBCWws5LuxqH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T19:02:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> We could also introduce dummy classes with the right names for Python to fill, then immediately convert them over to our actual classes, but this is not maintainer-friendly. I think it's a better overall decision to give up on pickle compatibility, rather than do that.\r\n\r\nYes, we could introduce shim types that just define `__setstate__` according to `main-v1`. It would actually not be too much code, but I'll let you be the guide on whether any code is too much for something people might not need.",
  "created_at":"2022-10-06T19:07:35Z",
  "id":1270558920,
  "issue":1773,
  "node_id":"IC_kwDODBCWws5LuzDI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T19:07:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We can revisit it if somebody complains.  `:)`",
  "created_at":"2022-10-06T19:08:33Z",
  "id":1270560169,
  "issue":1773,
  "node_id":"IC_kwDODBCWws5LuzWp",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-06T19:08:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1774?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1774](https://codecov.io/gh/scikit-hep/awkward/pull/1774?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9ffc432) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/df377bd719926343e88a254cede3deacd3bc07d0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (df377bd) will **increase** coverage by `0.01%`.\n> The diff coverage is `72.72%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1774?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `90.05% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `89.74% <\u00f8> (-0.26%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19sYXlvdXQucHk=) | `80.39% <62.50%> (+1.32%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.70% <75.00%> (-0.09%)` | :arrow_down: |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `74.90% <84.61%> (+0.37%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.95% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| ... and [2 more](https://codecov.io/gh/scikit-hep/awkward/pull/1774/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-06T15:57:42Z",
  "id":1270320490,
  "issue":1774,
  "node_id":"IC_kwDODBCWws5Lt41q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T16:13:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1775?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1775](https://codecov.io/gh/scikit-hep/awkward/pull/1775?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f3ac848) into [docs](https://codecov.io/gh/scikit-hep/awkward/commit/13eb6984a57e6b64353268f037fa23da737d4094?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (13eb698) will **increase** coverage by `2.10%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1775?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_v2/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY2FydGVzaWFuLnB5) | | |\n| [src/awkward/\\_v2/operations/ak\\_to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfdG9fcmRhdGFmcmFtZS5weQ==) | | |\n| [src/awkward/\\_v2/types/uniontype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3VuaW9udHlwZS5weQ==) | | |\n| [src/awkward/\\_v2/operations/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfbWVhbi5weQ==) | | |\n| [src/awkward/\\_v2/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL2NvbnRlbnRzL3VubWFza2VkYXJyYXkucHk=) | | |\n| [src/awkward/\\_v2/operations/ak\\_run\\_lengths.py](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfcnVuX2xlbmd0aHMucHk=) | | |\n| [src/awkward/\\_v2/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL29wZXJhdGlvbnMvYWtfY29uY2F0ZW5hdGUucHk=) | | |\n| [src/awkward/\\_v2/types/regulartype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3R5cGVzL3JlZ3VsYXJ0eXBlLnB5) | | |\n| [src/awkward/\\_v2/\\_connect/cuda/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL19jb25uZWN0L2N1ZGEvX19pbml0X18ucHk=) | | |\n| [src/awkward/\\_v2/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyL3JlY29yZC5weQ==) | | |\n| ... and [325 more](https://codecov.io/gh/scikit-hep/awkward/pull/1775/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-06T20:36:33Z",
  "id":1270648335,
  "issue":1775,
  "node_id":"IC_kwDODBCWws5LvI4P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-07T09:05:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Oh, thanks @Saransh-cpp! The `docs` branch *should* have the various badges up to date, but if you do find anything that needs fixing, please open a PR! I'm in the process of ensuring that our current user guide works with v2, and then we can start merging that into main.",
  "created_at":"2022-10-06T20:36:53Z",
  "id":1270648675,
  "issue":1775,
  "node_id":"IC_kwDODBCWws5LvI9j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T20:36:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Thank you! That is an important correction.\r\n\r\nIt looks like @Saransh-cpp's fixes to CONTRIBUTING.md, README.md, and README-pypi.md are not in the `docs` branch, and they would merge well with it.\r\n\r\nFor the docs-sphinx/index.rst and docs-src/quickstart.md, including those fixes would probably be a merge conflict with `docs`.",
  "created_at":"2022-10-06T23:23:24Z",
  "id":1270836674,
  "issue":1775,
  "node_id":"IC_kwDODBCWws5Lv23C",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-06T23:23:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thank you for the suggestions, @agoose77 and @jpivarski! This should work well with the `docs` branch now.",
  "created_at":"2022-10-07T08:52:49Z",
  "id":1271310680,
  "issue":1775,
  "node_id":"IC_kwDODBCWws5LxqlY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-07T08:52:49Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"LGTM! I will merge this despite the docs failing; `docs` is not yet up-to-date with v2, so these builds will not pass due to the notebooks failing.",
  "created_at":"2022-10-07T09:05:46Z",
  "id":1271324308,
  "issue":1775,
  "node_id":"IC_kwDODBCWws5Lxt6U",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-10-07T09:05:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1776?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1776](https://codecov.io/gh/scikit-hep/awkward/pull/1776?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ec77527) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/eee968a9ff0895799bb6298c59b2fe073d53a086?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eee968a) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1776?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1776/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1776/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1776/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1776/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1776/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1776/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1776/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1776/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-08T22:09:30Z",
  "id":1272405002,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L11wK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T20:36:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> * I vaguely recall a conversation with @jpivarski in which he suggested that we can't, because `latest` is in many of the pre-shared docs links.\r\n\r\nI have shared a lot of links with the form\r\n\r\n```\r\nhttps://awkward-array.readthedocs.io/en/latest/_auto/ak.{FUNCTION}.html\r\n```\r\n\r\nwhere `{FUNCTION}` is a top-level Awkward function (or class). That's because ReadTheDocs has, until now, defaulted to `latest` and I copied the link that was there. (It was often done quickly as part of a how-to explanation in chats, emails, GitHub, etc.)\r\n\r\nHowever, I don't think that should prevent us from using the `latest` and `stable` labels in a meaningful way: with `latest` referring to any code merged into `main` (meaning v2 right now) and `stable` referring to code from the most recent non-RC release (meaning v1, version 1.10.1 right now). I had always expected that the links I shared would lead to newer versions of the documentation when they came out, and links for functions that are removed (virtual arrays, partitioned arrays) would become broken links. Introducing the `latest`/`stable` distinction does not change that.\r\n\r\nAn argument could be made for keeping versions of the documentation for every version of the code, in which `latest` and `stable` are moving symbolic links. Projects that have done this suffer from another issue: people share versioned links so much that search engines like Google return links to old versions in response to search queries. To fix _that_ those projects then add a banner at the top of old documentation, pointing to `stable`. That would mean keeping the old documentation forever but not in its original form: as soon as a version gets out of date, it needs to be modified to have the redirect banner. Unless that's automated by some Sphinx feature, I don't think we should reinvent it. Awkward is still a small enough project that we can just point to two versions of the documentation, `latest` and `stable`. (There's [an alternative](https://web.archive.org/web/20220305172522/https://awkward-array.org/quickstart.html) if someone absolutely needs an old version.)\r\n\r\nIf we're going to merge `docs` into `main` before the December release, it will have to be handled carefully. Is it your intention to deploy a v2 `latest` while `stable` remains v1? Then we'd be testing the ReadTheDocs mechanism that updates `latest` from `main`, but we wouldn't be testing the ReadTheDocs mechanism that updates `stable` from a tag until the December release.\r\n\r\nPerhaps both could be tested if we do it independently of this PR. Suppose we configure ReadTheDocs to update `latest` from any change of `main` and `stable` from a tag and then release 1.10.2 (which has some updates to deliver, anyway). Then we should see a `stable` build get triggered, and subsequently changing `main` should trigger a `latest` build. Then we'd be confident that this mechanism is working on a low-stakes change of website. After that, merging this PR into `main` would trigger a radically new `latest` without changing `stable`, and we'd know that the `stable` update will work in December, when everything else will be in flux. It would be good to have one fewer thing to worry about.\r\n\r\nThere's also the issue of the Netlify site that `https://awkward-array.org` points at. It provides content that is needed by `stable` until December, but `latest` already has that content (in a more complete form, since you've been filling in a lot of the TODOs). The Netlify site will have to be undisturbed until the December release, including the DNS that points `awkward-array.org` at it. Redirecting the `awkward-array.org` domain name from Netlify to ReadTheDocs can only happen once.\r\n\r\nAlso, a lot of users probably have bookmarks to `latest`. They'll see new documentation and may be confused about whether the v2 transition has happened already. Furthermore, a lot of the documentation will be correct (because the high-level functions are almost entirely unchanged), but some will be wrong: a new page describes `ak.contents.Content`, but that name does not exist in Awkward 1.10.\r\n\r\nOrrrrrr... we could just wait to merge this PR into `main` in December. It's disappointing because there's a lot of good material to see in the `docs` branch, and the `docs` branch is necessarily drifting far from `main`. But many of the above complications go away if we just release the new docs at the same time as the new code.",
  "created_at":"2022-10-10T16:38:39Z",
  "id":1273570892,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L6SZM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T16:38:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I don't love versioned documentation. I recognise that for some projects it is necessary, but I would need more fingers than I have available to count how many times I've accidentally landed on the wrong documentation and visually filtered out the warning banners.\r\n\r\n> Is it your intention to deploy a v2 latest while stable remains v1? \r\n\r\nYes, I would ideally like for us to be deploying the docs from GitHub so that we can ensure they're correct. Otherwise, I think we'd need to e.g. maintain a `docs` branch that regularly does something like `git reset --hard origin/main` solely for the purpose of providing a branch for RTD. I'm not aware of any mechanism to build one branch under another name, but I might not have looked hard enough?\r\n\r\n> (in a more complete form, since you've been filling in a lot of the TODOs)\r\n\r\nWell, in these PRs this content isn't here; it's been tricky to keep rebasing everything, so I've held off any newer changes until we had finalised the v2 merge.\r\n\r\nIf we've mainly released `latest` into the wild, then for now we'll need to respect that. Maybe we should move to a policy of sharing `stable` moving forward, so that in some future release we can worry about this less? In the meantime, let's just not _deploy_ docs from `main`, i.e. we just stop deploying *any* docs changes across any version until December. I think this is reasonable; v1 should not gain any new features IIRC.",
  "created_at":"2022-10-10T16:47:29Z",
  "id":1273580856,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L6U04",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T16:47:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It will be a lot easier to share the `stable` link if that's the default. Right now, `latest` is the default. With `latest` == `main` and `stable` == last tag, the `stable` one should be the default.\r\n",
  "created_at":"2022-10-10T17:03:31Z",
  "id":1273598618,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L6ZKa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T17:03:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"(We talked on a Google Meet about how to go forward: @agoose77 will be removing the `main`-update \u2192 ReadTheDocs trigger, and then we can merge the `docs` branch into `main` without disturbing what documentation the users see. The documentation update will be a big bang when Awkward 2.0.0 is released, to keep things simple.)",
  "created_at":"2022-10-10T18:23:59Z",
  "id":1273670110,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L6qne",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T18:23:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski are you happy for this to now merge into `main`, given that I've disabled the step that triggers RTD on `main`, and disabled the RTD GitHub webhook?",
  "created_at":"2022-10-10T20:51:04Z",
  "id":1273808340,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L7MXU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T20:51:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, because the triggers have been disabled and v1 users won't see anything different.\r\n\r\nHowever, I don't have a way to see the rendered documentation: https://awkward-array.readthedocs.io/en/docs/index.html hasn't been updated with #1734 yet. In general, how are we going to see the rendered documentation as it develops? We'll want to point other reviewers to it when we've finished iterating.",
  "created_at":"2022-10-10T21:00:52Z",
  "id":1273815520,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L7OHg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T21:00:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - yes, realised that it would make more sense to just disable docs push on `main`, and then we can still see changes in pushed workflows. There *might* be a quirk with `ref_name` not always doing what it should, so I'll keep an eye on things. I'm hoping that 1057232 appears in https://awkward-array.readthedocs.io/en/docs/index.html in the next ten minutes or so.\r\n\r\nThe plan is to have branches continue to build docs, if we enable them on RTD. The `docs` branch is already active on RTD (hidden, though), so we can use it as a \"I want to make a docs PR that people can see\" branch If that's easy?",
  "created_at":"2022-10-10T21:11:00Z",
  "id":1273824553,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L7QUp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T21:23:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"https://awkward-array.readthedocs.io/en/docs/",
  "created_at":"2022-10-10T21:43:37Z",
  "id":1273845545,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L7Vcp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T21:43:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've removed \"What is an Awkward Array\" button:\r\n![image](https://user-images.githubusercontent.com/1248413/195119211-f056a9b5-3f08-409c-b5bc-b883a09546f8.png)\r\n\r\nIt's been replaced with a link to the \"Try Awkward Array\" page. This page is now a retrolite notebook, which is effectively the old \"What is an Awkward Array\" notebook:\r\n![image](https://user-images.githubusercontent.com/1248413/195119413-82decb09-0774-47da-aa17-05d8be025cac.png)\r\n\r\nThe original \"What is an Awkward Array\" page has therefore also been removed, in favour of the \"Overview\" subsection of \"Getting Started\", which includes more detail (including unions):\r\n![image](https://user-images.githubusercontent.com/1248413/195118597-2113dff1-dd5b-4dae-829e-9ca739e597a4.png)\r\n\r\n",
  "created_at":"2022-10-11T14:30:27Z",
  "id":1274789205,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L-71V",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T14:30:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski the v1 docs ordering stemmed from the fact that the `operations.py` module had pre-ordered functions (i.e., `from_buffers` follows `to_buffers`). It also ordered \"convert\" vs \"structure\", etc. We have disposed of this level of categorisation within our source tree. Could you clarify what kind of ordering you would like to see here?",
  "created_at":"2022-10-11T14:36:54Z",
  "id":1274800310,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L--i2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T14:36:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> the v1 docs ordering stemmed from the fact that the `operations.py` module had pre-ordered functions\r\n\r\nI see, that is an issue. (I had been thinking there was an ordered list of functions in the `prepare_docstrings.py` script, but maybe that's Uproot.) Although I suggested a solution, if it's possible to group items in the left-bar while also not hiding them.\r\n\r\nThe \"Navigation\" content in the front page of API reference puts high-level functions and classes into groups. It's expressed as text (markdown) and it's already visibly out of date: functions like `ak.to_awkward0` no longer exist. If those groupings were instead expressed as left-bar groups, in YAML or Python code that generates YAML, then the functions within each group can be left as alphabetical; the order doesn't matter in a group of length 2\u20125, as most of these are. If it's Python code generating the left-bar YAML, then it can make an \"other\" category for all of the functions that are discovered via `dir(ak.operations)` but not explicitly classified. We might add a function and forget to categorize it, but it will be visible in the docs and seeing it in the \"other\" category will be a reminder to add it to a category later.\r\n\r\n(The URLs for the `ak.*` functions shouldn't depend on the grouping, so that we can move them from one group to another at any point in the future. In fact, the URLs should be the same as in v1, so that all the shared links, like `https://awkward-array.readthedocs.io/en/latest/_auto/ak.num.html`, still work.)",
  "created_at":"2022-10-11T16:22:28Z",
  "id":1274957063,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5L_k0H",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T16:22:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> (The URLs for the ak.* functions shouldn't depend on the grouping, so that we can move them from one group to another at any point in the future. In fact, the URLs should be the same as in v1, so that all the shared links, like https://awkward-array.readthedocs.io/en/latest/_auto/ak.num.html, still work.)\r\n\r\nThe v1 URLs are mapped onto v2 URLs by redirect (client side). This handles the clean-up in docs structure, but also things that have been renamed e.g. `/ak.layout.Record.html` -> `/reference/ak.record.Record.html`\r\n\r\n> The \"Navigation\" content in the front page of API reference puts high-level functions and classes into groups. It's expressed as text (markdown) and it's already visibly out of date: functions like ak.to_awkward0 no longer exist. \r\n\r\nFYI, in the `docs` branch, this is now mostly up date: https://awkward-array.readthedocs.io/en/docs/reference/index.html\r\n\r\n> Although I suggested a solution, if it's possible to group items in the left-bar while also not hiding them.\r\n\r\nCool, so we're going for similar categories to the current index? I'll try to keep it not-too-busy, let's see what happens ...",
  "created_at":"2022-10-11T18:05:37Z",
  "id":1275081402,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MADK6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T18:05:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The easiest thing to do here is manually write the toctree, and warn the user if anything didn't appear there that was found by auto generation. The initial categories are a WIP, so feedback is welcome.\r\n\r\nThe new reference index / ToC will be under https://awkward-array.readthedocs.io/en/docs/reference/index.html when complete",
  "created_at":"2022-10-11T20:17:05Z",
  "id":1275224434,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MAmFy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T20:17:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"![image](https://user-images.githubusercontent.com/1248413/195190688-60fae2ca-b391-4116-8c1a-510c0998ce48.png)\r\n",
  "created_at":"2022-10-11T20:21:21Z",
  "id":1275229171,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MAnPz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T20:21:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It looks really good!\n\nWe'll have to stop ignoring the docs warnings, then.  :)\n",
  "created_at":"2022-10-11T20:55:51Z",
  "id":1275266932,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MAwd0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T20:55:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> We'll have to stop ignoring the docs warnings, then.  :)\r\n\r\nYes, this is a goal of mine - once we get things in place, we start fixing the warnings!",
  "created_at":"2022-10-11T20:58:44Z",
  "id":1275269365,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MAxD1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T20:58:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski do you prefer the badges, or the \"try it now\" link?\r\n![image](https://user-images.githubusercontent.com/1248413/195326515-f5d1c050-6ffa-4bbc-87f3-d80538e27a5e.png)\r\nvs\r\n![image](https://user-images.githubusercontent.com/1248413/195326625-bde9a2c9-e9b3-4902-85c6-8bf603e4d5e3.png)\r\n\r\n\r\n\r\nI'm not really sure what's happening with `ccache` here. \"it works in my environment\" :cry: It might be that we merge this without being able to cache the wasm-build for now.",
  "created_at":"2022-10-12T11:03:40Z",
  "id":1275982110,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MDfEe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-12T11:07:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think the first one, with the badges, is more useful. It doesn't take more space, and the added complexity is managed via design: they're all on the same line, so if a reader doesn't know what they are, it's clear that they're all the same sort of thing and can all be ignored together.\r\n\r\nThe try-in-browser is amazing/wonderful, but it will need two improvements to be truly useful: (a) Pyodide needs to load more quickly. We can't make that happen, but that will happen with time. (b) We need to direct a user with specific things to try, not just an empty box. Ideally, the \"What is an Awkward Array?\" page would be executable (maybe need to wait for Thebe-Pyodide integration?) with hints about things to try beyond the thing that is actually executed by just shift-entering the cells.\r\n\r\nWe can have both, too. The link to in-browser executable Awkward Array can be a fourth badge, and to keep the width narrow, the text can just be \"Try it!\"\r\n\r\nI see that the badge colors are themed, and we're lucky enough that they're all different from each other. Conda likes lime green, PyPI likes deep blue, GitHub likes grey, and there's no constraint on the color of the \"Try it!\" button/badge. How about shocking orange? It would draw the eye right at it (and \"Try it!\" is small enough that it won't burn your eyeballs).",
  "created_at":"2022-10-12T15:24:07Z",
  "id":1276359906,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5ME7Ti",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-12T15:24:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski just for clarification, are you aware that the \"try in browser\" is now a Jupyter notebook? It's not _quite_ thebe - it basically runs a minimal UI JupyterLab (RetroLab) in an IFrame.\r\n\r\n![image](https://user-images.githubusercontent.com/1248413/195390245-f3d24d13-edec-4b18-b69b-1430f1086d76.png)\r\n\r\n",
  "created_at":"2022-10-12T15:53:22Z",
  "id":1276400338,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MFFLS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-12T15:53:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"No, this is new since I last looked. Cool! It's exactly the point (b) I was describing: so that part is done. Point (a) is something we just need to wait for, so this is as ready as we can make it.\r\n\r\nI vote for the 3 badges + 1 \"Try it!\" badge that goes to this \"What is an Awkward Array?\" page.",
  "created_at":"2022-10-12T16:02:25Z",
  "id":1276411549,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MFH6d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-12T16:02:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've added a \"Try It\" in the form of a `shields.io` badge:\r\n![image](https://user-images.githubusercontent.com/1248413/195393838-dca70076-7799-45d8-a8d4-1254647b6f78.png)\r\n",
  "created_at":"2022-10-12T16:09:00Z",
  "id":1276420196,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MFKBk",
  "performed_via_github_app":null,
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "updated_at":"2022-10-12T16:09:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Currently Sphinx is not generating a primary sidebar for the API-reference children. Investigating.",
  "created_at":"2022-10-12T16:46:49Z",
  "id":1276464227,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MFUxj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-12T16:46:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this is ready to go in my view. I haven't solved the `ccache` issue, but I think a 10-minute build is acceptable for now (docs won't be a required check yet), and we can fix it down the road.\r\n\r\nhttps://awkward-array.readthedocs.io/en/docs/index.html",
  "created_at":"2022-10-12T20:28:59Z",
  "id":1276700029,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MGOV9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-12T20:28:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> It would be nicer if the JupyterLite scaled with the available space, but I know that's asking for a lot. It probably isn't possible\r\n\r\nWe could add a custom styling to this - the current iframe is set 600px, but we could do something more dynamic to constrain it between sensible defaults.\r\n\r\n>  It's nice to see that reloading restores the original state, but a visitor might want to know that would happen, so they don't write too much code in this notebook without saving it.\r\n\r\nWe can actually save the notebook; I went to pains to disable this. I couldn't find a satisfactory way to clear the caches reliably (it should just be \"Clear site data\", so maybe I'm missing something obvious), so I disabled the storage backend.\r\n\r\n> When I ran the \"Try it in your browser\" in the simulated phone first and then later in a regular browser tab, the piplite.install(\"awkward\") line failed with\r\n\r\nThis is annoying; there's a serviceworker involved and I think it's caching the old wheel sometimes. Refreshing the page does seem to fix it.",
  "created_at":"2022-10-17T20:24:51Z",
  "id":1281449000,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MYVwo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T20:24:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> We can actually save the notebook; I went to pains to disable this. I couldn't find a satisfactory way to clear the caches reliably (it should just be \"Clear site data\", so maybe I'm missing something obvious), so I disabled the storage backend.\r\n\r\nIt's appreciated! We don't want it to look like the tutorial is broken because a visitor has a non-standard version of it in their browser cache. That ought to be a common use-case for JupyterLite.",
  "created_at":"2022-10-17T20:28:44Z",
  "id":1281453544,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MYW3o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T20:28:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> We don't want it to look like the tutorial is broken because a visitor has a non-standard version of it in their browser cache. That ought to be a common use-case for JupyterLite.\r\n\r\nRight, that was my worry - even *I* found myself confused sometimes, and I was midway through introducing it :rofl: ",
  "created_at":"2022-10-17T20:31:41Z",
  "id":1281457077,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MYXu1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T20:31:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm keeping this branch open so that we can preview it on RTD :) The idea is now that we'd target `main` with PRs (and look at their per-branch previews), but periodically force push to `docs` to trigger an RTD build that's up-to-date",
  "created_at":"2022-10-17T20:48:36Z",
  "id":1281476987,
  "issue":1776,
  "node_id":"IC_kwDODBCWws5MYcl7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T20:49:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1777?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1777](https://codecov.io/gh/scikit-hep/awkward/pull/1777?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (53ffa37) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e9cb7b84346daadc42700a33a4bea7caed823b31?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e9cb7b8) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1777?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1777/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <\u00f8> (+0.24%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1777/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1777/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1777/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1777/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1777/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1777/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-09T13:04:07Z",
  "id":1272538181,
  "issue":1777,
  "node_id":"IC_kwDODBCWws5L2WRF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-09T15:06:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR now builds (locally, I haven't touched the CI) and passes the test suite :) I noticed that we were telling CMake to copy the build libs into the `extdir`, in addition to installing the project there. In removing the former, we now don't have duplicated libraries (though I'd want to inspect the wheels on MacOS and Windows to confirm we didn't need that flag for some obscure reason). I do know that the Windows `setup.py` special-casing is definitely broken, but shouldn't be hard to fix.\r\n\r\nEditable installs (of `awkward`) work! Editable installs of `awkward_core` are trickier; we can now probably use the `--inplace` option a bit more comfortably, as it's clear that `awkward_core` is a mostly compiled package (so we should be aware that editable installs need to be cleaned up). I tried it with what I've done so far, and it doesn't work yet; something is assuming a filepath. Again, should be easy to fix.\r\n\r\nWorking on this has raised some questions for me:\r\n\r\n- where should the cpp header-only headers sit? On the one hand, it would be cool to have them as a separate package so that   `awkward` and `awkward-core` don't need to be dependencies of packages that want to build awkward layouts. Although this would be *another* package to version, the ergonomics of this might be positive. We could also leave them in the `awkward` tree, but then the `awkward-core` package will need to know to include them during build. It's not a big deal; the monorepo layout in this PR is not final and I am not happy with it yet. @jpivarski thoughts?",
  "created_at":"2022-10-11T09:01:51Z",
  "id":1274353494,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5L9RdW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T09:01:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"(That was fast! Only the Python package needs to have editable installation working; an editable installation of a mostly C++ package doesn't do any good; it has to be reinstalled from scratch to see any changes in the C++ code anyway. So this is a win!)\r\n\r\nThe C++ header files don't logically belong in a Python package; they're there because the Awkward \u2194 RDataFrame bridge uses them as sources to JIT compile, so the Python code needs to be able to find their text. The other use-case for C++ header files is external C++ projects, which _might_ get them by pip installing a Python package and asking\r\n\r\n```bash\r\npython -m awkward.config --cflags\r\n```\r\n\r\nto provide absolute paths to them, but a C++ project isn't necessarily going to want to install a Python package and run Python just to access some .h files. More likely, they'll include scikit-hep/awkward as a git submodule and access them that way (the way we access C++ header-only dependencies).\r\n\r\nSo the header files still need to be in some Python package for Awkward \u2194 RDataFrame to find them, and now we have three choices:\r\n\r\n  1. the `awkward` package, where they don't conceptually fit\r\n  2. the C++ core package (`awkward-core`? I haven't looked at the code yet), where they might actually be _needed_, since some of our precompiled C++ needs GrowableBuffer.h\r\n  3. a new package, which is yet another moving part (a package that needs to be version-locked with the others)\r\n\r\nGiven these choices, (2) seems to be optimal to me. It's easier for human navigation because one package is (almost) entirely C++, though some of it is header-only and some of it is precompiled, and the other package is entirely Python. That's easy to keep straight, mentally. Then there's the fact that the precompiled code needs some of the headers, so (1) might not work anyway. I don't see any reason to introduce the complexity of (3).",
  "created_at":"2022-10-11T13:02:08Z",
  "id":1274654141,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5L-a29",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T13:02:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> (That was fast! Only the Python package needs to have editable installation working; an editable installation of a mostly C++ package doesn't do any good; it has to be reinstalled from scratch to see any changes in the C++ code anyway. So this is a win!)\r\n\r\nWell, I can see a benefit for local development if we can iterate on the C++. Right now, that's `localbuild.py`. I'd like to get rid of that, but my first direct attempt to use the `inplace` option of setuptools hit some snags. It might be fixable, though. Equally, it's doesn't require much waiting time to do a reinstall of the package, because the build directory is reused if you run `python3 setup.py bdist_wheel`.\r\n\r\n> The C++ header files don't logically belong in a Python package; they're there because the Awkward left_right_arrow RDataFrame bridge uses them as sources to JIT compile, so the Python code needs to be able to find their text. The other use-case for C++ header files is external C++ projects, which _might_ get them by pip installing a Python package and asking\r\n> \r\n> ```shell\r\n> python -m awkward.config --cflags\r\n> ```\r\n> \r\n> to provide absolute paths to them, but a C++ project isn't necessarily going to want to install a Python package and run Python just to access some .h files. More likely, they'll include scikit-hep/awkward as a git submodule and access them that way (the way we access C++ header-only dependencies).\r\n\r\nRight. I know some people ship CMake config files in wheels via the `data` mechanism (though I doubt those paths are normally on the CMake search path). I was thinking that we might make it convenient for developers to do the same. However, this isn't that useful as you say; we expect people to use these headers in an ahead-of-time compile rather than a runtime JIT (though one could), so they'd use their normal dependency management at build-time.\r\n\r\n> So the header files still need to be in some Python package for Awkward left_right_arrow RDataFrame to find them, and now we have three choices:\r\n> \r\n> 1. the `awkward` package, where they don't conceptually fit\r\n> 2. the C++ core package (`awkward-core`? I haven't looked at the code yet), where they might actually be _needed_, since some of our precompiled C++ needs GrowableBuffer.h\r\n> 3. a new package, which is yet another moving part (a package that needs to be version-locked with the others)\r\n> \r\n> Given these choices, (2) seems to be optimal to me. It's easier for human navigation because one package is (almost) entirely C++, though some of it is header-only and some of it is precompiled, and the other package is entirely Python. That's easy to keep straight, mentally. Then there's the fact that the precompiled code needs some of the headers, so (1) might not work anyway. I don't see any reason to introduce the complexity of (3).\r\n\r\nYes, `awkward-core` does need these headers. If we did (1), we would need to symlink in the repo to share between packages. \r\n\r\n(2) sounds fine! :)\r\n",
  "created_at":"2022-10-11T14:55:58Z",
  "id":1274832898,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5L_GgC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T14:55:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Jim and I discussed that a new release of `awkward-core` always triggering a release of `awkward`. This means that we only need a single version number for `awkward-core`. This is motivated by\r\n- awkward-core changes much less frequently than awkward\r\n- awkward should be predictably not changing if the user exactly pins the version or `awkward`\r\n- we want new features / fixes to exist under `awkward`'s changelog\r\n\r\nTherefore, `awkward-core` is a \"private\" implementation detail \r\n\r\n- Separate workflows for `awkward` and `awkward-core`. \r\n- Deployment workflow of `awkward-core` updates dependency of `awkward` in `pyproject.toml` in Git `main` as a source of truth\r\n- Never let deployment of `awkward` rely on `awkward-core` RC (through checks in CI)\r\n- Can't release `awkward` without `awkward-core` being on PyPI - check Hash?\r\n- Always test against Git source in our CI\r\n- Use a separate tagging scheme for core and non-core\r\n- Use VCS version for metadata of both packages",
  "created_at":"2022-10-26T17:31:24Z",
  "id":1292378602,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5NCCHq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T16:17:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"At our meeting, we considered using the name `awkward-cpp` ([PyPI](https://pypi.org/project/awkward-cpp/#history)) instead of `awkward-core`. It's more to the point (all the C++ code goes into `awkward-cpp`) and still starts with \"awkward-\" so that they'll alphabetically sort well. Moreover, I already own `awkward-cpp` and it hasn't reached version 1 yet, so we can start releasing major-version-only releases starting at 1 (a natural place to start).",
  "created_at":"2022-10-27T16:56:01Z",
  "id":1293812564,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5NHgNU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T16:56:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"For developers, testing this PR:\r\n\r\n  1. Ensure that you have no `awkward` or `awkward-cpp` in the environment you will be using.\r\n  2. Do a fresh `git clone --recursive https://github.com/scikit-hep/awkward.git -b agoose77/chore/split-awkward-package` to ensure that you don't have any old `awkward` directories or git submodules. The gitsubmodules have moved to a different location, so cloning directly into this branch is easier than switching branches with `checkout`.\r\n  3. `cd awkward/`\r\n  4. `pip install -vv ./awkward-cpp` to build the `awkward-cpp` package, version 1.\r\n  5. `hatch version 2.0.0rc3` to set the Python package version number. (If you have an Uproot in the environment you will be using, it requires at least 2.0.0rc2.)\r\n  6. `pip install -e .` for an editable (!) installation.\r\n  7. `pytest tests` and such.\r\n\r\nThis will eventually go into CONTRIBUTING.md when this PR is merged and things settle down.",
  "created_at":"2022-11-04T17:13:01Z",
  "id":1303900472,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5Nt_E4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T17:13:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"All of the *.h and *.cpp files that differ between this PR and `main` are in agreement up to 173a6b6fa5204fe98abafa83bb88e36cea3bcd07, which is just before the compiler warnings were fixed in #1858.\r\n\r\nThis will be a clean, easy replacement, so I guess I'll do it as a single commit on this branch, since that commit would be easy to revert if necessary.",
  "created_at":"2022-11-04T17:56:49Z",
  "id":1303953735,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5NuMFH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T17:56:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1778?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1778](https://codecov.io/gh/scikit-hep/awkward/pull/1778?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e7d84d5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/97840b98fc8aafd75c2024174933186f63a394c2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (97840b9) will **decrease** coverage by `0.02%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1778?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.46% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [awkward-cpp/src/awkward\\_cpp/cpu\\_kernels.py](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-YXdrd2FyZC1jcHAvc3JjL2F3a3dhcmRfY3BwL2NwdV9rZXJuZWxzLnB5) | | |\n| [awkward-cpp/src/awkward\\_cpp/libawkward.py](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-YXdrd2FyZC1jcHAvc3JjL2F3a3dhcmRfY3BwL2xpYmF3a3dhcmQucHk=) | | |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward/pull/1778/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-04T20:02:57Z",
  "id":1304120859,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5Nu04b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-16T16:45:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> For developers, testing this PR:\r\n> \r\n> 1. Ensure that you have no `awkward` or `awkward-cpp` in the environment you will be using.\r\n> 2. Do a fresh `git clone --recursive https://github.com/scikit-hep/awkward.git -b agoose77/chore/split-awkward-package` to ensure that you don't have any old `awkward` directories or git submodules. The gitsubmodules have moved to a different location, so cloning directly into this branch is easier than switching branches with `checkout`.\r\n> 3. `cd awkward/`\r\n> 4. `pip install -vv ./awkward-cpp` to build the `awkward-cpp` package, version 1.\r\n\r\nI get lots of errors at this stage: \r\n```\r\n  /private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pip-req-build-snxzzgu6/src/cpu-kernels/awkward_BitMaskedArray_to_ByteMaskedArray.cpp:5:10: fatal error: 'awkward/kernels.h' file not found\r\n  #include \"awkward/kernels.h\"\r\n           ^~~~~~~~~~~~~~~~~~~\r\n  1 error generated.\r\n\r\n```\r\n> 5. `hatch version 2.0.0rc3` to set the Python package version number. (If you have an Uproot in the environment you will be using, it requires at least 2.0.0rc2.)\r\n> 6. `pip install -e .` for an editable (!) installation.\r\n> 7. `pytest tests` and such.\r\n> \r\n> This will eventually go into CONTRIBUTING.md when this PR is merged and things settle down.\r\n\r\n",
  "created_at":"2022-11-05T17:10:54Z",
  "id":1304591887,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5Nwn4P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T17:10:54Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"`awkward/kernels.h` is an auto-generated file. [generate-kernel-signatures.py](https://github.com/scikit-hep/awkward/blob/main/dev/generate-kernel-signatures.py) is supposed to make it. Do you know whether the first pip install (step 4) ran it? (Maybe include a print-out or artificial exception to check?)\r\n\r\n@agoose77, I confirm that error. This _used to_ work, so it was something recent that broke it.",
  "created_at":"2022-11-05T18:25:16Z",
  "id":1304606142,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5NwrW-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T18:25:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"dev/generate-kernel-signatures.py already has a print-out, and it's not printing.\r\n\r\nMoreover, the log messages from `pip install` include\r\n\r\n```\r\n  reading manifest template 'MANIFEST.in'\r\n  warning: no files found matching 'requirements*.txt'\r\n  warning: no files found matching 'README*.md'\r\n  warning: no files found matching 'CONTRIBUTING.md'\r\n  warning: no files found matching 'runtime.txt'\r\n  warning: no files found matching 'dev/generate-kernel-signatures.py'\r\n  warning: no files found matching '*.cu' under directory 'src'\r\n  warning: no files found matching '*.h' under directory 'src/awkward/cpp-headers'\r\n  warning: no files found matching '*.cpp' under directory 'tests'\r\n  warning: no files found matching '*.py' under directory 'tests'\r\n  warning: no files found matching 'samples/*' under directory 'tests'\r\n  warning: no files found matching '*.py' under directory 'tests-cpu-kernels'\r\n  warning: no files found matching '*.py' under directory 'tests-cuda-kernels'\r\n  warning: no files found matching '*.py' under directory 'tests-cuda'\r\n  warning: no files found matching '*.py' under directory 'tests-spec'\r\n  warning: no files found matching 'pybind11/README.md'\r\n  warning: no files found matching 'pybind11/CONTRIBUTING.md'\r\n```\r\n\r\nSee especially\r\n\r\n```\r\n  warning: no files found matching 'dev/generate-kernel-signatures.py'\r\n```\r\n\r\nIs it the case that the `pip install` is only allowed to use files that would be included in the sdist and this file is not being included because of a MANIFEST.in problem?",
  "created_at":"2022-11-05T18:28:09Z",
  "id":1304606617,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5NwreZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T18:28:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski @ianna we decided in a one-on-one meeting that the package installers (`pyproject.toml` / `setup.py`) scripts would *not* run any templating / code generation steps. This means that a naive `pip install ...` wouldn't work for either of the two awkward packages. Instead, you'd first need to run these scripts from the `dev` directory. This also means that we won't bundle these scripts in the sdists for the pure-Python or C++ packages. Right now, this is probably true for the pure-Python package, which uses the default somewhat-restricted set of files to include in the sdist. We can (and will) tune this appropriately. ",
  "created_at":"2022-11-05T22:51:39Z",
  "id":1304656111,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5Nw3jv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T22:52:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've moved the cibuildwheel configuration into a dedicated `/cibuildwheel.toml` file in the git root directory. This because we're operating as a monorepo here, so multi-package configuration should sit at the root level. Putting this configuration file here makes it clear that we're building and testing `awkward-cpp` in the context of the main package.\r\n\r\nInvoking `cibuildwheel` becomes:\r\n```bash\r\ncibuildwheel ./awkward-cpp/ <FLAGS>\r\n```\r\nwhere cibuildwheel then runs the `awkward-cpp` tests and the `tests` in the root directory. \r\n\r\nIt would be nice to test exclusively the `awkward-cpp` package itself, but our kernel tests aren't comprehensive enough vs the integration tests that we have in `tests`. In future we can look to making the kernel tests sufficient to test `awkward-cpp` by itself.",
  "created_at":"2022-11-06T12:56:42Z",
  "id":1304795801,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5NxZqZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-06T12:56:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've switched out our `setup.py` for `scikit-build-core`. The reason for this was that something wasn't right with our Windows logic, and it wasn't trivial to find the change that caused it. Switching to `scikit-build-core` fixed it, because the bug was observed in our WIndows special-case dll copying stage. The true fix is seemingly just to drop the special casing here, and set the appropriate CMake install paths for the various artifact types (e.g. `archive`). \r\n\r\nHowever, we're now using `scikit-build-core` *without* setuptools, which is really nice. It would be wonderful to be able to keep this new configuration-based packaging setup, as we will eventually switch to `scikit-build-core` in the future otherwise.\r\n\r\nOut of the box, there seems to be an issue with using `scikit-build-core` under `pyodide-build`. `pyodide-build` should ultimately emulate `pyproject-build`, so it should be fixable. @henryiii do you have any spare cycles to look at this at some point?\r\n\r\nIn a clean bash environment:\r\n```console\r\n$ export CMAKE_ARGS=\"-DEMSCRIPTEN=1\"\r\n$ cd <awkward-cpp-path>\r\n$ pyodide build --exports whole_archive\r\n* Creating venv isolated environment...\r\n* Installing packages in isolated environment... (cmake, ninja==1.10.2.4; platform_system!='Windows', pybind11, scikit-build-core @ https://github.com/scikit-build/scikit-build-core/tarball/c263f170bc082c79d47429e47238561189ecdd4e)\r\n* Installing packages in isolated environment... (cmake<3.24, cython<0.29.31, pythran)\r\n* Getting dependencies for wheel...\r\n* Installing packages in isolated environment... (distlib, pyproject_metadata)\r\n* Installing packages in isolated environment... (cmake<3.24, cython<0.29.31, pythran)\r\n* Building wheel...\r\nTraceback (most recent call last):\r\n  File \"/home/angus/.local/pipx/venvs/pyodide-build/lib/python3.10/site-packages/pep517/in_process/_in_process.py\", line 351, in <module>\r\n    main()\r\n  File \"/home/angus/.local/pipx/venvs/pyodide-build/lib/python3.10/site-packages/pep517/in_process/_in_process.py\", line 333, in main\r\n    json_out['return_val'] = hook(**hook_input['kwargs'])\r\n  File \"/home/angus/.local/pipx/venvs/pyodide-build/lib/python3.10/site-packages/pep517/in_process/_in_process.py\", line 249, in build_wheel\r\n    return _build_backend().build_wheel(wheel_directory, config_settings,\r\n  File \"/tmp/build-env-40dplxhi/lib/python3.10/site-packages/scikit_build_core/build.py\", line 26, in build_wheel\r\n    return skbuild_build_wheel(wheel_directory, config_settings, metadata_directory)\r\n  File \"/tmp/build-env-40dplxhi/lib/python3.10/site-packages/scikit_build_core/pyproject/wheel.py\", line 74, in build_wheel\r\n    builder.configure(\r\n  File \"/tmp/build-env-40dplxhi/lib/python3.10/site-packages/scikit_build_core/builder/builder.py\", line 100, in configure\r\n    python_library = get_python_library()\r\n  File \"/tmp/build-env-40dplxhi/lib/python3.10/site-packages/scikit_build_core/builder/sysconfig.py\", line 24, in get_python_library\r\n    if libdir and ldlibrary and libdir.is_dir():\r\n  File \"/usr/lib/python3.10/pathlib.py\", line 1305, in is_dir\r\n    return S_ISDIR(self.stat().st_mode)\r\n  File \"/usr/lib/python3.10/pathlib.py\", line 1097, in stat\r\n    return self._accessor.stat(self, follow_symlinks=follow_symlinks)\r\nPermissionError: [Errno 13] Permission denied: '/root/repo/cpython/installs/python-3.10.2/lib'\r\n\r\nERROR Backend subproccess exited when trying to invoke build_wheel\r\n```",
  "created_at":"2022-11-06T12:56:47Z",
  "id":1304795817,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5NxZqp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-06T12:56:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Revising Jim's description,\r\n\r\nFor developers, testing this PR:\r\n\r\n  1. Ensure that you have no `awkward` or `awkward-cpp` in the environment you will be using.\r\n  2. Checkout the `agoose77/chore/split-awkward-package` branch. If you have submodules configured to update with a `git pull` (`git config --global submodule.recurse true`), this should Just Work\u2122. Otherwise, do a fresh `git clone --recursive https://github.com/scikit-hep/awkward.git -b agoose77/chore/split-awkward-package` to ensure that you don't have any old `awkward` directories or git submodules. Then `cd awkward/` to switch to the clone directory.\r\n  3. `pip install -r requirements-dev.txt` to install *all* surplus requirements for local development. We only really need `pyyaml` at this stage.\r\n  4. `python3 dev/copy-cpp-headers.py && python3 dev/generate-kernel-signatures.py` to generate the necessary files for building packages.\r\n  5. `pip install -vv ./awkward-cpp` to build the `awkward-cpp` package, version 1.\r\n  6. (optional) update the package version with `hatch`, or by manually tweaking `src/awkward/__init__.py`. Using hatch, you can run `hatch version 2.0.0rc3` to set the Python package version number. (If you have an Uproot in the environment you will be using, it requires at least 2.0.0rc2.)\r\n  7. `pip install -e .` for an editable (!) installation.\r\n  8. Install test requirements (`pip install -r requirements-test.txt`), then run `pytest tests` and such.\r\n\r\nThis will eventually go into CONTRIBUTING.md when this PR is merged and things settle down.",
  "created_at":"2022-11-07T12:00:16Z",
  "id":1305500852,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N0Fy0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-08T15:25:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski since you last looked at this, I've made some big-ish changes:\r\n- Split the docs into `./awkward-cpp/docs` and `./docs`. (C++ docs work on their own now, will be shipped in sdist)\r\n- Separated the `clean-generated.py` dev-script into separate clean scripts\r\n- Added `nox` sessions to call multiple dev scripts / build docs (i.e., new developers can just use `nox` if preferred)\r\n- Removed the `all` and `test` extras (I've seen advice against using `all`, and we don't ship tests in wheels).\r\n- Removed the PyPI `README.md` (this is now generated from the README)\r\n- Replaced `ccache` caching with wheel caching. (We could do both, but not worth the complexity IMO).\r\n- Removed calls to devscripts from Sphinx `conf.py`. (This makes it less \"magical\" that things end up in the right places)\r\n- Split out the cibuildwheel configuration into a special config file (it's a monorepo-thing, not an `awkward` or `awkward-cpp` thing).\r\n- Replaced `VERSION_INFO` usage with `awkward-cpp/pyproject.toml#version`. (Easier to work with scikit-build-core out of the box)\r\n\r\nThe last big tasks are the `wheels` and `tests` workflows",
  "created_at":"2022-11-07T16:00:46Z",
  "id":1305825665,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1VGB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T16:04:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Revising Jim's description,\r\n> \r\n> For developers, testing this PR:\r\n> \r\n> 1. Ensure that you have no `awkward` or `awkward-cpp` in the environment you will be using.\r\n> 2. Checkout the `agoose77/chore/split-awkward-package` branch. If you have submodules configured to update with a `git pull` (`git config --global submodule.recurse true`), this should Just Work\u2122. Otherwise, do a fresh `git clone --recursive https://github.com/scikit-hep/awkward.git -b agoose77/chore/split-awkward-package` to ensure that you don't have any old `awkward` directories or git submodules. Then `cd awkward/` to switch to the clone directory.\r\n> 3. `pip install -r requirements-all.txt` to install _all_ surplus requirements for local development. We only really need `pyyaml` at this stage.\r\n\r\n```zsh\r\n% pip install -r requirements-all.txt\r\nERROR: Could not open requirements file: [Errno 2] No such file or directory: 'requirements-all.txt'\r\n```\r\n> 4. `python3 dev/copy-cpp-headers.py && python3 dev/generate-kernel-signatures.py` to generate the necessary files for building packages.\r\n> 5. `pip install -vv ./awkward-cpp` to build the `awkward-cpp` package, version 1.\r\n> 6. (optional) update the package version with `hatch`, or by manually tweaking `src/awkward/__init__.py`. Using hatch, you can run `hatch version 2.0.0rc3` to set the Python package version number. (If you have an Uproot in the environment you will be using, it requires at least 2.0.0rc2.)\r\n> 7. `pip install -e .` for an editable (!) installation.\r\n> 8. Install test requirements (`pip install -r requirements-test.txt`), then run `pytest tests` and such.\r\n> \r\n> This will eventually go into CONTRIBUTING.md when this PR is merged and things settle down.\r\n\r\n",
  "created_at":"2022-11-07T16:10:24Z",
  "id":1305841670,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1ZAG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T16:10:24Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"> 4\\. `python3 dev/copy-cpp-headers.py && python3 dev/generate-kernel-signatures.py` to generate the necessary files for building packages.\r\n\r\nI'm wondering how the sdist can work if these are not included in it. Is it the idea that generated files (cpp-headers and kernel.h) are not saved in git, but are hard-coded into the sdist package? And then the `pip install` process starts with the assumption that these files exist (either in the git repo directory or in the sdist)?",
  "created_at":"2022-11-07T16:13:42Z",
  "id":1305846574,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1aMu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T16:13:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > Revising Jim's description,\r\n> > For developers, testing this PR:\r\n> > \r\n> > 1. Ensure that you have no `awkward` or `awkward-cpp` in the environment you will be using.\r\n> > 2. Checkout the `agoose77/chore/split-awkward-package` branch. If you have submodules configured to update with a `git pull` (`git config --global submodule.recurse true`), this should Just Work\u2122. Otherwise, do a fresh `git clone --recursive https://github.com/scikit-hep/awkward.git -b agoose77/chore/split-awkward-package` to ensure that you don't have any old `awkward` directories or git submodules. Then `cd awkward/` to switch to the clone directory.\r\n> > 3. `pip install -r requirements-all.txt` to install _all_ surplus requirements for local development. We only really need `pyyaml` at this stage.\r\n> \r\n> ```shell\r\n> % pip install -r requirements-all.txt\r\n> ERROR: Could not open requirements file: [Errno 2] No such file or directory: 'requirements-all.txt'\r\n> ```\r\n> \r\n>  > 4. `python3 dev/copy-cpp-headers.py && python3 dev/generate-kernel-signatures.py` to generate the necessary files for building packages.\r\n> > 5. `pip install -vv ./awkward-cpp` to build the `awkward-cpp` package, version 1.\r\n> > 6. (optional) update the package version with `hatch`, or by manually tweaking `src/awkward/__init__.py`. Using hatch, you can run `hatch version 2.0.0rc3` to set the Python package version number. (If you have an Uproot in the environment you will be using, it requires at least 2.0.0rc2.)\r\n> > 7. `pip install -e .` for an editable (!) installation.\r\n> > 8. Install test requirements (`pip install -r requirements-test.txt`), then run `pytest tests` and such.\r\n> > \r\n> > This will eventually go into CONTRIBUTING.md when this PR is merged and things settle down.\r\n\r\nI did `% pip install -r requirements-dev.txt ` and `% pip install -r requirements-test.txt ` and it seems enough...",
  "created_at":"2022-11-07T16:14:23Z",
  "id":1305847665,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1adx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T16:14:23Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna thanks for checking that - I ended up renaming these files to clarify their purpose and broke my previous advice! I've added this information to CONTRIBUTING, though! :)",
  "created_at":"2022-11-07T16:17:39Z",
  "id":1305852230,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1blG",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-07T16:17:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > > Revising Jim's description,\r\n> > > For developers, testing this PR:\r\n> > > \r\n> > > 1. Ensure that you have no `awkward` or `awkward-cpp` in the environment you will be using.\r\n> > > 2. Checkout the `agoose77/chore/split-awkward-package` branch. If you have submodules configured to update with a `git pull` (`git config --global submodule.recurse true`), this should Just Work\u2122. Otherwise, do a fresh `git clone --recursive https://github.com/scikit-hep/awkward.git -b agoose77/chore/split-awkward-package` to ensure that you don't have any old `awkward` directories or git submodules. Then `cd awkward/` to switch to the clone directory.\r\n> > > 3. `pip install -r requirements-all.txt` to install _all_ surplus requirements for local development. We only really need `pyyaml` at this stage.\r\n> > \r\n> > \r\n> > ```shell\r\n> > % pip install -r requirements-all.txt\r\n> > ERROR: Could not open requirements file: [Errno 2] No such file or directory: 'requirements-all.txt'\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > > 4. `python3 dev/copy-cpp-headers.py && python3 dev/generate-kernel-signatures.py` to generate the necessary files for building packages.\r\n> > > 5. `pip install -vv ./awkward-cpp` to build the `awkward-cpp` package, version 1.\r\n> > > 6. (optional) update the package version with `hatch`, or by manually tweaking `src/awkward/__init__.py`. Using hatch, you can run `hatch version 2.0.0rc3` to set the Python package version number. (If you have an Uproot in the environment you will be using, it requires at least 2.0.0rc2.)\r\n> > > 7. `pip install -e .` for an editable (!) installation.\r\n\r\n```\r\n% pip install -e .\r\nERROR: File \"setup.py\" or \"setup.cfg\" not found. Directory cannot be installed in editable mode: /Users/yana/Projects/PR1778/awkward\r\n(A \"pyproject.toml\" file was found, but editable mode currently requires a setuptools-based build.)\r\n```\r\n\r\n> > > 8. Install test requirements (`pip install -r requirements-test.txt`), then run `pytest tests` and such.\r\n> > > \r\n> > > This will eventually go into CONTRIBUTING.md when this PR is merged and things settle down.\r\n> \r\n> I did `% pip install -r requirements-dev.txt ` and `% pip install -r requirements-test.txt ` and it seems enough...\r\n\r\n",
  "created_at":"2022-11-07T16:18:07Z",
  "id":1305852868,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1bvE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T16:18:07Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I'm wondering how the sdist can work if these are not included in it. Is it the idea that generated files (cpp-headers and kernel.h) are not saved in git, but are hard-coded into the sdist package? And then the `pip install` process starts with the assumption that these files exist (either in the git repo directory or in the sdist)?\r\n\r\nThe plan that I'm working off is to produce sdists that don't require the dev tools. This means generating any docs / code files that are required. That's what's happening right now with our two packages, anyway.",
  "created_at":"2022-11-07T16:18:21Z",
  "id":1305853186,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1b0C",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T16:18:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna what version of `pip` do you have?",
  "created_at":"2022-11-07T16:18:57Z",
  "id":1305853931,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1b_r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T16:18:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna what version of `pip` do you have?\r\n\r\n```\r\n% pip --version\r\npip 21.2.4 from /Users/yana/opt/anaconda3/lib/python3.9/site-packages/pip (python 3.9)\r\n```",
  "created_at":"2022-11-07T16:21:44Z",
  "id":1305857675,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1c6L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T16:21:44Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah OK, `pip` added support for editable installations (defined by PEP 660) in 21.3. This only matters for package developers; so I think it's reasonable to require this. Are you able to upgrade your version of pip?",
  "created_at":"2022-11-07T16:23:45Z",
  "id":1305860244,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1diU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T16:23:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Ah OK, `pip` added support for editable installations (defined by PEP 660) in 21.3. This only matters for package developers; so I think it's reasonable to require this. Are you able to upgrade your version of pip?\r\n\r\nYep, thanks. It works now.",
  "created_at":"2022-11-07T16:27:51Z",
  "id":1305865513,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N1e0p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T16:27:51Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The `version-check.yml` wrorkflow now ensures that we don't have PRs working on an unreleased version of `awkward-cpp` without changing the version. We do this by building an sdist of awkward-cpp, and comparing the SHA256 to PyPI. It also checks that `awkward` uses the current version of `awkward-cpp`.\r\n\r\nWe have a lot of `dev` scripts now. This is deliberate: I think it's better to have many small scripts than fewer large scripts that take many options. Some of them are trivial, so they're there mostly for parity The CI itself is mostly calling these through nox, which is predominantly so that we can treat the dev scripts as self-contained applications (without worrying about their dependencies). I experimented with just calling the dev scripts, but using `nox` as an intermediary makes the CI feel more organised and robust.\r\n\r\n",
  "created_at":"2022-11-08T13:29:19Z",
  "id":1307224821,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N6qr1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-08T13:29:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii we have files that we don't want in the CI (`_kernel_signatures.py`) but need to be in the sdist / wheel. Is it possible to extend scikit-build-core to somehow allow this?",
  "created_at":"2022-11-08T14:04:10Z",
  "id":1307270783,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N615_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-08T14:04:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yep, it's planned, it's an \"artifact\" in hatchling terms. Though you can do it currently by copying them manually in cmake. I'll try to expand the include/exclude system (based on hatchling) next. Well, almost next.",
  "created_at":"2022-11-08T14:05:43Z",
  "id":1307273610,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N62mK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-08T14:06:08Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Yep, it's planned, it's an \"artifact\" in hatchling terms. Though you can do it currently by copying them manually in cmake. I'll try to expand the include/exclude system (based on hatchling) next. Well, almost next.\r\n\r\nRight, in the long run I'd be keen to move to hatchling too. I'll restore the CMake installation for now, which should break if scikit-build-core also performs the copy.",
  "created_at":"2022-11-08T14:10:14Z",
  "id":1307281779,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N64lz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-08T14:10:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> which should break if scikit-build-core also performs the copy\r\n\r\nIt will not copy if there's already a CMake installed file in the same location.",
  "created_at":"2022-11-08T14:11:21Z",
  "id":1307283795,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N65FT",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-08T14:11:21Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - how do you (re)build/run cpp tests? Thanks!",
  "created_at":"2022-11-08T15:41:07Z",
  "id":1307419638,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N7aP2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-08T15:41:07Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna good question, I missed this in the wider scheme of things.\r\n\r\nI've removed the `ArrayBuilder` test, because we don't have a header-only implementation, and we should be testing the compiled implementation with our (Python) integration tests. Is this OK?\r\n\r\nIf so, I've made the `tests-cpp` completely independent of the Python package building (a standalone CMake package). \r\n\r\nRight now it feels weird to have this in awkward-cpp. It might be better to move the header-only libraries into the root git directory, and copy them into both the awkward and awkward-cpp subdirectories. Then we can have `tests-cpp` in the root git directory. But, it's not a big deal, so we can do this later.",
  "created_at":"2022-11-08T16:45:44Z",
  "id":1307514225,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5N7xVx",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-08T18:16:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Four of the tests didn't launch. Is that because the last diff didn't touch code? (It's not the four I would have expected, if that were the case.) Pressing the \"Update branch\" button would likely make it rerun all tests.",
  "created_at":"2022-11-09T20:04:02Z",
  "id":1309304149,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OCmVV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-09T20:04:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I followed the most recent instructions, [#1778 (comment)](https://github.com/scikit-hep/awkward/pull/1778#issuecomment-1305825665), in an environment that has ROOT (for the ROOT tests) and no pre-existing `awkward` or `awkward-cpp`.\r\n> \r\n> (Even though I have git `submodule.recurse=true` now, I still did `git clone --recursive https://github.com/scikit-hep/awkward.git -b agoose77/chore/split-awkward-package` anyway. Why not?)\r\n> \r\n> These are the steps:\r\n> \r\n> ```shell\r\n> python dev/copy-cpp-headers.py\r\n> python dev/generate-kernel-signatures.py\r\n> pip install -vv ./awkward-cpp\r\n> pip install -e .\r\n> pytest -n 16 tests\r\n> ```\r\n> \r\n> The `awkward-cpp` compilation was slower than usual, 2m30s, because it was not parallelized. It lost the parallel compilation argument.\r\n> \r\n> One test failed:\r\n> \r\n> ```\r\n> tmp_path = PosixPath('/tmp/pytest-of-jpivarski/pytest-0/popen-gw12/test_data_frame_vec_of_vec_of_0')\r\n> \r\n>     def test_data_frame_vec_of_vec_of_real(tmp_path):\r\n>         filename = os.path.join(tmp_path, \"test-listarray.root\")\r\n>     \r\n>         ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]])\r\n>     \r\n>         data_frame = ak.to_rdataframe({\"x\": ak_array_in})\r\n>     \r\n>         assert data_frame.GetColumnType(\"x\").startswith(\"awkward::ListArray_\")\r\n>     \r\n>         ak_array_out = ak.from_rdataframe(\r\n>             data_frame,\r\n>             columns=(\"x\",),\r\n>         )\r\n>         assert ak_array_in.to_list() == ak_array_out[\"x\"].to_list()\r\n>     \r\n>         with pytest.raises(SystemError):\r\n> >           data_frame.Snapshot(\"ListArray\", filename, (\"x\",))\r\n> E           Failed: DID NOT RAISE <class 'SystemError'>\r\n> \r\n> ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>\r\n> ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>\r\n> data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x55976e347090>\r\n> filename   = '/tmp/pytest-of-jpivarski/pytest-0/popen-gw12/test_data_frame_vec_of_vec_of_0/test-listarray.root'\r\n> tmp_path   = PosixPath('/tmp/pytest-of-jpivarski/pytest-0/popen-gw12/test_data_frame_vec_of_vec_of_0')\r\n> \r\n> tests/test_1781-rdataframe-snapshot.py:53: Failed\r\n> ```\r\n> \r\n> @ianna, is this something wrong with the ROOT setup? I seem to remember it acting like this at some point, but I can't remember when or why.\r\n> \r\n> It is _not_ the error I reported before, in which ROOT failed with a segfault.\r\n> \r\n> Uh oh\u2014I ran all of the tests a few more times (parallel and serial) and the above error did not recur. It _is_ the first time I'm using ROOT after a new installation, so it is possible that this is due to something that gets configured once. I guess it's beyond the scope of this PR, but there's something a bit flaky about this particular part: raising SystemError when attempting to `Snapshot` an unsnapshotable ArrayView in RDataFrame.\r\n\r\nIt shouldn't be a system error - there is an issue for that: https://github.com/root-project/root/issues/11602",
  "created_at":"2022-11-09T20:21:05Z",
  "id":1309331691,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OCtDr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-09T20:21:05Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"I'd like to make another scikit-build-core release first, pulling from git is a bit slower & more cumbersome. I'll release after https://github.com/scikit-build/scikit-build-core/pull/66 is resolved and in.",
  "created_at":"2022-11-09T21:30:23Z",
  "id":1309398129,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OC9Rx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-09T21:30:23Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I'd like to make another scikit-build-core release first, pulling from git is a bit slower & more cumbersome. I'll release after [scikit-build/scikit-build-core#66](https://github.com/scikit-build/scikit-build-core/pull/66) is resolved and in.\r\n\r\nSure, thanks Henry - no rush; it's fast enough for now, but long term we definitely want to be using PyPI.",
  "created_at":"2022-11-09T21:42:39Z",
  "id":1309414879,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5ODBXf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-09T21:42:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, hopefully, most of the moving pieces are in place. I'm not confident yet that the release workflows work. ",
  "created_at":"2022-11-10T23:35:23Z",
  "id":1311043116,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OJO4s",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-10T23:35:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii when run under `pipx run build`, `scikit-build-core` is finding the `pipx` interpreter, and failing because (I assume) the virtualenv doesn't have the Python headers (or incorrectly reports their location). Is there currently a recommended way of telling `scikit-build-core` by the environment / config settings that we want to use a different interpreter?\r\n\r\nThe same thing happens when running `build` from within a `nox` session.\r\n\r\nThe current work-around is just to install and run `build` in the same environment as the target interpreter, but I think this is a legitimate use case?",
  "created_at":"2022-11-11T11:15:16Z",
  "id":1311564641,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OLONh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T11:15:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski are you getting ROOT from conda-forge? I can't reproduce your example of test flakiness in a clean environment:\r\n```bash\r\ngit clone --recurse-submodules https://github.com/scikit-hep/awkward.git --branch=agoose77/chore/split-awkward-package\r\ncd awkward\r\nmamba create -n test-awkward python=3.10 root\r\nconda activate test-awkward # I use xonsh\r\npip install -r requirements-dev.txt -r requirements-test.txt\r\nnox -s prepare\r\npip install -v ./awkward-cpp/\r\npip install -v -e .\r\npytest -n auto tests\r\nmamba list\r\n```\r\n\r\n\r\n```\r\n# Name                    Version                   Build  Channel\r\n_libgcc_mutex             0.1                 conda_forge    conda-forge\r\n_openmp_mutex             4.5                       2_gnu    conda-forge\r\n_sysroot_linux-64_curr_repodata_hack 3                   h5bd9786_13    conda-forge\r\nafterimage                1.21              ha9998ff_1003    conda-forge\r\nanyio                     3.6.2              pyhd8ed1ab_0    conda-forge\r\nargon2-cffi               21.3.0             pyhd8ed1ab_0    conda-forge\r\nargon2-cffi-bindings      21.2.0          py310h5764c6d_3    conda-forge\r\nasttokens                 2.1.0              pyhd8ed1ab_0    conda-forge\r\natk-1.0                   2.38.0               hd4edc92_1    conda-forge\r\nattrs                     22.1.0             pyh71513ae_1    conda-forge\r\nawkward                   2.0.0rc3                 pypi_0    pypi\r\nawkward-cpp               1                        pypi_0    pypi\r\nbackcall                  0.2.0              pyh9f0ad1d_0    conda-forge\r\nbackports                 1.0                        py_2    conda-forge\r\nbackports.functools_lru_cache 1.6.4              pyhd8ed1ab_0    conda-forge\r\nbeautifulsoup4            4.11.1             pyha770c72_0    conda-forge\r\nbinutils                  2.39                 hdd6e379_0    conda-forge\r\nbinutils_impl_linux-64    2.39                 h6ceecb4_0    conda-forge\r\nbinutils_linux-64         2.39                h5fc0e48_11    conda-forge\r\nbleach                    5.0.1              pyhd8ed1ab_0    conda-forge\r\nbuild                     0.9.0                    pypi_0    pypi\r\nbzip2                     1.0.8                h7f98852_4    conda-forge\r\nc-ares                    1.18.1               h7f98852_0    conda-forge\r\nc-compiler                1.5.1                h166bdaf_0    conda-forge\r\nca-certificates           2022.9.24            ha878542_0    conda-forge\r\ncairo                     1.16.0            ha61ee94_1014    conda-forge\r\ncertifi                   2022.9.24                pypi_0    pypi\r\ncffi                      1.15.1          py310h255011f_2    conda-forge\r\ncfitsio                   4.1.0                hd9d235c_0    conda-forge\r\ncharset-normalizer        2.1.1                    pypi_0    pypi\r\ncolorama                  0.4.6              pyhd8ed1ab_0    conda-forge\r\ncompilers                 1.5.1                ha770c72_0    conda-forge\r\ncoverage                  6.5.0                    pypi_0    pypi\r\ncxx-compiler              1.5.1                h924138e_0    conda-forge\r\ndavix                     0.8.3                h0ea7790_1    conda-forge\r\ndebugpy                   1.6.3           py310hd8f1fbe_1    conda-forge\r\ndecorator                 5.1.1              pyhd8ed1ab_0    conda-forge\r\ndefusedxml                0.7.1              pyhd8ed1ab_0    conda-forge\r\nentrypoints               0.4                pyhd8ed1ab_0    conda-forge\r\nexceptiongroup            1.0.1                    pypi_0    pypi\r\nexecnet                   1.9.0                    pypi_0    pypi\r\nexecuting                 1.2.0              pyhd8ed1ab_0    conda-forge\r\nexpat                     2.5.0                h27087fc_0    conda-forge\r\nfftw                      3.3.10          nompi_hf0379b8_105    conda-forge\r\nflit-core                 3.8.0              pyhd8ed1ab_0    conda-forge\r\nfont-ttf-dejavu-sans-mono 2.37                 hab24e00_0    conda-forge\r\nfont-ttf-inconsolata      3.000                h77eed37_0    conda-forge\r\nfont-ttf-source-code-pro  2.038                h77eed37_0    conda-forge\r\nfont-ttf-ubuntu           0.83                 hab24e00_0    conda-forge\r\nfontconfig                2.14.1               hc2a2eb6_0    conda-forge\r\nfonts-conda-ecosystem     1                             0    conda-forge\r\nfonts-conda-forge         1                             0    conda-forge\r\nfortran-compiler          1.5.1                h2a4ca65_0    conda-forge\r\nfreetype                  2.12.1               hca18f0e_0    conda-forge\r\nfribidi                   1.0.10               h36c2ea0_0    conda-forge\r\nfsspec                    2022.11.0                pypi_0    pypi\r\nftgl                      2.4.0                hbcb1f35_0    conda-forge\r\ngcc                       10.4.0              hb92f740_11    conda-forge\r\ngcc_impl_linux-64         10.4.0              h5231bdf_19    conda-forge\r\ngcc_linux-64              10.4.0              h9215b83_11    conda-forge\r\ngdk-pixbuf                2.42.8               hff1cb4f_1    conda-forge\r\ngettext                   0.21.1               h27087fc_0    conda-forge\r\ngfortran                  10.4.0              h0c96582_11    conda-forge\r\ngfortran_impl_linux-64    10.4.0              h7d168d2_19    conda-forge\r\ngfortran_linux-64         10.4.0              h69d5af5_11    conda-forge\r\ngiflib                    5.2.1                h36c2ea0_2    conda-forge\r\ngl2ps                     1.4.2                h0708190_0    conda-forge\r\nglew                      2.1.0                h9c3ff4c_2    conda-forge\r\ngraphite2                 1.3.13            h58526e2_1001    conda-forge\r\ngraphviz                  6.0.1                h5abf519_0    conda-forge\r\ngsl                       2.7                  he838d99_0    conda-forge\r\ngsoap                     2.8.123              h8dc497d_0    conda-forge\r\ngtk2                      2.24.33              h90689f9_2    conda-forge\r\ngts                       0.7.6                h64030ff_2    conda-forge\r\ngxx                       10.4.0              hb92f740_11    conda-forge\r\ngxx_impl_linux-64         10.4.0              h5231bdf_19    conda-forge\r\ngxx_linux-64              10.4.0              h6e491c6_11    conda-forge\r\nharfbuzz                  5.3.0                h418a68e_0    conda-forge\r\nicu                       70.1                 h27087fc_0    conda-forge\r\nidna                      3.4                pyhd8ed1ab_0    conda-forge\r\nimportlib-metadata        5.0.0              pyha770c72_1    conda-forge\r\nimportlib_resources       5.10.0             pyhd8ed1ab_0    conda-forge\r\niniconfig                 1.1.1                    pypi_0    pypi\r\nipykernel                 6.17.1             pyh210e3f2_0    conda-forge\r\nipyparallel               8.4.1              pyhd8ed1ab_0    conda-forge\r\nipython                   8.6.0              pyh41d4057_1    conda-forge\r\nipython_genutils          0.2.0                      py_1    conda-forge\r\njax                       0.3.24                   pypi_0    pypi\r\njaxlib                    0.3.24                   pypi_0    pypi\r\njedi                      0.18.1             pyhd8ed1ab_2    conda-forge\r\njinja2                    3.1.2              pyhd8ed1ab_1    conda-forge\r\njpeg                      9e                   h166bdaf_2    conda-forge\r\njsonschema                4.17.0             pyhd8ed1ab_0    conda-forge\r\njupyter_client            7.4.5              pyhd8ed1ab_0    conda-forge\r\njupyter_core              5.0.0           py310hff52083_0    conda-forge\r\njupyter_server            1.23.1             pyhd8ed1ab_0    conda-forge\r\njupyterlab_pygments       0.2.2              pyhd8ed1ab_0    conda-forge\r\nkernel-headers_linux-64   3.10.0              h4a8ded7_13    conda-forge\r\nkeyutils                  1.6.1                h166bdaf_0    conda-forge\r\nkrb5                      1.19.3               h08a2579_0    conda-forge\r\nld_impl_linux-64          2.39                 hc81fddc_0    conda-forge\r\nlerc                      4.0.0                h27087fc_0    conda-forge\r\nlibblas                   3.9.0           16_linux64_openblas    conda-forge\r\nlibcblas                  3.9.0           16_linux64_openblas    conda-forge\r\nlibcurl                   7.86.0               h2283fc2_1    conda-forge\r\nlibcxx                    14.0.6               hf52228f_0    conda-forge\r\nlibcxxabi                 14.0.6               ha770c72_0    conda-forge\r\nlibdeflate                1.14                 h166bdaf_0    conda-forge\r\nlibedit                   3.1.20191231         he28a2e2_2    conda-forge\r\nlibev                     4.33                 h516909a_1    conda-forge\r\nlibffi                    3.4.2                h7f98852_5    conda-forge\r\nlibgcc-devel_linux-64     10.4.0              hd38fd1e_19    conda-forge\r\nlibgcc-ng                 12.2.0              h65d4601_19    conda-forge\r\nlibgd                     2.3.3                h18fbbfe_3    conda-forge\r\nlibgfortran-ng            12.2.0              h69a702a_19    conda-forge\r\nlibgfortran5              12.2.0              h337968e_19    conda-forge\r\nlibglib                   2.74.1               h606061b_1    conda-forge\r\nlibglu                    9.0.0             he1b5a44_1001    conda-forge\r\nlibgomp                   12.2.0              h65d4601_19    conda-forge\r\nlibiconv                  1.17                 h166bdaf_0    conda-forge\r\nliblapack                 3.9.0           16_linux64_openblas    conda-forge\r\nlibllvm11                 11.1.0               he0ac6c6_5    conda-forge\r\nlibllvm9                  9.0.1           default_hc23dcda_7    conda-forge\r\nlibnghttp2                1.47.0               hff17c54_1    conda-forge\r\nlibnsl                    2.0.0                h7f98852_0    conda-forge\r\nlibopenblas               0.3.21          pthreads_h78a6416_3    conda-forge\r\nlibpng                    1.6.38               h753d276_0    conda-forge\r\nlibrsvg                   2.54.4               h7abd40a_0    conda-forge\r\nlibsanitizer              10.4.0              h5246dfb_19    conda-forge\r\nlibsodium                 1.0.18               h36c2ea0_1    conda-forge\r\nlibsqlite                 3.39.4               h753d276_0    conda-forge\r\nlibssh2                   1.10.0               hf14f497_3    conda-forge\r\nlibstdcxx-devel_linux-64  10.4.0              hd38fd1e_19    conda-forge\r\nlibstdcxx-ng              12.2.0              h46fd767_19    conda-forge\r\nlibtiff                   4.4.0                h55922b4_4    conda-forge\r\nlibtool                   2.4.6             h9c3ff4c_1008    conda-forge\r\nlibuuid                   2.32.1            h7f98852_1000    conda-forge\r\nlibwebp                   1.2.4                h522a892_0    conda-forge\r\nlibwebp-base              1.2.4                h166bdaf_0    conda-forge\r\nlibxcb                    1.13              h7f98852_1004    conda-forge\r\nlibxml2                   2.10.3               h7463322_0    conda-forge\r\nlibzlib                   1.2.13               h166bdaf_4    conda-forge\r\nllvmlite                  0.39.1          py310h58363a5_1    conda-forge\r\nlz4-c                     1.9.3                h9c3ff4c_1    conda-forge\r\nmarkupsafe                2.1.1           py310h5764c6d_2    conda-forge\r\nmatplotlib-inline         0.1.6              pyhd8ed1ab_0    conda-forge\r\nmetakernel                0.29.2             pyhd8ed1ab_0    conda-forge\r\nmistune                   2.0.4              pyhd8ed1ab_0    conda-forge\r\nnbclassic                 0.4.8              pyhd8ed1ab_0    conda-forge\r\nnbclient                  0.7.0              pyhd8ed1ab_0    conda-forge\r\nnbconvert                 7.2.4              pyhd8ed1ab_0    conda-forge\r\nnbconvert-core            7.2.4              pyhd8ed1ab_0    conda-forge\r\nnbconvert-pandoc          7.2.4              pyhd8ed1ab_0    conda-forge\r\nnbformat                  5.7.0              pyhd8ed1ab_0    conda-forge\r\nncurses                   6.3                  h27087fc_1    conda-forge\r\nnest-asyncio              1.5.6              pyhd8ed1ab_0    conda-forge\r\nnlohmann_json             3.11.2               h27087fc_0    conda-forge\r\nnotebook                  6.5.2              pyha770c72_1    conda-forge\r\nnotebook-shim             0.2.2              pyhd8ed1ab_0    conda-forge\r\nnumba                     0.56.3          py310ha5257ce_0    conda-forge\r\nnumexpr                   2.8.4                    pypi_0    pypi\r\nnumpy                     1.23.4          py310h53a5b5f_1    conda-forge\r\nopenssl                   3.0.7                h166bdaf_0    conda-forge\r\nopt-einsum                3.3.0                    pypi_0    pypi\r\npackaging                 21.3               pyhd8ed1ab_0    conda-forge\r\npandas                    1.5.1                    pypi_0    pypi\r\npandoc                    2.19.2               h32600fe_1    conda-forge\r\npandocfilters             1.5.0              pyhd8ed1ab_0    conda-forge\r\npango                     1.50.11              h382ae3d_0    conda-forge\r\nparso                     0.8.3              pyhd8ed1ab_0    conda-forge\r\npcre                      8.45                 h9c3ff4c_0    conda-forge\r\npcre2                     10.40                hc3806b6_0    conda-forge\r\npep517                    0.13.0                   pypi_0    pypi\r\npexpect                   4.8.0              pyh1a96a4e_2    conda-forge\r\npickleshare               0.7.5                   py_1003    conda-forge\r\npip                       22.3.1             pyhd8ed1ab_0    conda-forge\r\npixman                    0.40.0               h36c2ea0_0    conda-forge\r\npkgutil-resolve-name      1.3.10             pyhd8ed1ab_0    conda-forge\r\nplatformdirs              2.5.2              pyhd8ed1ab_1    conda-forge\r\npluggy                    1.0.0                    pypi_0    pypi\r\nportalocker               2.6.0           py310hff52083_1    conda-forge\r\nprometheus_client         0.15.0             pyhd8ed1ab_0    conda-forge\r\nprompt-toolkit            3.0.32             pyha770c72_0    conda-forge\r\npsutil                    5.9.4           py310h5764c6d_0    conda-forge\r\npthread-stubs             0.4               h36c2ea0_1001    conda-forge\r\nptyprocess                0.7.0              pyhd3deb0d_0    conda-forge\r\npure_eval                 0.2.2              pyhd8ed1ab_0    conda-forge\r\npyarrow                   10.0.0                   pypi_0    pypi\r\npycparser                 2.21               pyhd8ed1ab_0    conda-forge\r\npygments                  2.13.0             pyhd8ed1ab_0    conda-forge\r\npyparsing                 3.0.9              pyhd8ed1ab_0    conda-forge\r\npyrsistent                0.19.2          py310h5764c6d_0    conda-forge\r\npytest                    7.2.0                    pypi_0    pypi\r\npytest-cov                4.0.0                    pypi_0    pypi\r\npytest-xdist              3.0.2                    pypi_0    pypi\r\npythia8                   8.307           py310hd8f1fbe_0    conda-forge\r\npython                    3.10.6          ha86cf86_0_cpython    conda-forge\r\npython-dateutil           2.8.2              pyhd8ed1ab_0    conda-forge\r\npython-fastjsonschema     2.16.2             pyhd8ed1ab_0    conda-forge\r\npython_abi                3.10                    2_cp310    conda-forge\r\npytz                      2022.6                   pypi_0    pypi\r\npyyaml                    6.0                      pypi_0    pypi\r\npyzmq                     24.0.1          py310h330234f_1    conda-forge\r\nreadline                  8.1.2                h0f457ee_0    conda-forge\r\nrequests                  2.28.1                   pypi_0    pypi\r\nroot                      6.26.8          py310h769672d_1    conda-forge\r\nroot_base                 6.26.8          py310h8caf089_1    conda-forge\r\nscipy                     1.9.3                    pypi_0    pypi\r\nscitokens-cpp             0.7.1                hf3971a6_0    conda-forge\r\nsend2trash                1.8.0              pyhd8ed1ab_0    conda-forge\r\nsetuptools                65.5.1             pyhd8ed1ab_0    conda-forge\r\nsix                       1.16.0             pyh6c4a22f_0    conda-forge\r\nsniffio                   1.3.0              pyhd8ed1ab_0    conda-forge\r\nsoupsieve                 2.3.2.post1        pyhd8ed1ab_0    conda-forge\r\nsqlite                    3.39.4               h4ff8645_0    conda-forge\r\nstack_data                0.6.0              pyhd8ed1ab_0    conda-forge\r\nsysroot_linux-64          2.17                h4a8ded7_13    conda-forge\r\ntbb                       2021.6.0             h924138e_1    conda-forge\r\nterminado                 0.17.0             pyh41d4057_0    conda-forge\r\ntinycss2                  1.2.1              pyhd8ed1ab_0    conda-forge\r\ntk                        8.6.12               h27826a3_0    conda-forge\r\ntoml                      0.10.2                   pypi_0    pypi\r\ntomli                     2.0.1                    pypi_0    pypi\r\ntornado                   6.2             py310h5764c6d_1    conda-forge\r\ntqdm                      4.64.1             pyhd8ed1ab_0    conda-forge\r\ntraitlets                 5.5.0              pyhd8ed1ab_0    conda-forge\r\ntyping_extensions         4.4.0              pyha770c72_0    conda-forge\r\ntzdata                    2022f                h191b570_0    conda-forge\r\nuproot                    4.3.7                    pypi_0    pypi\r\nurllib3                   1.26.12                  pypi_0    pypi\r\nvdt                       0.4.3                h9c3ff4c_0    conda-forge\r\nvector-classes            1.4.3                h924138e_0    conda-forge\r\nwcwidth                   0.2.5              pyh9f0ad1d_2    conda-forge\r\nwebencodings              0.5.1                      py_1    conda-forge\r\nwebsocket-client          1.4.2              pyhd8ed1ab_0    conda-forge\r\nwheel                     0.38.4             pyhd8ed1ab_0    conda-forge\r\nxorg-fixesproto           5.0               h7f98852_1002    conda-forge\r\nxorg-kbproto              1.0.7             h7f98852_1002    conda-forge\r\nxorg-libice               1.0.10               h7f98852_0    conda-forge\r\nxorg-libsm                1.2.3             hd9c2040_1000    conda-forge\r\nxorg-libx11               1.6.12               h36c2ea0_0    conda-forge\r\nxorg-libxau               1.0.9                h7f98852_0    conda-forge\r\nxorg-libxcursor           1.2.0                h516909a_0    conda-forge\r\nxorg-libxdmcp             1.1.3                h7f98852_0    conda-forge\r\nxorg-libxext              1.3.4                h516909a_0    conda-forge\r\nxorg-libxfixes            5.0.3             h516909a_1004    conda-forge\r\nxorg-libxft               2.3.4                hc534e41_1    conda-forge\r\nxorg-libxpm               3.5.13               h516909a_0    conda-forge\r\nxorg-libxrender           0.9.10            h516909a_1002    conda-forge\r\nxorg-libxt                1.1.5             h516909a_1003    conda-forge\r\nxorg-renderproto          0.11.1            h7f98852_1002    conda-forge\r\nxorg-xextproto            7.3.0             h7f98852_1002    conda-forge\r\nxorg-xproto               7.0.31            h7f98852_1007    conda-forge\r\nxrootd                    5.5.1           py310h81387bc_2    conda-forge\r\nxxhash                    0.8.0                h7f98852_3    conda-forge\r\nxz                        5.2.6                h166bdaf_0    conda-forge\r\nzeromq                    4.3.4                h9c3ff4c_1    conda-forge\r\nzipp                      3.10.0             pyhd8ed1ab_0    conda-forge\r\nzlib                      1.2.13               h166bdaf_4    conda-forge\r\nzstd                      1.5.2                h6239696_4    conda-forge\r\n```",
  "created_at":"2022-11-11T11:30:12Z",
  "id":1311580983,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OLSM3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T11:30:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> failing because (I assume) the virtualenv doesn't have the Python headers (or incorrectly reports their location)\r\n\r\nThis is interesting, and worth investigating a little, but you probably don't want an arbitrary Python, you probably care. Currently, that means build needs to be where you want to build. You can target a version of Python with pipx, though, pass `--python <python>` to pipx. I believe pip now supports targeting a different python also as of 22.3.",
  "created_at":"2022-11-11T14:08:45Z",
  "id":1311737766,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OL4em",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T14:31:29Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"> The same thing happens when running build from within a nox session.\r\n\r\nDo you have examples of these things I can test? Also, are you using FindPython or classic Python search?",
  "created_at":"2022-11-11T14:32:18Z",
  "id":1311766490,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OL_fa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T14:32:18Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski are you getting ROOT from conda-forge?\r\n\r\nI do get ROOT from conda-forge, and I have been cleaning my environment for each test. But then again, CI on three platforms isn't reproducing it, either. I don't think it needs to be addressed in this PR, but we should keep an eye out for it.\r\n\r\nEven though managing ROOT with conda _should be_ reproducible, there are weird, unexplained effects from time to time. This issue prevented me from using ROOT in conda-forge for a few months: https://github.com/conda-forge/root-feedstock/issues/136 but no one else could reproduce it, and then it went away.",
  "created_at":"2022-11-11T15:54:40Z",
  "id":1311875499,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OMaGr",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-11T15:54:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > failing because (I assume) the virtualenv doesn't have the Python headers (or incorrectly reports their location)\r\n> \r\n> This is interesting, and worth investigating a little, but you probably don't want an arbitrary Python, you probably care. Currently, that means build needs to be where you want to build. You can target a version of Python with pipx, though, pass `--python <python>` to pipx. I believe pip now supports targeting a different python also as of 22.3.\r\n\r\nHuh, interesting; `pipx` does have that argument. I wonder whether that's been there this whole time?!\r\n\r\n> Do you have examples of these things I can test? Also, are you using FindPython or classic Python search?\r\n\r\nHenry, I can't reproduce it any more. I'm going to chalk it down to my working late yesterday and messing something up!",
  "created_at":"2022-11-11T19:44:15Z",
  "id":1312134948,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5ONZck",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T19:44:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, I've tested `check_cpp_sdist_released` with the test PyPI repository. This correctly fails for missing versions / different SHAs on PyPI, and `check-awkward-uses-awkward-cpp.py` correctly requires that the `awkward` package constraint matches the cpp package version.\r\n\r\nThe workflows are currently set up so that awkward-cpp doesn't have any special checks before publishing to PyPI. If the version hasn't been bumped, PyPI will complain that the version has already been published.\r\n\r\nMeanwhile, the `awkward` package can't be published until `awkward-cpp` is on PyPI (unless awkward-cpp hasn't been touched).\r\n\r\nThe CI is quite simple; always use the Git repo's sources for awkward-cpp (caching the built wheel by sources hash), and only run awkward-cpp tests when the cache is empty. \r\n\r\nAt release time, we require that: \r\n- `awkward-cpp` (version & SHA) must be on PyPI to release `awkward`\r\n- `awkward-cpp` specified in `awkward`'s dependencies must be same version as Git repo's `awkward-cpp/pyproject.toml`\r\n\r\nThe first requirement ensures that the released `awkward` package was tested against the awkward-cpp that is published.\r\nThe second requirement ensures that the released `awkward` always depends upon the Git-specified version of `awkward-cpp`. This means that we can't accidentally release `awkward` with a non-existent `awkward-cpp` version (because we already require that the Git `awkward-cpp` version is on PyPI). It also stops us from depending upon an old version of `awkward-cpp`.\r\n\r\nThe enforcement of the `awkward-cpp == X` vs `awkward-cpp < X+1,>=X` specifier distinction is left to us as developers; the release workflow doesn't require an exact version.",
  "created_at":"2022-11-11T21:57:28Z",
  "id":1312221349,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5ONuil",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T21:57:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've checked that the sdists can be compiled into wheels, and the both pass the test suite of the awkward sdist. I've also done a visual inspection and it *looks* right to me.",
  "created_at":"2022-11-11T23:09:44Z",
  "id":1312256390,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5ON3GG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T23:09:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"And ... the docs build from an sdist.",
  "created_at":"2022-11-11T23:34:20Z",
  "id":1312265882,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5ON5aa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T23:34:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I changed my mind, and moved the kernel-spec information and header-only directory to the Git root directory. This just makes it easier to reason about things by keeping anything that's copied into both packages at the root.",
  "created_at":"2022-11-12T12:52:26Z",
  "id":1312472609,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OOr4h",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-12T12:52:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"If the tests are happy (bar the four that GHA thinks are pending, but actually have just been renamed), then I'm happy to look at merging this.",
  "created_at":"2022-11-12T12:53:07Z",
  "id":1312472736,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OOr6g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-12T12:53:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> If the tests are happy (bar the four that GHA thinks are pending, but actually have just been renamed), then I'm happy to look at merging this.\r\n\r\nI've also signed off on it, and so has @ianna. We'll give @henryiii a last chance to veto, and then merge.\r\n\r\n(In `main`, I'll make sure that both versions are RC versions, if they're not already.)\r\n\r\nAfter merging (maybe on Monday), let's go through a deployment cycle and see if there are any issues there.",
  "created_at":"2022-11-12T15:02:51Z",
  "id":1312501245,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5OOy39",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-12T15:02:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"FYI, I'll be releasing a new version of scikit-build-core soon, just working out a few final issues. If you'd like to wait to merge till that, you can, or you can merge first (since it's not pinned). The next version will have the `minimum-version` setting, which awkward could use - if you set `0.0`, then if I change the defaults later, I'll be able to keep the old defaults if the minimum version is low (just like CMake).",
  "created_at":"2022-11-15T17:53:05Z",
  "id":1315670895,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5Oa4tv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T17:53:05Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"We were just talking about merging this and starting an Awkward release to test the release mechanics. If a scikit-build-core release happens during that process, I suppose it won't break anything because we don't use Scikit-build _yet_. Right?\r\n\r\nI see `SKBUILD_PROJECT_NAME` in the CMakeLists.txt, but that doesn't imply an actual dependence on Scikit-build.\r\n\r\nWe can make multiple releases (as long as they're release candidates, version numbers are cheap). I just want to make sure that if it fails, it's not due to a time-dependent thing, like a race condition between the Scikit-build release and the Awkward release.",
  "created_at":"2022-11-15T17:59:17Z",
  "id":1315677159,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5Oa6Pn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T17:59:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> We were just talking about merging this and starting an Awkward release to test the release mechanics. If a scikit-build-core release happens during that process, I suppose it won't break anything because we don't use Scikit-build _yet_. Right?\r\n> \r\n> I see `SKBUILD_PROJECT_NAME` in the CMakeLists.txt, but that doesn't imply an actual dependence on Scikit-build.\r\n> \r\n> We can make multiple releases (as long as they're release candidates, version numbers are cheap). I just want to make sure that if it fails, it's not due to a time-dependent thing, like a race condition between the Scikit-build release and the Awkward release.\r\n\r\nWe *do* use scikit-build-core, it's in the `pyyproject.toml`; now you don't directly build the C++ code via CMake, instead it's handled by the wheel building tools (`pipx run --python=$(which python) build` or `python3 -m pip build` or `python3 -m pip install ./awkward-cpp`).\r\n",
  "created_at":"2022-11-15T18:29:55Z",
  "id":1315709474,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5ObCIi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T18:29:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Will there be a race condition between an Awkward release and a Scikit-build release? If there is, then @henryiii and I would have to time them carefully.",
  "created_at":"2022-11-15T19:29:43Z",
  "id":1315771360,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5ObRPg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T19:29:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm currently doing a (manual, and takes about 30 minutes per run) bisect to find out why cmake-python-distributions isn't happy with the most recent release. As soon as that's done, I can make a release. There shouldn't be anything that \"breaks\", my only worry / thought here is that it would be nice to add `tool.scikit-build.minimum-version=\"0.0\"` so that this will work well into the future, rather than being potentially broken in the next few weeks.",
  "created_at":"2022-11-15T19:35:59Z",
  "id":1315777846,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5ObS02",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T19:35:59Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"I think I've discovered the commit, working on the fix.\r\n\r\nBy the way, I think it's actually okay to put `tool.scikit-build.minimum-version=\"0.0\"` with the current version, since I didn't add the strict-config setting (defaulting to true) until after that release.",
  "created_at":"2022-11-15T20:09:29Z",
  "id":1315809601,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5ObalB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T20:09:29Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Go ahead and release Scikit-build first, @henryiii, we'll test this PR again, and then merge and release Awkward thereafter.\r\n\r\nLet us know when the new Scikit-build is on PyPI.",
  "created_at":"2022-11-15T20:47:47Z",
  "id":1315843825,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5Obi7x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T20:47:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"scikit-build-core 0.1.0b0 is out! I'm going to work on getting it into conda-forge next, and adding tests for various situations, and aim for a final 0.1.0 around Friday.",
  "created_at":"2022-11-16T15:53:42Z",
  "id":1317238682,
  "issue":1778,
  "node_id":"IC_kwDODBCWws5Og3ea",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-16T15:53:42Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1779?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1779](https://codecov.io/gh/scikit-hep/awkward/pull/1779?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (83e20ef) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f3a94128d472f71bc3ba45c709ebc45e26c93bd6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f3a9412) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1779?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1779/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1779/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1779/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1779/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1779/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1779/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1779/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-10T22:31:37Z",
  "id":1273875396,
  "issue":1779,
  "node_id":"IC_kwDODBCWws5L7cvE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-10T22:31:37Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1780?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1780](https://codecov.io/gh/scikit-hep/awkward/pull/1780?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (039441c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f3a94128d472f71bc3ba45c709ebc45e26c93bd6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f3a9412) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1780?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1780/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1780/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1780/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1780/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1780/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1780/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1780/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-11T17:39:49Z",
  "id":1275051789,
  "issue":1780,
  "node_id":"IC_kwDODBCWws5L_78N",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T17:39:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Superseded by #1788.",
  "created_at":"2022-10-14T17:22:52Z",
  "id":1279273885,
  "issue":1780,
  "node_id":"IC_kwDODBCWws5MQCud",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-14T17:22:52Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1781?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1781](https://codecov.io/gh/scikit-hep/awkward/pull/1781?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0559144) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f3a94128d472f71bc3ba45c709ebc45e26c93bd6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f3a9412) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1781?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1781/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1781/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1781/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1781/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1781/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1781/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1781/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1781/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-11T23:26:36Z",
  "id":1275398012,
  "issue":1781,
  "node_id":"IC_kwDODBCWws5MBQd8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-11T23:26:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I was curious about the `//!` markup, so I looked it up for my own benefit. Here's the link for anyone else finding this in the future: https://github.com/root-project/root/blob/07932d78211d0ac5fdb198ac2260c35530cb9647/io/doc/TFile/README.md#streamerinfo",
  "created_at":"2022-10-18T15:57:10Z",
  "id":1282628108,
  "issue":1781,
  "node_id":"IC_kwDODBCWws5Mc1oM",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-18T15:57:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1783?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1783](https://codecov.io/gh/scikit-hep/awkward/pull/1783?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0c43bb4) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f3a94128d472f71bc3ba45c709ebc45e26c93bd6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f3a9412) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1783?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1783/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1783/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1783/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1783/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1783/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1783/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1783/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-12T17:36:53Z",
  "id":1276520013,
  "issue":1783,
  "node_id":"IC_kwDODBCWws5MFiZN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-12T17:36:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hi @yimuchen, could you provide a copy of the file to test against? I don't have auth to read from the given XRootD server.\r\n\r\nYou can create a file `events.pickle.txt` with:\r\n```python3\r\nimport pickle\r\nform, length, container = ak.to_buffers(events)\r\ndata = (form.tojson(), length, container)\r\nwith open(\"events.pickle.txt\", \"wb\") as f:\r\n    pickle.dump(data, f)\r\n```",
  "created_at":"2022-10-13T07:03:35Z",
  "id":1277124619,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MH2AL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-13T07:03:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"Of course, here is a 100-event file that crashes similarly. This `ak.to_buffers` call was performed using awkward 1.8.0\r\n\r\n[events_awkward1.9.0_issue.pickle.txt](https://github.com/scikit-hep/awkward/files/9775067/events_awkward1.9.0_issue.pickle.txt)\r\n\r\n",
  "created_at":"2022-10-13T09:27:34Z",
  "id":1277308232,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MIi1I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-13T09:28:30Z",
  "user":"MDQ6VXNlcjExNzAzNjQ0"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is definitely a bug, and it's being triggered by [one of our kernels](https://github.com/scikit-hep/awkward/blob/b315e6519eb78c8083e088e3ca065cfdb3af5d31/src/cpu-kernels/awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64.cpp#L33), where we're writing to an out-of-bounds value during the computation of \r\n```python3\r\nak.argmin(tracks.deltaR, axis=-2)\r\n```\r\nI think the kernel is behaving properly (although `k` is computed to be `>= outlength`) but we're just passing in either the wrong value for `outlength`, or the wrong array of `gaps`.\r\n\r\n",
  "created_at":"2022-10-13T11:20:38Z",
  "id":1277450178,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MJFfC",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-13T19:09:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"My approach to fixing this is currently \"write a load of documentation comments on the reduction logic until I understand what is going wrong\". This is not a particularly fast process; if e.g. @ianna can easily spot the root-cause then feel free to open a PR whilst I take my time ;)",
  "created_at":"2022-10-14T21:25:36Z",
  "id":1279483978,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MQ2BK",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-14T21:25:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This reproducer, which I obtained by slicing over the example file, seems also to produce a crash. \r\n```python\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nsmall = ak.Array(\r\n    ak.contents.ListOffsetArray(\r\n        ak.index.Index64(np.array([0, 0, 2])),\r\n        ak.contents.ListOffsetArray(\r\n            ak.index.Index64(np.array([0, 2, 4])),\r\n            ak.contents.NumpyArray(\r\n                np.array([0.00470849, 2.5028446, 3.020969, 3.950173], dtype=np.float32)\r\n            ),\r\n        ),\r\n    )\r\n)\r\n\r\nt_index = ak.argmin(small, axis=-2)\r\n\r\n```\r\n\r\nSome quick variable definitions:\r\n- `gaps`: tracks the integer difference between successive `parents` values. `1` if each distinct parent is the successive integer of the previous distinct parent. `>1` otherwise. Length of `outlength`, because there can be at most `outlength` distinct parent values.\r\n- `distincts`: an array whose shape is `outlength * max_sublist_length`. This _seems_ to map from a `nextparents` value into a zero-based dense _non-empty_ row index.\r\n   I say \"row\", because in the `nonlocal_preparenext` kernel, the `j` value that is written to `distincts` is reset for each outer loop iteration. This outer loop effectively iterates over the sublists.\r\n\r\nIn the `_reduce_next` call that segfaults, we have \r\n- `gaps=[2 *]`, where `*` is uninitialised memory\r\n- `distincts=[-1 -1 0 0]`\r\n- `nextparents=[2 2 3 3]`\r\nThese values look correct for the inputs.\r\n\r\nI think this crash is newly introduced by e55c914704860cbaaacc72d32a26ecf7c7ecfde2, which adjusts the initial value of `maxdistinct = -2`. This means that for our `distincts=[-1 -1 0 0]` array, the `j` counter increments twice. `j` is used to index into `gaps` before incrementing, and it can be seen that `gaps[1]` is not initialised. \r\n\r\nI already pinged Ianna, but I realised that @jpivarski touched this exact bit of code more recently. Could you confirm whether my interpretation of `distincts` is correct?",
  "created_at":"2022-10-15T13:15:30Z",
  "id":1279743770,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MR1ca",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T13:16:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Here is where it fails:\r\n```c++\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=2, address=0x101400000)\r\n    frame #0: 0x0000000144ffd710 _ext.cpython-39-darwin.so`::awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64(outstarts=0x0000000100673e50, outstops=0x00000001006240e0, distincts=0x000000010068c920, lendistincts=4, gaps=0x0000000100610710, outlength=2) at awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64.cpp:33:22\r\n   30  \t      }\r\n   31  \t\r\n   32  \t      for (int64_t gappy = 0;  gappy < numgappy;  gappy++) {\r\n-> 33  \t        outstarts[k] = i;\r\n   34  \t        outstops[k] = i;\r\n   35  \t        k++;\r\n   36  \t      }\r\n```",
  "created_at":"2022-10-17T09:20:10Z",
  "id":1280547689,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MU5tp",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-17T09:20:10Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@ianna that looks like the same result I'm observing; can you confirm whether the value of `numgappy` looks like uninitialised memory?",
  "created_at":"2022-10-17T09:26:53Z",
  "id":1280557010,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MU7_S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T09:26:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> @ianna that looks like the same result I'm observing; can you confirm whether the value of `numgappy` looks like uninitialised memory?\r\n\r\n```\r\n(int64_t) maxcount = 2\r\n(int64_t) j = 1\r\n(int64_t) k = 33774\r\n(int64_t) maxdistinct = 0\r\n(int64_t) lasti = 2\r\n(int64_t) i = 2\r\n(int64_t) extra = 1\r\n(int64_t) numgappy = 3458764514096627209\r\n(int64_t) gappy = 33772\r\n```",
  "created_at":"2022-10-17T09:31:31Z",
  "id":1280563388,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MU9i8",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-10-17T09:40:53Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"My current line of thinking is that I find it surprising to be indexing into `gaps` with an integer whose value depends upon the number of distinct values in `nextparents`. `nextparents` is used by the reduction of the child; the reduction result is wrapped according to `parents` & `gaps` is computed for `parents`. I might be barking up the wrong tree here, but it feels like this might be using the wrong array. I doubt that I'm right - this is highly used code, and what I'm suggesting would radically change its function, so I'm going to keep investigating.",
  "created_at":"2022-10-17T12:06:47Z",
  "id":1280753959,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MVsEn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T12:15:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, I think I got this working:\r\n```python\r\n            if not (self._nplike.known_data and self._nplike.known_shape):\r\n                self._handle_error(\r\n                    self._nplike[\r\n                        \"awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64\",\r\n                        outstarts.dtype.type,\r\n                        outstops.dtype.type,\r\n                        distincts.dtype.type,\r\n                        gaps.dtype.type,\r\n                    ](\r\n                        outstarts.data,\r\n                        outstops.data,\r\n                        distincts.data,\r\n                        distincts.length,\r\n                        gaps.data,\r\n                        outlength,\r\n                    )\r\n                )\r\n            else:\r\n                # The goal of this kernel is to find the offsets into the reduction result\r\n                # that satisfy our parents. There may be multiple nextparents per parent\r\n                # so we'll use nextparents to figure out which parent we're in. Each\r\n                # parent value corresponds to a sublist in the result.\r\n                k = 0\r\n                last_parent = -1\r\n                last_distinct = -2\r\n                for i in range(len(distincts)):\r\n                    # If the reduction result has this value\r\n                    if distincts[i] != -1:\r\n                        # `distincts` gives us the (dense) sublist index into the final result\r\n                        # it is not the *actual* sublist index, as it does not consider empty sublists\r\n                        # so, test here whether the current sublist has changed\r\n                        if distincts[i] != last_distinct:\r\n                            # Determine the *actual* sublist we're currently in\r\n                            parent = i // maxcount\r\n                            # Open as many sublists as required to fill in the gaps\r\n                            # and then open one more, for *this* sublist\r\n                            # parent - last_parent is 1 for no gaps\r\n                            for _ in range(parent - last_parent):\r\n                                outstarts[k] = i\r\n                                outstops[k] = i\r\n                                k += 1\r\n\r\n                            last_parent = parent\r\n                            last_distinct = distincts[i]\r\n\r\n                        # Close previous list\r\n                        outstops.data[k - 1] = i + 1\r\n```\r\n\r\nThis logic fails one test that might be a trivial fix, and it's determined from first-principles. I can look at how to reduce e.g. the number of floor divisions by using something like gaps.\r\n\r\nThe fix for our existing kernel is just the guard `if distincts[i] != -1`. However, our kernel is using `gaps` *and* performing a floor division. We can get rid of gaps (I think) if we require a divide, though we might be able to remove the division and keep the gaps array. This is probably better performance-wise (if we have long sublists), though it's really just an exercise at this point.",
  "created_at":"2022-10-17T14:28:20Z",
  "id":1280951349,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MWcQ1",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-17T14:28:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - it does not crash in `v2`. Though, `v2` in `1.10.0rc1` produces:\r\n```python\r\n>>> t_index\r\n<Array [[None, None], []] type='2 * var * ?int64'>\r\n```\r\nwhile in `2.0.0rc1` the result is:\r\n```python\r\n>>> t_index\r\n<Array [[], []] type='2 * var * ?int64'>\r\n```",
  "created_at":"2022-10-17T14:43:19Z",
  "id":1280977052,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MWiic",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T14:43:19Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @ianna, that's interesting :thinking:. Let's see if #1796 fixes v2, too (it had better! :pray:)",
  "created_at":"2022-10-17T15:10:20Z",
  "id":1281025409,
  "issue":1784,
  "node_id":"IC_kwDODBCWws5MWuWB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T15:10:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1786?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1786](https://codecov.io/gh/scikit-hep/awkward/pull/1786?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (af1ad55) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b315e6519eb78c8083e088e3ca065cfdb3af5d31?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b315e65) will **decrease** coverage by `0.08%`.\n> The diff coverage is `78.03%`.\n\n> :exclamation: Current head af1ad55 differs from pull request most recent head 1a0107e. Consider uploading reports for the commit 1a0107e to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1786?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.62% <42.85%> (-0.33%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <66.66%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_transformers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3RyYW5zZm9ybWVycy5weQ==) | `67.05% <67.05%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.04% <79.16%> (-0.17%)` | :arrow_down: |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.29% <100.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `71.58% <100.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.26% <100.00%> (-0.06%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `74.19% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.69% <100.00%> (-0.39%)` | :arrow_down: |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `91.86% <100.00%> (-0.04%)` | :arrow_down: |\n| ... and [14 more](https://codecov.io/gh/scikit-hep/awkward/pull/1786/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-13T18:59:27Z",
  "id":1278050401,
  "issue":1786,
  "node_id":"IC_kwDODBCWws5MLYBh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-15T11:12:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"`IndexedOptionArray` handling is still not quite right. The current use of `maintain_none_position` is just injecting `None`s on top of the existing ones, rather than actually re-indexing. This mechanism might need some more thought, as `needs_position` and `maintain_none_position` seem like mutually exclusive options; if you maintain the positioning of the array, does it make sense to have a positional transformer? Perhaps. I'll give it some more thought in the week. Should be quite solvable, but I'm tackling it by converting the existing code rather than just implementing from scratch. Refactoring like this sometimes raises questions that require a rethink.",
  "created_at":"2022-10-15T11:36:18Z",
  "id":1279726893,
  "issue":1786,
  "node_id":"IC_kwDODBCWws5MRxUt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-15T11:44:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm closing this for now. The code will be useful for future reference, but this PR won't be worked on for a while (there are at least two other big PRs to merge), so it will just stagnate. In the mean time, it's filling up the tracker.",
  "created_at":"2022-12-02T11:15:37Z",
  "id":1335094679,
  "issue":1786,
  "node_id":"IC_kwDODBCWws5Pk-2X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T11:15:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1787?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1787](https://codecov.io/gh/scikit-hep/awkward/pull/1787?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (60671b9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/eee968a9ff0895799bb6298c59b2fe073d53a086?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eee968a) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 60671b9 differs from pull request most recent head ccd369e. Consider uploading reports for the commit ccd369e to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1787?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1787/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1787/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1787/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1787/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1787/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1787/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1787/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-13T17:40:23Z",
  "id":1277960234,
  "issue":1787,
  "node_id":"IC_kwDODBCWws5MLCAq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T18:31:24Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1788?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1788](https://codecov.io/gh/scikit-hep/awkward/pull/1788?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bb83955) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b315e6519eb78c8083e088e3ca065cfdb3af5d31?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b315e65) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1788?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1788/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1788/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1788/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1788/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1788/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1788/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1788/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-14T17:29:06Z",
  "id":1279279350,
  "issue":1788,
  "node_id":"IC_kwDODBCWws5MQED2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-14T17:29:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm squashing and merging this, as I'm the one who introduced this mechanism. I'm assuming that I'm OK to merge dependabot PRs, please let me know if that is not OK @jpivarski!",
  "created_at":"2022-10-15T18:46:26Z",
  "id":1279806415,
  "issue":1788,
  "node_id":"IC_kwDODBCWws5MSEvP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-15T18:46:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I would assume that we want to produce the identity for the empty (final) sublist, i.e. `N * var * 3` reduces at `axis=1` to `N * 3`. Meanwhile, `N * var * var` should reduce at `axis=1` to `N * var`, meaning that we don't need the identity for the empty sublist, it just remains empty.\r\n\r\nNow, if the empty sublist is in the _middle_ of the array, then the final `parents` that are given to the `reducer.apply` method incorporates the necessary gaps for the reducer to produce the identity. But, in this example, the empty sublist is at the _end_, and we don't see these identity values. Furthermore, in both cases, the wrapped reduction result has the \"wrong\" offsets.\r\n\r\nSo, this looks like _two_ problems to me:\r\n- improper handling of empty sublists during `nextparents` computation in `awkward_ListOffsetArray_reduce_nonlocal_preparenext_64`\r\n- use of `ListOffsetArray._reduce_next` in `RegularArray._reduce_next`\r\n\r\nThis latter point is demonstrated if we compare NumPy vs Awkward for simple all-regular 3D arrays:\r\n```python\r\n>>> x = np.zeros(0).reshape(3, 0, 2)\r\n>>> x.sum(axis=1)\r\narray([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n>>> y = ak.from_numpy(x)\r\n>>> ak.sum(y, axis=1)\r\n<Array [[], [], []] type='3 * 0 * float64'>\r\n```",
  "created_at":"2022-10-15T21:03:49Z",
  "id":1279831724,
  "issue":1790,
  "node_id":"IC_kwDODBCWws5MSK6s",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T08:08:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In this instance, it looks like the issue lies in the \r\n```python\r\nwhile k < outlength:\r\n    outstarts[k] = lendistincts + 1\r\n    outstops[k] = lendistincts + 1\r\n    k = k + 1\r\n```\r\nportion of  `awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64`. My initial understanding is that this except is responsible for padding trailing empty-lists.",
  "created_at":"2022-10-15T22:42:59Z",
  "id":1279845349,
  "issue":1791,
  "node_id":"IC_kwDODBCWws5MSOPl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-15T22:43:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, I *think* we want to set `outstarts[k] = maxdistinct + 1` instead of `lendistincts + 1` - `lendistincts = outlength * maxcount[0]` whereas `maxdistinct` gives the index of the final column.",
  "created_at":"2022-10-15T23:08:22Z",
  "id":1279848482,
  "issue":1791,
  "node_id":"IC_kwDODBCWws5MSPAi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-15T23:20:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1792?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1792](https://codecov.io/gh/scikit-hep/awkward/pull/1792?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7621e18) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/eee968a9ff0895799bb6298c59b2fe073d53a086?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eee968a) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1792?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1792/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-15T23:37:39Z",
  "id":1279852441,
  "issue":1792,
  "node_id":"IC_kwDODBCWws5MSP-Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-15T23:37:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Superseded by #1796",
  "created_at":"2022-10-17T15:12:53Z",
  "id":1281029184,
  "issue":1792,
  "node_id":"IC_kwDODBCWws5MWvRA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T15:12:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Is #1789 considered a part of this PR? It's probably blocked by it, at least.",
  "created_at":"2022-11-02T19:14:42Z",
  "id":1301099946,
  "issue":1793,
  "node_id":"IC_kwDODBCWws5NjTWq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-02T19:14:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, this PR solves that issue. It's not in a good state right now - my approach changed once the full scope of the PR became apparent. This PR is related to https://github.com/scikit-hep/awkward/pull/1849, although my brain right now can't tell you exactly how strict this dependence is. When I get back to this, it might be possible to merge this before https://github.com/scikit-hep/awkward/pull/1849\r\n\r\n",
  "created_at":"2022-11-02T19:31:16Z",
  "id":1301115670,
  "issue":1793,
  "node_id":"IC_kwDODBCWws5NjXMW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-02T19:31:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This has been superseded by #2020 ",
  "created_at":"2022-12-22T14:39:37Z",
  "id":1362916881,
  "issue":1793,
  "node_id":"IC_kwDODBCWws5RPHYR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T14:39:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1795?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1795](https://codecov.io/gh/scikit-hep/awkward/pull/1795?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a31cb99) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/aaef8002f1ca0776e11e44c49fa1ec2cc181afea?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (aaef800) will **decrease** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1795?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_run\\_lengths.py](https://codecov.io/gh/scikit-hep/awkward/pull/1795/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19ydW5fbGVuZ3Rocy5weQ==) | `90.62% <100.00%> (+0.30%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1795/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1795/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1795/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1795/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1795/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1795/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1795/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-16T12:50:56Z",
  "id":1279963549,
  "issue":1795,
  "node_id":"IC_kwDODBCWws5MSrGd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T00:34:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1796?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1796](https://codecov.io/gh/scikit-hep/awkward/pull/1796?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9c1f687) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/eee968a9ff0895799bb6298c59b2fe073d53a086?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eee968a) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1796?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1796/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `79.53% <\u00f8> (-0.12%)` | :arrow_down: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1796/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1796/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1796/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1796/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1796/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1796/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1796/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward/pull/1796/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-17T16:13:41Z",
  "id":1281120360,
  "issue":1796,
  "node_id":"IC_kwDODBCWws5MXFho",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T22:36:48Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> \u26a0\ufe0f I did change the expected outcomes of the test suite - some of the kernel tests check the offset values.\r\n\r\nThose test outcomes were set by running the code itself, so the new values are just as good as the old ones. They were specifically the auto-generated unit tests, not the high-level tests we write by hand in the `tests` directory.",
  "created_at":"2022-10-17T22:37:43Z",
  "id":1281581893,
  "issue":1796,
  "node_id":"IC_kwDODBCWws5MY2NF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T22:37:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1797?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`main-v1@f2092ee`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 01cda69 differs from pull request most recent head d4f1133. Consider uploading reports for the commit d4f1133 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-10-17T17:35:09Z",
  "id":1281221206,
  "issue":1797,
  "node_id":"IC_kwDODBCWws5MXeJW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T22:53:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I haven't been able to assign required tests for this branch (`main-v1`): GitHub doesn't think that any of the above have ever been run. So I can't enable auto-merge.\r\n\r\nI'll try to remember to come back here and squash-and-merge this PR, but if I don't remember to and the tests have all passed, you can do it.",
  "created_at":"2022-10-17T22:44:20Z",
  "id":1281587219,
  "issue":1797,
  "node_id":"IC_kwDODBCWws5MY3gT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T22:44:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1798?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1798](https://codecov.io/gh/scikit-hep/awkward/pull/1798?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (22131f0) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/eee968a9ff0895799bb6298c59b2fe073d53a086?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eee968a) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1798?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1798/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1798/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1798/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1798/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1798/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1798/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1798/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-17T17:44:03Z",
  "id":1281231532,
  "issue":1798,
  "node_id":"IC_kwDODBCWws5MXgqs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T17:44:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, I'd like to improve the buttons. Ideally, I'd prefer to use something like the `sphinx-design` buttons, but they don't support the dynamicism that the shields.io badges do. We can just add a CSS margin to the icon class.",
  "created_at":"2022-10-17T20:30:34Z",
  "id":1281455740,
  "issue":1799,
  "node_id":"IC_kwDODBCWws5MYXZ8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T12:37:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"~The kernel specification _is_ being generated, at least locally. I'm not sure why it's not appearing in the built docs~\r\n\r\nAh, it's the change I made to use `runpy`. I'll fix this in the PR that closes this issue.",
  "created_at":"2022-10-17T21:00:13Z",
  "id":1281488176,
  "issue":1799,
  "node_id":"IC_kwDODBCWws5MYfUw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T21:06:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski could you clarify where you think RetroLite could be better on smaller screens? :)",
  "created_at":"2022-10-25T12:45:44Z",
  "id":1290498606,
  "issue":1799,
  "node_id":"IC_kwDODBCWws5M63Iu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T12:45:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Whatever I had been thinking, nevermind: I just tried out https://awkward-array.readthedocs.io/en/main/getting-started/try-awkward-array.html in a window with varying sizes and it scales well: it drops the right bar and then the left bar as the window gets narrow, and the width of the RetroLite widget uses all the available space in its column, which is good. Considering that there's nothing interesting in the right bar, it would be nice if that was always collapsed for this page, but I doubt you can make layout decisions like that on a per-page basis.\r\n\r\nI also checked it on a simulated phone: http://mobiletest.me/iphone_5_emulator/?u=https://awkward-array.readthedocs.io/en/main/getting-started/try-awkward-array.html And it's fine there, too. As much as can be expected.\r\n\r\nAnother nice-to-have: on all platforms, there are two scroll bars for the page and for RetroLite, respectively. The RetroLite widget scales width with the page. It would be awesome if it also scaled height with the page so that the outer page never has a scroll bar and we see only one scroll bar. I'd be surprised if RetroLite has that option, though.\r\n\r\nI also tried it on my physical phone, and yeah, the two scroll bars is a bit of a problem: one needs to be high enough to see the \u25b8 button, which is necessary because there's no \"shift-enter.\" Phones have different sizes, so you can't even set the vertical size to ensure that the header is always visible. Rocks and hard places.\r\n\r\nBottom line, though: there's no action item here. The visibility of RetroLite is as good as is probably possible.",
  "created_at":"2022-10-25T15:34:39Z",
  "id":1290757897,
  "issue":1799,
  "node_id":"IC_kwDODBCWws5M72cJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T15:34:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks Jim! I *think* I've tackled the scaling issue; unfortunately Sphinx is oriented around content-driven layouts rather than layout-driven, so we have to hack the DOM styles a little to make everything scale properly. Here's an example in #1832\r\n\r\n![image](https://user-images.githubusercontent.com/1248413/197829005-8091737c-9e7f-448a-a56d-2da54e91f3a3.png)\r\n",
  "created_at":"2022-10-25T16:21:38Z",
  "id":1290825807,
  "issue":1799,
  "node_id":"IC_kwDODBCWws5M8HBP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T16:21:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1800?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1800](https://codecov.io/gh/scikit-hep/awkward/pull/1800?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b5a8080) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/569f1837136d0f585b6960a5d0b723ea8657d86c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (569f183) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head b5a8080 differs from pull request most recent head f42b113. Consider uploading reports for the commit f42b113 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1800?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_run\\_lengths.py](https://codecov.io/gh/scikit-hep/awkward/pull/1800/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19ydW5fbGVuZ3Rocy5weQ==) | `90.32% <0.00%> (-0.31%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1800/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1800/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1800/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1800/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1800/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1800/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1800/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1800/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-17T21:13:38Z",
  "id":1281502415,
  "issue":1800,
  "node_id":"IC_kwDODBCWws5MYizP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T19:42:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Same as https://github.com/scikit-hep/awkward/pull/1810#issuecomment-1282979494. I could run Sphinx locally and view the rendered HTML locally, but that's probably what you're doing, and the real test of what it looks like is what ReadTheDocs makes of it. It might be too cumbersome to make ReadTheDocs render every documentation-related PR or branch, but we could do a two-step PR of (1) develop in a new branch, (2) pull that into the `docs` branch, and (3) request the `docs` branch to be merged into `main`. The downside of this is that there can't be concurrent PRs (or I would see them all in their already-merged state), but the documentation isn't currently being developed in parallel. (And later, when things settle down, it would be mostly changes to the text, which doesn't have to be reviewed in-situ.)",
  "created_at":"2022-10-18T20:47:59Z",
  "id":1282986648,
  "issue":1800,
  "node_id":"IC_kwDODBCWws5MeNKY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T20:47:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this is now ready to go!",
  "created_at":"2022-10-20T20:59:41Z",
  "id":1286143761,
  "issue":1800,
  "node_id":"IC_kwDODBCWws5MqP8R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:59:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Fantastic! I just took a look, and it looks great.",
  "created_at":"2022-10-20T21:15:53Z",
  "id":1286162180,
  "issue":1800,
  "node_id":"IC_kwDODBCWws5MqUcE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T21:15:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1801?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1801](https://codecov.io/gh/scikit-hep/awkward/pull/1801?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a508f98) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/eee968a9ff0895799bb6298c59b2fe073d53a086?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eee968a) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1801?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1801/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.87% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1801/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1801/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1801/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1801/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1801/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1801/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1801/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-17T21:59:35Z",
  "id":1281546994,
  "issue":1801,
  "node_id":"IC_kwDODBCWws5MYtry",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-17T21:59:35Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"fixed in https://github.com/scikit-hep/awkward/pull/1804",
  "created_at":"2022-10-18T11:25:47Z",
  "id":1282233240,
  "issue":1802,
  "node_id":"IC_kwDODBCWws5MbVOY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T11:25:47Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1803?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1803](https://codecov.io/gh/scikit-hep/awkward/pull/1803?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (963da38) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/65f9fcdc4da45324dc4144a307cfc3ab1728770d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (65f9fcd) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1803?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1803/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1803/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1803/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1803/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1803/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1803/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1803/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-18T08:06:51Z",
  "id":1281979511,
  "issue":1803,
  "node_id":"IC_kwDODBCWws5MaXR3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T17:35:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@Saransh-cpp could you rebase onto `main`, and target `main`? :)",
  "created_at":"2022-10-18T08:07:22Z",
  "id":1281980194,
  "issue":1803,
  "node_id":"IC_kwDODBCWws5MaXci",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T08:07:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I always end up targeting the wrong branch haha. Rebased!",
  "created_at":"2022-10-18T08:26:04Z",
  "id":1282003291,
  "issue":1803,
  "node_id":"IC_kwDODBCWws5MadFb",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "updated_at":"2022-10-18T08:26:04Z",
  "user":"MDQ6VXNlcjc0MDU1MTAy"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - Linux build failed to fetch `numpy` with a `Network is unreachable`.",
  "created_at":"2022-10-18T09:21:15Z",
  "id":1282082552,
  "issue":1804,
  "node_id":"IC_kwDODBCWws5Mawb4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T09:21:15Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1804?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1804](https://codecov.io/gh/scikit-hep/awkward/pull/1804?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (42d9f40) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/65f9fcdc4da45324dc4144a307cfc3ab1728770d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (65f9fcd) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1804?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1804/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `24.90% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1804/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1804/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1804/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1804/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1804/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1804/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1804/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-18T10:26:27Z",
  "id":1282168461,
  "issue":1804,
  "node_id":"IC_kwDODBCWws5MbFaN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T20:43:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I wonder if using an `ArrayBuilder` can help you to solve this issue:\r\n```python\r\n>>> builder = ak.ArrayBuilder()\r\n>>> builder.append(ak.Array([]))\r\n>>> builder\r\n<ArrayBuilder type='1 * var * unknown'>\r\n>>> builder.snapshot()\r\n<Array [[]] type='1 * var * unknown'>\r\n>>> builder.append(ak.Array([1.1]))\r\n>>> builder.snapshot()\r\n<Array [[], [1.1]] type='2 * var * float64'>\r\n>>> builder.append(ak.Array([]))\r\n>>> builder.snapshot()\r\n<Array [[], [1.1], []] type='3 * var * float64'>\r\n```",
  "created_at":"2022-10-18T13:00:28Z",
  "id":1282349628,
  "issue":1805,
  "node_id":"IC_kwDODBCWws5Mbxo8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T13:00:28Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Whilst it is obvious what should happen in the sense of a single ragged array of identically typed values, many Awkward Arrays have more complex structures (and types). In those cases, passing a single `dtype` argument is not possible. \r\n\r\nOne *could* imagine an API in which we pass the `ak.types.Type` object. We currently have something like that; `LayoutBuilder`, although this has disappeared in v2 (at the Python level, at least. We'll recover it at the numba / RDataFrame level IIRC), and `ak.from_buffers`. The latter accepts a high-level `Form` argument that is capable of describing the rich structures that Awkward understands.\r\n\r\nIf you're only dealing with identically typed arrays, you can also get away with using `ak.values_astype` on your empty array.",
  "created_at":"2022-10-18T13:14:17Z",
  "id":1282367944,
  "issue":1805,
  "node_id":"IC_kwDODBCWws5Mb2HI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T13:14:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"There's already an ArrayBuilder implicitly in\r\n\r\n```python\r\na = ak.Array([[1.2], []])  # succeeds, type inferred\r\nb = ak.Array([])  # succeeds, but type '0 * unknown'\r\n```\r\n\r\nbecause the ak.Array constructor calls `ak.from_iter` and `ak.from_iter` fills an ak.ArrayBuilder.\r\n\r\nWe have some of the pieces needed to do this, but not all.\r\n\r\n  1. We have a parser that parses type strings into ak.types.Type objects.\r\n  2. We do not have a converter from ak.types.Type objects to ak.forms.Form objects, as that is a non-unique transformation. (Every Form maps to one Type, whereas a Type maps to multiple Forms.)\r\n  3. We can generate an empty array from a given ak.forms.Form (using a trick, but it's a nice trick).\r\n  4. I think we have a function to check the consistency of an array (ak.Array/ak.Record or its layout) with an ak.types.Type. The \"consistency\" (not equality) logic considers `unknown` to be consistent with any other type.\r\n  5. We do not have a way of, after checking consistency of most of the tree, filling in the `unknown` nodes with the type they're judged to be consistent with. In the array, this is an EmptyArray node, and it needs to be replaced with a Content subtree generated from a Form made from the Type. (The choice of Form is non-unique, but since it won't have any data, it could be some canonical choice.)\r\n\r\nIt sounds like satisfying this request means writing two things: (a) Type \u2192 canonical Form, making the most simple choice, (b) a recursive function that walks down a Content and a Type at the same time. At most nodes, it checks consistency, but at EmptyArray Content nodes, it takes the current Type node, generates a canonical Form from it (using (a)), and generates an empty array from that (using the trick from item 3 above).\r\n\r\nThis recursive function (b) would be applied after constructing the array, to ensure that it conforms to a given Type, filling in where necessary. It's similar to another problem (c) that hasn't been asked for: ensuring that an array conforms to a given Form. In that case, though, the replacement of EmptyArray with anything but EmptyForm would have to be an explicit rule, it doesn't come out naturally as part of consistency rules because those rules are defined on Types, not Forms. Maybe we should ignore (c) until it's actually raised, if ever.\r\n\r\nThis is doable, but it's not as simple as you might have been imagining, @HDembinski. I don't think you should take it on right away, @agoose77, since you have so many things on your plate right now, but I'll think about it. To make that formal, I'll assign this to myself.",
  "created_at":"2022-10-18T16:00:17Z",
  "id":1282632048,
  "issue":1805,
  "node_id":"IC_kwDODBCWws5Mc2lw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T16:00:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Whenever I report something here, I get frustrated to be honest, and that's keeping me from reporting here or getting involved in awkward. My feeling is that awkward was designed to be so general that it can do amazing things that I and most other users never need, but it cannot do comparably simple things well (JaggedArrays is all I want to work with) that I need.",
  "created_at":"2022-10-19T21:07:53Z",
  "id":1284575630,
  "issue":1805,
  "node_id":"IC_kwDODBCWws5MkRGO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-19T21:08:50Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"MEMBER",
  "body":"From user feedback, I know that record types and option types are used fairly often, though union types are quite rare. (Maybe I can scan the full set of GitHub repos that `import awkward` to get more rigorous statistics.)\r\n\r\nBut there is a good argument for drawing a dotted line around just the ragged arrays (or arbitrarily deep ragged arrays? with or without fixed-length dimensions? with or without option types?), since that's an especially frequent use-case. The trouble is defining a closed system around that\u2014functions that only return types $t \\in T$ and only take types $t \\in T$ as arguments. Functions like `min` and `max` on lists whose length might be zero have reason to return missing values, and functions like `cartesian` and `combinations` have reason to return tuples (a record-like structure) to represent the paired output, which can be different types because the depths might be different.\r\n\r\nBut you may be interested in this: https://github.com/pydata/xarray/issues/4285#issuecomment-1282946332. We've been talking about interoperability between Awkward and xarray, and the use-cases described there are more strictly focused on ragged arrays (unlike the HEP use-cases). Developers of the CloudDrift project (oceanography) are thinking of creating a `RaggedArray` structure that excludes records and unions, though I don't know yet what they think of option types and fixed-length dimensions. It won't be backed by an Awkward Array or xarray, though it will be developed in such a way as to be easily convertible.\r\n\r\nRegarding this issue that you raised, if your arrays have no record or union types, then [ak.values_astype](https://awkward-array.readthedocs.io/en/latest/_auto/ak.values_astype.html) will completely solve the problem of ensuring a specified numeric type. The disadvantage of this function is that will will convert the type of all leaves in the tree to a given dtype, but purely ragged arrays have only one leaf.\r\n\r\nI'm still thinking about the general problem of ensuring that a given Awkward Array conforms to a given type, narrowing the type (from `unknown`) if necessary, but that won't impact you because the value it would add beyond `values_astype` is that it would handle trees.",
  "created_at":"2022-10-19T21:51:55Z",
  "id":1284611816,
  "issue":1805,
  "node_id":"IC_kwDODBCWws5MkZ7o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-19T21:51:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Just chiming in to say that I would find this useful too. I've run into this issue recently because I build up some arrays which at times end up as empty. Most of my analysis code calling ak.* functions works fine, but the unknown type breaks numba compilation. I understand from skimming the above that this may not be so trivial to resolve, which is fine for me since it's not a showstopper and I can workaround it by checking for \"unknown\" in the type in just a couple of places. But it took some time and effort to track down, so it would be nice if there was a way to avoid it!",
  "created_at":"2022-10-31T15:03:16Z",
  "id":1297225229,
  "issue":1805,
  "node_id":"IC_kwDODBCWws5NUhYN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T15:03:16Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"MEMBER",
  "body":"Specifically for Numba (and C++/RDataFrame), I thought EmptyArrays get promoted to NumpyArrays with `dtype=np.float64` (like empty `np.array([])`) here:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/fec5eee98c32a0b04e1f90fa02fd151145c7270d/src/awkward/_lookup.py#L27-L29\r\n\r\nConsequently, this should work:\r\n\r\n```python\r\n>>> import awkward as ak, numba as nb\r\n>>> @nb.njit\r\n... def nested_sum(array):\r\n...     output = 0\r\n...     for one_dimensional in array:\r\n...         for item in one_dimensional:\r\n...             output += item\r\n...     return output\r\n... \r\n>>> nested_sum(ak.Array([[1, 2, 3], [], [4, 5]]))\r\n15\r\n>>> nested_sum(ak.Array([[], [], []]))\r\n0.0\r\n```\r\n\r\nand it does.\r\n\r\nIs the problem with Numba compilation that `np.float64` is being assumed, when an integer type is wanted?",
  "created_at":"2022-10-31T15:17:08Z",
  "id":1297246625,
  "issue":1805,
  "node_id":"IC_kwDODBCWws5NUmmh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T15:17:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Humm, I unfortunately don't have a concise reproducer - all I have is the traceback (which probably isn't terribly useful without getting into my rather nested code):\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/software/rehlers/dev/mammoth/mammoth/hardest_kt/produce_flat_skim_from_track_skim.py\", line 440, in _run_embedding_skim\r\n    result = analysis_track_skim_to_flat_tree.hardest_kt_embedding_skim(\r\n  File \"/software/rehlers/dev/mammoth/mammoth/hardest_kt/analysis_track_skim_to_flat_tree.py\", line 421, in hardest_kt_embedding_skim\r\n    _hardest_kt_embedding_skim(\r\n  File \"/software/rehlers/dev/mammoth/mammoth/hardest_kt/analysis_track_skim_to_flat_tree.py\", line 231, in _hardest_kt_embedding_skim\r\n    skim_to_flat_tree.calculate_embedding_skim_impl(\r\n  File \"/software/rehlers/dev/mammoth/mammoth/hardest_kt/skim_to_flat_tree.py\", line 889, in calculate_embedding_skim_impl\r\n    generator_subjet_momentum_fraction_in_measured_jet_numba_wrapper(\r\n  File \"/software/rehlers/dev/mammoth/mammoth/hardest_kt/skim_to_flat_tree.py\", line 662, in generator_subjet_momentum_fraction_in_measured_jet_numba_wrapper\r\n    leading_momentum_fraction, subleading_momentum_fraction = generator_subjet_momentum_fraction_in_measured_jet_numba(\r\n  File \"/software/rehlers/dev/mammoth/.venv/lib/python3.9/site-packages/numba/core/dispatcher.py\", line 468, in _compile_for_args\r\n    error_rewrite(e, 'typing')\r\n  File \"/software/rehlers/dev/mammoth/.venv/lib/python3.9/site-packages/numba/core/dispatcher.py\", line 409, in error_rewrite\r\n    raise e.with_traceback(None)\r\nnumba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nFailed in nopython mode pipeline (step: nopython frontend)\r\nInvalid use of getiter with parameters (float64)\r\n\r\nDuring: typing of intrinsic-call at /software/rehlers/dev/mammoth/mammoth/hardest_kt/skim_to_flat_tree.py (293)\r\n\r\nFile \"mammoth/hardest_kt/skim_to_flat_tree.py\", line 293:\r\ndef _sort_subjets(input_jet: ak.Array, input_subjets: List[analysis_jet_substructure.Subjet]) -> Tuple[analysis_jet_substructure.Subjet, analysis_jet_substructure.Subjet]:\r\n    <source elided>\r\n        py = 0\r\n        for constituent_index in sj.constituent_indices:\r\n        ^\r\n\r\nDuring: resolving callee type: type(CPUDispatcher(<function _sort_subjets at 0x7fa6ed3e9dc0>))\r\nDuring: typing of call at /software/rehlers/dev/mammoth/mammoth/hardest_kt/skim_to_flat_tree.py (637)\r\n\r\nDuring: resolving callee type: type(CPUDispatcher(<function _sort_subjets at 0x7fa6ed3e9dc0>))\r\nDuring: typing of call at /software/rehlers/dev/mammoth/mammoth/hardest_kt/skim_to_flat_tree.py (637)\r\n\r\n\r\nFile \"mammoth/hardest_kt/skim_to_flat_tree.py\", line 637:\r\ndef generator_subjet_momentum_fraction_in_measured_jet_numba(\r\n    <source elided>\r\n        # Sort\r\n        generator_like_leading, generator_like_subleading = _sort_subjets(generator_like_jet, generator_like_subjets)\r\n```\r\n\r\nThe issue `Invalid use of getiter with parameters (float64)` only appears to occur when I had an \"unknown\" in the type.\r\nIn any case, my intention is not to hijack this issue :-) Perhaps the underlying cause of my issue is something else. Since I have a workaround, I probably can't take the time to dig into it further. Thanks for the pointer!",
  "created_at":"2022-10-31T15:57:18Z",
  "id":1297307909,
  "issue":1805,
  "node_id":"IC_kwDODBCWws5NU1kF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T15:57:18Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "author_association":"MEMBER",
  "body":"Nevermind, this was my fault, no bug.",
  "created_at":"2022-10-18T12:56:41Z",
  "id":1282344911,
  "issue":1806,
  "node_id":"IC_kwDODBCWws5MbwfP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T12:56:47Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"If you pass in a Python iterable, Awkward invokes `ArrayBuilder` under the hood (via `ak.from_iter`) as it is ultimately looping in Python to build the result. I don't believe we expose an array fast-path in ArrayBuilder; I haven't looked at this in depth, but I think if this were trivial to do, we'd already have done it. Our `ArrayBuilder` mechanism supports things like unions, so it's slightly complicated under the hood.\r\n\r\nThe answer here is that if you want to adopt a NumPy array, then you need to pass it in as a NumPy array (or use `ak.from_numpy()`). ",
  "created_at":"2022-10-18T15:18:17Z",
  "id":1282566327,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mcmi3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T15:18:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I need a varlength array, aka JaggedArray, so from_numpy() wouldn't work for me.",
  "created_at":"2022-10-18T15:18:53Z",
  "id":1282567140,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mcmvk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T15:19:23Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In that case, you can use `from_regular`, e.g.\r\n```python\r\narray = ak.from_regular(a[np.newaxis, :], axis=1)\r\n```\r\n\r\nMost of the high-level Awkward functions call `ak.to_layout` under the hood, which knows how to adopt various array types. So, in this case, I've dropped the `from_numpy()` which usually isn't necessary.",
  "created_at":"2022-10-18T15:21:27Z",
  "id":1282570933,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mcnq1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T15:22:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"`ArrayBuilder` has only `Int64Builder`. We could extend the API to support `int32`.",
  "created_at":"2022-10-18T15:24:50Z",
  "id":1282575720,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mco1o",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-18T15:24:50Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"This command works for the minimal example, but I don't know how to apply this to my actual case.\r\n```py\r\narray = ak.from_regular(a[np.newaxis, :], axis=1)\r\n```\r\nI have a list of numpy arrays. I want to turn them into Awkward (JaggedArray) types.",
  "created_at":"2022-10-18T15:24:54Z",
  "id":1282575811,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mco3D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T15:24:54Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, please support all integer and float types in ArrayBuilder that numpy supports.",
  "created_at":"2022-10-18T15:25:52Z",
  "id":1282577093,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5McpLF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T15:27:00Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think, there is a more type friendly option to use a `LayoutBuilder`, but it currently lacks pythonization:\r\n```c++\r\ntemplate<class PRIMITIVE>\r\nusing NumpyBuilder = awkward::LayoutBuilder::Numpy<PRIMITIVE>;\r\n```",
  "created_at":"2022-10-18T15:31:30Z",
  "id":1282585709,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5McrRt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T15:31:30Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I have a list of numpy arrays. I want to turn them into Awkward (JaggedArray) types.\r\n\r\nIn this case, using `ArrayBuilder` e.g. via `ak.Array(arrays)` is going to involve iterating over the elements of each array. It would be faster to do something like:\r\n```python\r\nflattened = np.concatenate(arrays, axis=0)\r\ncounts = [len(c) for c in arrays]\r\nak.unflatten(flattened, counts)\r\n```\r\nthis will involve fewer allocations AFAICR.\r\n",
  "created_at":"2022-10-18T15:31:44Z",
  "id":1282586093,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5McrXt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T15:33:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Ah, yes, that's also a good workaround for the meantime for me.",
  "created_at":"2022-10-18T15:33:01Z",
  "id":1282588115,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mcr3T",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T15:33:01Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not sure that I'd call this a workaround. `ak.ArrayBuilder` needs to be able to handle all kinds of user input; even if we added support for all of the NumPy primitive types, `ArrayBuilder` still performs multiple copies of intermediate buffers (it allocates in panels) and has to visit all of the array elements. So, I may be corrected here, but I think it's fairly certain that this will remain the advised solution in the case that you have existing NumPy arrays.",
  "created_at":"2022-10-18T15:38:41Z",
  "id":1282596524,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mct6s",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-18T15:39:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It is a workaround for me, because it is not an intuitive API. It is also not documented.",
  "created_at":"2022-10-18T15:54:27Z",
  "id":1282622001,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mc0Ix",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T15:54:27Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"MEMBER",
  "body":"At least fix the initial issue that I reported, because that behavior is harmful in any case.",
  "created_at":"2022-10-18T15:55:48Z",
  "id":1282625151,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mc05_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T15:55:48Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"MEMBER",
  "body":"When designing APIs, one needs to think about all ways in which this API can be used and then handle all those cases. Not only a few.",
  "created_at":"2022-10-18T15:57:40Z",
  "id":1282628684,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mc1xM",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-18T15:57:40Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"MEMBER",
  "body":"> \r\n\r\n\r\n\r\n> I'm not sure that I'd call this a workaround. `ak.ArrayBuilder` needs to be able to handle all kinds of user input; even if we added support for all of the NumPy primitive types, `ArrayBuilder` still performs multiple copies of intermediate buffers (it allocates in panels) and has to visit all of the array elements. So, I may be corrected here, but I think it's fairly certain that this will remain the advised solution in the case that you have existing NumPy arrays.\r\n\r\nI don't know how ArrayBuilder works internally, but I suppose ArrayBuilder can figure out how to handle this special case more efficiently. The question is only whether you have enough information at the call-site, but I think you do.",
  "created_at":"2022-10-18T16:07:04Z",
  "id":1282641512,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mc45o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T16:07:04Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"MEMBER",
  "body":"What's happening here is that we have several specialized functions for loading arrays in different ways (all of which are documented in docstrings/API reference; the hard part is leading users to the appropriate page).\r\n\r\nThe ak.Array (and ak.Record) constructor dispatches to these specialized functions by argument type, as a convenience. The mapping from types to method of construction is given in the [ak.Array](https://awkward-array.readthedocs.io/en/latest/_auto/ak.Array.html) (and [ak.Record](https://awkward-array.readthedocs.io/en/latest/_auto/ak.Record.html)) constructor documentation, for the `data` argument.\r\n\r\n```python\r\na = np.array([1, 2, 3], dtype=np.int32)\r\n\r\nak.Array(a)  # <Array [1, 2, 3] type='3 * int32'>\r\nak.Array([a])   # <Array [[1, 2, 3]] type='1 * var * int64'>\r\n```\r\n\r\nis the behavior that we want, for the following reason:\r\n\r\n  * When `a` (`data`) is a NumPy array, [ak.from_numpy](https://awkward-array.readthedocs.io/en/latest/_auto/ak.from_numpy.html) is called. This wraps the NumPy array without copying it, so the data type is preserved.\r\n  * When `a` is a generic iterable (not CuPy, not pyarrow, not a dict of str \u2192 columns, and not a string), then the generic [ak.from_iter](https://awkward-array.readthedocs.io/en/latest/_auto/ak.from_iter.html) is called. All of the nested data are presumed to be generic iterables, including NumPy arrays, so the integers from NumPy are generic integers. We use `int64` as a generic integer type.\r\n\r\nHaving `ak.from_iter` preserve NumPy arrays that it encounters inside arbitrary iterables would make its _behavior_ more complex, more difficult to reason about. Your example works this way for simplicity's sake: if the outermost element is a non-array iterable (`[a]` is a list), everything is generic iterables and generic numeric types.\r\n\r\nSince iterating in Python is slow anyway, there's not much speed advantage to recognizing the suite of NumPy scalar types and adding specialized-integer append methods to ArrayBuilder, so that they can be mixed into the output. There is a memory-space advantage, but that can be fixed after constructing the array using the type coercion method described in https://github.com/scikit-hep/awkward/issues/1805#issuecomment-1282632048, or depending on how simple your use-case is, [ak.values_astype](https://awkward-array.readthedocs.io/en/latest/_auto/ak.values_astype.html) can already do it.\r\n\r\nAlso note that we've only been talking about the memory-space used by the numerical values of the array. The offsets of the jagged array also take space, and ArrayBuilder makes `int64` offsets. There is nowhere in the API to insert the information that you might want `int32` offsets, since you've only given it an iterable. Meanwhile, [ak.unflatten](https://awkward-array.readthedocs.io/en/latest/_auto/ak.unflatten.html) lets you specify this because you give it two arrays, and you can set the dtype of the arrays you give it.\r\n\r\n@ianna mentioned LayoutBuilder because it was designed for this purpose. ArrayBuilder takes generic iterables, looks at the type of ever element it is given, and builds an array conforming to that type, no matter how wacky the tagged union has to be. LayoutBuilder is constructed with a type and can only be filled with data of that type. It is designed for speed, so it only exists in compiled languages, currently C++ and someday Numba. (We may need a slow version of LayoutBuilder in pure Python for use in debugging code that will be sent to Numba, but only for the purpose of debugging.) I thought that LayoutBuilder would be a good interface to impy and described how it could be used here: https://github.com/impy-project/impy/issues/65.\r\n\r\nSince ArrayBuilder needs to discover types as it goes along, it needs to be able to compare the current expected type `X` to the given type `Y` of each new datum. For $n$ data types, this is _n_ classes (instance of the current expected type `X`) with $n$ methods each (for handling the given datum of type `Y`). That's a total of $n^2$ methods. [Right now](https://github.com/scikit-hep/awkward/tree/main/src/libawkward/builder), $n=12$. If, in addition to Int64Builder, we add builders for `int8`, `uint8`, `int16`, `uint16`, `int32`, `uint32`, `int64`, `uint64`, and in addition to Float64Builder, we add a builder for `float32`, then $n=21$. The codebase would triple, and all those new methods would need to properly implement type unification: just as `int64` and `float64` goes to `float64` instead of a tagged union, the whole matrix of numeric types would have to be implemented. It's not impossible, but the value proposition is not strong enough for all of that work because there are other ways of getting what you want.",
  "created_at":"2022-10-18T20:04:33Z",
  "id":1282938864,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5MeBfw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T20:04:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Thank you for the long write-up, but it does not matter to me how you implement it, we are talking about API design. You can change your implementation so that it matches user expectations.\r\n\r\nMy user expectation is that these two commands\r\n```py\r\nak.Array(a)  # <Array [1, 2, 3] type='3 * int32'>\r\nak.Array([a])   # <Array [[1, 2, 3]] type='1 * var * int64'>\r\n```\r\nboth give me int32. Using a larger int than the input is wasting resources.\r\n\r\nIf you cannot provide this because it would be an unreasonable effort (although that may point to a problem with the scalability of the implementation), then you should at very least provide a way for me to **restrict** the int to int32. Right now, that's not possible.",
  "created_at":"2022-10-19T20:59:08Z",
  "id":1284567208,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5MkPCo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-19T21:02:41Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"All APIs are ultimately a compromise between multiple different constraints. Everyone has different expectations about how these constraints should be satisfied, and they apply different weightings according to their own needs and interests. As you note, you have expectations, but that does not mean that all users share those expectations. It's our job to find a suitable solution that doesn't compromise our goals. \r\n\r\nUltimately, we only have so many developers with a finite amount of time. We could apply a host of micro-optimisations to `ak.from_iter`, but we need to prioritise the more important parts of the project (bugs, and cornerstone features) over things that currently work, even if with some caveats. It might be that we need to improve our documentation here so that it is clearer how Awkward behaves in `ak.Array` for non-typed objects.\r\n\r\nJim's given a good overview of _why_ this happens. All libraries require some domain specific knowledge, and in this case, if you care about performance and/or memory usage, then you need to use the high-performance APIs such as `from_numpy`. Python lists are untyped, so it will by definition be slower than dealing with flat buffers and shape information. \r\n\r\n> at very least provide a way for me to restrict the int to int32\r\n\r\nWe have APIs to do this, but they're aimed more at library authors than analysis users. Note that, most users are consuming existing ragged data from Parquet, ROOT, or other sources. It is my understanding that you are integrating Awkward as a library author. The solution that I mentioned above is one way to restrict the type. If you pass in a typed array, e.g. `np.ndarray` to `ak.array` or `ak.from_numpy`, Awkward will not change the type. This is why these functions are here - `from_numpy` will error if you pass the wrong type. We also have `from_buffers`, which accepts Awkward's `Form` (a high-level representation of an array data type). Python types don't have a one-to-one correspondence with Awkward types, so if you care about these things you should use a form to describe your Array.\r\n",
  "created_at":"2022-10-19T21:35:25Z",
  "id":1284599065,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5MkW0Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-19T21:36:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I had intended this:\r\n\r\n> is the behavior that we want, for the following reason:\r\n> \r\n> * When `a` (`data`) is a NumPy array, ...\r\n> * When `a` is a generic iterable...\r\n\r\nas a statement of the desired interface. I know I expressed it as \"if X, `from_numpy` is called; if Y, `from_iter` is called,\" but I didn't mean that as a statement of implementation; I meant that as \"if X, the resulting array is formed as though `from_numpy` were called; if Y, the resulting array is formed as though `from_iter` were called.\" I'm defining the interface to the `ak.Array` constructor in terms of the interfaces to `from_numpy` and `from_iter`.\r\n\r\nI was saying that when the argument is pure NumPy, the result will preserve the NumPyness. When the argument is a mixture of NumPy and Python builtins, or any other sequence types, there's no longer any attempt to dig out the nested NumPy types. This decision was made for the sake of simplicity, so that the output is more predictable. (I remember making it, responding to a user issue: simplicity was the overriding concern that led us to this choice.)\r\n\r\nThe next part of my message was about the difficulty of implementing specialized types in ArrayBuilder and how little it would aid performance. @agoose77 [described a way](https://github.com/scikit-hep/awkward/issues/1807#issuecomment-1282586093) to build the array without ever creating `int64` intermediates (and you can also control the integer type of the `offsets` buffer) and I described a way to change the `int64` back into `int32`. Both methods would be 1\u20123 lines of code in a library.",
  "created_at":"2022-10-19T23:31:56Z",
  "id":1284700722,
  "issue":1807,
  "node_id":"IC_kwDODBCWws5Mkvoy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-19T23:31:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, we do have redirects, but it seems like we lost a directory component somehow. Should be a quick fix! ",
  "created_at":"2022-10-18T18:43:32Z",
  "id":1282854543,
  "issue":1808,
  "node_id":"IC_kwDODBCWws5Mds6P",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T18:43:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1809](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9646540) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4e01cc40e033cb9d06eee869cca73c4be3b0d53c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4e01cc4) will **decrease** coverage by `0.03%`.\n> The diff coverage is `36.84%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.34% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numba/arrayview\\_cuda.py](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3X2N1ZGEucHk=) | `26.66% <26.66%> (\u00f8)` | |\n| [src/awkward/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2xvb2t1cC5weQ==) | `98.48% <50.00%> (-0.50%)` | :arrow_down: |\n| [src/awkward/numba.py](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnVtYmEucHk=) | `93.87% <100.00%> (+0.26%)` | :arrow_up: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.77% <0.00%> (-0.21%)` | :arrow_down: |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `84.21% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `17.64% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.22% <0.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/\\_connect/numba/layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvbGF5b3V0LnB5) | `83.51% <0.00%> (+0.13%)` | :arrow_up: |\n| ... and [3 more](https://codecov.io/gh/scikit-hep/awkward/pull/1809?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-18T18:55:31Z",
  "id":1282866805,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5Mdv51",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-02-20T16:32:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"Maybe relevant to this work, the high-level extension API now works for the CUDA target - this might make it quicker / easier to implement the extensions needed by Awkward. [This notebook](https://github.com/gmarkall/extending-numba-cuda/blob/main/Extending%20Numba's%20CUDA%20target%20with%20the%20High-level%20Extension%20API.ipynb) has some examples using the high-level extension API with the CUDA target.",
  "created_at":"2022-10-19T11:07:43Z",
  "id":1283834627,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5MhcMD",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-19T11:07:43Z",
  "user":"MDQ6VXNlcjUzNTY0MA=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Maybe relevant to this work, the high-level extension API now works for the CUDA target - this might make it quicker / easier to implement the extensions needed by Awkward. [This notebook](https://github.com/gmarkall/extending-numba-cuda/blob/main/Extending%20Numba's%20CUDA%20target%20with%20the%20High-level%20Extension%20API.ipynb) has some examples using the high-level extension API with the CUDA target.\r\n\r\n@gmarkall - Thanks, yes, I think, I need to register `ak2.ArrayView` (and its types) extensions:\r\n\r\n```python\r\nself = <numba.cuda.dispatcher._Kernel object at 0x7f7c8f923a30>\r\nty = ak2.ArrayView(ak2.NumpyArrayType(array(int64, 1d, C), none, {}), None, ()), val = <Array [0, 1, 2, 3] type='4 * int64'>\r\nstream = 0, retr = [], kernelargs = []\r\n\r\n    def _prepare_args(self, ty, val, stream, retr, kernelargs):\r\n        \"\"\"\r\n        Convert arguments to ctypes and append to kernelargs\r\n        \"\"\"\r\n    \r\n        # map the arguments using any extension you've registered\r\n        for extension in reversed(self.extensions):\r\n            ty, val = extension.prepare_args(\r\n                ty,\r\n                val,\r\n                stream=stream,\r\n                retr=retr)\r\n\r\n<snip>\r\n\r\n        else:\r\n>           raise NotImplementedError(ty, val)\r\nE           NotImplementedError: (ak2.ArrayView(ak2.NumpyArrayType(array(int64, 1d, C), none, {}), None, ()), <Array [0, 1, 2, 3] type='4 * int64'>)\r\n\r\nkernelargs = []\r\nretr       = []\r\nself       = <numba.cuda.dispatcher._Kernel object at 0x7f7c8f923a30>\r\nstream     = 0\r\nty         = ak2.ArrayView(ak2.NumpyArrayType(array(int64, 1d, C), none, {}), None, ())\r\nval        = <Array [0, 1, 2, 3] type='4 * int64'>\r\n\r\n../../../.local/lib/python3.9/site-packages/numba/cuda/dispatcher.py:417: NotImplementedError\r\n```",
  "created_at":"2022-11-01T13:52:16Z",
  "id":1298543000,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5NZjGY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T13:52:16Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We actually register `ArrayView` and `RecordView`:\r\n```python\r\n@numba.extending.typeof_impl.register(ArrayView)\r\ndef typeof_ArrayView(obj, c):\r\n    return ArrayViewType(obj.type, obj.behavior, obj.fields)\r\n```",
  "created_at":"2022-11-01T15:38:10Z",
  "id":1298720381,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5NaOZ9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T15:38:10Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"This also needs an extension for handling them as arguments to kernels - unfortunately the interface here is a bit clunky and lacking in documentation. One example of where I implemented one is in the cuRAND example:\r\n\r\nhttps://github.com/numba/numba-examples/blob/c423f5419a459f5ab8874fda6d39bb5ea05d04b2/examples/cuda/curand/numba_curand.py#L104-L118\r\n\r\nwhich then has to be specified as an extension to the `@cuda.jit` decorator, like:\r\n\r\nhttps://github.com/numba/numba-examples/blob/c423f5419a459f5ab8874fda6d39bb5ea05d04b2/examples/cuda/curand/example.py#L45\r\n\r\nSo a similar extension would need to be implemented for your `ArrayView`.\r\n\r\nIt's a bit inconvenient at present and I think this highlights that we really need a way to register these extensions globally rather than forcing the user to specify the extensions - in the meantime for your prototyping, can you test with the `extensions=` kwarg?",
  "created_at":"2022-11-01T22:09:16Z",
  "id":1299291902,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5NcZ7-",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-01T22:09:16Z",
  "user":"MDQ6VXNlcjUzNTY0MA=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This also needs an extension for handling them as arguments to kernels - unfortunately the interface here is a bit clunky and lacking in documentation. One example of where I implemented one is in the cuRAND example:\r\n> \r\n> https://github.com/numba/numba-examples/blob/c423f5419a459f5ab8874fda6d39bb5ea05d04b2/examples/cuda/curand/numba_curand.py#L104-L118\r\n> \r\n> which then has to be specified as an extension to the `@cuda.jit` decorator, like:\r\n> \r\n> https://github.com/numba/numba-examples/blob/c423f5419a459f5ab8874fda6d39bb5ea05d04b2/examples/cuda/curand/example.py#L45\r\n> \r\n> So a similar extension would need to be implemented for your `ArrayView`.\r\n> \r\n> It's a bit inconvenient at present and I think this highlights that we really need a way to register these extensions globally rather than forcing the user to specify the extensions - in the meantime for your prototyping, can you test with the `extensions=` kwarg?\r\n\r\n@gmarkall - The type that is passed to `_prepare_args` is an `ak.Array`. It seems that it's boxed as an `ArrayView` at some boundary after the `extensions=` are handled. Somewhere between the `kernel.launch` and the `driver.launch_kernel`? Is this type mismatch the reason for a `CudaAPIError`? Thanks.\r\n```python\r\nself = <numba.cuda.cudadrv.driver.Driver object at 0x7f1f8fbb75e0>, fname = 'cuLaunchKernel', retcode = 1\r\n\r\n    def _check_ctypes_error(self, fname, retcode):\r\n        if retcode != enums.CUDA_SUCCESS:\r\n            errname = ERROR_MAP.get(retcode, \"UNKNOWN_CUDA_ERROR\")\r\n            msg = \"Call to %s results in %s\" % (fname, errname)\r\n            _logger.error(msg)\r\n            if retcode == enums.CUDA_ERROR_NOT_INITIALIZED:\r\n                self._detect_fork()\r\n>           raise CudaAPIError(retcode, msg)\r\nE           numba.cuda.cudadrv.driver.CudaAPIError: [1] Call to cuLaunchKernel results in CUDA_ERROR_INVALID_VALUE\r\n\r\n```",
  "created_at":"2022-11-14T16:02:14Z",
  "id":1313986041,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5OUdX5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-14T16:02:14Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"**Note:** I've tried to write a quick summary to cover everything, as there's quite a few aspects to making this work - if any of the explanations are unclear / too short / confusing, please let me know and I'll elaborate / clarify.\r\n\r\nThe boxing / unboxing doesn't occur on the CUDA target - it's required that the `prepare_args` function does the equivalent work of boxing / unboxing the data. For the `ArrayView`, I see from the data model that it has five members:\r\n\r\n```python\r\n        members = [\r\n            (\"pos\", numba.intp),\r\n            (\"start\", numba.intp),\r\n            (\"stop\", numba.intp),\r\n            (\"arrayptrs\", numba.types.CPointer(numba.intp)),\r\n            (\"pylookup\", numba.types.pyobject),\r\n        ]\r\n```\r\n\r\nthis corresponds with the compiled kernel expecting five parameters (for one `ArrayView`), which we can see by setting `NUMBA_DUMP_ASSEMBLY=1` when running `test_array_1d` (some inline comments added to the dump by me):\r\n\r\n```asm\r\n; Kernel declaration\r\n.visible .entry _ZN6cudapy22test_1809_2dcuda_2djit7swallowB2v1B106cw51cXTLSUwHBinCqbbgUAAGBlq82ILSCEQYkgSQBFCjFSaBZJtttTo4sahbKRjoKKiDvAVKN0AuNEDVYWGDJATUC_2bQZ12oCAA_3d_3dEN2ak14ArrayView_28ak88NumpyArrayType_28array_28int64_2c_201d_2c_20C_29_2c_20_7b_7d_29_2c_20None_2c_20_28_29_29E(\r\n        ; pos\r\n\t.param .u64 _ZN6cudapy22test_1809_2dcuda_2djit7swallowB2v1B106cw51cXTLSUwHBinCqbbgUAAGBlq82ILSCEQYkgSQBFCjFSaBZJtttTo4sahbKRjoKKiDvAVKN0AuNEDVYWGDJATUC_2bQZ12oCAA_3d_3dEN2ak14ArrayView_28ak88NumpyArrayType_28array_28int64_2c_201d_2c_20C_29_2c_20_7b_7d_29_2c_20None_2c_20_28_29_29E_param_0,\r\n        ; start\r\n\t.param .u64 _ZN6cudapy22test_1809_2dcuda_2djit7swallowB2v1B106cw51cXTLSUwHBinCqbbgUAAGBlq82ILSCEQYkgSQBFCjFSaBZJtttTo4sahbKRjoKKiDvAVKN0AuNEDVYWGDJATUC_2bQZ12oCAA_3d_3dEN2ak14ArrayView_28ak88NumpyArrayType_28array_28int64_2c_201d_2c_20C_29_2c_20_7b_7d_29_2c_20None_2c_20_28_29_29E_param_1,\r\n        ; stop\r\n\t.param .u64 _ZN6cudapy22test_1809_2dcuda_2djit7swallowB2v1B106cw51cXTLSUwHBinCqbbgUAAGBlq82ILSCEQYkgSQBFCjFSaBZJtttTo4sahbKRjoKKiDvAVKN0AuNEDVYWGDJATUC_2bQZ12oCAA_3d_3dEN2ak14ArrayView_28ak88NumpyArrayType_28array_28int64_2c_201d_2c_20C_29_2c_20_7b_7d_29_2c_20None_2c_20_28_29_29E_param_2,\r\n        ; arrayptrs\r\n\t.param .u64 _ZN6cudapy22test_1809_2dcuda_2djit7swallowB2v1B106cw51cXTLSUwHBinCqbbgUAAGBlq82ILSCEQYkgSQBFCjFSaBZJtttTo4sahbKRjoKKiDvAVKN0AuNEDVYWGDJATUC_2bQZ12oCAA_3d_3dEN2ak14ArrayView_28ak88NumpyArrayType_28array_28int64_2c_201d_2c_20C_29_2c_20_7b_7d_29_2c_20None_2c_20_28_29_29E_param_3,\r\n        ; pylookup\r\n\t.param .u64 _ZN6cudapy22test_1809_2dcuda_2djit7swallowB2v1B106cw51cXTLSUwHBinCqbbgUAAGBlq82ILSCEQYkgSQBFCjFSaBZJtttTo4sahbKRjoKKiDvAVKN0AuNEDVYWGDJATUC_2bQZ12oCAA_3d_3dEN2ak14ArrayView_28ak88NumpyArrayType_28array_28int64_2c_201d_2c_20C_29_2c_20_7b_7d_29_2c_20None_2c_20_28_29_29E_param_4\r\n)\r\n{\r\n       ; Empty kernel body, just returns\r\n\tret;\r\n}\r\n```\r\n\r\nSo, your `prepare_args` implementation will need to take the `ak.Array` `val`, and prepare those five arguments from it. For Numba to correctly pass those five arguments you will need to return a tuple type of five types, and a tuple of the five values. These will then be handled by the `BaseTuple` case later on in Numba's `_prepare_args` to add the five individual arguments to the call:\r\n\r\nhttps://github.com/numba/numba/blob/fb952f8f5959ce31583da612a91b204bca58da81/numba/cuda/dispatcher.py#L445-L448\r\n\r\nAnother consideration is whether you need to ensure for the user that host data is automatically copied to the device before launch, and retrieved after the kernel - Numba does this for NumPy already - if the array passed in is not in the device, it creates a device array copy to use for the duration of the kernel then copies it back over the original NumPy array. You can see the implementation of this also in Numba's `_prepare_args`:\r\n\r\n- [`wrap_arg`](https://github.com/numba/numba/blob/main/numba/cuda/dispatcher.py#L381) copies to the device if necessary,\r\n- At [the end of `launch()`](https://github.com/numba/numba/blob/main/numba/cuda/dispatcher.py#L363-L365), any retrieval functions are run.\r\n\r\nThe retrieval functions are a function that performs the copy back - an example of this is [in `args.py`](https://github.com/numba/numba/blob/main/numba/cuda/args.py#L51).\r\n\r\nThe retrieval functions should be added to the `retr` list that is passed into the `prepare_args` function. At the moment your `prepare_args` function is declared as\r\n\r\n```python\r\ndef prepare_args(self, ty, val, **kwargs):\r\n```\r\n\r\nbut if you change it to\r\n\r\n```python\r\ndef prepare_args(self, ty, val, stream, retr):\r\n```\r\n\r\nthen you should be able to append to `retr` in there.\r\n\r\nAs a sketch of what the extension might need to look like:\r\n\r\n```python\r\nclass ArrayViewArgHandler:\r\n    def prepare_args(self, ty, val, stream, retr):\r\n        if isinstance(val, ak.Array):\r\n            # Use uint64 for start, stop, pos, the array pointers value and the pylookup value\r\n            tys = types.UniTuple(types.uint64, 5)\r\n  \r\n            # ... Copy data to device if necessary...\r\n            dev_array = # ???\r\n\r\n            start = # Get start from val\r\n            stop = # Get stop from val\r\n            pos = # Get pos from val\r\n            arrayptrs = # Get address of arrayptrs for val\r\n            pylookup = 0 # Presumably pylookup is not used from CUDA\r\n\r\n            # Retrieve data back to host\r\n            def retrieve():\r\n                # Copy dev_array back to host somehow\r\n\r\n            # Append retrieve function if necessary\r\n            retr.append(retrieve)\r\n\r\n            return tys, (start, stop, pos, arrayptrs, pylookup)\r\n\r\n        elif isinstance(val, ak._connect.numba.arrayview.ArrayView):\r\n            # ArrayView handling... TBC later?\r\n        else:\r\n            return ty, val\r\n```",
  "created_at":"2022-11-15T12:16:30Z",
  "id":1315231185,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5OZNXR",
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "updated_at":"2022-11-15T12:16:30Z",
  "user":"MDQ6VXNlcjUzNTY0MA=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@gmarkall - I can lower an `ak.Array` as an `ArrayView` for Numba in `prepare_args`, but we need to make sure that the lifetime of the `ArrayView` is guaranteed beyond the kernel execution. The `ArrayView` is transient and defines the lifetime of `start`, `stop`, etc. How can I achieve that? I also want a user know very little about supplying an extension to a function and also be in control of the data loading to the device.",
  "created_at":"2022-11-16T21:38:32Z",
  "id":1317701243,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5OioZ7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-16T21:38:32Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"> I can lower an `ak.Array` as an `ArrayView` for Numba in `prepare_args`, but we need to make sure that the lifetime of the `ArrayView` is guaranteed beyond the kernel execution. The `ArrayView` is transient and defines the lifetime of `start`, `stop`, etc. How can I achieve that?\r\n\r\nOne possible solution is to hold a reference to it in a retrieval function. If you define a retrieval function in your `prepare_args` function that refers to the transient `ArrayView`, its code object will hold a reference to the `ArrayView`. If you add it to the `retr` list, it will live beyond the kernel execution because it will only be cleared up after Numba has exited its kernel-launching logic.\r\n\r\nNote that kernel launches are asynchronous - does the `ArrayView` need to live until the kernel has finished executing on the device, or only until you've finished preparing all the arguments to launch the kernel?\r\n\r\n> I also want a user know very little about supplying an extension to a function\r\n\r\nIn the long term I need to add a way to register an extension globally, so that it is implicitly present for all `@cuda.jit` functions.\r\n\r\nIn the short term, you could define your own jit decorator (`@ak.cudajit`?) that wraps Numba's `@cuda.jit` decorator, adding the extension to it, and ask users to use `@ak.cudajit` instead of `@cuda.jit`... Would this be a workable solution for the time being?\r\n\r\n> and also be in control of the data loading to the device.\r\n\r\nWhen users are using Awkward with CUDA in a non-Numba context (i.e. using those functions / operations that are already built into Awkward), what do they do? Is there already a way to control data movement to / from the device?",
  "created_at":"2022-11-17T12:26:50Z",
  "id":1318563964,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5Ol7B8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-17T12:26:50Z",
  "user":"MDQ6VXNlcjUzNTY0MA=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > I can lower an `ak.Array` as an `ArrayView` for Numba in `prepare_args`, but we need to make sure that the lifetime of the `ArrayView` is guaranteed beyond the kernel execution. The `ArrayView` is transient and defines the lifetime of `start`, `stop`, etc. How can I achieve that?\r\n> \r\n> One possible solution is to hold a reference to it in a retrieval function. If you define a retrieval function in your `prepare_args` function that refers to the transient `ArrayView`, its code object will hold a reference to the `ArrayView`. If you add it to the `retr` list, it will live beyond the kernel execution because it will only be cleared up after Numba has exited its kernel-launching logic.\r\n> \r\n> Note that kernel launches are asynchronous - does the `ArrayView` need to live until the kernel has finished executing on the device, or only until you've finished preparing all the arguments to launch the kernel?\r\n\r\nyes, it does need to live until the kernel has finished executing on the device\r\n\r\n> \r\n> > I also want a user know very little about supplying an extension to a function\r\n> \r\n> In the long term I need to add a way to register an extension globally, so that it is implicitly present for all `@cuda.jit` functions.\r\n> \r\n> In the short term, you could define your own jit decorator (`@ak.cudajit`?) that wraps Numba's `@cuda.jit` decorator, adding the extension to it, and ask users to use `@ak.cudajit` instead of `@cuda.jit`... Would this be a workable solution for the time being?\r\n> \r\n\r\nI think, we can base our development on yours :-) \r\nI've added an [issue](https://github.com/numba/numba/issues/8609) to keep track of it here.\r\n\r\n> > and also be in control of the data loading to the device.\r\n> \r\n> When users are using Awkward with CUDA in a non-Numba context (i.e. using those functions / operations that are already built into Awkward), what do they do? Is there already a way to control data movement to / from the device?\r\n\r\nyes",
  "created_at":"2022-11-17T17:42:50Z",
  "id":1318986804,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5OniQ0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T14:59:26Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"> yes, it does need to live until the kernel has finished executing on the device\r\n\r\nOK - to ensure correctness, we may need to enqueue the cleanup function as a host callback on the stream that the kernel is executing in, so that the cleanup runs only once device execution is complete. The [`add_callback()`](https://numba.readthedocs.io/en/latest/cuda-reference/host.html#numba.cuda.cudadrv.driver.Stream.add_callback) function can be used for this, but we need to be careful to ensure this is done in a safe way, because we can't call CUDA functions from within callbacks, and the callback may execute on a different thread. It may be necessary to maintain a list of \"active\" `ArrayView`s, and have the callback function remove the relevant `ArrayView` from the list, with a periodic cleanup of old `ArrayView`s. This would be similar to how Numba's deferred deallocation scheme works - this is documented in [Deallocation Behavior](https://numba.readthedocs.io/en/latest/cuda/memory.html#deallocation-behavior).\r\n\r\n> I think, we can base our development on yours :-) I've added an [issue](https://github.com/numba/numba/issues/8609) to keep track of it here.\r\n\r\nMany thanks for adding the issue!",
  "created_at":"2022-11-22T11:02:57Z",
  "id":1323494607,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5O4uzP",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-22T11:02:57Z",
  "user":"MDQ6VXNlcjUzNTY0MA=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@gmarkall - somehow I do not see a kernel being executed for the `ak.Array` type. The `cuda.synchronize` is called, the `mempool` shows the data have been loaded. The back end data is a CuPy array:\r\n`GPU arrayptr <MemoryPointer 0x7fd4cf200600 device=0 mem=<cupy.cuda.memory.PooledMemory object at 0x7fd4ec9eff30>>`\r\n Do I need to wrap it in a `DeviceNDArray`? Or could it be the pointers address miss-match? Thanks.\r\n\r\nBTW, the same kernel works fine on a Numpy array.",
  "created_at":"2022-11-25T10:09:15Z",
  "id":1327279535,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5PHK2v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-25T10:38:20Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"How are you observing whether a kernel is executed?",
  "created_at":"2022-11-25T11:36:17Z",
  "id":1327366994,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5PHgNS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-25T11:36:17Z",
  "user":"MDQ6VXNlcjUzNTY0MA=="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> How are you observing whether a kernel is executed?\r\n\r\nSorry, it does get executed! It <strike>is something else...</strike> looks like a lowered `operator.getitem` access to the `ak.ArrayView` that operates on a `ValueStructProxy`. I think, I need to check that the output (something like `%\".216\" = load i64, i64* %\".215\"`) refers to the same memory.\r\n\r\n> I get the result that is not zeros and I can see printout from it:\r\n> ```\r\n> ArrayViewArgHandler::prepare_args array([10,  1,  2,  3]) <class 'numpy.ndarray'>\r\n> ArrayViewArgHandler::prepare_args array([0, 0, 0, 0]) <class 'numpy.ndarray'>\r\n> ArrayViewArgHandler::prepare_args 3 <class 'int'>\r\n> 39\r\n> 12\r\n> 15\r\n> 18\r\n> Multiply numpy array [10  1  2  3] [30  3  6  9]\r\n> \r\n> ```\r\n> while for the ak.Array:\r\n> `Multiply awkward array [0, 1, 2, 3] [0 0 0 0]\r\n> `",
  "created_at":"2022-11-25T13:09:12Z",
  "id":1327456434,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5PH2Cy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-25T15:42:14Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"[back on this after a break]\r\n\r\nIt looks like before the `prepare_args` is called, Numba has already compiled and lowered an already initialised `ArrayView`'s `getitem`, and the data is already loaded on the GPU. The very same `ak.ArrayView` is passed to `prepare_args` so, the necessary pointers are taken from an existing data proxy, I think, but the `getitem` still does not return anything... \r\n\r\n@gmarkall - Should `@numba.extending.lower_builtin` `lower_getitem_at` be specialised for GPU?\r\n\r\n```python\r\n@cuda.jit(extensions=[array_view_arg_handler])\r\ndef multiply(array, out, n):\r\n    tid = cuda.grid(1)\r\n    out[tid] = array[tid] * n\r\n```\r\n\r\n```python\r\nakarray = ak.Array([0, 1, 2, 3], backend=\"cuda\")\r\narr = np.zeros(4, dtype=int)\r\nd_arr =  cuda.device_array_like(arr)\r\nmultiply[1, 4](akarray, d_arr, 3)\r\ncuda.synchronize()\r\nresult_array = d_arr.copy_to_host()\r\n```\r\n\r\n",
  "created_at":"2022-12-07T15:59:41Z",
  "id":1341179556,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5P8Mak",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-07T15:59:41Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@gmarkall - the following `printf` works from a `@numba.njit` function:\r\n\r\n```python\r\n@numba.extending.lower_builtin(len, ArrayViewType)\r\ndef lower_len(context, builder, sig, args):\r\n    proxyin = context.make_helper(builder, sig.args[0], args[0])\r\n    cgutils.printf(builder, \"stop %d, start %d\", proxyin.stop, proxyin.start)\r\n    return builder.sub(proxyin.stop, proxyin.start)\r\n```\r\n\r\nThe same function fails with a `numba.cuda.cudadrv.driver.LinkerError` in a `@cuda.jit`-ed function:\r\n```\r\nself = <numba.cuda.cudadrv.driver.CtypesLinker object at 0x7f047c2db460>\r\n\r\n    def complete(self):\r\n        cubin = c_void_p(0)\r\n        size = c_size_t(0)\r\n    \r\n        try:\r\n            driver.cuLinkComplete(self.handle, byref(cubin), byref(size))\r\n        except CudaAPIError as e:\r\n>           raise LinkerError(\"%s\\n%s\" % (e, self.error_log))\r\nE           numba.cuda.cudadrv.driver.LinkerError: [300] Call to cuLinkComplete results in CUDA_ERROR_INVALID_SOURCE\r\nE           error   : Undefined reference to 'printf' in '<cudapy-ptx>'\r\n\r\ncubin      = c_void_p(None)\r\nself       = <numba.cuda.cudadrv.driver.CtypesLinker object at 0x7f047c2db460>\r\nsize       = c_ulong(0)\r\n\r\n../../../.local/lib/python3.9/site-packages/numba/cuda/cudadrv/driver.py:2734: LinkerError\r\n```",
  "created_at":"2022-12-13T16:02:57Z",
  "id":1348889350,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5QZmsG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T16:02:57Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"`cgutils.printf` is not tested on CUDA (and probably not supported) but you can use `print_varargs` from `numba.cuda.printimpl`: https://github.com/numba/numba/blob/main/numba/cuda/printimpl.py",
  "created_at":"2022-12-13T22:04:27Z",
  "id":1349838936,
  "issue":1809,
  "node_id":"IC_kwDODBCWws5QdOhY",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-13T22:04:27Z",
  "user":"MDQ6VXNlcjUzNTY0MA=="
 },
 {
  "author_association":"MEMBER",
  "body":"Is there a way to test this in ReadTheDocs? Maybe by keeping the `docs` branch up-to-date with `main` and pulling your own requests into `docs` (or committing directly into `docs`), and then make a PR from `docs` to `main`? Since `docs` is still set up in ReadTheDocs to serve changes, we could do all of the human-eyeball tests there.",
  "created_at":"2022-10-18T20:41:46Z",
  "id":1282979494,
  "issue":1810,
  "node_id":"IC_kwDODBCWws5MeLam",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-18T20:41:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"There's something odd going on with this CI...",
  "created_at":"2022-10-19T20:55:34Z",
  "id":1284563560,
  "issue":1810,
  "node_id":"IC_kwDODBCWws5MkOJo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-19T20:55:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I haven't added any kernel tests yet to the kernel test data. Do you have any suggestions about how best to do this; do I just need to churn through some examples and add them to the data-file?",
  "created_at":"2022-10-19T15:44:02Z",
  "id":1284220352,
  "issue":1811,
  "node_id":"IC_kwDODBCWws5Mi6XA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-19T15:44:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1811?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1811](https://codecov.io/gh/scikit-hep/awkward/pull/1811?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7b0133e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/569f1837136d0f585b6960a5d0b723ea8657d86c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (569f183) will **increase** coverage by `0.00%`.\n> The diff coverage is `86.11%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1811?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/1811/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `86.04% <\u00f8> (+0.33%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1811/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `71.67% <0.00%> (+0.91%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1811/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <72.72%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1811/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.04% <77.77%> (-0.29%)` | :arrow_down: |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1811/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `89.92% <90.47%> (+0.70%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1811/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.46% <100.00%> (-0.50%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1811/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `79.47% <100.00%> (-0.06%)` | :arrow_down: |\n| [src/awkward/nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1811/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnBsaWtlcy5weQ==) | `66.60% <0.00%> (-0.20%)` | :arrow_down: |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/1811/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `74.71% <0.00%> (-0.19%)` | :arrow_down: |\n| ... and [6 more](https://codecov.io/gh/scikit-hep/awkward/pull/1811/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-19T15:56:36Z",
  "id":1284237377,
  "issue":1811,
  "node_id":"IC_kwDODBCWws5Mi-hB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T19:45:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'd missed a couple of places where our option-types eagerly coerce `RegularArray`s into `ListOffsetArray`s. This fixes the few tests that had `var` introduced through reduction",
  "created_at":"2022-10-20T11:29:35Z",
  "id":1285367797,
  "issue":1811,
  "node_id":"IC_kwDODBCWws5MnSf1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T11:29:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've made the changes you requested, and importantly removed most of `IndexedArray._reduce_next`. Could you check that I've not made an oversight here? My reasoning is that `IndexedArray` is effectively a deferred `carry`, which is realised during reduction. The `nextparents`, `starts`, etc. all apply to the _result_ of applying `self._content.carry(self._index)`, so it should  just work\u2122.",
  "created_at":"2022-10-20T18:36:14Z",
  "id":1285979628,
  "issue":1811,
  "node_id":"IC_kwDODBCWws5Mpn3s",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T18:36:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's right, it is just a `carry`!\r\n\r\nVery likely, this happened because the v1 C++ IndexedArray and IndexedOptionArray were a single class, and more work is needed for the IndexedOptionArray (the `else` clause of `if (index[i] >= 0)` in `awkward_IndexedArray_reduce_next_64`). I don't think I ever noticed that the IndexedArray case is simpler. Now that they're two Python classes, the ways in which IndexedArray can collapse down are more apparent.\r\n\r\nDo you want to add kernel test samples? (Not all of the kernels have them.) Otherwise, the PR is done and can be merged.",
  "created_at":"2022-10-20T19:03:09Z",
  "id":1286008098,
  "issue":1811,
  "node_id":"IC_kwDODBCWws5Mpu0i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T19:03:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Very likely, this happened because the v1 C++ IndexedArray and IndexedOptionArray were a single class, and more work is needed for the IndexedOptionArray (the `else` clause of `if (index[i] >= 0)` in `awkward_IndexedArray_reduce_next_64`). \r\n\r\nYes, this was my assessment too. And, it would have been risky to try and simplify this at v1\u2192v2 time; much safer to do this now that things are stable and working.",
  "created_at":"2022-10-20T19:31:28Z",
  "id":1286039002,
  "issue":1811,
  "node_id":"IC_kwDODBCWws5Mp2Xa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T19:31:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Do you want to add kernel test samples? (Not all of the kernels have them.) Otherwise, the PR is done and can be merged.\r\n\r\nMy brain is starting to hurt from spending so much time on reducers - is this something you'd have the cycles for? If not, then let's merge this and I'll make a mental note to get to this down the line.",
  "created_at":"2022-10-20T19:34:02Z",
  "id":1286041616,
  "issue":1811,
  "node_id":"IC_kwDODBCWws5Mp3AQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T19:34:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I was saying that it's optional. So I'll merge it now (after tests).\r\n\r\nSame for #1813.",
  "created_at":"2022-10-20T19:43:28Z",
  "id":1286051857,
  "issue":1811,
  "node_id":"IC_kwDODBCWws5Mp5gR",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-20T19:43:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1812?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1812](https://codecov.io/gh/scikit-hep/awkward/pull/1812?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5deafd3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/aaef8002f1ca0776e11e44c49fa1ec2cc181afea?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (aaef800) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1812?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_run\\_lengths.py](https://codecov.io/gh/scikit-hep/awkward/pull/1812/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19ydW5fbGVuZ3Rocy5weQ==) | `90.62% <0.00%> (+0.30%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-19T17:39:01Z",
  "id":1284358805,
  "issue":1812,
  "node_id":"IC_kwDODBCWws5MjcKV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T06:24:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think this failed due to a network issue. However, the scripts didn't assert that the HTTP response code indicated success, so I've ensured that they will now raise an exception in future. \r\n\r\nThe feature that edits PR descriptions to include a docs link will not run until merged, as it uses the `pull_request_target` feature that allows PRs to access secrets. For security reasons, GH only runs the destination branch's workflows with `pull_request_target`",
  "created_at":"2022-10-20T06:36:41Z",
  "id":1285016303,
  "issue":1812,
  "node_id":"IC_kwDODBCWws5Ml8rv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T06:38:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1813?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`main-v1@3a9ab4b`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-10-20T16:15:10Z",
  "id":1285822808,
  "issue":1813,
  "node_id":"IC_kwDODBCWws5MpBlY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:24:37Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"As far as I can see, this is up-to-date with #1811. Neither has kernel tests, but I'd say they're optional for the PR to be merged.",
  "created_at":"2022-10-20T19:04:56Z",
  "id":1286010078,
  "issue":1813,
  "node_id":"IC_kwDODBCWws5MpvTe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T19:04:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I'll manually merge this once the tests are done. There's no auto-merge here because I couldn't add any tests to the branch protection. (They didn't show up in the drop-down menu.)",
  "created_at":"2022-10-20T19:46:29Z",
  "id":1286055059,
  "issue":1813,
  "node_id":"IC_kwDODBCWws5Mp6ST",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T19:46:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Sounds good! I'm just removing the last vestiges of `represents_regular`",
  "created_at":"2022-10-20T19:54:19Z",
  "id":1286063839,
  "issue":1813,
  "node_id":"IC_kwDODBCWws5Mp8bf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T19:54:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I was getting confused about which one was failing\u2014I had thought it was the `main` one and was very confused.\r\n\r\nIf need be, the `cuda_kernels` can be mercilessly cut out of the legacy `main-v1` branch, since it's only for \"v2 in 1.x\", and it's an incomplete implementation that will be finished in the 2.x series. That may be overkill, considering that the build problem was somehow solved in `main`, but I'm giving you the option to punt on this: if it's not easy to make it work, you can make it go away.",
  "created_at":"2022-10-20T19:58:49Z",
  "id":1286069141,
  "issue":1813,
  "node_id":"IC_kwDODBCWws5Mp9uV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T19:58:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The error in the build here was just because I'd modified the `ListOffsetArrayOf<T>` constructor, but missed a couple of places where the flag was passed in positionally. I'm able to build locally, and the CI *should* work now.",
  "created_at":"2022-10-20T20:02:48Z",
  "id":1286074130,
  "issue":1813,
  "node_id":"IC_kwDODBCWws5Mp-8S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:02:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, I thought the warning about the CUDA source code directory was the reason the tests failed (with warnings-as-errors).\r\n\r\nSince this is working now, I'll merge after it finishes all of the tests.",
  "created_at":"2022-10-20T20:31:33Z",
  "id":1286110405,
  "issue":1813,
  "node_id":"IC_kwDODBCWws5MqHzF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:31:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1815?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1815](https://codecov.io/gh/scikit-hep/awkward/pull/1815?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (297b55f) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/569f1837136d0f585b6960a5d0b723ea8657d86c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (569f183) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1815?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1815/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1815/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1815/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1815/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1815/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1815/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1815/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-20T20:11:57Z",
  "id":1286084543,
  "issue":1815,
  "node_id":"IC_kwDODBCWws5MqBe_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:11:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Fixes scikit-hep/uproot5#760",
  "created_at":"2022-10-20T20:38:14Z",
  "id":1286119509,
  "issue":1815,
  "node_id":"IC_kwDODBCWws5MqKBV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:38:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think that might already have been fixed by making `latest` point to `main-v1` on RTD? The `latest` branch is still v1.",
  "created_at":"2022-10-20T20:39:41Z",
  "id":1286121409,
  "issue":1815,
  "node_id":"IC_kwDODBCWws5MqKfB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:39:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Or not. This doesn't trigger the build tests. But the docs tests have all completed successfully, and my test of the links does what an integration test would do.",
  "created_at":"2022-10-20T20:40:41Z",
  "id":1286122755,
  "issue":1815,
  "node_id":"IC_kwDODBCWws5MqK0D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:40:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Don't merge just yet - noticed a link misbehaving",
  "created_at":"2022-10-20T20:41:04Z",
  "id":1286123256,
  "issue":1815,
  "node_id":"IC_kwDODBCWws5MqK74",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:41:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, I won't.",
  "created_at":"2022-10-20T20:41:14Z",
  "id":1286123476,
  "issue":1815,
  "node_id":"IC_kwDODBCWws5MqK_U",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:41:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, seems fine!",
  "created_at":"2022-10-20T20:43:14Z",
  "id":1286126046,
  "issue":1815,
  "node_id":"IC_kwDODBCWws5MqLne",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T20:43:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"For instance, this was the originally reported dead link:\r\n\r\n* https://awkward-array.readthedocs.io/en/latest/ak.types.Type.html\r\n\r\n(which is live now, but v1, as it should be).\r\n\r\nWhat I tested was:\r\n\r\n* https://awkward-array.readthedocs.io/en/agoose77-docs-fix-url-redirects/ak.types.Type.html\r\n\r\nand similar for all `layout` \u2192 `index`, `record`, `contents`; even `ak.layout.ArrayBuilder` went to the right place.\r\n\r\nI've approved this; when you're done with the change you want to make, you can merge it.",
  "created_at":"2022-10-20T20:43:34Z",
  "id":1286126416,
  "issue":1815,
  "node_id":"IC_kwDODBCWws5MqLtQ",
  "performed_via_github_app":null,
  "reactions":{
   "rocket":1,
   "total_count":1
  },
  "updated_at":"2022-10-20T20:43:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1816?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1816](https://codecov.io/gh/scikit-hep/awkward/pull/1816?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6beb189) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2511d4b28034862653b3154835db163403d17545?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2511d4b) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1816?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1816/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.76% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1816/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1816/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1816/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1816/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1816/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1816/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-20T08:58:37Z",
  "id":1285178490,
  "issue":1816,
  "node_id":"IC_kwDODBCWws5MmkR6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T17:35:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@henryiii is this something you have any capacity to take a look at? I would like to resolve this, but I think a second pair of eyes might be helpful.",
  "created_at":"2022-10-20T16:33:28Z",
  "id":1285846434,
  "issue":1817,
  "node_id":"IC_kwDODBCWws5MpHWi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-20T16:33:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In #1837 I hoped to solve this, but didn't succeed. I hypothesised that `pyodide-build` was creating new symlink upon each invocation, and `ccache` was using `mtime` of the link rather than that of the compiler. However, that wouldn't explain why `ccache` works on my machine, and didn't fx the problem when I disabled that part of the cache check.",
  "created_at":"2022-10-27T10:39:09Z",
  "id":1293331382,
  "issue":1817,
  "node_id":"IC_kwDODBCWws5NFqu2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T10:39:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm not sure what this was concerned about; we already support this in `ak.flatten`. Clearly this issue serves as a good example for why \"See title!\" is _never_ a reasonable description for an issue. :facepalm: ",
  "created_at":"2022-10-25T12:10:19Z",
  "id":1290444453,
  "issue":1818,
  "node_id":"IC_kwDODBCWws5M6p6l",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T12:10:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"This looks like a good speedup! I'm not sure it's the same case, though. I am including a pfile from running\r\n```python\r\nak.from_json(open(\"data/large-file.json\", \"rb\"),line_delimited=True)\r\n```\r\n[tmptbzkhdz0.zip](https://github.com/scikit-hep/awkward/files/9854952/tmptbzkhdz0.zip)\r\n\r\n(that file from https://github.com/json-iterator/test-data/blob/master/large-file.json )\r\n\r\nwherein the internal call to `ak.from_buffers` spends essentially all of its time in numpy.arrayprint.",
  "created_at":"2022-10-24T20:01:06Z",
  "id":1289532988,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M3LY8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-24T20:01:06Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"If it was an internal call, this PR shouldn't be touching it. (ErrorContext only applies to the outermost `ak.*` call.) I'll look into your specific case.",
  "created_at":"2022-10-24T20:03:24Z",
  "id":1289535468,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M3L_s",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-24T20:03:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77: I'm making this a draft to deal with the `prod` error and @martindurant's case.",
  "created_at":"2022-10-24T20:27:20Z",
  "id":1289572531,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M3VCz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-24T20:27:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"> If it was an internal call, this PR shouldn't be touching it. (ErrorContext only applies to the outermost `ak.*` call.) I'll look into your specific case.\r\n\r\nCorrection/clarification: the ErrorContext is only updated by top-level calls to `ak.*` functions; if one `ak.*` function internally calls another, the internal calls are ignored. _However_, the string is still constructed, however expensive that might be, and just thrown away afterward. This should also get fixed, so that it doesn't happen in the GPU case.\r\n\r\n(Independent of finding out why/if `np.arrayprint` is still happening in this PR. I'm only testing your JSON file against `main`, so far.)",
  "created_at":"2022-10-24T22:24:13Z",
  "id":1289708261,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M32Ll",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-24T22:24:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"```python\r\nimport awkward as ak, cProfile\r\nfile = open(\"large-file.json\", \"rb\")\r\ncProfile.run(\"ak.from_json(file)\", sort=\"cumtime\")\r\n```\r\n\r\nEssentially like `main` (except no `traceback`):\r\n\r\n<details>\r\n  <summary>cProfile output</summary>\r\n\r\n```\r\n         1223641 function calls (1125721 primitive calls) in 0.402 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    0.402    0.402 {built-in method builtins.exec}\r\n        1    0.000    0.000    0.402    0.402 <string>:1(<module>)\r\n        1    0.001    0.001    0.402    0.402 ak_from_json.py:14(from_json)\r\n        1    0.009    0.009    0.401    0.401 ak_from_json.py:459(_no_schema)\r\n        1    0.000    0.000    0.245    0.245 ak_from_buffers.py:11(from_buffers)\r\n        2    0.000    0.000    0.228    0.114 _errors.py:128(__init__)\r\n        2    0.000    0.000    0.228    0.114 _errors.py:115(_string_arguments)\r\n       19    0.000    0.000    0.227    0.012 _errors.py:36(format_argument)\r\n       16    0.001    0.000    0.227    0.014 {built-in method builtins.repr}\r\n     1246    0.003    0.000    0.226    0.000 arrayprint.py:1467(_array_repr_implementation)\r\n     1246    0.002    0.000    0.214    0.000 arrayprint.py:561(array2string)\r\n     1227    0.002    0.000    0.209    0.000 arrayprint.py:506(wrapper)\r\n     1227    0.003    0.000    0.207    0.000 arrayprint.py:523(_array2string)\r\n     1227    0.001    0.000    0.180    0.000 arrayprint.py:780(_formatArray)\r\n94295/1227    0.069    0.000    0.179    0.000 arrayprint.py:789(recurser)\r\n        1    0.139    0.139    0.139    0.139 {built-in method awkward._ext.fromjsonobj}\r\n    93068    0.031    0.000    0.090    0.000 arrayprint.py:753(_extendLine_pretty)\r\n    94074    0.036    0.000    0.049    0.000 arrayprint.py:739(_extendLine)\r\n   581740    0.022    0.000    0.022    0.000 {built-in method builtins.len}\r\n     1227    0.002    0.000    0.018    0.000 arrayprint.py:452(_get_format_function)\r\n        1    0.000    0.000    0.018    0.018 ak_from_buffers.py:76(_impl)\r\n   1301/1    0.005    0.000    0.018    0.018 ak_from_buffers.py:127(reconstitute)\r\n     51/1    0.000    0.000    0.018    0.018 ak_from_buffers.py:261(<listcomp>)\r\n    93068    0.015    0.000    0.015    0.000 arrayprint.py:1231(__call__)\r\n     1227    0.001    0.000    0.014    0.000 arrayprint.py:410(<lambda>)\r\n     1227    0.003    0.000    0.014    0.000 arrayprint.py:1223(__init__)\r\n     3537    0.002    0.000    0.010    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\r\n     1242    0.003    0.000    0.008    0.000 arrayprint.py:1439(dtype_short_repr)\r\n        1    0.000    0.000    0.007    0.007 form.py:181(from_json)\r\n     2527    0.002    0.000    0.007    0.000 fromnumeric.py:69(_wrapreduction)\r\n   1301/1    0.002    0.000    0.006    0.006 form.py:14(from_dict)\r\n    93068    0.006    0.000    0.006    0.000 {method 'splitlines' of 'str' objects}\r\n     1300    0.001    0.000    0.006    0.000 <__array_function__ internals>:177(amax)\r\n3018/1006    0.002    0.000    0.005    0.000 arrayprint.py:369(_leading_trailing)\r\n     1300    0.001    0.000    0.005    0.000 fromnumeric.py:2677(amax)\r\n     1242    0.002    0.000    0.005    0.000 _dtype.py:344(_name_get)\r\n     1227    0.001    0.000    0.004    0.000 <__array_function__ internals>:177(amin)\r\n      632    0.002    0.000    0.004    0.000 index.py:21(__init__)\r\n     2527    0.004    0.000    0.004    0.000 {method 'reduce' of 'numpy.ufunc' objects}\r\n     1227    0.001    0.000    0.003    0.000 fromnumeric.py:2802(amin)\r\n     1246    0.001    0.000    0.003    0.000 arrayprint.py:64(_make_options_dict)\r\n     1242    0.001    0.000    0.002    0.000 _dtype.py:330(_name_includes_bit_suffix)\r\n     1006    0.001    0.000    0.002    0.000 <__array_function__ internals>:177(concatenate)\r\n      644    0.001    0.000    0.002    0.000 numpyform.py:39(__init__)\r\n      604    0.001    0.000    0.002    0.000 nplikes.py:930(nplike_of)\r\n      647    0.001    0.000    0.002    0.000 numpyarray.py:41(__init__)\r\n    25994    0.002    0.000    0.002    0.000 {built-in method builtins.isinstance}\r\n     1242    0.001    0.000    0.002    0.000 numerictypes.py:356(issubdtype)\r\n     4957    0.001    0.000    0.001    0.000 {method 'format' of 'str' objects}\r\n     1288    0.001    0.000    0.001    0.000 numpytype.py:22(primitive_to_dtype)\r\n     1246    0.000    0.000    0.001    0.000 ak_from_buffers.py:99(getkey)\r\n      538    0.001    0.000    0.001    0.000 listoffsetarray.py:44(__init__)\r\n     1227    0.001    0.000    0.001    0.000 arrayprint.py:403(_get_formatdict)\r\n       55    0.000    0.000    0.001    0.000 recordarray.py:48(__init__)\r\n     2484    0.001    0.000    0.001    0.000 numerictypes.py:282(issubclass_)\r\n     1246    0.000    0.000    0.001    0.000 nplikes.py:108(frombuffer)\r\n     1301    0.001    0.000    0.001    0.000 form.py:278(_init)\r\n        1    0.000    0.000    0.001    0.001 __init__.py:299(loads)\r\n        1    0.000    0.000    0.001    0.001 decoder.py:332(decode)\r\n        1    0.001    0.001    0.001    0.001 decoder.py:343(raw_decode)\r\n    10523    0.001    0.000    0.001    0.000 {built-in method builtins.issubclass}\r\n     1291    0.001    0.000    0.001    0.000 numpytype.py:41(dtype_to_primitive)\r\n      529    0.000    0.000    0.001    0.000 listoffsetform.py:10(__init__)\r\n     2527    0.001    0.000    0.001    0.000 fromnumeric.py:70(<dictcomp>)\r\n     2012    0.000    0.000    0.001    0.000 index_tricks.py:758(__getitem__)\r\n     1338    0.001    0.000    0.001    0.000 content.py:28(_init)\r\n     1246    0.001    0.000    0.001    0.000 {built-in method builtins.locals}\r\n     3962    0.000    0.000    0.001    0.000 _util.py:83(isstr)\r\n     1246    0.001    0.000    0.001    0.000 arrayprint.py:1403(dtype_is_implied)\r\n     1246    0.001    0.000    0.001    0.000 {built-in method numpy.frombuffer}\r\n     1246    0.001    0.000    0.001    0.000 arrayprint.py:72(<dictcomp>)\r\n     7141    0.001    0.000    0.001    0.000 {method 'rstrip' of 'str' objects}\r\n     8434    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}\r\n       73    0.000    0.000    0.000    0.000 nplikes.py:343(max)\r\n     1279    0.000    0.000    0.000    0.000 nplikes.py:97(asarray)\r\n      953    0.000    0.000    0.000    0.000 abc.py:117(__instancecheck__)\r\n      604    0.000    0.000    0.000    0.000 {built-in method builtins.any}\r\n     2578    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}\r\n     2527    0.000    0.000    0.000    0.000 {built-in method builtins.max}\r\n       57    0.000    0.000    0.000    0.000 {built-in method builtins.all}\r\n        1    0.000    0.000    0.000    0.000 content.py:486(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 content.py:489(_getitem)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:218(_getitem_at)\r\n      4/1    0.000    0.000    0.000    0.000 recordarray.py:301(_getitem_range)\r\n     3826    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}\r\n      4/1    0.000    0.000    0.000    0.000 recordarray.py:323(<listcomp>)\r\n      953    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\r\n     2506    0.000    0.000    0.000    0.000 {built-in method numpy.asarray}\r\n     1242    0.000    0.000    0.000    0.000 _dtype.py:24(_kind_name)\r\n      789    0.000    0.000    0.000    0.000 recordarray.py:113(<genexpr>)\r\n     1206    0.000    0.000    0.000    0.000 nplikes.py:953(<genexpr>)\r\n     1242    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}\r\n     1829    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\r\n       94    0.000    0.000    0.000    0.000 indexedoptionarray.py:45(__init__)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:13(__init__)\r\n     1247    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\r\n     1301    0.000    0.000    0.000    0.000 form.py:312(parameters)\r\n   118/28    0.000    0.000    0.000    0.000 abc.py:121(__subclasscheck__)\r\n     1227    0.000    0.000    0.000    0.000 {method 'discard' of 'set' objects}\r\n   118/28    0.000    0.000    0.000    0.000 {built-in method _abc._abc_subclasscheck}\r\n      508    0.000    0.000    0.000    0.000 listoffsetarray.py:126(length)\r\n     1170    0.000    0.000    0.000    0.000 index.py:104(length)\r\n     1246    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}\r\n      604    0.000    0.000    0.000    0.000 nplikes.py:529(is_own_array)\r\n       21    0.000    0.000    0.000    0.000 indexedoptionarray.py:217(_getitem_range)\r\n     1300    0.000    0.000    0.000    0.000 fromnumeric.py:2672(_amax_dispatcher)\r\n     1242    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}\r\n       32    0.000    0.000    0.000    0.000 index.py:165(__getitem__)\r\n     1227    0.000    0.000    0.000    0.000 fromnumeric.py:2797(_amin_dispatcher)\r\n     1227    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}\r\n     1242    0.000    0.000    0.000    0.000 {method 'isalpha' of 'str' objects}\r\n     1246    0.000    0.000    0.000    0.000 form.py:356(form_key)\r\n     1301    0.000    0.000    0.000    0.000 form.py:308(has_identifier)\r\n     1227    0.000    0.000    0.000    0.000 {built-in method builtins.id}\r\n     1006    0.000    0.000    0.000    0.000 multiarray.py:148(concatenate)\r\n       73    0.000    0.000    0.000    0.000 indexedoptionform.py:11(__init__)\r\n     1288    0.000    0.000    0.000    0.000 numpyform.py:67(inner_shape)\r\n     1291    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}\r\n     1396    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}\r\n     1307    0.000    0.000    0.000    0.000 nplikes.py:468(index_nplike)\r\n        9    0.000    0.000    0.000    0.000 listoffsetarray.py:229(_getitem_range)\r\n      604    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\r\n       57    0.000    0.000    0.000    0.000 _util.py:71(isint)\r\n      604    0.000    0.000    0.000    0.000 nplikes.py:16(instance)\r\n      653    0.000    0.000    0.000    0.000 content.py:77(nplike)\r\n      529    0.000    0.000    0.000    0.000 listoffsetform.py:26(offsets)\r\n      529    0.000    0.000    0.000    0.000 listoffsetform.py:30(content)\r\n      568    0.000    0.000    0.000    0.000 index.py:86(nplike)\r\n      644    0.000    0.000    0.000    0.000 numpyform.py:63(primitive)\r\n      602    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\r\n      602    0.000    0.000    0.000    0.000 {built-in method builtins.next}\r\n      115    0.000    0.000    0.000    0.000 indexedoptionarray.py:114(length)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:129(<genexpr>)\r\n        4    0.000    0.000    0.000    0.000 numeric.py:289(full)\r\n        2    0.000    0.000    0.000    0.000 _util.py:444(wrap)\r\n       19    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1033(_handle_fromlist)\r\n        1    0.000    0.000    0.000    0.000 highlevel.py:182(__init__)\r\n      6/2    0.000    0.000    0.000    0.000 highlevel.py:1111(__setattr__)\r\n        4    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(copyto)\r\n      111    0.000    0.000    0.000    0.000 numpyarray.py:125(length)\r\n        3    0.000    0.000    0.000    0.000 numpyarray.py:229(_getitem_range)\r\n       94    0.000    0.000    0.000    0.000 index.py:90(dtype)\r\n        1    0.000    0.000    0.000    0.000 highlevel.py:336(behavior)\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:890(is_own_array)\r\n       91    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\r\n       55    0.000    0.000    0.000    0.000 _collections_abc.py:262(__subclasshook__)\r\n       73    0.000    0.000    0.000    0.000 indexedoptionform.py:44(content)\r\n       73    0.000    0.000    0.000    0.000 indexedoptionform.py:40(index)\r\n       37    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}\r\n        2    0.000    0.000    0.000    0.000 _errors.py:24(__enter__)\r\n        1    0.000    0.000    0.000    0.000 _util.py:153(arrayclass)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:58(is_tuple)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:51(fields)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:62(contents)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:17(primary)\r\n       30    0.000    0.000    0.000    0.000 index.py:94(metadata)\r\n        4    0.000    0.000    0.000    0.000 emptyarray.py:38(__init__)\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:741(is_own_array)\r\n        4    0.000    0.000    0.000    0.000 emptyform.py:11(__init__)\r\n       37    0.000    0.000    0.000    0.000 content.py:648(_range_identifier)\r\n       38    0.000    0.000    0.000    0.000 recordarray.py:219(length)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:31(__exit__)\r\n        1    0.000    0.000    0.000    0.000 highlevel.py:307(layout)\r\n       24    0.000    0.000    0.000    0.000 _collections_abc.py:315(__subclasshook__)\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:901(is_array)\r\n        2    0.000    0.000    0.000    0.000 content.py:1183(purelist_parameter)\r\n       29    0.000    0.000    0.000    0.000 _collections_abc.py:409(__subclasshook__)\r\n        1    0.000    0.000    0.000    0.000 _collections_abc.py:78(_check_methods)\r\n        4    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\r\n        7    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:913(is_tracer)\r\n       12    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:394(_get_reader)\r\n        9    0.000    0.000    0.000    0.000 _collections_abc.py:381(__subclasshook__)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:21(__init__)\r\n        2    0.000    0.000    0.000    0.000 recordform.py:179(purelist_parameter)\r\n        2    0.000    0.000    0.000    0.000 _typetracer.py:898(is_own_array)\r\n        3    0.000    0.000    0.000    0.000 content.py:71(parameter)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:411(<lambda>)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:390(__exit__)\r\n        4    0.000    0.000    0.000    0.000 multiarray.py:1071(copyto)\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n        2    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:414(_record_to_complex)\r\n        2    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}\r\n        1    0.000    0.000    0.000    0.000 _util.py:140(overlay_behavior)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:384(__init__)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:387(__enter__)\r\n```\r\n\r\n</details>\r\n\r\nEnsure that strings are not constructed if the ErrorContext will not be set (all backends, including CUDA):\r\n\r\n<details>\r\n  <summary>cProfile output</summary>\r\n\r\n```\r\n         85411 function calls (82675 primitive calls) in 0.178 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    0.178    0.178 {built-in method builtins.exec}\r\n        1    0.000    0.000    0.178    0.178 <string>:1(<module>)\r\n        1    0.000    0.000    0.178    0.178 ak_from_json.py:14(from_json)\r\n        1    0.009    0.009    0.177    0.177 ak_from_json.py:459(_no_schema)\r\n        1    0.143    0.143    0.143    0.143 {built-in method awkward._ext.fromjsonobj}\r\n        1    0.000    0.000    0.018    0.018 ak_from_buffers.py:11(from_buffers)\r\n        1    0.000    0.000    0.018    0.018 ak_from_buffers.py:76(_impl)\r\n   1301/1    0.005    0.000    0.018    0.018 ak_from_buffers.py:127(reconstitute)\r\n     51/1    0.000    0.000    0.018    0.018 ak_from_buffers.py:261(<listcomp>)\r\n        1    0.000    0.000    0.007    0.007 form.py:181(from_json)\r\n   1301/1    0.002    0.000    0.006    0.006 form.py:14(from_dict)\r\n      632    0.002    0.000    0.004    0.000 index.py:21(__init__)\r\n      603    0.001    0.000    0.002    0.000 nplikes.py:930(nplike_of)\r\n      644    0.001    0.000    0.002    0.000 numpyform.py:39(__init__)\r\n      647    0.001    0.000    0.002    0.000 numpyarray.py:41(__init__)\r\n    23915    0.001    0.000    0.002    0.000 {built-in method builtins.isinstance}\r\n     1288    0.001    0.000    0.001    0.000 numpytype.py:22(primitive_to_dtype)\r\n      538    0.001    0.000    0.001    0.000 listoffsetarray.py:44(__init__)\r\n     1246    0.000    0.000    0.001    0.000 ak_from_buffers.py:99(getkey)\r\n       55    0.000    0.000    0.001    0.000 recordarray.py:48(__init__)\r\n     1246    0.000    0.000    0.001    0.000 nplikes.py:108(frombuffer)\r\n     1301    0.001    0.000    0.001    0.000 form.py:278(_init)\r\n        1    0.000    0.000    0.001    0.001 __init__.py:299(loads)\r\n        1    0.000    0.000    0.001    0.001 decoder.py:332(decode)\r\n        1    0.001    0.001    0.001    0.001 decoder.py:343(raw_decode)\r\n     1291    0.001    0.000    0.001    0.000 numpytype.py:41(dtype_to_primitive)\r\n     1338    0.001    0.000    0.001    0.000 content.py:28(_init)\r\n      529    0.000    0.000    0.001    0.000 listoffsetform.py:10(__init__)\r\n     3955    0.000    0.000    0.001    0.000 _util.py:83(isstr)\r\n     1246    0.001    0.000    0.001    0.000 {built-in method numpy.frombuffer}\r\n     8436    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}\r\n     1246    0.001    0.000    0.001    0.000 {method 'format' of 'str' objects}\r\n       73    0.000    0.000    0.001    0.000 nplikes.py:343(max)\r\n     1279    0.000    0.000    0.001    0.000 nplikes.py:97(asarray)\r\n       73    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(amax)\r\n       77    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\r\n       73    0.000    0.000    0.000    0.000 fromnumeric.py:2677(amax)\r\n     2578    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}\r\n      603    0.000    0.000    0.000    0.000 {built-in method builtins.any}\r\n        1    0.000    0.000    0.000    0.000 content.py:486(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 content.py:489(_getitem)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:218(_getitem_at)\r\n      4/1    0.000    0.000    0.000    0.000 recordarray.py:301(_getitem_range)\r\n       73    0.000    0.000    0.000    0.000 fromnumeric.py:69(_wrapreduction)\r\n      4/1    0.000    0.000    0.000    0.000 recordarray.py:323(<listcomp>)\r\n       56    0.000    0.000    0.000    0.000 {built-in method builtins.all}\r\n      933    0.000    0.000    0.000    0.000 abc.py:117(__instancecheck__)\r\n      789    0.000    0.000    0.000    0.000 recordarray.py:113(<genexpr>)\r\n       73    0.000    0.000    0.000    0.000 {method 'reduce' of 'numpy.ufunc' objects}\r\n     1205    0.000    0.000    0.000    0.000 nplikes.py:953(<genexpr>)\r\n     2697    0.000    0.000    0.000    0.000 {built-in method builtins.len}\r\n       94    0.000    0.000    0.000    0.000 indexedoptionarray.py:45(__init__)\r\n      933    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\r\n     1279    0.000    0.000    0.000    0.000 {built-in method numpy.asarray}\r\n       21    0.000    0.000    0.000    0.000 indexedoptionarray.py:217(_getitem_range)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:13(__init__)\r\n       32    0.000    0.000    0.000    0.000 index.py:165(__getitem__)\r\n     1170    0.000    0.000    0.000    0.000 index.py:104(length)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:128(__init__)\r\n      508    0.000    0.000    0.000    0.000 listoffsetarray.py:126(length)\r\n     1301    0.000    0.000    0.000    0.000 form.py:312(parameters)\r\n      603    0.000    0.000    0.000    0.000 nplikes.py:529(is_own_array)\r\n        1    0.000    0.000    0.000    0.000 _errors.py:115(_string_arguments)\r\n     1301    0.000    0.000    0.000    0.000 form.py:308(has_identifier)\r\n     1246    0.000    0.000    0.000    0.000 form.py:356(form_key)\r\n       12    0.000    0.000    0.000    0.000 _errors.py:36(format_argument)\r\n     1288    0.000    0.000    0.000    0.000 numpyform.py:67(inner_shape)\r\n     1291    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}\r\n       73    0.000    0.000    0.000    0.000 indexedoptionform.py:11(__init__)\r\n     1396    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}\r\n     1307    0.000    0.000    0.000    0.000 nplikes.py:468(index_nplike)\r\n        9    0.000    0.000    0.000    0.000 listoffsetarray.py:229(_getitem_range)\r\n       57    0.000    0.000    0.000    0.000 _util.py:71(isint)\r\n    52/14    0.000    0.000    0.000    0.000 abc.py:121(__subclasscheck__)\r\n    52/14    0.000    0.000    0.000    0.000 {built-in method _abc._abc_subclasscheck}\r\n      603    0.000    0.000    0.000    0.000 nplikes.py:16(instance)\r\n      653    0.000    0.000    0.000    0.000 content.py:77(nplike)\r\n      529    0.000    0.000    0.000    0.000 listoffsetform.py:30(content)\r\n      568    0.000    0.000    0.000    0.000 index.py:86(nplike)\r\n      644    0.000    0.000    0.000    0.000 numpyform.py:63(primitive)\r\n      602    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\r\n      602    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\r\n      529    0.000    0.000    0.000    0.000 listoffsetform.py:26(offsets)\r\n      603    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\r\n      632    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\r\n      602    0.000    0.000    0.000    0.000 {built-in method builtins.next}\r\n        4    0.000    0.000    0.000    0.000 numeric.py:289(full)\r\n      115    0.000    0.000    0.000    0.000 indexedoptionarray.py:114(length)\r\n        2    0.000    0.000    0.000    0.000 _util.py:444(wrap)\r\n        1    0.000    0.000    0.000    0.000 highlevel.py:182(__init__)\r\n       73    0.000    0.000    0.000    0.000 fromnumeric.py:70(<dictcomp>)\r\n        4    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(copyto)\r\n      6/2    0.000    0.000    0.000    0.000 highlevel.py:1111(__setattr__)\r\n       73    0.000    0.000    0.000    0.000 {built-in method builtins.max}\r\n        3    0.000    0.000    0.000    0.000 numpyarray.py:229(_getitem_range)\r\n      111    0.000    0.000    0.000    0.000 numpyarray.py:125(length)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:129(<genexpr>)\r\n       94    0.000    0.000    0.000    0.000 index.py:90(dtype)\r\n      125    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}\r\n       12    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1033(_handle_fromlist)\r\n        1    0.000    0.000    0.000    0.000 highlevel.py:336(behavior)\r\n       73    0.000    0.000    0.000    0.000 indexedoptionform.py:44(content)\r\n       70    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\r\n       73    0.000    0.000    0.000    0.000 fromnumeric.py:2672(_amax_dispatcher)\r\n       73    0.000    0.000    0.000    0.000 indexedoptionform.py:40(index)\r\n        6    0.000    0.000    0.000    0.000 _errors.py:17(primary)\r\n        1    0.000    0.000    0.000    0.000 _util.py:153(arrayclass)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:58(is_tuple)\r\n       37    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}\r\n        3    0.000    0.000    0.000    0.000 nplikes.py:890(is_own_array)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:51(fields)\r\n       31    0.000    0.000    0.000    0.000 _collections_abc.py:262(__subclasshook__)\r\n        4    0.000    0.000    0.000    0.000 emptyarray.py:38(__init__)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:62(contents)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:31(__exit__)\r\n       30    0.000    0.000    0.000    0.000 index.py:94(metadata)\r\n       38    0.000    0.000    0.000    0.000 recordarray.py:219(length)\r\n        4    0.000    0.000    0.000    0.000 emptyform.py:11(__init__)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:24(__enter__)\r\n       37    0.000    0.000    0.000    0.000 content.py:648(_range_identifier)\r\n        2    0.000    0.000    0.000    0.000 content.py:1183(purelist_parameter)\r\n        4    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\r\n        1    0.000    0.000    0.000    0.000 highlevel.py:307(layout)\r\n       11    0.000    0.000    0.000    0.000 {built-in method builtins.repr}\r\n        3    0.000    0.000    0.000    0.000 nplikes.py:901(is_array)\r\n        1    0.000    0.000    0.000    0.000 _collections_abc.py:78(_check_methods)\r\n        3    0.000    0.000    0.000    0.000 nplikes.py:741(is_own_array)\r\n        7    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:394(_get_reader)\r\n        3    0.000    0.000    0.000    0.000 nplikes.py:913(is_tracer)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:21(__init__)\r\n        2    0.000    0.000    0.000    0.000 recordform.py:179(purelist_parameter)\r\n        9    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}\r\n        3    0.000    0.000    0.000    0.000 content.py:71(parameter)\r\n        5    0.000    0.000    0.000    0.000 _collections_abc.py:381(__subclasshook__)\r\n        9    0.000    0.000    0.000    0.000 _collections_abc.py:409(__subclasshook__)\r\n        4    0.000    0.000    0.000    0.000 multiarray.py:1071(copyto)\r\n        6    0.000    0.000    0.000    0.000 _collections_abc.py:315(__subclasshook__)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:411(<lambda>)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:390(__exit__)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:414(_record_to_complex)\r\n        2    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n        1    0.000    0.000    0.000    0.000 _typetracer.py:898(is_own_array)\r\n        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 _util.py:140(overlay_behavior)\r\n        2    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:384(__init__)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:387(__enter__)\r\n```\r\n\r\n</details>\r\n\r\nEnsure that strings are not constructed until we're actually throwing an error (CPU/eager only):\r\n\r\n<details>\r\n  <summary>cProfile output</summary>\r\n\r\n```\r\n         85206 function calls (82546 primitive calls) in 0.177 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    0.177    0.177 {built-in method builtins.exec}\r\n        1    0.000    0.000    0.177    0.177 <string>:1(<module>)\r\n        1    0.001    0.001    0.177    0.177 ak_from_json.py:14(from_json)\r\n        1    0.009    0.009    0.177    0.177 ak_from_json.py:459(_no_schema)\r\n        1    0.143    0.143    0.143    0.143 {built-in method awkward._ext.fromjsonobj}\r\n        1    0.000    0.000    0.018    0.018 ak_from_buffers.py:11(from_buffers)\r\n        1    0.000    0.000    0.018    0.018 ak_from_buffers.py:76(_impl)\r\n   1301/1    0.005    0.000    0.018    0.018 ak_from_buffers.py:127(reconstitute)\r\n     51/1    0.000    0.000    0.018    0.018 ak_from_buffers.py:261(<listcomp>)\r\n        1    0.000    0.000    0.007    0.007 form.py:181(from_json)\r\n   1301/1    0.002    0.000    0.006    0.006 form.py:14(from_dict)\r\n      632    0.002    0.000    0.004    0.000 index.py:21(__init__)\r\n      614    0.001    0.000    0.002    0.000 nplikes.py:930(nplike_of)\r\n      644    0.001    0.000    0.002    0.000 numpyform.py:39(__init__)\r\n      647    0.001    0.000    0.002    0.000 numpyarray.py:41(__init__)\r\n    23844    0.001    0.000    0.002    0.000 {built-in method builtins.isinstance}\r\n     1288    0.001    0.000    0.001    0.000 numpytype.py:22(primitive_to_dtype)\r\n     1246    0.000    0.000    0.001    0.000 ak_from_buffers.py:99(getkey)\r\n      538    0.001    0.000    0.001    0.000 listoffsetarray.py:44(__init__)\r\n       55    0.000    0.000    0.001    0.000 recordarray.py:48(__init__)\r\n     1246    0.000    0.000    0.001    0.000 nplikes.py:108(frombuffer)\r\n     1301    0.001    0.000    0.001    0.000 form.py:278(_init)\r\n        1    0.000    0.000    0.001    0.001 __init__.py:299(loads)\r\n        1    0.000    0.000    0.001    0.001 decoder.py:332(decode)\r\n        1    0.001    0.001    0.001    0.001 decoder.py:343(raw_decode)\r\n      529    0.000    0.000    0.001    0.000 listoffsetform.py:10(__init__)\r\n     1291    0.001    0.000    0.001    0.000 numpytype.py:41(dtype_to_primitive)\r\n     1338    0.001    0.000    0.001    0.000 content.py:28(_init)\r\n     3943    0.000    0.000    0.001    0.000 _util.py:83(isstr)\r\n     1246    0.001    0.000    0.001    0.000 {built-in method numpy.frombuffer}\r\n     8436    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}\r\n     1246    0.001    0.000    0.001    0.000 {method 'format' of 'str' objects}\r\n       73    0.000    0.000    0.001    0.000 nplikes.py:343(max)\r\n       73    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(amax)\r\n     1279    0.000    0.000    0.000    0.000 nplikes.py:97(asarray)\r\n       77    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\r\n     2578    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}\r\n       73    0.000    0.000    0.000    0.000 fromnumeric.py:2677(amax)\r\n      614    0.000    0.000    0.000    0.000 {built-in method builtins.any}\r\n        1    0.000    0.000    0.000    0.000 content.py:486(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 content.py:489(_getitem)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:218(_getitem_at)\r\n       56    0.000    0.000    0.000    0.000 {built-in method builtins.all}\r\n       73    0.000    0.000    0.000    0.000 fromnumeric.py:69(_wrapreduction)\r\n      4/1    0.000    0.000    0.000    0.000 recordarray.py:301(_getitem_range)\r\n      4/1    0.000    0.000    0.000    0.000 recordarray.py:323(<listcomp>)\r\n      907    0.000    0.000    0.000    0.000 abc.py:117(__instancecheck__)\r\n       73    0.000    0.000    0.000    0.000 {method 'reduce' of 'numpy.ufunc' objects}\r\n      789    0.000    0.000    0.000    0.000 recordarray.py:113(<genexpr>)\r\n     1216    0.000    0.000    0.000    0.000 nplikes.py:953(<genexpr>)\r\n       94    0.000    0.000    0.000    0.000 indexedoptionarray.py:45(__init__)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:13(__init__)\r\n     2685    0.000    0.000    0.000    0.000 {built-in method builtins.len}\r\n       21    0.000    0.000    0.000    0.000 indexedoptionarray.py:217(_getitem_range)\r\n     1170    0.000    0.000    0.000    0.000 index.py:104(length)\r\n       32    0.000    0.000    0.000    0.000 index.py:165(__getitem__)\r\n      508    0.000    0.000    0.000    0.000 listoffsetarray.py:126(length)\r\n     1301    0.000    0.000    0.000    0.000 form.py:312(parameters)\r\n     1279    0.000    0.000    0.000    0.000 {built-in method numpy.asarray}\r\n      614    0.000    0.000    0.000    0.000 nplikes.py:529(is_own_array)\r\n     1301    0.000    0.000    0.000    0.000 form.py:308(has_identifier)\r\n      907    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\r\n     1246    0.000    0.000    0.000    0.000 form.py:356(form_key)\r\n     1291    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}\r\n       73    0.000    0.000    0.000    0.000 indexedoptionform.py:11(__init__)\r\n     1288    0.000    0.000    0.000    0.000 numpyform.py:67(inner_shape)\r\n     1396    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}\r\n     1307    0.000    0.000    0.000    0.000 nplikes.py:468(index_nplike)\r\n        9    0.000    0.000    0.000    0.000 listoffsetarray.py:229(_getitem_range)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:128(__init__)\r\n      614    0.000    0.000    0.000    0.000 nplikes.py:16(instance)\r\n       57    0.000    0.000    0.000    0.000 _util.py:71(isint)\r\n      653    0.000    0.000    0.000    0.000 content.py:77(nplike)\r\n       13    0.000    0.000    0.000    0.000 _errors.py:129(<genexpr>)\r\n      568    0.000    0.000    0.000    0.000 index.py:86(nplike)\r\n      529    0.000    0.000    0.000    0.000 listoffsetform.py:30(content)\r\n      644    0.000    0.000    0.000    0.000 numpyform.py:63(primitive)\r\n      602    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\r\n      614    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\r\n      602    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\r\n      529    0.000    0.000    0.000    0.000 listoffsetform.py:26(offsets)\r\n      632    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\r\n      602    0.000    0.000    0.000    0.000 {built-in method builtins.next}\r\n      115    0.000    0.000    0.000    0.000 indexedoptionarray.py:114(length)\r\n        4    0.000    0.000    0.000    0.000 numeric.py:289(full)\r\n        2    0.000    0.000    0.000    0.000 _util.py:444(wrap)\r\n       73    0.000    0.000    0.000    0.000 fromnumeric.py:70(<dictcomp>)\r\n        1    0.000    0.000    0.000    0.000 highlevel.py:182(__init__)\r\n        4    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(copyto)\r\n      6/2    0.000    0.000    0.000    0.000 highlevel.py:1111(__setattr__)\r\n       73    0.000    0.000    0.000    0.000 {built-in method builtins.max}\r\n      111    0.000    0.000    0.000    0.000 numpyarray.py:125(length)\r\n       14    0.000    0.000    0.000    0.000 nplikes.py:890(is_own_array)\r\n        3    0.000    0.000    0.000    0.000 numpyarray.py:229(_getitem_range)\r\n      124    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}\r\n       94    0.000    0.000    0.000    0.000 index.py:90(dtype)\r\n        2    0.000    0.000    0.000    0.000 abc.py:121(__subclasscheck__)\r\n        1    0.000    0.000    0.000    0.000 highlevel.py:336(behavior)\r\n        6    0.000    0.000    0.000    0.000 _errors.py:17(primary)\r\n        2    0.000    0.000    0.000    0.000 {built-in method _abc._abc_subclasscheck}\r\n       73    0.000    0.000    0.000    0.000 indexedoptionform.py:44(content)\r\n       73    0.000    0.000    0.000    0.000 indexedoptionform.py:40(index)\r\n       73    0.000    0.000    0.000    0.000 fromnumeric.py:2672(_amax_dispatcher)\r\n       37    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}\r\n       51    0.000    0.000    0.000    0.000 recordform.py:58(is_tuple)\r\n       14    0.000    0.000    0.000    0.000 nplikes.py:741(is_own_array)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:31(__exit__)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:51(fields)\r\n        1    0.000    0.000    0.000    0.000 _util.py:153(arrayclass)\r\n       34    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\r\n       14    0.000    0.000    0.000    0.000 nplikes.py:901(is_array)\r\n       51    0.000    0.000    0.000    0.000 recordform.py:62(contents)\r\n        4    0.000    0.000    0.000    0.000 emptyform.py:11(__init__)\r\n       30    0.000    0.000    0.000    0.000 index.py:94(metadata)\r\n        4    0.000    0.000    0.000    0.000 emptyarray.py:38(__init__)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:24(__enter__)\r\n       14    0.000    0.000    0.000    0.000 nplikes.py:913(is_tracer)\r\n       38    0.000    0.000    0.000    0.000 recordarray.py:219(length)\r\n       37    0.000    0.000    0.000    0.000 content.py:648(_range_identifier)\r\n        1    0.000    0.000    0.000    0.000 _collections_abc.py:262(__subclasshook__)\r\n        1    0.000    0.000    0.000    0.000 highlevel.py:307(layout)\r\n       42    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}\r\n        2    0.000    0.000    0.000    0.000 content.py:1183(purelist_parameter)\r\n        1    0.000    0.000    0.000    0.000 _collections_abc.py:78(_check_methods)\r\n       12    0.000    0.000    0.000    0.000 _typetracer.py:898(is_own_array)\r\n        4    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\r\n        7    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:394(_get_reader)\r\n        3    0.000    0.000    0.000    0.000 content.py:71(parameter)\r\n        2    0.000    0.000    0.000    0.000 recordform.py:179(purelist_parameter)\r\n        2    0.000    0.000    0.000    0.000 _errors.py:21(__init__)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:411(<lambda>)\r\n        4    0.000    0.000    0.000    0.000 multiarray.py:1071(copyto)\r\n        2    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:390(__exit__)\r\n        2    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}\r\n        1    0.000    0.000    0.000    0.000 _util.py:140(overlay_behavior)\r\n        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:384(__init__)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:414(_record_to_complex)\r\n        1    0.000    0.000    0.000    0.000 ak_from_json.py:387(__enter__)\r\n```\r\n\r\n</details>\r\n\r\nThe last two cases have the same timings because `ak.from_json` doesn't have any array arguments to stringify. But if one `ak.*` function were to call another with array arguments, there should be a factor of 2 difference between them.\r\n\r\n--------------\r\n\r\nOkay, okay, I'll test it. Here's what I'm profiling now:\r\n\r\n```python\r\nimport awkward as ak, numpy as np, cProfile\r\narray = [np.arange(1000) for _ in range(1000)]\r\ncProfile.run(\"ak.num(array, axis=0)\", sort=\"cumtime\")\r\n```\r\n\r\nwhich gets a particularly nasty list of NumPy arrays as an argument, and `ak.num` passes its array arguments to `ak.to_layout` to normalize it into an Awkward Array layout.\r\n\r\nWithout \"stringify only if you're going to set the ErrorContext\" and without \"delay stringification until there's an error\":\r\n\r\n<details>\r\n  <summary>cProfile output</summary>\r\n\r\n```\r\n         33391797 function calls (30391592 primitive calls) in 8.351 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    8.351    8.351 {built-in method builtins.exec}\r\n        1    0.000    0.000    8.351    8.351 <string>:1(<module>)\r\n        1    0.000    0.000    8.351    8.351 ak_num.py:8(num)\r\n        1    0.000    0.000    6.532    6.532 ak_num.py:76(_impl)\r\n        1    0.000    0.000    6.532    6.532 ak_to_layout.py:12(to_layout)\r\n        4    0.000    0.000    5.515    1.379 _errors.py:128(__init__)\r\n        4    0.000    0.000    5.515    1.379 _errors.py:115(_string_arguments)\r\n       21    0.000    0.000    5.514    0.263 _errors.py:36(format_argument)\r\n       19    0.007    0.000    5.514    0.290 {built-in method builtins.repr}\r\n     3003    0.005    0.000    5.507    0.002 arrayprint.py:1467(_array_repr_implementation)\r\n     3003    0.005    0.000    5.500    0.002 arrayprint.py:561(array2string)\r\n     3003    0.004    0.000    5.486    0.002 arrayprint.py:506(wrapper)\r\n     3003    0.008    0.000    5.481    0.002 arrayprint.py:523(_array2string)\r\n     3003    0.002    0.000    5.423    0.002 arrayprint.py:780(_formatArray)\r\n3003031/3003    2.071    0.000    5.421    0.002 arrayprint.py:789(recurser)\r\n      2/1    0.000    0.000    4.703    4.703 ak_to_layout.py:48(_impl)\r\n        1    0.000    0.000    4.703    4.703 ak_from_iter.py:8(from_iter)\r\n        1    2.836    2.836    2.837    2.837 ak_from_iter.py:67(_impl)\r\n  3000028    0.966    0.000    2.792    0.000 arrayprint.py:753(_extendLine_pretty)\r\n  3000030    1.092    0.000    1.516    0.000 arrayprint.py:739(_extendLine)\r\n 18027259    0.645    0.000    0.645    0.000 {built-in method builtins.len}\r\n  3000028    0.440    0.000    0.440    0.000 arrayprint.py:1231(__call__)\r\n  3000028    0.190    0.000    0.190    0.000 {method 'splitlines' of 'str' objects}\r\n     3003    0.006    0.000    0.050    0.000 arrayprint.py:452(_get_format_function)\r\n     3003    0.001    0.000    0.041    0.000 arrayprint.py:410(<lambda>)\r\n     3003    0.008    0.000    0.039    0.000 arrayprint.py:1223(__init__)\r\n     6008    0.002    0.000    0.026    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\r\n     6006    0.005    0.000    0.020    0.000 fromnumeric.py:69(_wrapreduction)\r\n     3003    0.001    0.000    0.018    0.000 <__array_function__ internals>:177(amax)\r\n   231004    0.016    0.000    0.016    0.000 {method 'rstrip' of 'str' objects}\r\n     3003    0.002    0.000    0.015    0.000 fromnumeric.py:2677(amax)\r\n     6006    0.013    0.000    0.013    0.000 {method 'reduce' of 'numpy.ufunc' objects}\r\n     3003    0.001    0.000    0.011    0.000 <__array_function__ internals>:177(amin)\r\n     3003    0.002    0.000    0.009    0.000 fromnumeric.py:2802(amin)\r\n     3003    0.004    0.000    0.008    0.000 arrayprint.py:64(_make_options_dict)\r\n     3003    0.003    0.000    0.003    0.000 arrayprint.py:403(_get_formatdict)\r\n     3003    0.002    0.000    0.002    0.000 {built-in method builtins.locals}\r\n     3003    0.002    0.000    0.002    0.000 arrayprint.py:1403(dtype_is_implied)\r\n     6006    0.002    0.000    0.002    0.000 fromnumeric.py:70(<dictcomp>)\r\n     3003    0.001    0.000    0.001    0.000 arrayprint.py:72(<dictcomp>)\r\n     6006    0.001    0.000    0.001    0.000 {built-in method builtins.max}\r\n     3012    0.001    0.000    0.001    0.000 {method 'format' of 'str' objects}\r\n     9013    0.001    0.000    0.001    0.000 {method 'items' of 'dict' objects}\r\n        1    0.000    0.000    0.001    0.001 ak_from_buffers.py:11(from_buffers)\r\n     9027    0.001    0.000    0.001    0.000 {built-in method builtins.issubclass}\r\n     3003    0.001    0.000    0.001    0.000 {method 'discard' of 'set' objects}\r\n     3004    0.001    0.000    0.001    0.000 {method 'update' of 'dict' objects}\r\n     3005    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\r\n     3003    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}\r\n     3003    0.000    0.000    0.000    0.000 fromnumeric.py:2672(_amax_dispatcher)\r\n     3003    0.000    0.000    0.000    0.000 fromnumeric.py:2797(_amin_dispatcher)\r\n     3007    0.000    0.000    0.000    0.000 {built-in method numpy.asarray}\r\n     3003    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}\r\n     3003    0.000    0.000    0.000    0.000 {built-in method builtins.id}\r\n      282    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\r\n       56    0.000    0.000    0.000    0.000 abc.py:117(__instancecheck__)\r\n       56    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\r\n   113/29    0.000    0.000    0.000    0.000 abc.py:121(__subclasscheck__)\r\n   113/29    0.000    0.000    0.000    0.000 {built-in method _abc._abc_subclasscheck}\r\n        1    0.000    0.000    0.000    0.000 ak_from_buffers.py:76(_impl)\r\n      3/1    0.000    0.000    0.000    0.000 ak_from_buffers.py:127(reconstitute)\r\n        1    0.000    0.000    0.000    0.000 form.py:181(from_json)\r\n        6    0.000    0.000    0.000    0.000 nplikes.py:930(nplike_of)\r\n        4    0.000    0.000    0.000    0.000 {built-in method builtins.all}\r\n        8    0.000    0.000    0.000    0.000 _errors.py:129(<genexpr>)\r\n      3/1    0.000    0.000    0.000    0.000 form.py:14(from_dict)\r\n        3    0.000    0.000    0.000    0.000 index.py:21(__init__)\r\n        3    0.000    0.000    0.000    0.000 arrayprint.py:1439(dtype_short_repr)\r\n        1    0.000    0.000    0.000    0.000 content.py:486(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 content.py:489(_getitem)\r\n       21    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1033(_handle_fromlist)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:218(_getitem_at)\r\n        3    0.000    0.000    0.000    0.000 _dtype.py:344(_name_get)\r\n        1    0.000    0.000    0.000    0.000 __init__.py:299(loads)\r\n      6/2    0.000    0.000    0.000    0.000 arrayprint.py:369(_leading_trailing)\r\n        1    0.000    0.000    0.000    0.000 numpyform.py:39(__init__)\r\n        3    0.000    0.000    0.000    0.000 index.py:165(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:229(_getitem_range)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:24(__enter__)\r\n        1    0.000    0.000    0.000    0.000 decoder.py:332(decode)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:890(is_own_array)\r\n       31    0.000    0.000    0.000    0.000 _util.py:83(isstr)\r\n        3    0.000    0.000    0.000    0.000 _dtype.py:330(_name_includes_bit_suffix)\r\n        3    0.000    0.000    0.000    0.000 listoffsetarray.py:44(__init__)\r\n        8    0.000    0.000    0.000    0.000 _errors.py:17(primary)\r\n       61    0.000    0.000    0.000    0.000 _collections_abc.py:262(__subclasshook__)\r\n        2    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(concatenate)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:741(is_own_array)\r\n        1    0.000    0.000    0.000    0.000 numpyarray.py:41(__init__)\r\n        3    0.000    0.000    0.000    0.000 numerictypes.py:356(issubdtype)\r\n       66    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:10(__init__)\r\n        6    0.000    0.000    0.000    0.000 {built-in method builtins.any}\r\n        3    0.000    0.000    0.000    0.000 ak_from_buffers.py:99(getkey)\r\n        3    0.000    0.000    0.000    0.000 nplikes.py:108(frombuffer)\r\n        1    0.000    0.000    0.000    0.000 decoder.py:343(raw_decode)\r\n        6    0.000    0.000    0.000    0.000 numerictypes.py:282(issubclass_)\r\n        2    0.000    0.000    0.000    0.000 numpytype.py:22(primitive_to_dtype)\r\n        3    0.000    0.000    0.000    0.000 form.py:278(_init)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:634(num)\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:97(asarray)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:31(__exit__)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:529(is_own_array)\r\n        2    0.000    0.000    0.000    0.000 numpytype.py:41(dtype_to_primitive)\r\n        4    0.000    0.000    0.000    0.000 content.py:28(_init)\r\n       25    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\r\n        6    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}\r\n        3    0.000    0.000    0.000    0.000 _util.py:71(isint)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:901(is_array)\r\n       10    0.000    0.000    0.000    0.000 _collections_abc.py:381(__subclasshook__)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:21(__init__)\r\n        3    0.000    0.000    0.000    0.000 {built-in method numpy.frombuffer}\r\n       21    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}\r\n        6    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\r\n        5    0.000    0.000    0.000    0.000 _typetracer.py:898(is_own_array)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:913(is_tracer)\r\n       22    0.000    0.000    0.000    0.000 _collections_abc.py:315(__subclasshook__)\r\n        4    0.000    0.000    0.000    0.000 index_tricks.py:758(__getitem__)\r\n       20    0.000    0.000    0.000    0.000 _collections_abc.py:409(__subclasshook__)\r\n        6    0.000    0.000    0.000    0.000 nplikes.py:16(instance)\r\n        7    0.000    0.000    0.000    0.000 index.py:104(length)\r\n        3    0.000    0.000    0.000    0.000 listoffsetarray.py:126(length)\r\n        8    0.000    0.000    0.000    0.000 nplikes.py:953(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 _collections_abc.py:78(_check_methods)\r\n        3    0.000    0.000    0.000    0.000 _dtype.py:24(_kind_name)\r\n        1    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}\r\n        1    0.000    0.000    0.000    0.000 _util.py:444(wrap)\r\n        3    0.000    0.000    0.000    0.000 form.py:312(parameters)\r\n        3    0.000    0.000    0.000    0.000 {method 'isalpha' of 'str' objects}\r\n        3    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}\r\n        3    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}\r\n        1    0.000    0.000    0.000    0.000 index.py:94(metadata)\r\n        1    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\r\n        4    0.000    0.000    0.000    0.000 index.py:86(nplike)\r\n        5    0.000    0.000    0.000    0.000 nplikes.py:468(index_nplike)\r\n        2    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}\r\n        2    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}\r\n        2    0.000    0.000    0.000    0.000 multiarray.py:148(concatenate)\r\n        3    0.000    0.000    0.000    0.000 form.py:356(form_key)\r\n        3    0.000    0.000    0.000    0.000 form.py:308(has_identifier)\r\n        1    0.000    0.000    0.000    0.000 content.py:648(_range_identifier)\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:26(offsets)\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:30(content)\r\n        1    0.000    0.000    0.000    0.000 content.py:672(axis_wrap_if_negative)\r\n        1    0.000    0.000    0.000    0.000 numpyform.py:63(primitive)\r\n        2    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\r\n        2    0.000    0.000    0.000    0.000 numpyform.py:67(inner_shape)\r\n        2    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}\r\n        2    0.000    0.000    0.000    0.000 content.py:77(nplike)\r\n        2    0.000    0.000    0.000    0.000 {built-in method builtins.next}\r\n```\r\n\r\n</details>\r\n\r\nWithout \"delay stringification until there's an error\":\r\n\r\n<details>\r\n  <summary>cProfile output</summary>\r\n\r\n```\r\n         11130553 function calls (10130504 primitive calls) in 4.668 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    4.668    4.668 {built-in method builtins.exec}\r\n        1    0.000    0.000    4.668    4.668 <string>:1(<module>)\r\n        1    0.000    0.000    4.668    4.668 ak_num.py:8(num)\r\n        1    0.000    0.000    2.822    2.822 ak_num.py:76(_impl)\r\n        1    0.000    0.000    2.822    2.822 ak_to_layout.py:12(to_layout)\r\n      2/1    0.000    0.000    2.822    2.822 ak_to_layout.py:48(_impl)\r\n        1    0.000    0.000    2.822    2.822 ak_from_iter.py:8(from_iter)\r\n        1    2.822    2.822    2.822    2.822 ak_from_iter.py:67(_impl)\r\n        4    0.000    0.000    1.846    0.461 _errors.py:128(__init__)\r\n        1    0.000    0.000    1.846    1.846 _errors.py:115(_string_arguments)\r\n        4    0.000    0.000    1.846    0.461 _errors.py:36(format_argument)\r\n        4    0.003    0.001    1.845    0.461 {built-in method builtins.repr}\r\n     1000    0.002    0.000    1.843    0.002 arrayprint.py:1467(_array_repr_implementation)\r\n     1000    0.002    0.000    1.840    0.002 arrayprint.py:561(array2string)\r\n     1000    0.001    0.000    1.836    0.002 arrayprint.py:506(wrapper)\r\n     1000    0.003    0.000    1.834    0.002 arrayprint.py:523(_array2string)\r\n     1000    0.001    0.000    1.815    0.002 arrayprint.py:780(_formatArray)\r\n1001000/1000    0.694    0.000    1.814    0.002 arrayprint.py:789(recurser)\r\n  1000000    0.324    0.000    0.931    0.000 arrayprint.py:753(_extendLine_pretty)\r\n  1000000    0.361    0.000    0.504    0.000 arrayprint.py:739(_extendLine)\r\n  6009018    0.217    0.000    0.217    0.000 {built-in method builtins.len}\r\n  1000000    0.150    0.000    0.150    0.000 arrayprint.py:1231(__call__)\r\n  1000000    0.064    0.000    0.064    0.000 {method 'splitlines' of 'str' objects}\r\n     1000    0.002    0.000    0.016    0.000 arrayprint.py:452(_get_format_function)\r\n     1000    0.000    0.000    0.013    0.000 arrayprint.py:410(<lambda>)\r\n     1000    0.003    0.000    0.013    0.000 arrayprint.py:1223(__init__)\r\n     2000    0.001    0.000    0.008    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\r\n     2000    0.002    0.000    0.006    0.000 fromnumeric.py:69(_wrapreduction)\r\n     1000    0.001    0.000    0.006    0.000 <__array_function__ internals>:177(amax)\r\n    77000    0.005    0.000    0.005    0.000 {method 'rstrip' of 'str' objects}\r\n     1000    0.001    0.000    0.005    0.000 fromnumeric.py:2677(amax)\r\n     2000    0.004    0.000    0.004    0.000 {method 'reduce' of 'numpy.ufunc' objects}\r\n     1000    0.000    0.000    0.004    0.000 <__array_function__ internals>:177(amin)\r\n     1000    0.001    0.000    0.003    0.000 fromnumeric.py:2802(amin)\r\n     1000    0.001    0.000    0.002    0.000 arrayprint.py:64(_make_options_dict)\r\n     1000    0.001    0.000    0.001    0.000 arrayprint.py:403(_get_formatdict)\r\n     1000    0.001    0.000    0.001    0.000 arrayprint.py:1403(dtype_is_implied)\r\n     1000    0.001    0.000    0.001    0.000 {built-in method builtins.locals}\r\n     2000    0.001    0.000    0.001    0.000 fromnumeric.py:70(<dictcomp>)\r\n     1000    0.001    0.000    0.001    0.000 arrayprint.py:72(<dictcomp>)\r\n     2000    0.000    0.000    0.000    0.000 {built-in method builtins.max}\r\n     1003    0.000    0.000    0.000    0.000 {method 'format' of 'str' objects}\r\n     3001    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}\r\n     3003    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\r\n     1001    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\r\n     1000    0.000    0.000    0.000    0.000 {method 'discard' of 'set' objects}\r\n     1000    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}\r\n     1002    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\r\n        1    0.000    0.000    0.000    0.000 ak_from_buffers.py:11(from_buffers)\r\n        1    0.000    0.000    0.000    0.000 ak_from_buffers.py:76(_impl)\r\n     1000    0.000    0.000    0.000    0.000 fromnumeric.py:2672(_amax_dispatcher)\r\n      3/1    0.000    0.000    0.000    0.000 ak_from_buffers.py:127(reconstitute)\r\n     1004    0.000    0.000    0.000    0.000 {built-in method numpy.asarray}\r\n     1000    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}\r\n     1000    0.000    0.000    0.000    0.000 fromnumeric.py:2797(_amin_dispatcher)\r\n     1000    0.000    0.000    0.000    0.000 {built-in method builtins.id}\r\n      119    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\r\n        1    0.000    0.000    0.000    0.000 form.py:181(from_json)\r\n       13    0.000    0.000    0.000    0.000 abc.py:117(__instancecheck__)\r\n       13    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\r\n    32/10    0.000    0.000    0.000    0.000 abc.py:121(__subclasscheck__)\r\n    32/10    0.000    0.000    0.000    0.000 {built-in method _abc._abc_subclasscheck}\r\n        3    0.000    0.000    0.000    0.000 index.py:21(__init__)\r\n      3/1    0.000    0.000    0.000    0.000 form.py:14(from_dict)\r\n        1    0.000    0.000    0.000    0.000 content.py:486(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 content.py:489(_getitem)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:218(_getitem_at)\r\n        3    0.000    0.000    0.000    0.000 nplikes.py:930(nplike_of)\r\n        1    0.000    0.000    0.000    0.000 __init__.py:299(loads)\r\n        3    0.000    0.000    0.000    0.000 index.py:165(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 numpyform.py:39(__init__)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:229(_getitem_range)\r\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.all}\r\n        2    0.000    0.000    0.000    0.000 _errors.py:129(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 decoder.py:332(decode)\r\n        3    0.000    0.000    0.000    0.000 listoffsetarray.py:44(__init__)\r\n       12    0.000    0.000    0.000    0.000 _errors.py:17(primary)\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:890(is_own_array)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:24(__enter__)\r\n        1    0.000    0.000    0.000    0.000 numpyarray.py:41(__init__)\r\n        3    0.000    0.000    0.000    0.000 nplikes.py:108(frombuffer)\r\n        3    0.000    0.000    0.000    0.000 ak_from_buffers.py:99(getkey)\r\n        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1033(_handle_fromlist)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:634(num)\r\n       25    0.000    0.000    0.000    0.000 _collections_abc.py:262(__subclasshook__)\r\n        1    0.000    0.000    0.000    0.000 decoder.py:343(raw_decode)\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:97(asarray)\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:10(__init__)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:31(__exit__)\r\n       14    0.000    0.000    0.000    0.000 _util.py:83(isstr)\r\n        3    0.000    0.000    0.000    0.000 form.py:278(_init)\r\n        3    0.000    0.000    0.000    0.000 _util.py:71(isint)\r\n        2    0.000    0.000    0.000    0.000 numpytype.py:22(primitive_to_dtype)\r\n        4    0.000    0.000    0.000    0.000 content.py:28(_init)\r\n        2    0.000    0.000    0.000    0.000 numpytype.py:41(dtype_to_primitive)\r\n        3    0.000    0.000    0.000    0.000 {built-in method builtins.any}\r\n        3    0.000    0.000    0.000    0.000 {built-in method numpy.frombuffer}\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:741(is_own_array)\r\n        6    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}\r\n       29    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\r\n       15    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:901(is_array)\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:529(is_own_array)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:21(__init__)\r\n        1    0.000    0.000    0.000    0.000 _collections_abc.py:78(_check_methods)\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:913(is_tracer)\r\n        5    0.000    0.000    0.000    0.000 nplikes.py:953(<genexpr>)\r\n        3    0.000    0.000    0.000    0.000 listoffsetarray.py:126(length)\r\n        7    0.000    0.000    0.000    0.000 index.py:104(length)\r\n       12    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}\r\n        1    0.000    0.000    0.000    0.000 _util.py:444(wrap)\r\n        1    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}\r\n        3    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\r\n        2    0.000    0.000    0.000    0.000 _typetracer.py:898(is_own_array)\r\n        3    0.000    0.000    0.000    0.000 nplikes.py:16(instance)\r\n        4    0.000    0.000    0.000    0.000 _collections_abc.py:381(__subclasshook__)\r\n        3    0.000    0.000    0.000    0.000 form.py:312(parameters)\r\n        1    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\r\n        4    0.000    0.000    0.000    0.000 index.py:86(nplike)\r\n        5    0.000    0.000    0.000    0.000 nplikes.py:468(index_nplike)\r\n        2    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 index.py:94(metadata)\r\n        2    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}\r\n        3    0.000    0.000    0.000    0.000 _collections_abc.py:315(__subclasshook__)\r\n        3    0.000    0.000    0.000    0.000 form.py:356(form_key)\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:26(offsets)\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n        3    0.000    0.000    0.000    0.000 form.py:308(has_identifier)\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:30(content)\r\n        1    0.000    0.000    0.000    0.000 content.py:672(axis_wrap_if_negative)\r\n        2    0.000    0.000    0.000    0.000 {built-in method builtins.next}\r\n        2    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}\r\n        2    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\r\n        2    0.000    0.000    0.000    0.000 content.py:77(nplike)\r\n        1    0.000    0.000    0.000    0.000 content.py:648(_range_identifier)\r\n        1    0.000    0.000    0.000    0.000 numpyform.py:63(primitive)\r\n        2    0.000    0.000    0.000    0.000 numpyform.py:67(inner_shape)\r\n```\r\n\r\n</details>\r\n\r\nWhat this PR provides (all optimizations in):\r\n\r\n<details>\r\n  <summary>cProfile output</summary>\r\n\r\n```\r\n         444 function calls (429 primitive calls) in 2.931 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    2.931    2.931 {built-in method builtins.exec}\r\n        1    0.000    0.000    2.931    2.931 <string>:1(<module>)\r\n        1    0.000    0.000    2.931    2.931 ak_num.py:8(num)\r\n        1    0.000    0.000    2.931    2.931 ak_num.py:76(_impl)\r\n        1    0.000    0.000    2.931    2.931 ak_to_layout.py:12(to_layout)\r\n      2/1    0.000    0.000    2.931    2.931 ak_to_layout.py:48(_impl)\r\n        1    0.000    0.000    2.931    2.931 ak_from_iter.py:8(from_iter)\r\n        1    2.930    2.930    2.931    2.931 ak_from_iter.py:67(_impl)\r\n        1    0.000    0.000    0.000    0.000 ak_from_buffers.py:11(from_buffers)\r\n        1    0.000    0.000    0.000    0.000 ak_from_buffers.py:76(_impl)\r\n      3/1    0.000    0.000    0.000    0.000 ak_from_buffers.py:127(reconstitute)\r\n        1    0.000    0.000    0.000    0.000 form.py:181(from_json)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:128(__init__)\r\n        6    0.000    0.000    0.000    0.000 nplikes.py:930(nplike_of)\r\n        3    0.000    0.000    0.000    0.000 index.py:21(__init__)\r\n      3/1    0.000    0.000    0.000    0.000 form.py:14(from_dict)\r\n        1    0.000    0.000    0.000    0.000 content.py:486(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 content.py:489(_getitem)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:218(_getitem_at)\r\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.all}\r\n       91    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\r\n        5    0.000    0.000    0.000    0.000 _errors.py:129(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 __init__.py:299(loads)\r\n        4    0.000    0.000    0.000    0.000 abc.py:117(__instancecheck__)\r\n        3    0.000    0.000    0.000    0.000 index.py:165(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 numpyform.py:39(__init__)\r\n        4    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:229(_getitem_range)\r\n        1    0.000    0.000    0.000    0.000 decoder.py:332(decode)\r\n      8/3    0.000    0.000    0.000    0.000 abc.py:121(__subclasscheck__)\r\n      8/3    0.000    0.000    0.000    0.000 {built-in method _abc._abc_subclasscheck}\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:890(is_own_array)\r\n        3    0.000    0.000    0.000    0.000 listoffsetarray.py:44(__init__)\r\n       12    0.000    0.000    0.000    0.000 _errors.py:17(primary)\r\n        1    0.000    0.000    0.000    0.000 numpyarray.py:41(__init__)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:634(num)\r\n        3    0.000    0.000    0.000    0.000 ak_from_buffers.py:99(getkey)\r\n        3    0.000    0.000    0.000    0.000 nplikes.py:108(frombuffer)\r\n        1    0.000    0.000    0.000    0.000 decoder.py:343(raw_decode)\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:97(asarray)\r\n        2    0.000    0.000    0.000    0.000 numpytype.py:41(dtype_to_primitive)\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:10(__init__)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:24(__enter__)\r\n        6    0.000    0.000    0.000    0.000 {built-in method builtins.any}\r\n        4    0.000    0.000    0.000    0.000 _errors.py:31(__exit__)\r\n        3    0.000    0.000    0.000    0.000 form.py:278(_init)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:741(is_own_array)\r\n        3    0.000    0.000    0.000    0.000 _util.py:71(isint)\r\n        4    0.000    0.000    0.000    0.000 content.py:28(_init)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:901(is_array)\r\n        3    0.000    0.000    0.000    0.000 {built-in method numpy.frombuffer}\r\n        2    0.000    0.000    0.000    0.000 numpytype.py:22(primitive_to_dtype)\r\n       29    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:529(is_own_array)\r\n        4    0.000    0.000    0.000    0.000 {built-in method numpy.asarray}\r\n       10    0.000    0.000    0.000    0.000 _util.py:83(isstr)\r\n        3    0.000    0.000    0.000    0.000 {method 'format' of 'str' objects}\r\n        6    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}\r\n        7    0.000    0.000    0.000    0.000 _collections_abc.py:262(__subclasshook__)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:913(is_tracer)\r\n       21    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}\r\n        8    0.000    0.000    0.000    0.000 nplikes.py:953(<genexpr>)\r\n        7    0.000    0.000    0.000    0.000 index.py:104(length)\r\n        3    0.000    0.000    0.000    0.000 listoffsetarray.py:126(length)\r\n        3    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\r\n        4    0.000    0.000    0.000    0.000 _errors.py:21(__init__)\r\n       12    0.000    0.000    0.000    0.000 {built-in method builtins.len}\r\n        1    0.000    0.000    0.000    0.000 _util.py:444(wrap)\r\n        5    0.000    0.000    0.000    0.000 _typetracer.py:898(is_own_array)\r\n        1    0.000    0.000    0.000    0.000 _collections_abc.py:78(_check_methods)\r\n        6    0.000    0.000    0.000    0.000 nplikes.py:16(instance)\r\n        1    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}\r\n        6    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\r\n        3    0.000    0.000    0.000    0.000 form.py:312(parameters)\r\n        2    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\r\n        1    0.000    0.000    0.000    0.000 index.py:94(metadata)\r\n        4    0.000    0.000    0.000    0.000 index.py:86(nplike)\r\n        3    0.000    0.000    0.000    0.000 form.py:308(has_identifier)\r\n        2    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\r\n        5    0.000    0.000    0.000    0.000 nplikes.py:468(index_nplike)\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\r\n        2    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:26(offsets)\r\n        1    0.000    0.000    0.000    0.000 content.py:672(axis_wrap_if_negative)\r\n        1    0.000    0.000    0.000    0.000 _collections_abc.py:381(__subclasshook__)\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:30(content)\r\n        3    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\r\n        3    0.000    0.000    0.000    0.000 form.py:356(form_key)\r\n        2    0.000    0.000    0.000    0.000 {built-in method builtins.next}\r\n        2    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\r\n        1    0.000    0.000    0.000    0.000 content.py:648(_range_identifier)\r\n        2    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}\r\n        2    0.000    0.000    0.000    0.000 content.py:77(nplike)\r\n        2    0.000    0.000    0.000    0.000 numpyform.py:67(inner_shape)\r\n        1    0.000    0.000    0.000    0.000 numpyform.py:63(primitive)\r\n```\r\n\r\n</details>\r\n\r\nSo there's a factor of 2 from not creating strings when they'll be ignored because there's already an ErrorContext, and then there's another drop-off from not creating strings at all because the CPU execution is eager.\r\n\r\nThe remaining 2.931 seconds is from the ArrayBuilder in `from_iter`, since a list of NumPy arrays is (from Awkward's perspective) a generic sequence to be iterated over, and this one has a million elements.",
  "created_at":"2022-10-24T22:56:31Z",
  "id":1289734633,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M38np",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-24T22:56:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1825?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1825](https://codecov.io/gh/scikit-hep/awkward/pull/1825?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7a19bf8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7615a28bf8783eb6a3e43652bb0d226034ab79ad?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7615a28) will **decrease** coverage by `0.47%`.\n> The diff coverage is `93.02%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1825?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_errors.py](https://codecov.io/gh/scikit-hep/awkward/pull/1825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Vycm9ycy5weQ==) | `77.00% <92.68%> (-9.36%)` | :arrow_down: |\n| [src/awkward/nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnBsaWtlcy5weQ==) | `66.73% <100.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `66.07% <0.00%> (-5.36%)` | :arrow_down: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `67.38% <0.00%> (-4.30%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.77% <0.00%> (-2.89%)` | :arrow_down: |\n| [src/awkward/types/recordtype.py](https://codecov.io/gh/scikit-hep/awkward/pull/1825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvcmVjb3JkdHlwZS5weQ==) | `84.07% <0.00%> (-2.66%)` | :arrow_down: |\n| [src/awkward/forms/indexedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZGZvcm0ucHk=) | `89.61% <0.00%> (-2.60%)` | :arrow_down: |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `89.33% <0.00%> (-2.56%)` | :arrow_down: |\n| [src/awkward/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward/pull/1825/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3ByZXR0eXByaW50LnB5) | `69.30% <0.00%> (-2.48%)` | :arrow_down: |\n| ... and [12 more](https://codecov.io/gh/scikit-hep/awkward/pull/1825/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-24T23:14:32Z",
  "id":1289765490,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M4EJy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T20:00:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77, I think this is done. With an approval from you, it can be merged. Let me know if anything looks amiss.",
  "created_at":"2022-10-25T18:31:17Z",
  "id":1290978865,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M8sYx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T18:31:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski let me know if you're happy with my changes. If so, let's merge!",
  "created_at":"2022-10-25T19:48:55Z",
  "id":1291057432,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M8_kY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T19:48:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"On d6f511ba3d8daa4eb6d21b63b53c5adc9c67122a, we should perhaps swap all uses of `isstr(x)` with `isinstance(x, str)`, in both Uproot and Awkward, since that's a relic of Python 2.\r\n\r\nOn 3f69bc2fc9f5621861d77bdadc378312e6aedc3b, that does make the intention more clear. I like it!\r\n\r\nSure, I'll set this to auto-merge.",
  "created_at":"2022-10-25T19:51:50Z",
  "id":1291060573,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M9AVd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T19:51:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, for formality, can you click the Approve button?",
  "created_at":"2022-10-25T19:52:34Z",
  "id":1291061319,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M9AhH",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-25T19:52:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> On https://github.com/scikit-hep/awkward/commit/d6f511ba3d8daa4eb6d21b63b53c5adc9c67122a, we should perhaps swap all uses of isstr(x) with isinstance(x, str), in both Uproot and Awkward, since that's a relic of Python 2.\r\n\r\nYes, I think I introduced the helper function at one point, and then recalled that we've recently agreed on removing it as we go.",
  "created_at":"2022-10-25T19:54:16Z",
  "id":1291063318,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M9BAW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T19:54:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Re-ran profile of\r\n\r\n```python\r\nimport awkward as ak, numpy as np, cProfile\r\narray = [np.arange(1000) for _ in range(1000)]\r\ncProfile.run(\"ak.num(array, axis=0)\", sort=\"cumtime\")\r\n```\r\n\r\nand it's still 2.9 seconds (best time). Nothing broke the timing. (In fact, it's a little better.)\r\n\r\n```\r\n         448 function calls (433 primitive calls) in 2.811 seconds\r\n\r\n   Ordered by: cumulative time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    2.811    2.811 {built-in method builtins.exec}\r\n        1    0.000    0.000    2.811    2.811 <string>:1(<module>)\r\n        1    0.000    0.000    2.811    2.811 ak_num.py:8(num)\r\n        1    0.000    0.000    2.811    2.811 ak_num.py:76(_impl)\r\n        1    0.000    0.000    2.811    2.811 ak_to_layout.py:12(to_layout)\r\n      2/1    0.000    0.000    2.811    2.811 ak_to_layout.py:48(_impl)\r\n        1    0.000    0.000    2.811    2.811 ak_from_iter.py:8(from_iter)\r\n        1    2.810    2.810    2.810    2.810 ak_from_iter.py:67(_impl)\r\n        1    0.000    0.000    0.000    0.000 ak_from_buffers.py:11(from_buffers)\r\n        1    0.000    0.000    0.000    0.000 ak_from_buffers.py:76(_impl)\r\n      3/1    0.000    0.000    0.000    0.000 ak_from_buffers.py:127(reconstitute)\r\n        1    0.000    0.000    0.000    0.000 form.py:181(from_json)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:129(__init__)\r\n        3    0.000    0.000    0.000    0.000 index.py:21(__init__)\r\n        6    0.000    0.000    0.000    0.000 nplikes.py:930(nplike_of)\r\n      3/1    0.000    0.000    0.000    0.000 form.py:14(from_dict)\r\n        1    0.000    0.000    0.000    0.000 content.py:486(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 content.py:489(_getitem)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:218(_getitem_at)\r\n       91    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\r\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.all}\r\n        5    0.000    0.000    0.000    0.000 _errors.py:130(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 __init__.py:299(loads)\r\n        4    0.000    0.000    0.000    0.000 abc.py:117(__instancecheck__)\r\n        1    0.000    0.000    0.000    0.000 numpyform.py:39(__init__)\r\n        3    0.000    0.000    0.000    0.000 index.py:165(__getitem__)\r\n        4    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:229(_getitem_range)\r\n        1    0.000    0.000    0.000    0.000 decoder.py:332(decode)\r\n      8/3    0.000    0.000    0.000    0.000 abc.py:121(__subclasscheck__)\r\n      8/3    0.000    0.000    0.000    0.000 {built-in method _abc._abc_subclasscheck}\r\n        3    0.000    0.000    0.000    0.000 listoffsetarray.py:44(__init__)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:890(is_own_array)\r\n       12    0.000    0.000    0.000    0.000 _errors.py:31(primary)\r\n        1    0.000    0.000    0.000    0.000 listoffsetarray.py:634(num)\r\n        4    0.000    0.000    0.000    0.000 nplikes.py:97(asarray)\r\n        3    0.000    0.000    0.000    0.000 nplikes.py:108(frombuffer)\r\n        3    0.000    0.000    0.000    0.000 ak_from_buffers.py:99(getkey)\r\n        1    0.000    0.000    0.000    0.000 numpyarray.py:41(__init__)\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:10(__init__)\r\n        1    0.000    0.000    0.000    0.000 decoder.py:343(raw_decode)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:741(is_own_array)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:45(__exit__)\r\n        6    0.000    0.000    0.000    0.000 {built-in method builtins.any}\r\n        4    0.000    0.000    0.000    0.000 _errors.py:38(__enter__)\r\n        3    0.000    0.000    0.000    0.000 _util.py:71(isint)\r\n        2    0.000    0.000    0.000    0.000 numpytype.py:41(dtype_to_primitive)\r\n        2    0.000    0.000    0.000    0.000 numpytype.py:22(primitive_to_dtype)\r\n        3    0.000    0.000    0.000    0.000 form.py:278(_init)\r\n        6    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}\r\n        3    0.000    0.000    0.000    0.000 {built-in method numpy.frombuffer}\r\n        4    0.000    0.000    0.000    0.000 content.py:28(_init)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:901(is_array)\r\n        4    0.000    0.000    0.000    0.000 {built-in method numpy.asarray}\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:529(is_own_array)\r\n       29    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\r\n        3    0.000    0.000    0.000    0.000 {method 'format' of 'str' objects}\r\n       10    0.000    0.000    0.000    0.000 _util.py:83(isstr)\r\n        7    0.000    0.000    0.000    0.000 _collections_abc.py:262(__subclasshook__)\r\n        8    0.000    0.000    0.000    0.000 nplikes.py:953(<genexpr>)\r\n        3    0.000    0.000    0.000    0.000 listoffsetarray.py:126(length)\r\n        7    0.000    0.000    0.000    0.000 index.py:104(length)\r\n        4    0.000    0.000    0.000    0.000 _errors.py:18(__init__)\r\n        7    0.000    0.000    0.000    0.000 nplikes.py:913(is_tracer)\r\n       21    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}\r\n        1    0.000    0.000    0.000    0.000 _util.py:444(wrap)\r\n        3    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\r\n        4    0.000    0.000    0.000    0.000 _errors.py:35(__init__)\r\n       12    0.000    0.000    0.000    0.000 {built-in method builtins.len}\r\n        1    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}\r\n        5    0.000    0.000    0.000    0.000 _typetracer.py:898(is_own_array)\r\n        6    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\r\n        1    0.000    0.000    0.000    0.000 _collections_abc.py:78(_check_methods)\r\n        6    0.000    0.000    0.000    0.000 nplikes.py:16(instance)\r\n        3    0.000    0.000    0.000    0.000 form.py:312(parameters)\r\n        1    0.000    0.000    0.000    0.000 index.py:94(metadata)\r\n        1    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\r\n        3    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\r\n        2    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}\r\n        4    0.000    0.000    0.000    0.000 index.py:86(nplike)\r\n        5    0.000    0.000    0.000    0.000 nplikes.py:468(index_nplike)\r\n        2    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:30(content)\r\n        3    0.000    0.000    0.000    0.000 form.py:356(form_key)\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n        2    0.000    0.000    0.000    0.000 listoffsetform.py:26(offsets)\r\n        2    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\r\n        2    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}\r\n        3    0.000    0.000    0.000    0.000 form.py:308(has_identifier)\r\n        2    0.000    0.000    0.000    0.000 {built-in method builtins.next}\r\n        1    0.000    0.000    0.000    0.000 content.py:672(axis_wrap_if_negative)\r\n        2    0.000    0.000    0.000    0.000 content.py:77(nplike)\r\n        1    0.000    0.000    0.000    0.000 content.py:648(_range_identifier)\r\n        2    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\r\n        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 _collections_abc.py:381(__subclasshook__)\r\n        2    0.000    0.000    0.000    0.000 numpyform.py:67(inner_shape)\r\n        1    0.000    0.000    0.000    0.000 numpyform.py:63(primitive)\r\n```",
  "created_at":"2022-10-25T20:01:59Z",
  "id":1291071264,
  "issue":1825,
  "node_id":"IC_kwDODBCWws5M9C8g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T20:01:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1826?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1826](https://codecov.io/gh/scikit-hep/awkward/pull/1826?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eddfa86) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7615a28bf8783eb6a3e43652bb0d226034ab79ad?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7615a28) will **decrease** coverage by `0.18%`.\n> The diff coverage is `64.86%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1826?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `70.67% <0.00%> (-0.76%)` | :arrow_down: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `87.37% <0.00%> (-0.67%)` | :arrow_down: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `70.76% <0.00%> (-0.92%)` | :arrow_down: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.14% <\u00f8> (+0.26%)` | :arrow_up: |\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `80.13% <50.00%> (-0.41%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <100.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.96% <100.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `90.05% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `96.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `96.00% <100.00%> (\u00f8)` | |\n| ... and [19 more](https://codecov.io/gh/scikit-hep/awkward/pull/1826/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-24T20:18:36Z",
  "id":1289562655,
  "issue":1826,
  "node_id":"IC_kwDODBCWws5M3Sof",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T20:06:09Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm glad you caught that - yes, I do have tests, but they've not been pushed. Fixing...",
  "created_at":"2022-10-25T19:43:08Z",
  "id":1291051044,
  "issue":1826,
  "node_id":"IC_kwDODBCWws5M8-Ak",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T19:43:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1827?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1827](https://codecov.io/gh/scikit-hep/awkward/pull/1827?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (607132b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2bdd11426b83ff52c6a3ecad4c64d1841663e9f9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2bdd114) will **decrease** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1827?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1827/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3JlZHVjZXJzLnB5) | `98.31% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1827/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.46% <0.00%> (-0.20%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1827/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1827/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1827/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1827/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1827/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1827/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-24T21:27:55Z",
  "id":1289639621,
  "issue":1827,
  "node_id":"IC_kwDODBCWws5M3lbF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T06:22:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1829?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1829](https://codecov.io/gh/scikit-hep/awkward/pull/1829?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (62505a1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/61717aa4d68e55bf791d54c858f4db1d28438bf9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (61717aa) will **decrease** coverage by `0.00%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1829?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.46% <0.00%> (-0.20%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1829/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-25T08:27:52Z",
  "id":1290180933,
  "issue":1829,
  "node_id":"IC_kwDODBCWws5M5plF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T18:48:38Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1830?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1830](https://codecov.io/gh/scikit-hep/awkward/pull/1830?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (37ff8be) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2bdd11426b83ff52c6a3ecad4c64d1841663e9f9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2bdd114) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1830?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1830/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `94.87% <100.00%> (+5.12%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1830/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.46% <0.00%> (-0.20%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1830/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1830/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1830/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1830/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1830/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.94% <0.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1830/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-25T10:37:59Z",
  "id":1290339407,
  "issue":1830,
  "node_id":"IC_kwDODBCWws5M6QRP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T10:37:59Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1831?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1831](https://codecov.io/gh/scikit-hep/awkward/pull/1831?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2d500fb) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2bdd11426b83ff52c6a3ecad4c64d1841663e9f9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2bdd114) will **increase** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1831?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1831/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.46% <0.00%> (-0.20%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1831/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1831/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1831/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1831/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1831/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1831/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3JlZHVjZXJzLnB5) | `98.31% <0.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1831/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.94% <0.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1831/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1831/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `94.87% <0.00%> (+5.12%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-25T12:14:58Z",
  "id":1290449524,
  "issue":1831,
  "node_id":"IC_kwDODBCWws5M6rJ0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T19:36:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1832?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1832](https://codecov.io/gh/scikit-hep/awkward/pull/1832?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5c5f330) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2bdd11426b83ff52c6a3ecad4c64d1841663e9f9?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2bdd114) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1832?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1832/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `79.46% <0.00%> (-0.20%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1832/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.72% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1832/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.36% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1832/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1832/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1832/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1832/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-25T12:53:20Z",
  "id":1290507505,
  "issue":1832,
  "node_id":"IC_kwDODBCWws5M65Tx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T17:14:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes! That works perfectly! (I'm very surprised that it was possible.) It looks great on my phone, though [this one](http://mobiletest.me/iphone_5_emulator/?u=https://awkward-array.readthedocs.io/en/agoose77-docs-badges-margin/getting-started/try-awkward-array.html) (and smaller) would benefit from minimizing the page title:\r\n\r\n* \"Try it in your browser\" \u2192 \"Try it!\"\r\n\r\nThe fact that it runs in the browser, amazing as that is, doesn't matter to many users. Reducing the title to two words would make it fit on nearly all screens.\r\n\r\nPhones use a significant amount of space on the bottom of the screen for \"< Previous\", \"Next >\", and the copyright message, but _this is okay_ because that space gets used up by the keyboard when you try to edit any of the code. It adjusts better between yes-keyboard and no-keyboard, which is important, since you lose the keyboard when you press \u25b8. So RetroLite not filling the bottom of the screen is not a problem, while RetroLite not filling the top of the screen is a problem that can be solved by minimizing the title.",
  "created_at":"2022-10-25T16:57:34Z",
  "id":1290866590,
  "issue":1832,
  "node_id":"IC_kwDODBCWws5M8Q-e",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-25T16:57:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Checkmark to 5c5f330224780b770c1c808ee078a88900304961!",
  "created_at":"2022-10-25T17:07:52Z",
  "id":1290878264,
  "issue":1832,
  "node_id":"IC_kwDODBCWws5M8T04",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-10-25T17:07:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is probably something we should fix, as it is a high-level function. I've made a PR #1835 ",
  "created_at":"2022-10-26T08:26:03Z",
  "id":1291675536,
  "issue":1834,
  "node_id":"IC_kwDODBCWws5M_WeQ",
  "performed_via_github_app":null,
  "reactions":{
   "heart":1,
   "total_count":1
  },
  "updated_at":"2022-10-26T08:26:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1835?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1835](https://codecov.io/gh/scikit-hep/awkward/pull/1835?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (da4aa8e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/cf26ac02a93480f1b787a682d6ead8e8d63eae9f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cf26ac0) will **decrease** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1835?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1835/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.14% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1835/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.77% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1835/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.94% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1835/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.15% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1835/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.96% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1835/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1835/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1835/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-26T08:33:33Z",
  "id":1291687344,
  "issue":1835,
  "node_id":"IC_kwDODBCWws5M_ZWw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-26T08:33:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1836?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1836](https://codecov.io/gh/scikit-hep/awkward/pull/1836?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (08a9515) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/fec5eee98c32a0b04e1f90fa02fd151145c7270d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fec5eee) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1836?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1836/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1836/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1836/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1836/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1836/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1836/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-10-26T08:55:47Z",
  "id":1291715808,
  "issue":1836,
  "node_id":"IC_kwDODBCWws5M_gTg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T15:10:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hey @ianna, I hope to get the C++ dependency management implemented in #1837. Once that's in, you should be able to add ROOT as a dependency for the docs.",
  "created_at":"2022-10-26T09:35:20Z",
  "id":1291765058,
  "issue":1836,
  "node_id":"IC_kwDODBCWws5M_sVC",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-26T09:35:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I've touched this PR, so it would be best if you were the reviewer.\r\n\r\nI've switched the CI from `xeus-cling` to `root` as our C++ kernel provider (in addition to the PyROOT integration for this PR). I'm re-using the same environment spec for wheel building and consumption to mitigate the fact that we don't build a manylinux wheel. ",
  "created_at":"2022-10-29T11:42:21Z",
  "id":1295811475,
  "issue":1836,
  "node_id":"IC_kwDODBCWws5NPIOT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-29T11:42:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1837?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1837](https://codecov.io/gh/scikit-hep/awkward/pull/1837?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f463070) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/cf26ac02a93480f1b787a682d6ead8e8d63eae9f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cf26ac0) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1837?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.77% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.94% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.15% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.96% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1837/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-26T09:47:24Z",
  "id":1291778270,
  "issue":1837,
  "node_id":"IC_kwDODBCWws5M_vje",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T07:58:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I forgot, this isn't yet ready for review. I need to remove cog, and switch to Conda entirely.",
  "created_at":"2022-10-26T18:54:59Z",
  "id":1292468285,
  "issue":1837,
  "node_id":"IC_kwDODBCWws5NCYA9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-26T18:54:59Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I reverted the commit that goes all-in on mamba; we don't want to run mamba on RTD, which will doesn't cache the solve (IIRC). RTD doesn't need it, either; all notebooks are executed on GHA.",
  "created_at":"2022-10-26T19:20:58Z",
  "id":1292520746,
  "issue":1837,
  "node_id":"IC_kwDODBCWws5NCk0q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-26T19:20:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks Henry! This looks good to me, setting to auto merge.",
  "created_at":"2022-10-26T14:53:40Z",
  "id":1292176727,
  "issue":1838,
  "node_id":"IC_kwDODBCWws5NBQ1X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-26T14:53:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1838?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1838](https://codecov.io/gh/scikit-hep/awkward/pull/1838?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3c6faa6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/1f06da822d3729067f27775122e688bf7793d03d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1f06da8) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1838?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1838/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.77% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1838/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.94% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1838/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.15% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1838/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.96% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1838/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1838/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1838/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-26T15:11:25Z",
  "id":1292200761,
  "issue":1838,
  "node_id":"IC_kwDODBCWws5NBWs5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-26T15:11:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The required tests are the old dev tests, so this has passed.",
  "created_at":"2022-10-26T18:53:21Z",
  "id":1292464763,
  "issue":1838,
  "node_id":"IC_kwDODBCWws5NCXJ7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-26T18:53:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Here's where it can go: in awkward/operations/ak_type.py, there's a case-catcher for\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/c0336973a8bacbbc86438aa69ef4c1bd48186c8b/src/awkward/operations/ak_type.py#L67-L73\r\n\r\nThe keys of that dict are actual `np.dtype` objects, but you want the `type` instances, which are obtained via `some_dtype_object.type`.\r\n\r\nThey can be identified as\r\n\r\n```python\r\nisinstance(array, type) and issubclass(array, np.generic)\r\n```",
  "created_at":"2022-10-26T22:10:22Z",
  "id":1292713446,
  "issue":1840,
  "node_id":"IC_kwDODBCWws5NDT3m",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-26T22:10:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Wouldn't this be fixed instead by asking for `array.dtype` instead of `array.dtype.type` (which gives the class as opposed to the dtype). Here: https://github.com/scikit-hep/awkward/blob/main/src/awkward/operations/ak_type.py#L99\r\n\r\n?\r\n",
  "created_at":"2022-10-26T22:26:15Z",
  "id":1292730603,
  "issue":1840,
  "node_id":"IC_kwDODBCWws5NDYDr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-26T22:32:30Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for this @lgray. We should be testing the comprehensive `dtype` here rather than the underlying type. ",
  "created_at":"2022-10-27T06:10:08Z",
  "id":1293040328,
  "issue":1840,
  "node_id":"IC_kwDODBCWws5NEjrI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T06:10:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1841?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1841](https://codecov.io/gh/scikit-hep/awkward/pull/1841?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (678aed9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c0336973a8bacbbc86438aa69ef4c1bd48186c8b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c033697) will **increase** coverage by `0.02%`.\n> The diff coverage is `81.25%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1841?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/1841/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190eXBlLnB5) | `73.91% <81.25%> (+18.64%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1841/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.77% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1841/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.94% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1841/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.15% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1841/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.96% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1841/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1841/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1841/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-26T22:37:32Z",
  "id":1292738955,
  "issue":1841,
  "node_id":"IC_kwDODBCWws5NDaGL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T20:30:40Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Would you be able to add a `test_1840-type-numpy-array.py` to `tests/` containing the following:\r\n```python3\r\n# BSD 3-Clause License; see https://github.com/scikit-hep/awkward-1.0/blob/main/LICENSE\r\n\r\nimport numpy as np  # noqa: F401\r\nimport pytest  # noqa: F401\r\n\r\nimport awkward as ak  # noqa: F401\r\n\r\n\r\ndef test():\r\n    array = np.random.random(size=512).astype(dtype=np.float64)\r\n    assert ak.type(array) == ak.types.ArrayType(\r\n        ak.types.NumpyType(\"float64\"), 512\r\n    )\r\n```",
  "created_at":"2022-10-27T06:10:45Z",
  "id":1293040809,
  "issue":1841,
  "node_id":"IC_kwDODBCWws5NEjyp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T06:10:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Sure! Just a bit.",
  "created_at":"2022-10-27T14:10:39Z",
  "id":1293584990,
  "issue":1841,
  "node_id":"IC_kwDODBCWws5NGope",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T14:10:39Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm working on fixes to this, but I'm in a meeting now, so that's paused.",
  "created_at":"2022-10-27T14:17:50Z",
  "id":1293595245,
  "issue":1841,
  "node_id":"IC_kwDODBCWws5NGrJt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T14:17:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"(Do not merge!)",
  "created_at":"2022-10-27T14:18:15Z",
  "id":1293595820,
  "issue":1841,
  "node_id":"IC_kwDODBCWws5NGrSs",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-27T14:18:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Weirdly enough, I was actually looking at this code for another issue when I noticed that we have a `dtype_to_primitive` function that we can use here.",
  "created_at":"2022-10-27T14:20:07Z",
  "id":1293598447,
  "issue":1841,
  "node_id":"IC_kwDODBCWws5NGr7v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T14:20:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I got the 10 minutes to do this, and now realize that I had misunderstood the original issue #1840. I thought it was about making `ak.type(np.float64)` work, but it had been more broken than that: `ak.type(np.array([1, 2, 3]))` didn't work.\r\n\r\nWell, all of these cases work now. Since it's doubly approved, I'll reenable auto-merge.",
  "created_at":"2022-10-27T14:51:11Z",
  "id":1293643589,
  "issue":1841,
  "node_id":"IC_kwDODBCWws5NG29F",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T14:51:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've held this from merging, as we probably want to use `numpytype.dtype_to_primitive` - but we might need to do more with respect to the loop that checks for membership in the type dictionary. We could use a `try/except`, but perhaps there's a more elegant way of writing this code.",
  "created_at":"2022-10-27T15:04:49Z",
  "id":1293664795,
  "issue":1841,
  "node_id":"IC_kwDODBCWws5NG8Ib",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T15:04:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I think this is done now; I'm reenabling auto-merge.",
  "created_at":"2022-10-27T20:21:44Z",
  "id":1294022183,
  "issue":1841,
  "node_id":"IC_kwDODBCWws5NITYn",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-27T20:21:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1844?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1844](https://codecov.io/gh/scikit-hep/awkward/pull/1844?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2d223ff) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c0336973a8bacbbc86438aa69ef4c1bd48186c8b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c033697) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1844?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1844/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.77% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1844/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.94% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1844/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.15% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1844/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.96% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1844/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1844/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1844/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `77.31% <0.00%> (+0.10%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-10-27T17:38:01Z",
  "id":1293857026,
  "issue":1844,
  "node_id":"IC_kwDODBCWws5NHrEC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-27T17:41:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"It's failing when trying to edit the PR description, possibly because I changed the PR title. (I haven't looked into how it works.) I'm going to ignore that and merge anyway.",
  "created_at":"2022-10-28T20:42:29Z",
  "id":1295446255,
  "issue":1844,
  "node_id":"IC_kwDODBCWws5NNvDv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T20:42:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1845?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1845](https://codecov.io/gh/scikit-hep/awkward/pull/1845?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e2008d8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/6b5d46e37633ed7af64627f8be0111f1c7fb2f15?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6b5d46e) will **increase** coverage by `0.10%`.\n> The diff coverage is `93.95%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1845?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `97.05% <\u00f8> (-0.09%)` | :arrow_down: |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `88.46% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.15% <\u00f8> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_v2.py](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zaW5nbGV0b25zLnB5) | `96.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_with\\_name.py](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX25hbWUucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5pb25mb3JtLnB5) | `79.67% <50.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.28% <57.14%> (+0.23%)` | :arrow_up: |\n| ... and [38 more](https://codecov.io/gh/scikit-hep/awkward/pull/1845/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-28T20:41:41Z",
  "id":1295445650,
  "issue":1845,
  "node_id":"IC_kwDODBCWws5NNu6S",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T22:39:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Remove 1345 lines that were never tested (Identifiers were almost always `None`) and the coverage goes up by... 0.1%.\r\n\r\n> Merging [#1845](https://codecov.io/gh/scikit-hep/awkward/pull/1845?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) ([10bede1](https://github.com/scikit-hep/awkward/commit/10bede146f25ffbf12de07659dacd04f146c0a1a)) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/178b4e92a0ce7ab515d3ccd9b1929d9bda5ec183?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) ([178b4e9](https://github.com/scikit-hep/awkward/commit/178b4e92a0ce7ab515d3ccd9b1929d9bda5ec183)) will **increase** coverage by `0.10%`.\r\n> The diff coverage is `93.75%`.\r\n",
  "created_at":"2022-10-28T20:53:41Z",
  "id":1295456518,
  "issue":1845,
  "node_id":"IC_kwDODBCWws5NNxkG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T20:53:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The docs have (correctly) lost all references to `identifier`.",
  "created_at":"2022-10-28T21:18:18Z",
  "id":1295476712,
  "issue":1845,
  "node_id":"IC_kwDODBCWws5NN2fo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T21:18:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Also, I took the liberty of removing the v1 content from the Doxygen index, as you already have to touch that file in this PR.",
  "created_at":"2022-10-28T21:52:01Z",
  "id":1295502118,
  "issue":1845,
  "node_id":"IC_kwDODBCWws5NN8sm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T21:52:01Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I checked `NumpyArray`, `IndexedOptionArray`, and `ListOffsetArray`, which I expected to be the most common layout types, and found no misuse.\r\n\r\nDo you know what the `is_identifier.match` excerpt refers to in `_prettyprint.py` (used in a few places)?",
  "created_at":"2022-10-28T21:56:47Z",
  "id":1295506439,
  "issue":1845,
  "node_id":"IC_kwDODBCWws5NN9wH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T21:56:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Do you know what the `is_identifier.match` excerpt refers to in `_prettyprint.py` (used in a few places)?\r\n\r\nThat checks to see if a field name of a record fits the regex that most languages use as identifiers\u2014in particular, the Datashape language (which inherits it from whatever parser they're using). That's `/[A-Za-z_][A-Za-z_0-9]*/`.\r\n\r\nThis PR was not a sed substitution. I checked each usage of strings matching `/identi/i` (because I wanted to be sure there wasn't anything left-over from the \"Identity\"/\"Identities\" days).\r\n\r\nI'll also simplify the two f-string substitutions. It used to be all `format` method calls because we were originally allowing for Python 2. So, little by little, I've been converting them to f-strings, and it seemed to be a good time/place to do that if there were identifiers to remove.",
  "created_at":"2022-10-28T22:18:29Z",
  "id":1295536257,
  "issue":1845,
  "node_id":"IC_kwDODBCWws5NOFCB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T22:18:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > Do you know what the `is_identifier.match` excerpt refers to in `_prettyprint.py` (used in a few places)?\r\n> \r\n> That checks to see if a field name of a record fits the regex that most languages use as identifiers\u2014in particular, the Datashape language (which inherits it from whatever parser they're using). That's `/[A-Za-z_][A-Za-z_0-9]*/`.\r\n\r\nFab, this was my read of things, but I never closely looked at identifiers before you removed them, so I wanted to clarify.\r\n \r\n> This PR was not a sed substitution. I checked each usage of strings matching `/identi/i` (because I wanted to be sure there wasn't anything left-over from the \"Identity\"/\"Identities\" days).\r\n\r\nYou can tell; lots of tricky things to find beyond a guided exploration. Even just reading all the files took a while, nice effort! \r\n\r\n> I'll also simplify the two f-string substitutions. It used to be all `format` method calls because we were originally allowing for Python 2. So, little by little, I've been converting them to f-strings, and it seemed to be a good time/place to do that if there were identifiers to remove.\r\n\r\nI'm 100% on-board with f-strings. In these two rare cases, I'd either assign the long statements to local variables, or just use a multi-line `string.format`, hence the suggestion.",
  "created_at":"2022-10-28T22:21:14Z",
  "id":1295542270,
  "issue":1845,
  "node_id":"IC_kwDODBCWws5NOGf-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T22:21:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"In this case, I'm going to leave these strings as f-strings, but predefine the variables to substitute. That way, all of the Numba type strings will be generated in the same way.",
  "created_at":"2022-10-28T22:22:19Z",
  "id":1295544760,
  "issue":1845,
  "node_id":"IC_kwDODBCWws5NOHG4",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-10-28T22:22:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Auto-merging.\r\n\r\nThanks!",
  "created_at":"2022-10-28T22:31:37Z",
  "id":1295564959,
  "issue":1845,
  "node_id":"IC_kwDODBCWws5NOMCf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-28T22:31:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Note that, under NumPy's rules, the result of `array + scalar` is not predictable; NumPy calls `np.min_scalar_type()` on the scalar, which is value-dependent. Being rigorous, this should fail if attempted, hence `TypeTracer.min_scalar_type()` will accept concrete-scalars, but fail for `UnknownScalar`.",
  "created_at":"2022-10-31T12:00:13Z",
  "id":1296983896,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5NTmdY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T12:00:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I recognize why we'd want to be rigorous like this, but that could easily make common operations fail to be Dask-delayable.\r\n\r\nFortunately, we have a model: what does `dask.array` do?\r\n\r\n```python\r\n>>> import numpy as np, dask.array as da\r\n>>> np.array([1, 2, 3], np.uint8) + np.uint16(10)\r\narray([11, 12, 13], dtype=uint8)\r\n>>> np.array([1, 2, 3], np.uint8) + np.uint16(300)\r\narray([301, 302, 303], dtype=uint16)\r\n```\r\n\r\nOkay, so NumPy promotes the dtype if the _value_ is large enough (value dependent).\r\n\r\n```python\r\n>>> da.array(np.array([1, 2, 3], np.uint8)) + da.array(np.uint16(10))\r\ndask.array<add, shape=(3,), dtype=uint16, chunksize=(3,), chunktype=numpy.ndarray>\r\n>>> da.array(np.array([1, 2, 3], np.uint8)) + da.array(np.uint16(300))\r\ndask.array<add, shape=(3,), dtype=uint16, chunksize=(3,), chunktype=numpy.ndarray>\r\n```\r\n\r\nDask promotes if the _type_ is large enough.\r\n\r\nTypeTracer is designed first and foremost for dask-awkward; it hasn't been used in anything else and it's still a private implementation, anyway. If it acquires another purpose, we can think about generalizing it, but for now, we should think of it as 100% supporting dask-awkward.\r\n\r\nSince `dask.array` departs from NumPy semantics, dask-awkward can, too, and so TypeTracer should do so as well, to support it. Since the NumPy semantics is value-based and any delayed calculation cannot be (without introducing an \"unknown dtype\"), the only two choices are to forbid the operation\u2014which is what I _think_ you're saying you're implementing\u2014or to depart from NumPy semantics for some but not all of the values in the type. (In the above, the uint16 values from 256 onward are the same as NumPy semantics; the values from 0 to 255 are not.) Since `dask.array` takes the relaxed option, we should, too.",
  "created_at":"2022-10-31T13:58:36Z",
  "id":1297134978,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5NULWC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T13:58:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Since dask.array departs from NumPy semantics, dask-awkward can, too, and so TypeTracer should do so as well, to support it. Since the NumPy semantics is value-based and any delayed calculation cannot be (without introducing an \"unknown dtype\"), the only two choices are to forbid the operation\u2014which is what I think you're saying you're implementing\u2014or to depart from NumPy semantics for some but not all of the values in the type. (In the above, the uint16 values from 256 onward are the same as NumPy semantics; the values from 0 to 255 are not.) Since dask.array takes the relaxed option, we should, too.\r\n\r\nSo, my overarching concern here is for `ak.types.Type` to be predictable under typetracer, i.e. `typetracer` should be useable as a mechanism to discover the type. It's my understanding that this is the fundamental purpose of having typetracer. Therefore, I would imagine that we don't want to produce different-typed results for typetracer vs the non-typetracer branches; otherwise, we lose the predictive value of typetracer. So, to be clear, my goal in this PR is to increase rigorousness with the goal of making the `dask-awkward` usage much safer (i.e., *not* breaking `dask-awkward`). \r\n\r\nTo be explicit, this currently *isn't* the case if we have (or add in future) any code that evaluates `nplike.array(...) + nplike.array(...)[0]`; the `dtype` of the result will depend upon the value of the item that is pulled out of the array. This would be a problem if the result of this expression ended up in a `NumpyArray`.\r\n\r\nWith respect to the value-dependence of `array + scalar` (anything that uses `np.result_type()`), my solution is so-far indeed to ban this (and that's what `TypeTracer.result_type()` does). If we want the type to be predictable, we either need to ban these operations (and require that the caller specify the `dtype`), or enforce the results for all of our `NumpyLike` implementations.\r\n\r\nThus far, we may never rely on this kind of behavior being identical between `NumpyLike`s in a meaningful way. But, anywhere we consume the result of e.g. `nplike.add(array, scalar)`, we would need to be casting the result to the correct `dtype` to ensure that we don't get a runtime error by assuming `TypeTracer` or `NumPy` behavior.\r\n\r\nThe \"robust\" solution here is to use the new Array API standard: https://numpy.org/neps/nep-0047-array-api-standard.html, which is effectively what `NumpyLike` is intended to do. Unfortunately, our lower bound for NumPy doesn't support this. That's another point, though (and for now, insufficient as NEP47 does not implement `datetime64` or `complex` support, amongst other things).\r\n\r\n@jpivarski I originally wrote that `ak.forms.Form` should be predictable (i.e same form produced if the nplike is `TypeTracer` or `Numpy`), but I walked that back slightly as I imagine there are places where this isn't true (and I've just introduced one in a1fa4b884708a32e321226a1916df80578f1a5ea and 59bb711). I assume you agree with my assertion that typetracer is useful for its predictive power, where do you stand on the form vs type predictability? Note that in this discussion I can't concretely picture how awkward-dask uses typetracer, i.e. how exact typetracer needs to be.",
  "created_at":"2022-10-31T14:08:35Z",
  "id":1297148013,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5NUOht",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T14:32:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Right, we don't want a TypeTracer Array and a non-TypeTracer Array to return different results, because then the dask-awkward operation would still fail, but it would do so when it's pulling back the results and testing them against the expected Form.\r\n\r\nHow about if we follow `dask.array`'s choice of promoting dtype by type only (not value), regardless of whether it's a TypeTracer or not? If I remember right, that's probably already the implementation. This would be an example of not adhering strictly to the (current) NumPy API as you've suggested in the past\u2014a user who relies on dtypes being set by `np.min_scalar_type()` is not making good life-decisions. If anyone complains that this is different from what NumPy does, we can explain the reasons; it's really well justified here.\r\n\r\n------------------\r\n\r\nThe two commits that loosen TypeTracer/non-TypeTracer agreement to Type, rather than Form, is something that I've been on the fence about. dask-array only needs to know Types; ensuring that TypeTracers reproduce Forms was a decision to be strict so that we wouldn't need to tighten it (which is much harder than loosening it) if we ever find out that we need Forms. Numba and RDataFrame interfaces need to know Forms, but they can separately compile on each worker, so it's not necessary to give dask-awkward an exact Form.\r\n\r\ndask-awkward has been out for a while, and Uproot is using/testing it, though not many users are. At some point, we'll be comfortable enough to say that Dask isn't ever going to need to know exact Forms, and we can then loosen the agreement to Type across the board. It seems to me that a1fa4b884708a32e321226a1916df80578f1a5ea and 59bb711d5dfc2c421393902580bc70a812f65b48 are not _necessary_, so let's hold off on them until we make this decision globally. I think it will probably happen, and it's not API-breaking, so we can do it after users have been working with 2.x for a while.\r\n\r\nAnyway, this point about loosening TypeTracer agreement to Type is unrelated to the dtype choice above because dtype is a Type thing.",
  "created_at":"2022-10-31T14:32:12Z",
  "id":1297180262,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5NUWZm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T14:32:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We had a discussion on Slack, and here's a summary:\r\n\r\n* Our nplikes are currently somewhat unstandardised, and this is most notable with the value-dependence of `nplikes.Numpy` vs `nplikes.TypeTracer`.\r\n* We need to eliminate value dependence so that typetracer can reliably predict the result of an operation\r\n* Even if we don't trigger this right now, it's a footgun-in-waiting\r\n* We can look to the Array API to define what we should be doing, even if we can't use it due to poor type support of `complex` and `datetime`\r\n\r\nThis PR will therefore walk back [59bb711](https://github.com/scikit-hep/awkward/pull/1849/commits/59bb711d5dfc2c421393902580bc70a812f65b48) and [a1fa4b8](https://github.com/scikit-hep/awkward/pull/1849/commits/a1fa4b884708a32e321226a1916df80578f1a5ea) which loosen the predictive power of typetracer, and work on standardising the nplikes.",
  "created_at":"2022-10-31T15:22:20Z",
  "id":1297253858,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5NUoXi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T15:22:20Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1849?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1849](https://codecov.io/gh/scikit-hep/awkward/pull/1849?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4bd3f61) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b83d9dcaaf69eb0cce6f91e8585997f1b466f8af?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b83d9dc) will **decrease** coverage by `0.25%`.\n> The diff coverage is `69.93%`.\n\n> :exclamation: Current head 4bd3f61 differs from pull request most recent head 9956395. Consider uploading reports for the commit 9956395 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1849?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnBsaWtlcy5weQ==) | `67.31% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `73.31% <66.92%> (-0.85%)` | :arrow_down: |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <100.00%> (+4.49%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.94% <100.00%> (+0.39%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `89.52% <100.00%> (-0.93%)` | :arrow_down: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `66.23% <100.00%> (-6.77%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `68.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `65.51% <0.00%> (-25.79%)` | :arrow_down: |\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `66.66% <0.00%> (-24.25%)` | :arrow_down: |\n| ... and [147 more](https://codecov.io/gh/scikit-hep/awkward/pull/1849/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-02T19:43:07Z",
  "id":1301137796,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5NjcmE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-21T14:03:04Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR looks scary, but it's fairly straightforward so far.\r\n\r\nThe plan here is still to formalise the NumpyLike type promotion rules, and implement an API that closely resembles the array API. We won't be able to actually invoke the Array API whilst we want to support more types, but we can ensure that we *look* like the Array API for future ease / API decisions.\r\n\r\nFollowing the Array API is so far a rewarding process; the interfaces are simple, and predictably typed. The area that's currently a bit tricky is working out result dtypes; we need to define our own results here, because the Array API doesn't include complex numbers (draft) or datetime/timedeltas yet. I'm happy that we've got the approximate rules in place, but it's not clear which rules NumPy applies; `np.result_type` matches our promotion rules, but things like `np.stack` have special promotion rules. It *seems* like this is just a same-kind check, which we can do.\r\n\r\nIt looks like these types are unlikely to be standardised by the Array API any time soon, so we'll need to decide upon this for ourselves. Note that, we *don't* need to implement what NumPy does here; we just need to choose something, and stick to it. Ideally, we'll choose something that's a subset of NumPy's behavior so that we can directly use the corresponding methods. Again, this is an internal part of Awkward, so we're able to impose these kind of constraints upon ourselves.\r\n\r\nNumPy uses these rules for `concat` / `stack`: https://github.com/numpy/numpy/blob/fbe1b65f5f66ca5a416b23194577a1ed5a4cf1bd/numpy/core/src/multiarray/datetime.c#L1668-L1701\r\n\r\nRE complex types, we currently allow float-complex mixing, as it can be a lossless conversion. \r\n\r\nI'll give this some more thought.",
  "created_at":"2022-11-15T00:18:13Z",
  "id":1314582165,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5OWu6V",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T00:30:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, complex types seem pretty straightforward, since they are exact supersets of the corresponding floating point types.\r\n\r\nFor date-time types, we can refuse every type of mixing except for the few mathematical operations that are defined (with commutative symmetry for `+`):\r\n\r\n* `datetime64 - datetime64 \u2192 timedelta64`\r\n* `datetime64 + timedelta64 \u2192 datetime64`\r\n* `datetime64 - timedelta64 \u2192 datetime64`\r\n* `number * timedelta64 \u2192 timedelta64`\r\n* `timedelta64 / number \u2192 timedelta64`\r\n* `timedelta64 + timedelta64 \u2192 timedelta64`\r\n* `timedelta64 - timedelta64 \u2192 timedelta64`\r\n\r\nI don't think there are any other mathematical operations that apply to date-time types.\r\n\r\nI looked at the NumPy reference (and also found [this](https://github.com/numpy/numpy/issues/11153)), and was drawn to the comment about \"nonlinear time units.\" I wondered what they meant by that. It's the fact that NumPy accepts time units like \"months\" and \"years,\" which can have a variable number of days, depending on their absolute time position. THAT is a huge can of worms. We should avoid ever computing\r\n\r\n* `datetime64 + timedelta64 \u2192 datetime64`\r\n* `datetime64 - timedelta64 \u2192 datetime64`\r\n\r\nourselves\u2014let NumPy deal with the possibility that `timedelta64` is expressed in months or years, and then the number of days that get added to the `datetime64` depends on the value of the `datetime64`.\r\n\r\nI think we _do_ let NumPy handle all of this, since the above are ufuncs, and reducers like `sum` and `prod` don't mix arrays, so our reducers don't see mixed units.\r\n\r\nYou asked about cases like `concatenate`, not mathematical functions. We should be able to get NumPy to cast them to common units, right?",
  "created_at":"2022-11-15T01:09:28Z",
  "id":1314619713,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5OW4FB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T01:09:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"\r\nWhilst I remember, with respect to the type inspection interface, the standard doesn't yet implement everything, but I'm planning to take this as inspiration: https://github.com/data-apis/array-api/issues/425\r\n\r\n> Yes, complex types seem pretty straightforward, since they are exact supersets of the corresponding floating point types.\r\n\r\nThe only concern I have is that we want to anticipate what the spec does so that we don't deviate unnecessarily. In the long-term, there may be a point where the Array API supports complex types and datetimes (I suspect a long-long way away), and at that point most of our nplike would become pass-throughs. In particular, the Array API doesn't mix int and float types. There seems to be a lean towards allowing complex and floats to mix, I imagine because the result is obvious (float64\u2192complex128).\r\n\r\n> You asked about cases like concatenate, not mathematical functions.\r\n\r\nYes, this is special because the `concat` in the array API applies type promotion rules, whilst NumPy usually has a special concat result type table. This is only relevant for the timelike types, which are somewhat special; they have distinct concepts of promotions and result types; a `timedelta64` can be added to a `datetime64` (subject to `kind` constraints), but cannot be _converted_` to a `datetime64`. You also note the non-commutative-type operations like `/`.\r\n",
  "created_at":"2022-11-15T11:22:42Z",
  "id":1315171643,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5OY-07",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T11:22:42Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski  this reply is turning into a long post, so I'll give it some structure. I'll probably keep editing this, so best check the web version only.\r\n\r\n## The Discussion so Far\r\n\r\nI've also come to realise that this is a bigger can of worms than I had first anticipated. \r\n\r\nLet me summarise the worm-can here for posterity:\r\n\r\n- TypeTracer needs to be able to predict the result (types, shapes*) of nplike operations\r\n- NumPy et al. implement some data-dependent dtype promotion (`min_scalar_type`) (see https://github.com/scikit-hep/awkward/pull/1849#issuecomment-1297148013), and all array libraries try to replicate NumPy at *some* level of formality (i.e. without a standard)\r\n- The Array API solves this by formalising type-only promotion semantics for a well defined set of operations\r\n- The Array API doesn't cover the scope of NumPy that we need e.g. complex numbers, datetimes\r\n\r\n\r\n## How we use NumPy / `NumpyLike`\r\nAny which way we cut it, this is a tricky problem. A significant component of this is that we use NumPy[^or] / `NumpyLike` in several different ways:\r\n- internally to operate on indices, NumpyLike\r\n- internally for simple reductions (this will be curtailed with #1793), NumpyLike\r\n- externally via ufuncs (`ak.Array(...) + 1`), NumPy\r\n  - the `__array_ufunc__` mechanism ultimately dispatches to NumPy.\r\n- externally via `__array_function__` for non-overloaded functions on regular Awkward arrays, NumPy\r\n  - the `__array_function__` interface tries to cast the array to a NumPy array if there is no Awkward implementation (IIRC). This then uses NumPy or CuPy, etc.\r\n\r\n## The Problem\r\n\r\nI was originally adopting the Array API-inspired interface for `NumpyLike` because it solves type-only promotion (for a subset of types). However, we can do whatever we like _internally_ - users won't see NumpyLike - but externally we have user expectations. Due to the fact that we use NumPy/CuPy under the hood, we currently have value-based promotion _at the user level_ with scalars\r\n```pycon\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> x = ak.from_numpy(np.arange(10, dtype=np.int8))\r\n>>> ak.type(x)\r\nArrayType(NumpyType('int8'), 10)\r\n>>> ak.type(x + np.int64(0))\r\nArrayType(NumpyType('int8'), 10)\r\n>>> ak.type(x + np.int64(2**(32-1) - 1))\r\nArrayType(NumpyType('int32'), 10)\r\n```\r\n\r\nThis is mediated by the ufunc mechanism, so it is not something that we can directly fix by patching `nplike`. If we want dask-awkward to support `dak.Array(...) + dak.Array(...)[0]`, then we need to remove value-based promotion from the ufunc mechanism. \r\n\r\nThe value-agnostic result would be\r\n```pycon\r\n>>> import awkward as ak\r\n>>> import numpy as np\r\n>>> x = ak.from_numpy(np.arange(10, dtype=np.int8))\r\n>>> ak.type(x)\r\nArrayType(NumpyType('int8'), 10)\r\n>>> ak.type(x + np.int64(0))\r\nArrayType(NumpyType('int64'), 10)\r\n>>> ak.type(x + np.int64(2**(32-1) - 1))\r\nArrayType(NumpyType('int64'), 10)\r\n```\r\n\r\nwhich obviously differs from the NumPy equivalent (note that `x` is a non-ragged array)\r\n```pycon\r\n>>> import numpy as np\r\n>>> x = np.arange(10, dtype=np.int8)\r\n>>> x.dtype\r\ndtype(\"int8\")\r\n>>> (x + np.int64(0)).dtype\r\ndtype(\"int8\")\r\n>>> (x + np.int64(2**(32-1) - 1)).dtype\r\ndtype(\"int32\")\r\n```\r\n\r\nSo, this PR has morphed into a question of formalising our public-facing semantics in relation to NumPy for dask-awkward.\r\n\r\n## Possible Solution\r\nThere are several partially independent axes at play here:\r\n1. Adopting a more Array API-like interface for ease of development (i.e. don't support all the crazy options at the NumpyLike level) (internal)\r\n2. Removing value-based type promotion (user-visible, internal)\r\n3. Making TypeTracer predictable (internal)\r\n\r\nUltimately we want to address (2), because it affects the user as well as our internals, and therefore is a constraint.\r\n\r\nI think @jpivarski that we *do* want valueless promotion semantics. My assumption is that we're okay to deviate from NumPy at the user-visible level if it's well thought out and well-defined. We already have some smaller differences, e.g. our `np.sum(x, axis=-1)` produces different results for large N, small M arrays of shape `(N, M)` due to pairwise summation.\r\n\r\nSo, we do need to ensure that ufuncs don't perform the wrong cast. We can do this in two ways:\r\n1. only correct NumPy for \"wrong\" cases\r\n  - special-case handling for scalar promotion\r\n  - use empty arrays in TypeTracer to implement NumPy's [complex type promotion semantics](https://numpy.org/neps/nep-0040-legacy-datatype-impl.html)\r\n2. implement our own formal semantics that we define\r\n  - extend Array API to handle complex types, datetimes, mixed-type promotion\r\n\r\n### (2) use Array API\r\nThe Array API provides type-only promotion, but we would need to augment it: the Array API does not define promotion between different kinds e.g. `int` and `float`, so with the Array API syntax, `5 + 1.0` would not be defined _by the canonical Array API_. Of course, neither are complex numbers or datetimes, which we need to support. I would start by saying that we _do_ want mixed type promotion; users expect `int + float` to produce a float, and it is predictable (albeit lossy for integers (whose magnitude lies above 2^53) when cast to doubles). The Array API does allow additional promotion rules:\r\n\r\n> Boolean, integer and floating-point dtypes are not connected, indicating mixed-kind promotion is undefined.\r\n> [...]\r\n> A conforming implementation of the array API standard may support additional type promotion rules beyond those described in this specification.\r\n\r\n### Implementing the Solution\r\nIf we are willing to make this formalisation, I *think* the way through this is:\r\n- implement a custom `Array` object as required by the Array API. This will delegate to the `NumpyLike` to provide the implementation for operations like `array + other_array` (where `array` is an internal array, not an `ak.Array`). We can then re-use this across NumpyLikes. This will ensure that we can trust operations on the array object e.g. `x + y`.\r\n- define promotion rules for complex numbers, and datetimes. Follow NumPy where possible.\r\n- define mixed-type promotion rules for integers, floats, complex numbers, etc. Follow NumPy where possible.\r\n- implement additional mechanism for non-commutative operations (in the sense that `timedelta64 / integer` is allowed, `integer / timedelta64` is not).\r\n- apply the awkward promotion rules to ufunc arguments _before_ calling the ufunc, so that the result has the correct type (?) If we are worried about overzealous promotion, we could check the ufunc typecodes first, and do a minimum-cost conversion (e.g. find the casts that cost the fewest bytes of copying, which is not guaranteed \"lowest cost\", but is trivial).\r\n  - or, drop the ufunc implementation entirely and just use them to look up our own kernels. This wouldn't work for JAX, which rules it out for me.\r\n\r\nIn all, I'm not 100% sure on what the right call is. Each solution has drawbacks, and this is a hard problem. It feels like we're looking at needing to maintain a non-insignificant amount of code, but I think this is a symptom of the problem and not the solution. That said, I've been thinking about this for perhaps _too_ long, so I'd appreciate @jpivarski your thoughts at some point.\r\n\r\n[^tt]: which is a problem for typetracer\r\n[^or]:  or CuPy, JAX",
  "created_at":"2022-11-15T12:22:04Z",
  "id":1315236982,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5OZOx2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T13:38:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> I think @jpivarski that we _do_ want valueless promotion semantics. My assumption is that we're okay to deviate from NumPy at the user-visible level if it's well thought out and well-defined.\r\n\r\nYes and yes: we absolutely want valueless promotion semantics, and we want it to be forward-looking, to agree with the Array API _instead of_ NumPy. Eventually, NumPy will adhere to Array API by default, so this is a temporary situation.\r\n\r\nAlso, as you point out, we are already okay with some small differences from NumPy when they're well motivated.\r\n\r\nHow to implement it without introducing a lot of code to maintain: I hope we'll be able to create empty arrays, apply the operation to them, and read the dtype off the resulting (also empty) array.\r\n\r\nAs a reminder, this was the problem:\r\n\r\n> ```python\r\n> >>> import numpy as np, dask.array as da\r\n> >>> np.array([1, 2, 3], np.uint8) + np.uint16(10)\r\n> array([11, 12, 13], dtype=uint8)\r\n> >>> np.array([1, 2, 3], np.uint8) + np.uint16(300)\r\n> array([301, 302, 303], dtype=uint16)\r\n> ```\r\n\r\nSuppose that we pull in `np.array_api` to try to solve it?\r\n\r\n```python\r\n>>> import numpy as np\r\n>>> import numpy.array_api\r\n<stdin>:1: UserWarning: The numpy.array_api submodule is still experimental. See NEP 47.\r\n>>> np.array_api.empty(0, dtype=np.array_api.uint8) + np.array_api.empty(0, dtype=np.array_api.uint16)\r\nempty((0,), dtype=uint16)\r\n```\r\n\r\nI think we're currently using empty arrays as canaries (canary typing is some corollary to duck typing?), and when we don't put values in those arrays, even the current NumPy API does the above:\r\n\r\n```python\r\n>>> np.empty(0, dtype=np.uint8) + np.empty(0, dtype=np.uint16)\r\narray([], dtype=uint16)\r\n```\r\n\r\nSo maybe we can't just pass arrays (with values) to NumPy and assume that it will do the right type propagation, but we can use empty arrays to predict a type, then apply it to the result, right? If need be, we can use `np.array_api` to do that (and hide the warning?), though at the moment, I don't see any examples in which it's needed.",
  "created_at":"2022-11-15T16:34:01Z",
  "id":1315570272,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5OagJg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-15T16:34:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"So far I've formalised the NumpyLike API, which looks more like the Array API, but doesn't make as many guarantees about type promotion.\r\n\r\nAfter our conversation on `NumpyLike` (@jpivarski), I set about building TypeTracer on top of arrays. It became apparent to me that the type-level separation of `UnknownScalar`, `UnknownLength`, and `TypeTracerArray` is somewhat cumbersome. Each class has its own rules about which operations map between the different types. This means that, from a type-hinting perspective, we'd need to implement most of the signatures three times.\r\n\r\nI realised that the most obvious thing to start with is `UnknownScalar` is just a `TypeTracerArray` with a specific shape `()`. This would halve the amount of work / code to maintain / edges to reason about. Then the \"scalar\" part becomes just a runtime property (shape). This reflects what can happen when working with concrete NumPy; sometimes we have 0D arrays that act like scalars.\r\n\r\nThen I thought about `UnknownLength`, which is really where the complexity remains; some operations on `UnknownLength` lose the \"length\" trait, so we need to define a whole set of signatures for these. I realised that we could just move this to a runtime trait, too. I went for a simple \"traits\" mechanism that allows us to tag an array with a set of string traits. We can then define a table of which operations preserve/lose these traits, with the rule that a binary operation only preserves the trait iff. both operands have the trait and the operation is known to preserve it too.\r\n\r\nIn code, this looks like\r\n```python\r\n\r\nclass TypeTracerTraits(str, enum.Enum):\r\n    POSITIVE = \"POSITIVE\"\r\n\r\n\r\n# Don't preserve positivity between `positive` arrays under these operations\r\nTypeTracerArray.drop_trait_for(\r\n    TypeTracerTraits.POSITIVE,\r\n    operator.sub,\r\n    operator.inv,\r\n    operator.neg,\r\n    operator.ge,\r\n    operator.le,\r\n    operator.gt,\r\n    operator.lt,\r\n    operator.eq,\r\n    operator.ne,\r\n)\r\n\r\n\r\n# Allow non-TypeTracerArray scalars to automatically gain the positive trait, e.g. in `x + 1`\r\n@TypeTracerArray.initialises_scalar_trait\r\ndef _initialise_scalar_trait(value):\r\n    if isinstance(value, (int, float)) and value >= 0:\r\n        return TypeTracerTraits.POSITIVE\r\n```\r\n\r\nThis is the current WIP: https://github.com/scikit-hep/awkward/blob/agoose77/refactor-typetracer/src/awkward/_nplikes/typetracer.py\r\n\r\n@jpivarski how do you feel about this code? Are you comfortable with merging the scalar and array types, and secondly to moving the \"length\"-ness to a runtime trait? ",
  "created_at":"2022-11-17T00:36:23Z",
  "id":1317878260,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5OjTn0",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-17T07:06:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Making `UnknownScalar` a `TypeTracerArray` with shape `()` is a good simplification. It doesn't conflate any currently distinct entities because `NumpyArray` always has at least one dimension (so that every `Content` has a length). The name `UnknownScalar` should stick around (as a synonym), or else we'll have to coordinate releases with dask-awkward, and now is not the time to do that because @douglasdavis is busy responding to @lgray's feedback.\r\n\r\nMaking `UnknownLength` a special case of `UnknownScalar` is also a good simplification, and it's not necessary to retain knowledge of it being non-negative. (\"Positive\" is not a sufficiently precise word, by the way.) The non-negativeness of `UnknownLength` is not used anywhere that I remember, and I doubt it matters. When creating tokens to represent missing information, there's always a question of how much information to let go.\r\n\r\nI think you can get away with just assigning `UnknownLength = UnknownScalar(np.int64)` and call it a day.",
  "created_at":"2022-11-17T13:40:40Z",
  "id":1318655436,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5OmRXM",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-17T13:40:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski what does\r\n> \"Positive\" is not a sufficiently precise word, by the way\r\n\r\nmean? Are you referring to the concept that zero is neither positive nor negative? I am using the CS interpretation here; that sign exists independently of the magnitude :)",
  "created_at":"2022-11-18T15:28:09Z",
  "id":1320177138,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5OsE3y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T15:28:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Using\r\n\r\n* \"positive\" to mean `x > 0`\r\n* \"negative\" to mean `x < 0`\r\n* \"non-negative\" to mean `x >= 0`\r\n* and (more rarely) \"non-positive\" to mean `x <= 0`\r\n\r\nis standard usage; I haven't noticed any deviation from this in CS.\r\n\r\nMy absolute favorite use of precision language in documentation is Java's core library docs, which [defines `MATH.PI`](https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#PI) as\r\n\r\n> The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.\r\n\r\nSince the irrational number $\\pi$ is between two rational floating point values, the documentation even specifies which one: the closer one. (I don't know offhand whether that's the one that's above $\\pi$ or the one that's below $\\pi$.)\r\n\r\nFloating point numbers have a separate sign bit, such that `0.0` is a different bit-pattern than `-0.0`:\r\n\r\n```python\r\n>>> np.array([0.0]).tobytes()\r\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\r\n>>> np.array([-0.0]).tobytes()\r\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80'\r\n```\r\n\r\nbut these two values of zero are equal to each other; there is one zero _value_ associated with two bit patterns. (There's a lot of distinct bit patterns for the NaN value.)\r\n\r\nHowever, integers (`UnknownLength` is an integer) do not have a single sign bit. It is the case that the highest bit is only ever `1` when the integer value is negative, but the [two's complement](https://en.wikipedia.org/wiki/Two%27s_complement) formalism affects all the bits when a number goes negative:\r\n\r\n```python\r\n>>> np.array([0]).tobytes()\r\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\r\n>>> np.array([1]).tobytes()\r\nb'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\r\n>>> np.array([-1]).tobytes()\r\nb'\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff'\r\n```",
  "created_at":"2022-11-18T17:33:08Z",
  "id":1320324115,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5OsowT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T17:33:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Floating point numbers have a separate sign bit, such that 0.0 is a different bit-pattern than -0.0:\r\n\r\nRight, that's what I'm referring to. One of the most amusing classes I demonstrated in Physics involved discovering how people think floats work, vs how they actually work!\r\n\r\n> The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.\r\n\r\nI audibly nose exhaled to this.\r\n\r\n> However, integers (UnknownLength is an integer) do not have a single sign bit\r\n\r\nHmm, we might be crossing wires; I'm talking about `UnknownLength` being `>= +0` by describing it as +ve. I mention the sign bit in the sense that there are distinct zeros which are defined to be equal (unless you're taking the reciprocal). I didn't mean for the description to go further than that.\r\n\r\nAnyway :steam_locomotive:, let's go for non-negative. That suits me fine!",
  "created_at":"2022-11-18T18:24:33Z",
  "id":1320381153,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5Os2rh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T18:24:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"WIP: add an API to smooth over typetracer changes",
  "created_at":"2022-12-01T18:18:24Z",
  "id":1334168490,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5Phcuq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-01T18:18:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Something for me to think about here is what should `NumpyArray.__array__` and `NumpyArray.data` return. The former should _probably_ return a raw NumPy array (rather than our custom object), because that's what NumPy's array API does. Or, perhaps we should let this succeed by default, and instead require the user to evaluate `np.asarray(layout.data)`. This would allow our nplikes to implement their own `__array__` (or CUDA variant), rather than having them on `NumpyArray`.",
  "created_at":"2022-12-08T12:07:33Z",
  "id":1342630197,
  "issue":1849,
  "node_id":"IC_kwDODBCWws5QBuk1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T12:07:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1851?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1851](https://codecov.io/gh/scikit-hep/awkward/pull/1851?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c18f2de) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f2d9108ea2095fa292ceb43ac132924300aa239f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f2d9108) will **increase** coverage by `0.01%`.\n> The diff coverage is `86.36%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1851?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1851/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.04% <\u00f8> (+0.50%)` | :arrow_up: |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/1851/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `75.13% <85.00%> (+0.60%)` | :arrow_up: |\n| [src/awkward/nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1851/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnBsaWtlcy5weQ==) | `66.85% <100.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1851/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1851/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1851/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1851/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1851/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1851/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward/pull/1851/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-10-31T16:29:25Z",
  "id":1297353740,
  "issue":1851,
  "node_id":"IC_kwDODBCWws5NVAwM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T16:29:25Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1852?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1852](https://codecov.io/gh/scikit-hep/awkward/pull/1852?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bd60862) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/31ecdf21bb94d16ad396697a7a2eb174c879ee37?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (31ecdf2) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1852?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1852/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1852/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1852/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1852/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1852/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1852/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-10-31T17:12:58Z",
  "id":1297407147,
  "issue":1852,
  "node_id":"IC_kwDODBCWws5NVNyr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T17:35:58Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It's not easy to guarantee that this is working, but if the docs deploy for this PR then we'll know at least that it didn't break anything :)",
  "created_at":"2022-10-31T17:22:08Z",
  "id":1297419006,
  "issue":1852,
  "node_id":"IC_kwDODBCWws5NVQr-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T17:22:08Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"For posterity - the docs were deploying on the branch. The problem was that I made an oversight and didn't think about the case where the docs workflow runs on `push` (not `pull_request`) to `main`. In that case, the `github.event.pull_request` object is `null`, so the condition always fails. So, let's now see if this merged PR deploys...",
  "created_at":"2022-10-31T19:58:51Z",
  "id":1297605864,
  "issue":1852,
  "node_id":"IC_kwDODBCWws5NV-To",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T19:58:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I missed something in the last PR (note-to-self, when you `assume`, you make an `ass` out of `u` and `me`). This fixes the last approved PR, so I'm happy to merge without a second pair of eyes.",
  "created_at":"2022-10-31T20:13:26Z",
  "id":1297627367,
  "issue":1853,
  "node_id":"IC_kwDODBCWws5NWDjn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T20:13:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1853?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1853](https://codecov.io/gh/scikit-hep/awkward/pull/1853?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a0da7a1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/a7e4ef65da4725b63aa37729971683b5c21d8953?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a7e4ef6) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1853?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1853/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1853/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1853/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1853/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1853/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1853/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-10-31T20:20:18Z",
  "id":1297635112,
  "issue":1853,
  "node_id":"IC_kwDODBCWws5NWFco",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T20:20:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Looks like it succeeded (at least the build triggers!)\r\n\r\n![image](https://user-images.githubusercontent.com/1248413/199108230-d553a7aa-d8fb-44ad-b805-37be54039539.png)\r\n",
  "created_at":"2022-10-31T20:52:17Z",
  "id":1297671137,
  "issue":1853,
  "node_id":"IC_kwDODBCWws5NWOPh",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-10-31T20:52:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1854?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1854](https://codecov.io/gh/scikit-hep/awkward/pull/1854?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4f6c54c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/eb879638f17370ac8e6c2ba499c0c33d4c154d75?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eb87963) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1854?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1854/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1854/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1854/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1854/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1854/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1854/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-10-31T22:20:02Z",
  "id":1297760897,
  "issue":1854,
  "node_id":"IC_kwDODBCWws5NWkKB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-10-31T22:20:02Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"There's a lot of history with sorting and `axis`, particularly the question, \"what _should_ it do?\" Python and I think it's most natural for list and records above the level specified by the `axis` to be unbroken, thanks to an ordering defined on whole list/record objects, but NumPy always sorts numbers within horizontal or vertical slices of 2 or more dimensional arrays.\r\n\r\n```python\r\n>>> sorted([[10, 2, 3], [4, 50, 60]])\r\n[[4, 50, 60], [10, 2, 3]]\r\n>>> np.sort([[10, 2, 3], [4, 50, 60]], axis=0)\r\narray([[ 4,  2,  3],\r\n       [10, 50, 60]])\r\n>>> np.sort([[10, 2, 3], [4, 50, 60]], axis=1)\r\narray([[ 2,  3, 10],\r\n       [ 4, 50, 60]])\r\n```\r\n\r\nAwkward Array does what NumPy does, which gets even more surprising when variable-length lists and missing values are included. Fortunately, the sorter semantics follows reducer semantics in how horizontal and vertical slices are identified by `axis`, so we don't have to make something up.\r\n\r\n`axis=None` should be simpler: everything gets broken down and sorted together. In Awkward, this would just be a `completely_flatten` followed by one sort.\r\n\r\n```python\r\n>>> np.sort([[10, 2, 3], [4, 50, 60]], axis=None)\r\narray([ 2,  3,  4, 10, 50, 60])\r\n```\r\n\r\nIssues/PRs that have touched on this before:\r\n\r\n* #74\r\n* #168\r\n* #506 (correct behavior surprised a user)\r\n* #523 (implementation issue)\r\n* #524 (implementation issue)\r\n* #926 (documentation)\r\n* #946\r\n* #1072\r\n",
  "created_at":"2022-11-01T15:51:26Z",
  "id":1298744457,
  "issue":1855,
  "node_id":"IC_kwDODBCWws5NaUSJ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-01T15:51:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Agreed, it's just a missing case for us to add. I'm holding off here, because it's related to #1362 and others ",
  "created_at":"2022-11-01T15:54:16Z",
  "id":1298748521,
  "issue":1855,
  "node_id":"IC_kwDODBCWws5NaVRp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T15:54:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1856?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1856](https://codecov.io/gh/scikit-hep/awkward/pull/1856?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f6124ee) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/eb879638f17370ac8e6c2ba499c0c33d4c154d75?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (eb87963) will **decrease** coverage by `0.01%`.\n> The diff coverage is `87.50%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1856?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1856/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnBsaWtlcy5weQ==) | `66.98% <75.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/1856/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `75.22% <100.00%> (+0.09%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1856/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `89.70% <100.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1856/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1856/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1856/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1856/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1856/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1856/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-11-01T11:58:47Z",
  "id":1298410002,
  "issue":1856,
  "node_id":"IC_kwDODBCWws5NZCoS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T11:58:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I actually realised that we've both made an assumption here that doesn't quite match what happens; I too looked at a particular instance of `reshape(-1)` and noted that the result was contiguous. I took that to mean that _all_ non contiguous arrays are copied into contiguous buffers with `reshape`. It turns out that this is not true; a counter-example:\r\n```python\r\n>>> non_contiguous = np.arange(4*3*2)[::2].reshape(3, 4)\r\n>>> non_contiguous.reshape(-1).flags\r\n  C_CONTIGUOUS : False\r\n  F_CONTIGUOUS : False\r\n  OWNDATA : False\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  WRITEBACKIFCOPY : False\r\n  UPDATEIFCOPY : False\r\n```\r\n\r\nIn my tests, I used the transpose, which exchanges the `strides` and therefore doesn't trivially map to a constant stride in the 1D case, requiring a copy. In this counterexample however, the reshape only drops the \"outer\" stride, recovering the original non-contiguous array.\r\n\r\nLuckily, however, the changes in *this* PR ensure that call into `_reduce_next()` at the leaf `NumpyArray` will correctly cast the result to a contiguous buffer. \r\n\r\nI checked the docs, and [NumPy actually mention this](https://numpy.org/doc/stable/reference/generated/numpy.reshape.html#:~:text=Note%20there%20is%20no%20guarantee%20of%20the%20memory%20layout%20(C%2D%20or%20Fortran%2D%20contiguous)%20of%20the%20returned%20array.) So, now we know! \r\n\r\nI don't think there's anything to change though; I believe that we should defer enforcing contiguity as late as possible in most cases, which is what would happen if this counterexample were passed in. Maybe we should add it to the test suite, though",
  "created_at":"2022-11-01T16:46:53Z",
  "id":1298819666,
  "issue":1856,
  "node_id":"IC_kwDODBCWws5NampS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T16:47:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Good point: `reshape(-1)` doesn't ensure that it's contiguous, but that it can be one-dimensional. But that's what RegularArray needs: RegularArray doesn't have a `strides` parameter, so it has to assume that every element visible in the next node down is a part of the visible 2D array that RegularArray presents (modulo any extra content past `length * size`). But it doesn't need to make any assumptions about the contiguity of the data hidden below the next node down.\r\n\r\nSo, for instance, this is legal:\r\n\r\n```python\r\n>>> import awkward as ak, numpy as np\r\n>>> np_array = np.arange(20)[::2]\r\n>>> np_array.dtype.itemsize != np_array.strides[0]   # not contiguous\r\nTrue\r\n>>> ak.Array(ak.contents.RegularArray(ak.contents.NumpyArray(np_array), 5))\r\n<Array [[0, 2, 4, 6, 8], [10, 12, 14, 16, 18]] type='2 * 5 * int64'>\r\n```\r\n\r\nWhat the RegularArray needs is for all of the visible NumpyArray values (up to `2 * 5 = 10`) to be visible in the RegularArray. It doesn't care whether there are any hidden values inside the NumpyArray, such as all the odd numbers in that buffer.\r\n\r\nSo actually this relaxes a too-strict requirement we were imposing in the past. We can't turn a 2D NumpyArray like (\"`.`\" means hidden)\r\n\r\n```\r\n  1  2  3  .  .\r\n  6  7  8  .  .\r\n  .  .  .  .  .\r\n```\r\n\r\ninto a RegularArray of a 1D NumpyArray without copying it into\r\n\r\n```\r\n  1  2  3  6  7  8\r\n```\r\n\r\nbecause there's no way to encode the \"show 3, skip 2\" in the RegularArray, but what happens inside the RegularArray's `content` is that `content`'s business.\r\n\r\nSo... \"partial contiguity\"? Anyway, it's exactly what `ndarray.reshape(-1)` does, so the code is safe.",
  "created_at":"2022-11-01T17:05:04Z",
  "id":1298841525,
  "issue":1856,
  "node_id":"IC_kwDODBCWws5Nar-1",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-01T17:05:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, this is an open call for reviewers. I'll leave this open until our regular meeting on Thursday.",
  "created_at":"2022-11-01T17:58:04Z",
  "id":1298902943,
  "issue":1857,
  "node_id":"IC_kwDODBCWws5Na6-f",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T17:58:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1857?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1857](https://codecov.io/gh/scikit-hep/awkward/pull/1857?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (45839f3) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/87049ac174e72584f09b4f0062a34c983f35a439?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (87049ac) will **decrease** coverage by `0.03%`.\n> The diff coverage is `0.00%`.\n\n> :exclamation: Current head 45839f3 differs from pull request most recent head c92ec80. Consider uploading reports for the commit c92ec80 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1857?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1857/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.96% <\u00f8> (-0.09%)` | :arrow_down: |\n| [src/awkward/\\_v2.py](https://codecov.io/gh/scikit-hep/awkward/pull/1857/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyLnB5) | `0.00% <0.00%> (-100.00%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1857/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1857/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1857/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1857/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1857/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1857/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-11-01T18:10:54Z",
  "id":1298918922,
  "issue":1857,
  "node_id":"IC_kwDODBCWws5Na-4K",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-02T19:38:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"+1 ",
  "created_at":"2022-11-01T18:48:23Z",
  "id":1298961310,
  "issue":1857,
  "node_id":"IC_kwDODBCWws5NbJOe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T18:48:23Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1858?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1858](https://codecov.io/gh/scikit-hep/awkward/pull/1858?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c65ee0b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/173a6b6fa5204fe98abafa83bb88e36cea3bcd07?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (173a6b6) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head c65ee0b differs from pull request most recent head b6bfaf4. Consider uploading reports for the commit b6bfaf4 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1858?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1858/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1858/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1858/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1858/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1858/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1858/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-11-01T22:09:26Z",
  "id":1299292083,
  "issue":1858,
  "node_id":"IC_kwDODBCWws5NcZ-z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-02T14:54:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"MacOS and Linux can't agree on whether the string format for `int64_t` is `%lld` (MacOS) or `%ld` (Linux). This is Linux (MacOS isn't complaining):\r\n\r\n```\r\n  /home/runner/work/awkward/awkward/src/libawkward/forth/ForthMachine.cpp: In member function \u2018void awkward::ForthMachineOf<T, I>::print_number(T) [with T = long int; I = int]\u2019:\r\n  /home/runner/work/awkward/awkward/src/libawkward/forth/ForthMachine.cpp:4301:16: warning: format \u2018%lld\u2019 expects argument of type \u2018long long int\u2019, but argument 2 has type \u2018int64_t\u2019 {aka \u2018long int\u2019} [-Wformat=]\r\n   4301 |     printf(\"%lld \", num);\r\n        |             ~~~^    ~~~\r\n        |                |    |\r\n        |                |    int64_t {aka long int}\r\n        |                long long int\r\n        |             %ld\r\n  /home/runner/work/awkward/awkward/src/libawkward/forth/ForthMachine.cpp: In instantiation of \u2018void awkward::ForthMachineOf<T, I>::internal_run(bool, int64_t) [with T = int; I = int; int64_t = long int]\u2019:\r\n  /home/runner/work/awkward/awkward/src/libawkward/forth/ForthMachine.cpp:4304:39:   required from here\r\n  /home/runner/work/awkward/awkward/src/libawkward/forth/ForthMachine.cpp:3824:27: warning: format \u2018%lld\u2019 expects argument of type \u2018long long int\u2019, but argument 2 has type \u2018int64_t\u2019 {aka \u2018long int\u2019} [-Wformat=]\r\n   3824 |               printf(\"<%lld> \", stack_depth_);\r\n        |                        ~~~^     ~~~~~~~~~~~~\r\n        |                           |     |\r\n        |                           |     int64_t {aka long int}\r\n        |                           long long int\r\n        |                        %ld\r\n  /home/runner/work/awkward/awkward/src/libawkward/forth/ForthMachine.cpp: In instantiation of \u2018void awkward::ForthMachineOf<T, I>::internal_run(bool, int64_t) [with T = long int; I = int; int64_t = long int]\u2019:\r\n  /home/runner/work/awkward/awkward/src/libawkward/forth/ForthMachine.cpp:4305:39:   required from here\r\n  /home/runner/work/awkward/awkward/src/libawkward/forth/ForthMachine.cpp:3824:27: warning: format \u2018%lld\u2019 expects argument of type \u2018long long int\u2019, but argument 2 has type \u2018int64_t\u2019 {aka \u2018long int\u2019} [-Wformat=]\r\n   3824 |               printf(\"<%lld> \", stack_depth_);\r\n        |                        ~~~^     ~~~~~~~~~~~~\r\n        |                           |     |\r\n        |                           |     int64_t {aka long int}\r\n        |                           long long int\r\n        |                        %ld\r\n  [ 96%] Built target awkward-objects\r\n```\r\n\r\nThese are _debugging_ print-outs for the ForthMachine, rarely used.",
  "created_at":"2022-11-01T22:55:10Z",
  "id":1299327389,
  "issue":1858,
  "node_id":"IC_kwDODBCWws5Ncimd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T22:55:10Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Windows has a few complaints:\r\n\r\n```\r\nawkward_ListOffsetArray_argsort_strings.cpp\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\xutility(240,43): warning C4244: 'argument': conversion from '__int64' to 'int', possible loss of data [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\algorithm(6926): message : see reference to function template instantiation 'decltype(auto) std::_Ref_fn<_Pr>::operator ()<__int64&,__int64&>(__int64 &,__int64 &)' being compiled [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n            with\r\n            [\r\n                _Pr=awkward_ListOffsetArray_argsort_strings_impl::<lambda_1f36786eccba502c48a687bbcb6c0be0>\r\n            ]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\algorithm(7495): message : see reference to function template instantiation '_BidIt *std::_Insertion_sort_unchecked<__int64*,std::_Ref_fn<_Pr>>(const _BidIt,const _BidIt,std::_Ref_fn<_Pr>)' being compiled [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n            with\r\n            [\r\n                _BidIt=__int64 *,\r\n                _Pr=awkward_ListOffsetArray_argsort_strings_impl::<lambda_1f36786eccba502c48a687bbcb6c0be0>\r\n            ]\r\n  D:\\a\\awkward\\awkward\\src\\cpu-kernels\\awkward_ListOffsetArray_argsort_strings.cpp(49): message : see reference to function template instantiation 'void std::stable_sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>,awkward_ListOffsetArray_argsort_strings_impl::<lambda_1f36786eccba502c48a687bbcb6c0be0>>(const _BidIt,const _BidIt,_Pr)' being compiled [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n            with\r\n            [\r\n                _Ty=int64_t,\r\n                _BidIt=std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int64_t>>>,\r\n                _Pr=awkward_ListOffsetArray_argsort_strings_impl::<lambda_1f36786eccba502c48a687bbcb6c0be0>\r\n            ]\r\n  D:\\a\\awkward\\awkward\\src\\cpu-kernels\\awkward_ListOffsetArray_argsort_strings.cpp(91): message : see reference to function template instantiation 'Error awkward_ListOffsetArray_argsort_strings_impl<true,true,true>(int64_t *,const int64_t *,int64_t,const char *,const int64_t *,const int64_t *)' being compiled [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\xutility(240,43): warning C4244: 'argument': conversion from 'const _Ty' to 'int', possible loss of data [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n            with\r\n            [\r\n                _Ty=int64_t\r\n            ]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\xutility(5816): message : see reference to function template instantiation 'decltype(auto) std::_Ref_fn<_Pr>::operator ()<__int64&,const _Ty&>(__int64 &,const _Ty &)' being compiled [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n            with\r\n            [\r\n                _Pr=awkward_ListOffsetArray_argsort_strings_impl::<lambda_1f36786eccba502c48a687bbcb6c0be0>,\r\n                _Ty=__int64\r\n            ]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\algorithm(6435): message : see reference to function template instantiation '_FwdIt std::lower_bound<_BidIt,__int64,_Pr>(_FwdIt,const _FwdIt,const _Ty &,_Pr)' being compiled [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n            with\r\n            [\r\n                _FwdIt=__int64 *,\r\n                _BidIt=__int64 *,\r\n                _Pr=std::_Ref_fn<awkward_ListOffsetArray_argsort_strings_impl::<lambda_1f36786eccba502c48a687bbcb6c0be0>>,\r\n                _Ty=__int64\r\n            ]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\algorithm([645](https://github.com/scikit-hep/awkward/actions/runs/3373434075/jobs/5597998673#step:4:646)7): message : see reference to function template instantiation 'void std::_Buffered_inplace_merge_divide_and_conquer<_BidIt,_Pr>(_BidIt,_BidIt,_BidIt,__int64,__int64,__int64 *const ,const ptrdiff_t,_Pr)' being compiled [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n            with\r\n            [\r\n                _BidIt=__int64 *,\r\n                _Pr=std::_Ref_fn<awkward_ListOffsetArray_argsort_strings_impl::<lambda_1f36786eccba502c48a687bbcb6c0be0>>\r\n            ]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\algorithm([650](https://github.com/scikit-hep/awkward/actions/runs/3373434075/jobs/5597998673#step:4:651)2): message : see reference to function template instantiation 'void std::_Buffered_inplace_merge_unchecked_impl<_BidIt,_Pr>(_BidIt,_BidIt,_BidIt,__int64,__int64,__int64 *const ,const ptrdiff_t,_Pr)' being compiled [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n            with\r\n            [\r\n                _BidIt=__int64 *,\r\n                _Pr=std::_Ref_fn<awkward_ListOffsetArray_argsort_strings_impl::<lambda_1f36786eccba502c48a687bbcb6c0be0>>\r\n            ]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\algorithm(7483): message : see reference to function template instantiation 'void std::_Buffered_inplace_merge_unchecked<_BidIt,_Pr>(_BidIt,_BidIt,_BidIt,__int64,__int64,__int64 *const ,const ptrdiff_t,_Pr)' being compiled [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n            with\r\n            [\r\n                _BidIt=__int64 *,\r\n                _Pr=std::_Ref_fn<awkward_ListOffsetArray_argsort_strings_impl::<lambda_1f36786eccba502c48a687bbcb6c0be0>>\r\n            ]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\algorithm(7500): message : see reference to function template instantiation 'void std::_Stable_sort_unchecked<__int64*,std::_Ref_fn<_Pr>>(const _BidIt,const _BidIt,const __int64,__int64 *const ,const ptrdiff_t,std::_Ref_fn<_Pr>)' being compiled [D:\\a\\awkward\\awkward\\build\\temp.win-amd64-cpython-38\\Release\\awkward-cpu-kernels-objects.vcxproj]\r\n            with\r\n            [\r\n                _Pr=awkward_ListOffsetArray_argsort_strings_impl::<lambda_1f36786eccba502c48a687bbcb6c0be0>,\r\n                _BidIt=__int64 *\r\n            ]\r\n    Generating Code...\r\n```",
  "created_at":"2022-11-01T22:56:09Z",
  "id":1299328053,
  "issue":1858,
  "node_id":"IC_kwDODBCWws5Nciw1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T22:56:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, that did it!\r\n\r\nAnd for the MacOS, Linux disagreement about `%lld` and `%ld`, how about if I just cast the number as \"`long long int`\" before string-formatting it?",
  "created_at":"2022-11-01T23:13:21Z",
  "id":1299342947,
  "issue":1858,
  "node_id":"IC_kwDODBCWws5NcmZj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-01T23:13:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I don't see any warnings in CI. On my Mac, I see just one, and on Linux, none.\r\n\r\n@ianna, could you review this and make sure I'm not bulldozing over something important?",
  "created_at":"2022-11-01T23:23:38Z",
  "id":1299350190,
  "issue":1858,
  "node_id":"IC_kwDODBCWws5NcoKu",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-01T23:23:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The casts don't prevent the problems the warnings are warning about, but they do make type assumptions explicit in the code, which would make it easier to debug the kinds of errors the warnings are warning about, if that ever happens (integer overflows and stuff).",
  "created_at":"2022-11-01T23:31:08Z",
  "id":1299354901,
  "issue":1858,
  "node_id":"IC_kwDODBCWws5NcpUV",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-01T23:31:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, all of the cases in which an argument is not needed is now documented with the argument name in a comment (`/* argument_name */`). Some of these cases can be cleaned up with a refactoring that removes this argument completely. In other cases, the argument should still be there for symmetry or because we're adhering to an API from another library (RapidJSON).",
  "created_at":"2022-11-02T14:59:27Z",
  "id":1300604932,
  "issue":1858,
  "node_id":"IC_kwDODBCWws5NhagE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-02T14:59:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1859?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1859](https://codecov.io/gh/scikit-hep/awkward/pull/1859?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f0ad088) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/87049ac174e72584f09b4f0062a34c983f35a439?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (87049ac) will **decrease** coverage by `0.03%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1859?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_lookup.py](https://codecov.io/gh/scikit-hep/awkward/pull/1859/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2xvb2t1cC5weQ==) | `98.97% <100.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1859/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1859/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1859/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1859/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1859/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1859/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-11-02T17:15:48Z",
  "id":1300950670,
  "issue":1859,
  "node_id":"IC_kwDODBCWws5Niu6O",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-03T14:11:03Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, I saw that locally on my Mac, but not in the CI. I couldn't figure out what to do with it because it's already being cast. (Switching the `static_cast` syntax for a C-style cast doesn't change anything.)\r\n\r\nBut having only one warning to ignore is a better situation to be in than a hundred warnings to ignore. The problem is being able to see new issues come up through the smokescreen of old warnings, so fewer is better, but the difference between zero and one is not a make-or-break difference.",
  "created_at":"2022-11-03T12:33:36Z",
  "id":1302032476,
  "issue":1859,
  "node_id":"IC_kwDODBCWws5Nm3Bc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-03T12:33:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Yes, I saw that locally on my Mac, but not in the CI. I couldn't figure out what to do with it because it's already being cast. (Switching the `static_cast` syntax for a C-style cast doesn't change anything.)\r\n> \r\n> But having only one warning to ignore is a better situation to be in than a hundred warnings to ignore. The problem is being able to see new issues come up through the smokescreen of old warnings, so fewer is better, but the difference between zero and one is not a make-or-break difference.\r\n\r\nI think, a specialization fixes it. Please, check - thanks! ",
  "created_at":"2022-11-03T13:02:47Z",
  "id":1302071258,
  "issue":1859,
  "node_id":"IC_kwDODBCWws5NnAfa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-03T13:03:05Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"oh... sorry, did I break the build?",
  "created_at":"2022-11-03T13:09:09Z",
  "id":1302088610,
  "issue":1859,
  "node_id":"IC_kwDODBCWws5NnEui",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-03T13:09:09Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Is `copy_as` a special C++ function? The warning was in a cast that had no mention of \"`copy_as`\" anywhere, so if this does fix it, I'm mystified.\r\n\r\nThe failure in one of the tests appears to be a compilation error in the new code:\r\n\r\n```\r\n      [  3%] Building CXX object CMakeFiles/awkward-cpu-kernels-objects.dir/src/cpu-kernels/awkward_ByteMaskedArray_getitem_nextcarry.cpp.o\r\n      In file included from /home/runner/work/awkward/awkward/include/awkward/builder/OptionBuilder.h:10,\r\n                       from /home/runner/work/awkward/awkward/src/libawkward/builder/BoolBuilder.cpp:7:\r\n      /home/runner/work/awkward/awkward/src/awkward/cpp-headers/awkward/GrowableBuffer.h:146:15: error: explicit specialization in non-namespace scope \u2018class awkward::Panel<PRIMITIVE>\u2019\r\n        146 |     template <>\r\n            |               ^\r\n      make[2]: *** [CMakeFiles/awkward-objects.dir/build.make:90: CMakeFiles/awkward-objects.dir/src/libawkward/builder/BoolBuilder.cpp.o] Error 1\r\n      make[1]: *** [CMakeFiles/Makefile2:190: CMakeFiles/awkward-objects.dir/all] Error 2\r\n      make[1]: *** Waiting for unfinished jobs....\r\n```\r\n\r\nIt only seems to affect Linux/gcc, though.",
  "created_at":"2022-11-03T13:15:41Z",
  "id":1302101337,
  "issue":1859,
  "node_id":"IC_kwDODBCWws5NnH1Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-03T13:15:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Is `copy_as` a special C++ function? The warning was in a cast that had no mention of \"`copy_as`\" anywhere, so if this does fix it, I'm mystified.\r\n> \r\n> The failure in one of the tests appears to be a compilation error in the new code:\r\n> \r\n> ```\r\n>       [  3%] Building CXX object CMakeFiles/awkward-cpu-kernels-objects.dir/src/cpu-kernels/awkward_ByteMaskedArray_getitem_nextcarry.cpp.o\r\n>       In file included from /home/runner/work/awkward/awkward/include/awkward/builder/OptionBuilder.h:10,\r\n>                        from /home/runner/work/awkward/awkward/src/libawkward/builder/BoolBuilder.cpp:7:\r\n>       /home/runner/work/awkward/awkward/src/awkward/cpp-headers/awkward/GrowableBuffer.h:146:15: error: explicit specialization in non-namespace scope \u2018class awkward::Panel<PRIMITIVE>\u2019\r\n>         146 |     template <>\r\n>             |               ^\r\n>       make[2]: *** [CMakeFiles/awkward-objects.dir/build.make:90: CMakeFiles/awkward-objects.dir/src/libawkward/builder/BoolBuilder.cpp.o] Error 1\r\n>       make[1]: *** [CMakeFiles/Makefile2:190: CMakeFiles/awkward-objects.dir/all] Error 2\r\n>       make[1]: *** Waiting for unfinished jobs....\r\n> ```\r\n> \r\n> It only seems to affect Linux/gcc, though.\r\n\r\nThe warning originated in `Complex128Builder` where a buffer of `integers` is converted to a buffer of `complex` numbers:\r\n```\r\n/Users/yana/Projects/PR1852/awkward/src/libawkward/builder/Complex128Builder.cpp:24:42: note: in instantiation of function template specialization 'awkward::GrowableBuffer<long long>::copy_as<std::complex<double>>' requested here\r\n      std::move(GrowableBuffer<int64_t>::copy_as<std::complex<double>>(old)));\r\n                                         ^\r\n```",
  "created_at":"2022-11-03T13:21:47Z",
  "id":1302108811,
  "issue":1859,
  "node_id":"IC_kwDODBCWws5NnJqL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-03T13:21:47Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"I think the build is not C++14 compliant:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/87049ac174e72584f09b4f0062a34c983f35a439/CMakeLists.txt#L50\r\n\r\nWhat used to be in CMakeLists.txt was C++11 in general, C++14 for Windows because of the compilers available, but this seems to be saying it should be C++11 for everybody. The RDataFrame code uses C++17, but that's generated at runtime and uses Cling, rather than the compiler that builds the static libraries. Does any part of GrowableBuffer or LayoutBuilder use C++17?\r\n\r\nI don't have strong opinions on what standard we _should_ be using. It used to be C++11 so that we could use old Python Docker images (`manylinux`), but that requirement went away with Python 2. If there's reason for the whole C++ codebase to be C++17, let's do it. But it doesn't look like that's what the CMakeLists.txt is saying.",
  "created_at":"2022-11-03T13:41:01Z",
  "id":1302132986,
  "issue":1859,
  "node_id":"IC_kwDODBCWws5NnPj6",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-03T13:41:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've reverted the commit. I do not see the compilation warning in a master branch checked out locally. Please, go ahead and merge this PR. I'll double check again. Thanks.",
  "created_at":"2022-11-03T13:49:43Z",
  "id":1302144239,
  "issue":1859,
  "node_id":"IC_kwDODBCWws5NnSTv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-03T13:50:06Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The master does not give any compilation warnings. However, if I enable my ROOT environment I get it. I'll try to check if this can be fixed - in another PR.",
  "created_at":"2022-11-03T17:04:39Z",
  "id":1302413572,
  "issue":1859,
  "node_id":"IC_kwDODBCWws5NoUEE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-03T17:04:39Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1860?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1860](https://codecov.io/gh/scikit-hep/awkward/pull/1860?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fe2dad4) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d58a7e5ba0ec77db17438df454e797f05016b01c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d58a7e5) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1860?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1860/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1860/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1860/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1860/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1860/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1860/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-11-04T09:29:04Z",
  "id":1303168699,
  "issue":1860,
  "node_id":"IC_kwDODBCWws5NrMa7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T14:28:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I've just looked at the updates since my last review, and I sign off on it. I don't know if you're done (your last comment was 35 minutes ago), so feel free to squash-and-merge when you're done.",
  "created_at":"2022-11-07T15:16:05Z",
  "id":1305764047,
  "issue":1860,
  "node_id":"IC_kwDODBCWws5N1GDP",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-07T15:16:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1861?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1861](https://codecov.io/gh/scikit-hep/awkward/pull/1861?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1a81bb0) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/edc0d67f6fa51831299c7e7d10893003d8956bfa?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edc0d67) will **increase** coverage by `0.06%`.\n> The diff coverage is `91.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1861?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_prettyprint.py](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3ByZXR0eXByaW50LnB5) | `70.00% <91.66%> (+0.69%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `25.00% <0.00%> (-1.67%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_num.py](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19udW0ucHk=) | `100.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_softmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb2Z0bWF4LnB5) | `100.00% <0.00%> (\u00f8)` | |\n| ... and [19 more](https://codecov.io/gh/scikit-hep/awkward/pull/1861/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-03T19:56:33Z",
  "id":1302598232,
  "issue":1861,
  "node_id":"IC_kwDODBCWws5NpBJY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-12T15:35:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I couldn't reproduce the crash, but the test and the code that it tests can simply be removed, for the reasons explained in #1863. That will make its way into a version 1.10.2.",
  "created_at":"2022-11-04T15:13:45Z",
  "id":1303731896,
  "issue":1862,
  "node_id":"IC_kwDODBCWws5NtV64",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T15:13:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"If you'd be ready to test a 1.10.2rc1 today, @danigm, we can get that process started. A v1 build takes 4 hours to release, so if you're ready to test, we could do two cycles today: 1.10.2rc1 and 1.10.2.",
  "created_at":"2022-11-04T15:36:42Z",
  "id":1303773854,
  "issue":1862,
  "node_id":"IC_kwDODBCWws5NtgKe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T15:36:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"I can't test the rc today, but maybe I can test the next week. In any case, I've disabled the test in the [opensuse Tumbleweed distribution](https://build.opensuse.org/package/view_file/devel:languages:python:numeric/python-awkward/python-awkward.spec?expand=1).\r\n\r\nIf this will be removed in the following release, I think that this can be closed once the release is done. I can update the package and enable all the tests again.",
  "created_at":"2022-11-04T15:58:43Z",
  "id":1303802472,
  "issue":1862,
  "node_id":"IC_kwDODBCWws5NtnJo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T15:58:43Z",
  "user":"MDQ6VXNlcjUwMzUw"
 },
 {
  "author_association":"MEMBER",
  "body":"Since v1 releases use a lot of PyPI quota and we can't remove non-RC releases, I want to do a trial run with 1.10.2rc1 and wait for a confirmation before releasing 1.10.2. (That is, unless you physically can't test openSUSE packaging with an RC release, in which case, we'd go directly to 1.10.2.)\r\n\r\nIt's fine if this gets tested next week. I was just hoping to move it to the \"done\" category and put it out of mind. `:)`",
  "created_at":"2022-11-04T16:22:15Z",
  "id":1303832480,
  "issue":1862,
  "node_id":"IC_kwDODBCWws5Ntueg",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T16:22:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"> Since v1 releases use a lot of PyPI quota and we can't remove non-RC releases, I want to do a trial run with 1.10.2rc1 and wait for a confirmation before releasing 1.10.2. (That is, unless you physically can't test openSUSE packaging with an RC release, in which case, we'd go directly to 1.10.2.)\r\n> \r\n> It's fine if this gets tested next week. I was just hoping to move it to the \"done\" category and put it out of mind. `:)`\r\n\r\nIndeed, I've tested the current `2.0.0rc3` and it looks like it's building correctly.",
  "created_at":"2022-11-07T16:30:31Z",
  "id":1305868907,
  "issue":1862,
  "node_id":"IC_kwDODBCWws5N1fpr",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-11-07T16:30:31Z",
  "user":"MDQ6VXNlcjUwMzUw"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think we can close this then! Thanks! :)",
  "created_at":"2022-11-07T17:52:53Z",
  "id":1305976869,
  "issue":1862,
  "node_id":"IC_kwDODBCWws5N16Al",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T17:52:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Actually... it would work in 2.0.0rc3, even without the #1863 fix, because the specific LayoutBuilder that was causing trouble for you was already not in the `main`/2.0.0rcX branch; PR #1863 removed it from `main-v1`/1.10.2rcX.\r\n\r\nThe `main` branch consists of Awkward 2.x development, and the latest release in this line is 2.0.0rc3.\r\n\r\nThe `main-v1` branch consists of Awkward 1.x maintenance, and the latest release in this line is 1.10.2rc1.\r\n\r\nWill you want to be packaging 2.x development or 1.x maintenance or both? The non-RC 2.0.0 release is scheduled for early December (1 month away).\r\n\r\nIf you want to package the 1.x maintenance branch, please test 1.10.2rc1. If that works, I'll release 1.10.2, which can be used in a package today. Thanks!",
  "created_at":"2022-11-07T19:40:51Z",
  "id":1306098346,
  "issue":1862,
  "node_id":"IC_kwDODBCWws5N2Xqq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T19:40:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"In opensuse tumbleweed we'll have the latest release available, if that doesn't break a lot of other packages that depends on it, so we can use the version 2.x as soon as it's released.\r\n\r\nBy the way, I've just tested the `main-v1` branch, and it [builds correctly](https://build.opensuse.org/package/show/home:dgarcia:branches:devel:languages:python:numeric/python-awkward). So if you want to create a new release, I'll update the package as soon as it's there.",
  "created_at":"2022-11-08T17:13:29Z",
  "id":1307555856,
  "issue":1862,
  "node_id":"IC_kwDODBCWws5N77gQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-08T17:13:29Z",
  "user":"MDQ6VXNlcjUwMzUw"
 },
 {
  "author_association":"MEMBER",
  "body":"In that case, I'll start 1.10.2. [It's on its way!](https://github.com/scikit-hep/awkward/actions/runs/3421747324)",
  "created_at":"2022-11-08T17:28:34Z",
  "id":1307574654,
  "issue":1862,
  "node_id":"IC_kwDODBCWws5N8AF-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-08T17:28:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1863?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> :exclamation: No coverage uploaded for pull request base (`main-v1@77001f3`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-11-04T15:25:04Z",
  "id":1303760474,
  "issue":1863,
  "node_id":"IC_kwDODBCWws5Ntc5a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T17:08:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I'll merge this when it's done. Thanks! (The auto-merge feature isn't available because I didn't manage to get branch protection to work on the `main-v1` branch.)",
  "created_at":"2022-11-04T16:56:47Z",
  "id":1303880812,
  "issue":1863,
  "node_id":"IC_kwDODBCWws5Nt6Rs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T16:56:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks for this Doug. There are definitely a few typetracer functions that we stub out, so it's just a matter of adding them :)",
  "created_at":"2022-11-04T17:00:41Z",
  "id":1303886162,
  "issue":1864,
  "node_id":"IC_kwDODBCWws5Nt7lS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T17:00:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Sounds good! Yeah I've just been raising them for visibility as I run into them \ud83d\udc4d ",
  "created_at":"2022-11-04T17:43:43Z",
  "id":1303938343,
  "issue":1864,
  "node_id":"IC_kwDODBCWws5NuIUn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T17:43:43Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I can see that not all our includes are `iwyu`:\r\n```zsh\r\n/Users/runner/work/awkward/awkward/include/awkward/datetime_util.h:27:21: error: unknown type name 'dtype'\r\n      units_to_format(dtype dt, const std::string& units, int64_t step);\r\n                      ^\r\n```",
  "created_at":"2022-11-04T17:02:38Z",
  "id":1303888270,
  "issue":1865,
  "node_id":"IC_kwDODBCWws5Nt8GO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-04T17:02:38Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1865?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1865](https://codecov.io/gh/scikit-hep/awkward/pull/1865?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (37a820b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/edc0d67f6fa51831299c7e7d10893003d8956bfa?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edc0d67) will **increase** coverage by `0.06%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 37a820b differs from pull request most recent head 9ad61f6. Consider uploading reports for the commit 9ad61f6 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1865?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `25.00% <0.00%> (-1.67%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_num.py](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19udW0ucHk=) | `100.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `66.66% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_softmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb2Z0bWF4LnB5) | `100.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `100.00% <0.00%> (\u00f8)` | |\n| ... and [18 more](https://codecov.io/gh/scikit-hep/awkward/pull/1865/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-11T10:17:26Z",
  "id":1311502715,
  "issue":1865,
  "node_id":"IC_kwDODBCWws5OK_F7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T13:32:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Now that the packages have been split, this .clang-format can be reapplied in a new PR (with the modifications described above). Thanks!",
  "created_at":"2022-11-18T19:13:48Z",
  "id":1320429255,
  "issue":1865,
  "node_id":"IC_kwDODBCWws5OtCbH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T19:13:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"OK - I think this may be interface changes re: NanoEvents. Digging.",
  "created_at":"2022-11-05T14:22:53Z",
  "id":1304556269,
  "issue":1866,
  "node_id":"IC_kwDODBCWws5NwfLt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T14:22:53Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Ah! I think I found it, it's because I'm not using the global behavior namespace. It appears that more \"private\" behaviors are not propagated like they are in awkward1.\r\n\r\nHere is a repro without any coffea:\r\n```python3\r\nimport awkward as ak\r\nimport numpy as np\r\n\r\nbehavior = {}\r\n\r\n@ak.mixin_class(behavior)\r\nclass Point:\r\n    def distance(self, other):\r\n        return np.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)\r\n\r\n    @ak.mixin_class_method(np.equal, {\"Point\"})\r\n    def point_equal(self, other):\r\n        return np.logical_and(self.x == other.x, self.y == other.y)\r\n\r\n    @ak.mixin_class_method(np.abs)\r\n    def point_abs(self):\r\n        return np.sqrt(self.x ** 2 + self.y ** 2)\r\n\r\n    @ak.mixin_class_method(np.add, {\"Point\"})\r\n    def point_add(self, other):\r\n        return ak.zip(\r\n            {\"x\": self.x + other.x, \"y\": self.y + other.y}, with_name=\"Point\",\r\n        )\r\n\r\ntest = ak.Array([[{\"x\": float(i), \"y\": float(i)}, {\"x\": float(i)*0.5, \"y\": float(i)*0.5}] for i in range(100)], with_name=\"Point\", behavior=behavior)\r\n\r\nprint(test + test)\r\n\r\ncombos = ak.combinations(test, 2)\r\n\r\nprint(combos[\"0\"] + combos[\"1\"])  # fails here because of lost behavior\r\n```\r\n\r\n@jpivarski @agoose77 here - this is the properly worked out issue in awkward 2.0.0rc2 alone. The above program executes successfully (and I'm pretty sure also correctly from a functional standpoint) in awkward 1.10.1. \r\n\r\nApologies for the spam, trying to make the issue exactly known took some digging.\r\n",
  "created_at":"2022-11-05T15:02:31Z",
  "id":1304562978,
  "issue":1866,
  "node_id":"IC_kwDODBCWws5Nwg0i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T15:37:06Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "author_association":"MEMBER",
  "body":"The intention is to propagate private behaviors in Awkward v2 exactly as they had been in Awkward v1.\r\n\r\nIf you remember, though, we had to discover these cases of lost behavior-passing by exhaustion in the early history of Awkward and Coffea. The fact that Coffea passes behaviors locally has been very useful for finding these oversights!\r\n\r\nIn principle, there should be a lot fewer lost behaviors to find and fix because the v2 implementation was copied from the v1 implementation. But if a test didn't explicitly check for lost behavior in a particular situation (as seems to be the case here), then it could have been lost in the translation from C++ to Python.",
  "created_at":"2022-11-05T16:29:56Z",
  "id":1304581419,
  "issue":1866,
  "node_id":"IC_kwDODBCWws5NwlUr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T16:29:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1867?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1867](https://codecov.io/gh/scikit-hep/awkward/pull/1867?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bf7351e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/edc0d67f6fa51831299c7e7d10893003d8956bfa?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (edc0d67) will **decrease** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1867?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/1867/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb21iaW5hdGlvbnMucHk=) | `93.33% <100.00%> (+0.47%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1867/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1867/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1867/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.21% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1867/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1867/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1867/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-11-05T15:50:00Z",
  "id":1304571382,
  "issue":1867,
  "node_id":"IC_kwDODBCWws5Nwi32",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T16:55:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks for finding it!\r\n\r\nThe only change that I've made is to keep the `_impl` call strictly pass-through and use the `ak._util.behavior_of` function, which exists for this purpose. It defines rules for which behaviors win in case of conflict (which can be changed centrally if we ever decide to do that, which I doubt).",
  "created_at":"2022-11-05T16:25:55Z",
  "id":1304577606,
  "issue":1867,
  "node_id":"IC_kwDODBCWws5NwkZG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T16:25:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, I haven't tried running your reproducer yet. I'll take a look and see if it can be turned into a test.",
  "created_at":"2022-11-05T16:26:47Z",
  "id":1304578519,
  "issue":1867,
  "node_id":"IC_kwDODBCWws5NwknX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T16:26:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, this definitely toggles the reproducer. (I had to go hunting for nano_dy.root; I shouldn't have deleted it after the last issue!)\r\n\r\nThe reproducer can't be included as a test as-is, but I think I can make an alternative.\r\n\r\nOr\u2014it seems you've already done that: https://github.com/scikit-hep/awkward/issues/1866#issuecomment-1304562978.",
  "created_at":"2022-11-05T16:42:38Z",
  "id":1304583797,
  "issue":1867,
  "node_id":"IC_kwDODBCWws5Nwl51",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-05T16:44:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1868?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1868](https://codecov.io/gh/scikit-hep/awkward/pull/1868?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (de70891) into [ianna/cuda-status-tests](https://codecov.io/gh/scikit-hep/awkward/commit/9de95f10c3225051624a1b481690206be895673f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9de95f1) will **decrease** coverage by `0.59%`.\n> The diff coverage is `86.36%`.\n\n> :exclamation: Current head de70891 differs from pull request most recent head addffc7. Consider uploading reports for the commit addffc7 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1868?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.41% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `88.46% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_v2.py](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3YyLnB5) | `0.00% <0.00%> (-100.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zaW5nbGV0b25zLnB5) | `96.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZGF0YWZyYW1lLnB5) | `18.18% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_with\\_name.py](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX25hbWUucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `65.00% <37.50%> (-6.43%)` | :arrow_down: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `66.09% <50.00%> (-5.58%)` | :arrow_down: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.04% <55.55%> (\u00f8)` | |\n| ... and [88 more](https://codecov.io/gh/scikit-hep/awkward/pull/1868/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-07T11:19:24Z",
  "id":1305460867,
  "issue":1868,
  "node_id":"IC_kwDODBCWws5Nz8CD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-09T15:32:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"How is this related to #1809?",
  "created_at":"2022-11-18T18:25:45Z",
  "id":1320382433,
  "issue":1868,
  "node_id":"IC_kwDODBCWws5Os2_h",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T18:25:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1869?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1869](https://codecov.io/gh/scikit-hep/awkward/pull/1869?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f384a08) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d58a7e5ba0ec77db17438df454e797f05016b01c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d58a7e5) will **increase** coverage by `0.05%`.\n> The diff coverage is `97.67%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1869?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pheC5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `25.00% <0.00%> (-1.67%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjb21iaW5hdGlvbnMucHk=) | `81.25% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_categories.py](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXRlZ29yaWVzLnB5) | `100.00% <100.00%> (+11.11%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb21iaW5hdGlvbnMucHk=) | `92.85% <100.00%> (-0.48%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.19% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `95.00% <100.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maXJzdHMucHk=) | `88.23% <100.00%> (\u00f8)` | |\n| ... and [27 more](https://codecov.io/gh/scikit-hep/awkward/pull/1869/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-07T11:38:43Z",
  "id":1305479525,
  "issue":1869,
  "node_id":"IC_kwDODBCWws5N0All",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T11:38:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski in this PR I intended on replacing `behaviorof` with `wrap(..., like=)` where possible to improve readability. Did I happen to miss some places and introduce a surplus `like=`?  ",
  "created_at":"2022-11-07T15:27:52Z",
  "id":1305779692,
  "issue":1869,
  "node_id":"IC_kwDODBCWws5N1J3s",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-07T15:27:52Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Thanks! That's a bad copy-paste from the `pyarrow.lib.PyExtensionType` case.",
  "created_at":"2022-11-09T19:12:54Z",
  "id":1309238827,
  "issue":1870,
  "node_id":"IC_kwDODBCWws5OCWYr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-09T19:12:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1871?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1871](https://codecov.io/gh/scikit-hep/awkward/pull/1871?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7801f58) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/21c81e1214773b55d8e9127df222217b28a23a67?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (21c81e1) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1871?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1871/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `88.46% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1871/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1871/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1871/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.42% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1871/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1871/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1871/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-11-09T09:39:41Z",
  "id":1308476454,
  "issue":1871,
  "node_id":"IC_kwDODBCWws5N_cQm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-09T19:29:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1873?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1873](https://codecov.io/gh/scikit-hep/awkward/pull/1873?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2cb7cc0) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/17e674ad7a19511aecb84b1562f978c0e205cf93?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (17e674a) will **decrease** coverage by `0.01%`.\n> The diff coverage is `91.66%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1873?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_ptp.py](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wdHAucHk=) | `91.66% <87.50%> (+0.36%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_corr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3JyLnB5) | `83.33% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_covar.py](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3Zhci5weQ==) | `84.21% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_linear\\_fit.py](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19saW5lYXJfZml0LnB5) | `86.27% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `66.66% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_moment.py](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tb21lbnQucHk=) | `81.25% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_softmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb2Z0bWF4LnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_std.py](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdGQucHk=) | `70.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_var.py](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha192YXIucHk=) | `70.37% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| ... and [5 more](https://codecov.io/gh/scikit-hep/awkward/pull/1873/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-10T20:18:06Z",
  "id":1310845768,
  "issue":1873,
  "node_id":"IC_kwDODBCWws5OIetI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-10T20:18:06Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@veprbl - Thanks for bringing it up. The `axis` parameter is the dimension at which an operation is applied. The outermost dimension is `0`, followed by `1`, etc., and negative values count backward from the innermost: `-1` is the innermost dimension, `-2` is the next level up, etc. Some operations wrap the `axis` if a negative value is given.\r\n\r\nAs a workaround (and if it takes sense) you can check how deep your array is by asking its layout `depth`, the innermost axis is usually `depth - 1`:\r\n`\r\nobj.layout.minmax_depth\r\n`\r\n",
  "created_at":"2022-11-11T07:47:08Z",
  "id":1311346885,
  "issue":1875,
  "node_id":"IC_kwDODBCWws5OKZDF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T07:47:08Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"As @ianna says, you can determine what a negative axis might be by using the depth of the array.\r\n\r\nIn this case, we likely don't provide support for negative axes in `argcartesian` because the result would not work properly with our indexing routines when the arrays have different dimensions; the resulting record array of indices would have dimensions given by the broadcasting result. Looking at the source, we do something like\r\n```\r\n1 * var\r\n1 * 2 * var\r\n---- becomes ----\r\n1 * 1 * var           ] introduce new axes before the final dimension\r\n1 * 2 * var           \r\n---- becomes ----\r\n1 * 2 * var           ] broadcast\r\n1 * 2 * var           \r\n----   result    ---- \r\n1 * 2 * var * (int64, int64)\r\n```\r\n@ianna / @jpivarski can you confirm this guess?\r\n\r\nThis would mean that the `argcartesian` result field corresponding to the first array (originally `1 * var`) no longer indexes into it; the dimensions don't match. This doesn't mean that `argcartesian` is useless in this case, however; you might want to use the \"arg\" in a non-indexing case. Nevertheless, if that's the case, you could just manually broadcast the results yourself with some additional work:\r\n```python\r\nleft = ak.Array([1, 2, 3, 4])\r\nright = ak.Array([[46, 77], [], [123], []])\r\nassert left.ndim == right.ndim - 1\r\n\r\ni = ak.local_index(left)\r\nj = ak.local_index(right)\r\n\r\n# Broadcast `i` to `j` after inserting padding dimensions\r\n# Stop at axis=-1 so that the final dimension doesn't need the same length\r\nk, _ = ak.broadcast_arrays(i[..., np.newaxis, :], j, depth_limit=j.ndim-1)\r\n\r\nindex = ak.cartesian((i, j), axis=-1)\r\n```\r\n\r\nMy gut feeling is that `argcartesian` shouldn't try and handle this `axis=-1` case because to do so fundamentally requires us to broadcast the array, at which point the `arg` part is disconnected from the original array. Though this might sometimes be useful, in general it might be better to have a more predictable API that just doesn't permit this.",
  "created_at":"2022-11-11T09:39:53Z",
  "id":1311460823,
  "issue":1875,
  "node_id":"IC_kwDODBCWws5OK03X",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-11T09:39:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm completely perplexed about why negative `axis` is not supported in `argcartesian`. Even if the result wouldn't be useful as an index, it should still be implemented.\r\n\r\nBut also, if a non-negative `axis` is valid here, a negative one should be valid as well because it's just a translation. As @ianna said, it's a strict function of the given `axis` and the depth. In fact, if the depth has no branching (no records or unions), negative `axis` values are also useless: it's just another way of saying the non-negative `axis` (maybe a mild convenience, which allows you to avoid having to know how deep an array is, and calculate it yourself). With branching, negative `axis` allows one to specify different depths in different branches, which is useful for some functions, but might not be possible to use with `cartesian` and `argcartesian`.\r\n\r\nThe equivalent for `cartesian` attempts to convert the negative `axis` into a non-negative axis, but if there's branching, it gives up:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/80bbef0738a6b7928333d7c705ee1b359991de5b/src/awkward/operations/structure.py#L3359-L3362\r\n\r\nThat's probably what should happen here, too: have negative `axis` be converted into the corresponding non-negative `axis`, using the depth of the array, but only if there is no branching.\r\n\r\nI think, @agoose77, you're saying that the branching case (the only case in which it's more than a convenience) is not possible? If so, I think you're right about that.\r\n\r\nBy the way, all the code samples we're pointing to here are v1. The v2 `argcartesian` is defined in terms of `cartesian`:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/3d93692be9b06843aa6b0051023f235fe406cad5/src/awkward/operations/ak_argcartesian.py#L114-L121\r\n\r\nand the v2 `cartesian` attempts to convert negative `axis` into a non-negative `axis`:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/3d93692be9b06843aa6b0051023f235fe406cad5/src/awkward/operations/ak_cartesian.py#L264-L266\r\n\r\nwhich would mean nothing to do, for v2. (And the v1 problem can be worked around, so it's not a big enough problem to require a fix.)",
  "created_at":"2022-11-11T15:32:14Z",
  "id":1311830001,
  "issue":1875,
  "node_id":"IC_kwDODBCWws5OMO_x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T15:32:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski it might be worth choosing a reference frame when we talk about branching. My argument is that `argcartesian` is less meaningful in the case that the two arrays have different dimensions. This is like branching, but obviously we're talking about two distinct layouts, rather than e.g. two fields in a `RecordArray`. I think that's what you mean by branching too, because you make the point that if the arrays have the same dimension, it would make sense to support negative axes as a convenience. \r\n\r\nWe could support a negative axis even for arrays of differing dimensionality, but the result would be less interpretable. My vote is in favour of allowing negative axes for non \"branching\" arrays, as you suggest :)",
  "created_at":"2022-11-11T18:38:40Z",
  "id":1312060120,
  "issue":1875,
  "node_id":"IC_kwDODBCWws5ONHLY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T18:38:40Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Right\u2014in addition to a single array having multiple depths (due to records or unions), the Cartesian functions also take multiple arrays, and they could have different depths. I hadn't thought about that, but that is an important consideration.\r\n\r\nThe [current ak.cartesian implementation](https://github.com/scikit-hep/awkward/blob/3d93692be9b06843aa6b0051023f235fe406cad5/src/awkward/operations/ak_cartesian.py#L264-L266) gets a non-negative `axis` from the _first_ array; it's the `new_arrays_values[0]` that gets `axis_wrap_if_negative`. So that's the current policy.\r\n\r\nLet's see... is there any guidance from NumPy? What does it do if a negative `axis` is applied to a function of multiple array arguments? `np.concatenate` takes multiple arguments, but they can't have different numbers of dimensions, so that's not a guide: we need a NumPy function of multiple array arguments in which the arrays may have different numbers of dimensions.\r\n\r\n![image](https://user-images.githubusercontent.com/1852447/201423829-bf42928b-9a33-4133-87d0-72ee7dcbbdca.png)\r\n\r\nI opened all the sections of the NumPy User Guide into tabs and searched for `axis` to see all the examples, and the closest I found to the case I'm looking for here is [np.cross](https://numpy.org/doc/stable/reference/generated/numpy.cross.html), which takes `axisa`, `axisb`, `axisc` arguments to deal with the fact that you might want to pick out different axes in the input arguments. In principle, maybe the Cartesian functions could follow suit by allowing the `axis` argument to be an integer (as it is now) _or_ a list of integers, one for each input array. But that's expanding the Cartesian functionality more than we should consider right now.\r\n\r\nSo, at the moment, the v2 Cartesian functions allow negative `axis`, and if they differ in dimension, the difference is resolved in favor of the first array. Is there any reason to change that? The one alternative that I can think of is to refuse input arrays with different numbers of dimensions, but I can see legitimate reasons why one would want to compute Cartesian products on different numbers of dimensions.",
  "created_at":"2022-11-11T20:12:34Z",
  "id":1312156748,
  "issue":1875,
  "node_id":"IC_kwDODBCWws5ONexM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T20:12:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, I think the existing logic for `ak.cartesian` is sensible unless we start adding multiple axis values, which might be a nice feature, but it's a bigger change that we need to justify.\r\n\r\nWhereas, for `ak.argcartesian`, there's an argument to be made against allowing negative axes for different dimension arrays on the basis that the result field corresponding to the padded array won't index into the original non-padded array. Usually I'm in favour of letting users do things even if seem a bit daft, and this might be such a case. I've thought about it some more this afternoon, and perhaps we should allow this (negative axis for non-branching arrays of different dimensions). ",
  "created_at":"2022-11-11T21:15:03Z",
  "id":1312197109,
  "issue":1875,
  "node_id":"IC_kwDODBCWws5ONon1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-11T21:15:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, so I actually checked this out in v2, and we also forbid negative axes when arrays have different dimensions in both `ak.argcartesian` and `ak.cartesian`. So, in v2 the behavior is consistent between the two, but not as permissive as you describe it @jpivarski  (I also made this assumption).\r\n\r\nI think that we should probably leave things as they are; you can still compute a negative axis using `purelist_depth / ndim`, and I think we want negative axes to be predictable and understandable. In particular, it would be nice to avoid introducing argument-order specific behavior (i.e. which array is first in the cartesian product), as that is semantically important outside of the axis choice.",
  "created_at":"2022-11-12T14:01:13Z",
  "id":1312484043,
  "issue":1875,
  "node_id":"IC_kwDODBCWws5OOurL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-12T14:02:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I only found the part where the first array was used, not the part where if other arrays have different negative `axis` interpretations, an exception is raised, but I guess I didn't look far enough. It's different from what I thought, but this is also an acceptable behavior. In fact, more so, because it's always easier to turn error states into new interpretations than the reverse.\r\n\r\nI'll close this issue, because everything is fine as-is (in v2).",
  "created_at":"2022-11-12T14:59:33Z",
  "id":1312500605,
  "issue":1875,
  "node_id":"IC_kwDODBCWws5OOyt9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-12T14:59:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1876?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1876](https://codecov.io/gh/scikit-hep/awkward/pull/1876?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6852650) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3d93692be9b06843aa6b0051023f235fe406cad5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3d93692) will **decrease** coverage by `0.01%`.\n> The diff coverage is `95.41%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1876?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `25.00% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `82.75% <\u00f8> (\u00f8)` | |\n| [src/awkward/behaviors/categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL2NhdGVnb3JpY2FsLnB5) | `73.13% <66.66%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.04% <75.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <75.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `87.64% <85.71%> (\u00f8)` | |\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `88.46% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.42% <100.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `65.00% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.59% <100.00%> (\u00f8)` | |\n| ... and [42 more](https://codecov.io/gh/scikit-hep/awkward/pull/1876/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-12T13:40:14Z",
  "id":1312480537,
  "issue":1876,
  "node_id":"IC_kwDODBCWws5OOt0Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-12T13:40:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1877?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1877](https://codecov.io/gh/scikit-hep/awkward/pull/1877?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (11c3608) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3d93692be9b06843aa6b0051023f235fe406cad5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3d93692) will **decrease** coverage by `0.00%`.\n> The diff coverage is `0.00%`.\n\n> :exclamation: Current head 11c3608 differs from pull request most recent head 84dd966. Consider uploading reports for the commit 84dd966 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1877?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1877/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `66.03% <0.00%> (+0.61%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1877/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1877/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1877/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.42% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1877/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1877/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1877/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1877/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc19ub25lLnB5) | `96.55% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-11-14T08:50:23Z",
  "id":1313299556,
  "issue":1877,
  "node_id":"IC_kwDODBCWws5OR1xk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-14T16:01:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes; although we *could* enable regular-array support for matmul, I can be convinced that it's little-used enough in the awkward context that we can let users convert to NumPy in the interim if needed. Thanks all!",
  "created_at":"2022-11-14T17:48:05Z",
  "id":1314146132,
  "issue":1877,
  "node_id":"IC_kwDODBCWws5OVEdU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-14T17:48:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1878?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1878](https://codecov.io/gh/scikit-hep/awkward/pull/1878?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3fbb4c1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/97840b98fc8aafd75c2024174933186f63a394c2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (97840b9) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1878?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1878/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1878/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1878/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.42% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1878/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1878/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1878/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-11-14T22:19:56Z",
  "id":1314486113,
  "issue":1878,
  "node_id":"IC_kwDODBCWws5OWXdh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-14T22:19:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski",
  "created_at":"2022-11-17T16:10:21Z",
  "id":1318866951,
  "issue":1880,
  "node_id":"IC_kwDODBCWws5OnFAH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-17T16:10:21Z",
  "user":"MDQ6VXNlcjMwNzI0OTIw"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks @Laurits7, this looks like a bug, and the correct fix :)",
  "created_at":"2022-11-17T16:16:14Z",
  "id":1318874991,
  "issue":1880,
  "node_id":"IC_kwDODBCWws5OnG9v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-17T16:16:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@all-contributors please add @Laurits7 for docs",
  "created_at":"2022-11-17T17:45:31Z",
  "id":1318989825,
  "issue":1880,
  "node_id":"IC_kwDODBCWws5OnjAB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-17T17:45:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"@jpivarski \n\nI've put up [a pull request](https://github.com/scikit-hep/awkward/pull/1881) to add @Laurits7! :tada:",
  "created_at":"2022-11-17T17:45:40Z",
  "id":1318989987,
  "issue":1880,
  "node_id":"IC_kwDODBCWws5OnjCj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-17T17:45:40Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "author_association":"MEMBER",
  "body":"The only thing to do for `next-release` is to put warnings into the functions saying that the semantics will likely change. With the warning, this issue doesn't close, but the `next-release` label can be removed.",
  "created_at":"2022-11-30T15:24:22Z",
  "id":1332341814,
  "issue":1882,
  "node_id":"IC_kwDODBCWws5Paew2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-30T15:24:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1883?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1883](https://codecov.io/gh/scikit-hep/awkward/pull/1883?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f65cd32) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/34d40c333d92e869444ab097e289d65661c33b2b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (34d40c3) will **decrease** coverage by `0.02%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1883?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.46% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [awkward-cpp/src/awkward\\_cpp/cpu\\_kernels.py](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-YXdrd2FyZC1jcHAvc3JjL2F3a3dhcmRfY3BwL2NwdV9rZXJuZWxzLnB5) | | |\n| [awkward-cpp/src/awkward\\_cpp/libawkward.py](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-YXdrd2FyZC1jcHAvc3JjL2F3a3dhcmRfY3BwL2xpYmF3a3dhcmQucHk=) | | |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward/pull/1883/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-18T01:03:05Z",
  "id":1319417445,
  "issue":1883,
  "node_id":"IC_kwDODBCWws5OpLZl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T01:03:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1884?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1884](https://codecov.io/gh/scikit-hep/awkward/pull/1884?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a6a8ee7) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/34d40c333d92e869444ab097e289d65661c33b2b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (34d40c3) will **decrease** coverage by `0.02%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1884?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.46% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [awkward-cpp/src/awkward\\_cpp/cpu\\_kernels.py](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-YXdrd2FyZC1jcHAvc3JjL2F3a3dhcmRfY3BwL2NwdV9rZXJuZWxzLnB5) | | |\n| [awkward-cpp/src/awkward\\_cpp/libawkward.py](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-YXdrd2FyZC1jcHAvc3JjL2F3a3dhcmRfY3BwL2xpYmF3a3dhcmQucHk=) | | |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward/pull/1884/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-18T01:27:36Z",
  "id":1319432042,
  "issue":1884,
  "node_id":"IC_kwDODBCWws5OpO9q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T10:13:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1885?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1885](https://codecov.io/gh/scikit-hep/awkward/pull/1885?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e898142) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/34d40c333d92e869444ab097e289d65661c33b2b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (34d40c3) will **decrease** coverage by `0.02%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1885?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `83.87% <0.00%> (-0.19%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.90% <0.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.46% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <0.00%> (-0.14%)` | :arrow_down: |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <0.00%> (-0.10%)` | :arrow_down: |\n| [src/awkward/types/\\_awkward\\_datashape\\_parser.py](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvX2F3a3dhcmRfZGF0YXNoYXBlX3BhcnNlci5weQ==) | `47.72% <0.00%> (-0.01%)` | :arrow_down: |\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [awkward-cpp/src/awkward\\_cpp/cpu\\_kernels.py](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-YXdrd2FyZC1jcHAvc3JjL2F3a3dhcmRfY3BwL2NwdV9rZXJuZWxzLnB5) | | |\n| [awkward-cpp/src/awkward\\_cpp/libawkward.py](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-YXdrd2FyZC1jcHAvc3JjL2F3a3dhcmRfY3BwL2xpYmF3a3dhcmQucHk=) | | |\n| ... and [13 more](https://codecov.io/gh/scikit-hep/awkward/pull/1885/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-18T01:40:28Z",
  "id":1319439138,
  "issue":1885,
  "node_id":"IC_kwDODBCWws5OpQsi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T01:40:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fixed in #1884 ",
  "created_at":"2022-11-18T10:24:23Z",
  "id":1319809852,
  "issue":1886,
  "node_id":"IC_kwDODBCWws5OqrM8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T10:24:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm merging this without testing; it *only* touches the Coverage workflow, which runs on main.",
  "created_at":"2022-11-18T09:50:45Z",
  "id":1319773478,
  "issue":1887,
  "node_id":"IC_kwDODBCWws5OqiUm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T09:50:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1891?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1891](https://codecov.io/gh/scikit-hep/awkward/pull/1891?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (17d6211) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e9439586987f464f2059673682f4621875341e2e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e943958) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 17d6211 differs from pull request most recent head 502023f. Consider uploading reports for the commit 502023f to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-11-18T12:44:14Z",
  "id":1319948091,
  "issue":1891,
  "node_id":"IC_kwDODBCWws5OrM87",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T13:20:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski [this commit](https://github.com/scikit-hep/awkward/actions/runs/3497113584/jobs/5855815030) tested the deployment for Python, whilst [this commit](https://github.com/scikit-hep/awkward/actions/runs/3496389220/jobs/5854246327) tested the C++.\r\n\r\nI installed the wheels using\r\n```bash\r\ncd $(mktemp-d)\r\npython3 -m venv .venv\r\nsource .venv/bin/activate\r\n\r\n# Populate wheels\r\nmkdir wheels\r\npython3 -m pip wheel packaging numpy pyparsing -w ./wheels\r\nunzip <PATH-TO-CPP-WHEELS> -d wheels\r\nunzip <PATH-TO-PY-WHEELS>  -d wheels\r\n\r\n# Install awkward\r\npython3 -m pip install --pre awkward --find-links=./wheels --no-index\r\n\r\n# Test\r\npython3 -c \"import awkward as ak; builder=ak.ArrayBuilder();builder.integer(100);print(builder.snapshot())\"\r\n```\r\n\r\nwhich succeeded. I was also able to build a C++ wheel from the C++ sdist, which passed the `ArrayBuilder` test above.\r\n\r\nWe can just merge this by skipping tests if you're happy to merge; we don't touch anything about from the deployment CI, which doesn't run in the test suite.",
  "created_at":"2022-11-18T13:28:01Z",
  "id":1319994501,
  "issue":1891,
  "node_id":"IC_kwDODBCWws5OrYSF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T13:28:47Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I don't love the Python-as-shell in the workflow, but it seems like the easiest solution. Any suggestions?",
  "created_at":"2022-11-18T22:03:45Z",
  "id":1320576433,
  "issue":1895,
  "node_id":"IC_kwDODBCWws5OtmWx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T22:21:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1895?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1895](https://codecov.io/gh/scikit-hep/awkward/pull/1895?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (0d3e8ca) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/66b6fe2af20a2c9e7f10c6fc56dde9d656476575?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (66b6fe2) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-11-18T22:12:01Z",
  "id":1320583314,
  "issue":1895,
  "node_id":"IC_kwDODBCWws5OtoCS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-18T22:28:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm going to merge this without a sign-off, because I authored the code that's being fixed, and I've tested that it works locally. I haven't checked the upload step, but I assume it will work as it worked before the split. There is additional impetus to upload the non-cpp package as we have already made a GH release.",
  "created_at":"2022-11-19T12:01:21Z",
  "id":1320870071,
  "issue":1897,
  "node_id":"IC_kwDODBCWws5OuuC3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-19T12:01:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1900?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1900](https://codecov.io/gh/scikit-hep/awkward/pull/1900?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8105b29) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/73f8e3430788e949075b9205e975473aaa9e9123?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (73f8e34) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-11-19T14:36:47Z",
  "id":1320898785,
  "issue":1900,
  "node_id":"IC_kwDODBCWws5Ou1Dh",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-19T18:13:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1904?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1904](https://codecov.io/gh/scikit-hep/awkward/pull/1904?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b19bed8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3fc4adb546f871e1e4943830aa566daab30fa02d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3fc4adb) will **increase** coverage by `0.07%`.\n> The diff coverage is `97.40%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1904?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.62% <50.00%> (-0.16%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `72.95% <75.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.85% <100.00%> (+0.57%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.39% <100.00%> (+0.06%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.55% <100.00%> (+0.04%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.45% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `79.82% <100.00%> (+0.33%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `73.00% <100.00%> (+0.24%)` | :arrow_up: |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_drop\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19kcm9wX25vbmUucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| ... and [1 more](https://codecov.io/gh/scikit-hep/awkward/pull/1904/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-22T10:36:36Z",
  "id":1323459501,
  "issue":1904,
  "node_id":"IC_kwDODBCWws5O4mOt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-16T16:14:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm done touching this PR now (hands off) - I fixed the whitespace in my suggestion that didn't merge properly :)",
  "created_at":"2022-11-22T17:48:05Z",
  "id":1324039577,
  "issue":1904,
  "node_id":"IC_kwDODBCWws5O6z2Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T17:48:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> ~~This PR should also increase the `awkward-cpp` version number to `3` in `awkward-cpp/pyproject.toml`.~~\r\n\r\nActually, I'm going to stick to the habit of always changing version numbers as direct commits to `main`, so that the fact that a version has changed is highly visible. I'll do that right now.",
  "created_at":"2022-12-13T19:38:41Z",
  "id":1349592173,
  "issue":1904,
  "node_id":"IC_kwDODBCWws5QcSRt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T19:38:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> \r\n\r\nYay! Hope all corner cases have been discovered! \ud83e\udd73\ud83e\udd73",
  "created_at":"2022-12-16T16:28:21Z",
  "id":1355174676,
  "issue":1904,
  "node_id":"IC_kwDODBCWws5QxlMU",
  "performed_via_github_app":null,
  "reactions":{
   "hooray":1,
   "total_count":1
  },
  "updated_at":"2022-12-16T16:28:21Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"MEMBER",
  "body":"It's weird that build-docs failed with\r\n\r\n```\r\n/home/runner/work/awkward/awkward/docs/user-guide/how-to-convert-buffers.md:54: ERROR: Unknown interpreted text role \"method\".\r\n/home/runner/work/awkward/awkward/docs/user-guide/how-to-create-arraybuilder.md:379: ERROR: Unknown interpreted text role \"classY\".\r\n```\r\n\r\n> LGTM!\r\n\r\nOkay, great! I'm looking at the build-docs error, and if I resolve that, then I'll merge this PR. My question to @nsmith- can be followed up in a new PR, if need be.",
  "created_at":"2022-11-22T15:44:39Z",
  "id":1323878049,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5O6Mah",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T15:44:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"There are more errors than that:\r\n\r\n```\r\n/home/runner/work/awkward/awkward/docs/reference/generated/ak.from_json.rst:24: ERROR: Unexpected indentation.\r\n/home/runner/work/awkward/awkward/docs/reference/generated/ak.from_json.rst:143: ERROR: Unexpected indentation.\r\n/home/runner/work/awkward/awkward/docs/reference/generated/ak.from_json.rst:185: ERROR: Unexpected indentation.\r\n/home/runner/work/awkward/awkward/docs/reference/generated/ak.to_json.rst:13: ERROR: Unexpected indentation.\r\n/home/runner/work/awkward/awkward/docs/reference/generated/ak.to_json.rst:25: ERROR: Unexpected indentation.\r\n/home/runner/work/awkward/awkward/docs/user-guide/how-to-convert-buffers.md:54: ERROR: Unknown interpreted text role \"method\".\r\n/home/runner/work/awkward/awkward/docs/user-guide/how-to-create-arraybuilder.md:379: ERROR: Unknown interpreted text role \"classY\".\r\n```\r\n\r\nThe ones I've been able to trace back do seem to be legitimate errors, but I don't know why they'd stop the build now and not previously. I'll see what happens when I fix the ones I can fix.",
  "created_at":"2022-11-22T15:51:47Z",
  "id":1323888130,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5O6O4C",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T15:51:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> There are more errors than that:\r\n> \r\n> ```\r\n> /home/runner/work/awkward/awkward/docs/reference/generated/ak.from_json.rst:24: ERROR: Unexpected indentation.\r\n> /home/runner/work/awkward/awkward/docs/reference/generated/ak.from_json.rst:143: ERROR: Unexpected indentation.\r\n> /home/runner/work/awkward/awkward/docs/reference/generated/ak.from_json.rst:185: ERROR: Unexpected indentation.\r\n> /home/runner/work/awkward/awkward/docs/reference/generated/ak.to_json.rst:13: ERROR: Unexpected indentation.\r\n> /home/runner/work/awkward/awkward/docs/reference/generated/ak.to_json.rst:25: ERROR: Unexpected indentation.\r\n> /home/runner/work/awkward/awkward/docs/user-guide/how-to-convert-buffers.md:54: ERROR: Unknown interpreted text role \"method\".\r\n> /home/runner/work/awkward/awkward/docs/user-guide/how-to-create-arraybuilder.md:379: ERROR: Unknown interpreted text role \"classY\".\r\n> ```\r\n> \r\n> The ones I've been able to trace back do seem to be legitimate errors, but I don't know why they'd stop the build now and not previously. I'll see what happens when I fix the ones I can fix.\r\n\r\n#1904 triggers the same errors, I haven't found the cause yet. ",
  "created_at":"2022-11-22T15:54:56Z",
  "id":1323892712,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5O6P_o",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T15:54:56Z",
  "user":"MDQ6VXNlcjk3NTE4NzE="
 },
 {
  "author_association":"MEMBER",
  "body":"The only one that I know how to fix is\r\n\r\n```\r\nERROR: Unknown interpreted text role \"classY\".\r\n```\r\n\r\nIt's pretty clear that this should be \"class\". I'll put that fix in, but it should still fail because of those other errors.",
  "created_at":"2022-11-22T15:57:32Z",
  "id":1323896467,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5O6Q6T",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T15:57:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1905?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1905](https://codecov.io/gh/scikit-hep/awkward/pull/1905?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1ef77ed) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2dbaf51bc44931b8485393b0b2fe519b09c96666?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2dbaf51) will **increase** coverage by `0.00%`.\n> The diff coverage is `97.40%`.\n\n> :exclamation: Current head 1ef77ed differs from pull request most recent head bcccb47. Consider uploading reports for the commit bcccb47 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1905?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.46% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `86.07% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `86.30% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/emptyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZW1wdHlmb3JtLnB5) | `87.03% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/indexedoptionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZG9wdGlvbmZvcm0ucHk=) | `93.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/listform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdGZvcm0ucHk=) | `82.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/listoffsetform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdG9mZnNldGZvcm0ucHk=) | `93.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/numpyform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbnVtcHlmb3JtLnB5) | `97.08% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/recordform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvcmVjb3JkZm9ybS5weQ==) | `88.57% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/regularform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvcmVndWxhcmZvcm0ucHk=) | `85.52% <\u00f8> (\u00f8)` | |\n| ... and [95 more](https://codecov.io/gh/scikit-hep/awkward/pull/1905/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-22T15:58:51Z",
  "id":1323898229,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5O6RV1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T15:26:54Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The error here is actually due to `LayoutBuilder` failing in the LayoutBuilder notebook. I can take a quick look. This is actually something we should address; errors in notebooks aren't very visible in the tracebacks.\r\n\r\nAside - fixing the docs warnings is a long-term todo ...",
  "created_at":"2022-11-22T15:59:02Z",
  "id":1323898482,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5O6RZy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T16:05:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"See https://github.com/scikit-hep/awkward/pull/1907",
  "created_at":"2022-11-22T16:05:12Z",
  "id":1323907265,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5O6TjB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T16:05:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It's strange that #1904 now passes but #1905 still fails. Was 8d6abd6ee5f11ade295ec899ab934c89b87dd124 wrong? It doesn't look like that's what the problem is.",
  "created_at":"2022-11-22T17:27:26Z",
  "id":1324017734,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5O6uhG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T17:27:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski in the `docs` action log, [I can see mention](https://github.com/scikit-hep/awkward/actions/runs/3525540904/jobs/5912511860#step:13:538) of a different notebook this time. I'll take a look.",
  "created_at":"2022-11-22T17:33:58Z",
  "id":1324024738,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5O6wOi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T17:33:58Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski looks like this was a \"good\" failure - apparently our test suite doesn't check `ak.Array.mask`! Eventually mypy will catch these kinds of bugs, but it will take time to get there.",
  "created_at":"2022-11-22T17:50:31Z",
  "id":1324041983,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5O60b_",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-22T17:51:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"To avoid letting this get stale, I'm going to merge it now. (After a merge-with-main update and re-test.)",
  "created_at":"2022-11-28T15:25:51Z",
  "id":1329293966,
  "issue":1905,
  "node_id":"IC_kwDODBCWws5PO2qO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T15:25:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, this isn't the only fix, though this is still a good change. I suspect ROOT depends upon an older version of metakernel, which we might need to pin.",
  "created_at":"2022-11-22T16:23:46Z",
  "id":1323931224,
  "issue":1907,
  "node_id":"IC_kwDODBCWws5O6ZZY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T16:23:46Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It looks like `ipykernel` is the culprit; the latest release was yanked. I don't think this has been yanked from conda-forge, which is why we're still running into this. I'm not clear on what the conda-forge yanking mechanism is, or indeed how conda is ignoring the \"yanked\" status.  If conda-forge does support yanking, then this might also just be a caching issue; if `main` ran the `docs` workflow between `6.18.0` being released and subsequently yanked, then this branch would inherit that cache and fail. \r\n\r\nIn any case, the quickest solution will be to reject 6.18.0. I think this might be better done in the conda-forge dependencies of environment.yml.cog, but let's see what happens with requirements.txt first.",
  "created_at":"2022-11-22T16:39:28Z",
  "id":1323957156,
  "issue":1907,
  "node_id":"IC_kwDODBCWws5O6fuk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T16:39:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The `pip` change worked, let me try conda now (as the preferred solution). ",
  "created_at":"2022-11-22T16:43:15Z",
  "id":1323962461,
  "issue":1907,
  "node_id":"IC_kwDODBCWws5O6hBd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T16:43:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, looks like doing this via the conda dependencies also fixes it.",
  "created_at":"2022-11-22T16:52:17Z",
  "id":1323974511,
  "issue":1907,
  "node_id":"IC_kwDODBCWws5O6j9v",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T16:52:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah darn, I'd forgotten that `skip-ci` just disables the CI tests rather than keeping the previous results. You can see that [e1eddd4](https://github.com/scikit-hep/awkward/pull/1907/commits/e1eddd40060345c1dab7ee98b2116e6f1cb1a6b4) passed the tests, and the subsequent commit only touches `.readthedocs.yml`, so it's safe to merge.",
  "created_at":"2022-11-22T16:56:10Z",
  "id":1323979660,
  "issue":1907,
  "node_id":"IC_kwDODBCWws5O6lOM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T16:56:10Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"All the tests that are going to run were successful. I'll merge it now.",
  "created_at":"2022-11-22T17:06:58Z",
  "id":1323993223,
  "issue":1907,
  "node_id":"IC_kwDODBCWws5O6oiH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T17:06:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1908?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1908](https://codecov.io/gh/scikit-hep/awkward/pull/1908?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (addf623) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/bacbab5dd45c8cb1063979d76e675552599689bc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bacbab5) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-11-22T17:42:43Z",
  "id":1324033790,
  "issue":1908,
  "node_id":"IC_kwDODBCWws5O6yb-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T17:42:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1909?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1909](https://codecov.io/gh/scikit-hep/awkward/pull/1909?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5b0c24c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/bacbab5dd45c8cb1063979d76e675552599689bc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bacbab5) will **not change** coverage.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1909?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1909/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.59% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-11-22T17:52:30Z",
  "id":1324043974,
  "issue":1909,
  "node_id":"IC_kwDODBCWws5O607G",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T17:52:30Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm merging this into #1915 ",
  "created_at":"2022-11-28T10:28:02Z",
  "id":1328850366,
  "issue":1909,
  "node_id":"IC_kwDODBCWws5PNKW-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T10:28:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"As described in https://github.com/scikit-hep/awkward/issues/1193#issuecomment-1326617840, the full set of non-canonical nestings at level 1 is:\r\n\r\n* `self.is_indexed and self.content.is_indexed`\r\n* `self.is_indexed and self.content.is_option`\r\n* `self.is_option and self.contend.is_indexed`\r\n* `self.is_option and self.content.is_option`\r\n* `self.is_option and self.content.is_union`  \u2190 we're following Arrow's choice on this (the alternative would be to exclude union of option, but let's follow their lead)\r\n\r\nIn addition, an `__array__: \"string\"` parameter on a list implies that its content should have `__array__: \"char\"` and be a NumpyArray, and similarly for bytestrings and categoricals, which are the level-1 non-canonical cases that are being checked in `validity_error`. Those would instead be part of the level 1 canonicity test.",
  "created_at":"2022-11-24T15:58:32Z",
  "id":1326626169,
  "issue":1910,
  "node_id":"IC_kwDODBCWws5PErV5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-24T15:58:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"What is confusing to me is that we seem to have conflicting ideas here; on the one hand\r\n> These states are allowed to exist in the midst of a calculation, but they need to be fixed before handing them off to the user.\r\n\r\nbut on the other hand,\r\n> a particular construction (IndexedArray of IndexedOptionArray) doesn't need to be considered because it's not a valid array\r\n\r\nWhilst I do think that restricting ourselves to a subset of the layout combinations is the right move long term (as it allows us to simplify our internals), we probably need to be rigorous about it. As Jim rightly notes\r\n> while we try to use simplify_optiontype and simplify_uniontype to ensure that these things don't exist, erroneous cases have slipped through in the past, and they might again.\r\n\r\nIndeed, there's nothing currently stopping us from passing an \"invalid\" array to a function that expects a canonicalised layout.\r\n\r\nMy main question is \u2014 where do we draw this line? Within *only* the high level `ak.operations.*` functions? i.e. do we not check third-party libraries using only the layout APIs? Or, do we also have routines withing layouts e.g. `layout._drop_none()` that require canonicity? Should this be an assertion, i.e. it's an error to encounter a non-canonical layout, or a guarantee i.e. we canonicalise all layouts before reaching a certain function?\r\n\r\nBased upon the current discussion, I think we clearly do have a notion of what an L1 canonical layout looks like, so we can encode that as a lazy property of the array. I'm not really worried about performance here either; these checks should be on the order of tens to hundreds within a normal high-level operation (guess).\r\n\r\nSo, depending upon the answer to the above, we either have `layout.assert_canonical()` or `layout.as_canonical()`. Is this what you're thinking @jpivarski \r\n\r\n@jpivarski RE the L1 rules, how do we feel about things like `Indexed(Record([Indexed(...), Indexed(...)]))`? I assume we are fine with such a layout (your rules don't need touching), because it's a performance regression to require the contents of a RecordArray to be indexed by the same index array (which would require a copy)?\r\n\r\n\r\n",
  "created_at":"2022-11-24T20:32:16Z",
  "id":1326820905,
  "issue":1910,
  "node_id":"IC_kwDODBCWws5PFa4p",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-24T20:32:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We can draw lines: this is not something that will get out of hand. When I say that these non-canonical layouts exist only within one of our implementations, it's usually\r\n\r\n```python\r\nreturn UnionArray(\r\n    ...\r\n).simplify_union()\r\n```\r\n\r\nThe possibly invalid `UnionArray` exists for the duration of half an expression, and the whole point of building it is to immediately call `simplify_union` (similarly for `simplify_option`) and make it canonical before it leaves the function scope. The bad situation that we're trying to catch is forgetting to call `simplify_union`/`simplify_option`.\r\n\r\nWhat we can't do is forbid the non-canonical union/option in the `UnionArray`/etc. constructors. Then, we wouldn't be able to write the above expression. Every place where we want to do this would have to express the logic of \"if such and such _would be_ non-canonical, don't construct it\" inline.\r\n\r\n----------------\r\n\r\nUnless... (yes, I am just realizing this now) we introduce `maybe_simplify_*` functions that contain the logic of what is canonical and what isn't, and then the `Content` constructors can restrict themselves to canonicity upon construction.\r\n\r\nWhen I opened this issue, I _had been_ thinking about drawing the line at `ak.Array` construction time: non-canonical layouts would be allowed until they get wrapped as a high-level array, and that effectively allows non-canonicity in our internal functions (and also downstream developers' internal functions). It would prevent non-canonicity from spreading too far, allowing us to assume that user input to an `ak.*` operation is canonical.\r\n\r\nBut another possibility is to draw the line much tighter, at layout construction time. There would be 6 new functions:\r\n\r\n  * `maybe_simplify_UnionArray`\r\n  * `maybe_simplify_IndexedArray`\r\n  * `maybe_simplify_IndexedOptionArray`\r\n  * `maybe_simplify_ByteMaskedArray`\r\n  * `maybe_simplify_BitMaskedArray`\r\n  * `maybe_simplify_UnmaskedArray`\r\n\r\nthat all take the same arguments as the `UnionArray`, `IndexedArray`, ... `UnmaskedArray` constructors, but might not return an instance of the corresponding class\u2014they might instead return something simplified.\r\n\r\nA way this could be implemented (reusing as much existing code as possible) would be to build an instance of the corresponding class with `__new__`, to bypass its constructor, as its constructor would now be checking for canonicity, and then immediately call `simplify_union`/`simplify_option` on it and return that.\r\n\r\nThe advantages of this over letting non-canonical layouts live for a short period are:\r\n\r\n  * There will be no ways for non-canonical layouts to slip through.\r\n  * We won't have to do an expensive, tree-scanning check in `ak.Array` construction, and won't have to introduce a new \"already checked\" cache (`_metadata_checked` above).\r\n\r\nDownstream developers might complain that layouts are more difficult to build, but we could help with that by making the `maybe_simplify_*` functions public (tucked away inside the `ak.contents` submodule).\r\n\r\nThe `simplify_union` and `simplify_option` methods, _used by_ `maybe_simplify_*`, should then become private (get underscores) because they would become useless on a properly-constructed (no `__new__`) layout.\r\n\r\n------------------\r\n\r\n> @jpivarski RE the L1 rules, how do we feel about things like `Indexed(Record([Indexed(...), Indexed(...)]))`? I assume we are fine with such a layout (your rules don't need touching), because it's a performance regression to require the contents of a RecordArray to be indexed by the same index array (which would require a copy)?\r\n\r\nThat's allowed/canonical. When the RecordArray is constructed, we don't know if the IndexedArray of each field is the same index or a different index, and checking would be a level 2, long-range value constraint. RecordArray's `_carry` favors creating an IndexedArray because RecordArrays with thousands of fields are common enough for it to be an important performance consideration. Any combination of checking field-IndexedArrays against each other and/or merging the IndexedArray around a RecordArray with the IndexedArrays of fields have bad performance consequences.\r\n\r\nBut most importantly, our internal code does not assume that `Indexed(Record([Indexed(...), Indexed(...)]))` can't happen. All of our implementations should work, given such a thing. When a user projects out a field (i.e. calls `__getattrib__` or calls `__getitem__` with a string), there _should_ be a call to `simplify_option` somewhere to merge the outer IndexedArray with the inner IndexedArray (for that one field: not a performance issue). Doing the above-mentioned conversion of `simplify_option` to `maybe_simplify_IndexedArray` could catch cases that _should_ but _do not_.\r\n\r\n--------------------------\r\n\r\nSince this affects layout constructors, turning currently allowed cases into error cases, it looks like it needs to be done before `next-release`. I'll self-assign, but before implementing it, I'll measure the size of the problem, to see if it's going to be feasible.",
  "created_at":"2022-11-28T16:42:18Z",
  "id":1329409211,
  "issue":1910,
  "node_id":"IC_kwDODBCWws5PPSy7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T16:42:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1911?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1911](https://codecov.io/gh/scikit-hep/awkward/pull/1911?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1ede2d4) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3894053b41ff9020b7a5f0319ac21a8faab408c8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3894053) will **decrease** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1911?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1911/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `87.88% <100.00%> (-0.16%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-11-22T20:21:36Z",
  "id":1324196386,
  "issue":1911,
  "node_id":"IC_kwDODBCWws5O7aIi",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-22T20:21:36Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah yes. This is a problem with having a global gitignore configuration - I don't always notice what isn't gitignored by *this* repository. Please feel free to add anything else that must be ignored!",
  "created_at":"2022-11-23T12:14:39Z",
  "id":1324968943,
  "issue":1912,
  "node_id":"IC_kwDODBCWws5O-Wvv",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-23T12:14:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1912?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1912](https://codecov.io/gh/scikit-hep/awkward/pull/1912?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e64ce07) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b1e8276b43e698ee5743843aae2719f5d90b4c0a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b1e8276) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-11-23T12:19:33Z",
  "id":1324977317,
  "issue":1912,
  "node_id":"IC_kwDODBCWws5O-Yyl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-23T12:19:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1913?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1913](https://codecov.io/gh/scikit-hep/awkward/pull/1913?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (049a758) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/c4da619c277a8efe53f20c0f37e1f847debdfdef?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c4da619) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-11-24T11:08:18Z",
  "id":1326298564,
  "issue":1913,
  "node_id":"IC_kwDODBCWws5PDbXE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-24T11:08:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'm not fixing this yet, but I did look at it. What we're seeing in (1) is happening because we're using the `branch_depth` to compute the maximum axis. Of course, in this example, the branch depth is the `min` depth. The behaviour that you're describing used to work because we didn't directly validate the `axis`; `ak.is_none(array, axis=100)` also succeeds. \r\n\r\nI assume what we want to do here is check that the axis is below `minmax_depth[1]`. I am not sure whether this applies to all awkward functions; it seems off the top of my head that we sometimes would want to stop at the branch for some functions.\r\n\r\nAs for (2), I have not yet taken a look :)",
  "created_at":"2022-12-03T19:48:33Z",
  "id":1336246333,
  "issue":1914,
  "node_id":"IC_kwDODBCWws5PpYA9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T19:50:19Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"What all Awkward functions are supposed to do with `axis=-1` (or any negative `axis`) is count from the bottom, up from any records or unions (any branching). So `axis=-1` has a different meaning for each field when the fields are different depths.\r\n\r\nThe reason why I'm saying this one is wrong is because `axis=-1` didn't let you address the innermost depth of one of the fields.",
  "created_at":"2022-12-03T21:41:05Z",
  "id":1336263096,
  "issue":1914,
  "node_id":"IC_kwDODBCWws5PpcG4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T21:41:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1915?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1915](https://codecov.io/gh/scikit-hep/awkward/pull/1915?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fdd2742) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2dbaf51bc44931b8485393b0b2fe519b09c96666?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2dbaf51) will **decrease** coverage by `0.00%`.\n> The diff coverage is `28.57%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1915?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/rdataframe/to\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS90b19yZGF0YWZyYW1lLnB5) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.46% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.59% <0.00%> (\u00f8)` | |\n| [src/awkward/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `85.11% <0.00%> (\u00f8)` | |\n| [src/awkward/jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvamF4LnB5) | `84.21% <0.00%> (\u00f8)` | |\n| [src/awkward/nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvbnBsaWtlcy5weQ==) | `67.10% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `87.17% <50.00%> (\u00f8)` | |\n| [src/awkward/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX19pbml0X18ucHk=) | `96.87% <100.00%> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.38% <100.00%> (-0.04%)` | :arrow_down: |\n| ... and [2 more](https://codecov.io/gh/scikit-hep/awkward/pull/1915/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-27T10:26:31Z",
  "id":1328215562,
  "issue":1915,
  "node_id":"IC_kwDODBCWws5PKvYK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T11:12:39Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes this PR subsumed another as we needed to touch the same files. \r\n\r\nInitially I wanted to make `yesqa` part of our CI/pre-commit checks, but unfortunately, it seems to have some false positives that remove needed checks. At this stage, I'm not motivated enough to find out why that is over just manually applying the corrections periodically.",
  "created_at":"2022-11-28T15:26:55Z",
  "id":1329295597,
  "issue":1915,
  "node_id":"IC_kwDODBCWws5PO3Dt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T15:26:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It's a definite improvement!\r\n\r\nFollowing up on\r\n\r\n> I'm also going to see if there are any PRs open for flake8 version 6.0.\r\n\r\nI just tested it locally\u2014verified that I really did change flake8 from 5.x to 6.0, and that `pre-commit run -a` still runs with the new version. So we don't have any bad surprises coming due to the flake8 API changes.\r\n\r\nHowever, I'm not going to set up a PR for it\u2014I'm going to let auto-update do its job. We have enough things to do and automation for that already exists. We just know now that it won't cause extra work and can ignore it.",
  "created_at":"2022-11-28T15:44:55Z",
  "id":1329324053,
  "issue":1915,
  "node_id":"IC_kwDODBCWws5PO-AV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T15:44:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Jim will take CONTRIBUTING.md and README.md and moving the list of talks from README to QuickStart.\r\n\r\nAngus: \"Loopy and unloopy programming tchniques\" typo.",
  "created_at":"2022-11-30T15:03:57Z",
  "id":1332307092,
  "issue":1916,
  "node_id":"IC_kwDODBCWws5PaWSU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-30T15:03:57Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The [wiki](https://github.com/scikit-hep/awkward/wiki) is done.\r\n\r\nI still need to do README.md and CONTRIBUTING.md.",
  "created_at":"2022-12-08T22:54:33Z",
  "id":1343476571,
  "issue":1916,
  "node_id":"IC_kwDODBCWws5QE9Nb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T22:54:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is weird: it's already implemented.\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> import numba as nb\r\n>>> @nb.njit\r\n... def capitalize_i(array, i):\r\n...     return array[i].capitalize()\r\n... \r\n>>> capitalize_i(ak.Array([\"hello\", \"there\"]), 0)\r\n'Hello'\r\n>>> capitalize_i(ak.Array([\"hello\", \"there\"]), 1)\r\n'There'\r\n```\r\n\r\nI don't know how it's implemented because I don't see the implementation anywhere. As a very low-priority item, you or I should try to find out where the implementation is, just to be satisfied that it's okay, and then close this issue.",
  "created_at":"2022-11-28T17:56:30Z",
  "id":1329514965,
  "issue":1917,
  "node_id":"IC_kwDODBCWws5PPsnV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T17:56:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The conversation that inspired this is here: https://numba.discourse.group/t/feature-request-about-supporting-arrow-in-numba/1668",
  "created_at":"2022-11-28T18:25:55Z",
  "id":1329549737,
  "issue":1917,
  "node_id":"IC_kwDODBCWws5PP1Gp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T18:25:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"@jpivarski , I have contributed several PRs for numba `unicode_type`. Indeed, you are incorrect about the situation of numba `unicode_type`. IIRC, numba `unicode_type` doesn't hold the GIL, you can see that `UnicodeModel` only borrows the underlying char buffer/data from Python Unicode instance, and recreate all metadata and reimplement non-GIL operations for it.\r\n\r\nI didn't verify your test case posted above, but I guess it could be because Numba `unicode_type` has done that for u, if u're sure about the `dtype` of your array is numba `string`, which is an alias for `unicode_type` in numba. \r\n\r\nBut I could be wrong, if I misundertand your test case. Hope helpful.",
  "created_at":"2022-11-29T03:16:12Z",
  "id":1330021194,
  "issue":1917,
  "node_id":"IC_kwDODBCWws5PRoNK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T03:16:46Z",
  "user":"MDQ6VXNlcjgxMjU2NzU="
 },
 {
  "author_association":"MEMBER",
  "body":"Maybe that's what I remember wrong: I had thought that it went through the Python C API. If it's a GIL-less Model, that's definitely better, though it means that the only string functions that can exist are special Numba implementations.\r\n\r\nEarlier today, when I searched for references to GIL-holding, I didn't find it because the UnicodeModel doesn't need the GIL. Okay, but I also searched for (case-insensitive) \"uni\" and \"str\" and didn't find the implementation. I would have ground something named \"UnicodeModel.\"\r\n\r\nVery strange! Because I really remember implementing it and the current code demonstrably does it. I'd have to trace through it more slowly to find out how it does it\u2014probably jogging my memory in the process\u2014but it's good to know at least that the implementation exists... somewhere...",
  "created_at":"2022-11-29T03:25:18Z",
  "id":1330026110,
  "issue":1917,
  "node_id":"IC_kwDODBCWws5PRpZ-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T03:25:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I never ended up looking into _why_ it's working, but it's working, so I want to clear it from the issue list.",
  "created_at":"2022-12-06T00:14:50Z",
  "id":1338444985,
  "issue":1917,
  "node_id":"IC_kwDODBCWws5Pxwy5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T00:14:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"`nplike` isn't an argument of the `Content` subclasses anymore, is it? \r\n\r\nI had been thinking of making it keyword-only, also, but decided to not touch the `Content` subclass constructors. Removing `nplike` entirely makes that point moot.",
  "created_at":"2022-11-29T00:18:18Z",
  "id":1329912102,
  "issue":1918,
  "node_id":"IC_kwDODBCWws5PRNkm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T00:18:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In this PR, it is a per-content thing; the leaf nodes need it, as well as any nodes that take an optional number of children (records, unions). But the list, indexed, and option types don't have this parameter any more in this PR",
  "created_at":"2022-11-29T00:19:48Z",
  "id":1329912999,
  "issue":1918,
  "node_id":"IC_kwDODBCWws5PRNyn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T00:19:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"If we're ever tempted to add more arguments to a `Content` subclass\u2014which I find very unlikely at this stage, but in principle\u2014we'd want to add them before `parameters`. Making `parameters` or `parameters` and `nplike` keyword-only would be somewhat disruptive.\r\n\r\nLet me check to see what Vector assumes.",
  "created_at":"2022-11-29T00:24:06Z",
  "id":1329915804,
  "issue":1918,
  "node_id":"IC_kwDODBCWws5PROec",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T00:24:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR would disrupt any existing usages of `nplike` for non-leaf / contentless nodes. On a purely ergonomic point, I'd support keyword-only for the default parameters of our content nodes. For the record, we can use keyword-only for non-default parameters, but most of the time one doesn't want to do this.",
  "created_at":"2022-11-29T00:28:50Z",
  "id":1329918970,
  "issue":1918,
  "node_id":"IC_kwDODBCWws5PRPP6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T00:28:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Nope: Vector, Coffea, dask-awkward, and awkward-pandas don't come anywhere near using all the arguments of `Content` subclasses, and when Uproot does, it always spells out the `parameters` argument as a keyword.\r\n\r\nIt looks like it would be safe to make everything from `parameters` onward into a keyword-only argument for the `Content` subclasses. There might be quite a few constructor calls to fix in the Awkward codebase, but I don't see a reason to worry about known dependent libraries.\r\n\r\nThe same applies to Forms. The Types already have keyword-only `*`s, but they're before `typestr`; they would have to move before `parameters` for consistency.\r\n\r\nThat might be a big undertaking, and therefore a separate PR. Is it too intertwined with your `nplike`-argument removal?",
  "created_at":"2022-11-29T00:35:46Z",
  "id":1329923619,
  "issue":1918,
  "node_id":"IC_kwDODBCWws5PRQYj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T00:35:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I split that into a PR that should merge first; that way we get it merged ASAP.",
  "created_at":"2022-11-29T11:22:32Z",
  "id":1330476550,
  "issue":1918,
  "node_id":"IC_kwDODBCWws5PTXYG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T11:22:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I feel like we touched on this before but I don't recall the solution and can't find the discussion :/ If you're against this, close it, if in favour, merge! :)",
  "created_at":"2022-11-28T23:08:30Z",
  "id":1329869720,
  "issue":1919,
  "node_id":"IC_kwDODBCWws5PRDOY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T23:08:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1919?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1919](https://codecov.io/gh/scikit-hep/awkward/pull/1919?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f838754) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/88f7fef4489ad9ebb8edfb2949b14737c8c06662?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (88f7fef) will **not change** coverage.\n> The diff coverage is `83.21%`.\n\n> :exclamation: Current head f838754 differs from pull request most recent head 0968729. Consider uploading reports for the commit 0968729 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1919?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.38% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/cling.py](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvY2xpbmcucHk=) | `25.40% <0.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.60% <25.00%> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.46% <50.00%> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `65.00% <59.25%> (\u00f8)` | |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `66.09% <80.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `87.88% <84.61%> (\u00f8)` | |\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `86.04% <85.71%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `89.70% <88.23%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `87.64% <92.30%> (\u00f8)` | |\n| ... and [16 more](https://codecov.io/gh/scikit-hep/awkward/pull/1919/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-28T23:19:36Z",
  "id":1329876650,
  "issue":1919,
  "node_id":"IC_kwDODBCWws5PRE6q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T23:20:26Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I ran another test with `rg \"to[A-Z]\" src` and found a missing case.",
  "created_at":"2022-11-28T23:19:55Z",
  "id":1329876836,
  "issue":1919,
  "node_id":"IC_kwDODBCWws5PRE9k",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-28T23:19:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1920?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1920](https://codecov.io/gh/scikit-hep/awkward/pull/1920?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (15b42c4) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/791d198ad35298e0b1957d5f03256daf3faad818?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (791d198) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 15b42c4 differs from pull request most recent head 6b2263e. Consider uploading reports for the commit 6b2263e to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-11-29T00:08:52Z",
  "id":1329906123,
  "issue":1920,
  "node_id":"IC_kwDODBCWws5PRMHL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T04:05:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@henryiii, I've tested flake8 6.0.0 for Awkward elsewhere; we weren't depending on any of the API changes we've been hearing about, and that's not responsible for this test failure.\r\n\r\nThe [test failure is on 32-bit Windows](https://github.com/scikit-hep/awkward/actions/runs/3569550846/jobs/5999619731), and it seems to be related to Scikit-build: finding a 32-bit compiler.\r\n\r\n```\r\nInstalling collected packages: tomli, pyparsing, colorama, pep517, packaging, build\r\nSuccessfully installed build-0.9.0 colorama-0.4.6 packaging-21.3 pep517-0.13.0 pyparsing-3.0.9 tomli-2.0.1\r\n* Creating venv isolated environment...\r\n* Installing packages in isolated environment... (pybind11, scikit-build-core[pyproject])\r\n* Getting build dependencies for wheel...\r\n* Installing packages in isolated environment... (distlib, pathspec, pyproject_metadata)\r\n* Building wheel...\r\n2022-11-[28](https://github.com/scikit-hep/awkward/actions/runs/3569550846/jobs/5999619731#step:6:29) 23:57:32,066 - scikit_build_core - WARNING - Can't find a Python library, got libdir=None, ldlibrary=None, multiarch=None, masd=None\r\nWarning: Environment variable CMAKE_GENERATOR_PLATFORM will be ignored, because CMAKE_GENERATOR is not set.\r\nloading initial cache file C:\\Users\\RUNNER~1\\AppData\\Local\\Temp\\tmpadhbq8d5\\build\\CMakeInit.txt\r\n-- Building for: Visual Studio 16 2019\r\n-- The CXX compiler identification is MSVC 19.[29](https://github.com/scikit-hep/awkward/actions/runs/3569550846/jobs/5999619731#step:6:30).[30](https://github.com/scikit-hep/awkward/actions/runs/3569550846/jobs/5999619731#step:6:31)147.0\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe - skipped\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- CMake version 3.25.0\r\n-- CMAKE_BUILD_TYPE = \r\n-- Found PythonInterp: C:/Users/runneradmin/AppData/Local/Temp/build-env-ccyexqxv/Scripts/python.exe (found suitable version \"3.9.13\", minimum required is \"3.6\") \r\nCMake Error at C:/Users/runneradmin/AppData/Local/Temp/build-env-ccyexqxv/Lib/site-packages/pybind11/share/cmake/pybind11/FindPythonLibsNew.cmake:191 (message):\r\n  Python config failure: Python is [32](https://github.com/scikit-hep/awkward/actions/runs/3569550846/jobs/5999619731#step:6:33)-bit, chosen compiler is 64-bit\r\n-- Configuring incomplete, errors occurred!\r\nCall Stack (most recent call first):\r\nSee also \"C:/Users/runneradmin/AppData/Local/Temp/tmpadhbq8d5/build/CMakeFiles/CMakeOutput.log\".\r\n  C:/Users/runneradmin/AppData/Local/Temp/build-env-ccyexqxv/Lib/site-packages/pybind11/share/cmake/pybind11/pybind11Tools.cmake:50 (find_package)\r\n  C:/Users/runneradmin/AppData/Local/Temp/build-env-ccyexqxv/Lib/site-packages/pybind11/share/cmake/pybind11/pybind11Common.cmake:180 (include)\r\n  C:/Users/runneradmin/AppData/Local/Temp/build-env-ccyexqxv/Lib/site-packages/pybind11/share/cmake/pybind11/pybind11Config.cmake:2[48](https://github.com/scikit-hep/awkward/actions/runs/3569550846/jobs/5999619731#step:6:49) (include)\r\n  CMakeLists.txt:94 (find_package)\r\n\r\n\r\n*** scikit-build-core 0.1.1 using CMake 3.25.0\r\n\r\n*** Configurating CMake...\r\n*** CMake configuration failed\r\n\r\nERROR Backend subprocess exited when trying to invoke build_wheel\r\nError: Process completed with exit code 1.\r\n```\r\n\r\nDid something change in Scikit-Build very recently? Tests have been succeeding up until this point.",
  "created_at":"2022-11-29T01:25:04Z",
  "id":1329955788,
  "issue":1920,
  "node_id":"IC_kwDODBCWws5PRYPM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T01:25:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Updating to `main` gives the test another chance. We'll see if it happens again.",
  "created_at":"2022-11-29T01:25:53Z",
  "id":1329956232,
  "issue":1920,
  "node_id":"IC_kwDODBCWws5PRYWI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T01:25:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, I just released a new version that was supposed to include a patch we needed for conda, and I was fiddling with this part of the code.\r\n\r\n```\r\nWarning: Environment variable CMAKE_GENERATOR_PLATFORM will be ignored, because CMAKE_GENERATOR is not set.\r\n```\r\n\r\nAhh, that's it, I know what I changed. Kind of weird it used to work with `-A`, though.",
  "created_at":"2022-11-29T01:28:49Z",
  "id":1329957923,
  "issue":1920,
  "node_id":"IC_kwDODBCWws5PRYwj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T01:28:49Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"Okay, I'm glad to know that you have leads. Let me know when Scikit-build is ready and we can run our tests again. Thanks!",
  "created_at":"2022-11-29T01:32:12Z",
  "id":1329959991,
  "issue":1920,
  "node_id":"IC_kwDODBCWws5PRZQ3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T01:32:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I think this will fix it: https://github.com/scikit-build/scikit-build-core/pull/142",
  "created_at":"2022-11-29T01:32:44Z",
  "id":1329960365,
  "issue":1920,
  "node_id":"IC_kwDODBCWws5PRZWt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T01:32:44Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"MEMBER",
  "body":"That did fix it, thanks! (Note to @agoose77 that this PR points to a git branch of Scikit-build.) If you'll be releasing it soon, this PR can wait for the release. Otherwise, we'll have to remember to change the the reference to the Scikit-build fix to something more permanent later.",
  "created_at":"2022-11-29T03:13:59Z",
  "id":1330019665,
  "issue":1920,
  "node_id":"IC_kwDODBCWws5PRn1R",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-29T03:13:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Already released 0.1.2 (including on conda-forge) and removed the change, was just making sure the fixed worked before shipping it. :)",
  "created_at":"2022-11-29T04:33:02Z",
  "id":1330065095,
  "issue":1920,
  "node_id":"IC_kwDODBCWws5PRy7H",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-29T04:33:21Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1921?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1921](https://codecov.io/gh/scikit-hep/awkward/pull/1921?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b3cd399) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4035acadbf403f72d61476624973331c5b50e3ca?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4035aca) will **decrease** coverage by `0.00%`.\n> The diff coverage is `91.46%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1921?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.38% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `88.46% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.46% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `65.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `86.07% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `86.30% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/indexedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZGZvcm0ucHk=) | `89.61% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/indexedoptionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZG9wdGlvbmZvcm0ucHk=) | `93.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/listform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvbGlzdGZvcm0ucHk=) | `82.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/recordform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvcmVjb3JkZm9ybS5weQ==) | `88.57% <\u00f8> (\u00f8)` | |\n| ... and [33 more](https://codecov.io/gh/scikit-hep/awkward/pull/1921/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-29T11:28:28Z",
  "id":1330483325,
  "issue":1921,
  "node_id":"IC_kwDODBCWws5PTZB9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T19:42:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fab, thanks for making this change. I was tempted to do them in multiple PRs, but on second thought it's less churn to do it all now. I didn't give it too much thought as I was playing around with `semgrep` to actually generate this PR\r\n\r\nYou can see the config that I used to do these renames, run with\r\n```bash\r\nsemgrep -a --config=./rename.yaml\r\n```\r\n\r\n<details>\r\n<summary> \r\n<code>rename.yaml</code>\r\n</summary>\r\n\r\n```yaml\r\nrules:\r\n- id: single-arg\r\n  patterns:\r\n    - pattern: '$F($X, $Y, $Z, $Q, $W, $U)'\r\n    - metavariable-regex:\r\n        metavariable: $F\r\n        regex: ^.*ListArray$\r\n  languages: [python]\r\n  severity: WARNING\r\n  message: Semgrep found a match\r\n  fix: $F($X, $Y, $Z, $Q, $W, parameters=$U)\r\n  ```\r\n\r\n</details>\r\n\r\nIt wasn't perfect; sometimes it mangled the source. But careful staging worked well.",
  "created_at":"2022-11-29T19:43:32Z",
  "id":1331200658,
  "issue":1921,
  "node_id":"IC_kwDODBCWws5PWIKS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T19:45:22Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We were thinking along the same lines: I wanted to make them separate commits, rather than separate PRs, so that they can be checked in stages. It's just a question of what granularity the `main` branch should have. (After this refactoring is done, it's unlikely someone will want to see them separately, and if they do, they can follow the merge commit to this PR and see the individual commits.)",
  "created_at":"2022-11-29T19:48:52Z",
  "id":1331205621,
  "issue":1921,
  "node_id":"IC_kwDODBCWws5PWJX1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T19:48:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I ran a check over the forms with\r\n```yaml\r\nrules:\r\n- id: single-arg\r\n  patterns:\r\n    - pattern: '$F(...)'\r\n    - pattern-not: '$F(..., parameters=$X)'\r\n    - metavariable-regex:\r\n        metavariable: $F\r\n        regex: ^.*Type$\r\n  languages: [python]\r\n  severity: WARNING\r\n  message: Semgrep found a match\r\n```\r\nand visually ensured the correct results",
  "created_at":"2022-11-29T19:54:41Z",
  "id":1331218166,
  "issue":1921,
  "node_id":"IC_kwDODBCWws5PWMb2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T19:54:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"The big thorn in this PR is that by making the nplike-passing mechanism more robust (and ultimately replacing it with `backend`), we are not as easily able to trick Awkward into mixing JAX and NumPy nplikes/backends. We currently do this to replace JAX tracers with NumPy buffers so that subsequent Awkward operations don't trigger JAX's leak detection. Anything that performs a slice on a `NumpyArray` that holds a JAX tracer will trigger the leak detector if the user has it enabled. \r\n\r\nI can't remember whether these are *true* leaks in the sense that they persist beyond the lifetime of the JAX processing. I don't believe they do; only the `AuxData` should hold the layout, and the layout should go out of scope. Nevertheless, in future I'd like for the leak checker to work. We're planning on revisiting the JAX integration anyway, so I'm happy for JAX to work without leak checking in the near term.\r\n\r\nNB, we could add a hack into the `NumpyArray` node that let's us store an `ndarray` inside a JAX node, but I think that's worse than just not supporting leak checking.",
  "created_at":"2022-11-29T15:31:44Z",
  "id":1330831832,
  "issue":1922,
  "node_id":"IC_kwDODBCWws5PUuHY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T15:34:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I'm moving the code over to pass a `backend` around in favour of `nplike`. The reason is that `nplike` should really only deal with providing an array interface. The kernel logic and index-nplike relationship is now defined by the backend. It might be useful for layouts to unpack the nplikes from the backend into private attributes, so that the code is less noisy (`self._nplike` vs `self._backend.nplike`), but I'd prefer to avoid more state to keep track of, so we'll see how this evolves.",
  "created_at":"2022-11-29T22:54:49Z",
  "id":1331422487,
  "issue":1922,
  "node_id":"IC_kwDODBCWws5PW-UX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-29T22:54:49Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1922?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1922](https://codecov.io/gh/scikit-hep/awkward/pull/1922?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8746510) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3edac9b342ea13d4ede6ff9f541da60aee72bb2b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3edac9b) will **increase** coverage by `0.14%`.\n> The diff coverage is `90.95%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1922?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/pyarrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcHlhcnJvdy5weQ==) | `88.46% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `82.48% <\u00f8> (+0.02%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2F2cm9fZmlsZS5weQ==) | `66.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_json.py](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pzb24ucHk=) | `91.81% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `23.52% <0.00%> (-1.48%)` | :arrow_down: |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `74.81% <66.66%> (-0.42%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `76.79% <73.46%> (+0.18%)` | :arrow_up: |\n| [src/awkward/\\_connect/jax/reducers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvamF4L3JlZHVjZXJzLnB5) | `82.85% <75.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.52% <77.27%> (+0.24%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `79.55% <80.43%> (+0.11%)` | :arrow_up: |\n| ... and [56 more](https://codecov.io/gh/scikit-hep/awkward/pull/1922/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-29T23:01:26Z",
  "id":1331427055,
  "issue":1922,
  "node_id":"IC_kwDODBCWws5PW_bv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-30T18:51:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@agoose77 - sorry, I'm a bit late to comment. Is this `backend` hidden from the users? Would it be confusing to keep a `backend` as follows (in `tests-cuda`):\r\n```python\r\none = ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]], backend=\"cuda\")\r\n```",
  "created_at":"2022-12-02T16:10:22Z",
  "id":1335483573,
  "issue":1922,
  "node_id":"IC_kwDODBCWws5Pmdy1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T16:10:22Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"No worries @ianna, you were AFK IIRC. \r\n\r\nThis PR introduces the `ak._backends.Backend` protocol as the \"proper\" counterpart to the high level strings that users can see. So `backend=\"cuda\"` means getting an `ak._backends.Cupy` object (though perhaps we should rename the `CupyBackend` to `CudaBackend`). \r\n\r\nHigh-level users should _never_  see the `Backend` objects. Whereas, mid-level developers can access `ak.contents.Content.backend`. We've decided that users _can_ find this object if they poke around, but they should treat it like a \"token\" - i.e. not touch any of the attributes. \r\n\r\n\r\n",
  "created_at":"2022-12-02T16:16:24Z",
  "id":1335492056,
  "issue":1922,
  "node_id":"IC_kwDODBCWws5Pmf3Y",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-02T16:16:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fixed by #1922 ",
  "created_at":"2022-12-23T14:16:39Z",
  "id":1363989316,
  "issue":1923,
  "node_id":"IC_kwDODBCWws5RTNNE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-23T14:16:39Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1925?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1925](https://codecov.io/gh/scikit-hep/awkward/pull/1925?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (99a3b4b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3edac9b342ea13d4ede6ff9f541da60aee72bb2b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3edac9b) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-11-30T17:14:42Z",
  "id":1332488876,
  "issue":1925,
  "node_id":"IC_kwDODBCWws5PbCqs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-30T17:14:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Superseded by #1948.",
  "created_at":"2022-12-05T17:09:55Z",
  "id":1337755846,
  "issue":1925,
  "node_id":"IC_kwDODBCWws5PvIjG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T17:09:55Z",
  "user":"MDM6Qm90NDk2OTkzMzM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1928?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1928](https://codecov.io/gh/scikit-hep/awkward/pull/1928?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c226220) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/1157d228629ff481b7ae26c9653e45655ef11420?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1157d22) will **decrease** coverage by `0.14%`.\n> The diff coverage is `76.03%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1928?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `93.39% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `85.84% <0.00%> (-0.27%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_mask.py](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXNrLnB5) | `95.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `23.52% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jYXRlZ29yaWNhbC5weQ==) | `92.15% <\u00f8> (-0.30%)` | :arrow_down: |\n| [src/awkward/index.py](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaW5kZXgucHk=) | `84.10% <15.38%> (-6.48%)` | :arrow_down: |\n| [src/awkward/forms/indexedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZGZvcm0ucHk=) | `80.85% <41.17%> (-8.76%)` | :arrow_down: |\n| [src/awkward/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `82.22% <46.66%> (-3.86%)` | :arrow_down: |\n| [src/awkward/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `82.14% <46.66%> (-4.16%)` | :arrow_down: |\n| [src/awkward/forms/unmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5tYXNrZWRmb3JtLnB5) | `81.94% <46.66%> (-4.95%)` | :arrow_down: |\n| ... and [32 more](https://codecov.io/gh/scikit-hep/awkward/pull/1928/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-11-30T20:13:16Z",
  "id":1332686370,
  "issue":1928,
  "node_id":"IC_kwDODBCWws5Pby4i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-01T17:53:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77 The PyLint test is failing because `nplike` was removed from the argument list. (I'm not sure how...)",
  "created_at":"2022-11-30T22:03:29Z",
  "id":1332789422,
  "issue":1928,
  "node_id":"IC_kwDODBCWws5PcMCu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-30T22:03:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski \t`ak_from_buffers` takes a `backend` object now instead of `nplike`, which means the argument name has changed. I thought we'd okayed that w.r.t people like dask-awkward who will need to update. If you're still happy with #1922, I can make PRs for `dask-awkward` et al\r\n",
  "created_at":"2022-11-30T22:09:15Z",
  "id":1332795525,
  "issue":1928,
  "node_id":"IC_kwDODBCWws5PcNiF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-30T22:09:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I took your comment as a green light to push some fixes. Feel free to revert / rebase them if you're not happy.",
  "created_at":"2022-11-30T22:21:38Z",
  "id":1332806788,
  "issue":1928,
  "node_id":"IC_kwDODBCWws5PcQSE",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-11-30T22:21:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77, this is now fully implemented and ready for review. Each step is called out in code comments, and the last step is this: the `simplified` classmethods now convert attempts to make\r\n\r\n```\r\noption[union[X, Y, ...]]\r\n````\r\n\r\ninto\r\n\r\n```\r\nunion[option[X], option[Y], ...]\r\n```\r\n\r\nThat is, Arrow convention is now forced. The way that option-type push-down is implemented (there are many choices!) is this: one of the UnionArray contents, `tag_for_missing` (preferentially a RecordArray) is selected to be wrapped with `IndexedOptionArray.simplified`. If it's another option-type, more merging will happen. All of the other contents are wrapped with `UnmaskedArray.simplified`, which is a trivial operation, regardless of whether the thing being wrapped is option-type.\r\n\r\nWe can change the way `tag_for_missing` is selected at any time. Maybe it should be preferentially something that's already an option-type?\r\n\r\nWhat this PR does not implement is the canonicity requirements in the Content constructors. That's why #1910 is not closed by this PR. But now that we have a constructor that makes canonical versions of any Content, the next PR just has to enforce those requirements, discover if we are using non-canonical constructions anywhere, and build them with `simplified` instead.",
  "created_at":"2022-12-01T02:48:21Z",
  "id":1333082084,
  "issue":1928,
  "node_id":"IC_kwDODBCWws5PdTfk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-01T02:48:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Does this happen only in the latest `main` versions? I.e., can we narrow a commit, or is it a longstanding issue?\r\n\r\nIncidentally, I also noticed the `SystemError` failure to raise that happens in one of the RDF tests. I recall you mentioning it before, Jim. It's not related to this issue, but I thought I'd include it here.",
  "created_at":"2022-11-30T21:45:24Z",
  "id":1332771739,
  "issue":1929,
  "node_id":"IC_kwDODBCWws5PcHub",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-11-30T21:45:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski - Unfortunately, I cannot reproduce it. My environment has the following ROOT:\r\n```\r\n(my-ppp-talk) yana@iannas-macbook-pro-2 awkward % python\r\nPython 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import ROOT\r\n>>> ROOT.__version__\r\n'6.26/06'\r\n```\r\nand \r\n```\r\n% root --version\r\nROOT Version: 6.26/06\r\nBuilt for macosx64 on Aug 06 2022, 09:12:00\r\nFrom @\r\n```",
  "created_at":"2022-12-06T15:50:19Z",
  "id":1339583885,
  "issue":1929,
  "node_id":"IC_kwDODBCWws5P2G2N",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T15:50:19Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"Even if you run the tests some 10 to 20 times? I found it to be intermittent, and I agree with @agoose77 that the \"DID NOT RAISE SystemError\" on Linux seems to be happening about as often and in the same places as the segfault on MacOS.",
  "created_at":"2022-12-06T16:25:41Z",
  "id":1339633420,
  "issue":1929,
  "node_id":"IC_kwDODBCWws5P2S8M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T16:25:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"I couldn't find the original conversation\u2014I thought it was on Gitter?\r\n\r\nBut anyway, I'll do this, since it's an API thing.",
  "created_at":"2022-12-06T00:31:44Z",
  "id":1338487003,
  "issue":1931,
  "node_id":"IC_kwDODBCWws5Px7Db",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T00:31:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, it was Gitter (Matrix): https://matrix.to/#/!HkwegXBelyCzdDYPEr:gitter.im/$bt-bUB0EJkeO9XDk4NA7HTcW5S4kh4lypbgdUfdRjBg?via=gitter.im&via=matrix.org\r\n```\r\nColumn          Type                                                            Origin\r\n------          ----                                                            ------\r\nTRCounter       Int_t                                                           Dataset\r\nTRSel           ROOT::VecOps::RVec<ROOT::VecOps::RVec<o2::TrackReference> >     Dataset\r\nkineCounter     Int_t                                                           Dataset\r\nkineSel         ROOT::VecOps::RVec<ROOT::VecOps::RVec<o2::MCTrackT<float> > >   Dataset\r\n```\r\n```pycon\r\n>>> import awkward._v2 as ak\r\n>>> array = ak.from_rdataframe(\r\n...     df,\r\n...     columns=(\"TRCounter\"),\r\n... )\r\nFile /venv/venv3/lib/python3.8/site-packages/awkward/_v2/_connect/rdataframe/from_rdataframe.py:140, in from_rdataframe(data_frame, columns)\r\n    134 columns = (\r\n    135     columns + (\"awkward_index_\",)\r\n    136     if (is_indexed and \"awkward_index_\" not in columns)\r\n    137     else columns\r\n    138 )\r\n    139 for col in columns:\r\n--> 140     column_types[col] = data_frame.GetColumnType(col)\r\n    141     result_ptrs[col] = data_frame.Take[column_types[col]](col)\r\n    143 contents = {}\r\n\r\nruntime_error: string ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::GetColumnType(basic_string_view<char,char_traits<char> > column) =>\r\n    runtime_error: Column \"T\" is not in a dataset and is not a custom column been defined.\r\n```\r\n",
  "created_at":"2022-12-06T09:38:02Z",
  "id":1339038040,
  "issue":1931,
  "node_id":"IC_kwDODBCWws5P0BlY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T09:38:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski is this next-release? It's a *new* feature, with a hard-to-decode error message for unsupported use, so I'm 50-50 on it",
  "created_at":"2022-12-01T21:24:06Z",
  "id":1334463557,
  "issue":1932,
  "node_id":"IC_kwDODBCWws5PikxF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-01T21:25:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"No, this issue is not about changing the API of the RDataFrame bridge, it's about fixing a bug.\r\n\r\nThe touchstone is, \"Could someone's workflow start to depend on this, and then they'd have to adjust when we fix it?\" I think it's pretty clearly \"no\" in this case.",
  "created_at":"2022-12-01T21:37:06Z",
  "id":1334479546,
  "issue":1932,
  "node_id":"IC_kwDODBCWws5Pioq6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-01T21:37:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":":partying_face: less work! I'm _all_ about the principle of least action.\r\n\r\nFor clarity; I was trying to gauge our pain threshold for the first release.",
  "created_at":"2022-12-01T22:17:50Z",
  "id":1334519479,
  "issue":1932,
  "node_id":"IC_kwDODBCWws5Piya3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-01T22:18:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"To add some follow up thoughts to this issue:\r\n\r\nThe only reason that we need a `backend` abstract is because we can't (easily) write kernels for JAX. In future, JAX may gain interop support for CUDA, and perhaps might add some mechanism for us to be able to write kernels that target JAX. Then it might be useful to switch between CuPy and NumPy for the index nplike, and use their reducer mechanisms. For now, we're CPU-only with JAX.",
  "created_at":"2022-12-19T13:57:57Z",
  "id":1357710620,
  "issue":1933,
  "node_id":"IC_kwDODBCWws5Q7QUc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T13:57:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1934?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1934](https://codecov.io/gh/scikit-hep/awkward/pull/1934?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d6d4949) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/65ffb926dc05a88dd39a20c26eba4fcbc8b58ffe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (65ffb92) will **increase** coverage by `0.02%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1934?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1934/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.29% <100.00%> (+0.42%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1934/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `79.79% <100.00%> (+0.14%)` | :arrow_up: |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1934/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.58% <100.00%> (+0.58%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-01T21:10:05Z",
  "id":1334449033,
  "issue":1934,
  "node_id":"IC_kwDODBCWws5PihOJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T20:16:53Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski  just pinging you as I suspect this might have snuck past you. It's not urgent - leave it if you're already aware and prioritising your time.",
  "created_at":"2022-12-02T23:49:28Z",
  "id":1335968362,
  "issue":1934,
  "node_id":"IC_kwDODBCWws5PoUJq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T23:49:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Relatedly, setting `array['x'] = [1]` does _not_ broadcast against the existing value of the array: \r\n```python\r\n>>> array['x'] = [1]\r\n>>> array.show()\r\n[{x: 1}]\r\n```\r\n\r\nThis doesn't match the behavior for a bare NumPy array:\r\n```python\r\n>>> x = np.arange(3)\r\n>>> x[:] = 1\r\n>>> x.tolist()\r\n[1, 1, 1]\r\n```\r\n\r\nI'm not actually sure whether it's clear cut that this is wrong, though; the in-place assignment `x[:]` is not the same as the direct assignment. So, perhaps this is just policy. \r\n\r\nThat said, if we have multiple fields, then the result does broadcast, so I'm inclined to say that it should always broadcast (and not change length):\r\n```python\r\n>>> array['y'] = array.x\r\n>>> array['x'] = [1]\r\n>>> array.show()\r\n[{y: 1, x: 1},\r\n {y: 2, x: 1},\r\n {y: 3, x: 1}]\r\n```",
  "created_at":"2022-12-02T14:27:09Z",
  "id":1335312925,
  "issue":1936,
  "node_id":"IC_kwDODBCWws5Pl0Id",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T14:27:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, this only applies to assigning a new field whose name is the same as an existing field. If different names are used,\r\n\r\n```python\r\n>>> array = ak.Array({\r\n...     \"x\": [1, 2, 3]\r\n... })\r\n\r\n>>> array[\"y\"] = 4\r\n>>> array.show()\r\n[{x: 1, y: 4},\r\n {x: 2, y: 4},\r\n {x: 3, y: 4}]\r\n\r\n>>> array[\"z\"] = [1]\r\n>>> array.show()\r\n[{x: 1, y: 4, z: 1},\r\n {x: 2, y: 4, z: 1},\r\n {x: 3, y: 4, z: 1}]\r\n```\r\n\r\nI think the proper behavior for setting a new column with the same name as an old column is to broadcast (as above) but replace the old column. So, it would work like this:\r\n\r\n```python\r\n>>> array = ak.Array({\r\n...     \"x\": [1, 2, 3]\r\n... })\r\n\r\n>>> array[\"x\"] = 4\r\n>>> array.show()\r\n[{x: 4},\r\n {x: 4},\r\n {x: 4}]\r\n```\r\n\r\nWhat's preventing that from happening is probably just the order of operations in the implementation. We want to first use the original to broadcast, and then remove the old column, and then add the new column. (Maybe those last two steps are a single assignment.)\r\n\r\nBut that makes this a straightforward bug and not an API-changing issue. (The old behavior is \"wrong.\")",
  "created_at":"2022-12-02T15:28:17Z",
  "id":1335421393,
  "issue":1936,
  "node_id":"IC_kwDODBCWws5PmOnR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T15:28:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I think the proper behavior for setting a new column with the same name as an old column is to broadcast (as above) but replace the old column. So, it would work like this:\r\n\r\nAgreed, this is also my feeling.\r\n\r\nSo, we have _two_ bugs here (although both would be solved with broadcasting, so likely the same cause). I'll update the issue",
  "created_at":"2022-12-02T15:37:38Z",
  "id":1335432483,
  "issue":1936,
  "node_id":"IC_kwDODBCWws5PmRUj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T15:39:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1938?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1938](https://codecov.io/gh/scikit-hep/awkward/pull/1938?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (19ec374) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/31ce6578891862be1cab999378db7b5f7aaca945?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (31ce657) will **decrease** coverage by `0.08%`.\n> The diff coverage is `14.28%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1938?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1938/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `72.41% <14.28%> (-2.75%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-12-02T20:43:59Z",
  "id":1335827029,
  "issue":1938,
  "node_id":"IC_kwDODBCWws5PnxpV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T21:59:52Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Here's a preview page: https://awkward-array.readthedocs.io/en/agoose77-feat-add-rich-display/user-guide/how-to-restructure-flatten.html",
  "created_at":"2022-12-02T21:01:55Z",
  "id":1335841892,
  "issue":1938,
  "node_id":"IC_kwDODBCWws5Pn1Rk",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T21:01:55Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> By the way, shouldn't it return a string, rather than printing it? I'd\r\n\r\nThat's how I can tell you checked the diff ;) You would imagine so, wouldn't you?\r\n\r\nIt's actually deliberate; `_ipython_display_` is an escape hatch that permits objects to invoke the `display` machinery, hence it relies on side-effects.",
  "created_at":"2022-12-02T21:24:31Z",
  "id":1335857918,
  "issue":1938,
  "node_id":"IC_kwDODBCWws5Pn5L-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T21:24:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski here are two examples in the docs:\r\n\r\n![image](https://user-images.githubusercontent.com/1248413/205389437-500c5dff-796f-47af-87f3-ce90a0a894a9.png)\r\n\r\nYou can see that 1D arrays are expressed as columns. I think this is an acceptable trade-off for showing the type information, which is usually what I'm most interested in when looking at arrays in the notebook. Could you confirm that you're happy with this before I merge?\r\n",
  "created_at":"2022-12-02T21:26:26Z",
  "id":1335859260,
  "issue":1938,
  "node_id":"IC_kwDODBCWws5Pn5g8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T21:26:26Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"(For the sake of people following this on GitHub, we talked about this at length on Slack.)\r\n\r\nIt's true that the one-dimensional arrays will now be columns, and that wastes a bit of space. (It's not that different from what pyarrow does, though.)\r\n\r\nI'm on board with this change, though I think it would be a little better if you inject \"`type: `\" at the beginning of the first line of the type. The values and types of ak.Records are going to look very similar\u2014it won't be immediately obvious which is the value and which is the type. I don't think that a corresponding \"`value: `\" is necessary, though.",
  "created_at":"2022-12-02T21:33:14Z",
  "id":1335863774,
  "issue":1938,
  "node_id":"IC_kwDODBCWws5Pn6ne",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T21:33:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I had to change tack here; the IPython docs were wrong. I've moved to use `_repr_mimebundle_`, and added two MIME keys: `text/plain` and `text/html`. The latter is ignored in a conventional console, and the `text/plain` field is the normal repr. I preferred this approach to begin with, but I didn't want to craft HTML. However, crafting HTML _is_ the clean way to solve this, so it's the solution!",
  "created_at":"2022-12-02T21:53:56Z",
  "id":1335878783,
  "issue":1938,
  "node_id":"IC_kwDODBCWws5Pn-R_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T23:56:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1939?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1939](https://codecov.io/gh/scikit-hep/awkward/pull/1939?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (07ebf2b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3682de69720fe6b584f46312d074dca22a667036?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3682de6) will **increase** coverage by `0.08%`.\n> The diff coverage is `81.29%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1939?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `88.91% <\u00f8> (-4.49%)` | :arrow_down: |\n| [src/awkward/\\_connect/avro.py](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvYXZyby5weQ==) | `86.94% <0.00%> (-0.23%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `89.76% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `89.39% <0.00%> (+0.67%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_with\\_name.py](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX25hbWUucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/forms/indexedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvaW5kZXhlZGZvcm0ucHk=) | `81.11% <25.00%> (+0.26%)` | :arrow_up: |\n| [src/awkward/forms/bitmaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYml0bWFza2VkZm9ybS5weQ==) | `88.23% <50.00%> (+6.01%)` | :arrow_up: |\n| [src/awkward/forms/bytemaskedform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvYnl0ZW1hc2tlZGZvcm0ucHk=) | `87.34% <50.00%> (+5.19%)` | :arrow_up: |\n| [src/awkward/forms/form.py](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvZm9ybS5weQ==) | `85.77% <50.00%> (+0.59%)` | :arrow_up: |\n| [src/awkward/forms/unionform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvZm9ybXMvdW5pb25mb3JtLnB5) | `81.67% <50.00%> (+3.73%)` | :arrow_up: |\n| ... and [54 more](https://codecov.io/gh/scikit-hep/awkward/pull/1939/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-02T20:57:38Z",
  "id":1335839038,
  "issue":1939,
  "node_id":"IC_kwDODBCWws5Pn0k-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T22:02:58Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The argument for why a UnionArray must never have zero `contents` is because then it would be impossible to instantiate a single instance. That is,\r\n\r\n```\r\nunion[]\r\n```\r\n\r\nis the [bottom type](https://en.wikipedia.org/wiki/Bottom_type), which is the type of a non-halting program or a program that raises an exception (no return value). It might be conceivable to have an empty array of this type, but we already have an `EmptyArray` type (of `unknown`, which is more like a [top type](https://en.wikipedia.org/wiki/Top_type).) So that's why I'm excluding it.\r\n\r\nBy contract, records ([product types](https://en.wikipedia.org/wiki/Product_type) instead of [sum types](https://en.wikipedia.org/wiki/Tagged_union)) can have zero `contents`.\r\n\r\n```python\r\n>>> ak.Array([{}, {}, {}, {}, {}])\r\n<Array [{}, {}, {}, {}, {}] type='5 * {}'>\r\n\r\n>>> ak.Array([(), (), (), (), ()])\r\n<Array [(), (), (), (), ()] type='5 * ()'>\r\n```\r\n\r\n(An instance of a product type is all of its `contents`, which can be a pack of zero things. An instance of a sum type is any one of its `contents`, which has to be a non-empty set.)\r\n\r\nThe reason a union can't have 1 type is because\r\n\r\n```\r\nunion[X] == X\r\n```\r\n\r\nso we canonicalize it to just `X`. Therefore, the minimum `contents` a union can have (from now on) is 2.",
  "created_at":"2022-12-03T04:40:44Z",
  "id":1336052822,
  "issue":1939,
  "node_id":"IC_kwDODBCWws5PooxW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T04:40:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is ready for review, @agoose77! I don't think it would be easy to review it via the final diff; that's why I added a lot of comments along the way, to explain what each of the commits is doing. For the most part, one commit is a new constraint on one node type, plus fixes for all of the bugs that it revealed. The work on UnionArray was done in two commits.\r\n\r\nDon't feel compelled to go deep into this, checking each line or something. That would take a very long time. It would be enough to cross-check my motivations for things and to ask me questions about anything that doesn't seem to be covered already.\r\n\r\nThanks!",
  "created_at":"2022-12-03T04:43:53Z",
  "id":1336053611,
  "issue":1939,
  "node_id":"IC_kwDODBCWws5Poo9r",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T04:43:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Oh, I should write down the new rules. They are enforced on `Content` subclasses only, not `Forms`.\r\n\r\nAn option or indexed type (including `IndexedOptionArray`) must:\r\n\r\n  * never contain another option or indexed type\r\n  * never contain a union type\r\n\r\nA union type must:\r\n\r\n  * never contain another union type\r\n  * contain at least two `contents`\r\n  * none of those `contents` may be `mergeable` with any of the other `contents` (mergeability is an equivalence relation)\r\n\r\nA string must:\r\n\r\n   * be a list type (`ListArray`, `ListOffsetArray`, `RegularArray`) with `__array__ = \"string\"`\r\n   * contain a 1-dimensional uint8 `NumpyArray` with `__array__ = \"char\"`\r\n\r\nSame for `\"bytestring\"` and `\"byte\"`.\r\n\r\nA categorical must:\r\n\r\n   * be an indexed type with `__array__ = \"categorical\"`\r\n\r\nThere's also a `\"sorted_map\"` that isn't used yet.",
  "created_at":"2022-12-03T04:52:32Z",
  "id":1336057331,
  "issue":1939,
  "node_id":"IC_kwDODBCWws5Pop3z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T04:52:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"`ak.validity_error` is still needed to check the \"level 2\" rules: long-range value constraints. These are not checked by every constructor because that would be expensive (_O(n)_). In the implementations of the kernels, any level 2 check that is needed by a particular kernel is checked on the fly by that kernel (when it's not expensive because the data are running through the CPU anyway). So any level 2 errors that come up are _kernel_ errors.\r\n\r\nThe \"level 1\" rules were taken _out_ of `ak.validity_error` check, because they're now guaranteed for every existing `Content` instance.",
  "created_at":"2022-12-03T04:56:51Z",
  "id":1336059098,
  "issue":1939,
  "node_id":"IC_kwDODBCWws5PoqTa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T04:56:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've left comments. I didn't read most of the tests, because they are very long and given that we directly execute them, I'm comfortable with the fact that they pass being enough evidence. Obviously, we could design a bad test that succeeds all the time, but I think that's the time-correctness tradeoff for doing a code review?",
  "created_at":"2022-12-03T12:27:05Z",
  "id":1336150178,
  "issue":1939,
  "node_id":"IC_kwDODBCWws5PpAii",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T12:27:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I've been aggressive with clicking \"resolve conversation\" because it would otherwise be hard for me to tell what I've responded to or not on this phone. Reopen any that you think needs more discussion.\r\n\r\n(I'm using \"resolve\" like \"over\" in radio.)",
  "created_at":"2022-12-03T21:00:31Z",
  "id":1336256956,
  "issue":1939,
  "node_id":"IC_kwDODBCWws5Ppam8",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-03T21:00:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Let's try that again \u2014 I ran the failed tests with `pytest ... --lf`, but it somehow missed this one.",
  "created_at":"2022-12-03T21:57:56Z",
  "id":1336265557,
  "issue":1939,
  "node_id":"IC_kwDODBCWws5PpctV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T21:57:56Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1940?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1940](https://codecov.io/gh/scikit-hep/awkward/pull/1940?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6a6eb9b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/31ce6578891862be1cab999378db7b5f7aaca945?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (31ce657) will **increase** coverage by `0.02%`.\n> The diff coverage is `96.29%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1940?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_to\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1940/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19iYWNrZW5kLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_backends.py](https://codecov.io/gh/scikit-hep/awkward/pull/1940/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzLnB5) | `83.33% <85.71%> (+0.76%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1940/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19iYWNrZW5kLnB5) | `100.00% <100.00%> (+19.23%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1940/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `89.76% <100.00%> (+0.08%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/1940/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.07% <100.00%> (+0.03%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1940/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `95.12% <100.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_run\\_lengths.py](https://codecov.io/gh/scikit-hep/awkward/pull/1940/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19ydW5fbGVuZ3Rocy5weQ==) | `90.90% <100.00%> (+0.13%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1940/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `83.05% <100.00%> (+0.29%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward/pull/1940/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `91.83% <100.00%> (+0.17%)` | :arrow_up: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1940/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.50% <0.00%> (+0.33%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-02T21:10:54Z",
  "id":1335848457,
  "issue":1940,
  "node_id":"IC_kwDODBCWws5Pn24J",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T22:05:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski  would you be happy for me to change `ak.backend` to throw an exception if the input arrays don't have a common backend? Right now it returns `\"mixed\"`, which is not a valid backend name, and has less utility now that single arrays cannot be mixed.",
  "created_at":"2022-12-02T21:16:35Z",
  "id":1335852226,
  "issue":1940,
  "node_id":"IC_kwDODBCWws5Pn3zC",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T21:23:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes. My call was that we really care about the backend, and due to interop it's very hard to tell if we get it wrong (JAX can adopt NumPy, CuPy can adopt NumPy). Better to fail loudly.",
  "created_at":"2022-12-02T21:27:59Z",
  "id":1335860349,
  "issue":1940,
  "node_id":"IC_kwDODBCWws5Pn5x9",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T21:28:11Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski would you mind confirming on https://github.com/scikit-hep/awkward/pull/1940#issuecomment-1335852226 ? I know you're busy with lots of things at the moment, but don't want to merge this without an OK!",
  "created_at":"2022-12-02T21:29:25Z",
  "id":1335861310,
  "issue":1940,
  "node_id":"IC_kwDODBCWws5Pn6A-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T21:29:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yeah, `\"mixed\"` no longer means anything and shouldn't be returned by anything. I'm in favor of doing things this way, though we've got to be careful to always provide a default (and it would always be `cpu`) in user-facing functions now.\r\n\r\nIt is better to fail loudly.\r\n\r\nI hadn't noticed that this is a draft PR. If it's a draft because you still have a lot of user-facing functions to update, you don't need re-approval to merge it. I'm in favor of the principle.",
  "created_at":"2022-12-02T21:29:36Z",
  "id":1335861411,
  "issue":1940,
  "node_id":"IC_kwDODBCWws5Pn6Cj",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-02T21:29:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Thanks! I'm going to make two changes; removing `\"mixed\"` from our high level API, and to associate the backend name on the backend object so this code becomes more trivial.",
  "created_at":"2022-12-02T21:30:53Z",
  "id":1335862262,
  "issue":1940,
  "node_id":"IC_kwDODBCWws5Pn6P2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T21:30:53Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Raising an error in mixed cases is right. We should not have any array with different backends in different nodes.",
  "created_at":"2022-12-02T21:36:49Z",
  "id":1335866389,
  "issue":1940,
  "node_id":"IC_kwDODBCWws5Pn7QV",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-02T21:36:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, this is done. I've added a check to ensure that we throw a `ValueError` if users somehow encounter a typetracer",
  "created_at":"2022-12-02T21:59:44Z",
  "id":1335888560,
  "issue":1940,
  "node_id":"IC_kwDODBCWws5PoAqw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T21:59:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1941?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1941](https://codecov.io/gh/scikit-hep/awkward/pull/1941?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3edcd77) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/65ffb926dc05a88dd39a20c26eba4fcbc8b58ffe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (65ffb92) will **not change** coverage.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1941?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `72.78% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjb21iaW5hdGlvbnMucHk=) | `81.25% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19iYWNrZW5kLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3B5LnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_fields.py](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWVsZHMucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_flatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mbGF0dGVuLnB5) | `92.30% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_arrow.py](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2Fycm93LnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_avro\\_file.py](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2F2cm9fZmlsZS5weQ==) | `66.66% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2N1cHkucHk=) | `50.00% <\u00f8> (\u00f8)` | |\n| ... and [27 more](https://codecov.io/gh/scikit-hep/awkward/pull/1941/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-02T22:59:05Z",
  "id":1335941534,
  "issue":1941,
  "node_id":"IC_kwDODBCWws5PoNme",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T09:54:05Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed - I'll just do this in the non-docstring PR for simplicity",
  "created_at":"2022-12-05T10:12:36Z",
  "id":1337077554,
  "issue":1941,
  "node_id":"IC_kwDODBCWws5Psi8y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T10:12:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1942?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1942](https://codecov.io/gh/scikit-hep/awkward/pull/1942?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (916e295) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/16d482a973a84de3015132f91cbd7a8d64c1b800?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (16d482a) will **decrease** coverage by `0.00%`.\n> The diff coverage is `94.18%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1942?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `68.33% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `88.72% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `83.05% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `66.19% <75.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `89.62% <77.77%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19idWZmZXJzLnB5) | `90.00% <80.00%> (-10.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_categorical.py](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jYXRlZ29yaWNhbC5weQ==) | `92.15% <83.33%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.71% <85.71%> (-0.15%)` | :arrow_down: |\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `76.02% <88.88%> (\u00f8)` | |\n| ... and [112 more](https://codecov.io/gh/scikit-hep/awkward/pull/1942/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-02T23:10:04Z",
  "id":1335948250,
  "issue":1942,
  "node_id":"IC_kwDODBCWws5PoPPa",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-02T23:38:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this PR touches the indexing logic, and needs a careful eye.\r\n\r\nIt makes two big changes:\r\n1. fields are now only selected if a _list_ of strings is passed, rather than *any* iterable. This prevents arrays of strings selecting fields. This also means that an empty list behaves like an empty _array_, which was already the case.\r\n2. `RegularArray`s that succeed with `maybe_to_NumpyArray()` follow _NumPy_ indexing. Previously, they followed Awkward Indexing.\r\n\r\n(2) is the tricky point. First, a short history recap:\r\n- v1 prevented mixed regular-ragged layouts, leading to #434, so `keepdims=True` was changed to return the same type as the layout.\r\n- v2 removed this restriction.\r\n- #1811 made `keepdims=True` always return a `1` dimension (I.e. reverting the fix to #434)\r\n\r\nThis PR addresses #1358, which exposes the lack of symmetry between NumpyArray and RegularArray for indexing. \r\nThe fix for this issue is simple - make RegularArray agree with NumpyArray. However, this means users need to be careful. Consider the following:\r\n```python\r\n>>> a = ak.Array([[0, 1, 2], [3, 4], [5]])\r\n>>> a[ak.argmin(a, axis=1, keepdims=True)]\r\n<Array [[0], [3], [5]] type='3 * var * ?int64'>\r\n>>> a[ak.argmin(a, axis=1, keepdims=True, mask_identity=False)]\r\n<Array [[[0, 1, 2]], [[0, ...]], [[0, 1, 2]]] type='3 * 1 * var * int64'>\r\n```\r\nThe mask from `mask_identity=False` (case 1, implicit) means that the Awkward indexing is followed. Whereas in case 2 the mask is omitted and an identity used instead. Due to this, the array can trivially be converted to a NumPy array, and we use NumPy indexing.\r\n\r\nI think the question here is not \"is this correct?\" because if\r\n- we want to support multiple indexing types, and\r\n- we decide upon which one to use according to the layout type\r\n\r\nthen the observed behaviour is consistent with this. It's only that, from a UX perspective, it's only the difference between `?int64` and `int64` that means you get one or the other. \r\n\r\nAre you comfortable with this policy? (And indeed, anyone else on the team!) ",
  "created_at":"2022-12-03T16:53:31Z",
  "id":1336197310,
  "issue":1943,
  "node_id":"IC_kwDODBCWws5PpMC-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T18:36:50Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1943?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1943](https://codecov.io/gh/scikit-hep/awkward/pull/1943?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5d38b4b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/3682de69720fe6b584f46312d074dca22a667036?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3682de6) will **increase** coverage by `0.00%`.\n> The diff coverage is `92.85%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1943?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1943/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `79.53% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1943/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `85.71% <\u00f8> (\u00f8)` | |\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/1943/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `85.77% <90.00%> (-0.07%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1943/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.46% <100.00%> (+0.06%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1943/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.92% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1943/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.21% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1943/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `66.23% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1943/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.10% <0.00%> (+0.19%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-03T18:40:49Z",
  "id":1336216031,
  "issue":1943,
  "node_id":"IC_kwDODBCWws5PpQnf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T22:07:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> On the other example with the ?int64 vs int64 toggling Awkward and NumPy slicing, I can see why that happens and I agree that it's confusing. We might say some point have to deprecate that behavior (warning on NumPy-style slicing and then phase it out\u2014forcing users to explicitly wrap as NumPy at some point...?), but not now\u2014it's too close to release time and that would be a major, major change.\r\n\r\nAs a precursor statement, I would not advocate changing slicing dramatically at this point. So, agreed! Also, I don't have a proposal here - this seems to me to be a fundamental constraint with our indexing; we support many indexing features, and they are not mutually exclusive, so we have to choose according to some scheme.\r\n\r\nMy long-running feeling has generally been that it's better to have useful type information (e.g. \"I reduced this axis, and so I have a length-1 dimension\") over pandering to the shortfalls of our indexing mechanism (e.g. \"I reduced a var dimension, so it stays var\"). And, to be clear, I don't think any of this is \"wrong\" or \"right\", it just has its pros and cons.\r\n\r\n> We might say some point have to deprecate that behavior (warning on NumPy-style slicing and then phase it out\u2014forcing users to explicitly wrap as NumPy at some point...?), but not now\u2014it's too close to release time and that would be a major, major change.\r\n\r\nActually, this seems like the \"best\" solution to me in the long-long term. Introducing a new accessor like `.at` would make a lot of code less readable long-term, and I don't think most people are likely to _want_ NumPy indexing. Awkward's indexing is more powerful for the kinds of data we work with. We can discuss this after the release; I'll open an issue.\r\n\r\nI raised this just to make sure I'm not doing anything daft \u00ad\u2014 this is very fundamental code I'm changing (fixing), and I wanted to make sure that we're all on the same page.",
  "created_at":"2022-12-03T20:30:16Z",
  "id":1336252835,
  "issue":1943,
  "node_id":"IC_kwDODBCWws5PpZmj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T20:30:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I've reverted b4456fca08ff346ef201bd8df2c091480962909c and added new tests that enshrine this behavior :)",
  "created_at":"2022-12-03T20:36:35Z",
  "id":1336253745,
  "issue":1943,
  "node_id":"IC_kwDODBCWws5PpZ0x",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-03T20:36:35Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This only touches docs, so it doesn't run any of the build tests. There doesn't seem to be a sane way to specify conditional required tests. We could make all workflows run for every PR, and skip every step if the job is not required, but that will bloat all of our workflows",
  "created_at":"2022-12-04T13:22:37Z",
  "id":1336410703,
  "issue":1946,
  "node_id":"IC_kwDODBCWws5PqAJP",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-04T13:22:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1946?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1946](https://codecov.io/gh/scikit-hep/awkward/pull/1946?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dc0f91e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/65ffb926dc05a88dd39a20c26eba4fcbc8b58ffe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (65ffb92) will **increase** coverage by `0.01%`.\n> The diff coverage is `72.72%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1946?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `72.78% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjYXJ0ZXNpYW4ucHk=) | `78.94% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcombinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjb21iaW5hdGlvbnMucHk=) | `81.25% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argsort.py](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdzb3J0LnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_backend.py](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19iYWNrZW5kLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_cartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXJ0ZXNpYW4ucHk=) | `89.76% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_categories.py](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jYXRlZ29yaWVzLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb21iaW5hdGlvbnMucHk=) | `92.85% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_concatenate.py](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb25jYXRlbmF0ZS5weQ==) | `96.03% <\u00f8> (\u00f8)` | |\n| ... and [60 more](https://codecov.io/gh/scikit-hep/awkward/pull/1946/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-04T23:22:32Z",
  "id":1336547608,
  "issue":1946,
  "node_id":"IC_kwDODBCWws5PqhkY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T19:41:55Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1947?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1947](https://codecov.io/gh/scikit-hep/awkward/pull/1947?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (082f8c0) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/65ffb926dc05a88dd39a20c26eba4fcbc8b58ffe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (65ffb92) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1947?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `89.04% <100.00%> (+0.12%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `66.35% <100.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/behaviors/string.py](https://codecov.io/gh/scikit-hep/awkward/pull/1947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvYmVoYXZpb3JzL3N0cmluZy5weQ==) | `76.82% <100.00%> (+0.79%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1947/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `85.24% <100.00%> (+2.19%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-05T14:53:47Z",
  "id":1337520035,
  "issue":1947,
  "node_id":"IC_kwDODBCWws5PuO-j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T15:11:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closed in favour of #1951 ",
  "created_at":"2022-12-05T22:28:28Z",
  "id":1338267770,
  "issue":1947,
  "node_id":"IC_kwDODBCWws5PxFh6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T22:28:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1948?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1948](https://codecov.io/gh/scikit-hep/awkward/pull/1948?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e018b3c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2f0491948f96b25461960482af9ebf0f7ed4f822?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2f04919) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-05T17:16:28Z",
  "id":1337768314,
  "issue":1948,
  "node_id":"IC_kwDODBCWws5PvLl6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T20:02:10Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"All of the test failures are\r\n\r\n```\r\nFetching the repository\r\n  /usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +54770997ac0eaeda2e4e7be38f3ae0566aaa9022:refs/remotes/pull/1948/merge\r\n  Error: fatal: protocol error: bad pack header\r\n  The process '/usr/bin/git' failed with exit code 128\r\n  Waiting 15 seconds before trying again\r\n  /usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +5[47](https://github.com/scikit-hep/awkward/actions/runs/3622327654/jobs/6106902158#step:2:52)70997ac0eaeda2e4e7be38f3ae0566aaa9022:refs/remotes/pull/1948/merge\r\n  Error: fatal: protocol error: bad pack header\r\n  The process '/usr/bin/git' failed with exit code 128\r\n  Waiting 12 seconds before trying again\r\n  /usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +54770997ac0eaeda2e4e7be38f3ae0566aaa9022:refs/remotes/pull/19[48](https://github.com/scikit-hep/awkward/actions/runs/3622327654/jobs/6106902158#step:2:53)/merge\r\n  Error: fatal: protocol error: bad pack header\r\n  Error: The process '/usr/bin/git' failed with exit code 128\r\n```\r\n\r\nSo I'll just restart them.",
  "created_at":"2022-12-05T17:25:55Z",
  "id":1337781837,
  "issue":1948,
  "node_id":"IC_kwDODBCWws5PvO5N",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T17:25:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1949?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1949](https://codecov.io/gh/scikit-hep/awkward/pull/1949?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9c5f941) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/65ffb926dc05a88dd39a20c26eba4fcbc8b58ffe?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (65ffb92) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1949?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.64% <100.00%> (+0.05%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.08% <0.00%> (+0.21%)` | :arrow_up: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1949/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.14% <0.00%> (+0.40%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-05T18:07:58Z",
  "id":1337876625,
  "issue":1949,
  "node_id":"IC_kwDODBCWws5PvmCR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T18:24:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski  could you reflect on where this sits with you? Still to decide on `__broadcast__`. That feels more low level than `ufunc` etc.",
  "created_at":"2022-12-05T20:10:38Z",
  "id":1338103304,
  "issue":1951,
  "node_id":"IC_kwDODBCWws5PwdYI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T20:10:38Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1951?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1951](https://codecov.io/gh/scikit-hep/awkward/pull/1951?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7035eb1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/ebec483334fda98dfaa6cdb35c714d254a6e19db?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ebec483) will **increase** coverage by `0.02%`.\n> The diff coverage is `85.71%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1951?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_to\\_dataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19kYXRhZnJhbWUucHk=) | `92.30% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `91.30% <80.00%> (+8.25%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `66.35% <83.33%> (+0.15%)` | :arrow_up: |\n| [src/awkward/\\_connect/numba/arrayview.py](https://codecov.io/gh/scikit-hep/awkward/pull/1951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtYmEvYXJyYXl2aWV3LnB5) | `93.31% <100.00%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `72.78% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_is\\_tuple.py](https://codecov.io/gh/scikit-hep/awkward/pull/1951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc190dXBsZS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/1951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19sYXlvdXQucHk=) | `86.95% <100.00%> (+6.18%)` | :arrow_up: |\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/1951/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `67.94% <0.00%> (-0.20%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-12-05T20:13:29Z",
  "id":1338107341,
  "issue":1951,
  "node_id":"IC_kwDODBCWws5PweXN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T23:08:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"> @jpivarski could you reflect on where this sits with you? Still to decide on `__broadcast__`. That feels more low level than `ufunc` etc.\r\n\r\nThe `__broadcast__` overload is low-level; it's used inside `broadcast_and_apply`, so that one can write the string equality operation and have it not broadcast the strings to have the same lengths in the two arrays. That's very much a tree-structure manipulation thing.",
  "created_at":"2022-12-05T21:52:14Z",
  "id":1338224602,
  "issue":1951,
  "node_id":"IC_kwDODBCWws5Pw6_a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T21:52:14Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski happy with this? I didn't touch the numba code, because numba deals with types.",
  "created_at":"2022-12-05T22:17:21Z",
  "id":1338253593,
  "issue":1951,
  "node_id":"IC_kwDODBCWws5PxCEZ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-05T22:17:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> My understanding is that this PR changes `ak.transform` to now require `Content` instances (or None) as a return value from the function that the downstream developer writes. I don't see any other changes in how developer-provided functions get called or expect as return values\u2014I guess we decided that all other cases should stay as they are.\r\n\r\nYes, it makes `ak.transform` less permissive in what the user can return.\r\n\r\nIt *also*:\r\n- ensures that all `_array_ufunc_custom_cast` casts its arguments to `ak.Array` (in practice I think they always are)\r\n- removes `numpytype` from `ak.to_layout`\r\n- ensures that `__array_function__` overload results are converted to `ak.Array`.",
  "created_at":"2022-12-05T22:23:23Z",
  "id":1338263341,
  "issue":1951,
  "node_id":"IC_kwDODBCWws5PxEct",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T22:23:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"These are all good changes; it can be merged. (\"Ensure\" is not a change in behavior, but important for API!)",
  "created_at":"2022-12-05T22:24:56Z",
  "id":1338264730,
  "issue":1951,
  "node_id":"IC_kwDODBCWws5PxEya",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T22:24:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This one would close #1631, wouldn't it?",
  "created_at":"2022-12-05T22:29:35Z",
  "id":1338268789,
  "issue":1951,
  "node_id":"IC_kwDODBCWws5PxFx1",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-05T22:29:35Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1952?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1952](https://codecov.io/gh/scikit-hep/awkward/pull/1952?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8af3b42) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/ebec483334fda98dfaa6cdb35c714d254a6e19db?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ebec483) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1952?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_to\\_cupy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19jdXB5LnB5) | `33.33% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_jax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19qYXgucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1952/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19udW1weS5weQ==) | `100.00% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-05T21:19:03Z",
  "id":1338180309,
  "issue":1952,
  "node_id":"IC_kwDODBCWws5PwwLV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T23:12:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1953?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1953](https://codecov.io/gh/scikit-hep/awkward/pull/1953?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (abfdb6e) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/ebec483334fda98dfaa6cdb35c714d254a6e19db?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ebec483) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-05T22:53:19Z",
  "id":1338287574,
  "issue":1953,
  "node_id":"IC_kwDODBCWws5PxKXW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T22:53:19Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1954?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1954](https://codecov.io/gh/scikit-hep/awkward/pull/1954?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b5ae0f0) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/86471d360e5ef3ab6d32ae3835a940b413b618e4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (86471d3) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1954?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `72.78% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_combinations.py](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb21iaW5hdGlvbnMucHk=) | `92.85% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_copy.py](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3B5LnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudC5weQ==) | `96.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `95.12% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maXJzdHMucHk=) | `88.23% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_flatten.py](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mbGF0dGVuLnB5) | `92.30% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_json.py](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pzb24ucHk=) | `91.81% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_regular.py](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JlZ3VsYXIucHk=) | `92.85% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_full\\_like.py](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mdWxsX2xpa2UucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| ... and [19 more](https://codecov.io/gh/scikit-hep/awkward/pull/1954/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-05T23:24:08Z",
  "id":1338343818,
  "issue":1954,
  "node_id":"IC_kwDODBCWws5PxYGK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T00:10:56Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"100% of these changes are in code snippets in docstrings.",
  "created_at":"2022-12-05T23:39:13Z",
  "id":1338363682,
  "issue":1954,
  "node_id":"IC_kwDODBCWws5Pxc8i",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T23:39:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"You have the go-ahead to merge once you've either changed or ignored the discussion points! :)",
  "created_at":"2022-12-05T23:49:42Z",
  "id":1338376140,
  "issue":1954,
  "node_id":"IC_kwDODBCWws5Pxf_M",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-05T23:49:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77 I've enabled auto-merge, and only re-requested the review so that you can make it not red. It won't stop the merge.\r\n\r\nThanks!",
  "created_at":"2022-12-06T00:03:16Z",
  "id":1338390683,
  "issue":1954,
  "node_id":"IC_kwDODBCWws5Pxjib",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T00:03:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1955?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1955](https://codecov.io/gh/scikit-hep/awkward/pull/1955?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6506c42) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/86471d360e5ef3ab6d32ae3835a940b413b618e4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (86471d3) will **decrease** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1955?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1955/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.00% <\u00f8> (-0.15%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1955/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward/pull/1955/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `91.66% <100.00%> (-0.18%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-12-06T00:23:43Z",
  "id":1338479989,
  "issue":1955,
  "node_id":"IC_kwDODBCWws5Px5V1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T00:23:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1956?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1956](https://codecov.io/gh/scikit-hep/awkward/pull/1956?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a2437fa) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/d1ff4f1485c32c9e29f91da45b562aa1612ef1e1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d1ff4f1) will **decrease** coverage by `0.04%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1956?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1956/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JkYXRhZnJhbWUucHk=) | `17.64% <0.00%> (-25.22%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_where.py](https://codecov.io/gh/scikit-hep/awkward/pull/1956/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aGVyZS5weQ==) | `91.66% <0.00%> (-0.18%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1956/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.00% <0.00%> (-0.15%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_broadcast\\_arrays.py](https://codecov.io/gh/scikit-hep/awkward/pull/1956/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19icm9hZGNhc3RfYXJyYXlzLnB5) | `100.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-06T00:46:22Z",
  "id":1338497577,
  "issue":1956,
  "node_id":"IC_kwDODBCWws5Px9op",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T00:46:22Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"That's all reviewers! I'll merge.",
  "created_at":"2022-12-06T09:39:33Z",
  "id":1339039688,
  "issue":1956,
  "node_id":"IC_kwDODBCWws5P0B_I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T09:39:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Although I don't know why that Uproot test didn't fail for not having #1919. scikit-hep/uproot5#788 is waiting to fix that, but I would have thought it would trigger in that test.",
  "created_at":"2022-12-06T01:56:49Z",
  "id":1338617632,
  "issue":1959,
  "node_id":"IC_kwDODBCWws5Pya8g",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T01:56:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1959?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1959](https://codecov.io/gh/scikit-hep/awkward/pull/1959?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4810eb6) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/150d0f9341fde7be8e630ae5af15f008b57e1538?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (150d0f9) will **decrease** coverage by `0.00%`.\n> The diff coverage is `50.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1959?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1959/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.90% <50.00%> (-0.08%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-12-06T02:03:11Z",
  "id":1338622665,
  "issue":1959,
  "node_id":"IC_kwDODBCWws5PycLJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T02:03:11Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1960?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1960](https://codecov.io/gh/scikit-hep/awkward/pull/1960?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e7eb79a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/f72ca9c6cc89c1316fd1c7a10f29124db4573c05?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f72ca9c) will **decrease** coverage by `0.00%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1960?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_connect/rdataframe/from\\_rdataframe.py](https://codecov.io/gh/scikit-hep/awkward/pull/1960/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvcmRhdGFmcmFtZS9mcm9tX3JkYXRhZnJhbWUucHk=) | `0.00% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-06T10:59:41Z",
  "id":1339145464,
  "issue":1960,
  "node_id":"IC_kwDODBCWws5P0bz4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T15:47:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> This is good: it fixes the observed error. Is there any other non-valid value that `form_str` can take? Is it true that any other value it can take is JSON and represents a real Form that `from_buffers` can either use or will fail with an appropriate error message there?\r\n> \r\n> (This is just a question for follow-up work. This PR is an improvement in itself and I'll be merging it now. Thanks!!!)\r\n\r\nYes, any other value returned by `type_to_form` and passed here is a valid JSON and represents a Form. ",
  "created_at":"2022-12-07T12:41:27Z",
  "id":1340910809,
  "issue":1960,
  "node_id":"IC_kwDODBCWws5P7KzZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-07T12:41:27Z",
  "user":"MDQ6VXNlcjEzOTA2ODI="
 },
 {
  "author_association":"MEMBER",
  "body":"~~We have a protocol, used and assumed throughout the codebase, that a missing parameter is exactly equivalent to a parameter whose value is `None`. The idea was that you can remove a parameter by assigning `None`.~~\r\n\r\n~~Adding an `ak.without_parameter` function is still a good idea because users might not know this fact about parameters and may be looking for `ak.with_parameter`'s opposite.~~",
  "created_at":"2022-12-06T17:23:19Z",
  "id":1339719689,
  "issue":1961,
  "node_id":"IC_kwDODBCWws5P2oAJ",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-13T17:37:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"My comment above is totally batty: I thought this was about layout `parameters`, when it's about record `fields`!\r\n\r\n> Unlike `with_parameter`, where `None` has special meaning",
  "created_at":"2022-12-13T17:37:17Z",
  "id":1349224485,
  "issue":1961,
  "node_id":"IC_kwDODBCWws5Qa4gl",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T17:38:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1962?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1962](https://codecov.io/gh/scikit-hep/awkward/pull/1962?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (50bea08) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4e4bb542c1f79a6acd22cb069fb8891a924e5fe6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4e4bb54) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1962?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_with\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/1962/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRoX2ZpZWxkLnB5) | `100.00% <100.00%> (+2.12%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-06T12:40:02Z",
  "id":1339264593,
  "issue":1962,
  "node_id":"IC_kwDODBCWws5P045R",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-09T09:30:13Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Plus, we can always relax this if it becomes important.",
  "created_at":"2022-12-09T09:22:03Z",
  "id":1344056940,
  "issue":1962,
  "node_id":"IC_kwDODBCWws5QHK5s",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-09T09:22:03Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1963?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1963](https://codecov.io/gh/scikit-hep/awkward/pull/1963?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (850379b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/63407b381ea8f4e88e1a9b68739c5e4589bc3df1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (63407b3) will **increase** coverage by `0.05%`.\n> The diff coverage is `87.17%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1963?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1963/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `74.51% <40.00%> (+0.88%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_without\\_field.py](https://codecov.io/gh/scikit-hep/awkward/pull/1963/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha193aXRob3V0X2ZpZWxkLnB5) | `93.93% <93.93%> (\u00f8)` | |\n| [src/awkward/operations/\\_\\_init\\_\\_.py](https://codecov.io/gh/scikit-hep/awkward/pull/1963/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward/pull/1963/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2l0ZXIucHk=) | `94.44% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_json.py](https://codecov.io/gh/scikit-hep/awkward/pull/1963/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pzb24ucHk=) | `91.81% <0.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-06T14:52:30Z",
  "id":1339502908,
  "issue":1963,
  "node_id":"IC_kwDODBCWws5P1zE8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T21:41:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This branch is now complete; the actions have passed (no build test, because all docs).",
  "created_at":"2022-12-06T16:52:31Z",
  "id":1339671609,
  "issue":1964,
  "node_id":"IC_kwDODBCWws5P2cQ5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T16:52:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"My local build doesn't agree with RTD. Investigating...",
  "created_at":"2022-12-06T17:24:34Z",
  "id":1339721244,
  "issue":1964,
  "node_id":"IC_kwDODBCWws5P2oYc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T17:24:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This isn't the right solution, as I alluded to above. I narrowed the actual culprit down to our RTD build, which didn't have IPython. I'll open a new PR to do that.",
  "created_at":"2022-12-06T18:05:37Z",
  "id":1339769321,
  "issue":1964,
  "node_id":"IC_kwDODBCWws5P20Hp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T18:05:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1965?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1965](https://codecov.io/gh/scikit-hep/awkward/pull/1965?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (cb81d0b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/2f0491948f96b25461960482af9ebf0f7ed4f822?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2f04919) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-06T17:11:33Z",
  "id":1339699208,
  "issue":1965,
  "node_id":"IC_kwDODBCWws5P2jAI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T20:06:27Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The \"Docs / deploy-docs (pull_request)\" test is repeatedly failing with\r\n\r\n```\r\n# Sanitise ref name\r\n  # NB: head_ref is only valid for PR triggers\r\n  export VERSION_SLUG=$(echo \"dependabot/github_actions/pypa/cibuildwheel-2.11.[3](https://github.com/scikit-hep/awkward/actions/runs/3631717339/jobs/6127059852#step:3:3)\" | sed -E \"s@/@-@g\" | sed -E 's/.*/\\L&/')\r\n  # Export for subsequent steps\r\n  echo \"VERSION_SLUG=$VERSION_SLUG\" >> $GITHUB_ENV\r\n  # Activate version\r\n  curl \\\r\n    -X PATCH \\\r\n    -H \"Authorization: Token \" \\\r\n        \"https://readthedocs.org/api/v3/projects/awkward-array/versions/$VERSION_SLUG/\" \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -d '{\"active\":true,\"hidden\":true}' \\\r\n    --fail\r\n  shell: /usr/bin/bash -e {0}\r\n  env:\r\n    PYTHON_VERSION: 3.10.6\r\n    SOURCE_DATE_EPOCH: 1668811211\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\n 32    88    0     0  100    29      0    1[4](https://github.com/scikit-hep/awkward/actions/runs/3631717339/jobs/6127059852#step:3:4)[5](https://github.com/scikit-hep/awkward/actions/runs/3631717339/jobs/6127059852#step:3:5) --:--:-- --:--:-- --:--:--   14[6](https://github.com/scikit-hep/awkward/actions/runs/3631717339/jobs/6127059852#step:3:6)\r\ncurl: ([22](https://github.com/scikit-hep/awkward/actions/runs/3631717339/jobs/6127059852#step:3:23)) The requested URL returned error: 401\r\nError: Process completed with exit code 22.\r\n```",
  "created_at":"2022-12-06T17:29:42Z",
  "id":1339727637,
  "issue":1965,
  "node_id":"IC_kwDODBCWws5P2p8V",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T17:29:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"The last message was an hour ago, so I guess you're done with this PR. Half the tests didn't run because it's a documentation-only change. I'll press the red button and merge it.",
  "created_at":"2022-12-06T19:53:17Z",
  "id":1339927925,
  "issue":1966,
  "node_id":"IC_kwDODBCWws5P3a11",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T19:53:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this PR is fixing the user guide, whose code cells are unstyled in the RTD main. ",
  "created_at":"2022-12-06T20:12:31Z",
  "id":1339949107,
  "issue":1966,
  "node_id":"IC_kwDODBCWws5P3gAz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-06T20:12:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1968?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1968](https://codecov.io/gh/scikit-hep/awkward/pull/1968?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (abb8396) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e5836e9dcc0b6db92079b36e5bc4f730c6dde7ac?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e5836e9) will **increase** coverage by `0.01%`.\n> The diff coverage is `86.51%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1968?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc19ub25lLnB5) | `96.55% <\u00f8> (\u00f8)` | |\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `80.51% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `90.44% <50.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.33% <75.00%> (-0.03%)` | :arrow_down: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.46% <75.00%> (-0.17%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.56% <75.00%> (-0.09%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.67% <75.00%> (-0.12%)` | :arrow_down: |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `83.41% <75.00%> (-0.09%)` | :arrow_down: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `70.88% <75.00%> (-0.06%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_firsts.py](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maXJzdHMucHk=) | `90.32% <86.95%> (+2.08%)` | :arrow_up: |\n| ... and [7 more](https://codecov.io/gh/scikit-hep/awkward/pull/1968/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-06T22:51:50Z",
  "id":1340118258,
  "issue":1968,
  "node_id":"IC_kwDODBCWws5P4JTy",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-07T18:47:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The main thing that will look different to an ordinary user is that `ak.singletons` no longer descends to the first option-type level and works there; it needs an explicit `axis` argument. There were a few other functions that had to be upgraded that way once\u2014I think that happened to `ak.fill_none` rather early\u2014and `ak.singletons` is probably the last to need that correction. It's a user-facing API change.\r\n\r\n`ak.firsts` already had an `axis` argument and it seemed to be working fine, apart from the fact that it didn't handle negative values.\r\n\r\nSo for `ak.singletons` and `ak.firsts` in particular, this PR served as a look-over to ensure that they're in good shape, plus the `axis` for `ak.singletons`. I had vaguely remembered these functions misbehaving for anything but the simplest jagged arrays, but that must have been fixed some time ago.\r\n\r\nHowever, by reimplementing them with modern machinery (`_recursively_apply`), it reminded me about some things that needed to be fixed up in that machinery. I've been wanting to hide `_recursively_apply` for a while, and the issue with it needing to pass down a `simplify` option was just an oversight. Actually, a partial oversight, because `UnionArray._recursively_apply` was always applying the `simplified` constructor. It needs to be configurable, though.\r\n\r\nSo that's it from me: if you approve of these changes, let me know!",
  "created_at":"2022-12-07T00:12:40Z",
  "id":1340186689,
  "issue":1968,
  "node_id":"IC_kwDODBCWws5P4aBB",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-07T00:12:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"@agoose77 Now this PR does not hide `recursively_apply` (that will be the next PR), but it does everything the title says it does.",
  "created_at":"2022-12-07T18:46:47Z",
  "id":1341418298,
  "issue":1968,
  "node_id":"IC_kwDODBCWws5P9Gs6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-07T18:47:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1970?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1970](https://codecov.io/gh/scikit-hep/awkward/pull/1970?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9a0bd09) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/06af813471b3c7e323f9146c758698ba6490920c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (06af813) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-08T03:18:59Z",
  "id":1341931525,
  "issue":1970,
  "node_id":"IC_kwDODBCWws5P_EAF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T03:23:33Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1971?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1971](https://codecov.io/gh/scikit-hep/awkward/pull/1971?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b05cf7a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e5836e9dcc0b6db92079b36e5bc4f730c6dde7ac?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e5836e9) will **decrease** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1971?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1971/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.43% <\u00f8> (-0.15%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1971/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc19ub25lLnB5) | `96.55% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-07T19:09:49Z",
  "id":1341459180,
  "issue":1971,
  "node_id":"IC_kwDODBCWws5P9Qrs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-07T19:09:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1972?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1972](https://codecov.io/gh/scikit-hep/awkward/pull/1972?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (26b51ae) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/5b754e30664cfe7ddd78a5adc250c025c7ce740c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5b754e3) will **increase** coverage by `0.08%`.\n> The diff coverage is `89.75%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1972?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `96.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `96.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjYXJ0ZXNpYW4ucHk=) | `78.94% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudC5weQ==) | `96.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudF9ub256ZXJvLnB5) | `96.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `23.52% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_prod.py](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wcm9kLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_sum.py](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdW0ucHk=) | `90.32% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `91.30% <\u00f8> (\u00f8)` | |\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `82.96% <\u00f8> (+2.44%)` | :arrow_up: |\n| ... and [57 more](https://codecov.io/gh/scikit-hep/awkward/pull/1972/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-07T19:56:17Z",
  "id":1341513305,
  "issue":1972,
  "node_id":"IC_kwDODBCWws5P9d5Z",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T16:21:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"At this point, Content has an API that will not be hard to maintain:\r\n\r\nL2: :open_file_folder: \r\nL3:  :lock:\r\n\r\n**Form handling:** :open_file_folder: \r\n\r\n- `form_cls`\r\n- `form`\r\n- `form_with_key`\r\n\r\n**Type properties:** :open_file_folder: \r\n\r\n- `is_numpy`\r\n- `is_unknown`\r\n- `is_list`\r\n- `is_regular`\r\n- `is_option`\r\n- `is_indexed`\r\n- `is_record`\r\n- `is_union`\r\n\r\n**Extended type properties:** :open_file_folder: \r\n\r\n- `is_tuple`\r\n- `is_leaf`\r\n- `is_identity_like`\r\n\r\n**Aspects:** :open_file_folder: \r\n\r\n- `length`\r\n- `backend`\r\n- `parameters`\r\n- `parameter`\r\n- `with_parameter`\r\n- `fields`\r\n- `nbytes`\r\n\r\n**Constructors:** :open_file_folder: \r\n\r\n- `__init__`\r\n- `copy`\r\n- `simplified`\r\n\r\n**Python interface:** :open_file_folder: \r\n\r\n- `__len__`\r\n- `__iter__`\r\n- `__getitem__`\r\n- `__copy__`\r\n- `__deepcopy__`\r\n- `__array_ufunc__`, `__array_function__`, `__array__` (to prevent them)\r\n\r\n~~**Reducers:**~~ :wrench: \r\n\r\n- `argmin` :boom: \r\n- `argmax` :boom: \r\n- `count` :boom: \r\n- `count_nonzero` :boom: \r\n- `sum` :boom: \r\n- `prod` :boom: \r\n- `any` :boom: \r\n- `all` :boom: \r\n- `min` :boom: \r\n- `max` :boom: \r\n\r\n**Sorting:** :wrench: \r\n\r\n- `argsort`\r\n- `sort`\r\n\r\n**Packing:** :wrench: \r\n\r\n- `packed` (a _property_...) \u2192 `to_packed()`\r\n\r\n**Conversion:**\r\n\r\n- `to_arrow`\r\n- `to_backend`\r\n- `to_json`\r\n- `to_list`, ~`tolist`~\r\n- `to_numpy`\r\n- `maybe_to_array` \u2192 `_maybe_to_array`\r\n\r\n**Form properties:** :open_file_folder: \r\n\r\n- `branch_depth`\r\n- `dimension_optiontype`\r\n- `purelist_depth`\r\n- `purelist_isregular`\r\n- `purelist_parameter`\r\n- `minmax_depth`\r\n\r\n**TypeTracer access:** :open_file_folder: \r\n\r\n- ~`forget_length`~\r\n- `typetracer` \u2192 `to_typetracer`\r\n\r\n**Equality:**\r\n\r\n- `layout_equal` \u2192 `equals`\r\n\r\n**Validity:** \r\n\r\n- `validity_error` :wrench: \r\n- `validity_error_parameters` \u2192 `_validity_error_parameters`\r\n\r\n**Option-type API:** only applies to layouts for which `is_option` :open_file_folder: \r\n\r\n- `mask_as_bool`\r\n- `project`\r\n- `to_BitMaskedArray`\r\n- `to_ByteMaskedArray`\r\n- `to_IndexedOptionArray64`\r\n\r\n**List-type API:** only applies to layouts for which `is_list` :open_file_folder: \r\n\r\n- `starts`\r\n- `stops`\r\n- `to_ListOffsetArray64`\r\n- `to_RegularArray`\r\n\r\nAlso, `RegularArray` has  :open_file_folder: \r\n\r\n- `maybe_to_NumpyArray` \u2192 implement for `NumpyArray`\r\n- `offsets`\r\n\r\n**IndexedArray API:**  :open_file_folder: \r\n\r\n- `mask_as_bool`\r\n- `project`\r\n- `to_IndexedOptionArray64`\r\n\r\n**UnionArray API:** :open_file_folder: \r\n\r\n- `content`\r\n- `nested_tags_index`\r\n- `project`\r\n- `regular_index`\r\n\r\n**RecordArray API:** :open_file_folder: \r\n\r\n- `as_tuple` \u2192 `to_tuple`\r\n- `content`\r\n- `field_to_index`\r\n- `has_field`\r\n- `index_to_field`\r\n\r\n**NumpyArray API:**  :open_file_folder: \r\n\r\n- `dtype`\r\n- `shape`, `inner_shape`\r\n- `strides`\r\n- `contiguous` \u2192 `to_contiguous`\r\n- `is_contiguous`\r\n- `ptr` :lock: \r\n- `raw` :lock: \r\n- `to_RegularArray`\r\n\r\n**EmptyArray API:** :open_file_folder: \r\n\r\n- `to_NumpyArray`\r\n\r\n-----------------\r\n\r\nBut I have to fix `UnionArray.merging_strategy`, which is accidentally not hidden.\r\n\r\nThese lists were generated using\r\n\r\n```python\r\nimport awkward as ak\r\n\r\nlayouts = [\r\n    x for x in [getattr(ak.contents, x) for x in dir(ak.contents)]\r\n    if isinstance(x, type) and issubclass(x, ak.contents.Content)\r\n]\r\n\r\nContent_api = sorted([x for x in dir(ak.contents.Content) if not x.startswith(\"_\")])\r\n\r\nfor x in Content_api:\r\n    print(x)\r\n\r\nfor x in sorted(layouts, key=lambda x: x.__name__):\r\n    print(x.__name__, sorted([y for y in dir(x) if not y.startswith(\"_\") and not y in Content_api]))\r\n```\r\n\r\nand a lot of editing.",
  "created_at":"2022-12-08T02:50:22Z",
  "id":1341907077,
  "issue":1972,
  "node_id":"IC_kwDODBCWws5P--CF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T18:24:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"`UnionArray.merge_strategy` \u2192 `UnionArray._merge_strategy` was good to fix because it's an internal method and only the underscored version gets called. By missing the underscore, `UnionArray` was getting `Content._merge_strategy`, which is a little different, but apparently not in a way that the tests noticed.\r\n\r\n-------------------\r\n\r\nI have checked the entire public API of Awkward Array, and I think what we have, at the end of this PR, is something we can support. We can add things at any time, and we can change the mechanism by which hidden things are hidden (such as refactoring this `ak._do` to something else; that's not off the table). But the API we're exposing now is not something that we'd want to take away from.\r\n\r\nMost of what I removed from the `Content` API are helper functions for implementing `ak.*` functions. There are still helper functions that start with underscores, but that's fine.\r\n\r\nThe merging system especially had to be hidden, since that was full of historical choices. (For example, when the `merge` of two `Contents` was expanded to `mergemany` for N `Contents`, the original `merge` API was left in _so that I wouldn't have to change a lot of tests._ Also, these functions can only be called under certain conditions: if you call `mergemany` when `mergeable` is False, you'll probably get a segfault. That's why these things need to be hidden!)",
  "created_at":"2022-12-08T03:16:03Z",
  "id":1341929514,
  "issue":1972,
  "node_id":"IC_kwDODBCWws5P_Dgq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T03:16:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Rename suggestions:\r\n`contiguous()` \u2192`to_contiguous()`\r\n`layout_equal()` \u2192`is_equal()`?\r\n`as_tuple()` -> `to_tuple()`?\r\n",
  "created_at":"2022-12-08T16:32:12Z",
  "id":1342987016,
  "issue":1972,
  "node_id":"IC_kwDODBCWws5QDFsI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T16:32:43Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"All L3 are underscored, but added to a set of safe rules.\r\n- Same-name class can call any method of same name class?\r\n- System of method names with same prefix can call within system across across types?\r\n- L3 cannot be descriptors (properties)\r\n- Define set of \"public\" L3 attributes\r\n- All above are read-only.\r\n",
  "created_at":"2022-12-08T18:11:19Z",
  "id":1343114659,
  "issue":1972,
  "node_id":"IC_kwDODBCWws5QDk2j",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T18:12:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"`ak._do` is motivated by the loss of a Python private-public distinction in the Content namespace, so we use namespace for the entry points. This is not exactly the case in this PR, but we will do this down the road!",
  "created_at":"2022-12-08T18:29:13Z",
  "id":1343156476,
  "issue":1972,
  "node_id":"IC_kwDODBCWws5QDvD8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T20:35:29Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"cc @martindurant ",
  "created_at":"2022-12-07T20:05:53Z",
  "id":1341525960,
  "issue":1973,
  "node_id":"IC_kwDODBCWws5P9g_I",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-07T20:05:53Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"can be recreated with the following (`import awkward as ak` and `import dask_awkward as dak`)\r\n\r\n```python\r\nIn [1]: ds = dak.from_parquet(\r\n   ...:     \"s3://ddavistemp/higgs_pq/*.parquet\", storage_options={\"anon\": True}\r\n   ...: )\r\n\r\nIn [2]: dak.to_parquet(ds, \"outputs\")\r\n\r\nIn [3]: !ls outputs\r\npart00.parquet\tpart05.parquet\tpart10.parquet\tpart15.parquet\tpart20.parquet\tpart25.parquet\tpart30.parquet\tpart35.parquet\tpart40.parquet\tpart45.parquet\r\npart01.parquet\tpart06.parquet\tpart11.parquet\tpart16.parquet\tpart21.parquet\tpart26.parquet\tpart31.parquet\tpart36.parquet\tpart41.parquet\tpart46.parquet\r\npart02.parquet\tpart07.parquet\tpart12.parquet\tpart17.parquet\tpart22.parquet\tpart27.parquet\tpart32.parquet\tpart37.parquet\tpart42.parquet\tpart47.parquet\r\npart03.parquet\tpart08.parquet\tpart13.parquet\tpart18.parquet\tpart23.parquet\tpart28.parquet\tpart33.parquet\tpart38.parquet\tpart43.parquet\tpart48.parquet\r\npart04.parquet\tpart09.parquet\tpart14.parquet\tpart19.parquet\tpart24.parquet\tpart29.parquet\tpart34.parquet\tpart39.parquet\tpart44.parquet\tpart49.parquet\r\n\r\nIn [4]: ak.from_parquet(\"outputs\")\r\n```",
  "created_at":"2022-12-07T20:15:08Z",
  "id":1341535912,
  "issue":1973,
  "node_id":"IC_kwDODBCWws5P9jao",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-07T20:55:39Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1974?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1974](https://codecov.io/gh/scikit-hep/awkward/pull/1974?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (39d66f0) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/e5836e9dcc0b6db92079b36e5bc4f730c6dde7ac?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (e5836e9) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1974?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1974/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `73.32% <100.00%> (+0.53%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-07T20:26:08Z",
  "id":1341547523,
  "issue":1974,
  "node_id":"IC_kwDODBCWws5P9mQD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-07T20:26:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1975?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1975](https://codecov.io/gh/scikit-hep/awkward/pull/1975?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8bfe2e7) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8273e2eee9802f4fe77dd306a5afbc2ed1e59a0a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8273e2e) will **decrease** coverage by `0.00%`.\n> The diff coverage is `87.20%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1975?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_to\\_json.py](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19qc29uLnB5) | `83.56% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_list.py](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19saXN0LnB5) | `76.92% <0.00%> (\u00f8)` | |\n| [src/awkward/\\_broadcasting.py](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Jyb2FkY2FzdGluZy5weQ==) | `88.91% <50.00%> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `73.32% <50.00%> (\u00f8)` | |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.33% <68.08%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `79.79% <76.71%> (\u00f8)` | |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `83.41% <79.16%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.58% <80.00%> (\u00f8)` | |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `70.88% <81.81%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.53% <82.50%> (\u00f8)` | |\n| ... and [20 more](https://codecov.io/gh/scikit-hep/awkward/pull/1975/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-08T11:21:11Z",
  "id":1342563688,
  "issue":1975,
  "node_id":"IC_kwDODBCWws5QBeVo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T11:24:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This PR is superseded by the work started in #1972 and an upcoming PR.",
  "created_at":"2022-12-08T20:38:28Z",
  "id":1343325207,
  "issue":1975,
  "node_id":"IC_kwDODBCWws5QEYQX",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T20:38:28Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1976?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1976](https://codecov.io/gh/scikit-hep/awkward/pull/1976?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (efcafea) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8273e2eee9802f4fe77dd306a5afbc2ed1e59a0a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8273e2e) will **not change** coverage.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1976?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.33% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.46% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `75.93% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.58% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.56% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.67% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.50% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `79.79% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `90.44% <100.00%> (\u00f8)` | |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.53% <100.00%> (\u00f8)` | |\n| ... and [3 more](https://codecov.io/gh/scikit-hep/awkward/pull/1976/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-08T13:54:50Z",
  "id":1342774006,
  "issue":1976,
  "node_id":"IC_kwDODBCWws5QCRr2",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T13:54:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1977?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1977](https://codecov.io/gh/scikit-hep/awkward/pull/1977?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (276d448) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8273e2eee9802f4fe77dd306a5afbc2ed1e59a0a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8273e2e) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1977?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1977/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `89.39% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-08T15:12:45Z",
  "id":1342882349,
  "issue":1977,
  "node_id":"IC_kwDODBCWws5QCsIt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T15:12:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I'm stealing this back because I had already started and it will be very quick.",
  "created_at":"2022-12-08T19:37:03Z",
  "id":1343259913,
  "issue":1978,
  "node_id":"IC_kwDODBCWws5QEIUJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T19:37:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This being a documentation-only update, the code tests are not going to run, so I'll press the red button to merge without tests.",
  "created_at":"2022-12-08T19:21:04Z",
  "id":1343236628,
  "issue":1979,
  "node_id":"IC_kwDODBCWws5QECoU",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T19:21:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1981?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1981](https://codecov.io/gh/scikit-hep/awkward/pull/1981?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (86d4e29) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/5b754e30664cfe7ddd78a5adc250c025c7ce740c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5b754e3) will **increase** coverage by `0.09%`.\n> The diff coverage is `90.09%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1981?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `96.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `96.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjYXJ0ZXNpYW4ucHk=) | `78.94% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudC5weQ==) | `96.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudF9ub256ZXJvLnB5) | `96.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `89.39% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `23.52% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_prod.py](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wcm9kLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_sum.py](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdW0ucHk=) | `90.32% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `91.30% <\u00f8> (\u00f8)` | |\n| ... and [61 more](https://codecov.io/gh/scikit-hep/awkward/pull/1981/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-08T20:02:26Z",
  "id":1343285023,
  "issue":1981,
  "node_id":"IC_kwDODBCWws5QEOcf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T20:35:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I added a helper function to identify non-str iterables, and the rest is all you!",
  "created_at":"2022-12-08T20:34:27Z",
  "id":1343320842,
  "issue":1981,
  "node_id":"IC_kwDODBCWws5QEXMK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T20:34:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That helper function can be used in quite a few other places. The ak.Array constructor effectively makes the same test by first making one choice based on whether the given data is a string and then later handling the iterable case.",
  "created_at":"2022-12-08T20:46:12Z",
  "id":1343332422,
  "issue":1981,
  "node_id":"IC_kwDODBCWws5QEaBG",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T20:46:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1982?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1982](https://codecov.io/gh/scikit-hep/awkward/pull/1982?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9964687) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/5b754e30664cfe7ddd78a5adc250c025c7ce740c?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5b754e3) will **increase** coverage by `0.09%`.\n> The diff coverage is `89.75%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1982?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `96.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `96.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argcartesian.py](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdjYXJ0ZXNpYW4ucHk=) | `78.94% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudC5weQ==) | `96.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudF9ub256ZXJvLnB5) | `96.15% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3BhcnF1ZXQucHk=) | `89.39% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXRhZGF0YV9mcm9tX3BhcnF1ZXQucHk=) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_nan\\_to\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19uYW5fdG9fbm9uZS5weQ==) | `23.52% <0.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_prod.py](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wcm9kLnB5) | `87.09% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_sum.py](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdW0ucHk=) | `90.32% <\u00f8> (\u00f8)` | |\n| ... and [62 more](https://codecov.io/gh/scikit-hep/awkward/pull/1982/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-08T20:48:54Z",
  "id":1343334880,
  "issue":1982,
  "node_id":"IC_kwDODBCWws5QEang",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T22:13:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I just noticed that the Doxygen front page is out of date, too. I'll fix that within this PR.",
  "created_at":"2022-12-08T20:59:45Z",
  "id":1343345200,
  "issue":1982,
  "node_id":"IC_kwDODBCWws5QEdIw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T20:59:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is done and ready for review. (It's taking 5 minutes to build.)\r\n\r\nI made the assumption that the doxygen documentation front page will be two directories down from the documentation base, because that front page is currently at\r\n\r\nhttps://awkward-array.readthedocs.io/en/jpivarski-documentation-touch-ups/_static/doxygen/index.html\r\n\r\nSo the links to the kernels documentation (a \"FIXME\" in the original!), ArrayBuilder, and AwkwardForth are all\r\n\r\n  * `../../reference/generated/kernels.html`\r\n  * `../../reference/generated/ak.ArrayBuilder.html`\r\n  * `../../reference/awkwardforth.html`\r\n\r\nGiven how infrequently we even look at the doxygen docs, I doubt it will move.\r\n\r\nIf you approve, go ahead and merge!",
  "created_at":"2022-12-08T22:01:54Z",
  "id":1343431114,
  "issue":1982,
  "node_id":"IC_kwDODBCWws5QEyHK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-08T22:01:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1983?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1983](https://codecov.io/gh/scikit-hep/awkward/pull/1983?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (25ca325) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/bbc24fa6e2d057b26daf11d978c8d327685802d8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bbc24fa) will **decrease** coverage by `0.03%`.\n> The diff coverage is `90.11%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1983?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_corr.py](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3JyLnB5) | `84.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_covar.py](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3Zhci5weQ==) | `85.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_isclose.py](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc2Nsb3NlLnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_linear\\_fit.py](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19saW5lYXJfZml0LnB5) | `86.53% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `68.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_moment.py](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tb21lbnQucHk=) | `82.35% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_ptp.py](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wdHAucHk=) | `92.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_softmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb2Z0bWF4LnB5) | `100.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_to\\_buffers.py](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19idWZmZXJzLnB5) | `90.00% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_var.py](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha192YXIucHk=) | `71.42% <\u00f8> (\u00f8)` | |\n| ... and [50 more](https://codecov.io/gh/scikit-hep/awkward/pull/1983/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-08T21:28:01Z",
  "id":1343384525,
  "issue":1983,
  "node_id":"IC_kwDODBCWws5QEmvN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-09T01:08:37Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I made the last fixes that follow from the list of changes in #1972. In a couple of places, I think I've made the code worse - `NumpyArray._raw` is used externally but is private. However, the main priority here is hiding functions; later on we can clean this up.",
  "created_at":"2022-12-09T00:33:21Z",
  "id":1343650744,
  "issue":1983,
  "node_id":"IC_kwDODBCWws5QFnu4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-09T00:33:21Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is ready to go. I find it easiest to check these by looking at GitHub's rendering of the final [README.md](https://github.com/scikit-hep/awkward/blob/404e03d24a1e16d5c42d01a59ca2b7c1f57d8251/README.md) and [CONTRIBUTING.md](https://github.com/scikit-hep/awkward/blob/404e03d24a1e16d5c42d01a59ca2b7c1f57d8251/CONTRIBUTING.md) Markdown, and the one page of documentation I added, [here](https://awkward-array.readthedocs.io/en/jpivarski-readme-contributing-and-papers/getting-started/papers-and-talks.html).",
  "created_at":"2022-12-09T03:56:11Z",
  "id":1343812730,
  "issue":1985,
  "node_id":"IC_kwDODBCWws5QGPR6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-09T03:56:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1986?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1986](https://codecov.io/gh/scikit-hep/awkward/pull/1986?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (d73d78a) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4e4bb542c1f79a6acd22cb069fb8891a924e5fe6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4e4bb54) will **decrease** coverage by `0.09%`.\n> The diff coverage is `89.32%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1986?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `69.28% <\u00f8> (+0.13%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `72.76% <36.36%> (+2.07%)` | :arrow_up: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.00% <62.50%> (-0.38%)` | :arrow_down: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.58% <83.33%> (-0.20%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.32% <83.33%> (-0.44%)` | :arrow_down: |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.33% <85.71%> (-2.15%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `92.68% <85.71%> (-2.44%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_singletons.py](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zaW5nbGV0b25zLnB5) | `92.30% <85.71%> (-0.29%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_num.py](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19udW0ucHk=) | `90.90% <86.66%> (-9.10%)` | :arrow_down: |\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.30% <90.90%> (+0.21%)` | :arrow_up: |\n| ... and [23 more](https://codecov.io/gh/scikit-hep/awkward/pull/1986/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-09T06:34:05Z",
  "id":1343911557,
  "issue":1986,
  "node_id":"IC_kwDODBCWws5QGnaF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-09T15:34:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1987?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1987](https://codecov.io/gh/scikit-hep/awkward/pull/1987?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6ec64ff) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/213f97429385e030eb6a550b6d0a27f6692130da?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (213f974) will **decrease** coverage by `0.00%`.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1987?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1987/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `73.62% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_iter.py](https://codecov.io/gh/scikit-hep/awkward/pull/1987/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2l0ZXIucHk=) | `94.44% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_from\\_json.py](https://codecov.io/gh/scikit-hep/awkward/pull/1987/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX2pzb24ucHk=) | `91.81% <\u00f8> (\u00f8)` | |\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1987/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `82.73% <0.00%> (-0.36%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1987/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `72.94% <0.00%> (-0.09%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-12-09T13:20:59Z",
  "id":1344304133,
  "issue":1987,
  "node_id":"IC_kwDODBCWws5QIHQF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T17:16:37Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Those templates can be reconsidered, too. I prefer a very minimal use of issue templates because if someone is faced with 20 boxes to fill in, they'll be more likely to give up.\r\n\r\nI agree, actually, despite pushing for more granular templates early on.",
  "created_at":"2022-12-13T17:21:15Z",
  "id":1349144910,
  "issue":1987,
  "node_id":"IC_kwDODBCWws5QalFO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T17:21:15Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1990?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1990](https://codecov.io/gh/scikit-hep/awkward/pull/1990?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2bd7253) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/4e4bb542c1f79a6acd22cb069fb8891a924e5fe6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (4e4bb54) will **decrease** coverage by `0.09%`.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 2bd7253 differs from pull request most recent head 0cd7eb4. Consider uploading reports for the commit 0cd7eb4 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1990?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_num.py](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19udW0ucHk=) | `90.90% <0.00%> (-9.10%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_fill\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19maWxsX25vbmUucHk=) | `92.68% <0.00%> (-2.44%)` | :arrow_down: |\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.33% <0.00%> (-2.15%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_is\\_none.py](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19pc19ub25lLnB5) | `95.65% <0.00%> (-0.90%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_from\\_regular.py](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19mcm9tX3JlZ3VsYXIucHk=) | `92.00% <0.00%> (-0.86%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_regular.py](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19yZWd1bGFyLnB5) | `95.65% <0.00%> (-0.51%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.32% <0.00%> (-0.44%)` | :arrow_down: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.50% <0.00%> (-0.40%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.00% <0.00%> (-0.38%)` | :arrow_down: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `79.49% <0.00%> (-0.31%)` | :arrow_down: |\n| ... and [14 more](https://codecov.io/gh/scikit-hep/awkward/pull/1990/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-09T19:54:06Z",
  "id":1344725625,
  "issue":1990,
  "node_id":"IC_kwDODBCWws5QJuJ5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-09T22:49:43Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1993?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1993](https://codecov.io/gh/scikit-hep/awkward/pull/1993?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c1bbea5) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/97999a38145300ddc95bf1cbfbfe39acfd585b07?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (97999a3) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1993?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/1993/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `73.62% <100.00%> (+0.32%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-10T01:43:15Z",
  "id":1344970686,
  "issue":1993,
  "node_id":"IC_kwDODBCWws5QKp--",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-10T02:07:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1994?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1994](https://codecov.io/gh/scikit-hep/awkward/pull/1994?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (df59870) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/91e74423ab6f82b6f3b441240964b83d49d84849?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (91e7442) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head df59870 differs from pull request most recent head 85b997c. Consider uploading reports for the commit 85b997c to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-12T13:59:48Z",
  "id":1346559519,
  "issue":1994,
  "node_id":"IC_kwDODBCWws5QQt4f",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-12T21:42:41Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, now the deployment includes the deployed URL, which is a nice touch.",
  "created_at":"2022-12-12T21:18:30Z",
  "id":1347343488,
  "issue":1994,
  "node_id":"IC_kwDODBCWws5QTtSA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-12T21:18:30Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Is there any reason, now, for editing the PR description? \r\n\r\nNow that you mention it, no. Let's remove that, and increase the robustness.",
  "created_at":"2022-12-12T21:41:36Z",
  "id":1347378059,
  "issue":1994,
  "node_id":"IC_kwDODBCWws5QT1uL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-12T21:41:36Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I guess I should have been clearer in the issue. (I wrote it quickly, while trying to not lose track of something else.)\r\n\r\nThe `Content` subclass's `copy` methods take all the same arguments as the corresponding `__init__`, but with `unset` as the default. They construct a new (shallow copy) instance with only the not-`unset` arguments replaced.\r\n\r\nMaybe a better name would have been \"copy except for...\" but it's already past 2.0.0 and now [it's being used in fastjet](https://github.com/scikit-hep/fastjet/pull/156).\r\n\r\nThe `Content.copy` doesn't have a top-level protocol because each subclass has a different set of arguments.",
  "created_at":"2022-12-12T21:05:32Z",
  "id":1347327021,
  "issue":1996,
  "node_id":"IC_kwDODBCWws5QTpQt",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-12T21:05:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski yes, right - this wasn't supposed to be up for review yet ... too many PRs open at once :laughing: ",
  "created_at":"2022-12-12T21:17:18Z",
  "id":1347342085,
  "issue":1996,
  "node_id":"IC_kwDODBCWws5QTs8F",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "updated_at":"2022-12-12T21:17:18Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1996?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1996](https://codecov.io/gh/scikit-hep/awkward/pull/1996?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1664e52) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/91e74423ab6f82b6f3b441240964b83d49d84849?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (91e7442) will **decrease** coverage by `0.00%`.\n> The diff coverage is `57.14%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/1996?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/1996/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `72.94% <50.00%> (-0.09%)` | :arrow_down: |\n| [src/awkward/record.py](https://codecov.io/gh/scikit-hep/awkward/pull/1996/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvcmVjb3JkLnB5) | `82.73% <60.00%> (-0.36%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-12-12T22:24:45Z",
  "id":1347427806,
  "issue":1996,
  "node_id":"IC_kwDODBCWws5QUB3e",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-12T22:24:45Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah good point, I should link that here.",
  "created_at":"2022-12-13T12:23:54Z",
  "id":1348433356,
  "issue":1996,
  "node_id":"IC_kwDODBCWws5QX3XM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T12:23:54Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski @douglasdavis is this needed for tomorrow? If not, I will proceed with #1849, if so, can hack a fix in.",
  "created_at":"2022-12-13T20:30:32Z",
  "id":1349644940,
  "issue":1997,
  "node_id":"IC_kwDODBCWws5QcfKM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T20:30:32Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I'd say it's not super urgent, I only found it because the dask-awkward test suite has a few warnings popping up because of it",
  "created_at":"2022-12-13T21:34:28Z",
  "id":1349764391,
  "issue":1997,
  "node_id":"IC_kwDODBCWws5Qc8Un",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-13T21:34:28Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1998?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1998](https://codecov.io/gh/scikit-hep/awkward/pull/1998?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (93a86f2) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/91e74423ab6f82b6f3b441240964b83d49d84849?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (91e7442) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-12T22:07:57Z",
  "id":1347408447,
  "issue":1998,
  "node_id":"IC_kwDODBCWws5QT9I_",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-12T22:07:57Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"It's good that we have this list - I had to go by intuition, which is known to be suspect :laughing: ",
  "created_at":"2022-12-13T17:19:09Z",
  "id":1349134444,
  "issue":1998,
  "node_id":"IC_kwDODBCWws5Qaihs",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T17:19:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/1999?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#1999](https://codecov.io/gh/scikit-hep/awkward/pull/1999?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f724c8b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/213f97429385e030eb6a550b6d0a27f6692130da?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (213f974) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-12T23:18:17Z",
  "id":1347480587,
  "issue":1999,
  "node_id":"IC_kwDODBCWws5QUOwL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-12T23:18:17Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Space: 1999!",
  "created_at":"2022-12-12T23:35:06Z",
  "id":1347494297,
  "issue":1999,
  "node_id":"IC_kwDODBCWws5QUSGZ",
  "performed_via_github_app":null,
  "reactions":{
   "laugh":1,
   "total_count":1
  },
  "updated_at":"2022-12-12T23:35:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Clearly, we also need numexpr docs / tests",
  "created_at":"2022-12-13T17:27:48Z",
  "id":1349182393,
  "issue":2000,
  "node_id":"IC_kwDODBCWws5QauO5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T17:27:48Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, but I want to check over at NumExpr to see if there's a way to do this, now (3 years later):\r\n\r\n```python\r\n>>> import awkward as ak, numexpr as ne\r\n>>> one = ak.Array([[1, 2, 3], [], [4, 5]])\r\n>>> two = ak.Array([100, 200, 300])\r\n>>> three = ne.evaluate(\"one + two\")\r\n<Array [[101, 102, 103], [], [304, 305]] type='3 * var * int64'>\r\n```\r\n\r\nIf NumExpr now supports something like a NEP13 overload (NEP13 because all NumExprs are ufunc-like), then we'd want to take advantage of it to make the user experience simpler. We'd need to have our code called in the above, to be able to do the broadcasting (like `__array_ufunc__`).\r\n\r\nWhen I last talked with the author of NumExpr, we talked about this but he was busy in the transition from NumExpr 2 to NumExpr 3. That must be long-past by now.",
  "created_at":"2022-12-13T18:14:22Z",
  "id":1349380957,
  "issue":2000,
  "node_id":"IC_kwDODBCWws5Qbetd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T18:14:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Or... maybe not. https://github.com/pydata/numexpr/issues/350\r\n\r\nThen I'll need to look into whether NumExpr 2 has anything like this. (Or you\u2014go ahead if you're interested.)",
  "created_at":"2022-12-13T18:17:23Z",
  "id":1349404835,
  "issue":2000,
  "node_id":"IC_kwDODBCWws5Qbkij",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T18:17:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Closing this for now, due to #2011 ",
  "created_at":"2022-12-19T12:34:14Z",
  "id":1357603561,
  "issue":2000,
  "node_id":"IC_kwDODBCWws5Q62Lp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T12:34:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"You can access it like this:\r\n\r\n```python\r\n>>> import awkward as ak\r\n>>> import awkward.forth\r\n>>> vm = ak.forth.ForthMachine32(\"\"\"\r\n... : fibonacci    ( n -- nth-fibonacci-number )\r\n...   dup\r\n...   1 > if\r\n...     1- dup 1- recurse\r\n...     swap recurse\r\n...     +\r\n...   then\r\n... ;\r\n... 20 0 do\r\n...   i fibonacci\r\n... loop\r\n... \"\"\")\r\n>>> vm.abi_version\r\n1\r\n```\r\n\r\nTo get the actual bytecodes (whose interpretation would need to be tracked between the precompiled implementation and the Numba-based version), you can do\r\n\r\n```python\r\n>>> bytecodes = ak.Array(\r\n...     ak.contents.ListOffsetArray(\r\n...         ak.index.Index64(vm.bytecodes_offsets),\r\n...         ak.contents.NumpyArray(vm.bytecodes),\r\n...     )\r\n... )\r\n>>> bytecodes\r\n<Array [[0, 20, 0, 0, 6, 74], [37, ...], ..., [34, 72]] type='4 * var * int64'>\r\n>>> bytecodes.show()\r\n[[0, 20, 0, 0, 6, 74],\r\n [37, 0, 1, 58, 3, 73],\r\n [52, 37, 52, 72, 39, 72, 44],\r\n [34, 72]]\r\n```\r\n\r\nEach sequence represents a list of instructions that would probably become a Numba JIT-compiled function.",
  "created_at":"2022-12-13T20:03:43Z",
  "id":1349616283,
  "issue":2001,
  "node_id":"IC_kwDODBCWws5QcYKb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T20:03:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"<img src=\"https://dejareviewer.files.wordpress.com/2012/01/hal-9000-watches-in-horror-as-david-bowman-comes-to-disable-his-circuitry-and-kill-him.jpg\" width=\"100%\">",
  "created_at":"2022-12-13T20:07:50Z",
  "id":1349621045,
  "issue":2001,
  "node_id":"IC_kwDODBCWws5QcZU1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T20:07:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski I'm going to have to start safeguarding important issue numbers, aren't I? ;)",
  "created_at":"2022-12-13T20:08:57Z",
  "id":1349622352,
  "issue":2001,
  "node_id":"IC_kwDODBCWws5QcZpQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T20:08:57Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2001?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2001](https://codecov.io/gh/scikit-hep/awkward/pull/2001?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a006842) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/ffabf6313d8fdb9f7b38f000a09f584937067c8b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (ffabf63) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-13T20:09:12Z",
  "id":1349622621,
  "issue":2001,
  "node_id":"IC_kwDODBCWws5QcZtd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T20:09:12Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"Pretty soon, they won't be meaningful anymore. Unless someone were to have a [list of all fictitious future events](https://scifi.fandom.com/wiki/Timeline_of_fictional_future_events#21st_century) somewhere.\r\n\r\nOh, this year is _Soylent Green_. Interesting.",
  "created_at":"2022-12-13T20:12:50Z",
  "id":1349626862,
  "issue":2001,
  "node_id":"IC_kwDODBCWws5Qcavu",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-13T20:12:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2002?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2002](https://codecov.io/gh/scikit-hep/awkward/pull/2002?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (2c7aaac) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9d7d6b4da5fd2f8a3bd2fb1dfdaa1b112bcc0f39?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9d7d6b4) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n> :exclamation: Current head 2c7aaac differs from pull request most recent head ba602f1. Consider uploading reports for the commit ba602f1 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-13T22:46:55Z",
  "id":1349946133,
  "issue":2002,
  "node_id":"IC_kwDODBCWws5QdosV",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-14T15:45:44Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"To Do: add permissions for CloudFront invalidation\r\n```json\r\n\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"cloudfront:CreateInvalidation\"\r\n            ],\r\n            \"Resource\": [\r\n                \"arn:aws:cloudfront::<TODO>:distribution/*\"\r\n            ]\r\n```",
  "created_at":"2022-12-14T16:23:44Z",
  "id":1351724315,
  "issue":2002,
  "node_id":"IC_kwDODBCWws5Qka0b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-14T16:23:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"We bump our `awkward-cpp` version/dependency whenever the C++ package changes e.g. due to new kernels. The new `ak.drop_none()` will do this, so we've bumped the version in anticipation. I wonder whether we should do that afterwards, but either strategy leads to `pip install git+...` not working. \r\n\r\nThe problem here is really that we have a monorepo, so you realistically need to clone the repo in order to build the packages. Related to this is our two-phase build; there's a `prepare` stage that produces the files required for an `sdist` to be buildable (e.g. generating test files, copying shared headers). \r\n\r\nI think practically speaking one _has_ to do this in a two phase build, e.g.\r\n```bash\r\npushd $(mktemp -d)\r\n\r\ngit clone --depth=1 --recurse-submodules --shallow-submodules https://github.com/scikit-hep/awkward.git\r\ncd awkward\r\n\r\npipx run nox -s prepare\r\n\r\nmkdir wheels\r\npipx run  --python $(which python3) build -w -o wheels awkward-cpp\r\npipx run  --python $(which python3) build -w -o wheels .\r\n```\r\n\r\nHowever, I'm curious as to why the built `awkward-cpp` has the `manylinux_2-35` tag for me: this should produce a native Linux wheel.\r\n\r\n",
  "created_at":"2022-12-14T10:37:11Z",
  "id":1350848120,
  "issue":2003,
  "node_id":"IC_kwDODBCWws5QhE54",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-14T10:38:00Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"We won't be able to support\r\n\r\n```bash\r\npip install git+https://github.com/scikit-hep/awkward.git\r\n```\r\n\r\ninstallations anymore, at least not in a way that will always work. (We never claimed to support this before, but I guess it would have worked if you had all of the build tools installed.)\r\n\r\nWe still need to figure out a policy for when PRs that touch C++ get merged and when the `awkward-cpp` version number changes. What happened here is that I updated the version number before the two PRs that need it (#1904 and #2001) have been merged because the script that protects us against forgetting to update the version number is temporarily disabled and I wanted to ensure that we don't forget. With protection in place, we could have updated the version number after the PRs that need it, or we could have a policy that if a PR touches C++, it has to update the `awkward-cpp` version number in that PR, so that the change happens atomically. (Then what if two PRs both update it and there's no release in between? Like #1904 and #2001? The version number increase ought to be relative to the last _released_ `awkward-cpp`...)\r\n\r\n_But anyway,_ ANY decision we make on coordinating C++ changes with `awkward-cpp` version number updates will not fix `pip install git+https://...`. There will always be a window of time between (a) when a C++ change merges into `main` and/or the `awkward-cpp` version number in `main` changes and (b) when an `awkward-cpp` version is released to PyPI. During time between (a) and (b), pip-installing through git will produce an `awkward` package that either knows it needs an `awkward-cpp` that isn't in PyPI (what you reported) or doesn't know that it needs an `awkward-cpp` that isn't in PyPI (that is, it will crash at runtime). Considering that error messages are better than incorrect behavior, I suppose we always want to update the `awkward-cpp` version number at least as early as changes to C++ (partially answering the policy question of the previous paragraph).\r\n\r\nSince pip-installing from git must fail in time intervals between (a) and (b), we shouldn't claim that it's a supported installation mechanism in general. Perhaps C++ updates are rare, but we don't want people to rely on something that we know won't work _sometimes_. The actual build and upload of an `awkward-cpp` package takes an hour, and invoking it is a manual process with only one Release Manager (me), so the time interval between (a) and (b) can be a few days.\r\n\r\nBeyond the coordination issue, I think pip installing from git also won't work because some of the files need to be built with nox, as @agoose77 described. Some of these generated files are part of the `awkward` package (not just `awkward-cpp`), so even if the correct `awkward-cpp` is already in PyPI, it won't work. The motivating reason for that was so that the pyproject.toml can be declarative (not have it run the Python scripts that generate the missing files), but since we can't rely on pip installing from git at _some_ times, I don't think breaking the declarativeness of pyproject.toml is justified.\r\n\r\nSo as an action item for this issue, we need a sentence in `README.md`, after the pip install instructions, to say that pip install from the git repo will not work. I tried searching for other places where installation is described. There's this one in the docs: `docs/getting-started/index.md` but it's a very short help box; too brief to include any additional clarifications. (Besides, it would be nice if this information is only in one place.) Someone who's trying to pip install from git wants the Installation for Developers section, just below it.\r\n\r\nActually, I'll go add this now.",
  "created_at":"2022-12-14T16:39:37Z",
  "id":1351745437,
  "issue":2003,
  "node_id":"IC_kwDODBCWws5Qkf-d",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-14T16:39:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Just to add on our conversation earlier - we can have scripts running in pyproject.toml through plugins, but it adds complexity that we don't have a strong justification for. In particular, our sdists are simple because they don't bundle any dev scripts - everything is generated for them. This is a nice distinction that is prefer to keep, hence the 'declarative' point.\n\nI.e, at the 'package' level, awkward and awkward-cpp are totally distinct. ",
  "created_at":"2022-12-14T16:43:03Z",
  "id":1351750272,
  "issue":2003,
  "node_id":"IC_kwDODBCWws5QkhKA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-14T16:57:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's what I meant in my\r\n\r\n> Beyond the coordination issue, ...\r\n\r\nparagraph. If that were the _only_ thing preventing pip install through git, we'd want to reconsider it: weighing developer experience versus user experience. (One is not automatically more important than the other, but we'd have to think about the relative value.)\r\n\r\nHowever, since it must be the case that installation through git will be broken in time intervals between (a) and (b), it's obvious: we're not going to recommend an installation procedure that necessarily must be broken some of the time. So we don't have to consider sacrificing the declarativeness of pyproject.toml.",
  "created_at":"2022-12-14T16:48:49Z",
  "id":1351757926,
  "issue":2003,
  "node_id":"IC_kwDODBCWws5QkjBm",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-14T16:48:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Oh absolutely! I just wanted to clarify the technical possibility of running scripts in our build chain! :) ",
  "created_at":"2022-12-14T17:19:09Z",
  "id":1351807249,
  "issue":2003,
  "node_id":"IC_kwDODBCWws5QkvER",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-14T17:19:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"This is #1993, which is now fixed and waiting to get into a release. To make that `awkward` release, we'll need to make an `awkward-cpp` release first, and that's waiting on #1904 and #2001.\r\n\r\nSo it's in the pipeline!",
  "created_at":"2022-12-14T20:08:20Z",
  "id":1352092253,
  "issue":2006,
  "node_id":"IC_kwDODBCWws5Ql0pd",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-14T20:08:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2007?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2007](https://codecov.io/gh/scikit-hep/awkward/pull/2007?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b504c40) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9d7d6b4da5fd2f8a3bd2fb1dfdaa1b112bcc0f39?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9d7d6b4) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-14T21:44:47Z",
  "id":1352248181,
  "issue":2007,
  "node_id":"IC_kwDODBCWws5Qmat1",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-14T21:44:47Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2009?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2009](https://codecov.io/gh/scikit-hep/awkward/pull/2009?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (01373f9) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9d7d6b4da5fd2f8a3bd2fb1dfdaa1b112bcc0f39?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9d7d6b4) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2009?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/2009/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190eXBlLnB5) | `77.08% <100.00%> (+2.61%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-15T11:13:51Z",
  "id":1352910255,
  "issue":2009,
  "node_id":"IC_kwDODBCWws5Qo8Wv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-15T11:13:51Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2010?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2010](https://codecov.io/gh/scikit-hep/awkward/pull/2010?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (83b1386) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/8ca471157989b11df30702ac8c0c895374cf1394?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8ca4711) will **increase** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n> :exclamation: Current head 83b1386 differs from pull request most recent head acc6fbb. Consider uploading reports for the commit acc6fbb to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2010?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2010/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.32% <\u00f8> (\u00f8)` | |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2010/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `74.51% <\u00f8> (\u00f8)` | |\n| [src/awkward/operations/ak\\_type.py](https://codecov.io/gh/scikit-hep/awkward/pull/2010/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190eXBlLnB5) | `77.08% <100.00%> (+2.61%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-15T11:53:21Z",
  "id":1352950481,
  "issue":2010,
  "node_id":"IC_kwDODBCWws5QpGLR",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-15T17:39:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2011?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2011](https://codecov.io/gh/scikit-hep/awkward/pull/2011?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6aa4720) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/1f1690fe5278d1c51d53ac47cc96218c92f96439?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1f1690f) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2011?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2011/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `74.51% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-15T12:25:46Z",
  "id":1352987451,
  "issue":2011,
  "node_id":"IC_kwDODBCWws5QpPM7",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-15T12:25:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2012?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2012](https://codecov.io/gh/scikit-hep/awkward/pull/2012?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c2d387c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/1f1690fe5278d1c51d53ac47cc96218c92f96439?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (1f1690f) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2012?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2012/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.32% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-15T13:08:14Z",
  "id":1353038263,
  "issue":2012,
  "node_id":"IC_kwDODBCWws5Qpbm3",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-15T13:08:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"The right thing to do is just to add it to the `type_to_name` function. It's not a list that's going to grow indefinitely\u2014`Long64_t` is an oddball because it's covering a gap from the transition from 32-bit architectures to 64-bit architectures (so now, it's a relic). Uproot had to deal with it, too. But there won't be a continuing series of additional type names to special-case like this.\r\n\r\nUntil we all move to 128-bit architectures, that is. (Not as far-fetched as it sounds: it's not for the size of the memory space; there are proposals to use the extra 64 bits for security.)",
  "created_at":"2022-12-19T14:55:42Z",
  "id":1357789074,
  "issue":2018,
  "node_id":"IC_kwDODBCWws5Q7jeS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T14:55:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Also, we can't make any kind of promises about round-tripping, non-destructively, from Awkward to RDataFrame and back (or from RDataFrame to Awkward and back). The two systems live in very different type-systems: the Awkward/Arrow set and all of C++. Any conversions of values from one type-system into the other should be thought of as a projection.\r\n\r\nSo `Long_t` and `Long64_t` both become `np.int64` on a 64-bit system, because this is what they both mean. Even C++ compilers don't always maintain a distinction between typedef'ed names; if I want a C/C++ type check to know that `A` and `B` are different, I can't rely on\r\n\r\n```c++\r\ntypedef A B;\r\n```\r\n\r\nIt is necessary to do something like\r\n\r\n```c++\r\nstruct B { A _; };\r\n```\r\n\r\nand unpack `B._`.\r\n\r\nI did a little digging: [here](https://github.com/root-project/root/blob/d1d93235c763d0d1be11d68c8ccfdb1f3366932e/documentation/users-guide/GettingStarted.md?plain=1#L963) and [here](https://root.cern.ch/root/html528/ListOfTypes.html): `Long_t` maps to the C/C++ `long` type and `Long64_t` is a \"Portable signed long integer 8 bytes,\" guaranteeing that the integer will be written into files as 64-bit, without relying on `long` being 64-bit on your system. But as long as we're talking about 64-bit systems, those two types are typedef'ed together.",
  "created_at":"2022-12-19T18:12:33Z",
  "id":1358052867,
  "issue":2018,
  "node_id":"IC_kwDODBCWws5Q8j4D",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T18:12:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Hmm, let me retry this.",
  "created_at":"2022-12-19T17:18:02Z",
  "id":1357988963,
  "issue":2019,
  "node_id":"IC_kwDODBCWws5Q8URj",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T17:18:02Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"So, something I hadn't thought about when designing this is that we effectively can't build a union of a JAX array if it's a tracer \u2014 we can, but the tangents are lost, because we perform the copy with a kernel rather than a `jax.numpy.concatenate`-like copy. This means that `axis=None` wouldn't work for JAX functions, whereas this does currently work with an explicit high-level loop. N.b. that the explicit high-level loop is not without its own problems, particularly the amount of boilerplate if we need to handle `mask`, `initial`, etc.\r\n\r\nThis needs some more thought.",
  "created_at":"2022-12-19T18:30:37Z",
  "id":1358073328,
  "issue":2020,
  "node_id":"IC_kwDODBCWws5Q8o3w",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T18:32:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Following a discussion with Jim, it was noted that only the `flatten_records` feature of the reduction mechanism requires us to handle multiple branches. Removing that argument both makes this PR far, far easier, but also brings `axis=None` reduction in line with the `axis != None` cases, for which reducers can't move past records  (which may be overloaded in future).",
  "created_at":"2022-12-22T13:47:34Z",
  "id":1362859193,
  "issue":2020,
  "node_id":"IC_kwDODBCWws5RO5S5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T13:47:34Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2020?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2020](https://codecov.io/gh/scikit-hep/awkward/pull/2020?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6f1e00d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/fff5e7cb3f7e16d8a2f55ad6e316ed59e3e0b8bf?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fff5e7c) will **decrease** coverage by `0.51%`.\n> The diff coverage is `80.88%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2020?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.77% <0.00%> (+0.56%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `63.33% <50.00%> (-4.67%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_std.py](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdGQucHk=) | `64.00% <50.00%> (-6.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_var.py](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha192YXIucHk=) | `66.66% <55.55%> (-4.77%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `75.00% <69.23%> (-16.18%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argmin.py](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `75.00% <69.23%> (-16.18%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_prod.py](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wcm9kLnB5) | `75.00% <69.23%> (-15.33%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_sum.py](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdW0ucHk=) | `75.00% <69.23%> (-15.33%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXgucHk=) | `75.00% <72.72%> (-13.24%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19taW4ucHk=) | `75.00% <72.72%> (-13.24%)` | :arrow_down: |\n| ... and [27 more](https://codecov.io/gh/scikit-hep/awkward/pull/2020/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-22T14:03:10Z",
  "id":1362875524,
  "issue":2020,
  "node_id":"IC_kwDODBCWws5RO9SE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T20:28:50Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This needs some tests and a check for `keepdims` ...",
  "created_at":"2022-12-22T17:40:24Z",
  "id":1363170603,
  "issue":2020,
  "node_id":"IC_kwDODBCWws5RQFUr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T17:40:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski could you pass your eye over `Backend` and how I've changed the way that JAX overrides the ufuncs and reducers?",
  "created_at":"2022-12-22T20:25:16Z",
  "id":1363311957,
  "issue":2020,
  "node_id":"IC_kwDODBCWws5RQn1V",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T20:25:16Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is definitely needed - the question for me is whether I'll be done with #1849 before this is 'needed' (it's already needed, but that's hard to define!)\r\n\r\nThs likelihood is that I'll be replacing this code in the near future. If you think it's needed now, merge! (I'll review anyway) ",
  "created_at":"2022-12-19T18:51:54Z",
  "id":1358099066,
  "issue":2021,
  "node_id":"IC_kwDODBCWws5Q8vJ6",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T19:11:06Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"\"Why not make TypeTracerArray inherit from NDArrayOperatorsMixin?\"\r\n\r\n  1. It would cause a circular import unless NDArrayOperatorsMixin is moved somewhere more central, such as `ak._util`.\r\n  2. https://github.com/scikit-hep/awkward/blob/9ab248c2dc0ce87a0836aed5d444a7529552d3eb/src/awkward/_typetracer.py#L352 starts failing because somewhere, `len` of a TypeTracerArray is now being called.\r\n  3. Replacing that `where.index` with a loop over `where` to look for the `Ellipsis` results in yet more errors.\r\n\r\nAt step 3, I stopped looking into it. The refactor made the TypeTracerArray code a little nicer (dropped 6 very short methods), but not a lot, and it seems to be getting into some deep waters that I don't have time for right now. I.e. the cost-benefit is not good enough to keep following this line.",
  "created_at":"2022-12-19T18:56:38Z",
  "id":1358106523,
  "issue":2021,
  "node_id":"IC_kwDODBCWws5Q8w-b",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T18:56:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"Yes, it's needed in the short term, and it's fine if it gets refactored. The `ak.where` function triggers it, here:\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/9ab248c2dc0ce87a0836aed5d444a7529552d3eb/src/awkward/operations/ak_where.py#L111\r\n\r\n(`(npcondition == 0)` needs to return a TypeTracerArray, not a Python `bool`.) So I'll do a more useful thing and add a test of type-tracer through `ak.where`, so that when you refactor, it will not get lost.",
  "created_at":"2022-12-19T18:59:24Z",
  "id":1358110873,
  "issue":2021,
  "node_id":"IC_kwDODBCWws5Q8yCZ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T18:59:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"MEMBER",
  "body":"This is ready to merge (I see your informal assent, above). The test failures are unrelated, but they need to be fixed.\r\n\r\nAs soon as tests pass, we'll merge.",
  "created_at":"2022-12-19T19:24:36Z",
  "id":1358147651,
  "issue":2021,
  "node_id":"IC_kwDODBCWws5Q87BD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T19:24:36Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2021?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2021](https://codecov.io/gh/scikit-hep/awkward/pull/2021?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (59aed28) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9ab248c2dc0ce87a0836aed5d444a7529552d3eb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9ab248c) will **decrease** coverage by `0.01%`.\n> The diff coverage is `57.14%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2021?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2021/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `74.15% <50.00%> (-0.53%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2021/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19udW1weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-19T20:32:42Z",
  "id":1358274838,
  "issue":2021,
  "node_id":"IC_kwDODBCWws5Q9aEW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T20:32:42Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2022?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2022](https://codecov.io/gh/scikit-hep/awkward/pull/2022?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a83b7cc) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/7e6f504c3cb0310cdbe0be7b5d662722ee73aaa7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7e6f504) will **decrease** coverage by `0.01%`.\n> The diff coverage is `57.14%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2022?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2022/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `74.15% <50.00%> (-0.53%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_to\\_numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2022/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19udW1weS5weQ==) | `100.00% <100.00%> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-19T22:47:31Z",
  "id":1358514830,
  "issue":2022,
  "node_id":"IC_kwDODBCWws5Q-UqO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-19T22:47:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2023?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2023](https://codecov.io/gh/scikit-hep/awkward/pull/2023?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (87f9276) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b83d9dcaaf69eb0cce6f91e8585997f1b466f8af?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b83d9dc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-20T09:18:35Z",
  "id":1359056656,
  "issue":2023,
  "node_id":"IC_kwDODBCWws5RAY8Q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-20T16:36:40Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"@jpivarski, @ianna, Thank you. I am packing now. Tomorrow morning we will leave for our holiday. I quickly checked your branch, but I have some problems  I installed via pip from the GitHub branch. I assume that was ok.\r\nI assume some headed file is missing (something similar we had 4in September test):\r\n\r\n```\r\ngit log . \r\ncommit 87f9276a09abbb67e6df4582a6e71985b90f09e3 (HEAD -> main, tag: list, origin/2018-from_rdataframe-doesnt-support-long64_t)\r\nAuthor: Ianna Osborne <ianna.osborne@cern.ch>\r\nDate:   Tue Dec 20 17:27:11 2022 +0100\r\n\r\n    fix: specialize type_to_name\r\n```\r\n\r\n```\r\n(venv3) Singularity> pip install /u/miranov/github/awkward/ \r\nProcessing /u/miranov/github/awkward\r\n```\r\n\r\n```\r\n(venv3) Singularity> pip show awkward\r\nName: awkward\r\nVersion: 2.0.2\r\n```\r\nI cannot rule out the possibility that I have done something wrong. Next time I will be able to check in 3-5 days.\r\n\r\n### Error message/stack trace \r\n\r\n```python\r\nIn [6]:     if doTest:\r\n   ...:         rdfTest=rdf1.Range(0,10)\r\n   ...:         rdfTest.Snapshot(\"testVarRDF\",\"testVarRDF.root\", varList)\r\n   ...:         array = ak.from_rdataframe(rdfTest, columns=varList)\r\n   ...:         df=ak.to_dataframe(array)\r\n   ...:         print(df.head(5),df.shape)\r\n   ...:     #\r\n   ...: \r\n---------------------------------------------------------------------------\r\nOSError                                   Traceback (most recent call last)\r\nInput In [6], in <cell line: 1>()\r\n      2 rdfTest=rdf1.Range(0,10)\r\n      3 rdfTest.Snapshot(\"testVarRDF\",\"testVarRDF.root\", varList)\r\n----> 4 array = ak.from_rdataframe(rdfTest, columns=varList)\r\n      5 df=ak.to_dataframe(array)\r\n      6 print(df.head(5),df.shape)\r\n\r\nFile /venv/venv3/lib/python3.8/site-packages/awkward/operations/ak_from_rdataframe.py:28, in from_rdataframe(rdf, columns)\r\n      7 \"\"\"\r\n      8 Args:\r\n      9     rdf (`ROOT.RDataFrame`): ROOT RDataFrame to convert into an\r\n   (...)\r\n     23 See also #ak.to_rdataframe.\r\n     24 \"\"\"\r\n     25 with ak._errors.OperationErrorContext(\r\n     26     \"ak.from_rdataframe\", dict(rdf=rdf, columns=columns)\r\n     27 ):\r\n---> 28     return _impl(rdf, columns)\r\n\r\nFile /venv/venv3/lib/python3.8/site-packages/awkward/operations/ak_from_rdataframe.py:32, in _impl(data_frame, columns)\r\n     31 def _impl(data_frame, columns):\r\n---> 32     import awkward._connect.rdataframe.from_rdataframe  # noqa: F401\r\n     34     if isinstance(columns, str):\r\n     35         columns = (columns,)\r\n\r\nFile /alicesw3b/sw/ubuntu2004_x86-64/ROOT/v6-26-04-patches-alice1-local1/lib/ROOT/_facade.py:153, in ROOTFacade._set_import_hook.<locals>._importhook(name, *args, **kwds)\r\n    151     except Exception:\r\n    152         pass\r\n--> 153 return _orig_ihook(name, *args, **kwds)\r\n\r\nFile /venv/venv3/lib/python3.8/site-packages/awkward/_connect/rdataframe/from_rdataframe.py:44, in <module>\r\n     33 numpy = ak._nplikes.Numpy.instance()\r\n     36 cppyy.add_include_path(\r\n     37     os.path.abspath(\r\n     38         os.path.join(\r\n   (...)\r\n     42     )\r\n     43 )\r\n---> 44 cppyy.add_include_path(\r\n     45     os.path.abspath(\r\n     46         os.path.join(\r\n     47             os.path.dirname(os.path.realpath(__file__)),\r\n     48             os.path.pardir,\r\n     49             \"header-only\",\r\n     50         )\r\n     51     )\r\n     52 )\r\n     53 compiler = ROOT.gInterpreter.Declare\r\n     56 done = compiler(\r\n     57     \"\"\"\r\n     58 #include \"rdataframe/jagged_builders.h\"\r\n     59 \"\"\"\r\n     60 )\r\n\r\nFile /alicesw3b/sw/ubuntu2004_x86-64/ROOT/v6-26-04-patches-alice1-local1/lib/cppyy/__init__.py:221, in add_include_path(path)\r\n    219 \"\"\"Add a path to the include paths available to Cling.\"\"\"\r\n    220 if not os.path.isdir(path):\r\n--> 221     raise OSError(\"no such directory: %s\" % path)\r\n    222 gbl.gInterpreter.AddIncludePath(path)\r\n\r\nOSError: no such directory: /venv/venv3/lib/python3.8/site-packages/awkward/_connect/header-only\r\n\r\n\r\n```\r\n\r\n",
  "created_at":"2022-12-20T20:32:09Z",
  "id":1360151568,
  "issue":2023,
  "node_id":"IC_kwDODBCWws5REkQQ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-20T20:32:09Z",
  "user":"MDQ6VXNlcjIxOTYyNzY1"
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@miranov25 installing directly from Git via `pip` is not supported. Instead, you need to clone the repo before running a `prepare` script. E.g., to build the awkward packages from Git into a `wheels` directory\r\n```python\r\nthis_path=$PWD\r\npushd $(mktemp -d)\r\n\r\ngit clone --depth=1 --recurse-submodules --shallow-submodules https://github.com/scikit-hep/awkward.git\r\ncd awkward\r\n\r\npipx run nox -s prepare\r\n\r\nmkdir -p \"$this_path/wheels\" \r\npipx run  --python $(which python3) build -w -o \"$this_path/wheels\" awkward-cpp\r\npipx run  --python $(which python3) build -w -o \"$this_path/wheels\" .\r\n\r\npopd\r\n```",
  "created_at":"2022-12-20T20:58:12Z",
  "id":1360230084,
  "issue":2023,
  "node_id":"IC_kwDODBCWws5RE3bE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-20T20:58:12Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2024?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2024](https://codecov.io/gh/scikit-hep/awkward/pull/2024?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7ede827) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/b83d9dcaaf69eb0cce6f91e8585997f1b466f8af?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b83d9dc) will **decrease** coverage by `0.00%`.\n> The diff coverage is `74.35%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2024?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2024/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `80.79% <74.35%> (-0.51%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-12-20T12:11:42Z",
  "id":1359269927,
  "issue":2024,
  "node_id":"IC_kwDODBCWws5RBNAn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-21T18:12:23Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> You extract the two behaviors, but do you check them for equality? If so, I don't see it.\r\n\r\nNo, I only check that they  map to the same behaviour class for the array / record parameters. This might not be sufficient; we obviously also permit overloads of ufuncs, which wouldn't be caught this way. Equally, I wouldn't want to ban cases where additional behaviour classes were added to the behaviour dictionary that aren't used. Unless we consider that an desirable outcome?\r\n\r\n> The \"approximate dtype\" is interesting: normally, we want types to be exact, but we do have an issue in which NumPy on Windows initializes integers as 32-bit. In our tests so far, we try to be diligent about explicitly setting the integer dtype to `int64` when using NumPy, but this function would accept 32-bit integers and 64-bit integers as the same.\r\n\r\nRight, I'm worried about\r\n```python\r\narrays_approx_equal(array, [1, 2, ...]) \r\n```\r\nfailing due to the default types for `ArrayBuilder`, Perhaps that should be opt-in, though, not opt-out.\r\n",
  "created_at":"2022-12-20T13:46:52Z",
  "id":1359380338,
  "issue":2024,
  "node_id":"IC_kwDODBCWws5RBn9y",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-20T23:08:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2025?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2025](https://codecov.io/gh/scikit-hep/awkward/pull/2025?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b1a2c2c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/5c5b81e7c3ad0bef32d166c0617c77d61a977046?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5c5b81e) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-21T16:24:40Z",
  "id":1361616510,
  "issue":2025,
  "node_id":"IC_kwDODBCWws5RKJ5-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-21T16:24:40Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I suppose this PR is the first thing that can be tested: the line of HTML is not in http://preview.awkward-array.org.s3-website.us-east-1.amazonaws.com/agoose77/docs-switch-to-aws/, so that's good.",
  "created_at":"2022-12-21T17:50:07Z",
  "id":1361753063,
  "issue":2025,
  "node_id":"IC_kwDODBCWws5RKrPn",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-21T17:50:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Yes, the plan is to use this for Google's search indexing to speed things up",
  "created_at":"2022-12-21T20:37:17Z",
  "id":1362066014,
  "issue":2026,
  "node_id":"IC_kwDODBCWws5RL3pe",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-21T20:37:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"Well this would definitely make things a lot simpler for us. There would still be cases where a function is opaque and we cannot tell (e.g., numba), but not so many. From our point of view, any columns that are still available at the output are all \"touched\" (meaning we cannot prune them). ",
  "created_at":"2022-12-21T20:32:00Z",
  "id":1362061134,
  "issue":2027,
  "node_id":"IC_kwDODBCWws5RL2dO",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-21T20:32:00Z",
  "user":"MDQ6VXNlcjYwNDIyMTI="
 },
 {
  "author_association":"MEMBER",
  "body":"It might be safe to say that anything that's passed as an input to Numba is touched. The first step in preparing an Awkward Array for Numba is to make a NumPy array of pointers to all the NumPy arrays in the Awkward Array, so they'd get instantiated in any lazy system.\r\n\r\nAlthough I suppose if they were projected out by Dask, a different Numba function would get compiled, one without the other columns. Hmmm.",
  "created_at":"2022-12-21T20:36:59Z",
  "id":1362065735,
  "issue":2027,
  "node_id":"IC_kwDODBCWws5RL3lH",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-21T20:36:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2027?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2027](https://codecov.io/gh/scikit-hep/awkward/pull/2027?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (c9ba811) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/dd8cef655b8db83a40e83b53fe896619129b1c77?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (dd8cef6) will **decrease** coverage by `0.38%`.\n> The diff coverage is `58.79%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2027?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_slicing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3NsaWNpbmcucHk=) | `84.61% <0.00%> (-1.17%)` | :arrow_down: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `67.91% <18.18%> (-1.95%)` | :arrow_down: |\n| [src/awkward/\\_typetracer.py](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3R5cGV0cmFjZXIucHk=) | `60.92% <46.50%> (-6.81%)` | :arrow_down: |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `72.74% <50.00%> (-0.17%)` | :arrow_down: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `75.08% <50.00%> (-0.09%)` | :arrow_down: |\n| [src/awkward/contents/unionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5pb25hcnJheS5weQ==) | `84.36% <70.58%> (-0.42%)` | :arrow_down: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.01% <72.72%> (-0.31%)` | :arrow_down: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.06% <75.00%> (+0.06%)` | :arrow_up: |\n| [src/awkward/contents/unmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvdW5tYXNrZWRhcnJheS5weQ==) | `73.07% <75.00%> (+0.06%)` | :arrow_up: |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.40% <77.77%> (-0.22%)` | :arrow_down: |\n| ... and [10 more](https://codecov.io/gh/scikit-hep/awkward/pull/2027/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-21T20:37:25Z",
  "id":1362066131,
  "issue":2027,
  "node_id":"IC_kwDODBCWws5RL3rT",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-23T14:44:08Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I _think_ this is everything: type-tracers take some specialized code paths throughout the codebase, to avoid asking them questions they can't answer. In these code paths, we at least have to inform them that their data would be touched in an execution. (We're using type-tracers for more than was originally envisioned, so the information hadn't been tracked until now.)\r\n\r\nIf we encounter a bug\u2014some column that shouldn't be identified as touched is, or some column that should be isn't\u2014it's likely due to\r\n\r\n  * a missing `touch_data`/`touch_shape` call\r\n  * a spurious `touch_data`/`touch_shape` call\r\n  * `touch_data`/`touch_shape` with `recursive=True` that should be `False`\r\n  * or vice-versa\r\n\r\nOn the plus side, this gives us many knobs to turn to fit the behavior to expectations. Whether something like\r\n\r\n```python\r\narray[some:range]\r\n```\r\n\r\nshould be considered \"touching data\" or not is a matter of taste. By setting a particular pattern of `touch_data`/`touch_shape` calls, we can make it do exactly what we want.",
  "created_at":"2022-12-21T22:17:43Z",
  "id":1362174504,
  "issue":2027,
  "node_id":"IC_kwDODBCWws5RMSIo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-21T22:17:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"For the benefits of public discourse \u2014 I've had a limited number of conversations with Doug, Martin, Jim etc. about why this is needed, so I'm starting somewhat from a position of ignorance.\r\n\r\nMy reading of the purpose of this PR is to identify at the buffer level whether inputs are propagated to outputs. This is done by tagging the buffer with the form key, such that any report found in the final result with the appropriate form key indicates that the data were used.\r\n\r\n@jpivarski on the specifics of this PR, does this mean that\r\n```python\r\nx = dak.from_json(...) # has columns foo, bar\r\n\r\nfoo = x[\"foo\"]\r\nbar = x[\"bar\"]\r\n\r\ntotal = dak.sum(bar)\r\nresult = total.compute()\r\n```\r\n\r\nwould load both \"foo\" and \"bar\", despite only \"bar\" actually being computed? It looks like the reports on each buffer are mutable, rather than operations which touch data producing a new array. And, that would seem like a fairly impassable obstacle; many operations that don't return new arrays e.g. `bar[0]` need to indicate that if they are computed, they touch data.\r\n",
  "created_at":"2022-12-22T10:54:13Z",
  "id":1362693781,
  "issue":2027,
  "node_id":"IC_kwDODBCWws5ROQ6V",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T10:54:25Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"Here's a big overview to bring everybody up to speed on various conversations.\r\n\r\n----------------\r\n\r\n> My reading of the purpose of this PR is to identify at the buffer level whether inputs are propagated to outputs.\r\n\r\nThat's right: this comes back to the \"high-level\" and \"low-level\" tracking that we were talking about at the beginning of the Dask work, which I'll call the \"high road\" and \"low road\"[^1] to avoid confusion with Dask's own concept of high-level graphs. There are two ways to describe a computation on Awkward Arrays, one that considers what `ak.*`/slice/ufunc operations happen to ak.Arrays (each of those operations is a node in the graph) and one that considers what kernels/nplike functions happen to one-dimensional buffers (each of those operations is a node in the graph).\r\n\r\nThe _ability_ to walk this low road is one of the motivations of the Awkward 2 project as a whole. I had thought at the start of the Dask project that the Dask graph would be at this level. From an early prototype, however, we concluded that doing so would make the Dask graph too big. A simple computation made a graph with about 100 nodes; typical data analyses would bring it into the thousands. @martindurant informed me that this would be a performance issue in the Dask machinery, and people do visualize the Dask graphs to understand performance issues: a graph full of kernel calls would not be easy to understand. And besides, most of those sub-graphs would look like most of the other sub-graphs: if you do a lot of some particular kind of slice, there would be a subgraph with, say, dozens of nodes that look like every other subgraph for the same kind of slice. At that level, all that detail would be unnecessary. So the Dask graph goes the high road and that's a good thing.\r\n\r\nBut there is some information that can only be collected on the low road. Predicting the output data types was one of these. Type-tracers (immutably) collect these on the zeroth pass, while the Dask graph is being built.\r\n\r\nThis PR adds another ability. Augmented type-tracers can now be run through the graph again as one of the first steps after `.compute()` to collect information about which buffers are touched. It does not build a new graph (with hundreds or thousands of nodes). It starts by getting labels for each input buffer, which are provided by an external process: dask-awkward or possibly `uproot.dask`/`dak.from_parquet`. Then the external process (dask-awkward) runs the labeled type-tracer through the graph _once_ and it mutably reports which labeled buffers are involved in any operations that require access to its data: requests for a `TypeTracerArray`'s `dtype` or `shape` do not require its data, nor do views or view-like slices or reshaping, but computations and element access do require its data.\r\n\r\nThis is effectively walking through the thousands-of-nodes graph, but it's not constructing such a graph as an object, just virtually walking through it, collecting only the information that we care about.\r\n\r\nSo for your example, suppose that a dak.Array has a `meta` like\r\n\r\n```python\r\n>>> meta = ak.Array(\r\n...     ak.Array([{\"foo\": 1.1, \"bar\": [2, 3, 4]}, {\"foo\": 5.5, \"bar\": []}]).layout.to_typetracer()\r\n... )\r\n```\r\n\r\nAs a first step after `.compute()`, something (`uproot.dask`? `dak.from_parquet`?) would label the Form with buffer names derived from the input source (TBranch names or Parquet columns):\r\n\r\n```python\r\n>>> column_projection_phase = copy.deepcopy(meta.layout.form)\r\n>>> column_projection_phase.content(\"foo\").form_key = \"track-foo\"\r\n>>> column_projection_phase.content(\"bar\").form_key = \"track-bar-offsets\"\r\n>>> column_projection_phase.content(\"bar\").content.form_key = \"track-bar-data\"\r\n>>> print(column_projection_phase)\r\n{\r\n    \"class\": \"RecordArray\",\r\n    \"fields\": [\r\n        \"foo\",\r\n        \"bar\"\r\n    ],\r\n    \"contents\": [\r\n        {\r\n            \"class\": \"NumpyArray\",\r\n            \"primitive\": \"float64\",\r\n            \"form_key\": \"track-foo\"\r\n        },\r\n        {\r\n            \"class\": \"ListOffsetArray\",\r\n            \"offsets\": \"i64\",\r\n            \"content\": {\r\n                \"class\": \"NumpyArray\",\r\n                \"primitive\": \"int64\",\r\n                \"form_key\": \"track-bar-data\"\r\n            },\r\n            \"form_key\": \"track-bar-offsets\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nAnd then create a labeled type-tracer and `report`,\r\n\r\n```python\r\n>>> take_me_through_the_graph, report = ak._typetracer.typetracer_with_report(\r\n...     column_projection_phase\r\n... )\r\n>>> x = ak.Array(take_me_through_the_graph)\r\n```\r\n\r\nand walk the labeled type-tracer through the graph:\r\n\r\n```python\r\n>>> foo = x[\"foo\"]\r\n>>> bar = x[\"bar\"]\r\n>>> total = ak.sum(bar)\r\n```\r\n\r\nNow the `report` says which of the buffers have been touched:\r\n\r\n```python\r\n>>> report.data_touched\r\n['track-bar-offsets', 'track-bar-data']\r\n```\r\n\r\nSo, for instance, \"foo\" is not touched because even though it was assigned to a variable, nothing happened to it that required its data. Both the list offsets and the data were needed for \"bar\" because the reducer needed both as part of its operation.\r\n\r\nThe reason that this is another pass, rather than the zeroth pass during which the Dask graph is constructed, is because the report-collection is mutable. Dask objects might be involved in several different `.compute()` operations, as well as graph-building operations that don't end in `.compute()`. If we were building this report along with a Dask graph and a user decided to\r\n\r\n```python\r\n>>> x\r\n<Array-typetracer type='?? * {foo: float64, bar: var * int64}'>\r\n```\r\n\r\nbut this operation _is not included_ in the graph that computes `total`, the report for `total.compute()` should not include everything that is touched by the `x.__repr__()` call.\r\n\r\n```python\r\n>>> report.data_touched\r\n['track-bar-offsets', 'track-bar-data', 'track-foo']\r\n```\r\n\r\nSo the report-collection has to happen in a controlled environment.\r\n\r\nAlternatively, we could have collected the report immutably, to have every type-tracer instance carry a separate report with all of the input buffers that have been touched to produce that buffer. So, for instance, a type-tracer representing an array that was produced from some inputs but does not contain those inputs would have a tuple of those inputs that it needs to pass on to any new type-tracers that are produced from it. That's a possible implementation, but annotating our codebase with all of the data-touching operations would get more complicated: we'd have to be replacing nodes everywhere we want to declare that they've been touched, rather than calling a less-obtrusive `x.touch_data()` on them.\r\n\r\nThe reason why we need those annotations at all is because sometimes type-tracers take different code paths than nplikes with eager data. We've tried to keep that at a minimum, but sometimes it was necessary because of the assumptions we want to make about the buffers in the calculation. So on the type-tracer code path, identified by either `not nplike.known_data` or `not nplike.known_shape` (I searched for all such cases and addressed each of them that did not immediately lead to raising an exception), we have to say whether the non-type-tracer code path touches data. Saying so with\r\n\r\n```python\r\nx.touch_data()\r\n```\r\n\r\nis less obtrusive than\r\n\r\n```python\r\nx = x.touched_data()\r\n```\r\n\r\nwhere we could get lost in replacing symbols with the same name. (This operation _wants_ to be implemented mutably, and we can either take advantage of the mutability of a new type that we made up, `TypeTracerReport`, or the mutability of the Python namespace scope in a function.)\r\n\r\n[^1]: Everybody gets to Scotand eventually.",
  "created_at":"2022-12-22T15:26:19Z",
  "id":1362971260,
  "issue":2027,
  "node_id":"IC_kwDODBCWws5RPUp8",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T16:34:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"\r\nI'll fix the merge conflicts now.",
  "created_at":"2022-12-23T13:14:31Z",
  "id":1363944344,
  "issue":2027,
  "node_id":"IC_kwDODBCWws5RTCOY",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-23T13:14:31Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> I found that 20% of the time was spent in the following line:\r\n\r\nWow, that's particularly slow. \r\n\r\n> Perhaps there is a way to have it first check the class __mro__ and then fall back to the protocol?\r\n\r\nInternally, we probably mostly care about protocol invariants being satisfied rather than inheritance trees, but as we need to type-check the external inputs, we're always going to need something like this in our layout constructors.\r\n\r\nThankfully, we can probably just forgo the protocol entirely here; protocols are super useful. But this is an internal abstraction that we don't want people to bring their own classes to, so it might even make sense to require that a backend is a subclass.",
  "created_at":"2022-12-22T10:08:06Z",
  "id":1362647847,
  "issue":2028,
  "node_id":"IC_kwDODBCWws5ROFsn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T10:21:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@nsmith- would you be able to test [this PR](https://github.com/scikit-hep/awkward/pull/2029)? \r\n\r\nThe instructions for installing from a branch are [here](https://github.com/scikit-hep/awkward#installation-for-developers).\r\n\r\nYou'll only need `git`, `python`, and `nox` binaries in your `PATH` (or `pipx run nox`).\r\n\r\n",
  "created_at":"2022-12-22T10:16:22Z",
  "id":1362656919,
  "issue":2028,
  "node_id":"IC_kwDODBCWws5ROH6X",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T10:16:45Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"CONTRIBUTOR",
  "body":"I tested it and can confirm the time has essentially vanished. Here is the same call:\r\n<img width=\"719\" alt=\"Screen Shot 2022-12-22 at 10 19 04 AM\" src=\"https://user-images.githubusercontent.com/6587412/209177232-db65d120-0904-4ac9-9a2f-dd12e5ac9bb0.png\">\r\nnow taking a total of 100ms in the program vs. previously 7.4s. This is a sampling profiler so the 100ms should come with a healthy uncertainty bar--it may even be less.\r\n",
  "created_at":"2022-12-22T16:22:01Z",
  "id":1363028877,
  "issue":2028,
  "node_id":"IC_kwDODBCWws5RPiuN",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T16:22:01Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Fantastic! Thanks for filing the report.",
  "created_at":"2022-12-22T16:35:09Z",
  "id":1363066746,
  "issue":2028,
  "node_id":"IC_kwDODBCWws5RPr96",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T16:35:09Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> a total of 100ms in the program vs. previously 7.4s\r\n\r\nWow. Yeah, that was necessary. I guess the reason is that it's in the constructor of every layout node instance, and those are created quite often.",
  "created_at":"2022-12-22T17:31:11Z",
  "id":1363155257,
  "issue":2028,
  "node_id":"IC_kwDODBCWws5RQBk5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T17:31:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2029?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2029](https://codecov.io/gh/scikit-hep/awkward/pull/2029?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (61f2903) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/a242c6ebeec46691c1583397d4430905775d03ca?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (a242c6e) will **decrease** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n> :exclamation: Current head 61f2903 differs from pull request most recent head 3e366f1. Consider uploading reports for the commit 3e366f1 to get more accurate results\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2029?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_backends.py](https://codecov.io/gh/scikit-hep/awkward/pull/2029/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2JhY2tlbmRzLnB5) | `84.40% <100.00%> (+0.19%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-22T10:23:07Z",
  "id":1362664072,
  "issue":2029,
  "node_id":"IC_kwDODBCWws5ROJqI",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T11:39:29Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This only touches flake8 configuration, and those tests have passed. Merging.",
  "created_at":"2022-12-22T11:38:24Z",
  "id":1362736369,
  "issue":2030,
  "node_id":"IC_kwDODBCWws5RObTx",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T11:38:24Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2031?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2031](https://codecov.io/gh/scikit-hep/awkward/pull/2031?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (12b9ea8) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/fff5e7cb3f7e16d8a2f55ad6e316ed59e3e0b8bf?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (fff5e7c) will **decrease** coverage by `0.00%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2031?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2031/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `74.51% <100.00%> (\u00f8)` | |\n| [src/awkward/types/arraytype.py](https://codecov.io/gh/scikit-hep/awkward/pull/2031/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwZXMvYXJyYXl0eXBlLnB5) | `93.10% <100.00%> (-0.23%)` | :arrow_down: |\n\n</details>",
  "created_at":"2022-12-22T15:45:46Z",
  "id":1362991199,
  "issue":2031,
  "node_id":"IC_kwDODBCWws5RPZhf",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T15:45:46Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"I've been putting a little time between approval and merging by collecting these into a browser window, reviewing them one after another, and then going back to the beginning to merge them. Now I'm back around to the end of the list, so I'll merge this.",
  "created_at":"2022-12-22T18:42:26Z",
  "id":1363223314,
  "issue":2031,
  "node_id":"IC_kwDODBCWws5RQSMS",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T18:42:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"Ah, sorry @ioanaif! I didn't assign the issue to myself because I noticed that it was fairly small. I'll make a note to be better at always assigning things I'm working on.",
  "created_at":"2022-12-22T20:31:23Z",
  "id":1363316228,
  "issue":2031,
  "node_id":"IC_kwDODBCWws5RQo4E",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-22T20:31:23Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"(Oh\u2014this is not a high priority. It doesn't need to be done in the next few days or anything! When the two sets of header-only code are separated, we'll do another `awkward-cpp` release and move forward from there. That can be any time in the next month or so.)",
  "created_at":"2022-12-22T21:12:38Z",
  "id":1363345576,
  "issue":2032,
  "node_id":"IC_kwDODBCWws5RQwCo",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-22T21:12:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2033?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2033](https://codecov.io/gh/scikit-hep/awkward/pull/2033?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (46ea4ec) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/08a099a00b803a933adf7d35d67338c3bb032524?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (08a099a) will **increase** coverage by `0.08%`.\n> The diff coverage is `98.48%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2033?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/typing.py](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvdHlwaW5nLnB5) | `88.88% <75.00%> (-2.78%)` | :arrow_down: |\n| [src/awkward/contents/bitmaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYml0bWFza2VkYXJyYXkucHk=) | `68.02% <100.00%> (+0.10%)` | :arrow_up: |\n| [src/awkward/contents/bytemaskedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvYnl0ZW1hc2tlZGFycmF5LnB5) | `88.54% <100.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/contents/emptyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvZW1wdHlhcnJheS5weQ==) | `72.22% <100.00%> (+0.15%)` | :arrow_up: |\n| [src/awkward/contents/indexedarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZGFycmF5LnB5) | `77.66% <100.00%> (+0.05%)` | :arrow_up: |\n| [src/awkward/contents/indexedoptionarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvaW5kZXhlZG9wdGlvbmFycmF5LnB5) | `88.67% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/contents/listarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdGFycmF5LnB5) | `90.45% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/contents/listoffsetarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbGlzdG9mZnNldGFycmF5LnB5) | `80.20% <100.00%> (+0.02%)` | :arrow_up: |\n| [src/awkward/contents/numpyarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvbnVtcHlhcnJheS5weQ==) | `91.05% <100.00%> (+0.01%)` | :arrow_up: |\n| [src/awkward/contents/recordarray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVjb3JkYXJyYXkucHk=) | `84.05% <100.00%> (+0.03%)` | :arrow_up: |\n| ... and [24 more](https://codecov.io/gh/scikit-hep/awkward/pull/2033/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-23T15:32:33Z",
  "id":1364047900,
  "issue":2033,
  "node_id":"IC_kwDODBCWws5RTbgc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-03T21:10:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"A warning from PyLint (they easily get buried):\r\n\r\n> typing.final is not supported by all versions included in the py-version setting\r\n\r\nIs there a way to import it as backports for Python versions as early as 3.7?",
  "created_at":"2022-12-23T15:52:11Z",
  "id":1364059589,
  "issue":2033,
  "node_id":"IC_kwDODBCWws5RTeXF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-23T15:52:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This is done, it just needs a fix for mypy on older Python versions. I think the issue is how we import `typing_extensions` and `typing` in `awkward.typing`. It seems like there's no easy way to say \"import everything from typing and typing_extensions (if appropriate), where typing_extensions takes priority\". I think I might have to explicitly import the appropriate types from `typing_extensions`, but I'll properly dig into this next week.\r\n\r\n> I suppose you can't annotate Content, Form, and Type (the superclasses) to say that they can't have subclasses beyond those that are defined in our codebase. (I think Scala has a way to say that: they have a lot of module-level/namespace-level type qualifiers.)\r\n\r\nUnfortunately not, but I think we'll be OK at least with constraining the immediate subclasses.\r\n\r\n> Also, this would only prevent people from defining subclasses and then type-checking them, right? We're not preventing people from hacking things as a test\u2014just formally declaring something as \"okay for production,\" right?\r\n\r\nRight, this is not runtime-enforced at all.",
  "created_at":"2022-12-24T01:36:29Z",
  "id":1364433721,
  "issue":2033,
  "node_id":"IC_kwDODBCWws5RU5s5",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-24T01:38:13Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2036?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2036](https://codecov.io/gh/scikit-hep/awkward/pull/2036?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (96fdfef) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/bd3efcc1c9885d6399732d8e7223a896cae8b893?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (bd3efcc) will **decrease** coverage by `0.29%`.\n> The diff coverage is `0.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2036?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `80.00% <0.00%> (-14.12%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_any.py](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbnkucHk=) | `80.00% <0.00%> (-14.12%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `60.00% <0.00%> (-15.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argmin.py](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `60.00% <0.00%> (-15.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_corr.py](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3JyLnB5) | `74.19% <0.00%> (-7.95%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudC5weQ==) | `78.94% <0.00%> (-14.81%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_count\\_nonzero.py](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudF9ub256ZXJvLnB5) | `80.00% <0.00%> (-14.12%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_covar.py](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3Zhci5weQ==) | `73.07% <0.00%> (-9.54%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXgucHk=) | `60.00% <0.00%> (-15.00%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_mean.py](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZWFuLnB5) | `52.77% <0.00%> (-10.56%)` | :arrow_down: |\n| ... and [8 more](https://codecov.io/gh/scikit-hep/awkward/pull/2036/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-23T19:08:36Z",
  "id":1364242927,
  "issue":2036,
  "node_id":"IC_kwDODBCWws5RULHv",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-23T19:16:49Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2039?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2039](https://codecov.io/gh/scikit-hep/awkward/pull/2039?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (7424d00) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/71ada43cf884030be357316962b5ee85187e0f7b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (71ada43) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-26T23:49:09Z",
  "id":1365510685,
  "issue":2039,
  "node_id":"IC_kwDODBCWws5RZAod",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2023-01-13T01:44:31Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2040?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2040](https://codecov.io/gh/scikit-hep/awkward/pull/2040?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (46a435d) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/5af040b26f4b77cdb88f1eace3625bc0fc86ab21?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (5af040b) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-29T17:12:51Z",
  "id":1367472102,
  "issue":2040,
  "node_id":"IC_kwDODBCWws5Rgffm",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-29T18:46:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I believe that I'm free to merge this; my recollection is that Jim is happy for me to fix docs-related bugs that are semi-urgent (in this case, propagating correct unversioned links & adding Sphinx upper cap).",
  "created_at":"2022-12-29T19:03:33Z",
  "id":1367526259,
  "issue":2040,
  "node_id":"IC_kwDODBCWws5Rgstz",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-29T19:03:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's true. Thanks for merging this!",
  "created_at":"2022-12-29T19:23:11Z",
  "id":1367536320,
  "issue":2040,
  "node_id":"IC_kwDODBCWws5RgvLA",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-29T19:23:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"This has now been deployed.",
  "created_at":"2022-12-29T21:07:04Z",
  "id":1367585643,
  "issue":2041,
  "node_id":"IC_kwDODBCWws5Rg7Nr",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-29T21:07:04Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2044?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2044](https://codecov.io/gh/scikit-hep/awkward/pull/2044?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (6dc1c4c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/492368e8e0112300cdd29f85fee903f87cb810d4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (492368e) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-30T01:11:18Z",
  "id":1367671280,
  "issue":2044,
  "node_id":"IC_kwDODBCWws5RhQHw",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T01:11:18Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"In general, I like the fact that we have hyphenated names (for the reasons that you give). But, as you note, I want to change that in this case to solve a tooling problem :)",
  "created_at":"2022-12-30T17:01:05Z",
  "id":1368011995,
  "issue":2044,
  "node_id":"IC_kwDODBCWws5RijTb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T17:01:05Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2045?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2045](https://codecov.io/gh/scikit-hep/awkward/pull/2045?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9f1fb56) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/32205320dc62161a2bf36b90f00eefc6b2c4e1a5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3220532) will **increase** coverage by `0.03%`.\n> The diff coverage is `78.57%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2045?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_nplikes.py](https://codecov.io/gh/scikit-hep/awkward/pull/2045/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX25wbGlrZXMucHk=) | `64.24% <50.00%> (+0.71%)` | :arrow_up: |\n| [src/awkward/\\_connect/numpy.py](https://codecov.io/gh/scikit-hep/awkward/pull/2045/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2Nvbm5lY3QvbnVtcHkucHk=) | `67.12% <90.00%> (+1.25%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-30T12:18:26Z",
  "id":1367890060,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5RiFiM",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T22:38:15Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"I think I was overly concerned in the PR description. The safest thing to do(in my view), which is what I've opted for, is to rebuild the argument list and replace any `ak.Array` objects with their rectilinear counterparts. \r\n\r\nIIRC we need to preserve the tuple vs list separation; some functions distinguish between the two.\r\n\r\nMy implementation is non-recursive; we assume that _at most_ an `ak.Array` can be nested inside a tuple or list in the argument list. I think this is a pretty reasonable assumption; I can't think of any array functions for which this is not true off the top of my head. Perhaps a more rigorous implementation would be to recursively visit the argument list, and treat known array objects as leaves. Yet, that brings performance and complexity concerns.\r\n\r\nI think just recursing a single time, and handling only lists and tuples is a reasonable scope for supporting \"unsupported\" NumPy functions. The most robust solution would probably be to formally define the array function overloads for all NumPy functions that we can support trivially. This would entail some small shims that manually, explicitly, perform the argument conversion. ",
  "created_at":"2022-12-30T18:26:27Z",
  "id":1368042877,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5Riq19",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T18:30:27Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"The thing that I'm worried about is\r\n\r\n```python\r\nclass MyAwesomeListType:\r\n    def __init__(self, data):\r\n        self._data = data\r\n    def __len__(self):\r\n        return len(self._data)\r\n    def __getitem__(self, where):\r\n        return self._data[where]\r\n\r\nnp.stack(MyAwesomeListType([ak.Array([1, 2, 3]), ak.Array([1.1, 2.2, 3.3])]))\r\n```\r\n\r\ncausing some slow conversion of the two `ak.Arrays` into a single NumPy array when a function like `np.stack` really wants separate arrays after all. In the above, `MyAwesomeListType` is neither a list nor a tuple; it's something we didn't know we needed to check for. That's why I think we want to invert the whitelisty-blacklistiness of it, to make arrays of the things we know we can (inexpensively) make arrays out of and leave anything else as a Python object. (The prototype implementation I wrote above would turn `MyAwesomeListType` into a `list`, but that would be fine. Maybe `tuple` would be safer/less likely to be interpreted by NumPy as something to unnecessarily convert to an array.)\r\n\r\nThe recursion wasn't the essential part. I doubt there are any NumPy functions whose signatures expect non-array collections _of_ non-array collections of arrays. I know about some one-level deep functions (like `np.concatenate` and `np.stack`), but not any deeper. The implementation doesn't have to be recursive; it was just the easiest way to deal with the two levels we know we need to deal with in the same helper function.",
  "created_at":"2022-12-30T18:35:34Z",
  "id":1368045866,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5Rirkq",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T18:35:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> The thing that I'm worried about is\r\n\r\nI think this is vanishingly unlikely, but I completely agree with the idea that we should consider whether inverting the logic is a better solution.\r\n\r\nFor context, the existing code handles _only_ tuples of `ak.Array` specially; every other argument is passed directly to `nplike.to_rectilinear`. This means we don't support scalars, but also means that your example would probably fail very similarly to how it would fail in this PR; in this PR, NumPy would try and coerce the argument to an array, whereas in `main` I believe that `to_rectilinear` would do the same thing (and fail for ragged arrays).\r\n\r\nMy suggestion is that we don't have to make `np.some_function` work for every possible set of inputs; especially when we want to implement a general solution that doesn't know the details about the individual NumPy functions being overloaded. I would be fine with our documentation explaining that the `np.` functions *may* work, but subject to certain constraints. This is already the case (hence this PR), but I'm not sure whether we have a disclaimer anywhere. \r\n\r\nIn short; NumPy might support the above, but there's no reason that we have to; `__array_function__` is not required to behave exactly as the `numpy.XXX` equivalent (in my understanding, anyway).\r\n\r\nHow would you feel about just making this a documentation-level warning? \r\n",
  "created_at":"2022-12-30T18:46:33Z",
  "id":1368048970,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5RisVK",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T18:46:33Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> For context, the existing code handles _only_ tuples of `ak.Array` specially; every other argument is passed directly to `nplike.to_rectilinear`.\r\n\r\nYes, this is an improvement (previously, only one non-array type was okay); I was just wondering if we could take it further/all the way (so that any non-array type is okay). And my intention is not to actually handle every case, but to pass it off on NumPy to decide what to do.\r\n\r\n> NumPy might support the above, but there's no reason that we have to; `__array_function__` is not required to behave exactly as the `numpy.XXX` equivalent (in my understanding, anyway).\r\n\r\nDoesn't it, though? In general, the way we define correct behavior for `ak.overloaded_numpy_function` is to ask, \"Does this do what NumPy would do if rectilinear `ak.Arrays` are replaced by `np.ndarrays`?\" and \"Are the non-rectilinear extensions reasonable?\" Here, we're overloading arbitrary NumPy functions for only the rectilinear `ak.Arrays`. The touchstone for correctness is whether\r\n\r\n```python\r\nf(ak.Array(np.array(x)), ak.Array(np.array(y)), ...)\r\n```\r\n\r\nis equal to\r\n\r\n```python\r\nf(np.array(x), np.array(y), ...)\r\n```\r\n\r\nand that it has the same performance characteristics (doesn't replace a vectorized array operation with Pythonic iteration).\r\n\r\nThe arbitrary `f` might pack some of these arrays into tuples, lists, and `MyAwesomeListType` (which seems unlikely on the face of it, but we can be surprised by other people's concerns\u2014maybe they need to add metadata to their lists...[^1]). It probably doesn't pack them more than one level deep, and I doubt any NumPy functions care whether the non-array collections are tuples, lists, or `MyAwesomeListType`, so they can all turn into lists (or tuples).\r\n\r\nMoreover, the work isn't on our side to implement all of these cases; we can pass off most of the work to the particular NumPy functions. The one thing that we can do that NumPy can't is convert our special arrays into plain nplike arrays, in whatever non-array collection they might be hiding.\r\n\r\nThat's why I suggested this. However, handling both tuples and lists is better than handling just tuples, so I can accept the PR as-is.\r\n\r\n[^1]: I've replaced built-in types with custom types to debug memory leaks with [Pympler](https://pympler.readthedocs.io/en/latest/#usage-examples), since it summarizes memory use by object type. If I suspect that a million dicts are being created and not destroyed by a particular line of code, I'll replace `dict` with a `NoticeMeeeee` MutableMapping, so that it will be separated from all of the other dicts in Pympler's table. If such a substitution caused the code to break or act differently, that would be hard to figure out. Well, this case is not an example of what we're looking for because I would very likely make `NoticeMeeeee` a subclass of `dict` and `isinstance` would work, but it gets close to the kind of surprise I'm thinking of. You know, Uproot's [STLVector](https://github.com/scikit-hep/uproot5/blob/d388d7c77e9deab273d21205ec83829c4d60edd0/src/uproot/containers.py#L1722) is a non-list Sequence. If an Uproot user gets an `std::vector<std::vector<int>>` from ROOT, they might be in this situation.",
  "created_at":"2022-12-30T19:27:42Z",
  "id":1368063274,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5Riv0q",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T19:27:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Doesn't it, though? In general, the way we define correct behavior for `ak.overloaded_numpy_function` is to ask, \"Does this do what NumPy would do if rectilinear `ak.Arrays` are replaced by `np.ndarrays`?\" and \"Are the non-rectilinear extensions reasonable?\" Here, we're overloading arbitrary NumPy functions for only the rectilinear `ak.Arrays`. \r\n\r\nI agree with this sentiment, and my concern is whether we can actually do this. Unless we make assumptions (e.g. `SequenceLike(list_of_values)` is a valid constructor), we can't support custom types without potentially changing the result with respect to the result of calling the NumPy function directly with NumPy arrays; there's nothing stopping one NumPy function treating a list-like object as a \"list of arrays\" , and another treating the same argument as a \"single n-dim array\"; we can't tell without looking at the particular function in question.\r\n\r\nMoreover, in some cases, NumPy does care about the types,[^caveat] so a custom sequence that becomes a list or a tuple might change the behaviour w.r.t to NumPy. I don't know; this is guesswork on my part.\r\n\r\nWhat I mean by \r\n> `_array_function__` is not required to behave exactly as the `numpy.XXX` equivalent (in my understanding, anyway).\r\n\r\nis that the API itself is just a dispatcher. It doesn't define the semantics for how it should handle arguments, besides stating that [optional arguments can be omitted](https://numpy.org/neps/nep-0018-array-function-protocol.html#non-goals:~:text=Note%20that%20it,NumPy%20function%20call).). The [NEP](https://numpy.org/neps/nep-0018-array-function-protocol.html) does set-out how NumPy can programmatically demonstrate which arguments are array-like using a dispatcher that generates the `types` list, but we can't use that to go in the reverse direction. My impression of the array API is that it's not really designed for generic forwarding dispatch, but rather for hand-rolled overloads. \r\n\r\nBased upon the NEP, I feel confident in saying that we could choose to only implement a subset of types. If we can't predict whether an argument needs list semantics or tuple semantics, and we can't re-create custom sequences, then we can't safely convert custom sequences containing Awkward types.[^caveat] Maybe if we encounter a sequence that is neither a list nor a tuple, we should either:\r\n1. check for Awkward Arrays. It's only if we find one that we would hit this problem anyway. Then we could raise an exception, and require a manual overload to fix it. This wouldn't handle the non-sequence aspects, e.g. if a custom `dict`-like object had Awkward Arrays as values, but I'm _pretty_ sure no NumPy functions expect dict-like objects.\r\n2. just throw an exception\r\n\r\nAn independent point is whether we should recurse further, which I haven't spoken to strongly, yet. \r\n\r\n[^caveat]: Again, I believe list-vs-tuple matters for NumPy functions, but if not then the point becomes less relevant.",
  "created_at":"2022-12-30T21:04:33Z",
  "id":1368089860,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5Ri2UE",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T21:06:17Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"> Unless we make assumptions (e.g. `SequenceLike(list_of_values)` is a valid constructor)\r\n\r\nI'm not assuming that, which is why I suggested that our argument-regularization converts `SequenceLike` into `list` (or maybe `tuple`). In other words, don't try to reconstruct the `SequenceLike`.\r\n\r\nI _was_ assuming that NumPy doesn't care about the distinction between a `SequenceLike` and a built-in concrete Sequence. (That's where I have a slight hesitation about turning all of the `SequenceLikes` into `lists`; if NumPy cares about `list`-vs-`tuple` anywhere, it would be to assume that `list` might \"want\" to be an array, whereas `tuple` doesn't. Turning all of the unrecognized `SequenceLikes` into `tuples` seems slightly safer, more hands-off.)\r\n\r\nWe don't have to implement all features of the overloaded NumPy functions, but they shouldn't fail silently. Your suggestion of being more up-front about unrecognized patterns (raising errors) is a good one.",
  "created_at":"2022-12-30T21:23:07Z",
  "id":1368094467,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5Ri3cD",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T21:23:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> > Unless we make assumptions (e.g. `SequenceLike(list_of_values)` is a valid constructor)\r\n> \r\n> I'm not assuming that, which is why I suggested that our argument-regularization converts `SequenceLike` into `list` (or maybe `tuple`). In other words, don't try to reconstruct the `SequenceLike`.\r\n\r\nI'm following you! \r\n\r\n> I _was_ assuming that NumPy doesn't care about the distinction between a `SequenceLike` and a built-in concrete Sequence. (That's where I have a slight hesitation about turning all of the `SequenceLikes` into `lists`; if NumPy cares about `list`-vs-`tuple` anywhere, it would be to assume that `list` might \"want\" to be an array, whereas `tuple` doesn't. Turning all of the unrecognized `SequenceLikes` into `tuples` seems slightly safer, more hands-off.)\r\n> We don't have to implement all features of the overloaded NumPy functions, but they shouldn't fail silently. Your suggestion of being more up-front about unrecognized patterns (raising errors) is a good one.\r\n\r\nHow do you feel about lists? Are we happy to try and iterate through them in search of `ak.Array`? I was thinking no before, but actually, lists are not high-performance data types. It's not unreasonable that if a user passes a big list to a NumPy function it will be visited at least once. If we're happy to do this, then we can drop the depth limit of the conversion, and visit all true leaves of sequences (once we resolve custom sequence handling).\r\n\r\nCustom sequences are trickier. The problem is that we don't know whether the called function expects an array-like or tuple-like argument, and IIRC some functions test for lists and warn in such cases (i.e. where an API changed). I wish I could recall the function. So, I don't think we can have a safe rule in such a case that is always predictable. I'd prefer to just error loudly if we encounter a sequence type that isn't `list`, `tuple`, `str`, `bytes`. Does that seem too restrictive?\r\n",
  "created_at":"2022-12-30T21:35:41Z",
  "id":1368097406,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5Ri4J-",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T21:35:41Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"It would be pretty common to be given a list of arrays as an argument, e.g.\r\n\r\n```python\r\nnp.stack([ak.Array([1, 2, 3]), ak.Array([1.1, 2.2, 3.3])])\r\n```\r\n\r\nand it would be much better to iterate through the list, turning any `ak.Arrays` you find there into `np.ndarrays`, which is what this PR does (at my first reading of it). Turning that list into an array would be bad, and I think that's what was happening before this PR.\r\n\r\n(The above applies to any subclasses of `list`, too. Same for `tuples`.)\r\n\r\nIf it's an unrecognized non-string Sequence (or even Iterable) without an `__array__` method, I'd say you can iterate over it, turning any `ak.Arrays` into `np.ndarrays`, and give NumPy a `list` of the results. We lost information about what kind of Iterable it was, but I'm guessing/assuming/asserting that NumPy doesn't care.\r\n\r\nIf it's an unrecognized object with an `__array__` method, pass it on to NumPy. NumPy will call the `__array__` method.\r\n\r\nAlternatively, you can check a whitelist of known-to-be-okay container types and raise an exception for anything unrecognized. That makes fewer assumptions about what NumPy will do with what we give it. While it handles fewer cases than NumPy likely does, the cases it doesn't handle are noisy exceptions, rather than silent mistakes (including performance mistakes), and that's good. A user might someday point out a NumPy function that can't be executed because of this (dicts?), but then we can just add it at that time. This is a safe option.\r\n\r\nI'd be happy with either one.",
  "created_at":"2022-12-30T22:10:41Z",
  "id":1368106040,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5Ri6Q4",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T22:10:41Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"OK, so we're talking about (in the allow-list sense)\r\n- recursively visit lists, tuples\r\n- prohibit non tuple/list iterables\r\n\r\nThat seems like the safest approach. It's more restrictive than NumPy, but I feel that we're allowed to make those kinds of decisions given NEP18 is fairly permissive. There may be some exceptions where we need to support these types (I'm not aware of any), but we can extend the manual overloads in these cases.\r\n\r\nI'm most in favour of this solution, as it's easier to reason about :)",
  "created_at":"2022-12-30T22:15:07Z",
  "id":1368107049,
  "issue":2045,
  "node_id":"IC_kwDODBCWws5Ri6gp",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T22:15:07Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2046?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2046](https://codecov.io/gh/scikit-hep/awkward/pull/2046?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e2f4e1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/64377c1bf4f17337496dddb96a88fcafd4438b66?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (64377c1) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2046?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_transform.py](https://codecov.io/gh/scikit-hep/awkward/pull/2046/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190cmFuc2Zvcm0ucHk=) | `91.30% <\u00f8> (\u00f8)` | |\n\n</details>",
  "created_at":"2022-12-30T17:39:14Z",
  "id":1368027368,
  "issue":2046,
  "node_id":"IC_kwDODBCWws5RinDo",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T17:39:14Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2048?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2048](https://codecov.io/gh/scikit-hep/awkward/pull/2048?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (b534427) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/64377c1bf4f17337496dddb96a88fcafd4438b66?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (64377c1) will **increase** coverage by `0.01%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2048?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_do.py](https://codecov.io/gh/scikit-hep/awkward/pull/2048/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX2RvLnB5) | `83.72% <\u00f8> (\u00f8)` | |\n| [src/awkward/contents/content.py](https://codecov.io/gh/scikit-hep/awkward/pull/2048/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvY29udGVudC5weQ==) | `73.13% <100.00%> (+0.38%)` | :arrow_up: |\n| [src/awkward/contents/regulararray.py](https://codecov.io/gh/scikit-hep/awkward/pull/2048/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvY29udGVudHMvcmVndWxhcmFycmF5LnB5) | `88.45% <100.00%> (+0.04%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-30T17:58:29Z",
  "id":1368033285,
  "issue":2048,
  "node_id":"IC_kwDODBCWws5RiogF",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T18:06:01Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"MEMBER",
  "body":"And yes, it can be merged.",
  "created_at":"2022-12-30T18:26:30Z",
  "id":1368042891,
  "issue":2048,
  "node_id":"IC_kwDODBCWws5Riq2L",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T18:26:30Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"> Had it been a `broadcast_and_apply` argument that wasn't implemented in `recursively_apply`? If so, this is a good step toward further unification. \r\n\r\nI *think* so, at least, that's what it looked like. I didn't dig too deeply into the `git blame`, but it seems as though the broadcasting logic came directly from the C++, and we know that `ak.transform` is younger than that.\r\n",
  "created_at":"2022-12-30T18:28:37Z",
  "id":1368043559,
  "issue":2048,
  "node_id":"IC_kwDODBCWws5RirAn",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T18:28:37Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"I do remember a `regular_to_jagged` boolean argument, and in this PR, it's pretty obvious that such an argument wasn't in `recursively_apply` until now, so I guess it must have been in `broadcast_and_apply`.",
  "created_at":"2022-12-30T18:37:17Z",
  "id":1368046358,
  "issue":2048,
  "node_id":"IC_kwDODBCWws5RirsW",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T18:37:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2049?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2049](https://codecov.io/gh/scikit-hep/awkward/pull/2049?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (63039f1) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/31dcf2167a9cf406bb73e96ba2179a6fa3e59694?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (31dcf21) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n\n</details>",
  "created_at":"2022-12-30T21:32:20Z",
  "id":1368096602,
  "issue":2049,
  "node_id":"IC_kwDODBCWws5Ri39a",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-30T21:32:20Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2050?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2050](https://codecov.io/gh/scikit-hep/awkward/pull/2050?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (8e5482c) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/9ab248c2dc0ce87a0836aed5d444a7529552d3eb?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (9ab248c) will **decrease** coverage by `1.20%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2050?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/operations/ak\\_metadata\\_from\\_parquet.py](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tZXRhZGF0YV9mcm9tX3BhcnF1ZXQucHk=) | `100.00% <100.00%> (\u00f8)` | |\n| [src/awkward/operations/ak\\_argmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtYXgucHk=) | `60.00% <0.00%> (-31.18%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_argmin.py](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hcmdtaW4ucHk=) | `60.00% <0.00%> (-31.18%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_sum.py](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zdW0ucHk=) | `60.00% <0.00%> (-30.33%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_prod.py](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19wcm9kLnB5) | `60.00% <0.00%> (-30.33%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_max.py](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19tYXgucHk=) | `60.00% <0.00%> (-28.24%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_min.py](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19taW4ucHk=) | `60.00% <0.00%> (-28.24%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_count.py](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19jb3VudC5weQ==) | `78.94% <0.00%> (-21.06%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_softmax.py](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19zb2Z0bWF4LnB5) | `78.94% <0.00%> (-21.06%)` | :arrow_down: |\n| [src/awkward/operations/ak\\_all.py](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha19hbGwucHk=) | `80.00% <0.00%> (-20.00%)` | :arrow_down: |\n| ... and [39 more](https://codecov.io/gh/scikit-hep/awkward/pull/2050/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | |\n\n</details>",
  "created_at":"2022-12-31T01:36:50Z",
  "id":1368142556,
  "issue":2050,
  "node_id":"IC_kwDODBCWws5RjDLc",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-31T02:22:28Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski yes I recall that too! I think this is correct now - I'm literally reading the implementation.",
  "created_at":"2022-12-31T16:49:14Z",
  "id":1368251275,
  "issue":2050,
  "node_id":"IC_kwDODBCWws5RjduL",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-31T16:49:14Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"NONE",
  "body":"# [Codecov](https://codecov.io/gh/scikit-hep/awkward/pull/2052?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) Report\n> Merging [#2052](https://codecov.io/gh/scikit-hep/awkward/pull/2052?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (f00a54b) into [main](https://codecov.io/gh/scikit-hep/awkward/commit/32205320dc62161a2bf36b90f00eefc6b2c4e1a5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) (3220532) will **increase** coverage by `0.03%`.\n> The diff coverage is `100.00%`.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n| [Impacted Files](https://codecov.io/gh/scikit-hep/awkward/pull/2052?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep) | Coverage \u0394 | |\n|---|---|---|\n| [src/awkward/\\_util.py](https://codecov.io/gh/scikit-hep/awkward/pull/2052/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvX3V0aWwucHk=) | `81.42% <100.00%> (-0.07%)` | :arrow_down: |\n| [src/awkward/highlevel.py](https://codecov.io/gh/scikit-hep/awkward/pull/2052/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvaGlnaGxldmVsLnB5) | `76.21% <0.00%> (+1.13%)` | :arrow_up: |\n| [src/awkward/operations/ak\\_to\\_layout.py](https://codecov.io/gh/scikit-hep/awkward/pull/2052/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=scikit-hep#diff-c3JjL2F3a3dhcmQvb3BlcmF0aW9ucy9ha190b19sYXlvdXQucHk=) | `89.13% <0.00%> (+2.17%)` | :arrow_up: |\n\n</details>",
  "created_at":"2022-12-31T15:23:38Z",
  "id":1368241243,
  "issue":2052,
  "node_id":"IC_kwDODBCWws5RjbRb",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-31T15:36:00Z",
  "user":"MDM6Qm90MjI0Mjk2OTU="
 },
 {
  "author_association":"COLLABORATOR",
  "body":"@jpivarski this function was intended to check parameters already with https://github.com/scikit-hep/awkward/blob/f00a54bda4ccdced2fe876928697b390ed0b33ba/src/awkward/_util.py#L888-L891, which should be working. I *think* you might not have seen this if you just saw the diff, which is what I imagine happened, but let me know if I've made an oversight!",
  "created_at":"2022-12-31T16:51:44Z",
  "id":1368251593,
  "issue":2052,
  "node_id":"IC_kwDODBCWws5RjdzJ",
  "performed_via_github_app":null,
  "reactions":{},
  "updated_at":"2022-12-31T16:51:44Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "author_association":"MEMBER",
  "body":"That's right! (I only looked at the diff.) So this checks everything, then.\r\n\r\nLooks good!",
  "created_at":"2022-12-31T16:54:31Z",
  "id":1368251907,
  "issue":2052,
  "node_id":"IC_kwDODBCWws5Rjd4D",
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "updated_at":"2022-12-31T16:54:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 }
]