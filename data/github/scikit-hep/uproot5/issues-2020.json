[
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Uproot3's Sources were assumed to be like a memmap, but most users access data remotely. It was sorely missing methods for prefetching byte ranges that can run in parallel with interpretation.\r\n\r\nWe couldn't just add those to the old version; they'd have to be used consistently. Now we can use them consistently.",
  "closed_at":"2020-05-13T02:42:41Z",
  "comments":7,
  "created_at":"2020-05-11T18:56:16Z",
  "draft":false,
  "id":616107091,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDE2MjgzMzAx",
  "number":1,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-13T02:42:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Define a Source class, but add fetch and release semantics.",
  "updated_at":"2020-05-13T12:58:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Data provided by @chrisburr; discussion below\r\n------------------------------\r\n\r\n> If I'm making a fundamental mistake in these file access methods, then I don't want to design around it. I've been thinking about how I can adequately test that. Do you have a suggestion for a publicly available test file?\r\n\r\nI default to using these three open data files for XRootD:\r\n```bash\r\n$ xrdfs root://eospublic.cern.ch/ ls -l /eos/opendata/lhcb/AntimatterMatters2017/data\r\n-r-- 2017-03-07 13:53:05   666484974 /eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetDown.root\r\n-r-- 2017-03-07 13:53:08   444723234 /eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root\r\n-r-- 2017-03-07 13:53:08     2272072 /eos/opendata/lhcb/AntimatterMatters2017/data/PhaseSpaceSimulation.root\r\n```\r\n\r\nI've just copied them to CERN S3 so they can be accessed using standard HTTP(S) as well:\r\n* https://scikit-hep-test-data.s3.cern.ch/B2HHH_MagnetDown.root\r\n* https://scikit-hep-test-data.s3.cern.ch/B2HHH_MagnetUp.root\r\n* https://scikit-hep-test-data.s3.cern.ch/PhaseSpaceSimulation.root\r\n\r\n> Would a test through a household ISP mean anything, given that most of these files would be used on university or lab computers or on the GRID?\r\n\r\nIt's definitely useful as the quality of institute connections varies a lot in my experience and it's more likely to expose issues with latency, especially given you'll be accessing them from the US. I think a good implementation should only be limited by bandwidth when reading large enough files.\r\n\r\nIf you put together a test I can easily try it at a few different institutes as well as pushing a test job to every LHCb grid site.\r\n\r\n_Originally posted by @chrisburr in https://github.com/scikit-hep/uproot4/pull/1#issuecomment-627928856_",
  "closed_at":"2020-06-17T23:43:17Z",
  "comments":17,
  "created_at":"2020-05-15T01:04:50Z",
  "id":618626197,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2MTg2MjYxOTc=",
  "number":2,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"File access methods performance studies",
  "updated_at":"2020-06-17T23:43:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-15T01:47:01Z",
  "comments":1,
  "created_at":"2020-05-15T01:08:43Z",
  "draft":false,
  "id":618627284,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDE4MzIxNjIz",
  "number":3,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-15T01:47:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"This is another way that multipart HTTP(S) can fail, forcing us to fall back on one-request-per-thread.",
  "updated_at":"2020-05-15T01:47:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Adds an XRootD source that uses vector reads. This should probably be the only XRootD source.\r\n\r\nBy default it takes the number of chunks in a request by querying the server configuration:\r\n```\r\ntime_profile(uproot4.source.xrootd.XRootDVectorReadSource(\r\n    \"root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetDown.root\"\r\n), basic_ranges)\r\n```\r\nHowever for now I've exposed this as a parameter, if only to make the performance studies easier:\r\n```\r\ntime_profile(uproot4.source.xrootd.XRootDVectorReadSource(\r\n    \"root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetDown.root\",\r\n    max_num_elements=5\r\n), basic_ranges)\r\n```\r\n\r\nRelated to #2.",
  "closed_at":"2020-05-15T21:50:44Z",
  "comments":8,
  "created_at":"2020-05-15T17:52:03Z",
  "draft":false,
  "id":619142064,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDE4NzI0MDEz",
  "number":4,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-15T21:50:44Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add XRootDVectorReadSource",
  "updated_at":"2020-05-16T08:25:04Z",
  "user":"MDQ6VXNlcjUyMjA1MzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"From the [`TXNetFile`](https://root.cern.ch/doc/master/classTXNetFile.html) docs:\r\n\r\n> The \"url\" argument must be of the form\r\n> \r\n> `root://server1:port1[,server2:port2,...,serverN:portN]/pathfile,`\r\n> \r\n> Note that this means that multiple servers (>= 1) can be specified in the url. The connection will try to connect to the first server:port and if that does not succeed, it will try the second one, and so on until it finds a server that will respond.\r\n\r\nI didn't realise this was an pre-existing feature in ROOT but I'd been asking for it for a while. Being able to do this better matches with how data is stored on the grid and makes it easier to when sites are down.\r\n\r\nThe implementation of this shouldn't only check that the server is alive, it should also fallback if errors are returned when trying to access the data (i.e. only querying the config isn't enough to know if the site is down).",
  "closed_at":null,
  "comments":3,
  "created_at":"2020-05-16T07:57:42Z",
  "id":619408380,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2MTk0MDgzODA=",
  "number":5,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Support XRootD URLs with multiple servers.",
  "updated_at":"2024-01-30T16:04:35Z",
  "user":"MDQ6VXNlcjUyMjA1MzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-16T16:34:21Z",
  "comments":0,
  "created_at":"2020-05-16T15:10:01Z",
  "draft":false,
  "id":619495234,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDE4OTgwNzA1",
  "number":6,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-16T16:34:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add a notification queue as an argument to `chunks`.",
  "updated_at":"2020-05-16T16:34:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-16T18:39:01Z",
  "comments":0,
  "created_at":"2020-05-16T16:37:47Z",
  "draft":false,
  "id":619511200,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDE4OTkxODIw",
  "number":7,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-16T18:39:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Sources should have a 'chunk' method to get a single chunk synchronously.",
  "updated_at":"2020-05-16T18:39:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-19T19:11:57Z",
  "comments":0,
  "created_at":"2020-05-17T11:02:22Z",
  "draft":false,
  "id":619672780,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDE5MDk2MjI2",
  "number":8,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-19T19:11:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start interpreting TFiles.",
  "updated_at":"2020-05-19T19:12:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-19T22:03:16Z",
  "comments":0,
  "created_at":"2020-05-19T19:13:14Z",
  "draft":false,
  "id":621220629,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDIwMzEyNjI2",
  "number":9,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-19T22:03:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Nested directories and the 'uproot.open' function.",
  "updated_at":"2020-05-19T22:03:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-21T16:03:52Z",
  "comments":0,
  "created_at":"2020-05-20T15:41:53Z",
  "draft":false,
  "id":621865983,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDIwODM0OTky",
  "number":10,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-21T16:03:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start streamers: deserializing them into objects on demand.",
  "updated_at":"2020-05-21T16:04:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-25T13:13:24Z",
  "comments":0,
  "created_at":"2020-05-21T16:08:18Z",
  "draft":false,
  "id":622610108,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDIxNDQyNDU1",
  "number":11,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-25T13:13:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Generate classes from streamers, versioning, and reuse them between files.",
  "updated_at":"2020-05-25T13:13:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Miniconda is already installed in GHA. You may need https://github.com/scikit-hep/vector/blob/60d3637efc98ecf53665ea6e81198bc4d77827d8/.github/workflows/ci.yml#L57\r\nbut I don't think you need to depend on a custom action.\r\n\r\nhttps://github.com/scikit-hep/uproot4/blob/4cd75f06218cf381e5906876e6b0b50b9dd9ca82/.github/workflows/build-test.yml#L21",
  "closed_at":"2020-06-02T13:59:02Z",
  "comments":3,
  "created_at":"2020-05-21T23:00:18Z",
  "id":622840318,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2MjI4NDAzMTg=",
  "number":12,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Simplify GHA conda",
  "updated_at":"2020-06-02T13:59:03Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-28T12:05:12Z",
  "comments":2,
  "created_at":"2020-05-28T12:02:54Z",
  "draft":false,
  "id":626453615,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDI0NDQwNzYx",
  "number":13,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-28T12:05:12Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add RNTuple anchor, with test.",
  "updated_at":"2020-05-28T13:54:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-28T23:45:59Z",
  "comments":0,
  "created_at":"2020-05-28T13:05:05Z",
  "draft":false,
  "id":626492692,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDI0NDcyOTEz",
  "number":14,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-28T23:45:59Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Read all TTree versions",
  "updated_at":"2020-05-28T23:46:01Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-29T12:31:01Z",
  "comments":0,
  "created_at":"2020-05-29T11:31:38Z",
  "draft":false,
  "id":627201153,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDI1MDQ5ODg2",
  "number":15,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-29T12:31:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Separate the object_cache and array_cache.",
  "updated_at":"2020-05-29T12:31:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-05-30T17:37:18Z",
  "comments":0,
  "created_at":"2020-05-29T19:10:00Z",
  "draft":false,
  "id":627478518,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDI1Mjc2NjAz",
  "number":16,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-05-30T17:37:18Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start work on interpretations; read at least one basket.",
  "updated_at":"2020-05-30T17:37:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-06-02T00:40:39Z",
  "comments":0,
  "created_at":"2020-06-01T13:05:12Z",
  "draft":false,
  "id":628423153,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDI1OTY3MTA0",
  "number":17,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-06-02T00:40:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Multi-basket, multi-branch fetch.",
  "updated_at":"2020-06-02T00:40:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-06-03T00:23:50Z",
  "comments":0,
  "created_at":"2020-06-02T11:26:55Z",
  "draft":false,
  "id":629125820,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDI2NTIzMjgx",
  "number":18,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-06-03T00:23:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fill out the array-fetching interface.",
  "updated_at":"2020-06-03T00:23:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-06-04T18:25:03Z",
  "comments":11,
  "created_at":"2020-06-03T17:21:03Z",
  "draft":false,
  "id":630178853,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDI3MzQ2NDI2",
  "number":19,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-06-04T18:25:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixing bugs for HATS.",
  "updated_at":"2020-06-04T18:25:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Testing built-in conda.",
  "closed_at":"2020-06-04T19:18:14Z",
  "comments":2,
  "created_at":"2020-06-04T13:44:27Z",
  "draft":true,
  "id":630838379,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDI3ODUwMDQ0",
  "number":20,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"[DO NOT MERGE] Adding test of conda envs",
  "updated_at":"2020-06-04T19:18:19Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is the recommended way to activate conda, and does use the built-in conda automatically (for the last few weeks or months). You can also cache a more complex environment now (not done in this cleanup).\r\n\r\nIt would probably be better to add a (test) environment.yml for testing instead of manual conda and pip installs.\r\n\r\nPS: Default env name is `test`, we can rename to `testing` if there's a reason to do so, though.",
  "closed_at":"2020-06-04T19:00:26Z",
  "comments":1,
  "created_at":"2020-06-04T18:41:49Z",
  "draft":false,
  "id":631063964,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDI4MDIxNTQ3",
  "number":21,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-06-04T19:00:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Simplify Conda activate",
  "updated_at":"2020-06-04T19:00:31Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Main new design consideration: the list of strings should be interpreted as expressions to compute _first_ and the role of wildcard branch selection should belong to `filter_names`.",
  "closed_at":"2020-06-17T01:13:23Z",
  "comments":0,
  "created_at":"2020-06-16T16:58:17Z",
  "draft":false,
  "id":639828942,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDM1MzQ4OTk2",
  "number":22,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-06-17T01:13:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Make the multi-branch 'arrays' function stable.",
  "updated_at":"2020-06-17T01:13:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-06-17T23:40:56Z",
  "comments":1,
  "created_at":"2020-06-17T10:39:37Z",
  "draft":false,
  "id":640336504,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDM1NzYzMDEy",
  "number":23,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-06-17T23:40:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Develop more interpretations.",
  "updated_at":"2020-06-17T23:41:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Since this comes after reading and writing, it's a few steps removed.\r\n\r\nHowever, I think that the histogram objects in Uproot4 will not be usable as such, but will consist entirely of conversion methods to NumPy-style, boost-histogram, and hist. They should reuse code as much as possible, so it might be hist-by-way-of-boost-histogram and/or aghast.\r\n\r\nMentioning @henryiii and @LovelyBuggies.",
  "closed_at":"2020-07-11T18:44:26Z",
  "comments":1,
  "created_at":"2020-06-18T01:55:52Z",
  "id":640848153,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NDA4NDgxNTM=",
  "number":24,
  "performed_via_github_app":null,
  "reactions":{
   "eyes":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Thoughts about Uproot4 \u2194 boost-histogram/hist integration",
  "updated_at":"2020-07-11T18:44:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This will take some thought, and it will come after the two reading projects.\r\n\r\nFor now, though, I should bring this to @reikdas's attention.",
  "closed_at":"2021-08-30T21:59:25Z",
  "comments":20,
  "created_at":"2020-06-18T01:56:51Z",
  "id":640848458,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NDA4NDg0NTg=",
  "number":25,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Thoughts about porting Uproot3 writing to Uproot4",
  "updated_at":"2021-08-30T21:59:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"... but these do happen in real data, often from files created by an unreleased version of ROOT. I suspect that's what happened with demo-double32.root. (I might have made it while collaborating with Brian; my ROOT had TIOFeatures but an old TBranch class version.) Uproot3 reads this TTree with no problem because it imports and uses the wrong streamer from the file; Uproot4 fails because its expected streamer (the \"right\" one) doesn't match the data.\r\n\r\nFailed endcheck or read off end of chunk should trigger an attempt to read the streamer and try again (once). This would require a custom Exception for these cases and retry logic in the TKey.get. Test case: demo-double32.root. Preferably, it should use a local `classes` dict.\r\n\r\nEven if a read finally fails (can't find a good streamer or even the streamer from the file doesn't work), these two error cases should be reported to the user as \"failed deserialization,\" rather than \"endcheck size didn't match\" or \"attempting to read beyond end of chunk.\" These are very common symptoms of deserialization failures and are frequently reported with confusion in the Issues.\r\n\r\nMaybe I should also add breadcrumbs to pinpoint the location of the failure. Beyond being more self-explanatory for users, this could be an investment in developing more deserializers because I wouldn't have to spend the time searching for the point of error.",
  "closed_at":"2020-06-18T16:37:42Z",
  "comments":0,
  "created_at":"2020-06-18T11:45:47Z",
  "id":641141222,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NDExNDEyMjI=",
  "number":26,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Predefined classes are preventing \"wrong\" class/streamer versions from being read",
  "updated_at":"2020-06-18T16:37:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Maybe this can be done without actually looking at the streamers. It might depend on whether the data are inside an object or at top-level: I think that objects always need the equivalent of Uproot3's `TTree.attachstreamers`.",
  "closed_at":"2020-06-26T00:56:42Z",
  "comments":0,
  "created_at":"2020-06-18T11:48:37Z",
  "id":641142789,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NDExNDI3ODk=",
  "number":27,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Streamer-based strings and STL strings.",
  "updated_at":"2020-06-26T00:56:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"   * [x] Reproduce the failure in demo-double32.root without trying to read Double32. (Just load TTree metadata.)\r\n   * [x] Add breadcrumbs to know where we are in the deserialization process. (Perhaps in `context`.)\r\n   * [x] Create a new exception for deserialization failures and include the breadcrumbs in the message.\r\n   * [x] Ensure that it's possible to locally override the `classes` dict.\r\n   * [x] Catch that new exception in `TKey.get` and fallback to reading the streamer before actually giving up.\r\n   * [x] The demo-double32.root example should then work. That's the end: close PR and move on!",
  "closed_at":"2020-06-18T16:37:42Z",
  "comments":0,
  "created_at":"2020-06-18T12:02:22Z",
  "draft":false,
  "id":641150961,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDM2NDI1ODgz",
  "number":28,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-06-18T16:37:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fallback to reading streamer and raise better error messages on true failures.",
  "updated_at":"2020-06-18T16:37:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-06-20T01:55:01Z",
  "comments":0,
  "created_at":"2020-06-18T16:41:58Z",
  "draft":false,
  "id":641377669,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDM2NjE3MTY0",
  "number":29,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-06-20T01:55:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implement STL containers",
  "updated_at":"2020-06-20T01:55:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjE4NTI0NDc=",
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Attach streamers to branches, but only for non-trivial types. (Avoid reading any streamers, if possible.)\r\n\r\nMay be necessary for #27.",
  "closed_at":"2020-06-26T00:56:43Z",
  "comments":0,
  "created_at":"2020-06-18T16:42:40Z",
  "id":641378343,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NDEzNzgzNDM=",
  "number":30,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Implement attachment of streamers to branches",
  "updated_at":"2020-06-26T00:56:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Using stl_containers.root, which is being developed in scikit-hep/scikit-hep-testdata/pull/35.",
  "closed_at":"2020-06-26T00:56:43Z",
  "comments":0,
  "created_at":"2020-06-23T12:50:55Z",
  "draft":false,
  "id":643815596,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDM4NTQ5NzEx",
  "number":31,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-06-26T00:56:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Test STL containers.",
  "updated_at":"2020-06-26T00:56:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"For these reasons.\r\n\r\nhttps://github.com/scikit-hep/scikit-hep-testdata/pull/33#issuecomment-648090503",
  "closed_at":"2020-08-31T19:48:15Z",
  "comments":1,
  "created_at":"2020-06-26T01:08:54Z",
  "id":645939354,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NDU5MzkzNTQ=",
  "number":32,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Deploy a wheel, not just an sdist tarball.",
  "updated_at":"2020-08-31T19:48:15Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-06-27T00:51:56Z",
  "comments":0,
  "created_at":"2020-06-26T11:07:35Z",
  "draft":false,
  "id":646187432,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDQwNTIzODI0",
  "number":33,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-06-27T00:51:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"AsObjects.simplify, leaf-lists, and test Double32.",
  "updated_at":"2020-06-27T00:51:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-02T03:54:08Z",
  "comments":0,
  "created_at":"2020-06-29T14:51:41Z",
  "draft":false,
  "id":647442047,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDQxNDY4MDM2",
  "number":34,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-02T03:54:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"AsStridedObjects, such as TLorentzVectors",
  "updated_at":"2020-07-02T03:54:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-02T23:21:26Z",
  "comments":1,
  "created_at":"2020-07-02T16:23:15Z",
  "draft":false,
  "id":650059390,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDQzNjIyOTE5",
  "number":35,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-02T23:21:26Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Last data type/interpretation features before moving on to iteration.",
  "updated_at":"2020-07-02T23:21:29Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"In [this scan](https://github.com/scikit-hep/uproot4/pull/35#issuecomment-653114941), Python 2.6 somehow got off track and was killed (memory error) for these files:\r\n\r\n- issue390.root\r\n- issue465-flat.root\r\n- issue433-splitlevel2.root\r\n- issue213.root\r\n- issue452.root\r\n- issue431b.root\r\n- issue126b.root\r\n- issue126a.root\r\n- issue407.root\r\n\r\nI don't know if the same is true for Python 2.7. It happens when deserializing the TTree metadata (not even reading arrays); the TObjArray of TBranches (second level) reads a huge number as its length and somehow doesn't stop attempting to read. Deserialization logic doesn't sound like a Python 2 vs 3 thing, which is why it's relevant (Python 2 isn't, by itself, relevant): it could be a deeper bug.\r\n\r\nIt's possible that these get off track in Python 3 as well\u2014there are plenty of TTree/TBranch/TLeaf objects out there that don't match ROOT's standard streamers, but are correct according to their own streamers. For this, Uproot first attempts to use the standard streamer, then falls back on reading the file's streamer and using those (once). Python 2 could be failing to fall back.\r\n\r\nBut you'd think it would hit the end of its (very limited) chunk and raise the error there, instead of running wild. Maybe old NumPy (1.10.4) has different slice semantics and the chunk sizes aren't limited? If so, then it's just a question of finding when that changed and declaring that the minimum NumPy.",
  "closed_at":"2020-08-31T19:37:34Z",
  "comments":0,
  "created_at":"2020-07-02T17:18:18Z",
  "id":650090713,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NTAwOTA3MTM=",
  "number":36,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Possible bug or old version incompatibility, depending on how deep it goes",
  "updated_at":"2020-08-31T19:37:34Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Write _split_ `std::map` and invoke reading at the structural branch level. The branch-joining logic will need to be used at both `TBranch.array` and `HasBranches.arrays`.\r\n\r\nTest it for the new-style Lorentz vectors, too.",
  "closed_at":"2020-10-30T21:39:20Z",
  "comments":1,
  "created_at":"2020-07-02T23:16:21Z",
  "id":650249795,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NTAyNDk3OTU=",
  "number":37,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Branch-joining logic for parent branches (Awkward Arrays only?)",
  "updated_at":"2020-10-30T21:39:20Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Consider the weird serialization in scikit-hep/uproot#373, scikit-hep/uproot#374, scikit-hep/uproot#403, scikit-hep/uproot#475, and scikit-hep/uproot#495. It's field-at-a-time inside of each entry. I had thought it was Boost-inside-ROOT, but not for most of the above. It may be some ROOT serialization mode that I'm unaware of.",
  "closed_at":null,
  "comments":21,
  "created_at":"2020-07-02T23:17:06Z",
  "id":650250029,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NTAyNTAwMjk=",
  "number":38,
  "performed_via_github_app":null,
  "reactions":{
   "+1":2,
   "total_count":2
  },
  "state":"open",
  "state_reason":null,
  "title":"Handle ROOT's memberwise splitting",
  "updated_at":"2024-01-30T16:12:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Use Zmumu and HZZ. (The \"sample*.root\" files are too small to actually be compressed.)",
  "closed_at":"2021-08-30T22:01:12Z",
  "comments":1,
  "created_at":"2020-07-02T23:17:30Z",
  "id":650250155,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NTAyNTAxNTU=",
  "number":39,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Test all compression algorithms",
  "updated_at":"2021-08-30T22:01:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"mc10events.root doesn't have it, but some other samples do; see [this for searching](https://github.com/scikit-hep/uproot4/pull/35#issuecomment-653114941).",
  "closed_at":null,
  "comments":0,
  "created_at":"2020-07-02T23:18:26Z",
  "id":650250440,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NTAyNTA0NDA=",
  "number":40,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"open",
  "state_reason":null,
  "title":"Implement std::bitset",
  "updated_at":"2020-08-31T21:02:00Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":null,
  "closed_at":"2024-01-30T15:52:51Z",
  "comments":1,
  "created_at":"2020-07-02T23:18:44Z",
  "id":650250525,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NTAyNTA1MjU=",
  "number":41,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Port most of the tests from the old test_issues.py",
  "updated_at":"2024-01-30T15:52:51Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hello! I am analyzing a TTree where one branch is of type std::vector<vector<float>> is not being read. `file_str` is the ROOT file:\r\n\r\n`ttree1 = uproot4.open(file_str)[\"CharmAnalysis\"]`\r\n`ttree1[\"TruthParticles_Selected_daughterInfoT__eta\"].array()`\r\n\r\nHere is the full stack trace:\r\n\r\n```---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<timed eval> in <module>\r\n\r\n~/.local/cori/3.7-anaconda-2019.07/lib/python3.7/site-packages/uproot4/behaviors/TBranch.py in array(self, interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, array_cache, library)\r\n   1284             interpretation_executor,\r\n   1285             library,\r\n-> 1286             arrays,\r\n   1287         )\r\n   1288 \r\n\r\n~/.local/cori/3.7-anaconda-2019.07/lib/python3.7/site-packages/uproot4/behaviors/TBranch.py in _ranges_or_baskets_to_arrays(hasbranches, ranges_or_baskets, branchid_interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, library, arrays)\r\n    493 \r\n    494         elif isinstance(obj, tuple) and len(obj) == 3:\r\n--> 495             uproot4.source.futures.delayed_raise(*obj)\r\n    496 \r\n    497         else:\r\n\r\n~/.local/cori/3.7-anaconda-2019.07/lib/python3.7/site-packages/uproot4/source/futures.py in delayed_raise(exception_class, exception_value, traceback)\r\n     31         exec(\"raise exception_class, exception_value, traceback\")\r\n     32     else:\r\n---> 33         raise exception_value.with_traceback(traceback)\r\n     34 \r\n     35 \r\n\r\n~/.local/cori/3.7-anaconda-2019.07/lib/python3.7/site-packages/uproot4/behaviors/TBranch.py in basket_to_array(basket)\r\n    467                     branch.entry_offsets,\r\n    468                     library,\r\n--> 469                     branch,\r\n    470                 )\r\n    471         except Exception:\r\n\r\n~/.local/cori/3.7-anaconda-2019.07/lib/python3.7/site-packages/uproot4/interpretation/objects.py in final_array(self, basket_arrays, entry_start, entry_stop, entry_offsets, library, branch)\r\n    218                 for global_i in range(start, stop):\r\n    219                     local_i = global_i - start\r\n--> 220                     output[global_i - entry_start] = basket_array[local_i]\r\n    221 \r\n    222             start = stop\r\n\r\n~/.local/cori/3.7-anaconda-2019.07/lib/python3.7/site-packages/uproot4/interpretation/objects.py in __getitem__(self, where)\r\n     67         if uproot4._util.isint(where):\r\n     68             byte_start = self._byte_offsets[where]\r\n---> 69             byte_stop = self._byte_offsets[where + 1]\r\n     70             data = self._byte_content[byte_start:byte_stop]\r\n     71             chunk = uproot4.source.chunk.Chunk.wrap(self._branch.file.source, data)\r\n\r\nIndexError: index 12344 is out of bounds for axis 0 with size 12344```",
  "closed_at":"2020-07-05T14:28:55Z",
  "comments":2,
  "created_at":"2020-07-04T05:05:33Z",
  "id":650828597,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NTA4Mjg1OTc=",
  "number":42,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"std::vector<vector<float>> not correctly being read in .array() method",
  "updated_at":"2020-07-05T14:57:29Z",
  "user":"MDQ6VXNlcjUzNjI4ODUz"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-07T13:08:40Z",
  "comments":0,
  "created_at":"2020-07-06T16:50:18Z",
  "draft":false,
  "id":651683795,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDQ0ODkyMzA0",
  "number":43,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-07T13:08:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start working on the iterate method and function.",
  "updated_at":"2020-07-07T13:08:53Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-07T18:33:35Z",
  "comments":0,
  "created_at":"2020-07-07T13:14:09Z",
  "draft":false,
  "id":652312635,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDQ1NDA1MDM5",
  "number":44,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-07T18:33:35Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Introduce a concatenate function to relieve user-pressure on lazyarrays for cases it isn't intended for.",
  "updated_at":"2020-07-07T18:33:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-09T01:48:38Z",
  "comments":0,
  "created_at":"2020-07-08T15:21:53Z",
  "draft":false,
  "id":653386276,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDQ2MzE1Mzc2",
  "number":45,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-09T01:48:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start implementing lazy arrays.",
  "updated_at":"2020-07-09T01:48:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-10T19:28:15Z",
  "comments":0,
  "created_at":"2020-07-09T13:18:25Z",
  "draft":false,
  "id":654053843,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDQ2ODU0OTgw",
  "number":46,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-10T19:28:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Connect to boost-histogram and hist.",
  "updated_at":"2020-07-10T19:28:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"It seems that `file_object_path_split` is splitting on the colon between the server name and the file path.",
  "closed_at":"2020-07-11T20:16:48Z",
  "comments":1,
  "created_at":"2020-07-10T19:20:50Z",
  "id":654987308,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NTQ5ODczMDg=",
  "number":47,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Test a URL with an HTTP port number",
  "updated_at":"2020-07-11T20:16:48Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-11T20:16:49Z",
  "comments":0,
  "created_at":"2020-07-11T04:16:25Z",
  "draft":false,
  "id":655130396,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDQ3NzE2MjU3",
  "number":48,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-11T20:16:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Bug-fixes for the PyHEP tutorial.",
  "updated_at":"2020-07-11T20:17:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-17T18:42:14Z",
  "comments":0,
  "created_at":"2020-07-12T16:14:15Z",
  "draft":false,
  "id":655429504,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDQ3OTIxMDUw",
  "number":49,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-17T18:42:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Make to_numpy match boost-histogram's flow=False default (and mplhep's expectation).",
  "updated_at":"2020-07-17T18:42:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"In https://github.com/scikit-hep/boost-histogram/issues/410, @HDembinski requested that I add an underscore to `sum_of_weighted_deltas_squared`, and this has broken Uproot's `to_boost()` method on TProfiles.\r\n\r\nNow when reading a TProfile, we get the error:\r\n\r\n```\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-10-d946cc02fe81> in <module>\r\n----> 1 mplhep.histplot(rfile['hprof;1'].to_boost())\r\n\r\n/usr/local/Caskroom/miniconda/base/envs/bh-talk/lib/python3.8/site-packages/uproot4/behaviors/TProfile.py in to_boost(self)\r\n    178         view.sum_of_weights_squared\r\n    179         view.value = values\r\n--> 180         view.sum_of_weighted_deltas_squared\r\n    181 \r\n    182         raise NotImplementedError(repr(self))\r\n\r\nAttributeError: 'WeightedMeanView' object has no attribute 'sum_of_weighted_deltas_squared'\r\n```",
  "closed_at":"2020-10-30T21:40:47Z",
  "comments":8,
  "created_at":"2020-07-16T23:36:06Z",
  "id":658665723,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NTg2NjU3MjM=",
  "number":50,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Support for boost-histogram 0.10.0",
  "updated_at":"2020-10-30T21:47:29Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"I have flat ntuples containing `std::vector` of:\r\n1. `ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>`\r\n2. `ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>`\r\n3. `ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >`\r\n\r\nuproot4 seems to be choking badly on these classes. Can you please take a look and make sure that it is able to handle these? An example file can be found at /uscms_data/d2/aperloff/YOURWORKINGAREA/SUSY/slc7/CMSSW_10_2_21/src/TreeMaker/Production/test/SplitLevelTest/Summer16v3.TTJets_SingleLeptFromT_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_split99Lorentz_RA2AnalysisTree.root.\r\n\r\nI tried exploring the file with:\r\n```python\r\nimport uproot4\r\nf = uproot4.open(\"/uscms_data/d2/aperloff/YOURWORKINGAREA/SUSY/slc7/CMSSW_10_2_21/src/TreeMaker/Production/test/SplitLevelTest/Summer16v3.TTJets_SingleLeptFromT_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_split99Lorentz_RA2AnalysisTree.root\")\r\nt = f[\"TreeMaker2/PreSelection\"]\r\nt.show()\r\n```\r\n\r\nMost of the branches look as expected, but the ROOT::Math::LorentzVector branches have:\r\n```bash\r\nElectrons            | std::vector<ROOT::Ma | AsObjects(AsVector(True, Unknown_R\r\n```\r\nI have turned the split level to 99, so I would expect these to be `AsJagged` and not `AsObjects`. Also, use the `Unknown_R` thing going to be a problem? Even worse, the whole thing crashes on `ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>` with two errors:\r\n1. `uproot4.interpretation.identify.NotNumerical`\r\n2. `ValueError: invalid C++ type name syntax at char 68`\r\n\r\nA full log has been attached.\r\n[uproot4crash.log](https://github.com/scikit-hep/uproot4/files/4938146/uproot4crash.log)\r\n",
  "closed_at":"2020-07-17T18:37:15Z",
  "comments":5,
  "created_at":"2020-07-17T13:51:41Z",
  "id":659274385,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NTkyNzQzODU=",
  "number":51,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Trouble with modern LorentzVector classes",
  "updated_at":"2020-07-17T18:37:15Z",
  "user":"MDQ6VXNlcjQ4MDgxMDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-17T18:37:15Z",
  "comments":0,
  "created_at":"2020-07-17T14:17:20Z",
  "draft":false,
  "id":659293655,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDUxMTU2MDA5",
  "number":52,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-17T18:37:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Parse multi-argument templates beyond just std::map.",
  "updated_at":"2020-07-17T18:37:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-20T01:08:53Z",
  "comments":0,
  "created_at":"2020-07-19T22:20:36Z",
  "draft":false,
  "id":661108211,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDUyODEwMDM2",
  "number":53,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-20T01:08:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Model.parent should point to the concrete instance, not the objects referring to base class data.",
  "updated_at":"2020-07-20T01:09:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"I think I may have found a bug.\r\nDuring skimming, I store quantities as std::vector<float> and write those into the root tree. However, when using uproot4 and doing something like\r\n`uproot4.open(\"Test_1.root\")[\"Events\"][\"Muon_Pt\"].array()`\r\nI get the following error:\r\n`Traceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/nfs/dust/cms/user/wiens/anaconda3/envs/hepML/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 1548, in array\r\n    _ranges_or_baskets_to_arrays(\r\n  File \"/nfs/dust/cms/user/wiens/anaconda3/envs/hepML/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 509, in _ranges_or_baskets_to_arrays\r\n    uproot4.source.futures.delayed_raise(*obj)\r\n  File \"/nfs/dust/cms/user/wiens/anaconda3/envs/hepML/lib/python3.8/site-packages/uproot4/source/futures.py\", line 33, in delayed_raise\r\n    raise exception_value.with_traceback(traceback)\r\n  File \"/nfs/dust/cms/user/wiens/anaconda3/envs/hepML/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 451, in basket_to_array\r\n    interpretation = branchid_interpretation[id(branch)]\r\nKeyError: 139865518582800\r\n`\r\nDoing the exact same thing but using uproot (i.e. uproot3) instead it just works.",
  "closed_at":"2020-07-20T16:36:21Z",
  "comments":9,
  "created_at":"2020-07-20T15:38:54Z",
  "id":661964699,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NjE5NjQ2OTk=",
  "number":54,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Internal error while coordinating basket-reads for a branch",
  "updated_at":"2020-07-20T16:36:22Z",
  "user":"MDQ6VXNlcjI5NTQ1MDI0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-20T16:49:05Z",
  "comments":0,
  "created_at":"2020-07-20T16:14:52Z",
  "draft":false,
  "id":662001606,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDUzNjA1MjQ3",
  "number":55,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-20T16:49:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Replace id(branch) with branch.cache_key when coordinating basket-reads.",
  "updated_at":"2020-07-20T16:49:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"And use this option in `__deepcopy__` and when handing objects to boost-histogram/hist. It should have the `file_path` and `uuid`, or at least for the latter set the `object_path` and `cache_key` in a permanent way.\r\n\r\n@henryiii ",
  "closed_at":"2020-08-26T19:48:46Z",
  "comments":4,
  "created_at":"2020-07-23T11:52:38Z",
  "id":664412130,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NjQ0MTIxMzA=",
  "number":56,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add ability to break file connection in objects",
  "updated_at":"2020-08-26T19:48:47Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":"MDQ6VXNlcjUyMjA1MzM=",
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"`get_server_config` queries some parameters for vector reading\r\n\r\nhttps://github.com/scikit-hep/uproot4/blob/73d103dd5588bdf478937e475007fabd1a5803ec/uproot4/source/xrootd.py#L32-L41\r\n\r\nnot all storage elements seem to be reporting this correctly (seems those that use dCache) - they just report back the name of the parameter, e.g.\r\n\r\n```pycon\r\n>>> import XRootD.client\r\n>>> fs = XRootD.client.FileSystem(\"root://prometheus.desy.de:1094/\")\r\n>>> fs.query(XRootD.client.flags.QueryCode.CONFIG, \"readv_iov_max\")\r\n(<status: 0, code: 0, errno: 0, message: '[SUCCESS] ', shellcode: 0, error: False, fatal: False, ok: True>, b'readv_iov_max\\n')\r\n```\r\n\r\nUnfortunately i can't give a minimal reproducer with opening a root file since i couldn't find publicly accessible root files on any of these storages, but essentially it breaks when trying to convert this value to an int (the follwing works with access to ATLAS VO)\r\n\r\n```pycon\r\n>>> import uproot4\r\n>>> f = uproot4.open(\"root://lcg-lrz-rootd.grid.lrz.de:1094/pnfs/lrz-muenchen.de/data/atlas/dq2/atlaslocalgroupdisk/rucio/data15_13TeV/f4/ba/DAOD_PHYSLITE.21568620._000001.pool.root.1\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/nikolai/python/uproot4/uproot4/reading.py\", line 80, in open\r\n    file = ReadOnlyFile(\r\n  File \"/home/nikolai/python/uproot4/uproot4/reading.py\", line 139, in __init__\r\n    self._source = Source(file_path, **self._options)\r\n  File \"/home/nikolai/python/uproot4/uproot4/source/xrootd.py\", line 182, in __init__\r\n    self._max_num_elements, self._max_element_size = get_server_config(file_path)\r\n  File \"/home/nikolai/python/uproot4/uproot4/source/xrootd.py\", line 37, in get_server_config\r\n    readv_iov_max = int(readv_iov_max)\r\nValueError: invalid literal for int() with base 10: b'readv_iov_max\\n'\r\n```\r\nSo some kind of fallback (default value that is configurable if needed?) would be needed to support these storages for now.",
  "closed_at":"2020-07-24T13:44:42Z",
  "comments":1,
  "created_at":"2020-07-23T12:52:35Z",
  "id":664448917,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NjQ0NDg5MTc=",
  "number":57,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"XRootDResource relies on querying parameters which is not supported by all storage elements",
  "updated_at":"2020-07-24T13:44:42Z",
  "user":"MDQ6VXNlcjM3MDcyMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-07-23T21:47:03Z",
  "comments":5,
  "created_at":"2020-07-23T17:17:26Z",
  "draft":false,
  "id":664641650,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDU1ODQ5Njg0",
  "number":58,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-23T21:47:03Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Detach live, readable file objects from Model instances, replacing them with static DetachedFile objects.",
  "updated_at":"2020-07-23T21:47:06Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Apologies this PR grew a little as I wrote it, the commits should be self contained and easy to review individually. If you'd rather not have any of them (especially 52aa7f4 and a68a6bd) I'll rebase that commit out of the history.\r\n\r\nIn summary:\r\n* Adds an extra to `setup.py` so `pip install -e .[testing]` allows the tests to be ran fully\r\n* Makes some minor corrections to the test dependencies and what is used in `importorskip`\r\n* Replaces `pyxrootd` with `XRootD` as `pyxrootd` is more of a private implementation detail that should be prefixed with an underscore\r\n* Avoids a deadlock on exit (https://github.com/scikit-hep/uproot/issues/504) by using an `atexit` handler to cleanup open files (this should be made XRootD version dependent once fixed upstream (https://github.com/xrootd/xrootd/pull/1260)\r\n* Adds a test which leaks an open file to make sure pytest deadlocks if https://github.com/scikit-hep/uproot/issues/504 is an issue\r\n* Improves the XRootD server configuration detection to handle redirectors and locally stored files (https://github.com/scikit-hep/uproot4/issues/57)\r\n\r\nCloses https://github.com/scikit-hep/uproot4/issues/57\r\nCloses https://github.com/scikit-hep/uproot/issues/504",
  "closed_at":"2020-07-24T13:44:42Z",
  "comments":2,
  "created_at":"2020-07-24T09:21:34Z",
  "draft":false,
  "id":665040383,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDU2MTc5MDg0",
  "number":59,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-07-24T13:44:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"XRootD improvements",
  "updated_at":"2020-07-24T14:44:10Z",
  "user":"MDQ6VXNlcjUyMjA1MzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"They are _not_ included in uproot4/interpretation/identity.py::_parse_node.\r\n\r\nFollow scikit-hep/uproot#508.",
  "closed_at":"2020-08-26T23:08:13Z",
  "comments":0,
  "created_at":"2020-07-27T22:37:47Z",
  "id":666627443,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NjY2Mjc0NDM=",
  "number":60,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Handle \"long long\" types",
  "updated_at":"2020-08-26T23:08:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"I took `uproot4` for a spin for the first time and it choked on a call to `arrays()`:\r\n```console\r\n---------------------------------------------------------------------------\r\nKeyInFileError                            Traceback (most recent call last)\r\n~/workspace/hgc_l1_trigger_autoencoder/reco/reco.py in \r\n----> 24 hits.arrays()\r\n\r\n/usr/local/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py in arrays(self, expressions, cut, filter_name, filter_typename, filter_branch, aliases, compute, entry_start, entry_stop, decompression_executor, interpretation_executor, array_cache, library, how)\r\n    914                 return None\r\n    915 \r\n--> 916         aliases = _regularize_aliases(self, aliases)\r\n    917         arrays, expression_context, branchid_interpretation = _regularize_expressions(\r\n    918             self,\r\n\r\n/usr/local/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py in _regularize_aliases(hasbranches, aliases)\r\n    100 def _regularize_aliases(hasbranches, aliases):\r\n    101     if aliases is None:\r\n--> 102         return hasbranches.aliases\r\n    103     else:\r\n    104         new_aliases = dict(hasbranches.aliases)\r\n\r\n/usr/local/lib/python3.8/site-packages/uproot4/behaviors/TTree.py in aliases(self)\r\n     21     @property\r\n     22     def aliases(self):\r\n---> 23         aliases = self.member(\"fAliases\")\r\n     24         if aliases is None:\r\n     25             return {}\r\n\r\n/usr/local/lib/python3.8/site-packages/uproot4/model.py in member(self, name, bases, recursive_bases, none_if_missing)\r\n    288             return None\r\n    289         else:\r\n--> 290             raise uproot4.KeyInFileError(\r\n    291                 name,\r\n    292                 \"\"\"{0}.{1} has only the following members:\r\n\r\nKeyInFileError: not found: 'fAliases' because .Model_TTree_v5 has only the following members:\r\n\r\n    '@fUniqueID', '@fBits', 'fName', 'fTitle', 'fLineColor', 'fLineStyle', 'fLineWidth', 'fFillColor', 'fFillStyle', 'fMarkerColor', 'fMarkerStyle', 'fMarkerSize', 'fEntries', 'fTotBytes', 'fZipBytes', 'fSavedBytes', 'fTimerInterval', 'fScanField', 'fUpdate', 'fMaxEntryLoop', 'fMaxVirtualSize', 'fAutoSave', 'fEstimate', 'fBranches', 'fLeaves', 'fIndexValues', 'fIndex'\r\n\r\nin file ../dat/config1_mu+_95_to_100GeV_4Tesla_t0.root\r\n```\r\n\r\nThe tree looks like:\r\n```console\r\n\r\nhits.show(interpretation_width=50)\r\nname                 | typename             | interpretation                                    \r\n---------------------+----------------------+---------------------------------------------------\r\neventID              | int32_t              | AsDtype('>i4')                                    \r\npdgID                | int32_t              | AsDtype('>i4')                                    \r\ntotalEnergy_GeV      | double               | AsDtype('>f8')                                    \r\nP_X_GeV              | double               | AsDtype('>f8')                                    \r\nP_Y_GeV              | double               | AsDtype('>f8')                                    \r\nP_Z_GeV              | double               | AsDtype('>f8')                                    \r\nbeamX_cm             | double               | AsDtype('>f8')                                    \r\nbeamY_cm             | double               | AsDtype('>f8')                                    \r\nbeamZ_cm             | double               | AsDtype('>f8')                                    \r\nhit_ID               | std::vector<int32_t> | AsJagged(AsDtype('>i4'), header_bytes=10)         \r\nhit_x_cm             | std::vector<double>  | AsJagged(AsDtype('>f8'), header_bytes=10)         \r\nhit_y_cm             | std::vector<double>  | AsJagged(AsDtype('>f8'), header_bytes=10)         \r\nhit_z_cm             | std::vector<double>  | AsJagged(AsDtype('>f8'), header_bytes=10)         \r\nhit_Edep_keV         | std::vector<double>  | AsJagged(AsDtype('>f8'), header_bytes=10)         \r\nhit_EdepNonIonizing_ | std::vector<double>  | AsJagged(AsDtype('>f8'), header_bytes=10)         \r\nhit_TOA_ns           | std::vector<double>  | AsJagged(AsDtype('>f8'), header_bytes=10)         \r\nhit_TOA_last_ns      | std::vector<double>  | AsJagged(AsDtype('>f8'), header_bytes=10)         \r\nhit_type             | std::vector<int32_t> | AsJagged(AsDtype('>i4'), header_bytes=10)         \r\nESum_MeV             | double               | AsDtype('>f8')                                    \r\nCOG_Z_cm             | double               | AsDtype('>f8')                                    \r\nNHits                | int32_t              | AsDtype('>i4')\r\n```\r\n\r\nOne fishy thing is that any call of the form `hist[col_name].array()` is perfectly fine, but `hist.arrays([col1, col2])` fails.\r\n\r\nSo, I tried to make a MWE, but unfortunately it fails to reproduce so I wonder about the root of the issue:\r\n```python\r\n#%%\r\nfrom ROOT import TFile, TTree\r\nfrom array import array\r\n\r\nf = TFile('foo.root','recreate')\r\nt = TTree('foo','foo')\r\nmaxn = 10\r\nn = array('i',[0])\r\nd = array('f',maxn*[0.])\r\nt.Branch('mynum',n,'mynum/I')\r\nt.Branch('myval',d,'myval[mynum]/D')\r\n\r\nfor i in range(25):\r\n    n[0] = min(i,maxn)\r\n    for j in range(n[0]):\r\n        d[j] = i*0.1+j\r\n        t.Fill()\r\n\r\nf.Write()\r\nf.Close()\r\n\r\n# %%\r\nimport uproot4 as ur\r\n\r\n#%%\r\nt = ur.open('./foo.root:foo')\r\n\r\n# %%\r\nt.show()\r\n\r\n# %%\r\nt.arrays(library='pd')\r\n```\r\n\r\nThis example's `show()` yields:\r\n```console\r\nname                 | typename             | interpretation                    \r\n---------------------+----------------------+-----------------------------------\r\nmynum                | int32_t              | AsDtype('>i4')                    \r\nmyval                | double[]             | AsJagged(AsDtype('>f8'))\r\n```\r\n \r\nI've noticed a couple of differences between the failing and passing cases:\r\n- Failing is coming from C++, while passing is all Python,\r\n- Failing uses `std::vector<>`, while passing uses `array`,\r\n- Failing prints `AsJagged(AsDtype('>f8'), header_bytes=10) `, while passing has just `AsJagged(AsDtype('>f8'))`, i.e. no `header_bytes=10`.\r\n\r\nLet me know if any of this is helpful and whether I can help making better sense of it.",
  "closed_at":"2020-07-28T13:50:37Z",
  "comments":2,
  "created_at":"2020-07-28T11:27:57Z",
  "id":666997792,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NjY5OTc3OTI=",
  "number":61,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Non-existent aliases tripping up arrays()?",
  "updated_at":"2020-07-28T14:18:52Z",
  "user":"MDQ6VXNlcjQyNTY0Njk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Faster handling of the data masking required when header bytes are present.\r\nSpeeds up the reading of large std::vectors especially with multiple cores because the GIL usage is reduced.",
  "closed_at":"2020-08-03T18:37:29Z",
  "comments":1,
  "created_at":"2020-08-03T17:13:02Z",
  "draft":false,
  "id":672220537,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDYyMjk2ODcx",
  "number":62,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-03T18:37:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"optimize handling of header bytes",
  "updated_at":"2020-08-03T18:37:29Z",
  "user":"MDQ6VXNlcjQ5MjA3OTg="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-08-08T03:55:56Z",
  "comments":0,
  "created_at":"2020-08-08T03:47:06Z",
  "draft":false,
  "id":675420031,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDY0OTQ2MDk0",
  "number":63,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-08T03:55:56Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix some more NumPy 'tostring' -> 'tobytes' warnings.",
  "updated_at":"2020-08-08T03:55:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Using uproot4 v'0.0.16', when trying to read a tree that was copied from another file (may be coincidental - just including all details), I receive the following traceback:\r\n\r\n```\r\n>>> import uproot4 as uproot\r\n>>> f = uproot.open(\"AnalysisResults.root\")\r\n>>> f.keys()\r\n['AliAnalysisTask;3']\r\n>>> f[\"AliAnalysisTask\"]\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/reading.py\", line 1371, in __getitem__\r\n    return self.key(where).get()\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/reading.py\", line 870, in get\r\n    out = cls.read(chunk, cursor, context, self._file, self)\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/model.py\", line 478, in read\r\n    versioned_cls.read(chunk, cursor, context, file, parent, concrete=concrete),\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/model.py\", line 123, in read\r\n    self.read_members(chunk, cursor, context)\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/models/TTree.py\", line 665, in read_members\r\n    chunk, cursor, context, self._file, self._concrete\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/model.py\", line 123, in read\r\n    self.read_members(chunk, cursor, context)\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/models/TObjArray.py\", line 42, in read_members\r\n    chunk, cursor, context, self._file, self._parent\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/deserialization.py\", line 280, in read_object_any\r\n    obj = cls.read(chunk, cursor, context, file, parent)\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/model.py\", line 478, in read\r\n    versioned_cls.read(chunk, cursor, context, file, parent, concrete=concrete),\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/model.py\", line 123, in read\r\n    self.read_members(chunk, cursor, context)\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/models/TBranch.py\", line 626, in read_members\r\n    concrete=self._concrete,\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/model.py\", line 123, in read\r\n    self.read_members(chunk, cursor, context)\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/models/TBranch.py\", line 296, in read_members\r\n    cursor.skip_over(chunk, context)\r\n  File \"/alf/data/rehlers/substructure/.venv/lib/python3.7/site-packages/uproot4/source/cursor.py\", line 152, in skip_over\r\n    \"Cursor.skip_over can only be used on an object with non-null \"\r\nTypeError: Cursor.skip_over can only be used on an object with non-null `num_bytes`\r\n```\r\n\r\nI can read the tree just fine in root v6.20/02 (+ some alice patches). I can send the file, but need to keep it private, so I can't post it here. Any help or suggestions are appreciated!",
  "closed_at":"2020-08-10T12:53:14Z",
  "comments":5,
  "created_at":"2020-08-10T11:08:09Z",
  "id":676053086,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NzYwNTMwODY=",
  "number":64,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Cursor.skip_over can only be used on an object with non-null `num_bytes`",
  "updated_at":"2020-08-10T15:11:39Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-08-10T14:35:34Z",
  "comments":2,
  "created_at":"2020-08-10T13:34:54Z",
  "draft":false,
  "id":676141378,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDY1NTA0MjY5",
  "number":65,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-10T14:35:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixing #64; skip_over should be conditional.",
  "updated_at":"2020-08-10T14:35:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-08-10T17:17:05Z",
  "comments":0,
  "created_at":"2020-08-10T17:05:15Z",
  "draft":false,
  "id":676284367,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDY1NjIyODY5",
  "number":66,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-10T17:17:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix an issue where fallback HTTP doesn't get told it should notify when done",
  "updated_at":"2020-08-10T17:17:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"This used to be called \"clusters\" in uproot0 but is not strictly the\r\nROOT definition of clusters. Users may wish to partition reading\r\na TTree according to these offsets to prevent having to read and\r\ndecompress the same basket in multiple partitions.",
  "closed_at":"2020-08-11T14:00:57Z",
  "comments":4,
  "created_at":"2020-08-10T17:55:09Z",
  "draft":false,
  "id":676312175,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDY1NjQ1OTA4",
  "number":67,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-11T14:00:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add function to retrieve common entry offsets among branches",
  "updated_at":"2020-08-11T14:00:57Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"While moving some code from uproot3 to uproot4 I stumbled upon this error (trying to pull the values and errors from a `TH1D`:\r\n\r\n```\r\nIn [19]: h.values_errors()\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-19-431438897d77> in <module>\r\n----> 1 h.values_errors()\r\n\r\n~/.pyenv/versions/3.8.2/envs/tdub/lib/python3.8/site-packages/uproot4/behaviors/TH1.py in values_errors(self)\r\n     76         sumw2 = self.member(\"fSumw2\", none_if_missing=True)\r\n     77         if sumw2 is not None and len(sumw2) == self.member(\"fNcells\"):\r\n---> 78             sumw2 = sumw2.reshape(values.shape)\r\n     79             positive = sumw2 > 0\r\n     80             errors[positive] = numpy.sqrt(sumw2[positive])\r\n\r\nAttributeError: 'Model_TArrayD' object has no attribute 'reshape'\r\n```\r\n\r\nSince `Model_TArray` has an `__array__` method, we can just use `numpy.reshape` directly on the TArrayD object to fix the error.\r\n",
  "closed_at":"2020-08-10T18:30:24Z",
  "comments":2,
  "created_at":"2020-08-10T18:03:57Z",
  "draft":false,
  "id":676317163,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDY1NjQ5ODY0",
  "number":68,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-10T18:30:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix error from calling `reshape` on TArrayD that lives inside of a TH1D",
  "updated_at":"2020-08-10T18:30:51Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"In https://github.com/scikit-hep/uproot4/blob/7a03d3bc44ca76315c5f45de678b79ff8afc91ee/uproot4/_util.py#L242\r\nthe unit `kB`, `MB` are used for what appear to be `kiB`, `MiB`, etc.\r\nSee https://en.wikipedia.org/wiki/Binary_prefix",
  "closed_at":"2020-08-11T16:39:27Z",
  "comments":1,
  "created_at":"2020-08-11T16:17:05Z",
  "id":677011343,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2NzcwMTEzNDM=",
  "number":69,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Incorrect units in memory size",
  "updated_at":"2020-08-11T16:39:27Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-08-11T16:39:28Z",
  "comments":0,
  "created_at":"2020-08-11T16:31:01Z",
  "draft":false,
  "id":677021213,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDY2MjE4NTc2",
  "number":70,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-11T16:39:27Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Use correct memory units.",
  "updated_at":"2020-08-11T16:39:31Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"",
  "closed_at":"2020-08-12T00:55:30Z",
  "comments":6,
  "created_at":"2020-08-11T19:47:57Z",
  "draft":false,
  "id":677151449,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDY2MzE5NzEz",
  "number":71,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix a small bug in AsGrouped form",
  "updated_at":"2020-08-12T00:55:30Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I am working with a tree that contains branches which are vectors of floats:\r\n\r\n```\r\n>>> tree[\"weight_bTagSF_eigenvars_B_up\"].show(interpretation_width=40)\r\nname                 | typename             | interpretation\r\n---------------------+----------------------+-----------------------------------------\r\nweight_bTagSF_eigenv | std::vector<float>   | AsJagged(AsDtype('>f4'), header_bytes=10\r\n```\r\n\r\nIn ROOT, I use `[0]` to obtain the first entry of the vector for every event:\r\n```\r\nroot [8] nominal->Scan(\"weight_bTagSF_eigenvars_B_up[0]\")\r\n************************\r\n*    Row   * weight_bT *\r\n************************\r\n*        0 * 1.0968146 *\r\n*        1 * 0.8027607 *\r\n*        2 * 1.0042166 *\r\n*        3 * 1.0752149 *\r\n*        4 * 0.9913491 *\r\n*        5 * 0.7981501 *\r\n```\r\n\r\nTo obtain the same values in `uproot4` (0.0.16), I need to use `[:,0]`:\r\n```\r\n>>> weight = \"weight_bTagSF_eigenvars_B_up[:,0]\"\r\n>>> tree.arrays(weight)[weight]\r\n<Array [1.1, 0.803, 1, ... 0.795, 0.808, 0.791] type='14992 * float32'>\r\n```\r\n\r\nIs this change in behavior on purpose? I'd like to turn user-provided strings into weights extracted from the file. In ROOT, such a string looks like `weight_bTagSF_eigenvars_B_up[0]*some_other_weight`. To handle this different convention, I would either translate the strings into what `uproot4` expects, or ask users to adopt this way of indexing. I was wondering whether there may exist some \"ROOT-like\" interpretation I can switch on?\r\n\r\nI noticed that the above does not work with `library=np`:\r\n```\r\n>>> weight = \"weight_bTagSF_eigenvars_B_up[:,0]\"\r\n>>> tree.arrays(weight, library=\"np\")[weight]\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"[...]/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 967, in arrays\r\n    output = compute.compute_expressions(\r\n  File \"[...]/lib/python3.8/site-packages/uproot4/compute/python.py\", line 347, in compute_expressions\r\n    output[expression] = _expression_to_function(\r\n  File \"<dynamic>\", line 1, in <lambda>\r\nIndexError: too many indices for array: array is 1-dimensional, but 2 were indexed\r\n>>> tree.arrays(\"weight_bTagSF_eigenvars_B_up\", library=\"np\")[\"weight_bTagSF_eigenvars_B_up\"]\r\narray([array([1.0968146, 1.0773798, 1.0343741, 1.1100905, 1.0188507, 1.0471411],\r\n      dtype=float32),\r\n       array([0.8027608, 1.0142494, 0.9376403, 0.980236 , 0.9652771, 0.95773  ],\r\n      dtype=float32),\r\n       array([1.0042167 , 0.93642455, 1.0683353 , 0.9941829 , 0.9865473 ,\r\n       1.0125985 ], dtype=float32),\r\n       ...,\r\n       array([0.7953308, 0.9993567, 0.9192695, 0.9617004, 0.9411704, 0.9501564],\r\n      dtype=float32),\r\n       array([0.80789626, 0.99212795, 0.9876958 , 1.0175581 , 1.0071241 ,\r\n       0.99970514], dtype=float32),\r\n       array([0.79134053, 0.99477154, 0.93990743, 0.95846075, 0.9771205 ,\r\n       0.95926076], dtype=float32)], dtype=object)\r\n```\r\nI don't know whether this is a limitation of `numpy` or a bug. It is possible (but likely very inefficient) to extract the same information like this:\r\n```\r\n>>> np.asarray(tree.arrays(\"weight_bTagSF_eigenvars_B_up\", library=\"np\")[\"weight_bTagSF_eigenvars_B_up\"].tolist())[:,0]\r\narray([1.0968146 , 0.8027608 , 1.0042167 , ..., 0.7953308 , 0.80789626,\r\n       0.79134053], dtype=float32)\r\n```",
  "closed_at":"2020-08-12T13:33:58Z",
  "comments":3,
  "created_at":"2020-08-12T12:52:41Z",
  "id":677669854,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2Nzc2Njk4NTQ=",
  "number":72,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Indices for array branches",
  "updated_at":"2020-08-12T13:33:58Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-08-21T00:52:59Z",
  "comments":0,
  "created_at":"2020-08-20T15:41:18Z",
  "draft":false,
  "id":682826041,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDcxMDAyNDU3",
  "number":73,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-21T00:52:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Revamp physical layer to be sure it's on a solid foundation. The things we didn't use can be removed.",
  "updated_at":"2020-08-21T00:53:02Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"An issue in UnROOT was raised (https://github.com/tamasgal/UnROOT.jl/issues/9) since the automatic higher dimensional data or in general is still not possible or experimental, so I did what I usually do: fire up `uproot` and `uproo4` \ud83d\ude09  however there seems to be a problem to parse the dimensionality of those arrays. I am quite sure this worked in other files in the past, so I am not sure what's happening here but you see that the data under `structs` is correctly parsed, however the same data saved as multi-dimensional arrays in as `TLeafD` does not parse correctly.\r\n\r\nI have not worked much with uproot4 yet, so I am sorry to just dump the error here, but I guess you already know what's going wrong:\r\n\r\n```python\r\nIn [21]: import uproot4\r\n\r\nIn [22]: f = uproot4.open(\"/Users/tamasgal/Downloads/test_array.root\")\r\n\r\nIn [23]: f[\"arrays\"].show()\r\nname                 | typename             | interpretation\r\n---------------------+----------------------+-----------------------------------\r\nnInt                 | int32_t              | AsDtype('>i4')\r\n6dVec                | double               | AsDtype('>f8')\r\n2x3Mat               | double               | AsDtype('>f8')\r\n\r\nIn [24]: f[\"structs\"].show()\r\nname                 | typename             | interpretation\r\n---------------------+----------------------+-----------------------------------\r\nnInt                 | int32_t              | AsDtype('>i4')\r\n2x3mat               | double[6]            | AsDtype(\"('>f8', (6,))\")\r\n\r\nIn [25]: f[\"arrays/6dVec\"].array()\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-25-dbf33b2ce1b8> in <module>\r\n----> 1 f[\"arrays/6dVec\"].array()\r\n\r\n~/.virtualenvs/km3net/lib/python3.7/site-packages/uproot4/behaviors/TBranch.py in array(self, interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, array_cache, library)\r\n   1620             interpretation_executor,\r\n   1621             library,\r\n-> 1622             arrays,\r\n   1623         )\r\n   1624\r\n\r\n~/.virtualenvs/km3net/lib/python3.7/site-packages/uproot4/behaviors/TBranch.py in _ranges_or_baskets_to_arrays(hasbranches, ranges_or_baskets, branchid_interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, library, arrays)\r\n    516\r\n    517         elif isinstance(obj, tuple) and len(obj) == 3:\r\n--> 518             uproot4.source.futures.delayed_raise(*obj)\r\n    519\r\n    520         else:\r\n\r\n~/.virtualenvs/km3net/lib/python3.7/site-packages/uproot4/source/futures.py in delayed_raise(exception_class, exception_value, traceback)\r\n     35         exec(\"raise exception_class, exception_value, traceback\")\r\n     36     else:\r\n---> 37         raise exception_value.with_traceback(traceback)\r\n     38\r\n     39\r\n\r\n~/.virtualenvs/km3net/lib/python3.7/site-packages/uproot4/behaviors/TBranch.py in basket_to_array(basket)\r\n    482                         len(basket_arrays[basket.basket_num]),\r\n    483                         interpretation,\r\n--> 484                         branch.file.file_path,\r\n    485                     )\r\n    486                 )\r\n\r\nValueError: basket 0 in tree/branch /arrays;1:6dVec has the wrong number of entries (expected 1, obtained 6) when interpreted as AsDtype('>f8')\r\n    in file /Users/tamasgal/Downloads/test_array.root\r\n```",
  "closed_at":"2020-08-25T14:55:38Z",
  "comments":1,
  "created_at":"2020-08-22T15:05:58Z",
  "id":684012194,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2ODQwMTIxOTQ=",
  "number":74,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Unable to parse higher-dimensional (basic) arrays in leaves",
  "updated_at":"2020-08-25T14:55:38Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hi folks, I'm working with a TTree with two kinds of branches, a struct of doubles and single integers. And when a I try to load its data with pandas strange things happens.\r\n\r\nThe trees is like so.\r\n\r\n    >>> tree.show()\r\n\r\n    name                 | typename             | interpretation                    \r\n    ---------------------+----------------------+-----------------------------------\r\n    ionization           | struct {double x; do | AsDtype(\"[('x', '>f8'), ('y', '>f8\r\n    electron             | struct {double x; do | AsDtype(\"[('x', '>f8'), ('y', '>f8\r\n    ion                  | struct {double x; do | AsDtype(\"[('x', '>f8'), ('y', '>f8\r\n    estatus              | int32_t              | AsDtype('>i4')                    \r\n    istatus              | int32_t              | AsDtype('>i4')                    \r\n\r\nWhen I load a single branch every thing works fine. I get a MultiIndex DataFrame for the struct and Single Index for the integer branch.\r\n    \r\n    >>> tree.arrays('ion', library='pd')\r\n\r\n![issue1](https://user-images.githubusercontent.com/39627366/90965860-5cbdd100-e4a2-11ea-83a5-03c393e78a6b.png)\r\n\r\n    >>> tree.arrays('istatus', library='pd')\r\n\r\n![issue2](https://user-images.githubusercontent.com/39627366/90965864-63e4df00-e4a2-11ea-818d-454e071f3353.png)\r\n\r\nBut when I try to load those braches at the same time the index gets messed up and I end up with an empty DataFrame with a bunch of Nan subindexes.\r\n\r\n    >>> tree.arrays(['ion', 'istatus'], library='pd')\r\n\r\n![issue3](https://user-images.githubusercontent.com/39627366/90965868-6cd5b080-e4a2-11ea-81f0-c9a8140bfa29.png)\r\n\r\nI don't know if this is a bug or I'm doing an illegal operation reading those two kinds of data at the same time. But when a do the same thing with `library='np'` every thing works fine.",
  "closed_at":"2020-08-25T17:48:52Z",
  "comments":5,
  "created_at":"2020-08-22T21:24:26Z",
  "id":684069715,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2ODQwNjk3MTU=",
  "number":75,
  "performed_via_github_app":null,
  "reactions":{
   "+1":1,
   "total_count":1
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Error reading single and multi index branchs with pandas",
  "updated_at":"2020-08-25T17:57:36Z",
  "user":"MDQ6VXNlcjM5NjI3MzY2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"I started porting our I/O library based on uproot3 to uproot4 and although I know that the docs are not done yet, I am also hoping to solve some performance issues which are related to `dtypes` falling back to `object`-type, so I thought I give it a try.\r\n\r\nOne of the current issues is that I have not figured out yet how to pass custom interpretations to `.array()`. This is the uproot3 code:\r\n\r\n```python\r\nimport uproot\r\n\r\nf = uproot.open(\"km3net_online.root\")\r\n\r\ndtype = [(\"dom_id\", \"i4\"), (\"dq_status\", \"u4\"), (\"hrv\", \"u4\"), (\"fifo\", \"u4\"), (\"status3\", \"u4\"), (\"status4\", \"u4\")] + [(f\"ch{c}\", \"u1\") for c in range(31)]\r\npath = \"KM3NET_SUMMARYSLICE/KM3NET_SUMMARYSLICE/vector<KM3NETDAQ::JDAQSummaryFrame>\"\r\n\r\ndata = f[path].array(uproot.asjagged(uproot.astable(uproot.asdtype(dtype)), skipbytes=10))                                                              \r\n\r\ndata.dtype  # dtype('O')\r\n\r\ndata[0]   # Out[8]: <Table [<Row 0> <Row 1> <Row 2> ... <Row 61> <Row 62> <Row 63>] at 0x7ff5eb6586d0>\r\n\r\ndata[0].dtype  # dtype([('dom_id', '<i4'), ('dq_status', '<u4'), ('hrv', '<u4'), ('fifo', '<u4'), ('status3', '<u4'), ('status4', '<u4'), ('ch0', 'u1'), ('ch1', 'u1'), ('ch2', 'u1'), ('ch3', 'u1'), ('ch4', 'u1'), ('ch5', 'u1'), ('ch6', 'u1'), ('ch7', 'u1'), ('ch8', 'u1'), ('ch9', 'u1'), ('ch10', 'u1'), ('ch11', 'u1'), ('ch12', 'u1'), ('ch13', 'u1'), ('ch14', 'u1'), ('ch15', 'u1'), ('ch16', 'u1'), ('ch17', 'u1'), ('ch18', 'u1'), ('ch19', 'u1'), ('ch20', 'u1'), ('ch21', 'u1'), ('ch22', 'u1'), ('ch23', 'u1'), ('ch24', 'u1'), ('ch25', 'u1'), ('ch26', 'u1'), ('ch27', 'u1'), ('ch28', 'u1'), ('ch29', 'u1'), ('ch30', 'u1')])\r\n\r\ndata[0].dom_id\r\n\r\n# array([806451572, 806455814, 806465101, 806483369, 806487219, 806487226,\r\n#       806487231, 808432835, 808435278, 808447180, 808447186, 808451904,\r\n#       808451907, 808469129, 808472260, 808472265, 808488895, 808488990,\r\n#    ...\r\n#       808981864, 808982018, 808982041, 808982077, 808982547, 808984711,\r\n#       808996773, 808997793, 809006037, 809007627, 809503416, 809521500,\r\n#       809524432, 809526097, 809544058, 809544061], dtype=int32)\r\n```\r\n\r\nIn `uproot4`, this is what I came up with\r\n\r\n```python\r\n# similar lines as above until the branch interpretation\r\n\r\ninterp = uproot4.interpretation.jagged.AsJagged(uproot4.interpretation.numerical.AsDtype(dtype), header_bytes=10)\r\n# AsJagged(AsDtype(\"[('dom_id', '<i4'), ('dq_status', '<u4'), ('hrv', '<u4'), ('fifo', '<u4'), ('status3', '<u4'), ('status4', '<u4'), ('ch0', 'u1'), ('ch1', 'u1'), ('ch2', 'u1'), ('ch3', 'u1'), ('ch4', 'u1'), ('ch5', 'u1'), ('ch6', 'u1'), ('ch7', 'u1'), ('ch8', 'u1'), ('ch9', 'u1'), ('ch10', 'u1'), ('ch11', 'u1'), ('ch12', 'u1'), ('ch13', 'u1'), ('ch14', 'u1'), ('ch15', 'u1'), ('ch16', 'u1'), ('ch17', 'u1'), ('ch18', 'u1'), ('ch19', 'u1'), ('ch20', 'u1'), ('ch21', 'u1'), ('ch22', 'u1'), ('ch23', 'u1'), ('ch24', 'u1'), ('ch25', 'u1'), ('ch26', 'u1'), ('ch27', 'u1'), ('ch28', 'u1'), ('ch29', 'u1'), ('ch30', 'u1')]\"), header_bytes=10)\r\n\r\nf[path].array(interp)  # <Array [[{dom_id: 1954091312, ... ch30: 48}]] type='3 * var * {\"dom_id\": int32, ...'>\r\n```\r\n\r\nThe first problem is that the endianness is not picked up correctly, the `dom_id` for example should be little endian:\r\n\r\n```python\r\nimport numpy as np\r\n\r\nnp.array(f[path].array(interp)[0].dom_id).byteswap()[:4]\r\n# array([806451572, 806455814, 806465101, 806483369], dtype=int32)\r\n```\r\nThe second problem is that I am not sure if it is now a \"type-safe\" (high-performance) readout. In case of `uproot3`, the `dtype='O'` really had a horrible performance, for obvious reasons. Now I think that with `awkward1` I should be able to correctly map the structure, or am I wrong? At least what I got here is a `awkward1.highlevel.Array`.\r\n\r\nHowever, checking the `dtype` is giving me an error and it seems that it is an `object` type:\r\n\r\n```python\r\n>>> f[path].array(interp).dtype                                                                                                    \r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-52-98270c2c8c48> in <module>\r\n----> 1 f[path].array(interp).dtype\r\n\r\n~/.virtualenvs/km3net/lib/python3.8/site-packages/awkward1/highlevel.py in __getattr__(self, where)\r\n   1015         \"\"\"\r\n   1016         if where in dir(type(self)):\r\n-> 1017             return super(Array, self).__getattribute__(where)\r\n   1018         else:\r\n   1019             if where in self._layout.keys():\r\n\r\n~/.virtualenvs/km3net/lib/python3.8/site-packages/awkward1/_connect/_pandas.py in dtype(self)\r\n    180 \r\n    181         else:\r\n--> 182             return np.dtype(np.object)\r\n    183 \r\n    184     @property\r\n\r\nAttributeError: 'NumpyMetadata' object has no attribute 'object'\r\n```\r\n\r\nThanks in advance!\r\n\r\nHere is the file: \r\n[km3net_online.root.zip](https://github.com/scikit-hep/uproot4/files/5123202/km3net_online.root.zip)\r\n",
  "closed_at":"2020-08-25T16:09:45Z",
  "comments":4,
  "created_at":"2020-08-25T10:39:05Z",
  "id":685375465,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2ODUzNzU0NjU=",
  "number":76,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Porting code based on uproot3 to uproot4 - interpretations with custom-dtypes",
  "updated_at":"2020-08-25T16:37:07Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@tamasgal and @bernd1995, this fixes #74 and therefore provides a good model for tamasgal/UnROOT.jl#9. The information about a branch's dimensions are stored in the TLeaf's fTitle, and that needs to be parsed by a regex. The example @bernd1995 created had no leaf names:\r\n\r\n```c++\r\ntree_arr -> Branch(\"6dVec\",&vec,\"[6]/D\");\r\ntree_arr -> Branch(\"2x3Mat\",&mat,\"[2][3]/D\");\r\n```\r\n\r\nas opposed to\r\n\r\n```c++\r\ntree_str -> Branch(\"2x3mat\",&mat,\"el[6]/D\");\r\n```\r\n\r\n(where the leaf name is `\"el\"`), which I guess is legal, so the regex has to allow for that.\r\n\r\nThis CI is going to fail until I fix scikit-hep/awkward-1.0#416, which @tamasgal pointed out in another issue.",
  "closed_at":"2020-08-25T14:55:38Z",
  "comments":7,
  "created_at":"2020-08-25T14:46:38Z",
  "draft":false,
  "id":685550173,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDczMjU4NzY1",
  "number":77,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-25T14:55:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Minor tweak to regex to fix #74.",
  "updated_at":"2020-08-26T06:21:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-08-25T19:00:25Z",
  "comments":0,
  "created_at":"2020-08-25T17:59:56Z",
  "draft":false,
  "id":685681788,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDczMzY4MTE1",
  "number":78,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-25T19:00:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Get rid of the Dask backend (it puts too many constraints on Awkward; should be done differently, if at all).",
  "updated_at":"2020-08-25T19:00:27Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Hi. I've come across an issue where if a ROOT file has a colon in the name of it `uproot3` can open the file but `uproot4` fails. I can't give you the file, but I can show you a minimal failing example and then a reproducible example with public files.\r\n\r\n## Minimal Failing Example\r\n\r\n```\r\n$ tree .\r\n.\r\n\u251c\u2500\u2500 data-tree\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500  data16_13TeV:data16_13TeV.periodA.physics_Main.PhysCont.DAOD_JETM1.grp16_v01_p4061.root\r\n\u251c\u2500\u2500 issue.py\r\n\u251c\u2500\u2500 requirements.txt\r\n\r\n1 directory, 3 files\r\n$ cat requirements.txt \r\nuproot\r\nuproot4\r\n$ docker run --rm -it -v $PWD:/data -w /data python:3.8 /bin/bash\r\nroot@510598a7f4e8:/data# python -m pip install --upgrade pip setuptools wheel\r\nroot@510598a7f4e8:/data# python -m pip install -r requirements.txt\r\nroot@510598a7f4e8:/data# python --version\r\nPython 3.8.5\r\nroot@510598a7f4e8:/data# python -m pip list\r\nPackage        Version\r\n-------------- -------\r\nawkward        0.13.0\r\ncachetools     4.1.1\r\nnumpy          1.19.1\r\npip            20.2.2\r\nsetuptools     49.6.0\r\nuproot         3.12.0\r\nuproot-methods 0.7.4\r\nuproot4        0.0.18\r\nwheel          0.35.1\r\nroot@510598a7f4e8:/data# cp data-tree/data16_13TeV\\:data16_13TeV.periodA.physics_Main.PhysCont.DAOD_JETM1.grp16_v01_p4061.root data-tree/renamed.root\r\nroot@510598a7f4e8:/data# python\r\nPython 3.8.5 (default, Aug  5 2020, 08:22:02) \r\n[GCC 8.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import uproot as uproot3\r\n>>> import uproot4\r\n>>> from pathlib import Path\r\n>>> \r\n>>> uproot3_file = uproot3.open(\r\n...     \"data-tree/data16_13TeV:data16_13TeV.periodA.physics_Main.PhysCont.DAOD_JETM1.grp16_v01_p4061.root\"\r\n... )\r\n>>> print(f\"uproot3 opens file as {uproot3_file}\")\r\nuproot3 opens file as <ROOTDirectory b'/home/feickert/workarea/submitDir/data-tree//data16_13TeV:data16_13TeV.periodA.physics_Main.PhysCont.DAOD_JETM1.grp16_v01_p4061.root' at 0x7fce6da5b5e0>\r\n>>> \r\n>>> # uproot4 fails with the ':' in the filename\r\n>>> uproot4.open(\r\n...     \"data-tree/data16_13TeV:data16_13TeV.periodA.physics_Main.PhysCont.DAOD_JETM1.grp16_v01_p4061.root\"\r\n... )\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/uproot4/source/file.py\", line 74, in __init__\r\n    self._file = numpy.memmap(self._file_path, dtype=self._dtype, mode=\"r\")\r\n  File \"/usr/local/lib/python3.8/site-packages/numpy/core/memmap.py\", line 225, in __new__\r\n    f_ctx = open(os_fspath(filename), ('r' if mode == 'c' else mode)+'b')\r\nFileNotFoundError: [Errno 2] No such file or directory: 'data-tree/data16_13TeV'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.8/site-packages/uproot4/reading.py\", line 78, in open\r\n    file = ReadOnlyFile(\r\n  File \"/usr/local/lib/python3.8/site-packages/uproot4/reading.py\", line 265, in __init__\r\n    self._source = Source(file_path, **self._options)\r\n  File \"/usr/local/lib/python3.8/site-packages/uproot4/source/file.py\", line 80, in __init__\r\n    self._fallback = uproot4.source.file.FileSource(file_path, opts)\r\nAttributeError: module 'uproot4.source.file' has no attribute 'FileSource'\r\n>>> # even if that is inside a pathlib object\r\n>>> uproot4.open(\r\n...     Path(\r\n...         \"data-tree/data16_13TeV:data16_13TeV.periodA.physics_Main.PhysCont.DAOD_JETM1.grp16_v01_p4061.root\"\r\n...     )\r\n... )\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/uproot4/source/file.py\", line 74, in __init__\r\n    self._file = numpy.memmap(self._file_path, dtype=self._dtype, mode=\"r\")\r\n  File \"/usr/local/lib/python3.8/site-packages/numpy/core/memmap.py\", line 225, in __new__\r\n    f_ctx = open(os_fspath(filename), ('r' if mode == 'c' else mode)+'b')\r\nFileNotFoundError: [Errno 2] No such file or directory: 'data-tree/data16_13TeV'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.8/site-packages/uproot4/reading.py\", line 78, in open\r\n    file = ReadOnlyFile(\r\n  File \"/usr/local/lib/python3.8/site-packages/uproot4/reading.py\", line 265, in __init__\r\n    self._source = Source(file_path, **self._options)\r\n  File \"/usr/local/lib/python3.8/site-packages/uproot4/source/file.py\", line 80, in __init__\r\n    self._fallback = uproot4.source.file.FileSource(file_path, opts)\r\nAttributeError: module 'uproot4.source.file' has no attribute 'FileSource'\r\n>>> # but the file itself is fine\r\n>>> uproot4.open(\"data-tree/renamed.root\")\r\n<ReadOnlyDirectory '/' at 0x7fce725e7670>\r\n\r\n```\r\n\r\n## Failing Reproducible Example\r\n\r\n```python\r\n# issue.py\r\nimport uproot as uproot3\r\nimport uproot4\r\nfrom pathlib import Path\r\n\r\n\r\ndef main():\r\n    # curl -sL https://github.com/scikit-hep/scikit-hep-testdata/raw/master/src/skhep_testdata/data/uproot-HZZ-lz4.root -o uproot-HZZ-lz4.root\r\n    uproot3.open(\"uproot-HZZ-lz4.root\")\r\n    uproot3.open(\"uproot:HZZ-lz4.root\")\r\n    uproot3.open(Path(\"uproot:HZZ-lz4.root\"))\r\n\r\n    uproot4.open(\"uproot-HZZ-lz4.root\")\r\n    uproot4.open(\"uproot:HZZ-lz4.root\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n```\r\nroot@510598a7f4e8:/data# curl -sL https://github.com/scikit-hep/scikit-hep-testdata/raw/master/src/skhep_testdata/data/uproot-HZZ-lz4.root -o uproot-HZZ-lz4.root\r\nroot@510598a7f4e8:/data# cp uproot-HZZ-lz4.root uproot:HZZ-lz4.root \r\nroot@510598a7f4e8:/data# python issue.py \r\nTraceback (most recent call last):\r\n  File \"issue.py\", line 17, in <module>\r\n    main()\r\n  File \"issue.py\", line 9, in main\r\n    uproot3.open(\"uproot:HZZ-lz4.root\")\r\n  File \"/usr/local/lib/python3.8/site-packages/uproot/rootio.py\", line 63, in open\r\n    raise ValueError(\"URI scheme not recognized: {0}\".format(path))\r\nValueError: URI scheme not recognized: uproot:HZZ-lz4.root\r\n\r\n```\r\n\r\n## Comments\r\n\r\nI realize that this is probably because `uproot4`'s `open`'s `path` is\r\n\r\nhttps://github.com/scikit-hep/uproot4/blob/b8828069b9ae52c742fb704f07e1a4e179fe7b30/uproot4/reading.py#L43-L46\r\n\r\nand it isn't a good idea to have a file with a colon in it in general. However, there are ATLAS files that do, and it would be nice if `uproot3` behavior toward filenames could still be supported. If support for this is firmly out of scope it would be great if there could be some huge warning about this in the docs.",
  "closed_at":"2020-08-27T20:41:55Z",
  "comments":38,
  "created_at":"2020-08-26T04:56:18Z",
  "id":686004884,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2ODYwMDQ4ODQ=",
  "number":79,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"uproot4 unable to open ROOT file with colons in the name that uproot3 can",
  "updated_at":"2020-08-27T20:46:13Z",
  "user":"MDQ6VXNlcjUxNDIzOTQ="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"This addresses https://github.com/scikit-hep/uproot4/issues/79 which shows that `uproot4` is not able to handle filenames containing colons.\r\n\r\nI played around a bit but I could not find a suitable solution without the prior knowledge that a filename ends with `.root` due to the ambiguity of the colon used as object path separator. Therefore this implementation assumes that filename terminates with `.root` and makes the splitting fairly straight forward. Given that this will only fail when a user specifies a file without the `.root` extension **and** also an object path in addition, the collateral damage might be very low.\r\n\r\nThe risk can be further reduced by first checking for the occurrence of `.root` and adapt the behaviour accordingly.\r\n\r\nAnother possible solution would be to force the user to use spaces around the object path separator (` : `), but I guess this is quite established already.\r\n\r\nLet me know what you think.",
  "closed_at":"2020-08-26T17:41:18Z",
  "comments":1,
  "created_at":"2020-08-26T08:22:22Z",
  "draft":false,
  "id":686118069,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDczNzM5OTA2",
  "number":80,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Simplify file path/object splitter",
  "updated_at":"2020-08-26T17:41:18Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Tests will fail because they still assume you can use colons.\r\n\r\nThis addresses #79.",
  "closed_at":"2020-08-27T20:41:55Z",
  "comments":0,
  "created_at":"2020-08-26T15:43:08Z",
  "draft":false,
  "id":686425097,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDczOTk0NTc3",
  "number":81,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-27T20:41:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Removed the colon-parsing and replaced it with dicts.",
  "updated_at":"2020-08-27T20:41:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"The only references to lazy-loading (of arrays) I could find in the code so far are those using `uproot4.lazy()`, which requires a file and an object path.\r\n\r\nIs there a plan to provide the old `.lazyarray()` interface as it was available in `uproot3`? Or does the current design make it hard to provide a lazyarray-interface for already opened files?\r\n\r\nBtw. I noticed that the `.array()` method is very fast in many of our files which require custom interpretations (which is really nice!) but still, the memory requirement is sometimes huge (due to large dtypes) compared to what a user usually extracts from our branches and the Python GC is going crazy.\r\n\r\nAlso we usually deal with large amounts of branches and the overhead of the file opening might not be negligible.",
  "closed_at":"2020-08-26T17:15:54Z",
  "comments":3,
  "created_at":"2020-08-26T16:49:29Z",
  "id":686469539,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2ODY0Njk1Mzk=",
  "number":82,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Lazyarrays in uproot4",
  "updated_at":"2020-08-27T11:13:08Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-08-26T23:08:13Z",
  "comments":0,
  "created_at":"2020-08-26T20:08:18Z",
  "draft":false,
  "id":686584726,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDc0MTI2ODE1",
  "number":83,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-26T23:08:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Uproot4 seems to be handling 'long long' okay already, but I added it to the parser anyway.",
  "updated_at":"2020-08-26T23:08:16Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This only fixes the strings case in scikit-hep/uproot#510, commented upon in https://github.com/scikit-hep/uproot4/issues/38#issuecomment-681161557. It doesn't touch the strangely split class.",
  "closed_at":"2020-08-26T23:18:25Z",
  "comments":0,
  "created_at":"2020-08-26T23:06:11Z",
  "draft":false,
  "id":686763826,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDc0MjkyMjg0",
  "number":84,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-26T23:18:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Distinguish between 1-byte and 6-byte header in AsArray.",
  "updated_at":"2020-08-26T23:18:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hi,\r\nI'm facing a weird issue when dealing with Double_32t with uproot4.\r\nI have uploaded a small tree to reproduce the problem, in particular:\r\n\r\n- `uproot4.open(\"test_tree.root\")[\"Hyp3O2\"][\"RHyperTriton\"][\"m\"].array()` converts the floating variable \"m\" as expected\r\n-` uproot4.open(\"test_tree.root\")[\"Hyp3O2\"][\"RHyperTriton\"][\"mppi_vert\"].array() ` fails while converting the double32 variable \"mppi_vert\" with the following error: `AttributeError: 'NoneType' object has no attribute 'title'`\r\n\r\nThe link to the tree is:\r\n- https://drive.google.com/file/d/14kF2gEKV7-eIbhSByd-F0cnUuVwrBopp/view?usp=sharing\r\n\r\nPlease note that the conversion with old uproot works nicely.\r\nAny idea of what is happening here?\r\n",
  "closed_at":"2020-08-28T18:52:51Z",
  "comments":2,
  "created_at":"2020-08-28T17:51:26Z",
  "id":688251033,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2ODgyNTEwMzM=",
  "number":85,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Uproot4 and Double32_t",
  "updated_at":"2020-08-28T19:15:10Z",
  "user":"MDQ6VXNlcjQzNzQyMTk1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Fixes #85.",
  "closed_at":"2020-08-28T18:52:51Z",
  "comments":0,
  "created_at":"2020-08-28T18:40:03Z",
  "draft":false,
  "id":688283352,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDc1NTgxMTc1",
  "number":86,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-28T18:52:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"When searching for a streamer by member name, be sure to include a class's base classes.",
  "updated_at":"2020-08-28T18:52:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This will remove the \"bug\" label from #38, but won't close it.\r\n\r\nNow\r\n\r\n```python\r\n>>> import uproot4, skhep_testdata\r\n>>> t = uproot4.open(skhep_testdata.data_path(\"uproot-issue510b.root\"))[\"EDepSimEvents\"]\r\n>>> b = t[\"Event\"][\"Trajectories.Points\"]\r\n>>> b.array()\r\n```\r\n\r\nraises\r\n\r\n```\r\nNotImplementedError: memberwise serialization of AsArray\r\nin file /python3.8/site-packages/skhep_testdata/data/uproot-issue510b.root\r\n```\r\n\r\nso it should be more clear that this is a missing feature, not a bug.",
  "closed_at":"2020-08-31T18:26:14Z",
  "comments":0,
  "created_at":"2020-08-31T17:59:23Z",
  "draft":false,
  "id":689388582,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDc2NDQ2OTgy",
  "number":87,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-31T18:26:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Check for memberwise serialization and raise NotImplementedError as needed.",
  "updated_at":"2020-08-31T18:26:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Uproot's deserialization is based on nominal versions of classes first, then falls back to streamers if they're wrong. Streamers being wrong can have you thinking you need to iterate over 1329201155 elements in a TObjArray before the error gets fixed. In Python 2, `range(1329201155)` constructs a list, which uses an enormous amount of memory. `uproot4._util.range` is `range` in Python 3 and `xrange` in Python 2; we just need to use `uproot4._util.range` wherever we'd use `range`.\r\n\r\nIssue #36 warned that it might be a deep bug, affecting Python 3 in unknown and apparently invisible ways. It's not.",
  "closed_at":"2020-08-31T19:37:34Z",
  "comments":0,
  "created_at":"2020-08-31T19:21:10Z",
  "draft":false,
  "id":689444631,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDc2NDkxNTA1",
  "number":88,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-08-31T19:37:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #36 by replacing range with xrange in Python 2.",
  "updated_at":"2020-08-31T19:37:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"### uproot4\r\n\r\n   - [x] uproot4.behavior_of\r\n   - [x] uproot4.KeyInFileError\r\n\r\n### uproot4.behaviors.TBranch\r\n\r\n   - [x] uproot4.behaviors.TBranch.iterate\r\n   - [x] uproot4.behaviors.TBranch.concatenate\r\n   - [x] uproot4.behaviors.TBranch.lazy\r\n   - [x] uproot4.behaviors.TBranch.Report\r\n   - [x] uproot4.behaviors.TBranch.HasBranches\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.branches\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.show\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.arrays\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.iterate\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.keys\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.values\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.items\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.typenames\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.iterkeys\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.itervalues\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.iteritems\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.itertypenames\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.num_entries_for\r\n   - [x] uproot4.behaviors.TBranch.HasBranches.common_entry_offsets\r\n   - [x] uproot4.behaviors.TBranch.TBranch\r\n   - [x] uproot4.behaviors.TBranch.TBranch.array\r\n   - [x] uproot4.behaviors.TBranch.TBranch.name\r\n   - [x] uproot4.behaviors.TBranch.TBranch.title\r\n   - [x] uproot4.behaviors.TBranch.TBranch.object_path\r\n   - [x] uproot4.behaviors.TBranch.TBranch.cache_key\r\n   - [x] uproot4.behaviors.TBranch.TBranch.index\r\n   - [x] uproot4.behaviors.TBranch.TBranch.interpretation\r\n   - [x] uproot4.behaviors.TBranch.TBranch.typename\r\n   - [x] uproot4.behaviors.TBranch.TBranch.num_entries\r\n   - [x] uproot4.behaviors.TBranch.TBranch.entry_offsets\r\n   - [x] uproot4.behaviors.TBranch.TBranch.tree\r\n   - [x] uproot4.behaviors.TBranch.TBranch.top_level\r\n   - [x] uproot4.behaviors.TBranch.TBranch.streamer\r\n   - [x] uproot4.behaviors.TBranch.TBranch.context\r\n   - [x] uproot4.behaviors.TBranch.TBranch.aliases\r\n   - [x] uproot4.behaviors.TBranch.TBranch.count_branch\r\n   - [x] uproot4.behaviors.TBranch.TBranch.count_leaf\r\n   - [x] uproot4.behaviors.TBranch.TBranch.num_baskets\r\n   - [x] uproot4.behaviors.TBranch.TBranch.basket\r\n   - [x] uproot4.behaviors.TBranch.TBranch.basket_chunk_cursor\r\n   - [x] uproot4.behaviors.TBranch.TBranch.basket_compressed_bytes\r\n   - [x] uproot4.behaviors.TBranch.TBranch.basket_key\r\n   - [x] uproot4.behaviors.TBranch.TBranch.embedded_baskets\r\n   - [x] uproot4.behaviors.TBranch.TBranch.entries_to_ranges_or_baskets\r\n   - [x] uproot4.behaviors.TBranch.TBranch.postprocess\r\n   - [x] uproot4.behaviors.TBranch.TBranch.debug\r\n   - [x] uproot4.behaviors.TBranch.TBranch.debug_array\r\n\r\n### uproot4.behaviors.TBranchElement\r\n\r\n   - [x] uproot4.behaviors.TBranchElement.TBranchElement\r\n\r\n### uproot4.behaviors.TTree\r\n\r\n   - [x] uproot4.behaviors.TTree.TTree\r\n   - [x] uproot4.behaviors.TTree.TTree.name\r\n   - [x] uproot4.behaviors.TTree.TTree.title\r\n   - [x] uproot4.behaviors.TTree.TTree.object_path\r\n   - [x] uproot4.behaviors.TTree.TTree.cache_key\r\n   - [x] uproot4.behaviors.TTree.TTree.num_entries\r\n   - [x] uproot4.behaviors.TTree.TTree.tree\r\n   - [x] uproot4.behaviors.TTree.TTree.aliases\r\n   - [x] uproot4.behaviors.TTree.TTree.chunk\r\n   - [x] uproot4.behaviors.TTree.TTree.postprocess\r\n\r\n### uproot4.behaviors.TH1\r\n\r\n   - [x] uproot4.behaviors.TH1.TH1\r\n   - [x] uproot4.behaviors.TH1.TH1.edges\r\n   - [x] uproot4.behaviors.TH1.TH1.values\r\n   - [x] uproot4.behaviors.TH1.TH1.values_errors\r\n   - [x] uproot4.behaviors.TH1.TH1.to_numpy\r\n   - [x] uproot4.behaviors.TH1.TH1.to_boost\r\n   - [x] uproot4.behaviors.TH1.TH1.to_hist\r\n\r\n### uproot4.behaviors.TH2\r\n\r\n   - [x] uproot4.behaviors.TH2.TH2\r\n   - [x] uproot4.behaviors.TH2.TH2.edges\r\n   - [x] uproot4.behaviors.TH2.TH2.values\r\n   - [x] uproot4.behaviors.TH2.TH2.values_errors\r\n   - [x] uproot4.behaviors.TH2.TH2.to_numpy\r\n   - [x] uproot4.behaviors.TH2.TH2.to_boost\r\n   - [x] uproot4.behaviors.TH2.TH2.to_hist\r\n\r\n### uproot4.behaviors.TH3\r\n\r\n   - [x] uproot4.behaviors.TH3.TH3\r\n   - [x] uproot4.behaviors.TH3.TH3.edges\r\n   - [x] uproot4.behaviors.TH3.TH3.values\r\n   - [x] uproot4.behaviors.TH3.TH3.values_errors\r\n   - [x] uproot4.behaviors.TH3.TH3.to_numpy\r\n   - [x] uproot4.behaviors.TH3.TH3.to_boost\r\n   - [x] uproot4.behaviors.TH3.TH3.to_hist\r\n\r\n### uproot4.behaviors.TProfile\r\n\r\n   - [x] uproot4.behaviors.TProfile.TProfile\r\n   - [x] uproot4.behaviors.TProfile.TProfile.edges\r\n   - [x] uproot4.behaviors.TProfile.TProfile.effective_entries\r\n   - [x] uproot4.behaviors.TProfile.TProfile.values\r\n   - [x] uproot4.behaviors.TProfile.TProfile.values_errors\r\n   - [x] uproot4.behaviors.TProfile.TProfile.to_numpy\r\n   - [x] uproot4.behaviors.TProfile.TProfile.to_boost\r\n   - [x] uproot4.behaviors.TProfile.TProfile.to_hist\r\n\r\n### uproot4.behaviors.TProfile2D\r\n\r\n   - [x] uproot4.behaviors.TProfile2D.TProfile2D\r\n   - [x] uproot4.behaviors.TProfile2D.TProfile2D.edges\r\n   - [x] uproot4.behaviors.TProfile2D.TProfile2D.values\r\n   - [x] uproot4.behaviors.TProfile2D.TProfile2D.values_errors\r\n   - [x] uproot4.behaviors.TProfile2D.TProfile2D.to_numpy\r\n   - [x] uproot4.behaviors.TProfile2D.TProfile2D.to_boost\r\n   - [x] uproot4.behaviors.TProfile2D.TProfile2D.to_hist\r\n\r\n### uproot4.behaviors.TProfile3D\r\n\r\n   - [x] uproot4.behaviors.TProfile3D.TProfile3D\r\n   - [x] uproot4.behaviors.TProfile3D.TProfile3D.edges\r\n   - [x] uproot4.behaviors.TProfile3D.TProfile3D.values\r\n   - [x] uproot4.behaviors.TProfile3D.TProfile3D.values_errors\r\n   - [x] uproot4.behaviors.TProfile3D.TProfile3D.to_numpy\r\n   - [x] uproot4.behaviors.TProfile3D.TProfile3D.to_boost\r\n   - [x] uproot4.behaviors.TProfile3D.TProfile3D.to_hist\r\n\r\n### uproot4.behaviors.TH2Poly\r\n\r\n   - [x] uproot4.behaviors.TH2Poly.TH2Poly\r\n   - [x] uproot4.behaviors.TH2Poly.TH2Poly.edges\r\n   - [x] uproot4.behaviors.TH2Poly.TH2Poly.values\r\n   - [x] uproot4.behaviors.TH2Poly.TH2Poly.values_errors\r\n   - [x] uproot4.behaviors.TH2Poly.TH2Poly.to_numpy\r\n   - [x] uproot4.behaviors.TH2Poly.TH2Poly.to_boost\r\n   - [x] uproot4.behaviors.TH2Poly.TH2Poly.to_hist\r\n\r\n### uproot4.extras\r\n\r\n   - [x] uproot4.extras.awkward1\r\n   - [x] uproot4.extras.pandas\r\n   - [x] uproot4.extras.cupy\r\n   - [x] uproot4.extras.XRootD_client\r\n   - [x] uproot4.extras.lzma\r\n   - [x] uproot4.extras.lz4_block\r\n   - [x] uproot4.extras.xxhash\r\n   - [x] uproot4.extras.zstandard\r\n   - [x] uproot4.extras.boost_histogram\r\n   - [x] uproot4.extras.hist\r\n\r\n### uproot4.source\r\n\r\n### uproot4.source.cursor\r\n\r\n   - [x] uproot4.source.cursor.Cursor\r\n   - [x] uproot4.source.cursor.Cursor.index\r\n   - [x] uproot4.source.cursor.Cursor.origin\r\n   - [x] uproot4.source.cursor.Cursor.refs\r\n   - [x] uproot4.source.cursor.Cursor.displacement\r\n   - [x] uproot4.source.cursor.Cursor.copy\r\n   - [x] uproot4.source.cursor.Cursor.move_to\r\n   - [x] uproot4.source.cursor.Cursor.skip\r\n   - [x] uproot4.source.cursor.Cursor.skip_after\r\n   - [x] uproot4.source.cursor.Cursor.skip_over\r\n   - [x] uproot4.source.cursor.Cursor.fields\r\n   - [x] uproot4.source.cursor.Cursor.field\r\n   - [x] uproot4.source.cursor.Cursor.double32\r\n   - [x] uproot4.source.cursor.Cursor.float16\r\n   - [x] uproot4.source.cursor.Cursor.bytes\r\n   - [x] uproot4.source.cursor.Cursor.array\r\n   - [x] uproot4.source.cursor.Cursor.bytestring\r\n   - [x] uproot4.source.cursor.Cursor.bytestring_with_length\r\n   - [x] uproot4.source.cursor.Cursor.string\r\n   - [x] uproot4.source.cursor.Cursor.string_with_length\r\n   - [x] uproot4.source.cursor.Cursor.classname\r\n   - [x] uproot4.source.cursor.Cursor.debug\r\n\r\n### uproot4.source.chunk\r\n\r\n   - [x] uproot4.source.chunk.Resource\r\n   - [x] uproot4.source.chunk.Resource.file_path\r\n   - [x] uproot4.source.chunk.Source\r\n   - [x] uproot4.source.chunk.Source.file_path\r\n   - [x] uproot4.source.chunk.Source.close\r\n   - [x] uproot4.source.chunk.Source.closed\r\n   - [x] uproot4.source.chunk.Source.num_bytes\r\n   - [x] uproot4.source.chunk.Source.num_requested_bytes\r\n   - [x] uproot4.source.chunk.Source.num_requested_chunks\r\n   - [x] uproot4.source.chunk.Source.num_requests\r\n   - [x] uproot4.source.chunk.MultithreadedSource\r\n   - [x] uproot4.source.chunk.MultithreadedSource.chunk\r\n   - [x] uproot4.source.chunk.MultithreadedSource.chunks\r\n   - [x] uproot4.source.chunk.MultithreadedSource.closed\r\n   - [x] uproot4.source.chunk.MultithreadedSource.executor\r\n   - [x] uproot4.source.chunk.MultithreadedSource.num_workers\r\n   - [x] uproot4.source.chunk.Chunk\r\n   - [x] uproot4.source.chunk.Chunk.wrap\r\n   - [x] uproot4.source.chunk.Chunk.source\r\n   - [x] uproot4.source.chunk.Chunk.start\r\n   - [x] uproot4.source.chunk.Chunk.stop\r\n   - [x] uproot4.source.chunk.Chunk.future\r\n   - [x] uproot4.source.chunk.Chunk.wait\r\n   - [x] uproot4.source.chunk.Chunk.raw_data\r\n   - [x] uproot4.source.chunk.Chunk.get\r\n   - [x] uproot4.source.chunk.Chunk.remainder\r\n\r\n### uproot4.source.futures\r\n\r\n   - [x] uproot4.source.futures.delayed_raise\r\n   - [x] uproot4.source.futures.NoFuture\r\n   - [x] uproot4.source.futures.NoFuture.result\r\n   - [x] uproot4.source.futures.TrivialExecutor\r\n   - [x] uproot4.source.futures.TrivialExecutor.submit\r\n   - [x] uproot4.source.futures.TrivialExecutor.shutdown\r\n   - [x] uproot4.source.futures.Future\r\n   - [x] uproot4.source.futures.Future.result\r\n   - [x] uproot4.source.futures.Worker\r\n   - [x] uproot4.source.futures.Worker.work_queue\r\n   - [x] uproot4.source.futures.Worker.run\r\n   - [x] uproot4.source.futures.ThreadPoolExecutor\r\n   - [x] uproot4.source.futures.ThreadPoolExecutor.workers\r\n   - [x] uproot4.source.futures.ThreadPoolExecutor.num_workers\r\n   - [x] uproot4.source.futures.ThreadPoolExecutor.submit\r\n   - [x] uproot4.source.futures.ThreadPoolExecutor.shutdown\r\n   - [x] uproot4.source.futures.ResourceFuture\r\n   - [x] uproot4.source.futures.ResourceWorker\r\n   - [x] uproot4.source.futures.ResourceWorker.resource\r\n   - [x] uproot4.source.futures.ResourceWorker.run\r\n   - [x] uproot4.source.futures.ResourceThreadPoolExecutor\r\n   - [x] uproot4.source.futures.ResourceThreadPoolExecutor.close\r\n   - [x] uproot4.source.futures.ResourceThreadPoolExecutor.closed\r\n   - [x] uproot4.source.futures.ResourceThreadPoolExecutor.submit\r\n\r\n### uproot4.source.file\r\n\r\n   - [x] uproot4.source.file.FileResource\r\n   - [x] uproot4.source.file.FileResource.file\r\n   - [x] uproot4.source.file.FileResource.closed\r\n   - [x] uproot4.source.file.FileResource.get\r\n   - [x] uproot4.source.file.FileResource.future\r\n   - [x] uproot4.source.file.MemmapSource\r\n   - [x] uproot4.source.file.MemmapSource.file\r\n   - [x] uproot4.source.file.MemmapSource.closed\r\n   - [x] uproot4.source.file.MemmapSource.fallback\r\n   - [x] uproot4.source.file.MemmapSource.chunk\r\n   - [x] uproot4.source.file.MemmapSource.chunks\r\n   - [x] uproot4.source.file.MemmapSource.num_bytes\r\n   - [x] uproot4.source.file.MultithreadedFileSource\r\n\r\n### uproot4.source.http\r\n\r\n   - [x] uproot4.source.http.make_connection\r\n   - [x] uproot4.source.http.get_num_bytes\r\n   - [x] uproot4.source.http.HTTPResource\r\n   - [x] uproot4.source.http.HTTPResource.timeout\r\n   - [x] uproot4.source.http.HTTPResource.parsed_url\r\n   - [x] uproot4.source.http.HTTPResource.get\r\n   - [x] uproot4.source.http.HTTPResource.future\r\n   - [x] uproot4.source.http.HTTPResource.partfuture\r\n   - [x] uproot4.source.http.HTTPResource.multifuture\r\n   - [x] uproot4.source.http.HTTPResource.is_multipart_supported\r\n   - [x] uproot4.source.http.HTTPResource.handle_multipart\r\n   - [x] uproot4.source.http.HTTPResource.handle_no_multipart\r\n   - [x] uproot4.source.http.HTTPResource.next_header\r\n   - [x] uproot4.source.http.HTTPSource\r\n   - [x] uproot4.source.http.HTTPSource.chunk\r\n   - [x] uproot4.source.http.HTTPSource.chunks\r\n   - [x] uproot4.source.http.HTTPSource.closed\r\n   - [x] uproot4.source.http.HTTPSource.executor\r\n   - [x] uproot4.source.http.HTTPSource.fallback\r\n   - [x] uproot4.source.http.HTTPSource.num_bytes\r\n   - [x] uproot4.source.http.HTTPSource.parsed_url\r\n   - [x] uproot4.source.http.HTTPSource.timeout\r\n   - [x] uproot4.source.http.MultithreadedHTTPSource\r\n   - [x] uproot4.source.http.MultithreadedHTTPSource.num_bytes\r\n   - [x] uproot4.source.http.MultithreadedHTTPSource.parsed_url\r\n   - [x] uproot4.source.http.MultithreadedHTTPSource.timeout\r\n\r\n### uproot4.source.xrootd\r\n\r\n   - [x] uproot4.source.xrootd.get_server_config\r\n   - [x] uproot4.source.xrootd.XRootDResource\r\n   - [x] uproot4.source.xrootd.XRootDResource.timeout\r\n   - [x] uproot4.source.xrootd.XRootDResource.file\r\n   - [x] uproot4.source.xrootd.XRootDResource.closed\r\n   - [x] uproot4.source.xrootd.XRootDResource.num_bytes\r\n   - [x] uproot4.source.xrootd.XRootDResource.get\r\n   - [x] uproot4.source.xrootd.XRootDResource.future\r\n   - [x] uproot4.source.xrootd.XRootDResource.partfuture\r\n   - [x] uproot4.source.xrootd.XRootDResource.callbacker\r\n   - [x] uproot4.source.xrootd.XRootDSource\r\n   - [x] uproot4.source.xrootd.XRootDSource.resource\r\n   - [x] uproot4.source.xrootd.XRootDSource.timeout\r\n   - [x] uproot4.source.xrootd.XRootDSource.file\r\n   - [x] uproot4.source.xrootd.XRootDSource.closed\r\n   - [x] uproot4.source.xrootd.XRootDSource.num_bytes\r\n   - [x] uproot4.source.xrootd.XRootDSource.chunk\r\n   - [x] uproot4.source.xrootd.XRootDSource.chunks\r\n   - [x] uproot4.source.xrootd.MultithreadedXRootDSource\r\n   - [x] uproot4.source.xrootd.MultithreadedXRootDSource.timeout\r\n   - [x] uproot4.source.xrootd.MultithreadedXRootDSource.num_bytes\r\n\r\n### uproot4.compression\r\n\r\n   - [x] uproot4.compression.Compression\r\n   - [x] uproot4.compression.Compression.from_code\r\n   - [x] uproot4.compression.Compression.from_code_pair\r\n   - [x] uproot4.compression.Compression.code\r\n   - [x] uproot4.compression.Compression.code_pair\r\n   - [x] uproot4.compression.Compression.level\r\n   - [x] uproot4.compression.ZLIB\r\n   - [x] uproot4.compression.LZ4\r\n   - [x] uproot4.compression.LZMA\r\n   - [x] uproot4.compression.ZSTD\r\n   - [x] uproot4.compression.decompress\r\n\r\n### uproot4.reading\r\n\r\n   - [x] uproot4.reading.open\r\n   - [x] uproot4.reading.open.defaults\r\n   - [x] uproot4.reading.must_be_attached\r\n   - [x] uproot4.reading.CommonFileMethods\r\n   - [x] uproot4.reading.CommonFileMethods.file_path\r\n   - [x] uproot4.reading.CommonFileMethods.options\r\n   - [x] uproot4.reading.CommonFileMethods.root_version\r\n   - [x] uproot4.reading.CommonFileMethods.root_version_tuple\r\n   - [x] uproot4.reading.CommonFileMethods.is_64bit\r\n   - [x] uproot4.reading.CommonFileMethods.compression\r\n   - [x] uproot4.reading.CommonFileMethods.hex_uuid\r\n   - [x] uproot4.reading.CommonFileMethods.uuid\r\n   - [x] uproot4.reading.CommonFileMethods.fVersion\r\n   - [x] uproot4.reading.CommonFileMethods.fBEGIN\r\n   - [x] uproot4.reading.CommonFileMethods.fEND\r\n   - [x] uproot4.reading.CommonFileMethods.fSeekFree\r\n   - [x] uproot4.reading.CommonFileMethods.nfree\r\n   - [x] uproot4.reading.CommonFileMethods.fNbytesName\r\n   - [x] uproot4.reading.CommonFileMethods.fUnits\r\n   - [x] uproot4.reading.CommonFileMethods.fCompress\r\n   - [x] uproot4.reading.CommonFileMethods.fSeekInfo\r\n   - [x] uproot4.reading.CommonFileMethods.fNbytesInfo\r\n   - [x] uproot4.reading.CommonFileMethods.fNbytesFree\r\n   - [x] uproot4.reading.CommonFileMethods.fUUID\r\n   - [x] uproot4.reading.DetachedFile\r\n   - [x] uproot4.reading.ReadOnlyFile\r\n   - [x] uproot4.reading.ReadOnlyFile.detached\r\n   - [x] uproot4.reading.ReadOnlyFile.close\r\n   - [x] uproot4.reading.ReadOnlyFile.closed\r\n   - [x] uproot4.reading.ReadOnlyFile.source\r\n   - [x] uproot4.reading.ReadOnlyFile.object_cache\r\n   - [x] uproot4.reading.ReadOnlyFile.array_cache\r\n   - [x] uproot4.reading.ReadOnlyFile.root_directory\r\n   - [x] uproot4.reading.ReadOnlyFile.show_streamers\r\n   - [x] uproot4.reading.ReadOnlyFile.streamers\r\n   - [x] uproot4.reading.ReadOnlyFile.streamer_rules\r\n   - [x] uproot4.reading.ReadOnlyFile.streamers_named\r\n   - [x] uproot4.reading.ReadOnlyFile.streamer_named\r\n   - [x] uproot4.reading.ReadOnlyFile.streamer_dependencies\r\n   - [x] uproot4.reading.ReadOnlyFile.custom_classes\r\n   - [x] uproot4.reading.ReadOnlyFile.remove_class_definition\r\n   - [x] uproot4.reading.ReadOnlyFile.class_named\r\n   - [x] uproot4.reading.ReadOnlyFile.chunk\r\n   - [x] uproot4.reading.ReadOnlyFile.begin_chunk\r\n   - [x] uproot4.reading.ReadOnlyFile.hook_before_create_source\r\n   - [x] uproot4.reading.ReadOnlyFile.hook_before_get_chunks\r\n   - [x] uproot4.reading.ReadOnlyFile.hook_before_read\r\n   - [x] uproot4.reading.ReadOnlyFile.hook_after_read\r\n   - [x] uproot4.reading.ReadOnlyFile.hook_before_read_streamer_key\r\n   - [x] uproot4.reading.ReadOnlyFile.hook_before_decompress_streamers\r\n   - [x] uproot4.reading.ReadOnlyFile.hook_before_read_streamers\r\n   - [x] uproot4.reading.ReadOnlyFile.hook_after_read_streamers\r\n   - [x] uproot4.reading.ReadOnlyDirectory\r\n   - [x] uproot4.reading.ReadOnlyDirectory.path\r\n   - [x] uproot4.reading.ReadOnlyDirectory.cursor\r\n   - [x] uproot4.reading.ReadOnlyDirectory.file\r\n   - [x] uproot4.reading.ReadOnlyDirectory.parent\r\n   - [x] uproot4.reading.ReadOnlyDirectory.header_key\r\n   - [x] uproot4.reading.ReadOnlyDirectory.is_64bit\r\n   - [x] uproot4.reading.ReadOnlyDirectory.object_path\r\n   - [x] uproot4.reading.ReadOnlyDirectory.cache_key\r\n   - [x] uproot4.reading.ReadOnlyDirectory.object_cache\r\n   - [x] uproot4.reading.ReadOnlyDirectory.array_cache\r\n   - [x] uproot4.reading.ReadOnlyDirectory.show_streamers\r\n   - [x] uproot4.reading.ReadOnlyDirectory.close\r\n   - [x] uproot4.reading.ReadOnlyDirectory.closed\r\n   - [x] uproot4.reading.ReadOnlyDirectory.key\r\n   - [x] uproot4.reading.ReadOnlyDirectory.keys\r\n   - [x] uproot4.reading.ReadOnlyDirectory.values\r\n   - [x] uproot4.reading.ReadOnlyDirectory.items\r\n   - [x] uproot4.reading.ReadOnlyDirectory.classnames\r\n   - [x] uproot4.reading.ReadOnlyDirectory.iterkeys\r\n   - [x] uproot4.reading.ReadOnlyDirectory.itervalues\r\n   - [x] uproot4.reading.ReadOnlyDirectory.iteritems\r\n   - [x] uproot4.reading.ReadOnlyDirectory.iterclassnames\r\n   - [x] uproot4.reading.ReadOnlyDirectory.classname_of\r\n   - [x] uproot4.reading.ReadOnlyDirectory.streamer_of\r\n   - [x] uproot4.reading.ReadOnlyDirectory.class_of\r\n   - [x] uproot4.reading.ReadOnlyDirectory.streamer_dependencies\r\n   - [x] uproot4.reading.ReadOnlyDirectory.fVersion\r\n   - [x] uproot4.reading.ReadOnlyDirectory.fDatimeC\r\n   - [x] uproot4.reading.ReadOnlyDirectory.fDatimeM\r\n   - [x] uproot4.reading.ReadOnlyDirectory.fNbytesKeys\r\n   - [x] uproot4.reading.ReadOnlyDirectory.fNbytesName\r\n   - [x] uproot4.reading.ReadOnlyDirectory.fSeekDir\r\n   - [x] uproot4.reading.ReadOnlyDirectory.fSeekParent\r\n   - [x] uproot4.reading.ReadOnlyDirectory.fSeekKeys\r\n   - [x] uproot4.reading.ReadOnlyDirectory.hook_before_read\r\n   - [x] uproot4.reading.ReadOnlyDirectory.hook_before_header_key\r\n   - [x] uproot4.reading.ReadOnlyDirectory.hook_before_keys\r\n   - [x] uproot4.reading.ReadOnlyDirectory.hook_after_read\r\n   - [x] uproot4.reading.ReadOnlyKey\r\n   - [x] uproot4.reading.ReadOnlyKey.cursor\r\n   - [x] uproot4.reading.ReadOnlyKey.file\r\n   - [x] uproot4.reading.ReadOnlyKey.parent\r\n   - [x] uproot4.reading.ReadOnlyKey.name\r\n   - [x] uproot4.reading.ReadOnlyKey.classname\r\n   - [x] uproot4.reading.ReadOnlyKey.object_path\r\n   - [x] uproot4.reading.ReadOnlyKey.cache_key\r\n   - [x] uproot4.reading.ReadOnlyKey.is_64bit\r\n   - [x] uproot4.reading.ReadOnlyKey.is_compressed\r\n   - [x] uproot4.reading.ReadOnlyKey.data_compressed_bytes\r\n   - [x] uproot4.reading.ReadOnlyKey.data_uncompressed_bytes\r\n   - [x] uproot4.reading.ReadOnlyKey.data_cursor\r\n   - [x] uproot4.reading.ReadOnlyKey.get\r\n   - [x] uproot4.reading.ReadOnlyKey.get_uncompressed_chunk_cursor\r\n   - [x] uproot4.reading.ReadOnlyKey.fNbytes\r\n   - [x] uproot4.reading.ReadOnlyKey.fVersion\r\n   - [x] uproot4.reading.ReadOnlyKey.fObjlen\r\n   - [x] uproot4.reading.ReadOnlyKey.fDatime\r\n   - [x] uproot4.reading.ReadOnlyKey.fKeylen\r\n   - [x] uproot4.reading.ReadOnlyKey.fCycle\r\n   - [x] uproot4.reading.ReadOnlyKey.fSeekKey\r\n   - [x] uproot4.reading.ReadOnlyKey.fSeekPdir\r\n   - [x] uproot4.reading.ReadOnlyKey.fClassName\r\n   - [x] uproot4.reading.ReadOnlyKey.fName\r\n   - [x] uproot4.reading.ReadOnlyKey.fTitle\r\n   - [x] uproot4.reading.ReadOnlyKey.hook_before_read\r\n   - [x] uproot4.reading.ReadOnlyKey.hook_before_read_strings\r\n   - [x] uproot4.reading.ReadOnlyKey.hook_after_read\r\n\r\n### uproot4.streamers\r\n\r\n   - [x] uproot4.streamers.Model_TStreamerInfo\r\n   - [x] uproot4.streamers.Model_TStreamerInfo.show\r\n   - [x] uproot4.streamers.Model_TStreamerInfo.name\r\n   - [x] uproot4.streamers.Model_TStreamerInfo.typename\r\n   - [x] uproot4.streamers.Model_TStreamerInfo.elements\r\n   - [x] uproot4.streamers.Model_TStreamerInfo.class_version\r\n   - [x] uproot4.streamers.Model_TStreamerInfo.class_code\r\n   - [x] uproot4.streamers.Model_TStreamerInfo.new_class\r\n   - [x] uproot4.streamers.Model_TStreamerInfo.file_uuid\r\n   - [x] uproot4.streamers.Model_TStreamerInfo.walk_members\r\n   - [x] uproot4.streamers.Model_TStreamerElement\r\n   - [x] uproot4.streamers.Model_TStreamerElement.show\r\n   - [x] uproot4.streamers.Model_TStreamerElement.name\r\n   - [x] uproot4.streamers.Model_TStreamerElement.title\r\n   - [x] uproot4.streamers.Model_TStreamerElement.typename\r\n   - [x] uproot4.streamers.Model_TStreamerElement.array_length\r\n   - [x] uproot4.streamers.Model_TStreamerElement.file_uuid\r\n   - [x] uproot4.streamers.Model_TStreamerElement.fType\r\n   - [x] uproot4.streamers.Model_TStreamerArtificial\r\n   - [x] uproot4.streamers.Model_TStreamerBase\r\n   - [x] uproot4.streamers.Model_TStreamerBase.base_version\r\n   - [x] uproot4.streamers.Model_TStreamerBasicPointer\r\n   - [x] uproot4.streamers.Model_TStreamerBasicPointer.count_name\r\n   - [x] uproot4.streamers.Model_TStreamerBasicType\r\n   - [x] uproot4.streamers.Model_TStreamerLoop\r\n   - [x] uproot4.streamers.Model_TStreamerLoop.count_name\r\n   - [x] uproot4.streamers.Model_TStreamerSTL\r\n   - [x] uproot4.streamers.Model_TStreamerSTL.fCtype\r\n   - [x] uproot4.streamers.Model_TStreamerSTL.stl_type\r\n   - [x] uproot4.streamers.Model_TStreamerSTLstring\r\n   - [x] uproot4.streamers.pointer_types\r\n   - [x] uproot4.streamers.Model_TStreamerObjectAnyPointer\r\n   - [x] uproot4.streamers.Model_TStreamerObjectPointer\r\n   - [x] uproot4.streamers.object_types\r\n   - [x] uproot4.streamers.Model_TStreamerObject\r\n   - [x] uproot4.streamers.Model_TStreamerObjectAny\r\n   - [x] uproot4.streamers.Model_TStreamerString\r\n\r\n### uproot4.deserialization\r\n\r\n   - [x] uproot4.deserialization.compile_class\r\n   - [x] uproot4.deserialization.numbytes_version\r\n   - [x] uproot4.deserialization.numbytes_check\r\n   - [x] uproot4.deserialization.read_object_any\r\n   - [x] uproot4.deserialization.DeserializationError\r\n   - [x] uproot4.deserialization.DeserializationError.debug\r\n   - [x] uproot4.deserialization.DeserializationError.array\r\n   - [x] uproot4.deserialization.DeserializationError.partial_object\r\n\r\n### uproot4.model\r\n\r\n   - [x] uproot4.model.bootstrap_classnames\r\n   - [x] uproot4.model.bootstrap_classes\r\n   - [x] uproot4.model.reset_classes\r\n   - [x] uproot4.model.classname_decode\r\n   - [x] uproot4.model.classname_encode\r\n   - [x] uproot4.model.classname_pretty\r\n   - [x] uproot4.model.classname_version\r\n   - [x] uproot4.model.class_named\r\n   - [x] uproot4.model.has_class_named\r\n   - [x] uproot4.model.maybe_custom_classes\r\n   - [x] uproot4.model.Model\r\n   - [x] uproot4.model.Model.classname\r\n   - [x] uproot4.model.Model.encoded_classname\r\n   - [x] uproot4.model.Model.class_version\r\n   - [x] uproot4.model.Model.cursor\r\n   - [x] uproot4.model.Model.file\r\n   - [x] uproot4.model.Model.close\r\n   - [x] uproot4.model.Model.closed\r\n   - [x] uproot4.model.Model.parent\r\n   - [x] uproot4.model.Model.concrete\r\n   - [x] uproot4.model.Model.members\r\n   - [x] uproot4.model.Model.has_member\r\n   - [x] uproot4.model.Model.member\r\n   - [x] uproot4.model.Model.all_members\r\n   - [x] uproot4.model.Model.bases\r\n   - [x] uproot4.model.Model.base\r\n   - [x] uproot4.model.Model.num_bytes\r\n   - [x] uproot4.model.Model.instance_version\r\n   - [x] uproot4.model.Model.is_memberwise\r\n   - [x] uproot4.model.Model.awkward_form\r\n   - [x] uproot4.model.Model.strided_interpretation\r\n   - [x] uproot4.model.Model.tojson\r\n   - [x] uproot4.model.Model.empty\r\n   - [x] uproot4.model.Model.read\r\n   - [x] uproot4.model.Model.read_numbytes_version\r\n   - [x] uproot4.model.Model.read_members\r\n   - [x] uproot4.model.Model.check_numbytes\r\n   - [x] uproot4.model.Model.postprocess\r\n   - [x] uproot4.model.Model.hook_before_read\r\n   - [x] uproot4.model.Model.hook_before_read_members\r\n   - [x] uproot4.model.Model.hook_after_read_members\r\n   - [x] uproot4.model.Model.hook_before_postprocess\r\n   - [x] uproot4.model.VersionedModel\r\n   - [x] uproot4.model.VersionedModel.class_named\r\n   - [x] uproot4.model.DispatchByVersion\r\n   - [x] uproot4.model.DispatchByVersion.awkward_form\r\n   - [x] uproot4.model.DispatchByVersion.strided_interpretation\r\n   - [x] uproot4.model.DispatchByVersion.class_of_version\r\n   - [x] uproot4.model.DispatchByVersion.has_version\r\n   - [x] uproot4.model.DispatchByVersion.new_class\r\n   - [x] uproot4.model.DispatchByVersion.postprocess\r\n   - [x] uproot4.model.DispatchByVersion.read\r\n   - [x] uproot4.model.UnknownClass\r\n   - [x] uproot4.model.UnknownClass.chunk\r\n   - [x] uproot4.model.UnknownClass.context\r\n   - [x] uproot4.model.UnknownClass.debug\r\n   - [x] uproot4.model.UnknownClassVersion\r\n   - [x] uproot4.model.UnknownClassVersion.chunk\r\n   - [x] uproot4.model.UnknownClassVersion.context\r\n   - [x] uproot4.model.UnknownClassVersion.debug\r\n   - [x] uproot4.model.DynamicModel\r\n\r\n### uproot4.models\r\n\r\n### uproot4.models.RNTuple\r\n\r\n   - [x] uproot4.models.RNTuple.Model_ROOT_3a3a_Experimental_3a3a_RNTuple\r\n\r\n### uproot4.models.TArray\r\n\r\n   - [x] uproot4.models.TArray.Model_TArray\r\n   - [x] uproot4.models.TArray.Model_TArrayC\r\n   - [x] uproot4.models.TArray.Model_TArrayS\r\n   - [x] uproot4.models.TArray.Model_TArrayI\r\n   - [x] uproot4.models.TArray.Model_TArrayL\r\n   - [x] uproot4.models.TArray.Model_TArrayL64\r\n   - [x] uproot4.models.TArray.Model_TArrayF\r\n   - [x] uproot4.models.TArray.Model_TArrayD\r\n\r\n### uproot4.models.TAtt\r\n\r\n   - [x] uproot4.models.TAtt.Model_TAttLine_v1\r\n   - [x] uproot4.models.TAtt.Model_TAttLine_v2\r\n   - [x] uproot4.models.TAtt.Model_TAttLine\r\n   - [x] uproot4.models.TAtt.Model_TAttFill_v1\r\n   - [x] uproot4.models.TAtt.Model_TAttFill_v2\r\n   - [x] uproot4.models.TAtt.Model_TAttFill\r\n   - [x] uproot4.models.TAtt.Model_TAttMarker_v2\r\n   - [x] uproot4.models.TAtt.Model_TAttMarker\r\n\r\n### uproot4.models.TBasket\r\n\r\n   - [x] uproot4.models.TBasket.Model_TBasket\r\n\r\n### uproot4.models.TBranch\r\n\r\n   - [x] uproot4.models.TBranch.Model_TBranch_v10\r\n   - [x] uproot4.models.TBranch.Model_TBranch_v11\r\n   - [x] uproot4.models.TBranch.Model_TBranch_v12\r\n   - [x] uproot4.models.TBranch.Model_TBranch_v13\r\n   - [x] uproot4.models.TBranch.Model_TBranch\r\n   - [x] uproot4.models.TBranch.Model_TBranchElement_v8\r\n   - [x] uproot4.models.TBranch.Model_TBranchElement_v9\r\n   - [x] uproot4.models.TBranch.Model_TBranchElement_v10\r\n   - [x] uproot4.models.TBranch.Model_TBranchElement\r\n   - [x] uproot4.models.TBranch.Model_TBranchObject_v1\r\n   - [x] uproot4.models.TBranch.Model_TBranchObject\r\n\r\n### uproot4.models.TLeaf\r\n\r\n   - [x] uproot4.models.TLeaf.Model_TLeaf_v2\r\n   - [x] uproot4.models.TLeaf.Model_TLeaf\r\n   - [x] uproot4.models.TLeaf.Model_TLeafB_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafB\r\n   - [x] uproot4.models.TLeaf.Model_TLeafS_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafS\r\n   - [x] uproot4.models.TLeaf.Model_TLeafI_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafI\r\n   - [x] uproot4.models.TLeaf.Model_TLeafL_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafL\r\n   - [x] uproot4.models.TLeaf.Model_TLeafF_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafF\r\n   - [x] uproot4.models.TLeaf.Model_TLeafD_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafD\r\n   - [x] uproot4.models.TLeaf.Model_TLeafD32_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafD32\r\n   - [x] uproot4.models.TLeaf.Model_TLeafF16_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafF16\r\n   - [x] uproot4.models.TLeaf.Model_TLeafC_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafC\r\n   - [x] uproot4.models.TLeaf.Model_TLeafO_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafO\r\n   - [x] uproot4.models.TLeaf.Model_TLeafElement_v1\r\n   - [x] uproot4.models.TLeaf.Model_TLeafElement\r\n\r\n### uproot4.models.THashList\r\n\r\n   - [x] uproot4.models.THashList.Model_THashList\r\n\r\n### uproot4.models.TList\r\n\r\n   - [x] uproot4.models.TList.Model_TList\r\n\r\n### uproot4.models.TNamed\r\n\r\n   - [x] uproot4.models.TNamed.Model_TNamed\r\n\r\n### uproot4.models.TObjArray\r\n\r\n   - [x] uproot4.models.TObjArray.Model_TObjArray\r\n   - [x] uproot4.models.TObjArray.Model_TObjArrayOfTBaskets\r\n\r\n### uproot4.models.TObject\r\n\r\n   - [x] uproot4.models.TObject.Model_TObject\r\n\r\n### uproot4.models.TObjString\r\n\r\n   - [x] uproot4.models.TObjString.Model_TObjString\r\n\r\n### uproot4.models.TRef\r\n\r\n   - [x] uproot4.models.TRef.Model_TRef\r\n   - [x] uproot4.models.TRef.Model_TRefArray\r\n\r\n### uproot4.models.TString\r\n\r\n   - [x] uproot4.models.TString.Model_TString\r\n\r\n### uproot4.models.TTree\r\n\r\n   - [x] uproot4.models.TTree.Model_ROOT_3a3a_TIOFeatures\r\n   - [x] uproot4.models.TTree.Model_TTree\r\n   - [x] uproot4.models.TTree.Model_TTree_v16\r\n   - [x] uproot4.models.TTree.Model_TTree_v17\r\n   - [x] uproot4.models.TTree.Model_TTree_v18\r\n   - [x] uproot4.models.TTree.Model_TTree_v19\r\n   - [x] uproot4.models.TTree.Model_TTree_v20\r\n\r\n### uproot4.behaviors\r\n\r\n### uproot4.interpretation\r\n\r\n   - [x] uproot4.interpretation.Interpretation\r\n   - [x] uproot4.interpretation.Interpretation.cache_key\r\n   - [x] uproot4.interpretation.Interpretation.typename\r\n   - [x] uproot4.interpretation.Interpretation.numpy_dtype\r\n   - [x] uproot4.interpretation.Interpretation.awkward_form\r\n   - [x] uproot4.interpretation.Interpretation.basket_array\r\n   - [x] uproot4.interpretation.Interpretation.final_array\r\n   - [x] uproot4.interpretation.Interpretation.hook_before_basket_array\r\n   - [x] uproot4.interpretation.Interpretation.hook_after_basket_array\r\n   - [x] uproot4.interpretation.Interpretation.hook_before_final_array\r\n   - [x] uproot4.interpretation.Interpretation.hook_before_library_finalize\r\n   - [x] uproot4.interpretation.Interpretation.hook_after_final_array\r\n\r\n### uproot4.interpretation.numerical\r\n\r\n   - [x] uproot4.interpretation.numerical.Numerical\r\n   - [x] uproot4.interpretation.numerical.AsDtype\r\n   - [x] uproot4.interpretation.numerical.AsDtype.from_dtype\r\n   - [x] uproot4.interpretation.numerical.AsDtype.to_dtype\r\n   - [x] uproot4.interpretation.numerical.AsDtype.itemsize\r\n   - [x] uproot4.interpretation.numerical.AsDtypeInPlace\r\n   - [x] uproot4.interpretation.numerical.AsSTLBits\r\n   - [x] uproot4.interpretation.numerical.TruncatedNumerical\r\n   - [x] uproot4.interpretation.numerical.TruncatedNumerical.low\r\n   - [x] uproot4.interpretation.numerical.TruncatedNumerical.high\r\n   - [x] uproot4.interpretation.numerical.TruncatedNumerical.num_bits\r\n   - [x] uproot4.interpretation.numerical.TruncatedNumerical.from_dtype\r\n   - [x] uproot4.interpretation.numerical.TruncatedNumerical.itemsize\r\n   - [x] uproot4.interpretation.numerical.TruncatedNumerical.to_dims\r\n   - [x] uproot4.interpretation.numerical.TruncatedNumerical.truncated\r\n   - [x] uproot4.interpretation.numerical.AsDouble32\r\n   - [x] uproot4.interpretation.numerical.AsDouble32.to_dtype\r\n   - [x] uproot4.interpretation.numerical.AsFloat16\r\n   - [x] uproot4.interpretation.numerical.AsFloat16.to_dtype\r\n\r\n### uproot4.interpretation.jagged\r\n\r\n   - [x] uproot4.interpretation.jagged.AsJagged\r\n   - [x] uproot4.interpretation.jagged.AsJagged.content\r\n   - [x] uproot4.interpretation.jagged.AsJagged.header_bytes\r\n   - [x] uproot4.interpretation.jagged.AsJagged.original\r\n   - [x] uproot4.interpretation.jagged.JaggedArray\r\n   - [x] uproot4.interpretation.jagged.JaggedArray.offsets\r\n   - [x] uproot4.interpretation.jagged.JaggedArray.content\r\n   - [x] uproot4.interpretation.jagged.JaggedArray.parents_localindex\r\n\r\n### uproot4.interpretation.strings\r\n\r\n   - [x] uproot4.interpretation.strings.AsStrings\r\n   - [x] uproot4.interpretation.strings.AsStrings.header_bytes\r\n   - [x] uproot4.interpretation.strings.AsStrings.length_bytes\r\n   - [x] uproot4.interpretation.strings.AsStrings.original\r\n   - [x] uproot4.interpretation.strings.StringArray\r\n   - [x] uproot4.interpretation.strings.StringArray.offsets\r\n   - [x] uproot4.interpretation.strings.StringArray.content\r\n\r\n### uproot4.interpretation.objects\r\n\r\n   - [x] uproot4.interpretation.objects.AsObjects\r\n   - [x] uproot4.interpretation.objects.AsObjects.model\r\n   - [x] uproot4.interpretation.objects.AsObjects.branch\r\n   - [x] uproot4.interpretation.objects.AsObjects.simplify\r\n   - [x] uproot4.interpretation.objects.AsStridedObjects\r\n   - [x] uproot4.interpretation.objects.AsStridedObjects.model\r\n   - [x] uproot4.interpretation.objects.AsStridedObjects.members\r\n   - [x] uproot4.interpretation.objects.AsStridedObjects.original\r\n   - [x] uproot4.interpretation.objects.CannotBeStrided\r\n   - [x] uproot4.interpretation.objects.CannotBeAwkward\r\n   - [x] uproot4.interpretation.objects.ObjectArray\r\n   - [x] uproot4.interpretation.objects.ObjectArray.model\r\n   - [x] uproot4.interpretation.objects.ObjectArray.branch\r\n   - [x] uproot4.interpretation.objects.ObjectArray.context\r\n   - [x] uproot4.interpretation.objects.ObjectArray.byte_offsets\r\n   - [x] uproot4.interpretation.objects.ObjectArray.byte_content\r\n   - [x] uproot4.interpretation.objects.ObjectArray.cursor_offset\r\n   - [x] uproot4.interpretation.objects.ObjectArray.detached_file\r\n   - [x] uproot4.interpretation.objects.StridedObjectArray\r\n   - [x] uproot4.interpretation.objects.StridedObjectArray.interpretation\r\n   - [x] uproot4.interpretation.objects.StridedObjectArray.array\r\n\r\n### uproot4.interpretation.grouped\r\n\r\n   - [x] uproot4.interpretation.grouped.AsGrouped\r\n   - [x] uproot4.interpretation.grouped.AsGrouped.branch\r\n   - [x] uproot4.interpretation.grouped.AsGrouped.subbranches\r\n   - [x] uproot4.interpretation.grouped.Group\r\n\r\n### uproot4.interpretation.library\r\n\r\n   - [x] uproot4.interpretation.library.Library\r\n   - [x] uproot4.interpretation.library.Library.imported\r\n   - [x] uproot4.interpretation.library.Library.empty\r\n   - [x] uproot4.interpretation.library.Library.finalize\r\n   - [x] uproot4.interpretation.library.Library.group\r\n   - [x] uproot4.interpretation.library.Library.global_index\r\n   - [x] uproot4.interpretation.library.Library.concatenate\r\n   - [x] uproot4.interpretation.library.NumPy\r\n   - [x] uproot4.interpretation.library.Awkward\r\n   - [x] uproot4.interpretation.library.Pandas\r\n   - [x] uproot4.interpretation.library.CuPy\r\n\r\n### uproot4.interpretation.identify\r\n\r\n   - [x] uproot4.interpretation.identify.interpretation_of\r\n   - [x] uproot4.interpretation.identify.parse_typename\r\n   - [x] uproot4.interpretation.identify.parse_typename_for_streamer\r\n   - [x] uproot4.interpretation.identify.NotNumerical\r\n   - [x] uproot4.interpretation.identify.UnknownInterpretation\r\n\r\n### uproot4.containers\r\n\r\n   - [x] uproot4.containers.AsContainer\r\n   - [x] uproot4.containers.AsContainer.cache_key\r\n   - [x] uproot4.containers.AsContainer.typename\r\n   - [x] uproot4.containers.AsContainer.awkward_form\r\n   - [x] uproot4.containers.AsContainer.strided_interpretation\r\n   - [x] uproot4.containers.AsContainer.header\r\n   - [x] uproot4.containers.AsContainer.read\r\n   - [x] uproot4.containers.AsDynamic\r\n   - [x] uproot4.containers.AsDynamic.model\r\n   - [x] uproot4.containers.AsFIXME\r\n   - [x] uproot4.containers.AsString\r\n   - [x] uproot4.containers.AsString.length_bytes\r\n   - [x] uproot4.containers.AsPointer\r\n   - [x] uproot4.containers.AsPointer.pointee\r\n   - [x] uproot4.containers.AsArray\r\n   - [x] uproot4.containers.AsArray.speedbump\r\n   - [x] uproot4.containers.AsArray.values\r\n   - [x] uproot4.containers.AsVector\r\n   - [x] uproot4.containers.AsVector.values\r\n   - [x] uproot4.containers.AsSet\r\n   - [x] uproot4.containers.AsSet.keys\r\n   - [x] uproot4.containers.AsMap\r\n   - [x] uproot4.containers.AsMap.keys\r\n   - [x] uproot4.containers.AsMap.values\r\n   - [x] uproot4.containers.Container\r\n   - [x] uproot4.containers.Container.tolist\r\n   - [x] uproot4.containers.STLVector\r\n   - [x] uproot4.containers.STLSet\r\n   - [x] uproot4.containers.STLMap\r\n   - [x] uproot4.containers.STLMap.keys\r\n   - [x] uproot4.containers.STLMap.values\r\n   - [x] uproot4.containers.STLMap.items\r\n   - [x] uproot4.containers.STLMap.get\r\n\r\n### uproot4.compute\r\n\r\n   - [x] uproot4.compute.Compute\r\n   - [x] uproot4.compute.python.ComputePython\r\n   - [x] uproot4.compute.python.ComputePython.functions\r\n   - [x] uproot4.compute.python.ComputePython.getter\r\n   - [x] uproot4.compute.python.ComputePython.free_symbols\r\n   - [x] uproot4.compute.python.ComputePython.compute_expressions\r\n\r\n### uproot4.cache\r\n\r\n   - [x] uproot4.cache.LRUArrayCache\r\n   - [x] uproot4.cache.LRUCache",
  "closed_at":"2020-09-04T22:07:58Z",
  "comments":0,
  "created_at":"2020-09-01T01:32:25Z",
  "draft":false,
  "id":689734496,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDc2NzUwMDU5",
  "number":89,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-04T22:07:58Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Put docstrings on everything.",
  "updated_at":"2020-09-04T22:08:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Edit: sorry, some copy&paste error destroyed the intro :wink: now fixed\r\n\r\n\r\nSo basically what we need is to process many branches of doubly jagged arrays in files which do not fit into memory.\r\n\r\nHere is an example with a small file, showing the structure of such a branch (with uproot3 which falls back to `ObjectArray` and uproot4 which gives a nice awkward1 array):\r\n\r\n```\r\nimport uproot\r\nimport uproot4\r\nfrom km3net_testdata import data_path\r\nprint(uproot.__version__)  # 3.12.0\r\nprint(uproot4.__version__)  # 0.0.20\r\n\r\nfilename = data_path(\"offline/km3net_offline.root\")\r\nf = uproot.open(filename)\r\nf4 = uproot4.open(filename)\r\n\r\nf[\"E/Evt/trks/trks.rec_stages\"].array()\r\n# <ObjectArray [[[1, 3, 5, 4], [1, 3, 5], [1, 3], ...\r\n\r\nf4[\"E/Evt/trks/trks.rec_stages\"].array()\r\n# <Array [[[1, 3, 5, 4], [1, ... 1], [1], [1]]] type='10 * var * var * int64'>\r\n```\r\n\r\nI uploaded a larger file here: http://131.188.167.67:8889/doubly_jagged.root for which `f[\"E/Evt/trks/trks.rec_stages\"].array()` takes extremely long.\r\n\r\nSo I tried to utilise `uproot4.lazy()` and played around with `uproot4.iterate()` but I have not figured out how to read the data iteratively. Here are my naive approaches (based on some\r\n\r\n```python\r\ntrks = uproot4.lazy({\"doubly_jagged.root\": \"E/Evt/trks\"})\r\ntrks[0, \"trks.rec_stages\"]\r\n```\r\n\r\nwhich yiels:\r\n\r\n```\r\nValueError: generated array does not conform to expected form:\r\n\r\n{\r\n    \"class\": \"ListOffsetArray64\",\r\n    \"offsets\": \"i64\",\r\n    \"content\": {\r\n        \"class\": \"ListOffsetArray64\",\r\n        \"offsets\": \"i64\",\r\n        \"content\": \"int32\"\r\n    }\r\n}\r\n\r\nbut generated:\r\n\r\n{\r\n    \"class\": \"ListOffsetArray64\",\r\n    \"offsets\": \"i64\",\r\n    \"content\": {\r\n        \"class\": \"ListOffsetArray64\",\r\n        \"offsets\": \"i64\",\r\n        \"content\": \"int64\"\r\n    }\r\n}\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/0.2.33/src/libawkward/virtual/ArrayGenerator.cpp#L46)\r\n```\r\n\r\nI am not sure why it confuses between `int32` and `int64`, maybe due to empty arrays? No clue...\r\n\r\nping @zinebaly",
  "closed_at":"2020-09-08T15:54:42Z",
  "comments":8,
  "created_at":"2020-09-08T08:57:56Z",
  "id":695689894,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2OTU2ODk4OTQ=",
  "number":90,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Reading large doubly jagged arrays iteratively/lazily?",
  "updated_at":"2020-09-14T17:31:19Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"[Giammi](https://stackoverflow.com/users/14010009/giammi) reminded me that this is a useful function. Once in Pandas form, there's a lot you can do.\r\n\r\nHere: https://stackoverflow.com/questions/63790713/uproot-processing-a-th2d-using-the-uproot-method-pandas/63794125?noredirect=1#comment112844565_63794125",
  "closed_at":"2024-01-30T15:55:19Z",
  "comments":1,
  "created_at":"2020-09-08T13:29:08Z",
  "id":695872641,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2OTU4NzI2NDE=",
  "number":91,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Histograms should have \"to_pandas\" like Uproot 3's \"pandas\" method",
  "updated_at":"2024-01-30T15:55:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-09-08T15:54:42Z",
  "comments":0,
  "created_at":"2020-09-08T15:38:02Z",
  "draft":false,
  "id":695979347,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDgyMTMzMDAz",
  "number":92,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-08T15:54:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes #90 and readies Uproot lazyarray for Awkward ArrayCache weakrefs.",
  "updated_at":"2020-09-08T15:54:45Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"It appears that something is going wrong with reading TH2* histograms compared to ROOT or uproot3. When reading a TH2, the second axis values seem to be reversed, as well as the over and underflow next to each other. I can reproduce it (see below), and it seems like it should be straightforward, but somehow I haven't yet found the source.\r\n\r\n```python\r\nfrom pathlib import Path\r\nfilename = Path(\"reproducer.root\")\r\nif not filename.exists():\r\n    import ROOT\r\n    # Fill to create an identity, but with different number of bins to ensure that we don't accidentally get it right.\r\n    h = ROOT.TH2D(\"test\", \"test\", 10, 0, 10, 12, 0, 12)\r\n    for i in range(0, 10):\r\n        h.Fill(i + 0.5, i + 0.5)\r\n\r\n    f_out = ROOT.TFile(\"reproducer.root\", \"RECREATE\")\r\n    h.Write()\r\n    f_out.Close()\r\n\r\nimport uproot4\r\nimport uproot as uproot3\r\nimport numpy as np\r\n\r\nhist_3 = uproot3.open(\"reproducer.root\")[b\"test\"]\r\nhist_4 = uproot4.open(\"reproducer.root\")[\"test\"]\r\n\r\n# Ignore overflow for now since uproot3.values ignores overflow\r\nnp.testing.assert_allclose(hist_3.values, hist_4.values()[1:-1, 1:-1])\r\n```\r\n\r\nthis gives:\r\n\r\n```\r\nAssertionError:\r\nNot equal to tolerance rtol=1e-07, atol=0\r\n\r\nMismatched elements: 19 / 120 (15.8%)\r\nMax absolute difference: 1.\r\nMax relative difference: 1.\r\n x: array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\r\n       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\r\n       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],...\r\n y: array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\r\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],\r\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],...\r\n```\r\n\r\nJust printing all of the values gives some info. Expected from uproot3 (note: excluding flow bins):\r\n\r\n```python\r\n>>> print(hist_3.values)\r\n[[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]]\r\n```\r\n\r\nUproot4 (note: including flow bins and the reverse):\r\n\r\n```python\r\n>>> print(hist_4.values()[:, ::-1])\r\n[[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\r\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\r\n```\r\n\r\nAny help is appreciated!",
  "closed_at":"2020-09-10T20:20:46Z",
  "comments":2,
  "created_at":"2020-09-09T16:23:25Z",
  "id":696957688,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU2OTY5NTc2ODg=",
  "number":93,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Values read from TH2* are mixed up",
  "updated_at":"2020-09-10T20:20:46Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Raised by @kratsg on Slack:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n...\r\n  File \"/home/kratsg/pyhf/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 945, in arrays\r\n    arrays, expression_context, branchid_interpretation = _regularize_expressions(\r\n  File \"/home/kratsg/pyhf/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 2881, in _regularize_expressions\r\n    _regularize_expression(\r\n  File \"/home/kratsg/pyhf/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 2789, in _regularize_expression\r\n    for symbol in language.free_symbols(\r\n  File \"/home/kratsg/pyhf/lib/python3.8/site-packages/uproot4/language/python.py\", line 365, in free_symbols\r\n    raise uproot4.KeyInFileError(\r\nuproot4.KeyInFileError: not found: 'mjj' because /home/mhance/mario-mapyde/output/VjjQCD_13_mmjj_8000_9000/analysis/histograms.root\r\nin object /presel/hftree;1\r\n```\r\n\r\nshould be\r\n\r\n```python\r\n...\r\n  File \"/home/kratsg/pyhf/lib/python3.8/site-packages/uproot4/language/python.py\", line 365, in free_symbols\r\n    raise uproot4.KeyInFileError(\r\nuproot4.KeyInFileError: not found: 'mjj'\r\nin file /home/mhance/mario-mapyde/output/VjjQCD_13_mmjj_8000_9000/analysis/histograms.root\r\nin object /presel/hftree;1\r\n```",
  "closed_at":"2020-09-09T18:40:22Z",
  "comments":0,
  "created_at":"2020-09-09T18:25:58Z",
  "draft":false,
  "id":697046039,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDgzMDQwMjg0",
  "number":94,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-09T18:40:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Homogenize uses of KeyInFileError",
  "updated_at":"2020-09-09T18:40:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-09-10T13:42:15Z",
  "comments":0,
  "created_at":"2020-09-10T13:30:21Z",
  "draft":false,
  "id":697966837,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDgzODU3NTc3",
  "number":95,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-10T13:42:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Adjust HasBranches.show widths and add '...' so that the '*' at the end of a type doesn't get truncated without fanfare.",
  "updated_at":"2020-09-10T13:42:18Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"As discussed in issue #90.\r\n\r\nCorresponds to scikit-hep/awkward-1.0#448.",
  "closed_at":"2020-09-12T14:50:14Z",
  "comments":5,
  "created_at":"2020-09-10T14:14:07Z",
  "draft":false,
  "id":698025934,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDgzOTExMDY4",
  "number":96,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-12T14:50:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Set up interface between Uproot and Awkward so that Awkward can be used to optimize object-reading.",
  "updated_at":"2020-09-13T07:22:50Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Fixes #93",
  "closed_at":"2020-09-10T20:20:47Z",
  "comments":6,
  "created_at":"2020-09-10T19:05:58Z",
  "draft":false,
  "id":698377531,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDg0MjI3MTc4",
  "number":97,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-10T20:20:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Update TH* behaviors to match uproot3 expectations",
  "updated_at":"2020-09-10T20:20:47Z",
  "user":"MDQ6VXNlcjE1NzE5Mjc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"As far as I can tell, you can only open a root file via a path name?\r\n\r\nI am working with a massive amount of files that are individually in `.tar.gz`s. I would like to access the root files within without explicitly extracting them first.\r\n\r\nRight now I am doing this dance:\r\n\r\n```python\r\nwith tarfile.open('/path/to/DATA.tar.gz', 'r') as tf:\r\n    names = [x for x in tf.getnames() if x.endswith(\".root\")]\r\n    for name in names:\r\n        with tempfile.NamedTemporaryFile() as tmpfile:\r\n            tinfo = tf.getmember(name)\r\n            rootfile = tf.extractfile(tinfo)\r\n            tmpfile.write(rootfile.read(-1))\r\n            tmpfile.seek(0)\r\n            branch = uproot4.lazy(f\"{tmpfile.name}:path/to/branch\")\r\n            result = process(branch)\r\n```\r\n\r\nI would love if I could do something like (probably not fully correct but you get the idea):\r\n\r\n```python\r\nwith tarfile.open('/path/to/DATA.tar.gz', 'r') as tf:\r\n    names = [x for x in tf.getnames() if x.endswith(\".root\")]\r\n    for name in names:\r\n        tinfo = tf.getmember(name)\r\n        rootfile = tf.extractfile(tinfo)\r\n        uprootfile = uproot4.open(rootfile)\r\n        branch = uprootfile.get(\"path/to/branch\")\r\n        result = process(branch)\r\n```",
  "closed_at":"2020-09-12T15:02:02Z",
  "comments":9,
  "created_at":"2020-09-12T13:13:42Z",
  "id":700232914,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MDAyMzI5MTQ=",
  "number":98,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Allow access of a an open file-like object (root file within a `.tar.gz`)",
  "updated_at":"2020-09-13T19:11:01Z",
  "user":"MDQ6VXNlcjQwMDAwOTgx"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Fixes #98.",
  "closed_at":"2020-09-12T15:02:02Z",
  "comments":0,
  "created_at":"2020-09-12T14:49:19Z",
  "draft":false,
  "id":700263061,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDg1OTI2NDY4",
  "number":99,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-12T15:02:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Read file-like objects as a new kind of Uproot Source.",
  "updated_at":"2020-09-12T15:02:07Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"I tried on TH2D graphs and upon the conversion of an imported TH2D using myTH2D.numpy(), the arrays myTH2D.index (y-axis) and myTH2D.column (x-axis) have their dimension **INCREASED** by 1 respect to the respective rows and columns of the matrix myTH2.values (z-axis).",
  "closed_at":"2020-09-14T17:40:25Z",
  "comments":10,
  "created_at":"2020-09-14T13:44:46Z",
  "id":701117961,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MDExMTc5NjE=",
  "number":100,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"The method .numpy discards -inf and inf on x and y axis of imported TH2D",
  "updated_at":"2020-09-14T18:11:10Z",
  "user":"MDQ6VXNlcjExNzU3Mjg0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-09-17T00:58:09Z",
  "comments":0,
  "created_at":"2020-09-15T12:46:16Z",
  "draft":false,
  "id":701899266,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDg3MjcxMzY3",
  "number":101,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-17T00:58:09Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start writing the readthedocs.",
  "updated_at":"2020-09-17T00:58:12Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Noticed this: https://github.com/scikit-hep/uproot4/blob/21047924d1092a3bcd077774474edf1b5b4acaa8/uproot4/behaviors/TBranch.py#L1103-L1106\r\n\r\nIt appears that the documentation implies `report, events = ttree.iterate()` when it's actually `events, report = ttree.iterate()`.",
  "closed_at":"2020-09-17T00:58:09Z",
  "comments":1,
  "created_at":"2020-09-16T16:43:43Z",
  "id":702916333,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MDI5MTYzMzM=",
  "number":102,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"ttree.iterate documentation bug",
  "updated_at":"2020-09-17T00:58:09Z",
  "user":"MDQ6VXNlcjc2MTQ4Mw=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Not sure quite how to explain it, but it seems like the reliance on numpy's `mmap` is causing an inability to handle opening many files at once.\r\n\r\n```\r\n$ python\r\n>>> import uproot\r\nu>>> uproot.version.version\r\n'3.12.0'\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> exit()\r\n```\r\n\r\nversus\r\n\r\n\r\n```\r\n>>> import uproot4 as uproot\r\n>>> uproot.version.version\r\n'0.0.23'\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\n>>> a = uproot.open(\"/nfs/slac/atlas/fs1/d/yuzhan/collinearw_files/June2020_Production/merged_files/Wj_AB212108_v2_mc16a.root\")\r\nTraceback (most recent call last):\r\n  File \"/gpfs/slac/atlas/fs1/u/gstark/collinearw/py3/lib/python3.6/site-packages/uproot4/source/file.py\", line 110, in __init__\r\n    self._file = numpy.memmap(self._file_path, dtype=self._dtype, mode=\"r\")\r\n  File \"/gpfs/slac/atlas/fs1/u/gstark/collinearw/py3/lib/python3.6/site-packages/numpy/core/memmap.py\", line 264, in __new__\r\n    mm = mmap.mmap(fid.fileno(), bytes, access=acc, offset=start)\r\nOSError: [Errno 12] Cannot allocate memory\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/gpfs/slac/atlas/fs1/u/gstark/collinearw/py3/lib/python3.6/site-packages/uproot4/reading.py\", line 142, in open\r\n    **options  # NOTE: a comma after **options breaks Python 2\r\n  File \"/gpfs/slac/atlas/fs1/u/gstark/collinearw/py3/lib/python3.6/site-packages/uproot4/reading.py\", line 537, in __init__\r\n    file_path, **self._options  # NOTE: a comma after **options breaks Python 2\r\n  File \"/gpfs/slac/atlas/fs1/u/gstark/collinearw/py3/lib/python3.6/site-packages/uproot4/source/file.py\", line 117, in __init__\r\n    file_path, **opts  # NOTE: a comma after **opts breaks Python 2\r\n  File \"/gpfs/slac/atlas/fs1/u/gstark/collinearw/py3/lib/python3.6/site-packages/uproot4/source/file.py\", line 246, in __init__\r\n    [FileResource(file_path) for x in uproot4._util.range(num_workers)]\r\n  File \"/gpfs/slac/atlas/fs1/u/gstark/collinearw/py3/lib/python3.6/site-packages/uproot4/source/futures.py\", line 351, in __init__\r\n    worker.start()\r\n  File \"/cvmfs/sft.cern.ch/lcg/releases/Python/3.6.5-f74f0/x86_64-centos7-gcc8-opt/lib/python3.6/threading.py\", line 846, in start\r\n    _start_new_thread(self._bootstrap, ())\r\nRuntimeError: can't start new thread\r\n>>> exit()\r\n```",
  "closed_at":"2020-09-17T13:29:39Z",
  "comments":11,
  "created_at":"2020-09-17T02:00:17Z",
  "id":703205778,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MDMyMDU3Nzg=",
  "number":103,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Calling uproot.open many times uses up all available threads",
  "updated_at":"2020-09-17T21:53:34Z",
  "user":"MDQ6VXNlcjc2MTQ4Mw=="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Would be convenient to have flow option for values/edges methods on THX matching with the `to_numpy()` method, esp when porting uproot3 code. ",
  "closed_at":"2020-10-30T21:47:54Z",
  "comments":5,
  "created_at":"2020-09-17T12:07:38Z",
  "id":703528456,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MDM1Mjg0NTY=",
  "number":104,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"flow option for values/edges",
  "updated_at":"2020-10-30T21:47:54Z",
  "user":"MDQ6VXNlcjEzMjI2NTAw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-09-17T13:29:39Z",
  "comments":0,
  "created_at":"2020-09-17T13:18:03Z",
  "draft":false,
  "id":703580728,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDg4NjYyNjU2",
  "number":105,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-17T13:29:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Check the type of the user-supplied *_handlers.",
  "updated_at":"2020-09-17T13:29:42Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"It seems, at least for me, that uproot4 is using twice as memory to load a branch compared to uproot3.\r\n\r\nA created a simple but large enough TTree to test this with this script\r\n\r\n```c++\r\n#include <array>\r\n\r\nvoid test() {\r\n    TFile file(\"test.root\", \"recreate\");\r\n    TTree tree(\"tree\", \"test memory leak\");\r\n\r\n    std::array<Float_t, 1000> array;\r\n    tree.Branch(\"array\", &array);\r\n\r\n    for (int i = 0; i < 100000; i++) {\r\n        for (auto &x : array)\r\n            x = i;\r\n        tree.Fill();\r\n    }\r\n    file.Write();\r\n    file.Close();\r\n}\r\n```\r\nAnd them I loaded this file using uproot3 and 4\r\n```python\r\nimport uproot\r\nwith uproot.open('test.root') as file:\r\n    data = file['tree/array'].array()\r\n```\r\n\r\n```python\r\nimport uproot4\r\nwith uproot4.open('test.root') as file:\r\n    data = file['tree/array'].array(library='np')\r\n```\r\nChecking the memory consumption of those processes I got this \r\n```bash\r\n$ ps -e -o command,pid,%mem | grep python\r\npython  21032  10.5   # uproot4\r\npython  21256   5.2   # uproot3\r\n```\r\nThe uproot4 version is using twice as memory, so it seams the data is duplicated in memory. Next I deleted the data array with `del data` in both processes and that release the memory used by the array but the \"duplicated\" data remained in uproot4.\r\n\r\n```bash\r\n$ ps -e -o command,pid,%mem | grep python\r\npython  21032  5.7  # uproot4\r\npython  21256  0.4  # uproot3\r\n```\r\nFor this test I used the 0.23 version of uproot4. I'm doing something wrong or this is indeed a bug?",
  "closed_at":"2020-09-17T21:48:01Z",
  "comments":8,
  "created_at":"2020-09-17T14:50:07Z",
  "id":703660601,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MDM2NjA2MDE=",
  "number":106,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Memory leak",
  "updated_at":"2020-09-17T21:48:01Z",
  "user":"MDQ6VXNlcjM5NjI3MzY2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Fixes #106.",
  "closed_at":"2020-09-17T21:48:01Z",
  "comments":0,
  "created_at":"2020-09-17T20:40:36Z",
  "draft":false,
  "id":703896050,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDg4OTIwNDMw",
  "number":107,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-17T21:48:01Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix memory leak in parallel processing.",
  "updated_at":"2020-09-17T21:48:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"#101 introduced a `print` statement in `iterate`.  Affects `uproot4` versions >0.0.22. I believe this was added for debugging purposes, but is not meant to be in the package.\r\n\r\nReproduce: \r\n- download https://github.com/scikit-hep/scikit-hep-testdata/raw/master/src/skhep_testdata/data/uproot-HZZ.root\r\n- run the script:\r\n\r\n```python\r\nimport uproot4\r\n\r\nfor _ in uproot4.iterate(\"uproot-HZZ.root\"): pass\r\n```\r\n\r\noutput:\r\n```\r\nuproot-HZZ.root 0\r\n```\r\n\r\ndue to https://github.com/scikit-hep/uproot4/blob/1accbe3a70eda72cad954187291ddaec5f36e22d/uproot4/behaviors/TBranch.py#L213",
  "closed_at":"2020-09-18T12:26:43Z",
  "comments":5,
  "created_at":"2020-09-18T12:08:40Z",
  "id":704328349,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MDQzMjgzNDk=",
  "number":108,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Superfluous print statement in iterate",
  "updated_at":"2020-09-18T14:56:24Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Removes a print statement introduced in #101. Closes #108.",
  "closed_at":"2020-09-18T12:26:43Z",
  "comments":2,
  "created_at":"2020-09-18T12:10:29Z",
  "draft":false,
  "id":704329427,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDg5Mjc1NTA3",
  "number":109,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-18T12:26:43Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Remove superfluous print statement",
  "updated_at":"2020-09-18T15:15:04Z",
  "user":"MDQ6VXNlcjQ1MDA5MzU1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-09-18T15:07:25Z",
  "comments":0,
  "created_at":"2020-09-18T14:53:34Z",
  "draft":false,
  "id":704443999,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDg5MzY4MzQ5",
  "number":110,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-18T15:07:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Ensure that we don't check in code with print statements.",
  "updated_at":"2020-09-18T15:07:28Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-09-18T18:40:06Z",
  "comments":0,
  "created_at":"2020-09-18T17:48:09Z",
  "draft":false,
  "id":704551161,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDg5NDU2NDQ3",
  "number":111,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-18T18:40:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Implement TProfile2D's values",
  "updated_at":"2020-09-18T18:40:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-09-18T19:31:01Z",
  "comments":0,
  "created_at":"2020-09-18T19:21:47Z",
  "draft":false,
  "id":704601802,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDg5NDk3ODE4",
  "number":112,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-18T19:31:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Pandas of flat data with a cut applied returned empty tuple; fixed.",
  "updated_at":"2020-09-18T19:31:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Cleaning up a little. setup-minconda has moved. GHA has added a new feature that allows the default shell to be set.\r\n\r\nYou still have way too many quotes on things that don't need them. :P\r\n\r\n(But you are okay to put the contents of `run:` in without quotes?...)",
  "closed_at":"2020-09-19T11:10:33Z",
  "comments":4,
  "created_at":"2020-09-19T01:57:43Z",
  "draft":false,
  "id":704740897,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDg5NjA4ODM3",
  "number":113,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-19T11:10:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"ci: cleanup a bit",
  "updated_at":"2020-09-19T11:10:39Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Compared to `uproot3` I can properly deserialize a `boost::histogram` object that has been stored in a `ROOT` directory or branch.\r\n\r\nHowever I end up with a totally opaque object.\r\n\r\nI look at how you proceed for the `ROOT` histograms (using `member`) and wrapping it in a Python class.\r\n\r\nHowever my objects (the boost histograms) have no member. \r\n\r\nCould you maybe point me in the right direction so that I could get these? I would be happy to contribute the \"behavior\" for these then.",
  "closed_at":"2020-10-30T21:51:39Z",
  "comments":2,
  "created_at":"2020-09-25T15:14:08Z",
  "id":709017526,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MDkwMTc1MjY=",
  "number":115,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Need behaviors (and possibly Models) for boost::histogram objects in ROOT files",
  "updated_at":"2020-10-30T21:51:39Z",
  "user":"MDQ6VXNlcjEwMjU3NDU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"So, for instance, if a user types\r\n\r\n```python\r\ntree.arrays()\r\n```\r\n\r\nand any branch names are things like `\"what # ever\"`, don't make that an expression; make `\"get('what # ever')\"` an expression instead.\r\n\r\nAlso noticed a blocking error (could not find previous iteration's basket data) in HasBranches.iterate if the expression is not the branch name. Fixing the above revealed that brittleness, and now it has been fixed.\r\n\r\nAlso simplified the metadata in `expression_context`.",
  "closed_at":"2020-09-25T20:27:10Z",
  "comments":0,
  "created_at":"2020-09-25T19:39:24Z",
  "draft":false,
  "id":709234183,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDkzMzMyNTIz",
  "number":116,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-25T20:27:10Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Don't assume branch names are expressions",
  "updated_at":"2020-09-25T20:27:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-09-26T12:57:00Z",
  "comments":0,
  "created_at":"2020-09-26T12:39:10Z",
  "draft":false,
  "id":709530551,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDkzNTcyMDAz",
  "number":117,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-26T12:57:00Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Recognize full paths of branch names in expressions if they are exact (don't parse as division).",
  "updated_at":"2020-09-26T12:57:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-09-26T22:39:05Z",
  "comments":0,
  "created_at":"2020-09-26T20:31:56Z",
  "draft":false,
  "id":709606291,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDkzNjI0NTc3",
  "number":118,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-09-26T22:39:05Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix name fetch again.",
  "updated_at":"2020-09-26T22:39:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"`KeyInFileError` currently shows a truncating \"Known keys\" list. This cool regarding the general format of what to ask for instead, but since we quite commonly have files with a large number of branches one still needs to go back to some kind of `[key for key in f.keys() if 'bla' in key]` to find the correct name.\r\n\r\nIt would be really cool if this would instead show closest matches first. I guess this could get computationally pricey, i.e. slow, so maybe it would only get computed if the number of keys was not too crazy? ",
  "closed_at":"2020-10-20T00:24:29Z",
  "comments":5,
  "created_at":"2020-09-30T13:37:56Z",
  "id":711954876,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MTE5NTQ4NzY=",
  "number":119,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"KeyInFileError to show near matches?",
  "updated_at":"2020-10-20T00:24:29Z",
  "user":"MDQ6VXNlcjEzMjI2NTAw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"This is what happens if you call `lazy()` on a path that doesn't exist:\r\n\r\n```python\r\n>>> import uproot4\r\n>>> uproot4.lazy('nonexistent_file.root')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/mproffit/miniconda3/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 585, in lazy\r\n    raise ValueError(\r\nValueError: allow_missing=True and no TTrees found in\r\n\r\n    \r\n```\r\n\r\nObviously this doesn't really indicate the actual problem--that the file doesn't exist. It also strangely claims that `allow_missing=True`, which is not correct since the default is `False`. It says the same thing even if you explicitly set `allow_missing=False`:\r\n\r\n```python\r\n>>> uproot4.lazy('nonexistent_file.root', allow_missing=False)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/mproffit/miniconda3/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 585, in lazy\r\n    raise ValueError(\r\nValueError: allow_missing=True and no TTrees found in\r\n\r\n    \r\n```",
  "closed_at":"2020-10-31T15:31:50Z",
  "comments":1,
  "created_at":"2020-09-30T16:12:43Z",
  "id":712083900,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MTIwODM5MDA=",
  "number":120,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Calling lazy() on a filename that doesn't exist produces confusing error",
  "updated_at":"2020-10-31T15:31:50Z",
  "user":"MDQ6VXNlcjMyNzczMzA0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"I cannot open \r\n```python\r\nuproot4.open(\"https://github.com/CoffeaTeam/coffea/raw/master/tests/samples/nano_dy.root\")\r\n```\r\nyet I can open the place it `302` redirects to:\r\n```python\r\nuproot4.open(\"https://raw.githubusercontent.com/CoffeaTeam/coffea/master/tests/samples/nano_dy.root\")\r\n```",
  "closed_at":"2020-11-20T23:50:29Z",
  "comments":2,
  "created_at":"2020-10-02T21:29:21Z",
  "id":713912634,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MTM5MTI2MzQ=",
  "number":121,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"HTTP protocol doesn't follow redirect",
  "updated_at":"2020-11-20T23:50:29Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"In this CMS open data example, I cannot load a branch's array due to a NotImplementedError\r\n```python\r\n>>> import uproot4\r\n>>> file = uproot4.open(\"root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/ZZTo4mu.root\")\r\n>>> file[\"Events/Muon_eta\"].array(entry_stop=244800)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/ncsmith/src/uproot4/uproot4/behaviors/TBranch.py\", line 2017, in array\r\n    _ranges_or_baskets_to_arrays(\r\n  File \"/Users/ncsmith/src/uproot4/uproot4/behaviors/TBranch.py\", line 3180, in _ranges_or_baskets_to_arrays\r\n    hasbranches._file.source.chunks(ranges, notifications=notifications)\r\n  File \"/Users/ncsmith/src/uproot4/uproot4/source/xrootd.py\", line 263, in chunks\r\n    raise NotImplementedError(\r\nNotImplementedError: TODO: Probably need to fall back to a non-vector read\r\n```\r\nCan this be implemented?",
  "closed_at":"2021-01-18T19:45:47Z",
  "comments":3,
  "created_at":"2020-10-02T21:40:07Z",
  "id":713916906,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MTM5MTY5MDY=",
  "number":122,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"XRootD source doesn't fall back to non-vector read",
  "updated_at":"2021-01-18T19:45:47Z",
  "user":"MDQ6VXNlcjY1ODc0MTI="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"It might make sense to discuss this here. I'm trying to read as much as possible from the current prototype for the DAOD_PHYSLITE format at ATLAS using uproot. The following uses these example root files: [DAOD_PHYSLITE.art.pool.root](https://cernbox.cern.ch/index.php/s/53DqhefxcTGBhCH/download) and [DAOD_PHYSLITE.art_split99.pool.root](https://cernbox.cern.ch/index.php/s/xTuPIvSJsP3QmXa/download). I'm using uproot4 `0.0.27`. The things i currently can't read are the following:\r\n\r\n- Links into multiple other collections (branches whoose names end in \"Links\"). On the one hand those are `vector<vector<...>` and on the other hand a custom type (`ElementLink<DataVector<something>>`). Uproot can read these, but i get some \"Unknown\" objects out:\r\n```pycon\r\n>>> import uproot4\r\n>>> f = uproot4.open(\"DAOD_PHYSLITE.art.pool.root\")\r\n>>> t = f[\"CollectionTree\"]\r\n>>> arrays = t[\"AnalysisElectronsAuxDyn.trackParticleLinks\"].array(library=\"np\")\r\n>>> arrays[8]\r\n<STLVector [[<Unknown ElementLink<DataVector<xAOD::TrackParticle_v1_3e at 0x7fa30578b190>, ...], ...] at 0x7fa30578b2b0>\r\n```\r\nIn principle the data part of these ElementLinks are just an index and a hash to identify the collection linked to. This can be seen for the branches that are just `vector<ElementLink<...>>` (single jagged). ROOT seems to be able to split these for the single-jagged case:\r\n```pycon\r\n>>> t[\"AnalysisJetsAuxDyn.btaggingLink\"]\r\n<TBranchElement 'AnalysisJetsAuxDyn.btaggingLink' (2 subbranches) at 0x7fa304c861c0>\r\n>>> t[\"AnalysisJetsAuxDyn.btaggingLink\"].keys()\r\n['AnalysisJetsAuxDyn.btaggingLink.m_persKey', 'AnalysisJetsAuxDyn.btaggingLink.m_persIndex']\r\n>>> t[\"AnalysisJetsAuxDyn.btaggingLink.m_persIndex\"].array()\r\n<Array [[0, 1, 2, 3, 4, 5, ... 2, 3, 4, 5, 6]] type='100 * var * uint32'>\r\n>>> t[\"AnalysisJetsAuxDyn.btaggingLink.m_persKey\"].array()\r\n<Array [[1030373024, ... 1030373024]] type='100 * var * uint32'>\r\n```\r\nWould there be a reasonable way to also read the multi-jagged links when i know that they should contain these `uint32` numbers (`m_persIndex` and `m_persKey`)? So far i couldn't get ROOT to split them ...\r\n\r\n- When i set the default split level to 99 one more thing ROOT seems to split is a larger structure used for association of soft terms to the MET (branches with names `*METAssoc*.*`). In principle the branches are mostly `vector<vector<float>`, but i get the following error when trying to read them:\r\n\r\n```pycon\r\n>>> import uproot4\r\n>>> f = uproot4.open(\"DAOD_PHYSLITE.art_split99.pool.root\")\r\n>>> t = f[\"CollectionTree\"]\r\n>>> t[\"METAssoc_AnalysisMETAux.trkpx\"].array()\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    t[\"METAssoc_AnalysisMETAux.trkpx\"].array()\r\n  File \"/home/nikolai/.local/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 1984, in array\r\n    interpretation = self.interpretation\r\n  File \"/home/nikolai/.local/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 2120, in interpretation\r\n    self._interpretation = uproot4.interpretation.identify.interpretation_of(\r\n  File \"/home/nikolai/.local/lib/python3.8/site-packages/uproot4/interpretation/identify.py\", line 443, in interpretation_of\r\n    if branch.streamer is not None:\r\n  File \"/home/nikolai/.local/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py\", line 2232, in streamer\r\n    for element in streamerinfo.walk_members(self._file.streamers):\r\n  File \"/home/nikolai/.local/lib/python3.8/site-packages/uproot4/streamers.py\", line 372, in walk_members\r\n    base = streamers[element.name][element.base_version]\r\nKeyError: -1\r\n```\r\n\r\nThe error also occurs when i run `.show()` - both on the branch and on the whole tree.\r\n",
  "closed_at":"2020-10-07T16:14:19Z",
  "comments":8,
  "created_at":"2020-10-06T17:59:53Z",
  "id":715899509,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MTU4OTk1MDk=",
  "number":123,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Reading DAOD_PHYSLITE prototype",
  "updated_at":"2020-10-21T14:30:02Z",
  "user":"MDQ6VXNlcjM3MDcyMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-10-07T16:14:19Z",
  "comments":0,
  "created_at":"2020-10-06T19:31:49Z",
  "draft":false,
  "id":715966028,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NDk4Nzg4MTU4",
  "number":124,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-07T16:14:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Variety of issues raised by an ATLAS xAOD.",
  "updated_at":"2020-10-07T16:14:24Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"We're trying to use ROOT files as a cache for cut information, and right now we're selecting the data we need by iterating through the entire file.\r\n\r\nI was wondering if uproot is aware of TTree indices and might be able to grab data more efficiently, or if that is on the uproot roadmap.\r\n\r\nAdding @bloer since he's interested in this issue as well.\r\n\r\nThanks!",
  "closed_at":"2020-12-02T14:27:38Z",
  "comments":3,
  "created_at":"2020-10-06T20:33:34Z",
  "id":716006256,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MTYwMDYyNTY=",
  "number":125,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"TTree indices awareness in uproot for faster data access from a file?",
  "updated_at":"2020-12-02T14:27:38Z",
  "user":"MDQ6VXNlcjE4NzI3ODQ="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Reading empty branches (without data, but empty lists) with `library=\"ak\"` creates `EmptyArray` contents for the awkward arrays\r\n\r\n```pycon\r\n>>> import skhep_testdata\r\n>>> branch = uproot4.open(skhep_testdata.data_path(\"uproot-vectorVectorDouble.root\"))[\"t/x\"]\r\n>>> branch.array(entry_stop=2, library=\"ak\")\r\n<Array [[], [[], []]] type='2 * var * var * unknown'>\r\n```\r\n\r\nIn some cases this creates an error internally when uproot tries to access `.content`\r\n\r\n```pycon\r\n>>> branch.array(entry_stop=1, library=\"ak\")\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    branch.array(entry_stop=1, library=\"ak\")\r\n  File \"/home/nikolai/python/uproot4/uproot4/behaviors/TBranch.py\", line 2062, in array\r\n    _ranges_or_baskets_to_arrays(\r\n  File \"/home/nikolai/python/uproot4/uproot4/behaviors/TBranch.py\", line 3373, in _ranges_or_baskets_to_arrays\r\n    uproot4.source.futures.delayed_raise(*obj)\r\n  File \"/home/nikolai/python/uproot4/uproot4/source/futures.py\", line 46, in delayed_raise\r\n    raise exception_value.with_traceback(traceback)\r\n  File \"/home/nikolai/python/uproot4/uproot4/behaviors/TBranch.py\", line 3344, in basket_to_array\r\n    arrays[branch.cache_key] = interpretation.final_array(\r\n  File \"/home/nikolai/python/uproot4/uproot4/interpretation/objects.py\", line 230, in final_array\r\n    output = library.finalize(output, branch, self, entry_start, entry_stop)\r\n  File \"/home/nikolai/python/uproot4/uproot4/interpretation/library.py\", line 496, in finalize\r\n    return awkward1.Array(_awkward_json_to_array(awkward1, form, unlabeled))\r\n  File \"/home/nikolai/python/uproot4/uproot4/interpretation/library.py\", line 360, in _awkward_json_to_array\r\n    content = _awkward_json_to_array(awkward1, form[\"content\"], array.content)\r\n  File \"/home/nikolai/python/uproot4/uproot4/interpretation/library.py\", line 360, in _awkward_json_to_array\r\n    content = _awkward_json_to_array(awkward1, form[\"content\"], array.content)\r\nAttributeError: 'awkward1._ext.EmptyArray' object has no attribute 'content'\r\n```\r\n\r\nor when record fields are being accessed (the following uses the example file `DAOD_PHYSLITE.art_split99.pool.root` from #124)\r\n\r\n```pycon\r\n>>> import uproot4\r\n>>> branch = uproot4.open(\"issue-123a.root\")[\"CollectionTree/TruthElectronsAuxDyn.childLinks\"]\r\n>>> branch.array()\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    branch.array()\r\n  File \"/home/nikolai/python/uproot4/uproot4/behaviors/TBranch.py\", line 2062, in array\r\n    _ranges_or_baskets_to_arrays(\r\n  File \"/home/nikolai/python/uproot4/uproot4/behaviors/TBranch.py\", line 3373, in _ranges_or_baskets_to_arrays\r\n    uproot4.source.futures.delayed_raise(*obj)\r\n  File \"/home/nikolai/python/uproot4/uproot4/source/futures.py\", line 46, in delayed_raise\r\n    raise exception_value.with_traceback(traceback)\r\n  File \"/home/nikolai/python/uproot4/uproot4/behaviors/TBranch.py\", line 3344, in basket_to_array\r\n    arrays[branch.cache_key] = interpretation.final_array(\r\n  File \"/home/nikolai/python/uproot4/uproot4/interpretation/objects.py\", line 230, in final_array\r\n    output = library.finalize(output, branch, self, entry_start, entry_stop)\r\n  File \"/home/nikolai/python/uproot4/uproot4/interpretation/library.py\", line 496, in finalize\r\n    return awkward1.Array(_awkward_json_to_array(awkward1, form, unlabeled))\r\n  File \"/home/nikolai/python/uproot4/uproot4/interpretation/library.py\", line 360, in _awkward_json_to_array\r\n    content = _awkward_json_to_array(awkward1, form[\"content\"], array.content)\r\n  File \"/home/nikolai/python/uproot4/uproot4/interpretation/library.py\", line 360, in _awkward_json_to_array\r\n    content = _awkward_json_to_array(awkward1, form[\"content\"], array.content)\r\n  File \"/home/nikolai/python/uproot4/uproot4/interpretation/library.py\", line 335, in _awkward_json_to_array\r\n    contents.append(_awkward_json_to_array(awkward1, subform, array[name]))\r\nValueError: cannot slice EmptyArray by field name\r\n\r\n(https://github.com/scikit-hep/awkward-1.0/blob/0.3.1/src/libawkward/array/EmptyArray.cpp#L321)\r\n```\r\n\r\nI guess the array should have type information, since it is in principle known. It seems to get lost here:\r\n\r\nhttps://github.com/scikit-hep/uproot4/blob/57fafcfd73c40aea21dd19a439c76c79fd370768/uproot4/interpretation/library.py#L493-L495",
  "closed_at":"2020-11-20T20:46:55Z",
  "comments":1,
  "created_at":"2020-10-12T15:14:18Z",
  "id":719458650,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MTk0NTg2NTA=",
  "number":126,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Reading empty branches with library=\"ak\" produces EmptyArray despite known type",
  "updated_at":"2020-11-20T20:46:55Z",
  "user":"MDQ6VXNlcjM3MDcyMjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Fixes #119. \r\n\r\nSeems to work pretty well.\r\n![image](https://user-images.githubusercontent.com/13226500/96505953-20ff7780-1257-11eb-88f1-671520e3f11c.png)\r\n",
  "closed_at":"2020-10-20T00:24:29Z",
  "comments":3,
  "created_at":"2020-10-19T20:04:08Z",
  "draft":false,
  "id":724936655,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTA2MjQ0ODE2",
  "number":127,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-20T00:24:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: show similar keys first on KeyInFile error",
  "updated_at":"2021-03-19T13:46:43Z",
  "user":"MDQ6VXNlcjEzMjI2NTAw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Thanks to your awesome work in  https://github.com/scikit-hep/uproot4/pull/96 the reading of doubly jagged `float64` data is working well (the `f['E/Evt/trks/trks.fitinf']` of the example file). Today I spent more time on the the uproot4 migration of our I/O library and discovered that another doubly jagged branch of type `int32_t` is giving only zeros, however the `interpretation` is of course correct (well interpreted by both uproot3 and uproot4).\r\n\r\nI know that you created a special case for both the `float64` and the `int32_t` cases, so I stepped through with the debugger, which brought me to https://github.com/scikit-hep/awkward-1.0/blob/e1fe6f2497ae007bdddcdbd60a08f7bbec4e1029/src/libawkward/io/uproot.cpp#L125 but now I am stuck since it seems OK to me. Anyways, I create this issue and meanwhile I also try to figure out why it's not working as expected.\r\n\r\nHere is a session which `uproot3` just to show the reference values, which are perfectly fine:\r\n\r\n```python\r\nIn [1]: from km3net_testdata import data_path\r\n\r\nIn [2]: import uproot as uproot3\r\n\r\nIn [3]: f = uproot3.open(data_path(\"offline/km3net_offline.root\"))\r\n\r\nIn [4]: f['E/Evt/trks/trks.rec_stages'].show()\r\ntrks.rec_stages            TStreamerSTL               asgenobj(SimpleArray(STLVector(asdtype('>i4'))))\r\n\r\nIn [5]: f['E/Evt/trks/trks.rec_stages'].array()\r\n/usr/local/lib/python3.8/site-packages/awkward/array/base.py:394: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\r\n  return cls.numpy.array(value, copy=False)\r\nOut[5]: <ObjectArray [[[1, 3, 5, 4], [1, 3, 5], [1, 3], [1, 3], [1, 3], ..., [1], [1], [1], [1]]] at 0x00011627b430>\r\n\r\nIn [6]: f['E/Evt/trks/trks.fitinf'].show()\r\ntrks.fitinf                TStreamerSTL               asgenobj(SimpleArray(STLVector(asdtype('>f8'))))\r\n\r\nIn [7]: f['E/Evt/trks/trks.fitinf'].array()\r\n/usr/local/lib/python3.8/site-packages/awkward/array/base.py:394: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\r\n  return cls.numpy.array(value, copy=False)\r\nOut[7]: <ObjectArray [[[0.004957442219414389, 0.003417848024252858, ... , [], [], [], [], [], []]] at 0x00011627b0d0>\r\n```\r\n\r\nNow the readout with `uproot4`. As you can see the `fitinf` branch is read correctly, but the `rec_stages` give zeroes. The interpretation seems to be fine though:\r\n\r\n```python\r\nIn [1]: import uproot4\r\n\r\nIn [2]: from km3net_testdata import data_path\r\n\r\nIn [3]: f = uproot4.open(data_path(\"offline/km3net_offline.root\"))\r\n\r\nIn [4]: f['E/Evt/trks/trks.rec_stages'].show()\r\nname                 | typename                 | interpretation\r\n---------------------+--------------------------+-------------------------------\r\ntrks.rec_stages      | std::vector<int32_t>*    | AsObjects(AsArray(True, False,\r\nIn [5]: f['E/Evt/trks/trks.rec_stages'].interpretation\r\nOut[5]: AsObjects(AsArray(True, False, AsVector(False, dtype('>i4'))))\r\n\r\nIn [6]: f['E/Evt/trks/trks.rec_stages'].array()\r\nOut[6]: <Array [[[0, 0, 0, 0], [0, ... 0], [0], [0]]] type='10 * var * var * int32'>\r\n\r\nIn [7]: f['E/Evt/trks/trks.fitinf'].show()\r\nname                 | typename                 | interpretation\r\n---------------------+--------------------------+-------------------------------\r\ntrks.fitinf          | std::vector<double>*     | AsObjects(AsArray(True, False,\r\nIn [8]: f['E/Evt/trks/trks.fitinf'].interpretation\r\nOut[8]: AsObjects(AsArray(True, False, AsVector(False, dtype('>f8'))))\r\n\r\nIn [9]: f['E/Evt/trks/trks.fitinf'].array()\r\nOut[9]: <Array [[[0.00496, 0.00342, -295, ... [], []]] type='10 * var * var * float64'>\r\n```",
  "closed_at":"2020-10-30T21:40:32Z",
  "comments":4,
  "created_at":"2020-10-19T23:19:57Z",
  "id":725046085,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MjUwNDYwODU=",
  "number":128,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Doubly jagged int32_t arrays contain only 0s",
  "updated_at":"2020-10-30T21:40:32Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hi, I need to read in multiple root files and convert them into a single pandas or dask dataframe, and I am confused about the implementation  of `uproot.concatenate()` or `uproot.iterate()` and the difference between uproot 3 and 4 in this case. \r\n\r\nif I have inputs like:\r\n```\r\nroot_files = 'data/*.root'\r\nbranches = ['branch1','branch2','branch3']\r\n```\r\n\r\nI've tried `df_generator = uproot4.iterate(root_files, treepath='my_TTree', branches=branches, outputtype=pd.Dataframe)`\r\nand I get the following error:\r\n`TypeError: 'files' must include a TTree/TBranch object path (separated by a colon ':') to each glob pattern (if multiple are given)`\r\n\r\nuproot4 doesn't seem to have a pandas.iterate method so if I do `df_generator = uproot.pandas.iterate(root_files, treepath='my_TTree', branches=branches)`\r\n\r\nI can then generate a dataframe by doing something like:\r\n```\r\ndf_list = [data for data in df_generator]\r\ndf = pd.concat(df_list)\r\n```\r\nHowever this is incredibly slow due to the time it takes to extract each dataframe separately into the list and takes up double the memory it needs to. What would you say is the most efficient way of concatenating multiple root files into a single dataframe? Especially if the end goal is to eventually parallelise with dask or another similar library for large files",
  "closed_at":"2020-10-30T16:39:12Z",
  "comments":4,
  "created_at":"2020-10-23T15:40:38Z",
  "id":728322803,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MjgzMjI4MDM=",
  "number":129,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Reading in multiple root files into pandas/dask DataFrame",
  "updated_at":"2020-10-30T16:39:12Z",
  "user":"MDQ6VXNlcjIwOTExOTg3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I think that `TrivialExecutor.submit` should be returning a `NoFuture`, but it isn't:\r\n\r\nhttps://github.com/scikit-hep/uproot4/blob/824662e51d742c24c868920928c833217b1af2fb/uproot4/source/futures.py#L52-L89\r\n\r\nThis needs to get tested and possibly corrected.",
  "closed_at":"2020-10-30T14:20:05Z",
  "comments":1,
  "created_at":"2020-10-29T15:19:54Z",
  "id":732409096,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzI0MDkwOTY=",
  "number":130,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Uproot's use of TrivialExecutor/NoFuture is undertested",
  "updated_at":"2020-10-30T14:20:05Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"## Issue description\r\nThis is an issue regarding the question posted here: https://stackoverflow.com/questions/64565208/how-can-i-load-many-very-large-files-using-uproot\r\n\r\nWhen loading 3 files of about 9 GB each onto a lazy array, the code crashes when the event loop reaches the borders between the first and second files producing a deserialization error. The code works flawlessly with small (~ 1 GB) files. Way of access (local vs XRootD) also doesn't seem to affect the issue. The error message is the following:\r\n```\r\nTraceback (most recent call last):\r\n  File \"scripts/plotEventShapes_lazy.py\", line 44, in <module>\r\n    tracks_x = events['Tracks.fCoordinates.fX'][ievt]\r\n  File \"/Users/chrispap/Library/Python/3.8/lib/python/site-packages/awkward1/highlevel.py\", line 946, in __getitem__\r\n    self._layout[where], self._behavior, cache=self._cache\r\n  File \"/Users/chrispap/Library/Python/3.8/lib/python/site-packages/awkward1/partition.py\", line 366, in __getitem__\r\n    return PartitionedArray.from_ext(self._ext.getitem_at(where))\r\n  File \"/Users/chrispap/Library/Python/3.8/lib/python/site-packages/uproot4/behaviors/TBranch.py\", line 1621, in array\r\n    _ranges_or_baskets_to_arrays(\r\n  File \"/Users/chrispap/Library/Python/3.8/lib/python/site-packages/uproot4/behaviors/TBranch.py\", line 518, in _ranges_or_baskets_to_arrays\r\n    uproot4.source.futures.delayed_raise(*obj)\r\n  File \"/Users/chrispap/Library/Python/3.8/lib/python/site-packages/uproot4/source/futures.py\", line 37, in delayed_raise\r\n    raise exception_value.with_traceback(traceback)\r\n  File \"/Users/chrispap/Library/Python/3.8/lib/python/site-packages/uproot4/behaviors/TBranch.py\", line 444, in chunk_to_basket\r\n    basket = uproot4.models.TBasket.Model_TBasket.read(\r\n  File \"/Users/chrispap/Library/Python/3.8/lib/python/site-packages/uproot4/model.py\", line 128, in read\r\n    self.read_members(chunk, cursor, context, file)\r\n  File \"/Users/chrispap/Library/Python/3.8/lib/python/site-packages/uproot4/models/TBasket.py\", line 55, in read_members\r\n    ) = cursor.fields(chunk, _tbasket_format2, context)\r\n  File \"/Users/chrispap/Library/Python/3.8/lib/python/site-packages/uproot4/source/cursor.py\", line 168, in fields\r\n    return format.unpack(chunk.get(start, stop, self, context))\r\n  File \"/Users/chrispap/Library/Python/3.8/lib/python/site-packages/uproot4/source/chunk.py\", line 278, in get\r\n    raise uproot4.deserialization.DeserializationError(\r\nuproot4.deserialization.DeserializationError: while reading\r\n\r\n    TBasket version None as uproot4.models.TBasket.Model_TBasket (? bytes)\r\n        fNbytes: -1607368158\r\n        fObjlen: -1243566277\r\n        fDatime: 2634931141\r\n        fKeylen: -27664\r\n        fCycle: 21409\r\n\r\nattempting to get bytes 483015:483033\r\noutside expected range 510698:538758 for this Chunk\r\nin file /Users/chrispap/QCD/Autumn18.QCD_HT1500to2000_TuneCP5_13TeV-madgraphMLM-pythia8_RA2AnalysisTree.root\r\n```\r\n\r\n## Reproduction instructions\r\nThe three very large files (9 GB each) are the following:\r\n```\r\nroot://cmseos.fnal.gov//store/user/kdipetri/SUEP/Production_v0.2/2018/NTUP/Autumn18.QCD_HT1000to1500_TuneCP5_13TeV-madgraphMLM-pythia8_RA2AnalysisTree.root\r\nroot://cmseos.fnal.gov//store/user/kdipetri/SUEP/Production_v0.2/2018/NTUP/Autumn18.QCD_HT1500to2000_TuneCP5_13TeV-madgraphMLM-pythia8_RA2AnalysisTree.root\r\nroot://cmseos.fnal.gov//store/user/kdipetri/SUEP/Production_v0.2/2018/NTUP/Autumn18.QCD_HT2000toInf_TuneCP5_13TeV-madgraphMLM-pythia8_RA2AnalysisTree.root\r\n```\r\nTwo smaller files (1 GB) for which the code works nicely:\r\n```\r\nroot://cmseos.fnal.gov//store/user/kdipetri/SUEP/Production_v0.2/2018/NTUP/PrivateSamples.SUEP_2018_mMed-1000_mDark-2_temp-2_decay-darkPho_13TeV-pythia8_n-100_0_RA2AnalysisTree.root\r\nroot://cmseos.fnal.gov//store/user/kdipetri/SUEP/Production_v0.2/2018/NTUP/PrivateSamples.SUEP_2018_mMed-1000_mDark-2_temp-2_decay-darkPhoHad_13TeV-pythia8_n-100_0_RA2AnalysisTree.root\r\n```\r\nThe following code reproduces the issue using the files that I cite above:\r\n```python\r\nimport uproot4 as uproot\r\nimport uproot_methods\r\nimport awkward1 as ak\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n# Get the file and import using uproot\r\nbase = 'root://cmseos.fnal.gov//store/user/kdipetri/SUEP/Production_v0.2/2018/NTUP/'\r\n#base = '/Users/chrispap/QCD/'\r\ndatasets = {\r\n    base + 'Autumn18.QCD_HT1000to1500_TuneCP5_13TeV-madgraphMLM-pythia8_RA2AnalysisTree.root': 'TreeMaker2/PreSelection',\r\n    base + 'Autumn18.QCD_HT1500to2000_TuneCP5_13TeV-madgraphMLM-pythia8_RA2AnalysisTree.root': 'TreeMaker2/PreSelection',\r\n    base + 'Autumn18.QCD_HT2000toInf_TuneCP5_13TeV-madgraphMLM-pythia8_RA2AnalysisTree.root': 'TreeMaker2/PreSelection',\r\n}\r\n\r\nevents = uproot.lazy(datasets)\r\n\r\nmultiplicity = np.zeros(len(events['Tracks.fCoordinates.fX']))\r\nfor ievt in range(99000,len(events['Tracks.fCoordinates.fX'])):\r\n    if ievt%1000 == 0:\r\n        print(\"Processing event %d. Progress: %.2f%%\"%(ievt,100*ievt/len(events['Tracks.fCoordinates.fX'])))\r\n    if events['HT'][ievt] < 1200:\r\n        multiplicity[ievt] = -1\r\n        continue\r\n    tracks_x = events['Tracks.fCoordinates.fX'][ievt]\r\n    tracks_y = events['Tracks.fCoordinates.fY'][ievt]\r\n    tracks_z = events['Tracks.fCoordinates.fZ'][ievt]\r\n    tracks_E = np.sqrt(tracks_x**2+tracks_y**2+tracks_z**2+0.13957**2)\r\n    tracks = uproot_methods.TLorentzVectorArray.from_cartesian(ak.to_awkward0(tracks_x),\r\n                                                               ak.to_awkward0(tracks_y),\r\n                                                               ak.to_awkward0(tracks_z),\r\n                                                               ak.to_awkward0(tracks_E))\r\n    tracks_fromPV0 = events['Tracks_fromPV0'][ievt]\r\n    tracks_matchedToPFCandidate = events['Tracks_matchedToPFCandidate'][ievt]\r\n    tracks = tracks[(tracks.pt > 1.) & (tracks.eta < 2.5) &\r\n                    (ak.to_awkward0(tracks_fromPV0) >= 2) &\r\n                    (ak.to_awkward0(tracks_matchedToPFCandidate) > 0)]\r\n    multiplicity[ievt] = tracks.size\r\n\r\n# Plot results\r\nfig = plt.figure(figsize=(8,8))\r\nax = plt.gca()\r\n\r\nCrossSection = events['CrossSection'][events['HT'] > 1200]\r\nmultiplicity = multiplicity[events['HT'] > 1200]\r\n\r\nax.hist(multiplicity, bins=100, density=True, weights=CrossSection, histtype='step', color='b')\r\n\r\nplt.show()\r\n```",
  "closed_at":"2020-10-30T20:48:24Z",
  "comments":20,
  "created_at":"2020-10-29T17:22:41Z",
  "id":732508773,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzI1MDg3NzM=",
  "number":131,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Loading multiple large files (>4GB) onto a lazy array produces deserialization error",
  "updated_at":"2020-10-30T20:48:24Z",
  "user":"MDQ6VXNlcjczMDgxODM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-10-30T14:00:46Z",
  "comments":0,
  "created_at":"2020-10-30T13:44:02Z",
  "draft":false,
  "id":733191350,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMDEyNjgx",
  "number":132,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T14:00:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add Python 3.9 tests.",
  "updated_at":"2020-10-30T14:00:49Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-10-30T16:38:20Z",
  "comments":0,
  "created_at":"2020-10-30T14:31:19Z",
  "draft":false,
  "id":733232267,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMDQ3OTE2",
  "number":133,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T16:38:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Point to documentation on README.",
  "updated_at":"2020-10-30T16:38:39Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-10-30T16:57:37Z",
  "comments":4,
  "created_at":"2020-10-30T16:47:31Z",
  "draft":false,
  "id":733339416,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTM0NzU1",
  "number":134,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T16:57:37Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"PR to set up allcontributors bot.",
  "updated_at":"2020-10-30T16:57:40Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @jpivarski as a contributor for code, doc, infra.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/pull/134#issuecomment-719668436)",
  "closed_at":"2020-10-30T16:51:40Z",
  "comments":0,
  "created_at":"2020-10-30T16:50:19Z",
  "draft":false,
  "id":733341404,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTM2NDM2",
  "number":135,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T16:51:40Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add jpivarski as a contributor",
  "updated_at":"2020-10-30T16:51:43Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @jpivarski as a contributor for maintenance.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/pull/134#issuecomment-719671977)",
  "closed_at":"2020-10-30T17:02:38Z",
  "comments":0,
  "created_at":"2020-10-30T16:56:22Z",
  "draft":false,
  "id":733345698,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTQwMDM5",
  "number":136,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:02:38Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add jpivarski as a contributor",
  "updated_at":"2020-10-30T17:02:43Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"@all-contributors please add @jpivarski for maintenance. (Misspelled.)",
  "closed_at":"2020-10-30T17:52:35Z",
  "comments":67,
  "created_at":"2020-10-30T17:01:09Z",
  "id":733349612,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzMzNDk2MTI=",
  "number":137,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Add contributors.",
  "updated_at":"2020-10-30T18:59:09Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @reikdas as a contributor for code, infra.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719677032)",
  "closed_at":"2020-10-30T17:05:16Z",
  "comments":0,
  "created_at":"2020-10-30T17:04:51Z",
  "draft":false,
  "id":733352507,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTQ1NjQ4",
  "number":138,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:05:15Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add reikdas as a contributor",
  "updated_at":"2020-10-30T17:05:19Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @chrisburr as a contributor for code, infra.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719693446)",
  "closed_at":"2020-10-30T17:33:23Z",
  "comments":0,
  "created_at":"2020-10-30T17:33:09Z",
  "draft":false,
  "id":733380194,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTcwMjY2",
  "number":139,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:33:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add chrisburr as a contributor",
  "updated_at":"2020-10-30T17:33:26Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @plexoos as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719693700)",
  "closed_at":"2020-10-30T17:33:46Z",
  "comments":0,
  "created_at":"2020-10-30T17:33:38Z",
  "draft":false,
  "id":733380468,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTcwNTAw",
  "number":140,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:33:46Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add plexoos as a contributor",
  "updated_at":"2020-10-30T17:33:49Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @matthewfeickert as a contributor for infra.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719694023)",
  "closed_at":"2020-10-30T17:34:25Z",
  "comments":1,
  "created_at":"2020-10-30T17:34:12Z",
  "draft":false,
  "id":733380847,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTcwODI2",
  "number":141,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:34:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add matthewfeickert as a contributor",
  "updated_at":"2020-10-30T17:45:19Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @tamasgal as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719694301)",
  "closed_at":"2020-10-30T17:34:54Z",
  "comments":0,
  "created_at":"2020-10-30T17:34:41Z",
  "draft":false,
  "id":733381132,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTcxMDU2",
  "number":142,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:34:53Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add tamasgal as a contributor",
  "updated_at":"2020-10-30T17:34:56Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @kreczko as a contributor for code, test.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719694585)",
  "closed_at":"2020-10-30T17:35:32Z",
  "comments":0,
  "created_at":"2020-10-30T17:35:10Z",
  "draft":false,
  "id":733381415,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTcxMjky",
  "number":143,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:35:32Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add kreczko as a contributor",
  "updated_at":"2020-10-30T17:35:34Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @nsmith as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719696748)",
  "closed_at":"2020-10-30T17:38:17Z",
  "comments":0,
  "created_at":"2020-10-30T17:38:01Z",
  "draft":false,
  "id":733383686,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTczMjQy",
  "number":144,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:38:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add nsmith as a contributor",
  "updated_at":"2020-10-30T17:38:20Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @nbiederbeck as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719697233)",
  "closed_at":"2020-10-30T17:39:07Z",
  "comments":0,
  "created_at":"2020-10-30T17:38:53Z",
  "draft":false,
  "id":733384205,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTczNjY2",
  "number":145,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:39:06Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add nbiederbeck as a contributor",
  "updated_at":"2020-10-30T17:39:10Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @oshadura as a contributor for code, infra.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719698948)",
  "closed_at":"2020-10-30T17:42:20Z",
  "comments":0,
  "created_at":"2020-10-30T17:42:07Z",
  "draft":false,
  "id":733386314,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTc1NDEx",
  "number":146,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:42:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add oshadura as a contributor",
  "updated_at":"2020-10-30T17:42:22Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @henryiii as a contributor for code, infra, test.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719699196)",
  "closed_at":"2020-10-30T17:42:51Z",
  "comments":0,
  "created_at":"2020-10-30T17:42:35Z",
  "draft":false,
  "id":733386795,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTc1ODM1",
  "number":147,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:42:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add henryiii as a contributor",
  "updated_at":"2020-10-30T17:42:53Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @masonproffitt as a contributor for code, test.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719699473)",
  "closed_at":"2020-10-30T17:43:22Z",
  "comments":0,
  "created_at":"2020-10-30T17:43:07Z",
  "draft":false,
  "id":733387582,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTc2NTU0",
  "number":148,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:43:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add masonproffitt as a contributor",
  "updated_at":"2020-10-30T17:43:25Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @guitargeek as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719699773)",
  "closed_at":"2020-10-30T17:43:55Z",
  "comments":0,
  "created_at":"2020-10-30T17:43:39Z",
  "draft":false,
  "id":733388475,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTc3Mzc0",
  "number":149,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:43:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add guitargeek as a contributor",
  "updated_at":"2020-10-30T17:43:58Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @benkrikler as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719700049)",
  "closed_at":"2020-10-30T17:44:24Z",
  "comments":0,
  "created_at":"2020-10-30T17:44:10Z",
  "draft":false,
  "id":733389349,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTc4MTgz",
  "number":150,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:44:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add benkrikler as a contributor",
  "updated_at":"2020-10-30T17:44:26Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @HDembinski as a contributor for doc.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719700358)",
  "closed_at":"2020-10-30T17:44:57Z",
  "comments":0,
  "created_at":"2020-10-30T17:44:43Z",
  "draft":false,
  "id":733390308,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTc5MDYw",
  "number":151,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:44:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add HDembinski as a contributor",
  "updated_at":"2020-10-30T17:44:59Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @riga as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719700634)",
  "closed_at":"2020-10-30T17:45:29Z",
  "comments":0,
  "created_at":"2020-10-30T17:45:11Z",
  "draft":false,
  "id":733391062,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTc5NzY2",
  "number":152,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:45:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add riga as a contributor",
  "updated_at":"2020-10-30T17:45:32Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @wiso as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719701015)",
  "closed_at":"2020-10-30T17:46:02Z",
  "comments":0,
  "created_at":"2020-10-30T17:45:48Z",
  "draft":false,
  "id":733391842,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTgwNDcw",
  "number":153,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:46:02Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add wiso as a contributor",
  "updated_at":"2020-10-30T17:46:05Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @jrueb as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719701307)",
  "closed_at":"2020-10-30T17:46:42Z",
  "comments":0,
  "created_at":"2020-10-30T17:46:20Z",
  "draft":false,
  "id":733392275,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTgwODI0",
  "number":154,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:46:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add jrueb as a contributor",
  "updated_at":"2020-10-30T17:46:44Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @bfis as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719701699)",
  "closed_at":"2020-10-30T17:47:11Z",
  "comments":0,
  "created_at":"2020-10-30T17:46:58Z",
  "draft":false,
  "id":733393064,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTgxNTQz",
  "number":155,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:47:11Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add bfis as a contributor",
  "updated_at":"2020-10-30T17:47:14Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @raymondEhlers as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719701976)",
  "closed_at":"2020-10-30T17:47:39Z",
  "comments":0,
  "created_at":"2020-10-30T17:47:26Z",
  "draft":false,
  "id":733393581,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTgyMDA3",
  "number":156,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:47:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add raymondEhlers as a contributor",
  "updated_at":"2020-10-30T17:47:41Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @andrzejnovak as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719702229)",
  "closed_at":"2020-10-30T17:48:04Z",
  "comments":0,
  "created_at":"2020-10-30T17:47:52Z",
  "draft":false,
  "id":733394114,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTgyNDk2",
  "number":157,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:48:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add andrzejnovak as a contributor",
  "updated_at":"2020-10-30T17:48:07Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @bendavid as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719702453)",
  "closed_at":"2020-10-30T17:48:30Z",
  "comments":0,
  "created_at":"2020-10-30T17:48:18Z",
  "draft":false,
  "id":733394719,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTgzMDU5",
  "number":158,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:48:30Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add bendavid as a contributor",
  "updated_at":"2020-10-30T17:48:33Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @douglasdavis as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719702723)",
  "closed_at":"2020-10-30T17:48:57Z",
  "comments":0,
  "created_at":"2020-10-30T17:48:45Z",
  "draft":false,
  "id":733395344,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTgzNjM0",
  "number":159,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:48:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add douglasdavis as a contributor",
  "updated_at":"2020-10-30T17:49:00Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @asymmetry as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719702956)",
  "closed_at":"2020-10-30T17:49:22Z",
  "comments":0,
  "created_at":"2020-10-30T17:49:10Z",
  "draft":false,
  "id":733395910,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTg0MTUx",
  "number":160,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:49:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add asymmetry as a contributor",
  "updated_at":"2020-10-30T17:49:25Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @ast0815 as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719703182)",
  "closed_at":"2020-10-30T17:49:48Z",
  "comments":0,
  "created_at":"2020-10-30T17:49:35Z",
  "draft":false,
  "id":733396437,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTg0NjQy",
  "number":161,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:49:48Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add ast0815 as a contributor",
  "updated_at":"2020-10-30T17:49:51Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @HealthyPear as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719703387)",
  "closed_at":"2020-10-30T17:50:13Z",
  "comments":0,
  "created_at":"2020-10-30T17:50:01Z",
  "draft":false,
  "id":733397003,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTg1MTU1",
  "number":162,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:50:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add HealthyPear as a contributor",
  "updated_at":"2020-10-30T17:50:15Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @EdoPro98 as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719703604)",
  "closed_at":"2020-10-30T17:50:42Z",
  "comments":0,
  "created_at":"2020-10-30T17:50:26Z",
  "draft":false,
  "id":733397558,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTg1Njcz",
  "number":163,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:50:42Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add EdoPro98 as a contributor",
  "updated_at":"2020-10-30T17:50:44Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @JMSchoeffmann as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719703952)",
  "closed_at":"2020-10-30T17:51:19Z",
  "comments":0,
  "created_at":"2020-10-30T17:51:06Z",
  "draft":false,
  "id":733398173,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTg2MjA0",
  "number":164,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:51:19Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add JMSchoeffmann as a contributor",
  "updated_at":"2020-10-30T17:51:21Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Adds @alexander as a contributor for code.\n\nThis was requested by jpivarski [in this comment](https://github.com/scikit-hep/uproot4/issues/137#issuecomment-719704188)",
  "closed_at":"2020-10-30T17:51:47Z",
  "comments":0,
  "created_at":"2020-10-30T17:51:34Z",
  "draft":false,
  "id":733398463,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMTg2NDU0",
  "number":165,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T17:51:47Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add alexander as a contributor",
  "updated_at":"2020-10-30T17:51:49Z",
  "user":"MDM6Qm90NDY0NDczMjE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-10-30T20:55:57Z",
  "comments":0,
  "created_at":"2020-10-30T18:51:51Z",
  "draft":false,
  "id":733435336,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMjE3Mjg2",
  "number":166,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-30T20:55:57Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Tweaks to investigate #131, but it looks like it was just a bad file.",
  "updated_at":"2020-10-30T20:55:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Once and for all. Whatever issues are open about this, I'm going to close them and point to here. This issue won't be closed until the interface is 100% totally conforming to the interface @henryiii expects.",
  "closed_at":"2020-11-25T23:28:59Z",
  "comments":0,
  "created_at":"2020-10-30T21:46:40Z",
  "id":733535816,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzM1MzU4MTY=",
  "number":167,
  "performed_via_github_app":null,
  "reactions":{
   "+1":3,
   "total_count":3
  },
  "state":"closed",
  "state_reason":"completed",
  "title":"Get the Uproot \u2192 boost-histogram/hist interface totally figured out",
  "updated_at":"2020-11-25T23:28:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Just a tiny note, you forgot to [make the wiki publicly editable](https://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/changing-access-permissions-for-wikis). I have a few tiny snippets which I would like to bring into shape in the next few days, nothing groundbreaking but maybe useful for the docs \ud83d\ude09 ",
  "closed_at":"2020-10-30T23:13:21Z",
  "comments":8,
  "created_at":"2020-10-30T21:56:25Z",
  "id":733539983,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzM1Mzk5ODM=",
  "number":168,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Make wiki publicly editable",
  "updated_at":"2020-10-30T23:40:58Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2021-02-18T15:01:54Z",
  "comments":1,
  "created_at":"2020-10-30T22:12:04Z",
  "id":733546553,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzM1NDY1NTM=",
  "number":169,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Uproot 3 \u2192 Uproot 4 cheat sheet!",
  "updated_at":"2021-02-18T15:01:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"These are just two tiny examples which show how to pass a custom interpretation of a jagged structure in uproot3 vs uproot4.\r\n\r\nNot sure if the cheat sheet is intended to look like this, so please feel free to take whatever you think is useful.\r\n\r\nEdit: crossref to #169",
  "closed_at":"2020-10-30T23:40:12Z",
  "comments":0,
  "created_at":"2020-10-30T22:29:39Z",
  "draft":false,
  "id":733553100,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMzE0MzMw",
  "number":170,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"docs: add example for custom interpretations",
  "updated_at":"2020-10-30T23:40:12Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"The exception from `uproot4._util._file_not_found` was simply not raised.",
  "closed_at":"2020-10-31T15:31:50Z",
  "comments":5,
  "created_at":"2020-10-31T08:32:54Z",
  "draft":false,
  "id":733668449,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTEzMzk2MDc2",
  "number":171,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-10-31T15:31:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Quickfix .lazy() when called on missing files. Fixes #120",
  "updated_at":"2020-10-31T15:33:38Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"The RDataFrame structure\r\n\r\nvector<float,ROOT::Detail::VecOps::RAdoptAllocator<float> >\r\n\r\nis stored in some ROOT files I am analysing. The class docs in ROOT are here:\r\n\r\nhttps://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html\r\n\r\nIt would be great if support could be added for this type.  \r\n\r\nThanks a lot!\r\nDonal",
  "closed_at":"2020-11-06T18:30:52Z",
  "comments":6,
  "created_at":"2020-11-02T14:37:55Z",
  "id":734558424,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzQ1NTg0MjQ=",
  "number":172,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Support for RDataFrame RAdoptAllocator",
  "updated_at":"2020-11-09T11:38:46Z",
  "user":"MDQ6VXNlcjg4Nzk5OTY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hello \r\n\r\nI am trying to run uproot4 parallel on multiple files but it seems to be stuck at reading the TTree from root files. It used to work for uproot 3 but not in uproot4. \r\n\r\nI found there are some possibilities to do parallel processing using uproot4.reading.open but i could not understand from documentation what exactly I should be doing to use it for multiple files in parallel. \r\n\r\nThanks you. \r\n",
  "closed_at":"2020-11-03T01:24:23Z",
  "comments":9,
  "created_at":"2020-11-02T16:24:03Z",
  "id":734642366,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzQ2NDIzNjY=",
  "number":173,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"multiprocessing and uproot4 ",
  "updated_at":"2020-11-03T01:24:23Z",
  "user":"MDQ6VXNlcjQ5OTY2MDk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"For processing a single tree in a single ROOT file with multiple processes, it's necessary for those processes to read disjoint parts of the tree. In uproot3, this was possible by passing an iterator as `entrysteps` to `iterate`.\r\n\r\nCurrently, this should be possible by using `HasBranches.iterate` directly (setting ob the objects manually) and passing `entry_start` and `entry_stop`.\r\n\r\nThe simplest solution might be to add another parameter `entry_skip` or something like that, passed through the iterate functions, and replace \r\n```\r\nfor sub_entry_start in uproot4._util.range(\r\n    entry_start, entry_stop, entry_step\r\n):\r\n```\r\nby\r\n```\r\nfor sub_entry_start in uproot4._util.range(\r\n    entry_start, entry_stop, entry_step * entry_skip\r\n):\r\n```\r\nin `HasBranches.iterate`.\r\n\r\nAlternatively, step_size could become and iterator that defaults to that range, or a function directly replacing range here.",
  "closed_at":"2020-11-06T22:44:07Z",
  "comments":2,
  "created_at":"2020-11-02T17:52:12Z",
  "id":734704822,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzQ3MDQ4MjI=",
  "number":174,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Iteration step_size should accept an iterable",
  "updated_at":"2020-11-06T22:44:08Z",
  "user":"MDQ6VXNlcjE2NDAzODY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-03T01:24:23Z",
  "comments":0,
  "created_at":"2020-11-02T22:26:03Z",
  "draft":false,
  "id":734877692,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTE0MzY3ODM2",
  "number":175,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-03T01:24:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix the empty ROOT file case.",
  "updated_at":"2020-11-03T01:24:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"I cannot open a ROOT file over HTTPS with uproot4 while it works with uproot\r\n\r\n```python\r\nimport uproot4\r\n_ = uproot4.open('https://cern.ch/starterkit/data/advanced-python-2019/dalitzdata.root')\r\n```\r\nIt fails with\r\n```\r\nOSError: remote server does not support HTTP range requests\r\nfor URL https://cern.ch/starterkit/data/advanced-python-2019/dalitzdata.root\r\n```\r\n\r\nDo you have any ideas what may goes wrong?\r\n\r\nFull StackTrace:\r\n```\r\nOSError                                   Traceback (most recent call last)\r\n<ipython-input-3-2fc8249c41b5> in <module>\r\n----> 1 _ = uproot4.open('https://cern.ch/starterkit/data/advanced-python-2019/dalitzdata.root')\r\n\r\n~/anaconda3/envs/starterkit38/lib/python3.8/site-packages/uproot4/reading.py in open(path, object_cache, array_cache, custom_classes, **options)\r\n    134         )\r\n    135 \r\n--> 136     file = ReadOnlyFile(\r\n    137         file_path,\r\n    138         object_cache=object_cache,\r\n\r\n~/anaconda3/envs/starterkit38/lib/python3.8/site-packages/uproot4/reading.py in __init__(self, file_path, object_cache, array_cache, custom_classes, **options)\r\n    565             self._fUUID_version,\r\n    566             self._fUUID,\r\n--> 567         ) = uproot4.source.cursor.Cursor(0).fields(\r\n    568             self._begin_chunk, _file_header_fields_small, {}\r\n    569         )\r\n\r\n~/anaconda3/envs/starterkit38/lib/python3.8/site-packages/uproot4/source/cursor.py in fields(self, chunk, format, context, move)\r\n    193         if move:\r\n    194             self._index = stop\r\n--> 195         return format.unpack(chunk.get(start, stop, self, context))\r\n    196 \r\n    197     def field(self, chunk, format, context, move=True):\r\n\r\n~/anaconda3/envs/starterkit38/lib/python3.8/site-packages/uproot4/source/chunk.py in get(self, start, stop, cursor, context)\r\n    360         already.\r\n    361         \"\"\"\r\n--> 362         self.wait()\r\n    363 \r\n    364         if (start, stop) in self:\r\n\r\n~/anaconda3/envs/starterkit38/lib/python3.8/site-packages/uproot4/source/chunk.py in wait(self)\r\n    314         \"\"\"\r\n    315         if self._raw_data is None:\r\n--> 316             self._raw_data = numpy.frombuffer(self._future.result(), dtype=self._dtype)\r\n    317             if len(self._raw_data) != self._stop - self._start:\r\n    318                 raise OSError(\r\n\r\n~/anaconda3/envs/starterkit38/lib/python3.8/site-packages/uproot4/source/futures.py in result(self, timeout)\r\n    124             return self._result\r\n    125         else:\r\n--> 126             delayed_raise(*self._excinfo)\r\n    127 \r\n    128     def _run(self):\r\n\r\n~/anaconda3/envs/starterkit38/lib/python3.8/site-packages/uproot4/source/futures.py in delayed_raise(exception_class, exception_value, traceback)\r\n     44         exec(\"raise exception_class, exception_value, traceback\")\r\n     45     else:\r\n---> 46         raise exception_value.with_traceback(traceback)\r\n     47 \r\n     48 \r\n\r\n~/anaconda3/envs/starterkit38/lib/python3.8/site-packages/uproot4/source/futures.py in _run(self, resource)\r\n    281     def _run(self, resource):\r\n    282         try:\r\n--> 283             self._result = self._task(resource)\r\n    284         except Exception:\r\n    285             self._excinfo = sys.exc_info()\r\n\r\n~/anaconda3/envs/starterkit38/lib/python3.8/site-packages/uproot4/source/http.py in task(resource)\r\n    199 \r\n    200         def task(resource):\r\n--> 201             return resource.get(connection, start, stop)\r\n    202 \r\n    203         return uproot4.source.futures.ResourceFuture(task)\r\n\r\n~/anaconda3/envs/starterkit38/lib/python3.8/site-packages/uproot4/source/http.py in get(self, connection, start, stop)\r\n    167         if response.status != 206:\r\n    168             connection.close()\r\n--> 169             raise OSError(\r\n    170                 \"\"\"remote server does not support HTTP range requests\r\n    171 for URL {0}\"\"\".format(\r\n\r\nOSError: remote server does not support HTTP range requests\r\nfor URL https://cern.ch/starterkit/data/advanced-python-2019/dalitzdata.root\r\n\r\n```",
  "closed_at":"2020-11-24T19:20:23Z",
  "comments":6,
  "created_at":"2020-11-03T00:43:14Z",
  "id":734935139,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzQ5MzUxMzk=",
  "number":176,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Cannot open ROOT over HTTPS",
  "updated_at":"2020-11-24T19:20:23Z",
  "user":"MDQ6VXNlcjE3NDU0ODQ4"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Fixes #176 with dd75037.\r\n\r\nI started looking at #121 but it becomes messy with the current architecture. I think the fundamental problem is that `uproot4/source/http.py` uses too low level an interface (`http.client`). The [Python docs also suggest this](https://docs.python.org/3/library/http.client.html):\r\n\r\n> It is normally not used directly \u2014 the module `urllib.request` uses it to handle URLs that use HTTP and HTTPS.\r\n> **See also:** The Requests package is recommended for a higher-level HTTP client interface. \r\n\r\nFor now I've left an expected-to-fail test for #121 (2fce1d1) and slightly improved HTTP error code handling to make failures easier to understand (be91e45) but I can rebase these out if you'd rather not have these changes.",
  "closed_at":"2020-11-20T23:50:10Z",
  "comments":5,
  "created_at":"2020-11-03T08:40:07Z",
  "draft":false,
  "id":735127407,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTE0NTc0NDI4",
  "number":177,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix multipart HTTP reading",
  "updated_at":"2020-11-20T23:50:10Z",
  "user":"MDQ6VXNlcjUyMjA1MzM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-04T19:06:25Z",
  "comments":0,
  "created_at":"2020-11-04T18:59:45Z",
  "draft":false,
  "id":736351531,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTE1NTgwNzgy",
  "number":178,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-04T19:06:25Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Updated to the new ak.Array constructor arguments in 0.4.2.",
  "updated_at":"2020-11-04T19:06:38Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Mostly copied from Awkward",
  "closed_at":"2020-11-20T21:38:21Z",
  "comments":1,
  "created_at":"2020-11-05T13:11:12Z",
  "id":736920418,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzY5MjA0MTg=",
  "number":179,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"GitHub Issue templates",
  "updated_at":"2020-11-20T21:38:22Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"https://github.com/scikit-hep/uproot4/blob/b5c0c5e0ec282660b7303fcf5019214270da8693/uproot4/source/http.py#L196\r\n",
  "closed_at":"2020-11-06T17:29:13Z",
  "comments":0,
  "created_at":"2020-11-05T20:17:46Z",
  "id":737238162,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzcyMzgxNjI=",
  "number":180,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Don't strip query parameters from HTTP URLs",
  "updated_at":"2020-11-06T17:29:13Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"I can read the objects in the attached file using uproot 3, but uproot 4 raises the following exception.\r\n\r\n\r\n\r\n[EbiasCorrection.root.zip](https://github.com/scikit-hep/uproot4/files/5499812/EbiasCorrection.root.zip)\r\n\r\n```\r\nimport uproot4 as uproot  # works with uproot3\r\n\r\n\r\nf = uproot.open('./EbiasCorrection.root')\r\n\r\nfor k in f.keys():\r\n    print(f[k])\r\n\r\n```\r\n\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"read_ebias.py\", line 7, in <module>\r\n    print(f[k])\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/reading.py\", line 1896, in __getitem__\r\n    return self.key(where).get()\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/reading.py\", line 2281, in get\r\n    out = cls.read(chunk, cursor, context, self._file, selffile, parent)\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/model.py\", line 1098, in read\r\n    versioned_cls.read(\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/model.py\", line 730, in read\r\n    self.read_members(chunk, cursor, context, file)\r\n  File \"<dynamic>\", line 7, in read_members\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/model.py\", line 730, in read\r\n    self.read_members(chunk, cursor, context, file)\r\n  File \"<dynamic>\", line 7, in read_members\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/model.py\", line 730, in read\r\n    self.read_members(chunk, cursor, context, file)\r\n  File \"<dynamic>\", line 19, in read_members\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/model.py\", line 730, in read\r\n    self.read_members(chunk, cursor, context, file)\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/models/TList.py\", line 55, in read_members\r\n    item = uproot4.deserialization.read_object_any(\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/deserialization.py\", line 265, in read_object_any\r\n    obj = cls.read(chunk, cursor, context, file, selffile, parent)\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/model.py\", line 1098, in read\r\n    versioned_cls.read(\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/model.py\", line 730, in read\r\n    self.read_members(chunk, cursor, context, file)\r\n  File \"<dynamic>\", line 7, in read_members\r\n  File \"/home/maxnoe/.local/lib/python3.8/site-packages/uproot4/model.py\", line 730, in read\r\n    self.read_members(chunk, cursor, context, file)\r\n  File \"<dynamic>\", line 10, in read_members\r\nNameError: name 'fNoper' is not defined\r\n```",
  "closed_at":"2020-11-06T19:38:39Z",
  "comments":5,
  "created_at":"2020-11-06T07:50:22Z",
  "id":737549798,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3Mzc1NDk3OTg=",
  "number":181,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Cannot read TProfile / TF1 using uproot4, works in uproot3",
  "updated_at":"2020-11-06T22:42:16Z",
  "user":"MDQ6VXNlcjU0ODg0NDA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"COLLABORATOR",
  "body":"Hi @team,\r\n\r\nThanks for all the hard work here.\r\n\r\nI noticed when calling `iterate` with an invalid file path, it silently failed rather than raising an exception.\r\n\r\nFrom looking at the source code, it seems that it's likely due to this glob\r\nhttps://github.com/scikit-hep/uproot4/blob/b5c0c5e0ec282660b7303fcf5019214270da8693/uproot4/behaviors/TBranch.py#L2796-L2799\r\n\r\nI am not sure of the best solution. A first pass would be to raise a `FileNotFound` error if the string does not contain a glob pattern. Thereafter, however, do you want to treat non-matching globs as valid? Perhaps raising an exception if the globbing routine does not match any files across all patterns (rather than if any glob pattern fails)?",
  "closed_at":"2020-11-06T22:45:51Z",
  "comments":3,
  "created_at":"2020-11-06T10:45:31Z",
  "id":737659212,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3Mzc2NTkyMTI=",
  "number":182,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Invalid file paths do not raise Exceptions",
  "updated_at":"2020-11-06T22:45:51Z",
  "user":"MDQ6VXNlcjEyNDg0MTM="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-06T17:29:13Z",
  "comments":5,
  "created_at":"2020-11-06T16:42:19Z",
  "draft":false,
  "id":737898355,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTE2ODU5OTMy",
  "number":183,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-06T17:29:13Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Pass through HTTP(S) query parameter if they exist.",
  "updated_at":"2020-11-06T19:51:04Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-06T22:45:51Z",
  "comments":0,
  "created_at":"2020-11-06T17:26:54Z",
  "draft":false,
  "id":737926319,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTE2ODgyNzIz",
  "number":184,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-06T22:45:51Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Complain about missing files, if they're not wildcards.",
  "updated_at":"2020-11-06T22:45:54Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-06T18:30:52Z",
  "comments":0,
  "created_at":"2020-11-06T18:23:02Z",
  "draft":false,
  "id":737957520,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTE2OTA4NTQx",
  "number":185,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-06T18:30:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Allow allocators in std::vector typenames.",
  "updated_at":"2020-11-06T18:30:55Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-06T19:38:39Z",
  "comments":0,
  "created_at":"2020-11-06T19:04:05Z",
  "draft":false,
  "id":737978911,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTE2OTI2MDYw",
  "number":186,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-06T19:38:39Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix TStreamerLoop code generation.",
  "updated_at":"2020-11-06T19:38:43Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-06T22:44:23Z",
  "comments":0,
  "created_at":"2020-11-06T22:16:47Z",
  "draft":false,
  "id":738074410,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTE3MDA1NDg2",
  "number":187,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-06T22:44:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed a serious memory leak in HasBranches.iterate.",
  "updated_at":"2020-11-06T22:44:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"As part of https://github.com/scikit-hep/pyhf/pull/1002/ I've been seeing a `uproot4.deserialization.DeserializationError` and while looking at it more closely today I realized it seemed strange so I thought I'd report it.\r\n\r\n## Minimal Failing Example\r\n\r\n`uproot4-issue.py`:\r\n\r\n```python\r\nimport uproot4 as uproot\r\nimport uproot as uproot3\r\n\r\n\r\ndef main():\r\n    # curl -sL https://github.com/scikit-hep/pyhf/raw/master/validation/xmlimport_input3/data/ShapeSys.root -o ShapeSys.root\r\n    uproot3_file = uproot3.open(\"ShapeSys.root\")\r\n\r\n    uproot3_signal_hist = uproot3_file[\"signal\"]\r\n    print(f\"uproot 3 signal hist: {uproot3_signal_hist.numpy()}\")\r\n\r\n    # This will fail\r\n    uproot4_file = uproot.open(\"ShapeSys.root\")\r\n    print(f\"uproot 4 file keys: {uproot4_file.keys()}\")\r\n    uproot4_signal_hist = uproot4_file[\"signal\"]\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nIn a new Python 3 virtual environment:\r\n\r\n```\r\n(uproot4-issue) $ cat requirements.txt \r\nuproot~=3.13.0\r\nuproot4==0.1.2\r\n(uproot4-issue) $ pip install -q -r requirements.txt\r\n(uproot4-issue) $ curl -sL https://github.com/scikit-hep/pyhf/raw/master/validation/xmlimport_input3/data/ShapeSys.root -o ShapeSys.root\r\n(uproot4-issue) $ python uproot4-issue.py\r\n```\r\ngives\r\n```pytb\r\nuproot 3 signal hist: (array([20., 10.], dtype=float32), array([0., 1., 2.]))\r\nuproot 4 file keys: ['signal;1', 'background1;2', 'background1;1', 'bkg1ShapeError;1', 'background2;2', 'background2;1', 'bkg2ShapeError;1', 'data;1']\r\nTraceback (most recent call last):\r\n  File \"uproot4-issue.py\", line 19, in <module>\r\n    main()\r\n  File \"uproot4-issue.py\", line 15, in main\r\n    uproot4_signal_hist = uproot4_file[\"signal\"]\r\n  File \"/home/feickert/.venvs/uproot4-issue/lib/python3.7/site-packages/uproot4/reading.py\", line 1979, in __getitem__\r\n    return self.key(where).get()\r\n  File \"/home/feickert/.venvs/uproot4-issue/lib/python3.7/site-packages/uproot4/reading.py\", line 2364, in get\r\n    out = cls.read(chunk, cursor, context, self._file, selffile, parent)\r\n  File \"/home/feickert/.venvs/uproot4-issue/lib/python3.7/site-packages/uproot4/model.py\", line 1143, in read\r\n    chunk, cursor, context, file, selffile, parent, concrete=concrete\r\n  File \"/home/feickert/.venvs/uproot4-issue/lib/python3.7/site-packages/uproot4/model.py\", line 773, in read\r\n    self.read_members(chunk, cursor, context, file)\r\n  File \"<dynamic>\", line 7, in read_members\r\n  File \"/home/feickert/.venvs/uproot4-issue/lib/python3.7/site-packages/uproot4/model.py\", line 779, in read\r\n    self.check_numbytes(chunk, cursor, context)\r\n  File \"/home/feickert/.venvs/uproot4-issue/lib/python3.7/site-packages/uproot4/model.py\", line 861, in check_numbytes\r\n    getattr(self._file, \"file_path\"),\r\n  File \"/home/feickert/.venvs/uproot4-issue/lib/python3.7/site-packages/uproot4/deserialization.py\", line 177, in numbytes_check\r\n    file_path,\r\nuproot4.deserialization.DeserializationError: while reading\r\n\r\n    TH1F version 2 as uproot4.dynamic.Model_TH1F_v2 (548 bytes)\r\n        TH1 version 7 as uproot4.dynamic.Model_TH1_v8 (522 bytes)\r\n            (base): <TNamed 'signal' title='signal' at 0x7fed7c232550>\r\n            (base): <TAttLine (version 2) at 0x7fed7c13e6d0>\r\n            (base): <TAttFill (version 2) at 0x7fed7c13e750>\r\n            (base): <TAttMarker (version 2) at 0x7fed7c13e7d0>\r\n            fNcells: 4\r\n            fXaxis: <TAxis (version 10) at 0x7fed7c13e890>\r\n            fYaxis: <TAxis (version 10) at 0x7fed7c13fc90>\r\n            fZaxis: <TAxis (version 10) at 0x7fed7c13f310>\r\n            fBarOffset: 0\r\n            fBarWidth: 1000\r\n            fEntries: 2.0\r\n            fTsumw: 0.0\r\n            fTsumw2: 0.0\r\n            fTsumwx: 0.0\r\n            fTsumwx2: 0.0\r\n            fMaximum: -1111.0\r\n            fMinimum: -1111.0\r\n            fNormFactor: 0.0\r\n            fContour: <TArrayD [] at 0x7fed7c13f710>\r\n            fSumw2: <TArrayD [] at 0x7fed7c13e790>\r\n            fOption: <TString '' at 0x7fed7c210150>\r\n            fFunctions: <TList of 0 items at 0x7fed7c13fe10>\r\n            fBufferSize: 0\r\n            fBuffer: array([], dtype=float64)\r\n            fBinStatErrOpt: 0\r\n            fStatOverflows: 4\r\nBase classes for TH1: (TNamed), (TAttLine), (TAttFill), (TAttMarker)\r\nMembers for TH1: (fNcells), (fXaxis), (fYaxis), (fZaxis), (fBarOffset), (fBarWidth), (fEntries), (fTsumw), (fTsumw2), (fTsumwx), (fTsumwx2), (fMaximum), (fMinimum), (fNormFactor), (fContour), (fSumw2), (fOption), (fFunctions), (fBufferSize), (fBuffer), (fBinStatErrOpt), (fStatOverflows)\r\n\r\nexpected 522 bytes but cursor moved by 526 bytes (through TH1)\r\nin file ShapeSys.root\r\nin object /signal;1\r\n```\r\n\r\ncc @lukasheinrich @kratsg ",
  "closed_at":"2020-11-20T20:14:22Z",
  "comments":2,
  "created_at":"2020-11-07T00:54:11Z",
  "id":738122266,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3MzgxMjIyNjY=",
  "number":188,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"DeserializationError while reading file uproot3 can read",
  "updated_at":"2020-11-21T01:56:49Z",
  "user":"MDQ6VXNlcjUxNDIzOTQ="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"We can instead use dependabot.yml to keep actions up via PRs every day or week when new changes are detected. In that case, we'd use v2.0.0 here.\r\n\r\nThis was released about 30 minutes ago, see https://github.com/conda-incubator/setup-miniconda/issues/84",
  "closed_at":"2020-11-09T03:26:22Z",
  "comments":1,
  "created_at":"2020-11-09T02:53:50Z",
  "draft":false,
  "id":738633270,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTE3NDMxNzk2",
  "number":189,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-09T03:26:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: warning about GHA security",
  "updated_at":"2020-11-09T03:26:25Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I can do `uproot4.open` for example, but when I do `help(uproot4)`, I won't find `open` listed there. I understand that `open` is implemented in a submodule, but `help` should list the function or class documentation on the level where that is available, because that's where people will look for it (I don't know exactly where `open` is implemented).\r\n\r\nThis works for iminuit., for example.",
  "closed_at":"2020-11-20T20:46:40Z",
  "comments":1,
  "created_at":"2020-11-12T19:47:12Z",
  "id":741880080,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NDE4ODAwODA=",
  "number":190,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"help() difficult to navigate",
  "updated_at":"2020-11-20T20:46:40Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"This is just a minor thing, so set this to the lowest priority please ;)\r\n\r\nIn uproot4, the length is now returning the number of subbranches, while in uproot3 it was the number of \"items\" (number of entries from `fBasketEntry`), basically the array lengths of the subbranches, so to say. In my uproot3 based libraries I was relying on `len(f[\"path\"])` to reflect the number of entries and used that to iterate over a branch. For `uproot4`, the public `.num_entries` attribute can be used, which is of course fine.\r\n\r\nI already added that to the [wiki](https://github.com/scikit-hep/uproot4/wiki#length-of-ttreetbranchelements), but I wanted to quickly ask about the intention behind it.\r\n\r\nI guess the main idea was to be more close to the `dict` interface since the `ROOTDirectory` class behaves like such, where `len()` also returns the number of keys. I am not sure if this is really the most common use-case in the uproot-context but it's of course not a big deal.\r\nAnyways, the only thing I find a bit confusing though is the fact that `len()` does not count nested entries whereas `keys()` lists them, so `len(branch) != len(branch.keys())`, as seen in the example below. So I am wondering if `keys()` should only show the first level entries, to be conform to the `dict()` interface.\r\n\r\nLet me quickly copy the example from the Wiki here just for the sake of completeness (and in case the Wiki is later emptied after the possible doc-migration):\r\n\r\n```python\r\nfrom skhep_testdata import data_path\r\n\r\nimport uproot as uproot3\r\nimport uproot4\r\n\r\nbranch = \"E/Evt\"\r\n\r\nf3 = uproot3.open(data_path(\"uproot-issue431b.root\"))\r\nf3[branch]\r\n# <TBranchElement b'Evt' at 0x00010f15f5e0>\r\nlen(f3[branch])\r\n# 10\r\nf3[branch][\"id\"].array()\r\n# array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10], dtype=int32)\r\n\r\n\r\nf4 = uproot4.open(data_path(\"uproot-issue431b.root\"))\r\nf4[branch]\r\n# <TBranchElement 'Evt' (22 subbranches) at 0x00010f37a2b0>\r\n\r\nlen(f4[branch])\r\n# 22\r\n\r\nlen(f4[branch].keys())  # note that this will also count nested entries\r\n# 118\r\n\r\nf4[branch].keys()\r\n# ['AAObject', 'AAObject/TObject', 'AAObject/TObject/fUniqueID', ...,\r\n#  'mc_trks/mc_trks.hit_ids', 'mc_trks/mc_trks.error_matrix', ...]\r\n\r\nlen([k for k in f4[branch].keys() if \"/\" not in k])  # only top-level subbranches\r\n# 22\r\n\r\nf4[branch].num_entries\r\n# 10\r\n```",
  "closed_at":"2020-11-13T17:27:11Z",
  "comments":2,
  "created_at":"2020-11-13T16:32:49Z",
  "id":742586805,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NDI1ODY4MDU=",
  "number":191,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Lengths of TTrees/TBranchElements",
  "updated_at":"2020-11-13T17:27:11Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"A little bit of background: our data contains a lot of nested structures and hard-to-remember branch paths, on top of that, there are classes with tons of attributes which are reused for different things, while a set of attributes are just noise, which we would like to hide from the users. For example there is a generic `Hit` class which is used for MC hits and also for DAQ hits, but only a subset of the attributes are valid in the MC context and another (partly overlapping subset) for the DAQ context.\r\n\r\nI maintain a wrapper library for `uproot` which is tailored to our experiment and offers a few classes so that it's possible to do things like:\r\n\r\n```python\r\nr = WhateverReader(\"file.root\")\r\nr.events.hits.pmt_id   # returns a jagged array of PMT IDs for each event\r\nr.events[2:5].hits.dom_id  # a jagged array of PMT IDs for a slice of events\r\nr.events[:10].hits.dom_id[:5]  # a jagged array of the the first 5 DOM IDs of the first 10 events\r\n```\r\n\r\nBehind the scenes, `.events` maps to specific branch with a cryptic path and `.hits` to a subbranch, while `dom_id` and `pmt_id` etc. are also subbranches and `.lazyarray()` or `.array()` are called behind the scenes.\r\nThe indexing magic is done by propagating all the indices to the actual Jagged-array, so that these are equivalent:\r\n\r\n```python\r\nr.events[0].hits.pmt_id[:5] == r.events.hits[0].pmt_id[:5] == r.events.pmt_id[0][:5] # etc.\r\n```\r\n\r\nSuch a call translates then to something like\r\n\r\n```python\r\nfobj[\"/a/long/cryptic/path/to/UglyPMT_ID_Naming\"].lazyarray(interpretation, options)[0, :5]\r\n```\r\n\r\nFor some branches I need to use custom interpretations and even some conversion to `awkward1` etc. But you get the idea, a lot of happening behind the scenes \ud83d\ude09 On top of that, there is tab completion which shows only meaningful attributes. To achieve all this, I introduced (mapper) configurations for each branch which can be passed to a generic class.\r\n\r\n**Alright, sorry, long story short**, in `uproot4` everything is much easier since the Awkward1 arrays are working really nicely, so I can get rid of many optimisations and special hooks under the hood. But the basic problems remain and I think that many uproot users encounter these and create libraries around to make them more user-friendly, so I thought it would be useful to dump this somewhere, in case these are already solved in a much better way or if there is interest in providing a more general user API for these presumably repeated tasks when building upon uproot:\r\n\r\n- inconvenient, hard-to-remember branch addresses\r\n- \"noise\" in API (field naming, hiding unused fields etc.)\r\n- grouping things which belong together but are stored in different branches\r\n- indexing magic (see example above) which spans over multiple branches and propagates down to the data\r\n\r\nAnyways, this issue is mostly about **renaming fields**, so let me come to the point \ud83d\ude48 \r\n\r\nGiven an example file from our experiment, you can see some events which consist of a jagged array of hits. I took this example because it almost works and only needs some adjustments in the field names:\r\n\r\n```python\r\n>>> import uproot4\r\n\r\n>>> from skhep_testdata import data_path\r\n\r\n>>> f = uproot4.open(data_path(\"uproot-issue431b.root\"))\r\n\r\n>>> f[\"E/Evt/hits\"].show()\r\nname                 | typename                 | interpretation\r\n---------------------+--------------------------+-------------------------------\r\nhits                 | vector<Hit>              | AsGroup(<TBranchElement 'hits'hits.id              | int32_t[]                | AsJagged(AsDtype('>i4'))\r\nhits.dom_id          | int32_t[]                | AsJagged(AsDtype('>i4'))\r\nhits.channel_id      | uint32_t[]               | AsJagged(AsDtype('>u4'))\r\nhits.tdc             | uint32_t[]               | AsJagged(AsDtype('>u4'))\r\nhits.tot             | uint32_t[]               | AsJagged(AsDtype('>u4'))\r\nhits.trig            | int32_t[]                | AsJagged(AsDtype('>i4'))\r\nhits.pmt_id          | int32_t[]                | AsJagged(AsDtype('>i4'))\r\nhits.t               | double[]                 | AsJagged(AsDtype('>f8'))\r\nhits.a               | double[]                 | AsJagged(AsDtype('>f8'))\r\nhits.pos.x           | double[]                 | AsJagged(AsDtype('>f8'))\r\nhits.pos.y           | double[]                 | AsJagged(AsDtype('>f8'))\r\nhits.pos.z           | double[]                 | AsJagged(AsDtype('>f8'))\r\nhits.dir.x           | double[]                 | AsJagged(AsDtype('>f8'))\r\nhits.dir.y           | double[]                 | AsJagged(AsDtype('>f8'))\r\nhits.dir.z           | double[]                 | AsJagged(AsDtype('>f8'))\r\nhits.pure_t          | double[]                 | AsJagged(AsDtype('>f8'))\r\nhits.pure_a          | double[]                 | AsJagged(AsDtype('>f8'))\r\nhits.type            | int32_t[]                | AsJagged(AsDtype('>i4'))\r\nhits.origin          | int32_t[]                | AsJagged(AsDtype('>i4'))\r\nhits.pattern_flags   | uint32_t[]               | AsJagged(AsDtype('>u4'))\r\n```\r\n\r\nIn this case, `hits` is already accessible as an `awkward1.Array` but you can also read the branches separately. For this particular example however, only the following fields are of interest\r\n`dom_id`, `channel_id`, `t`, `tot`, `trig`, everything else does not make sense in a specific context (due to the general `Hit` class which is unfortunately reused for everything, but this is what we have to live with).\r\n\r\nNow in the first step I of course don't want to create (and allocate) a new array just to **rename** those fields, but directly modify the interpretation. We can also not change the binary structure of the dtype for obvious reasons. I tried something like this:\r\n\r\n```python\r\n>>> interpretation = AsGrouped(f[\"E/Evt/hits\"], {'id': AsJagged(AsDtype('>i4')), 'dom_id': AsJagged(AsDtype('>i4')), 'channel_id': AsJagged(AsDtype('>u4')), 'tdc': AsJagged(AsDtype('>u4')),\r\n...  'tot': AsJagged(AsDtype('>u4')), 'trig': AsJagged(AsDtype('>i4')), 'pmt_id': AsJagged(AsDtype('>i4')), 'time': AsJagged(AsDtype('>f8')), 'charge': AsJagged(AsDtype('>f8')), 'pos_x': As\r\n... Jagged(AsDtype('>f8')), 'pos_y': AsJagged(AsDtype('>f8')), 'pos_z': AsJagged(AsDtype('>f8')), 'dir_x': AsJagged(AsDtype('>f8')), 'dir_y': AsJagged(AsDtype('>f8')), 'dir_z': AsJagged(AsD\r\n... type('>f8')), 'pure_time': AsJagged(AsDtype('>f8')), 'pure_charge': AsJagged(AsDtype('>f8')), 'type': AsJagged(AsDtype('>i4')), 'origin': AsJagged(AsDtype('>i4')), 'pattern_flags': AsJa\r\n... gged(AsDtype('>u4'))})\r\n```\r\n\r\nbut this will fail since those field names are stored also deeper in the structure, in a keys-dictionary (the dtype names are coupled to the branch names):\r\n\r\n```\r\nKeyInFileError: not found: 'id'\r\n\r\n    Available keys: 'hits.id', 'hits.tdc', 'hits.t', 'hits.a', 'hits.tot', 'hits.dir.x', 'hits.dir.y', 'hits.dir.z', 'hits.dom_id', 'hits.trig', 'hits.pmt_id', 'hits.type', 'hits.pos.x', 'hits.pos.y', 'hits.pos.z', 'hits.pure_t'...\r\n```\r\nI followed the stack trace and found myself in `HasBranches` where I came to the conclusion that it's not so trivial to hook into the attribute naming and remap those. I though I could introduce a `field_remap` dictionary (e.g. `{\"hits.dom_id\": \"dom_id\", `hits.t`: \"time\", ...}` etc.) somewhere, but it's not easy to see where it would fit the best to not mess around with low level mechanics and break other stuff (iterate, caching etc.), so clearly I need some advise from an expert (Jim \ud83d\ude09 ).\r\n\r\nMy next idea was to try to see what I can do on the `awkward1.Array` side since that feels more accessible and much safer, however, I could not figure out how to change field names after array initialisation. Maybe it's better to do this in uproot directly, no idea. In the end, it should also work with `iterate()` etc. where you already can select just a subset of the attributes, which is the way to hide the \"noisy fields\".\r\n\r\nSo maybe the most straightforward soulution is ff `iterate()` and `array()` would provide a `rename_fields` option, but as written above, I guess it will have to be propagated to quite a low level part of the code.\r\n\r\nSorry for the long issue, but I am sure you have some good ideas about how to deal with this and maybe I am not alone with these problems ;)\r\n",
  "closed_at":"2020-11-20T17:49:38Z",
  "comments":11,
  "created_at":"2020-11-16T11:14:36Z",
  "id":743749873,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NDM3NDk4NzM=",
  "number":192,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Usability improvements in wrapper libs - change the attribute name mapping in array()",
  "updated_at":"2020-11-20T20:25:20Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"The following is not working on uproot4 (I thought the equivalent worked in uproot 3, but no, sorry!):\r\n\r\n```python\r\nfor file in uproot.iterate(\"root://somepath/*root:Data\", [\"zData\", \"channel\"], step_size=\"1 GB\"):\r\n   print(file)\r\n```\r\n\r\nIf I specify the name of a single file, then it does work.\r\n\r\nI am using uproot4 0.1.2 with xrootd 4.12.3",
  "closed_at":"2024-01-30T16:00:23Z",
  "comments":5,
  "created_at":"2020-11-18T15:03:48Z",
  "id":745738763,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NDU3Mzg3NjM=",
  "number":193,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Wildcards on XRootD paths don't work",
  "updated_at":"2024-01-30T16:00:23Z",
  "user":"MDQ6VXNlcjYyOTMwMTE="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hi,\r\n\r\nI'm trying to reduce a very large sample by applying rectangular cuts. But the cuts are not been applied correctly.\r\nFor this, I'm following the tree iterator example in the tutorial.\r\n\r\n`\r\ntree = uproot4.open(\"file_MagDown.root:DecayTree\")\r\n\r\ntree_sel = []\r\n\r\nfor tree_sel in tree.iterate(cut=\"D_MM>1910 and D_MM<2030.\",step_size=100000):\r\n    print(repr(tree_sel))\r\n`\r\nWhen I plot the mass distribution using the returned tree (tree_sel), it shows that no cut has been applied.\r\n\r\nI'm doing something wrong or it's a bug? :/\r\n",
  "closed_at":"2020-11-19T17:41:14Z",
  "comments":5,
  "created_at":"2020-11-19T03:32:36Z",
  "id":746218003,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NDYyMTgwMDM=",
  "number":194,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Help: Cut application while iterating a tree is not working properly ",
  "updated_at":"2020-11-19T17:47:34Z",
  "user":"MDQ6VXNlcjM1NzQzNzc3"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-19T17:41:14Z",
  "comments":0,
  "created_at":"2020-11-19T17:22:11Z",
  "draft":false,
  "id":746778406,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTI0MTExOTQ1",
  "number":195,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-19T17:41:14Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixes lost cuts in iterate.",
  "updated_at":"2020-11-19T17:41:17Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Generalizing https://github.com/henryiii/uhi/blob/master/uhi/typing/plottable.py .",
  "closed_at":"2020-11-25T23:28:59Z",
  "comments":1,
  "created_at":"2020-11-19T20:46:27Z",
  "draft":false,
  "id":746912145,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTI0MjIyMzEw",
  "number":196,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-25T23:28:59Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Use the common histogram interface.",
  "updated_at":"2020-11-25T23:29:03Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hi,\r\nI'm in the process of using coffea for our new analysis framework (which relies on uproot4 to open files now) and noticed a dramatic slowdown especially in the preprocessing steps, which is essentially opening the files and collecting the number of events (https://github.com/CoffeaTeam/coffea/blob/384cc79a35f7874ac6399febbefa78741c7855fd/coffea/processor/executor.py#L909-L911). Turns out they're using uproot4 to do this task (instead of uproot3). I tried to \"reproduce\" this manually and found that uproot4 takes far more time than uproot3 in opening a file (see attached notebook for the experiments). I tried it on an example HZZ file and I see that uproot4 takes approx 13 ms more than uproot3. This effect magnifies when I use a larger dataset (nanoaod skim). While uproot4 takes around 2 seconds to open the file, uproot3 only takes 700ms or so. These times add up drastically when we try to open a lot of files while analyzing datasets and we lose out massively on performance. \r\n\r\nAttached notebook here : https://gist.github.com/bsathian/74667c4e7d321977217cdbe4975ecdb7",
  "closed_at":"2022-06-20T13:46:36Z",
  "comments":5,
  "created_at":"2020-11-20T06:06:13Z",
  "id":747193795,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NDcxOTM3OTU=",
  "number":197,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Requesting uproot4.num_entries function to quickly get the number of entries without fully reading the file",
  "updated_at":"2022-06-20T13:46:36Z",
  "user":"MDQ6VXNlcjQwODQxNDQ0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"I found a bug in the conversion from a TH2D with fSumW2 to a boost-histogram. The variance gets incorrectly transposed. Demo code:\r\n```py\r\nimport ROOT\r\nimport uproot4\r\n\r\nh = ROOT.TH2D(\"h\", \"\", 2, 0, 1, 2, 0, 1)\r\nh.SetBinContent(1, 1, 1)\r\nh.SetBinContent(1, 2, 2)\r\nh.SetBinContent(2, 1, 3)\r\nh.SetBinContent(2, 2, 4)\r\nh.SetBinError(1, 1, 1)\r\nh.SetBinError(1, 2, 2)\r\nh.SetBinError(2, 1, 3)\r\nh.SetBinError(2, 2, 4)\r\n\r\nf = ROOT.TFile.Open(\"foo.root\", \"recreate\")\r\nh.Write()\r\nf.Close()\r\n\r\nwith uproot4.open(\"foo.root\") as f:\r\n    h = f[\"h\"]\r\n\r\nhb = h.to_boost()\r\n\r\nval, err = h.values_errors()\r\nprint(\"values\")\r\nprint(val)\r\nprint(hb.view(True).value)\r\n\r\nprint(\"errors\")\r\nprint(err)\r\nprint(hb.view(True).variance ** 0.5)\r\n```\r\nReturns\r\n```\r\nvalues\r\n[[0. 0. 0. 0.]\r\n [0. 1. 2. 0.]\r\n [0. 3. 4. 0.]\r\n [0. 0. 0. 0.]]\r\n[[0. 0. 0. 0.]\r\n [0. 1. 2. 0.]\r\n [0. 3. 4. 0.]\r\n [0. 0. 0. 0.]]\r\nerrors\r\n[[0. 0. 0. 0.]\r\n [0. 1. 2. 0.]\r\n [0. 3. 4. 0.]\r\n [0. 0. 0. 0.]]\r\n[[0. 0. 0. 0.]\r\n [0. 1. 3. 0.]\r\n [0. 2. 4. 0.]\r\n [0. 0. 0. 0.]]\r\n```\r\nThe values are correct, but in the errors 2 and 3 are flipped.",
  "closed_at":"2020-11-25T23:28:59Z",
  "comments":7,
  "created_at":"2020-11-20T13:25:54Z",
  "id":747489270,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NDc0ODkyNzA=",
  "number":198,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Bug in conversion of TH2D with fSumW2 to boost-histogram (uproot4 0.1.2)",
  "updated_at":"2020-11-25T23:28:59Z",
  "user":"MDQ6VXNlcjI2MzE1ODY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-20T20:14:22Z",
  "comments":1,
  "created_at":"2020-11-20T19:58:16Z",
  "draft":false,
  "id":747757678,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTI0OTIxMjU2",
  "number":199,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-20T20:14:22Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Add fallback for wrong class version.",
  "updated_at":"2020-11-20T20:14:25Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-20T20:46:55Z",
  "comments":0,
  "created_at":"2020-11-20T20:36:24Z",
  "draft":false,
  "id":747778011,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTI0OTM4MTY1",
  "number":200,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-20T20:46:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Turn unknown EmptyArrays into known types.",
  "updated_at":"2020-11-20T20:46:59Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-20T23:50:29Z",
  "comments":1,
  "created_at":"2020-11-20T22:31:04Z",
  "draft":false,
  "id":747836368,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTI0OTg3MzU5",
  "number":201,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-20T23:50:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Minimally fix HTTP issues.",
  "updated_at":"2020-11-20T23:50:32Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-30T14:02:49Z",
  "comments":1,
  "created_at":"2020-11-24T16:46:52Z",
  "draft":false,
  "id":749873489,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTI2NjE4NjY0",
  "number":202,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-30T14:02:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Start writing the Uproot 3 to 4 cheat sheet.",
  "updated_at":"2020-11-30T14:02:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-24T19:20:23Z",
  "comments":0,
  "created_at":"2020-11-24T18:16:59Z",
  "draft":false,
  "id":749935046,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTI2NjY5OTM0",
  "number":203,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-24T19:20:23Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed #176 and made tests run in Python 2.7 (which is what the #176 bug was about).",
  "updated_at":"2020-11-24T19:20:26Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"```python\r\n>>> import uproot4\r\n>>> uproot4.__version__\r\n0.1.2\r\n```\r\n\r\nI stumbled upon a tiny bug. The `\"E/Evt/AAObject/usr_names\"` branch is a `std::vector<std::string>` and interpreted correctly in files where there is data, however if it's empty, it raises an `AttributeError` after hanging for a few seconds. It indicates that it's an empty array in the error message but then continues to call `_awkward_json_to_array` with a `form` data which is missing the `content`. Here is a sample file and the code to reproduce:\r\n\r\n[sample.root.zip](https://github.com/scikit-hep/uproot4/files/5596382/sample.root.zip)\r\n\r\n```python\r\nimport uproot4\r\nf = uproot4.open(\"sample.root\")\r\nf[\"E/Evt/AAObject/usr_names\"].show()\r\n```\r\ngives\r\n\r\n```python\r\nname                 | typename                 | interpretation                \r\n---------------------+--------------------------+-------------------------------\r\nusr_names            | std::vector<std::string> | AsObjects(AsVector(True, AsStr\r\n```\r\n\r\nThe `\"usr\"` subbranch works fine with empty data and gives a jagged array of empty arrays:\r\n\r\n```python\r\n>>> f[\"E/Evt/AAObject/usr\"].show()\r\nname                 | typename                 | interpretation                \r\n---------------------+--------------------------+-------------------------------\r\nusr                  | std::vector<double>      | AsJagged(AsDtype('>f8'), heade\r\n>>> f[\"E/Evt/AAObject/usr\"].array()\r\n<Array [[], [], [], [], ... [], [], [], []] type='307 * var * float64'>\r\n```\r\n\r\nHere is the full error when running `f[\"E/Evt/AAObject/usr_names\"]`:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-20-2ded08152b25> in <module>\r\n----> 1 f[\"E/Evt/AAObject/usr_names\"].array()\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py in array(self, interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, array_cache, library)\r\n   2070                         ranges_or_baskets.append((branch, basket_num, range_or_basket))\r\n   2071 \r\n-> 2072         _ranges_or_baskets_to_arrays(\r\n   2073             self,\r\n   2074             ranges_or_baskets,\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py in _ranges_or_baskets_to_arrays(hasbranches, ranges_or_baskets, branchid_interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, library, arrays)\r\n   3441 \r\n   3442         elif isinstance(obj, tuple) and len(obj) == 3:\r\n-> 3443             uproot4.source.futures.delayed_raise(*obj)\r\n   3444 \r\n   3445         else:\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot4/source/futures.py in delayed_raise(exception_class, exception_value, traceback)\r\n     44         exec(\"raise exception_class, exception_value, traceback\")\r\n     45     else:\r\n---> 46         raise exception_value.with_traceback(traceback)\r\n     47 \r\n     48 \r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot4/behaviors/TBranch.py in basket_to_array(basket)\r\n   3412 \r\n   3413             if len(basket_arrays) == branchid_num_baskets[branch.cache_key]:\r\n-> 3414                 arrays[branch.cache_key] = interpretation.final_array(\r\n   3415                     basket_arrays,\r\n   3416                     entry_start,\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot4/interpretation/objects.py in final_array(self, basket_arrays, entry_start, entry_stop, entry_offsets, library, branch)\r\n    228         )\r\n    229 \r\n--> 230         output = library.finalize(output, branch, self, entry_start, entry_stop)\r\n    231 \r\n    232         self.hook_after_final_array(\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot4/interpretation/library.py in finalize(self, array, branch, interpretation, entry_start, entry_stop)\r\n    506                 (_object_to_awkward_json(form, x) for x in array), highlevel=False\r\n    507             )\r\n--> 508             return awkward1.Array(_awkward_json_to_array(awkward1, form, unlabeled))\r\n    509 \r\n    510         elif array.dtype.names is not None:\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot4/interpretation/library.py in _awkward_json_to_array(awkward1, form, array)\r\n    370 \r\n    371         else:\r\n--> 372             content = _awkward_json_to_array(awkward1, form[\"content\"], array.content)\r\n    373             return type(array)(array.offsets, content, parameters=_awkward_p(form))\r\n    374 \r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot4/interpretation/library.py in _awkward_json_to_array(awkward1, form, array)\r\n    353     elif form[\"class\"][:15] == \"ListOffsetArray\":\r\n    354         if form[\"parameters\"].get(\"__array__\") == \"string\":\r\n--> 355             content = _awkward_json_to_array(awkward1, form[\"content\"], array.content)\r\n    356             return type(array)(array.offsets, content, parameters=_awkward_p(form))\r\n    357 \r\n\r\nAttributeError: 'awkward1._ext.EmptyArray' object has no attribute 'content'\r\n```\r\n\r\n",
  "closed_at":"2020-11-25T17:13:34Z",
  "comments":2,
  "created_at":"2020-11-25T11:42:12Z",
  "id":750746436,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NTA3NDY0MzY=",
  "number":205,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Empty array of std::vector<std::string> raises AttributeError ",
  "updated_at":"2020-11-25T17:17:55Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-11-25T17:13:34Z",
  "comments":0,
  "created_at":"2020-11-25T17:05:05Z",
  "draft":false,
  "id":750985398,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTI3NTg0ODU5",
  "number":206,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-25T17:13:34Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed #205.",
  "updated_at":"2020-11-25T17:13:37Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Needs tests, 2D and 3D TProfile.\r\n\r\nUsing internal DType info because https://github.com/scikit-hep/boost-histogram/pull/475 isn't ready yet.",
  "closed_at":"2020-11-30T14:40:55Z",
  "comments":1,
  "created_at":"2020-11-30T05:13:55Z",
  "draft":false,
  "id":753150171,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTI5MjgyODY5",
  "number":207,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-11-30T14:40:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"feat: support TProfile 1D conversion",
  "updated_at":"2020-11-30T14:40:58Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hello,\r\n\r\nI stumbled upon this error when attempting to read in certain branches of a ROOT file.\r\nI am using uproot4 version 0.1.2\r\n\r\nI have attached an example file:\r\n[test_file.zip](https://github.com/scikit-hep/uproot4/files/5615608/test_file.zip)\r\n\r\nI tried running this code:\r\n```import uproot4\r\nimport numpy as np\r\n\r\nwith uproot4.open('test_file.root') as file:\r\n    array = file['truth']['truelepton_dir'].array(library='np')\r\n```\r\n\r\nHere is the error I get:\r\n```---------------------------------------------------------------------------\r\nDeserializationError                      Traceback (most recent call last)\r\n<ipython-input-36-a0f69a7c1848> in <module>\r\n      9 with uproot4.open(filename) as file:\r\n---> 10     array = file['truth']['truelepton_dir'].array(library='np')\r\n     11     \r\n\r\n~/.local/lib/python3.7/site-packages/uproot4/behaviors/TBranch.py in array(self, interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, array_cache, library)\r\n   2067                         basket_num,\r\n   2068                         range_or_basket,\r\n-> 2069                     ) in branch.entries_to_ranges_or_baskets(entry_start, entry_stop):\r\n   2070                         ranges_or_baskets.append((branch, basket_num, range_or_basket))\r\n   2071 \r\n\r\n~/.local/lib/python3.7/site-packages/uproot4/behaviors/TBranch.py in entries_to_ranges_or_baskets(self, entry_start, entry_stop)\r\n   2621         read and interpreted.\r\n   2622         \"\"\"\r\n-> 2623         entry_offsets = self.entry_offsets\r\n   2624         out = []\r\n   2625         start = entry_offsets[0]\r\n\r\n~/.local/lib/python3.7/site-packages/uproot4/behaviors/TBranch.py in entry_offsets(self)\r\n   2239         num_entries_normal = out[-1]\r\n   2240 \r\n-> 2241         for basket in self.embedded_baskets:\r\n   2242             out.append(out[-1] + basket.num_entries)\r\n   2243 \r\n\r\n~/.local/lib/python3.7/site-packages/uproot4/behaviors/TBranch.py in embedded_baskets(self)\r\n   2597             cursor = self._cursor_baskets.copy()\r\n   2598             baskets = uproot4.models.TObjArray.Model_TObjArrayOfTBaskets.read(\r\n-> 2599                 self.tree.chunk, cursor, {}, self._file, self._file, self\r\n   2600             )\r\n   2601             with self._embedded_baskets_lock:\r\n\r\n~/.local/lib/python3.7/site-packages/uproot4/model.py in read(cls, chunk, cursor, context, file, selffile, parent, concrete)\r\n    777         )\r\n    778 \r\n--> 779         self.check_numbytes(chunk, cursor, context)\r\n    780 \r\n    781         self.hook_before_postprocess(\r\n\r\n~/.local/lib/python3.7/site-packages/uproot4/model.py in check_numbytes(self, chunk, cursor, context)\r\n    859             self.classname,\r\n    860             context,\r\n--> 861             getattr(self._file, \"file_path\"),\r\n    862         )\r\n    863 \r\n\r\n~/.local/lib/python3.7/site-packages/uproot4/deserialization.py in numbytes_check(chunk, start_cursor, stop_cursor, num_bytes, classname, context, file_path)\r\n    175                 stop_cursor,\r\n    176                 context,\r\n--> 177                 file_path,\r\n    178             )\r\n    179 \r\n\r\nDeserializationError: while reading\r\n\r\n    TObjArrayOfTBaskets version 3 as uproot4.models.TObjArray.Model_TObjArrayOfTBaskets (22925 bytes)\r\n        (base): <TObject None None at 0x7f121db48150>\r\n        fName: ''\r\n        fSize: 1\r\n        fLowerBound: 0\r\n\r\nexpected 22925 bytes but cursor moved by 30505 bytes (through TObjArrayOfTBaskets)\r\nin file Numu_test_file.root\r\n```\r\n\r\nI am very new to uproot and maybe I am doing something wrong here. If that is the case I would very much appreciate some suggestions on how to use it.\r\n\r\nMany thanks for your hard work!\r\n",
  "closed_at":"2020-12-05T00:31:55Z",
  "comments":2,
  "created_at":"2020-11-30T11:26:06Z",
  "id":753395065,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NTMzOTUwNjU=",
  "number":208,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"DeserializationError when attempting to convert a ROOT vector to an array",
  "updated_at":"2020-12-17T15:12:15Z",
  "user":"MDQ6VXNlcjQwNzg3NDcx"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Reading a TEfficiency object from [this](https://github.com/scikit-hep/uproot4/files/5618422/test.root.zip) file using\r\n\r\n```python\r\nimport uproot4\r\nfile = uproot4.open(\"test.root\")\r\nteff = file[\"TEfficiencyName\"]\r\n```\r\nresults in the following ```NotImplementedError```:\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nNotImplementedError                       Traceback (most recent call last)\r\n<ipython-input-20-a83e57b60271> in <module>\r\n      1 import uproot4\r\n      2 file = uproot4.open(\"test.root\")\r\n----> 3 teff = file[\"TEfficiencyName\"]\r\n\r\n~/pyvenv/lib64/python3.6/site-packages/uproot4/reading.py in __getitem__(self, where)\r\n   1977 \r\n   1978         else:\r\n-> 1979             return self.key(where).get()\r\n   1980 \r\n   1981     @property\r\n\r\n~/pyvenv/lib64/python3.6/site-packages/uproot4/reading.py in get(self)\r\n   2362 \r\n   2363             try:\r\n-> 2364                 out = cls.read(chunk, cursor, context, self._file, selffile, parent)\r\n   2365 \r\n   2366             except uproot4.deserialization.DeserializationError:\r\n\r\n~/pyvenv/lib64/python3.6/site-packages/uproot4/model.py in read(cls, chunk, cursor, context, file, selffile, parent, concrete)\r\n   1141         return cls.postprocess(\r\n   1142             versioned_cls.read(\r\n-> 1143                 chunk, cursor, context, file, selffile, parent, concrete=concrete\r\n   1144             ),\r\n   1145             chunk,\r\n\r\n~/pyvenv/lib64/python3.6/site-packages/uproot4/model.py in read(cls, chunk, cursor, context, file, selffile, parent, concrete)\r\n    771         )\r\n    772 \r\n--> 773         self.read_members(chunk, cursor, context, file)\r\n    774 \r\n    775         self.hook_after_read_members(\r\n\r\n<dynamic> in read_members(self, chunk, cursor, context, file)\r\n\r\n~/pyvenv/lib64/python3.6/site-packages/uproot4/containers.py in read(self, chunk, cursor, context, file, selffile, parent, header)\r\n    749                 \"\"\"memberwise serialization of {0}\r\n    750 in file {1}\"\"\".format(\r\n--> 751                     type(self).__name__, selffile.file_path\r\n    752                 )\r\n    753             )\r\n\r\nNotImplementedError: memberwise serialization of AsVector\r\nin file test.root\r\n```\r\n\r\nTested with uproot4 version: ```0.1.2```\r\n",
  "closed_at":"2021-02-18T15:00:59Z",
  "comments":2,
  "created_at":"2020-11-30T20:04:44Z",
  "id":753764517,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NTM3NjQ1MTc=",
  "number":209,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"NotImplementedError: memberwise serialization of AsVector when reading TEfficiency ",
  "updated_at":"2021-02-18T15:00:59Z",
  "user":"MDQ6VXNlcjM5MDcwNTc2"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Hello,\r\n\r\nNot sure if this is simply a feature that has not been implemented yet or me being incompetent and using this incorrectly, but I have been having some issues using uproot to read a test ATLAS AOD file I was wondering if you guys knew what may be causing this bug:\r\n\r\nThanks! And apologies if this is in the wrong place!\r\n-David\r\n\r\n(Version 0.1.2)\r\n\r\nFile: [myAOD.txt](https://github.com/scikit-hep/uproot4/files/5619826/myAOD.txt)\r\n(I just changed the extension so github lets me upload it)\r\n\r\nI ran:\r\n```\r\nimport uproot4\r\nfile=\"myAOD.root\"\r\nxAOD=uproot4.open(file)\r\nprint(xAOD.keys())\r\nArrays=xAOD['CollectionTree;1'].arrays()\r\nArray=xAOD['CollectionTree;1']['VrtSecInclusive_SecondaryVertices'].array()\r\n```\r\n\r\nand get for the last two lines:\r\n```\r\n---------------------------------------------------------------------------\r\nNotNumerical                              Traceback (most recent call last)\r\n~/.local/lib/python3.6/site-packages/uproot4/interpretation/identify.py in interpretation_of(branch, context, simplify)\r\n    365             else:\r\n--> 366                 from_dtype = _leaf_to_dtype(leaf).newbyteorder(\">\")\r\n    367 \r\n\r\n~/.local/lib/python3.6/site-packages/uproot4/interpretation/identify.py in _leaf_to_dtype(leaf)\r\n     98     elif leaf.classname == \"TLeafElement\":\r\n---> 99         return _ftype_to_dtype(leaf.member(\"fType\"))\r\n    100     else:\r\n\r\n~/.local/lib/python3.6/site-packages/uproot4/interpretation/identify.py in _ftype_to_dtype(fType)\r\n     67     else:\r\n---> 68         raise NotNumerical()\r\n     69 \r\n\r\nNotNumerical: \r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nRecursionError                            Traceback (most recent call last)\r\n<ipython-input-8-f538788c4bba> in <module>\r\n----> 1 xAOD['CollectionTree;1'].arrays()\r\n\r\n~/.local/lib/python3.6/site-packages/uproot4/behaviors/TBranch.py in arrays(self, expressions, cut, filter_name, filter_typename, filter_branch, aliases, language, entry_start, entry_stop, decompression_executor, interpretation_executor, array_cache, library, how)\r\n   1107             aliases,\r\n   1108             language,\r\n-> 1109             get_from_cache,\r\n   1110         )\r\n   1111 \r\n\r\n~/.local/lib/python3.6/site-packages/uproot4/behaviors/TBranch.py in _regularize_expressions(hasbranches, expressions, cut, filter_name, filter_typename, filter_branch, keys, aliases, language, get_from_cache)\r\n   3196         ):\r\n   3197             if not isinstance(\r\n-> 3198                 branch.interpretation,\r\n   3199                 (\r\n   3200                     uproot4.interpretation.identify.UnknownInterpretation,\r\n\r\n~/.local/lib/python3.6/site-packages/uproot4/behaviors/TBranch.py in interpretation(self)\r\n   2186             try:\r\n   2187                 self._interpretation = uproot4.interpretation.identify.interpretation_of(\r\n-> 2188                     self, {}\r\n   2189                 )\r\n   2190             except uproot4.interpretation.identify.UnknownInterpretation as err:\r\n\r\n~/.local/lib/python3.6/site-packages/uproot4/interpretation/identify.py in interpretation_of(branch, context, simplify)\r\n    438             out = uproot4.interpretation.objects.AsObjects(model_cls, branch)\r\n    439             if simplify:\r\n--> 440                 return out.simplify()\r\n    441             else:\r\n    442                 return out\r\n\r\n~/.local/lib/python3.6/site-packages/uproot4/interpretation/objects.py in simplify(self)\r\n    256                     header=False,\r\n    257                     tobject_header=True,\r\n--> 258                     original=self._model,\r\n    259                 )\r\n    260             except CannotBeStrided:\r\n\r\n~/.local/lib/python3.6/site-packages/uproot4/model.py in strided_interpretation(cls, file, header, tobject_header, original)\r\n   1021         versioned_cls = file.class_named(classname_decode(cls.__name__)[0], \"max\")\r\n   1022         return versioned_cls.strided_interpretation(\r\n-> 1023             file, header=header, tobject_header=tobject_header\r\n   1024         )\r\n   1025 \r\n\r\n<dynamic> in strided_interpretation(cls, file, header, tobject_header, original)\r\n\r\n... last 2 frames repeated, from the frame below ...\r\n\r\n~/.local/lib/python3.6/site-packages/uproot4/model.py in strided_interpretation(cls, file, header, tobject_header, original)\r\n   1021         versioned_cls = file.class_named(classname_decode(cls.__name__)[0], \"max\")\r\n   1022         return versioned_cls.strided_interpretation(\r\n-> 1023             file, header=header, tobject_header=tobject_header\r\n   1024         )\r\n   1025 \r\n\r\nRecursionError: maximum recursion depth exceeded in comparison\r\n\r\n```",
  "closed_at":"2020-12-04T22:45:08Z",
  "comments":2,
  "created_at":"2020-12-01T02:01:57Z",
  "id":753939985,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NTM5Mzk5ODU=",
  "number":210,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Issues with reading AOD files",
  "updated_at":"2020-12-04T22:45:08Z",
  "user":"MDQ6VXNlcjQ4MTk4NTY5"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-12-01T21:41:52Z",
  "comments":0,
  "created_at":"2020-12-01T15:53:48Z",
  "draft":false,
  "id":754514821,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTMwNDAyMTEy",
  "number":211,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-01T21:41:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"The great name change: uproot4 -> uproot.",
  "updated_at":"2020-12-01T21:41:56Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-12-02T14:46:17Z",
  "comments":0,
  "created_at":"2020-12-02T14:21:21Z",
  "draft":false,
  "id":755316271,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTMxMDUwMTQ2",
  "number":212,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-02T14:46:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Update names to henryiii/uhi#3 (histogram interface).",
  "updated_at":"2020-12-02T14:46:19Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-12-02T23:36:04Z",
  "comments":0,
  "created_at":"2020-12-02T15:24:09Z",
  "draft":false,
  "id":755369246,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTMxMDkyODc1",
  "number":213,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-02T23:36:04Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix documentation for histograms.",
  "updated_at":"2020-12-02T23:36:08Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"```python\r\n>>> import uproot\r\n>>> uproot.__version__\r\n'4.0.0rc3'\r\n```\r\n\r\nThis is similar to https://github.com/scikit-hep/uproot4/issues/205 but with a slight twist. Although it should in theory be similar since it derives from the same C++ class, in this case I guess the problem comes from the doubly jaggedness (each event has multiple `mc_trks` and each `mc_trk` has multiple `usr_names`) and thus the subbranch fails to return the empty array.\r\n\r\nHere is the file: \r\n[doubly_jagged_strvec.root.zip](https://github.com/scikit-hep/uproot4/files/5637555/doubly_jagged_strvec.root.zip)\r\n\r\n\r\nThe first branch uses the exact same branch path as mentioned in the #205 and works fine (just a jagged array):\r\n\r\n```python\r\n>>> f = uproot.open(\"doubly_jagged_strvec.root)\r\n>>> f[\"E/Evt/AAObject\"].show()\r\nname                 | typename                 | interpretation\r\n---------------------+--------------------------+-------------------------------\r\nAAObject             | (group of TObject:(group | AsGroup(<TBranchElement 'AAObjTObject              | (group of fUniqueID:u... | AsGroup(<TBranchElement 'TO...\r\nTObject/fUniqueID    | uint32_t                 | AsDtype('>u4')\r\nTObject/fBits        | uint32_t                 | AsDtype('>u4')\r\nusr_data             | vector<AAny>             | AsGroup(<TBranchElement 'us...\r\nusr_data/usr_data... | AAny::Holder_base**      | AsObjects(AsArray(True, Fal...\r\nusr_names            | std::vector<std::string> | AsObjects(AsVector(True, As...\r\n\r\n>>> f[\"E/Evt/AAObject/usr_names\"].interpretation\r\nAsObjects(AsVector(True, AsString(False)))\r\n\r\n>>> f[\"E/Evt/AAObject/usr_names\"].array()\r\n<Array [[], [], [], [], ... [], [], [], []] type='10 * var * string'>\r\n```\r\n\r\nHere is the branch which causes trouble, using the same C++ inheritance behind the scenes (from `AAObject`):\r\n\r\n```python\r\n>>> f[\"E/Evt/mc_trks/mc_trks.usr_names\"].show()\r\nname                 | typename                 | interpretation\r\n---------------------+--------------------------+-------------------------------\r\nmc_trks.usr_names    | std::vector<std::string> | AsObjects(AsArray(True, False,\r\n\r\n>>> f[\"E/Evt/mc_trks/mc_trks.usr_names\"].interpretation\r\nAsObjects(AsArray(True, False, AsVector(False, AsString(False))))\r\n\r\n>>> f[\"E/Evt/mc_trks/mc_trks.usr_names\"].array()\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-11-727a5c48c9c8> in <module>\r\n----> 1 f[\"E/Evt/mc_trks/mc_trks.usr_names\"].array()\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot/behaviors/TBranch.py in array(self, interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, array_cache, library)\r\n   2057                         ranges_or_baskets.append((branch, basket_num, range_or_basket))\r\n   2058\r\n-> 2059         _ranges_or_baskets_to_arrays(\r\n   2060             self,\r\n   2061             ranges_or_baskets,\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot/behaviors/TBranch.py in _ranges_or_baskets_to_arrays(hasbranches, ranges_or_baskets, branchid_interpretation, entry_start, entry_stop, decompression_executor, interpretation_executor, library, arrays)\r\n   3428\r\n   3429         elif isinstance(obj, tuple) and len(obj) == 3:\r\n-> 3430             uproot.source.futures.delayed_raise(*obj)\r\n   3431\r\n   3432         else:\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot/source/futures.py in delayed_raise(exception_class, exception_value, traceback)\r\n     44         exec(\"raise exception_class, exception_value, traceback\")\r\n     45     else:\r\n---> 46         raise exception_value.with_traceback(traceback)\r\n     47\r\n     48\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot/behaviors/TBranch.py in basket_to_array(basket)\r\n   3399\r\n   3400             if len(basket_arrays) == branchid_num_baskets[branch.cache_key]:\r\n-> 3401                 arrays[branch.cache_key] = interpretation.final_array(\r\n   3402                     basket_arrays,\r\n   3403                     entry_start,\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot/interpretation/objects.py in final_array(self, basket_arrays, entry_start, entry_stop, entry_offsets, library, branch)\r\n    219         )\r\n    220\r\n--> 221         output = library.finalize(output, branch, self, entry_start, entry_stop)\r\n    222\r\n    223         self.hook_after_final_array(\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot/interpretation/library.py in finalize(self, array, branch, interpretation, entry_start, entry_stop)\r\n    515                 (_object_to_awkward_json(form, x) for x in array), highlevel=False\r\n    516             )\r\n--> 517             return awkward.Array(_awkward_json_to_array(awkward, form, unlabeled))\r\n    518\r\n    519         elif array.dtype.names is not None:\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot/interpretation/library.py in _awkward_json_to_array(awkward, form, array)\r\n    381\r\n    382         else:\r\n--> 383             content = _awkward_json_to_array(awkward, form[\"content\"], array.content)\r\n    384             return type(array)(array.offsets, content, parameters=_awkward_p(form))\r\n    385\r\n\r\n~/Dev/km3io/venv/lib/python3.8/site-packages/uproot/interpretation/library.py in _awkward_json_to_array(awkward, form, array)\r\n    381\r\n    382         else:\r\n--> 383             content = _awkward_json_to_array(awkward, form[\"content\"], array.content)\r\n    384             return type(array)(array.offsets, content, parameters=_awkward_p(form))\r\n    385\r\n\r\nAttributeError: 'awkward._ext.EmptyArray' object has no attribute 'content'\r\n```\r\n\r\nMany thanks in advance for any hints/fixes \ud83d\ude48 ",
  "closed_at":"2020-12-04T23:21:30Z",
  "comments":1,
  "created_at":"2020-12-03T16:48:46Z",
  "id":756370192,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NTYzNzAxOTI=",
  "number":214,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Empty array of doubly jagged std::vector<std::string> raises AttributeError",
  "updated_at":"2020-12-04T23:21:30Z",
  "user":"MDQ6VXNlcjE3MzAzNTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-12-04T00:21:49Z",
  "comments":0,
  "created_at":"2020-12-04T00:10:17Z",
  "draft":false,
  "id":756688802,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTMyMTk4MjA1",
  "number":215,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-04T00:21:49Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Rename 'master' branch to 'main'.",
  "updated_at":"2020-12-04T00:21:52Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-12-04T22:45:08Z",
  "comments":0,
  "created_at":"2020-12-04T21:35:16Z",
  "draft":false,
  "id":757422018,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTMyODAyMjIz",
  "number":216,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-04T22:45:08Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix infinite recursion in strided_interpretation and awkward_form.",
  "updated_at":"2020-12-04T22:45:11Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-12-04T23:21:30Z",
  "comments":0,
  "created_at":"2020-12-04T23:11:23Z",
  "draft":false,
  "id":757466032,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTMyODM4NjQ1",
  "number":217,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-04T23:21:29Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix EmptyArrays for all cases in _awkward_json_to_array.",
  "updated_at":"2020-12-04T23:21:33Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-12-05T00:31:55Z",
  "comments":1,
  "created_at":"2020-12-05T00:14:08Z",
  "draft":false,
  "id":757486328,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTMyODU1NDY0",
  "number":218,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-05T00:31:55Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix the way we determine if an embedded TBasket is jagged.",
  "updated_at":"2020-12-05T00:31:58Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"The only change needed to catch up to\r\n\r\nhttps://github.com/henryiii/uhi/blob/9fcfdc6158c686e58dfd31728b0aef4bd9572abe/uhi/typing/plottable.py\r\n\r\nwas to rename `interpretation` as `kind` and make its output all upper-case.\r\n\r\n@henryiii @HDembinski, this should be ready for the non-release-candidate release, which I'll be starting now (first Awkward Array, then Uproot; should be about half an hour).",
  "closed_at":"2020-12-05T17:43:16Z",
  "comments":1,
  "created_at":"2020-12-05T17:32:17Z",
  "draft":false,
  "id":757743749,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTMzMDY2Mjcz",
  "number":219,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-05T17:43:16Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Catch up to the latest histogram protocol.",
  "updated_at":"2020-12-06T09:52:46Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"Loading the following ROOT file (from the starterkit lessions) produces an OSError. Worked with uproot3 before.\r\n\r\n## Example code\r\n\r\n\r\n```\r\nf = uproot.open('https://starterkit.web.cern.ch/starterkit/data/advanced-python-2019/RD_distribution.root')\r\ntree = f['tree']\r\ntree.arrays(library='pd')  # fails here\r\n```\r\n\r\nwhile it works with uproot3\r\n```\r\nf = uproot3.open('https://starterkit.web.cern.ch/starterkit/data/advanced-python-2019/RD_distribution.root',)\r\ntree = f['tree']\r\ntree.pandas.df()\r\n```\r\n\r\nraises: `OSError: unrecognized byte range in headers of HTTP multipart: '308-37016'\r\nfor URL https://starterkit.web.cern.ch/starterkit/data/advanced-python-2019/RD_distribution.root\r\n`\r\n\r\n",
  "closed_at":"2020-12-07T22:22:20Z",
  "comments":2,
  "created_at":"2020-12-07T01:14:07Z",
  "id":758080336,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NTgwODAzMzY=",
  "number":220,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"OSError when opening over HTTPS",
  "updated_at":"2020-12-08T14:35:04Z",
  "user":"MDQ6VXNlcjE3NDU0ODQ4"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-12-07T22:22:20Z",
  "comments":0,
  "created_at":"2020-12-07T22:15:42Z",
  "draft":false,
  "id":758892287,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTMzOTgyMjg4",
  "number":221,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-07T22:22:20Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Some HTTP servers combine contiguous byte ranges.",
  "updated_at":"2020-12-07T22:22:23Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"i am using uproot version 4. I have the bug since the latest update with `pip install uproot`\r\n\r\nI do the following:\r\nI would expect the two prints to give me the same result: [0., 1., 3.]\r\nHowever edges() returns [0.,1.5, 3.].\r\nIt seems it ignores the variable binning.\r\n\r\n```\r\nimport uproot\r\nhist = uproot.open('test.root:hist')\r\nprint(hist.axis(0).edges())\r\nprint(hist.member(\"fXaxis\").member(\"fXbins\"))\r\n```\r\n\r\nI attached the root file as test.txt\r\n[test.txt](https://github.com/scikit-hep/uproot4/files/5660279/test.txt)\r\n",
  "closed_at":"2020-12-08T16:28:17Z",
  "comments":1,
  "created_at":"2020-12-08T15:51:56Z",
  "id":759559271,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NTk1NTkyNzE=",
  "number":222,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"TH1 with variable binning: incorrect bin edges",
  "updated_at":"2020-12-08T16:28:17Z",
  "user":"MDQ6VXNlcjI2MjgyMTY1"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-12-08T16:28:17Z",
  "comments":0,
  "created_at":"2020-12-08T16:05:55Z",
  "draft":false,
  "id":759571367,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTM0NTUzODE1",
  "number":223,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-08T16:28:17Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix variable binning in histograms (off by one error in check).",
  "updated_at":"2020-12-08T16:28:21Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"When I try to use uproot in parallel tasks with `ProcessPoolExecutor` from `concurrent.futures` it hangs when I have previously call [`glob`](https://github.com/benkrikler/xrootd/blob/a22f92489a3078ea1d662e0fb1f9131643bef1e9/bindings/python/libs/client/glob_funcs.py#L113) from `XRootD.client.glob_funcs`.\r\n\r\nIt hangs inside `ProcessPoolExectutor` when i try this:\r\n```python\r\nfrom concurrent import futures\r\nfrom XRootD.client.glob_funcs import glob\r\nimport uproot\r\n\r\ndef simple_func(input_path, tree):\r\n    return [uproot.open(input_path)[tree].num_entries]\r\n\r\ninput_data = glob(\"root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012B_DoubleMuParked.root\")\r\ntree = 'Events'\r\n\r\nprint(\"Input Data: {}\".format(input_data))\r\nprint(\"Starting ProcessPoolExectutor\")\r\nwith futures.ProcessPoolExecutor(max_workers=1) as executor:\r\n    tasks = set()\r\n    tasks.update(executor.submit(simple_func, path, tree) for path in input_data)            \r\n    complete_tasks = futures.as_completed(tasks)\r\n\r\n    for job in complete_tasks:\r\n        print(job.result())\r\n```\r\n\r\nIf I just switch `glob` for a list (`['root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012B_DoubleMuParked.root']`) for `inputData` this works. If I use xrootd glob and open up the file in uproot without using `ProcessPoolExectutor` it works too. I wonder if there some cpu locking issue when using `xrootd`, `uproot` and `concurrent.futures` together?\r\n\r\nVersions:\r\n```\r\nPython 3.8.2\r\nawkward==1.0.0\r\nuproot==4.0.0\r\nxrootd===5.0.3-\r\n```\r\n\r\n",
  "closed_at":"2021-02-18T16:46:01Z",
  "comments":3,
  "created_at":"2020-12-10T17:42:12Z",
  "id":761454282,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NjE0NTQyODI=",
  "number":224,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"uproot stalls in concurrent.futures when xrootd_glob is used",
  "updated_at":"2021-02-19T10:12:08Z",
  "user":"MDQ6VXNlcjMyNTIyNTk0"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"I'm playing with cutting edge NumPy and I got some warnings in unit tests from deprecations triggered in uproot. [NumPy v1.20 deprecates](https://numpy.org/devdocs/release/1.20.0-notes.html#using-the-aliases-of-builtin-types-like-np-int-is-deprecated) using `numpy.builtin` over `builtin` (e.g. `numpy.object` instead of `object`). The one change in this PR that I'm not sure about is `numpy.long --> numpy.compat.long`. This is necessary if uproot4 is supporting Python 2, but if Python 3 is required the change can be `numpy.long --> int`.",
  "closed_at":"2020-12-12T17:11:36Z",
  "comments":4,
  "created_at":"2020-12-11T23:01:55Z",
  "draft":false,
  "id":763023012,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTM3NTE0NTAx",
  "number":226,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-12T17:11:36Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fix warnings associated with NumPy deprecations.",
  "updated_at":"2020-12-17T21:16:05Z",
  "user":"MDQ6VXNlcjMyMDIwOTA="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"### Setup information\r\n\r\n```\r\nuproot.__version__\r\n'4.0.1rc2'\r\n```\r\nbut also `4.0.0`\r\n\r\n### Description\r\n\r\nI opened a file,\r\n\r\n```\r\nfilepath = \"./bla.root\"\r\ndata = uproot.open(filepath)\r\ndata[\"name\"]\r\n```\r\n\r\nwith `name` an object of type `TH1F`, `TH2F`, and `TProfile2D` respectively.\r\n\r\nOnly the latter couldn't be opened, resulting in the following error trace,\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-21-b1df794c6084> in <module>\r\n----> 1 data[\"DirLookupTable_degrees_type7\"]\r\n\r\n~/Applications/miniconda3/envs/uproot4/lib/python3.9/site-packages/uproot/reading.py in __getitem__(self, where)\r\n   1969 \r\n   1970         else:\r\n-> 1971             return self.key(where).get()\r\n   1972 \r\n   1973     @property\r\n\r\n~/Applications/miniconda3/envs/uproot4/lib/python3.9/site-packages/uproot/reading.py in get(self)\r\n   2354 \r\n   2355             try:\r\n-> 2356                 out = cls.read(chunk, cursor, context, self._file, selffile, parent)\r\n   2357 \r\n   2358             except uproot.deserialization.DeserializationError:\r\n\r\n~/Applications/miniconda3/envs/uproot4/lib/python3.9/site-packages/uproot/model.py in read(cls, chunk, cursor, context, file, selffile, parent, concrete)\r\n   1155 \r\n   1156         elif num_bytes is not None:\r\n-> 1157             versioned_cls = cls.new_class(file, version)\r\n   1158 \r\n   1159         elif context.get(\"in_TBranch\", False):\r\n\r\n~/Applications/miniconda3/envs/uproot4/lib/python3.9/site-packages/uproot/model.py in new_class(cls, file, version)\r\n   1094 \r\n   1095         if streamer is not None:\r\n-> 1096             versioned_cls = streamer.new_class(file)\r\n   1097             versioned_cls.class_streamer = streamer\r\n   1098             cls.known_versions[streamer.class_version] = versioned_cls\r\n\r\n~/Applications/miniconda3/envs/uproot4/lib/python3.9/site-packages/uproot/streamers.py in new_class(self, file)\r\n    345         class_name = uproot.model.classname_encode(self.name, self.class_version)\r\n    346         classes = uproot.model.maybe_custom_classes(file.custom_classes)\r\n--> 347         return uproot.deserialization.compile_class(\r\n    348             file, classes, class_code, class_name\r\n    349         )\r\n\r\n~/Applications/miniconda3/envs/uproot4/lib/python3.9/site-packages/uproot/deserialization.py in compile_class(file, classes, class_code, class_name)\r\n     77     setattr(uproot.dynamic, out.__name__, out)\r\n     78 \r\n---> 79     behaviors = tuple(_yield_all_behaviors(out, c))\r\n     80     exclude = tuple(\r\n     81         bad for cls in behaviors if hasattr(cls, \"no_inherit\") for bad in cls.no_inherit\r\n\r\n~/Applications/miniconda3/envs/uproot4/lib/python3.9/site-packages/uproot/deserialization.py in _yield_all_behaviors(cls, c)\r\n     31 \r\n     32 def _yield_all_behaviors(cls, c):\r\n---> 33     behavior_cls = uproot.behavior_of(uproot.model.classname_decode(cls.__name__)[0])\r\n     34     if behavior_cls is not None:\r\n     35         yield behavior_cls\r\n\r\n~/Applications/miniconda3/envs/uproot4/lib/python3.9/site-packages/uproot/__init__.py in behavior_of(classname)\r\n    194     if name not in globals():\r\n    195         if name in behavior_of._module_names:\r\n--> 196             exec(\r\n    197                 compile(\r\n    198                     \"import uproot.behaviors.{0}\".format(name), \"<dynamic>\", \"exec\"\r\n\r\n~/Applications/miniconda3/envs/uproot4/lib/python3.9/site-packages/uproot/__init__.py in <module>\r\n\r\n~/Applications/miniconda3/envs/uproot4/lib/python3.9/site-packages/uproot/behaviors/TProfile2D.py in <module>\r\n     13 \r\n     14 \r\n---> 15 class TProfile2D(uproot.behaviors.TProfile.Profile):\r\n     16     \"\"\"\r\n     17     Behaviors for two-dimensional profiles: ROOT's ``TProfile2D``.\r\n\r\nAttributeError: module 'uproot.behaviors' has no attribute 'TProfile'\r\n```\r\n### Further investigation\r\n\r\nI created 2 dummy files with a `TProfile2D` and a `TProfile3D` (`TProfile` didn't manifest this error) with which I tested both the error (to exclude an issue with my particular data) and the proposed solution below,\r\n\r\n[TProfile2D.txt](https://github.com/scikit-hep/uproot4/files/5682037/TProfile2D.txt)\r\n[TProfile3D.txt](https://github.com/scikit-hep/uproot4/files/5682038/TProfile3D.txt)\r\n\r\nI also leave you the code I used to make them,\r\n\r\n[write_dummy_TProfile2D.txt](https://github.com/scikit-hep/uproot4/files/5682041/write_dummy_TProfile2D.txt)\r\n[write_dummy_TProfile3D.txt](https://github.com/scikit-hep/uproot4/files/5682042/write_dummy_TProfile3D.txt)\r\n\r\n### Proposed solution\r\n\r\nI managed to solve the problem by modifying some imports statements in `TProfile2D.py`,\r\n\r\n```python\r\nfrom uproot.behaviors import TProfile, TH2\r\n\r\nclass TProfile2D(TProfile.Profile):\r\n\r\n     no_inherit = (TH2.TH2,)\r\n```\r\n\r\nand `TProfile3D.py`,\r\n\r\n```python\r\nfrom uproot.behaviors import TProfile, TH3\r\n\r\nclass TProfile3D(TProfile.Profile):\r\n\r\n    no_inherit = (TH3.TH3,)\r\n```\r\n\r\nIf this is supposed to be the right way to do it, I'd be happy to contribute by opening a PR.\r\nThe dummy files could be also used to create unit-tests to open such ROOT objects.",
  "closed_at":"2020-12-21T17:04:53Z",
  "comments":12,
  "created_at":"2020-12-11T23:39:47Z",
  "id":763057491,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NjMwNTc0OTE=",
  "number":227,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"Cannot read TProfile2D or TProfile2D from file",
  "updated_at":"2020-12-21T17:04:53Z",
  "user":"MDQ6VXNlcjE3ODM2NjEw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"Fixes #227 ",
  "closed_at":"2020-12-21T17:04:53Z",
  "comments":2,
  "created_at":"2020-12-12T09:44:38Z",
  "draft":false,
  "id":763515297,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTM3OTYxNDQy",
  "number":228,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-21T17:04:52Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Fixed bug that prevented to read TProfile2D/TProfile3D",
  "updated_at":"2020-12-21T17:04:53Z",
  "user":"MDQ6VXNlcjE3ODM2NjEw"
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"This is an attempt to modernize the setup. This fixes the issue with https://github.com/conda-forge/uproot-feedstock/pull/73 - and is generally much cleaner and nicer being declarative.\r\n",
  "closed_at":"2020-12-18T17:35:50Z",
  "comments":15,
  "created_at":"2020-12-17T04:51:39Z",
  "draft":false,
  "id":769515013,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTQxNjAwMjc2",
  "number":231,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-18T17:35:50Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"refactor: modernize setup",
  "updated_at":"2021-01-23T20:33:17Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"",
  "closed_at":"2020-12-17T17:49:41Z",
  "comments":0,
  "created_at":"2020-12-17T17:09:25Z",
  "draft":false,
  "id":770220585,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTQyMDA0NTMy",
  "number":232,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-17T17:49:41Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"Test two rows of badges.",
  "updated_at":"2020-12-17T17:49:44Z",
  "user":"MDQ6VXNlcjE4NTI0NDc="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"See #231. I'm cherry picking the addition there to verify it is working.",
  "closed_at":"2020-12-18T17:31:39Z",
  "comments":2,
  "created_at":"2020-12-18T02:38:42Z",
  "draft":false,
  "id":770519264,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTQyMjUwMTQ3",
  "number":233,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":null
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"tests: pip install",
  "updated_at":"2022-09-23T00:43:44Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"The bin edge meanings are not transposed, but rather the values are changed!\r\nUproot4 indicates the histogram is a `TH2F (version 3)`\r\n\r\n```python3\r\nimport numpy as np\r\nimport uproot\r\nimport uproot3  # NB: uproot3 agrees with pyroot\r\nf = uproot.open('https://github.com/CoffeaTeam/coffea/raw/master/tests/samples/testSF2d.histo.root')\r\nhist = f['scalefactors_Tight_Electron']\r\nedges = hist.axes[0].edges()\r\n\r\nprint(edges)\r\n\r\nf3 = uproot3.open('https://github.com/CoffeaTeam/coffea/raw/master/tests/samples/testSF2d.histo.root')\r\nhist3 = f[b'scalefactors_Tight_Electron']\r\nedges3 = hist3.edges[0]\r\n\r\nprint(edges3)\r\n\r\nassert np.all(edges == edges3)\r\n```\r\ngives you:\r\n```\r\n[-2.5 -2.  -1.5 -1.  -0.5  0.   0.5  1.   1.5  2.   2.5]\r\n[-2.5   -2.    -1.566 -1.444 -0.8    0.     0.8    1.444  1.566  2.\r\n  2.5  ]\r\nTraceback (most recent call last):\r\n  File \"bug.py\", line 17, in <module>\r\n    assert np.all(edges == edges3)\r\nAssertionError\r\n```\r\n\r\n",
  "closed_at":"2020-12-18T20:27:48Z",
  "comments":2,
  "created_at":"2020-12-18T20:17:36Z",
  "id":771145603,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NzExNDU2MDM=",
  "number":234,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"TH2F is not read properly from file (does not agree with pyroot)",
  "updated_at":"2020-12-18T20:35:16Z",
  "user":"MDQ6VXNlcjEwNjgwODk="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"CONTRIBUTOR",
  "body":"On line 108 of `TH1.py`, `kind` raises `COUNT` instead of returning it, leading to the error:\r\n```\r\n----> 1 hasattr(a, 'kind')\r\n\r\n/usr/lib/python3.9/site-packages/uproot/behaviors/TH1.py in kind(self)\r\n    106         ``\"MEAN\"`` for profile plots (TProfile*).\r\n    107         \"\"\"\r\n--> 108         raise \"COUNT\"\r\n    109\r\n    110     def values(self, flow=False):\r\n\r\nTypeError: exceptions must derive from BaseException\r\n```",
  "closed_at":"2020-12-31T17:16:24Z",
  "comments":3,
  "created_at":"2020-12-31T11:56:30Z",
  "id":776936885,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3NzY5MzY4ODU=",
  "number":235,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"TH1 raises `kind` instead of returning",
  "updated_at":"2020-12-31T17:20:45Z",
  "user":"MDQ6VXNlcjM3Mjc5MjU="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"MEMBER",
  "body":"Fixes #235\ufeff\n",
  "closed_at":"2020-12-31T17:16:24Z",
  "comments":0,
  "created_at":"2020-12-31T17:10:17Z",
  "draft":false,
  "id":777088766,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDExOlB1bGxSZXF1ZXN0NTQ3NDcwNjEx",
  "number":236,
  "performed_via_github_app":null,
  "pull_request":{
   "merged_at":"2020-12-31T17:16:24Z"
  },
  "reactions":{},
  "state":"closed",
  "state_reason":null,
  "title":"fix: kind was not implemented on normal histograms",
  "updated_at":"2020-12-31T17:16:27Z",
  "user":"MDQ6VXNlcjQ2MTY5MDY="
 },
 {
  "active_lock_reason":null,
  "assignee":null,
  "assignees":null,
  "author_association":"NONE",
  "body":"This is a continuation of https://stackoverflow.com/questions/62519766/parsing-a-struct-using-2d-arrays-using-uproot/62520558#62520558 \r\n\r\nJim, \r\n\r\n  Thanks, for the fix on StackExchange.  Here is a small root file along with the macro that generated it so that you can test the automated interpretation.\r\n\r\n[2DinStruct.root.gz](https://github.com/scikit-hep/uproot/files/4827751/2DinStruct.root.gz)\r\n[Test2DinStruct.C.gz](https://github.com/scikit-hep/uproot/files/4827753/Test2DinStruct.C.gz)\r\n\r\nRon\r\n",
  "closed_at":"2021-02-18T16:46:24Z",
  "comments":7,
  "created_at":"2020-06-24T20:32:01Z",
  "id":792078979,
  "labels":null,
  "locked":false,
  "milestone":null,
  "node_id":"MDU6SXNzdWU3OTIwNzg5Nzk=",
  "number":252,
  "performed_via_github_app":null,
  "reactions":{},
  "state":"closed",
  "state_reason":"completed",
  "title":"parsing a struct with 2D arrays",
  "updated_at":"2021-02-18T16:46:24Z",
  "user":"MDQ6VXNlcjg1MTc5NzU="
 }
]